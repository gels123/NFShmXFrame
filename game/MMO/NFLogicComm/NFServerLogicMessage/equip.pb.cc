// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: equip.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "equip.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* equipequipattributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipequipattributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* equipequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  equipequip_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_equipequip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_equipequip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_equip_2eproto() {
  protobuf_AddDesc_equip_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "equip.proto");
  GOOGLE_CHECK(file != NULL);
  equipequipattributeDesc_descriptor_ = file->message_type(0);
  static const int equipequipattributeDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, valuemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, valuemax_),
  };
  equipequipattributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipequipattributeDesc_descriptor_,
      equipequipattributeDesc::default_instance_,
      equipequipattributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequipattributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipequipattributeDesc));
  equipequip_descriptor_ = file->message_type(1);
  static const int equipequip_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, wearquality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, professionlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattributedown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattributeup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattribute_typelibrary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattribute_valuemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, refineattribute_valuemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestarnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestar_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestar_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, bluestar_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, iscanbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, istradebind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, sellprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, combat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, broadcast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, meltingresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, attribute_),
  };
  equipequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      equipequip_descriptor_,
      equipequip::default_instance_,
      equipequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(equipequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(equipequip));
  Sheet_equipequip_descriptor_ = file->message_type(2);
  static const int Sheet_equipequip_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipequip, equipequip_list_),
  };
  Sheet_equipequip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_equipequip_descriptor_,
      Sheet_equipequip::default_instance_,
      Sheet_equipequip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipequip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_equipequip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_equipequip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_equip_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipequipattributeDesc_descriptor_, &equipequipattributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    equipequip_descriptor_, &equipequip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_equipequip_descriptor_, &Sheet_equipequip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_equip_2eproto() {
  delete equipequipattributeDesc::default_instance_;
  delete equipequipattributeDesc_reflection_;
  delete equipequip::default_instance_;
  delete equipequip_reflection_;
  delete Sheet_equipequip::default_instance_;
  delete Sheet_equipequip_reflection_;
}

void protobuf_AddDesc_equip_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013equip.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"u\n\027equipequipattributeDesc\022\"\n\010val"
    "ueMin\030\001 \001(\005B\020\302\377\024\014\346\234\200\345\260\217\346\225\260\345\200\274\022\022\n\004type\030\002 "
    "\001(\005B\004\302\377\024\000\022\"\n\010valueMax\030\003 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346"
    "\225\260\345\200\274\"\216\n\n\nequipequip\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\350\243"
    "\205\345\244\207ID\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\350\243\205\345\244\207\345\220\215\347\247\260\220\301"
    "\024<\022%\n\013wearQuality\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\351\230"
    "\266\022\"\n\010position\030\004 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\344\275\215\347\275\256\022(\n"
    "\nprofession\030\005 \001(\tB\024\302\377\024\014\350\201\214\344\270\232\351\231\220\345\210\266\220\301\024<\022"
    "&\n\014professionLv\030\006 \001(\005B\020\302\377\024\014\350\275\254\350\201\214\347\255\211\347\272\247\022"
    "%\n\005level\030\007 \001(\005B\026\302\377\024\022\347\251\277\346\210\264\347\255\211\347\272\247\351\231\220\345\210\266\022!"
    "\n\007quality\030\010 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\350\264\250\022\036\n\004sta"
    "r\030\t \001(\005B\020\302\377\024\014\350\243\205\345\244\207\346\230\237\347\272\247\0229\n\023refineAttri"
    "buteDown\030\n \001(\005B\034\302\377\024\030\346\230\237\347\272\247\345\261\236\346\200\247\346\225\260\351\207\217\344\270"
    "\213\351\231\220\0227\n\021refineAttributeUp\030\013 \001(\005B\034\302\377\024\030\346\230\237"
    "\347\272\247\345\261\236\346\200\247\346\225\260\351\207\217\344\270\212\351\231\220\022B\n\033refineAttribute"
    "_typeLibrary\030\014 \001(\tB\035\302\377\024\025\351\232\217\346\234\272\346\230\237\347\272\247\345\261\236\346"
    "\200\247\345\272\223\220\301\024<\022\?\n\030refineAttribute_valueMin\030\r "
    "\001(\tB\035\302\377\024\025\346\230\237\347\272\247\345\261\236\346\200\247\346\234\200\345\260\217\345\200\274\220\301\024<\022\?\n\030re"
    "fineAttribute_valueMax\030\016 \001(\tB\035\302\377\024\025\346\230\237\347\272\247"
    "\345\261\236\346\200\247\346\234\200\345\244\247\345\200\274\220\301\024<\0221\n\013blueStarNum\030\017 \001(\005"
    "B\034\302\377\024\030\350\223\235\350\211\262\346\230\237\347\272\247\345\261\236\346\200\247\346\235\241\346\225\260\022:\n\rblueSt"
    "ar_type\030\020 \001(\tB#\302\377\024\033\350\223\235\350\211\262\346\230\237\347\272\247\345\261\236\346\200\247\347\261\273"
    "\345\236\213\345\272\223\220\301\024<\0228\n\013blueStar_lv\030\021 \001(\tB#\302\377\024\033\350\223\235"
    "\350\211\262\346\230\237\347\272\247\347\255\211\347\272\247\351\227\264\351\232\224\345\267\256\220\301\024<\022<\n\017blueStar"
    "_number\030\022 \001(\tB#\302\377\024\033\350\223\235\350\211\262\346\230\237\347\272\247\346\257\217\347\272\247\345\242\236"
    "\345\212\240\345\200\274\220\301\024<\022#\n\tisCanbind\030\023 \001(\005B\020\302\377\024\014\346\230\257\345\220"
    "\246\347\273\221\345\256\232\022+\n\013isTradeBind\030\024 \001(\005B\026\302\377\024\022\346\230\257\345\220\246"
    "\344\272\244\346\230\223\347\273\221\345\256\232\022#\n\tsellPrice\030\025 \001(\005B\020\302\377\024\014\345\207\272"
    "\345\224\256\344\273\267\346\240\274\022%\n\004icon\030\026 \001(\tB\027\302\377\024\017\350\243\205\345\244\207\345\233\276\346\240"
    "\207\345\220\215\220\301\024<\022\036\n\004time\030\027 \001(\005B\020\302\377\024\014\351\231\220\346\227\266\350\243\205\345\244\207"
    "\0225\n\006Combat\030\030 \001(\005B%\302\377\024!\346\210\230\346\226\227\345\212\233\357\274\210\344\270\215\345\220\253"
    "\350\223\235\346\230\237\345\261\236\346\200\247\357\274\211\022,\n\tbroadcast\030\031 \001(\005B\031\302\377\024\025"
    "\346\230\257\345\220\246\346\222\255\346\224\276\350\267\221\351\251\254\347\201\257\022+\n\rmeltingResult\030\032"
    " \001(\tB\024\302\377\024\014\347\206\224\347\202\274\344\272\247\345\207\272\220\301\024<\022J\n\tattribute\030"
    "\033 \003(\0132!.proto_ff.equipequipattributeDesc"
    "B\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247\210\301\024\002\"H\n\020Sheet_equipequ"
    "ip\0224\n\017equipequip_List\030\001 \003(\0132\024.proto_ff.e"
    "quipequipB\005\210\301\024\240\037", 1536);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "equip.proto", &protobuf_RegisterTypes);
  equipequipattributeDesc::default_instance_ = new equipequipattributeDesc();
  equipequip::default_instance_ = new equipequip();
  Sheet_equipequip::default_instance_ = new Sheet_equipequip();
  equipequipattributeDesc::default_instance_->InitAsDefaultInstance();
  equipequip::default_instance_->InitAsDefaultInstance();
  Sheet_equipequip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_equip_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_equip_2eproto {
  StaticDescriptorInitializer_equip_2eproto() {
    protobuf_AddDesc_equip_2eproto();
  }
} static_descriptor_initializer_equip_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int equipequipattributeDesc::kValueMinFieldNumber;
const int equipequipattributeDesc::kTypeFieldNumber;
const int equipequipattributeDesc::kValueMaxFieldNumber;
#endif  // !_MSC_VER

equipequipattributeDesc::equipequipattributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipequipattributeDesc::InitAsDefaultInstance() {
}

equipequipattributeDesc::equipequipattributeDesc(const equipequipattributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipequipattributeDesc::SharedCtor() {
  _cached_size_ = 0;
  valuemin_ = 0;
  type_ = 0;
  valuemax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipequipattributeDesc::~equipequipattributeDesc() {
  SharedDtor();
}

void equipequipattributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void equipequipattributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipequipattributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipequipattributeDesc_descriptor_;
}

const equipequipattributeDesc& equipequipattributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipequipattributeDesc* equipequipattributeDesc::default_instance_ = NULL;

equipequipattributeDesc* equipequipattributeDesc::New() const {
  return new equipequipattributeDesc;
}

void equipequipattributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    valuemin_ = 0;
    type_ = 0;
    valuemax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipequipattributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 valueMin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuemin_)));
          set_has_valuemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_valueMax;
        break;
      }

      // optional int32 valueMax = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuemax_)));
          set_has_valuemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipequipattributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 valueMin = 1;
  if (has_valuemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->valuemin(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 valueMax = 3;
  if (has_valuemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valuemax(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipequipattributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 valueMin = 1;
  if (has_valuemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->valuemin(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 valueMax = 3;
  if (has_valuemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valuemax(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipequipattributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 valueMin = 1;
    if (has_valuemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuemin());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 valueMax = 3;
    if (has_valuemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuemax());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipequipattributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipequipattributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipequipattributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipequipattributeDesc::MergeFrom(const equipequipattributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_valuemin()) {
      set_valuemin(from.valuemin());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_valuemax()) {
      set_valuemax(from.valuemax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipequipattributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipequipattributeDesc::CopyFrom(const equipequipattributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipequipattributeDesc::IsInitialized() const {

  return true;
}

void equipequipattributeDesc::Swap(equipequipattributeDesc* other) {
  if (other != this) {
    std::swap(valuemin_, other->valuemin_);
    std::swap(type_, other->type_);
    std::swap(valuemax_, other->valuemax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipequipattributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipequipattributeDesc_descriptor_;
  metadata.reflection = equipequipattributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int equipequip::kIdFieldNumber;
const int equipequip::kNameFieldNumber;
const int equipequip::kWearQualityFieldNumber;
const int equipequip::kPositionFieldNumber;
const int equipequip::kProfessionFieldNumber;
const int equipequip::kProfessionLvFieldNumber;
const int equipequip::kLevelFieldNumber;
const int equipequip::kQualityFieldNumber;
const int equipequip::kStarFieldNumber;
const int equipequip::kRefineAttributeDownFieldNumber;
const int equipequip::kRefineAttributeUpFieldNumber;
const int equipequip::kRefineAttributeTypeLibraryFieldNumber;
const int equipequip::kRefineAttributeValueMinFieldNumber;
const int equipequip::kRefineAttributeValueMaxFieldNumber;
const int equipequip::kBlueStarNumFieldNumber;
const int equipequip::kBlueStarTypeFieldNumber;
const int equipequip::kBlueStarLvFieldNumber;
const int equipequip::kBlueStarNumberFieldNumber;
const int equipequip::kIsCanbindFieldNumber;
const int equipequip::kIsTradeBindFieldNumber;
const int equipequip::kSellPriceFieldNumber;
const int equipequip::kIconFieldNumber;
const int equipequip::kTimeFieldNumber;
const int equipequip::kCombatFieldNumber;
const int equipequip::kBroadcastFieldNumber;
const int equipequip::kMeltingResultFieldNumber;
const int equipequip::kAttributeFieldNumber;
#endif  // !_MSC_VER

equipequip::equipequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void equipequip::InitAsDefaultInstance() {
}

equipequip::equipequip(const equipequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void equipequip::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wearquality_ = 0;
  position_ = 0;
  profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  professionlv_ = 0;
  level_ = 0;
  quality_ = 0;
  star_ = 0;
  refineattributedown_ = 0;
  refineattributeup_ = 0;
  refineattribute_typelibrary_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refineattribute_valuemin_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  refineattribute_valuemax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestarnum_ = 0;
  bluestar_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestar_lv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bluestar_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscanbind_ = 0;
  istradebind_ = 0;
  sellprice_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = 0;
  combat_ = 0;
  broadcast_ = 0;
  meltingresult_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

equipequip::~equipequip() {
  SharedDtor();
}

void equipequip::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (profession_ != &::google::protobuf::internal::kEmptyString) {
    delete profession_;
  }
  if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_typelibrary_;
  }
  if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemin_;
  }
  if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
    delete refineattribute_valuemax_;
  }
  if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_type_;
  }
  if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_lv_;
  }
  if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
    delete bluestar_number_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
    delete meltingresult_;
  }
  if (this != default_instance_) {
  }
}

void equipequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* equipequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return equipequip_descriptor_;
}

const equipequip& equipequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

equipequip* equipequip::default_instance_ = NULL;

equipequip* equipequip::New() const {
  return new equipequip;
}

void equipequip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    wearquality_ = 0;
    position_ = 0;
    if (has_profession()) {
      if (profession_ != &::google::protobuf::internal::kEmptyString) {
        profession_->clear();
      }
    }
    professionlv_ = 0;
    level_ = 0;
    quality_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    star_ = 0;
    refineattributedown_ = 0;
    refineattributeup_ = 0;
    if (has_refineattribute_typelibrary()) {
      if (refineattribute_typelibrary_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_typelibrary_->clear();
      }
    }
    if (has_refineattribute_valuemin()) {
      if (refineattribute_valuemin_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_valuemin_->clear();
      }
    }
    if (has_refineattribute_valuemax()) {
      if (refineattribute_valuemax_ != &::google::protobuf::internal::kEmptyString) {
        refineattribute_valuemax_->clear();
      }
    }
    bluestarnum_ = 0;
    if (has_bluestar_type()) {
      if (bluestar_type_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_type_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_bluestar_lv()) {
      if (bluestar_lv_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_lv_->clear();
      }
    }
    if (has_bluestar_number()) {
      if (bluestar_number_ != &::google::protobuf::internal::kEmptyString) {
        bluestar_number_->clear();
      }
    }
    iscanbind_ = 0;
    istradebind_ = 0;
    sellprice_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    time_ = 0;
    combat_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    broadcast_ = 0;
    if (has_meltingresult()) {
      if (meltingresult_ != &::google::protobuf::internal::kEmptyString) {
        meltingresult_->clear();
      }
    }
  }
  attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool equipequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wearQuality;
        break;
      }

      // optional int32 wearQuality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wearQuality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wearquality_)));
          set_has_wearquality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }

      // optional int32 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_profession;
        break;
      }

      // optional string profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->profession().data(), this->profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_professionLv;
        break;
      }

      // optional int32 professionLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_professionLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &professionlv_)));
          set_has_professionlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional int32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quality;
        break;
      }

      // optional int32 quality = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_star;
        break;
      }

      // optional int32 star = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_refineAttributeDown;
        break;
      }

      // optional int32 refineAttributeDown = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttributeDown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refineattributedown_)));
          set_has_refineattributedown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_refineAttributeUp;
        break;
      }

      // optional int32 refineAttributeUp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttributeUp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refineattributeup_)));
          set_has_refineattributeup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_refineAttribute_typeLibrary;
        break;
      }

      // optional string refineAttribute_typeLibrary = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute_typeLibrary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute_typelibrary()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute_typelibrary().data(), this->refineattribute_typelibrary().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_refineAttribute_valueMin;
        break;
      }

      // optional string refineAttribute_valueMin = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute_valueMin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute_valuemin()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute_valuemin().data(), this->refineattribute_valuemin().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_refineAttribute_valueMax;
        break;
      }

      // optional string refineAttribute_valueMax = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refineAttribute_valueMax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_refineattribute_valuemax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->refineattribute_valuemax().data(), this->refineattribute_valuemax().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_blueStarNum;
        break;
      }

      // optional int32 blueStarNum = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blueStarNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluestarnum_)));
          set_has_bluestarnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_blueStar_type;
        break;
      }

      // optional string blueStar_type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_type().data(), this->bluestar_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_blueStar_lv;
        break;
      }

      // optional string blueStar_lv = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_lv:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_lv()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_lv().data(), this->bluestar_lv().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_blueStar_number;
        break;
      }

      // optional string blueStar_number = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blueStar_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluestar_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bluestar_number().data(), this->bluestar_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_isCanbind;
        break;
      }

      // optional int32 isCanbind = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCanbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscanbind_)));
          set_has_iscanbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_isTradeBind;
        break;
      }

      // optional int32 isTradeBind = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTradeBind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istradebind_)));
          set_has_istradebind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_sellPrice;
        break;
      }

      // optional int32 sellPrice = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sellPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sellprice_)));
          set_has_sellprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_icon;
        break;
      }

      // optional string icon = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_time;
        break;
      }

      // optional int32 time = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_Combat;
        break;
      }

      // optional int32 Combat = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Combat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combat_)));
          set_has_combat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_broadcast;
        break;
      }

      // optional int32 broadcast = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_broadcast:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &broadcast_)));
          set_has_broadcast();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_meltingResult;
        break;
      }

      // optional string meltingResult = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meltingResult:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meltingresult()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meltingresult().data(), this->meltingresult().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_attribute;
        break;
      }

      // repeated .proto_ff.equipequipattributeDesc attribute = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void equipequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wearquality(), output);
  }

  // optional int32 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->position(), output);
  }

  // optional string profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->profession(), output);
  }

  // optional int32 professionLv = 6;
  if (has_professionlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->professionlv(), output);
  }

  // optional int32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->level(), output);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quality(), output);
  }

  // optional int32 star = 9;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->star(), output);
  }

  // optional int32 refineAttributeDown = 10;
  if (has_refineattributedown()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->refineattributedown(), output);
  }

  // optional int32 refineAttributeUp = 11;
  if (has_refineattributeup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->refineattributeup(), output);
  }

  // optional string refineAttribute_typeLibrary = 12;
  if (has_refineattribute_typelibrary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_typelibrary().data(), this->refineattribute_typelibrary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->refineattribute_typelibrary(), output);
  }

  // optional string refineAttribute_valueMin = 13;
  if (has_refineattribute_valuemin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemin().data(), this->refineattribute_valuemin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->refineattribute_valuemin(), output);
  }

  // optional string refineAttribute_valueMax = 14;
  if (has_refineattribute_valuemax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemax().data(), this->refineattribute_valuemax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->refineattribute_valuemax(), output);
  }

  // optional int32 blueStarNum = 15;
  if (has_bluestarnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->bluestarnum(), output);
  }

  // optional string blueStar_type = 16;
  if (has_bluestar_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_type().data(), this->bluestar_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->bluestar_type(), output);
  }

  // optional string blueStar_lv = 17;
  if (has_bluestar_lv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_lv().data(), this->bluestar_lv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->bluestar_lv(), output);
  }

  // optional string blueStar_number = 18;
  if (has_bluestar_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_number().data(), this->bluestar_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->bluestar_number(), output);
  }

  // optional int32 isCanbind = 19;
  if (has_iscanbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->iscanbind(), output);
  }

  // optional int32 isTradeBind = 20;
  if (has_istradebind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->istradebind(), output);
  }

  // optional int32 sellPrice = 21;
  if (has_sellprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->sellprice(), output);
  }

  // optional string icon = 22;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->icon(), output);
  }

  // optional int32 time = 23;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->time(), output);
  }

  // optional int32 Combat = 24;
  if (has_combat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->combat(), output);
  }

  // optional int32 broadcast = 25;
  if (has_broadcast()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->broadcast(), output);
  }

  // optional string meltingResult = 26;
  if (has_meltingresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meltingresult().data(), this->meltingresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->meltingresult(), output);
  }

  // repeated .proto_ff.equipequipattributeDesc attribute = 27;
  for (int i = 0; i < this->attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* equipequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 wearQuality = 3;
  if (has_wearquality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wearquality(), target);
  }

  // optional int32 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->position(), target);
  }

  // optional string profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->profession().data(), this->profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->profession(), target);
  }

  // optional int32 professionLv = 6;
  if (has_professionlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->professionlv(), target);
  }

  // optional int32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->level(), target);
  }

  // optional int32 quality = 8;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quality(), target);
  }

  // optional int32 star = 9;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->star(), target);
  }

  // optional int32 refineAttributeDown = 10;
  if (has_refineattributedown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->refineattributedown(), target);
  }

  // optional int32 refineAttributeUp = 11;
  if (has_refineattributeup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->refineattributeup(), target);
  }

  // optional string refineAttribute_typeLibrary = 12;
  if (has_refineattribute_typelibrary()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_typelibrary().data(), this->refineattribute_typelibrary().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->refineattribute_typelibrary(), target);
  }

  // optional string refineAttribute_valueMin = 13;
  if (has_refineattribute_valuemin()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemin().data(), this->refineattribute_valuemin().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->refineattribute_valuemin(), target);
  }

  // optional string refineAttribute_valueMax = 14;
  if (has_refineattribute_valuemax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->refineattribute_valuemax().data(), this->refineattribute_valuemax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->refineattribute_valuemax(), target);
  }

  // optional int32 blueStarNum = 15;
  if (has_bluestarnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->bluestarnum(), target);
  }

  // optional string blueStar_type = 16;
  if (has_bluestar_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_type().data(), this->bluestar_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->bluestar_type(), target);
  }

  // optional string blueStar_lv = 17;
  if (has_bluestar_lv()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_lv().data(), this->bluestar_lv().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bluestar_lv(), target);
  }

  // optional string blueStar_number = 18;
  if (has_bluestar_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bluestar_number().data(), this->bluestar_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->bluestar_number(), target);
  }

  // optional int32 isCanbind = 19;
  if (has_iscanbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->iscanbind(), target);
  }

  // optional int32 isTradeBind = 20;
  if (has_istradebind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->istradebind(), target);
  }

  // optional int32 sellPrice = 21;
  if (has_sellprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->sellprice(), target);
  }

  // optional string icon = 22;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->icon(), target);
  }

  // optional int32 time = 23;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->time(), target);
  }

  // optional int32 Combat = 24;
  if (has_combat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->combat(), target);
  }

  // optional int32 broadcast = 25;
  if (has_broadcast()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->broadcast(), target);
  }

  // optional string meltingResult = 26;
  if (has_meltingresult()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meltingresult().data(), this->meltingresult().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->meltingresult(), target);
  }

  // repeated .proto_ff.equipequipattributeDesc attribute = 27;
  for (int i = 0; i < this->attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int equipequip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 wearQuality = 3;
    if (has_wearquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wearquality());
    }

    // optional int32 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional string profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->profession());
    }

    // optional int32 professionLv = 6;
    if (has_professionlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->professionlv());
    }

    // optional int32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 quality = 8;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 star = 9;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 refineAttributeDown = 10;
    if (has_refineattributedown()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refineattributedown());
    }

    // optional int32 refineAttributeUp = 11;
    if (has_refineattributeup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refineattributeup());
    }

    // optional string refineAttribute_typeLibrary = 12;
    if (has_refineattribute_typelibrary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute_typelibrary());
    }

    // optional string refineAttribute_valueMin = 13;
    if (has_refineattribute_valuemin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute_valuemin());
    }

    // optional string refineAttribute_valueMax = 14;
    if (has_refineattribute_valuemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->refineattribute_valuemax());
    }

    // optional int32 blueStarNum = 15;
    if (has_bluestarnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluestarnum());
    }

    // optional string blueStar_type = 16;
    if (has_bluestar_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string blueStar_lv = 17;
    if (has_bluestar_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_lv());
    }

    // optional string blueStar_number = 18;
    if (has_bluestar_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluestar_number());
    }

    // optional int32 isCanbind = 19;
    if (has_iscanbind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscanbind());
    }

    // optional int32 isTradeBind = 20;
    if (has_istradebind()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istradebind());
    }

    // optional int32 sellPrice = 21;
    if (has_sellprice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sellprice());
    }

    // optional string icon = 22;
    if (has_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 time = 23;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 Combat = 24;
    if (has_combat()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combat());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 broadcast = 25;
    if (has_broadcast()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->broadcast());
    }

    // optional string meltingResult = 26;
    if (has_meltingresult()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meltingresult());
    }

  }
  // repeated .proto_ff.equipequipattributeDesc attribute = 27;
  total_size += 2 * this->attribute_size();
  for (int i = 0; i < this->attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void equipequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const equipequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const equipequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void equipequip::MergeFrom(const equipequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  attribute_.MergeFrom(from.attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_wearquality()) {
      set_wearquality(from.wearquality());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_professionlv()) {
      set_professionlv(from.professionlv());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_refineattributedown()) {
      set_refineattributedown(from.refineattributedown());
    }
    if (from.has_refineattributeup()) {
      set_refineattributeup(from.refineattributeup());
    }
    if (from.has_refineattribute_typelibrary()) {
      set_refineattribute_typelibrary(from.refineattribute_typelibrary());
    }
    if (from.has_refineattribute_valuemin()) {
      set_refineattribute_valuemin(from.refineattribute_valuemin());
    }
    if (from.has_refineattribute_valuemax()) {
      set_refineattribute_valuemax(from.refineattribute_valuemax());
    }
    if (from.has_bluestarnum()) {
      set_bluestarnum(from.bluestarnum());
    }
    if (from.has_bluestar_type()) {
      set_bluestar_type(from.bluestar_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bluestar_lv()) {
      set_bluestar_lv(from.bluestar_lv());
    }
    if (from.has_bluestar_number()) {
      set_bluestar_number(from.bluestar_number());
    }
    if (from.has_iscanbind()) {
      set_iscanbind(from.iscanbind());
    }
    if (from.has_istradebind()) {
      set_istradebind(from.istradebind());
    }
    if (from.has_sellprice()) {
      set_sellprice(from.sellprice());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_combat()) {
      set_combat(from.combat());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_broadcast()) {
      set_broadcast(from.broadcast());
    }
    if (from.has_meltingresult()) {
      set_meltingresult(from.meltingresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void equipequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void equipequip::CopyFrom(const equipequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool equipequip::IsInitialized() const {

  return true;
}

void equipequip::Swap(equipequip* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(wearquality_, other->wearquality_);
    std::swap(position_, other->position_);
    std::swap(profession_, other->profession_);
    std::swap(professionlv_, other->professionlv_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    std::swap(star_, other->star_);
    std::swap(refineattributedown_, other->refineattributedown_);
    std::swap(refineattributeup_, other->refineattributeup_);
    std::swap(refineattribute_typelibrary_, other->refineattribute_typelibrary_);
    std::swap(refineattribute_valuemin_, other->refineattribute_valuemin_);
    std::swap(refineattribute_valuemax_, other->refineattribute_valuemax_);
    std::swap(bluestarnum_, other->bluestarnum_);
    std::swap(bluestar_type_, other->bluestar_type_);
    std::swap(bluestar_lv_, other->bluestar_lv_);
    std::swap(bluestar_number_, other->bluestar_number_);
    std::swap(iscanbind_, other->iscanbind_);
    std::swap(istradebind_, other->istradebind_);
    std::swap(sellprice_, other->sellprice_);
    std::swap(icon_, other->icon_);
    std::swap(time_, other->time_);
    std::swap(combat_, other->combat_);
    std::swap(broadcast_, other->broadcast_);
    std::swap(meltingresult_, other->meltingresult_);
    attribute_.Swap(&other->attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata equipequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = equipequip_descriptor_;
  metadata.reflection = equipequip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_equipequip::kEquipequipListFieldNumber;
#endif  // !_MSC_VER

Sheet_equipequip::Sheet_equipequip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_equipequip::InitAsDefaultInstance() {
}

Sheet_equipequip::Sheet_equipequip(const Sheet_equipequip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_equipequip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_equipequip::~Sheet_equipequip() {
  SharedDtor();
}

void Sheet_equipequip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_equipequip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_equipequip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_equipequip_descriptor_;
}

const Sheet_equipequip& Sheet_equipequip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_equip_2eproto();
  return *default_instance_;
}

Sheet_equipequip* Sheet_equipequip::default_instance_ = NULL;

Sheet_equipequip* Sheet_equipequip::New() const {
  return new Sheet_equipequip;
}

void Sheet_equipequip::Clear() {
  equipequip_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_equipequip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.equipequip equipequip_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipequip_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipequip_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equipequip_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_equipequip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.equipequip equipequip_List = 1;
  for (int i = 0; i < this->equipequip_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equipequip_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_equipequip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.equipequip equipequip_List = 1;
  for (int i = 0; i < this->equipequip_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equipequip_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_equipequip::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.equipequip equipequip_List = 1;
  total_size += 1 * this->equipequip_list_size();
  for (int i = 0; i < this->equipequip_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipequip_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_equipequip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_equipequip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_equipequip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_equipequip::MergeFrom(const Sheet_equipequip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipequip_list_.MergeFrom(from.equipequip_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_equipequip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_equipequip::CopyFrom(const Sheet_equipequip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_equipequip::IsInitialized() const {

  return true;
}

void Sheet_equipequip::Swap(Sheet_equipequip* other) {
  if (other != this) {
    equipequip_list_.Swap(&other->equipequip_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_equipequip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_equipequip_descriptor_;
  metadata.reflection = Sheet_equipequip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
