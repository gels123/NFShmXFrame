// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: perActivity.proto

#ifndef PROTOBUF_perActivity_2eproto__INCLUDED
#define PROTOBUF_perActivity_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_perActivity_2eproto();
void protobuf_AssignDesc_perActivity_2eproto();
void protobuf_ShutdownFile_perActivity_2eproto();

class E_PeractivityPeractivity;
class Sheet_PeractivityPeractivity;
class E_PeractivityWeek;
class Sheet_PeractivityWeek;

// ===================================================================

class E_PeractivityPeractivity : public ::google::protobuf::Message {
 public:
  E_PeractivityPeractivity();
  virtual ~E_PeractivityPeractivity();

  E_PeractivityPeractivity(const E_PeractivityPeractivity& from);

  inline E_PeractivityPeractivity& operator=(const E_PeractivityPeractivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_PeractivityPeractivity& default_instance();

  void Swap(E_PeractivityPeractivity* other);

  // implements Message ----------------------------------------------

  E_PeractivityPeractivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_PeractivityPeractivity& from);
  void MergeFrom(const E_PeractivityPeractivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_activeid = 1;
  inline bool has_m_activeid() const;
  inline void clear_m_activeid();
  static const int kMActiveidFieldNumber = 1;
  inline ::google::protobuf::int64 m_activeid() const;
  inline void set_m_activeid(::google::protobuf::int64 value);

  // optional string m_activename = 2;
  inline bool has_m_activename() const;
  inline void clear_m_activename();
  static const int kMActivenameFieldNumber = 2;
  inline const ::std::string& m_activename() const;
  inline void set_m_activename(const ::std::string& value);
  inline void set_m_activename(const char* value);
  inline void set_m_activename(const char* value, size_t size);
  inline ::std::string* mutable_m_activename();
  inline ::std::string* release_m_activename();
  inline void set_allocated_m_activename(::std::string* m_activename);

  // optional int32 m_typeid = 3;
  inline bool has_m_typeid() const;
  inline void clear_m_typeid();
  static const int kMTypeidFieldNumber = 3;
  inline ::google::protobuf::int32 m_typeid() const;
  inline void set_m_typeid(::google::protobuf::int32 value);

  // optional int32 m_functionid = 4;
  inline bool has_m_functionid() const;
  inline void clear_m_functionid();
  static const int kMFunctionidFieldNumber = 4;
  inline ::google::protobuf::int32 m_functionid() const;
  inline void set_m_functionid(::google::protobuf::int32 value);

  // optional string m_opeday = 5;
  inline bool has_m_opeday() const;
  inline void clear_m_opeday();
  static const int kMOpedayFieldNumber = 5;
  inline const ::std::string& m_opeday() const;
  inline void set_m_opeday(const ::std::string& value);
  inline void set_m_opeday(const char* value);
  inline void set_m_opeday(const char* value, size_t size);
  inline ::std::string* mutable_m_opeday();
  inline ::std::string* release_m_opeday();
  inline void set_allocated_m_opeday(::std::string* m_opeday);

  // optional string m_closeday = 6;
  inline bool has_m_closeday() const;
  inline void clear_m_closeday();
  static const int kMClosedayFieldNumber = 6;
  inline const ::std::string& m_closeday() const;
  inline void set_m_closeday(const ::std::string& value);
  inline void set_m_closeday(const char* value);
  inline void set_m_closeday(const char* value, size_t size);
  inline ::std::string* mutable_m_closeday();
  inline ::std::string* release_m_closeday();
  inline void set_allocated_m_closeday(::std::string* m_closeday);

  // optional int32 m_serverdelaytime = 7;
  inline bool has_m_serverdelaytime() const;
  inline void clear_m_serverdelaytime();
  static const int kMServerdelaytimeFieldNumber = 7;
  inline ::google::protobuf::int32 m_serverdelaytime() const;
  inline void set_m_serverdelaytime(::google::protobuf::int32 value);

  // optional int32 m_servertime = 8;
  inline bool has_m_servertime() const;
  inline void clear_m_servertime();
  static const int kMServertimeFieldNumber = 8;
  inline ::google::protobuf::int32 m_servertime() const;
  inline void set_m_servertime(::google::protobuf::int32 value);

  // optional int32 m_openingtime = 9;
  inline bool has_m_openingtime() const;
  inline void clear_m_openingtime();
  static const int kMOpeningtimeFieldNumber = 9;
  inline ::google::protobuf::int32 m_openingtime() const;
  inline void set_m_openingtime(::google::protobuf::int32 value);

  // optional int32 m_advancetime = 10;
  inline bool has_m_advancetime() const;
  inline void clear_m_advancetime();
  static const int kMAdvancetimeFieldNumber = 10;
  inline ::google::protobuf::int32 m_advancetime() const;
  inline void set_m_advancetime(::google::protobuf::int32 value);

  // optional int32 m_intervaltime = 11;
  inline bool has_m_intervaltime() const;
  inline void clear_m_intervaltime();
  static const int kMIntervaltimeFieldNumber = 11;
  inline ::google::protobuf::int32 m_intervaltime() const;
  inline void set_m_intervaltime(::google::protobuf::int32 value);

  // optional int32 m_iscross = 12;
  inline bool has_m_iscross() const;
  inline void clear_m_iscross();
  static const int kMIscrossFieldNumber = 12;
  inline ::google::protobuf::int32 m_iscross() const;
  inline void set_m_iscross(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_PeractivityPeractivity)
 private:
  inline void set_has_m_activeid();
  inline void clear_has_m_activeid();
  inline void set_has_m_activename();
  inline void clear_has_m_activename();
  inline void set_has_m_typeid();
  inline void clear_has_m_typeid();
  inline void set_has_m_functionid();
  inline void clear_has_m_functionid();
  inline void set_has_m_opeday();
  inline void clear_has_m_opeday();
  inline void set_has_m_closeday();
  inline void clear_has_m_closeday();
  inline void set_has_m_serverdelaytime();
  inline void clear_has_m_serverdelaytime();
  inline void set_has_m_servertime();
  inline void clear_has_m_servertime();
  inline void set_has_m_openingtime();
  inline void clear_has_m_openingtime();
  inline void set_has_m_advancetime();
  inline void clear_has_m_advancetime();
  inline void set_has_m_intervaltime();
  inline void clear_has_m_intervaltime();
  inline void set_has_m_iscross();
  inline void clear_has_m_iscross();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_activeid_;
  ::std::string* m_activename_;
  ::google::protobuf::int32 m_typeid_;
  ::google::protobuf::int32 m_functionid_;
  ::std::string* m_opeday_;
  ::std::string* m_closeday_;
  ::google::protobuf::int32 m_serverdelaytime_;
  ::google::protobuf::int32 m_servertime_;
  ::google::protobuf::int32 m_openingtime_;
  ::google::protobuf::int32 m_advancetime_;
  ::google::protobuf::int32 m_intervaltime_;
  ::google::protobuf::int32 m_iscross_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_perActivity_2eproto();
  friend void protobuf_AssignDesc_perActivity_2eproto();
  friend void protobuf_ShutdownFile_perActivity_2eproto();

  void InitAsDefaultInstance();
  static E_PeractivityPeractivity* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_PeractivityPeractivity : public ::google::protobuf::Message {
 public:
  Sheet_PeractivityPeractivity();
  virtual ~Sheet_PeractivityPeractivity();

  Sheet_PeractivityPeractivity(const Sheet_PeractivityPeractivity& from);

  inline Sheet_PeractivityPeractivity& operator=(const Sheet_PeractivityPeractivity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_PeractivityPeractivity& default_instance();

  void Swap(Sheet_PeractivityPeractivity* other);

  // implements Message ----------------------------------------------

  Sheet_PeractivityPeractivity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_PeractivityPeractivity& from);
  void MergeFrom(const Sheet_PeractivityPeractivity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_PeractivityPeractivity E_PeractivityPeractivity_List = 1;
  inline int e_peractivityperactivity_list_size() const;
  inline void clear_e_peractivityperactivity_list();
  static const int kEPeractivityPeractivityListFieldNumber = 1;
  inline const ::proto_ff::E_PeractivityPeractivity& e_peractivityperactivity_list(int index) const;
  inline ::proto_ff::E_PeractivityPeractivity* mutable_e_peractivityperactivity_list(int index);
  inline ::proto_ff::E_PeractivityPeractivity* add_e_peractivityperactivity_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityPeractivity >&
      e_peractivityperactivity_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityPeractivity >*
      mutable_e_peractivityperactivity_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_PeractivityPeractivity)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityPeractivity > e_peractivityperactivity_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_perActivity_2eproto();
  friend void protobuf_AssignDesc_perActivity_2eproto();
  friend void protobuf_ShutdownFile_perActivity_2eproto();

  void InitAsDefaultInstance();
  static Sheet_PeractivityPeractivity* default_instance_;
};
// -------------------------------------------------------------------

class E_PeractivityWeek : public ::google::protobuf::Message {
 public:
  E_PeractivityWeek();
  virtual ~E_PeractivityWeek();

  E_PeractivityWeek(const E_PeractivityWeek& from);

  inline E_PeractivityWeek& operator=(const E_PeractivityWeek& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_PeractivityWeek& default_instance();

  void Swap(E_PeractivityWeek* other);

  // implements Message ----------------------------------------------

  E_PeractivityWeek* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_PeractivityWeek& from);
  void MergeFrom(const E_PeractivityWeek& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_time = 2;
  inline bool has_m_time() const;
  inline void clear_m_time();
  static const int kMTimeFieldNumber = 2;
  inline const ::std::string& m_time() const;
  inline void set_m_time(const ::std::string& value);
  inline void set_m_time(const char* value);
  inline void set_m_time(const char* value, size_t size);
  inline ::std::string* mutable_m_time();
  inline ::std::string* release_m_time();
  inline void set_allocated_m_time(::std::string* m_time);

  // repeated string m_week = 3;
  inline int m_week_size() const;
  inline void clear_m_week();
  static const int kMWeekFieldNumber = 3;
  inline const ::std::string& m_week(int index) const;
  inline ::std::string* mutable_m_week(int index);
  inline void set_m_week(int index, const ::std::string& value);
  inline void set_m_week(int index, const char* value);
  inline void set_m_week(int index, const char* value, size_t size);
  inline ::std::string* add_m_week();
  inline void add_m_week(const ::std::string& value);
  inline void add_m_week(const char* value);
  inline void add_m_week(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& m_week() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_m_week();

  // @@protoc_insertion_point(class_scope:proto_ff.E_PeractivityWeek)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_time();
  inline void clear_has_m_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> m_week_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_perActivity_2eproto();
  friend void protobuf_AssignDesc_perActivity_2eproto();
  friend void protobuf_ShutdownFile_perActivity_2eproto();

  void InitAsDefaultInstance();
  static E_PeractivityWeek* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_PeractivityWeek : public ::google::protobuf::Message {
 public:
  Sheet_PeractivityWeek();
  virtual ~Sheet_PeractivityWeek();

  Sheet_PeractivityWeek(const Sheet_PeractivityWeek& from);

  inline Sheet_PeractivityWeek& operator=(const Sheet_PeractivityWeek& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_PeractivityWeek& default_instance();

  void Swap(Sheet_PeractivityWeek* other);

  // implements Message ----------------------------------------------

  Sheet_PeractivityWeek* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_PeractivityWeek& from);
  void MergeFrom(const Sheet_PeractivityWeek& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_PeractivityWeek E_PeractivityWeek_List = 1;
  inline int e_peractivityweek_list_size() const;
  inline void clear_e_peractivityweek_list();
  static const int kEPeractivityWeekListFieldNumber = 1;
  inline const ::proto_ff::E_PeractivityWeek& e_peractivityweek_list(int index) const;
  inline ::proto_ff::E_PeractivityWeek* mutable_e_peractivityweek_list(int index);
  inline ::proto_ff::E_PeractivityWeek* add_e_peractivityweek_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityWeek >&
      e_peractivityweek_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityWeek >*
      mutable_e_peractivityweek_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_PeractivityWeek)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityWeek > e_peractivityweek_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_perActivity_2eproto();
  friend void protobuf_AssignDesc_perActivity_2eproto();
  friend void protobuf_ShutdownFile_perActivity_2eproto();

  void InitAsDefaultInstance();
  static Sheet_PeractivityWeek* default_instance_;
};
// ===================================================================


// ===================================================================

// E_PeractivityPeractivity

// optional int64 m_activeid = 1;
inline bool E_PeractivityPeractivity::has_m_activeid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_activeid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_PeractivityPeractivity::clear_has_m_activeid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_PeractivityPeractivity::clear_m_activeid() {
  m_activeid_ = GOOGLE_LONGLONG(0);
  clear_has_m_activeid();
}
inline ::google::protobuf::int64 E_PeractivityPeractivity::m_activeid() const {
  return m_activeid_;
}
inline void E_PeractivityPeractivity::set_m_activeid(::google::protobuf::int64 value) {
  set_has_m_activeid();
  m_activeid_ = value;
}

// optional string m_activename = 2;
inline bool E_PeractivityPeractivity::has_m_activename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_activename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_PeractivityPeractivity::clear_has_m_activename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_PeractivityPeractivity::clear_m_activename() {
  if (m_activename_ != &::google::protobuf::internal::kEmptyString) {
    m_activename_->clear();
  }
  clear_has_m_activename();
}
inline const ::std::string& E_PeractivityPeractivity::m_activename() const {
  return *m_activename_;
}
inline void E_PeractivityPeractivity::set_m_activename(const ::std::string& value) {
  set_has_m_activename();
  if (m_activename_ == &::google::protobuf::internal::kEmptyString) {
    m_activename_ = new ::std::string;
  }
  m_activename_->assign(value);
}
inline void E_PeractivityPeractivity::set_m_activename(const char* value) {
  set_has_m_activename();
  if (m_activename_ == &::google::protobuf::internal::kEmptyString) {
    m_activename_ = new ::std::string;
  }
  m_activename_->assign(value);
}
inline void E_PeractivityPeractivity::set_m_activename(const char* value, size_t size) {
  set_has_m_activename();
  if (m_activename_ == &::google::protobuf::internal::kEmptyString) {
    m_activename_ = new ::std::string;
  }
  m_activename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_PeractivityPeractivity::mutable_m_activename() {
  set_has_m_activename();
  if (m_activename_ == &::google::protobuf::internal::kEmptyString) {
    m_activename_ = new ::std::string;
  }
  return m_activename_;
}
inline ::std::string* E_PeractivityPeractivity::release_m_activename() {
  clear_has_m_activename();
  if (m_activename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_activename_;
    m_activename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_PeractivityPeractivity::set_allocated_m_activename(::std::string* m_activename) {
  if (m_activename_ != &::google::protobuf::internal::kEmptyString) {
    delete m_activename_;
  }
  if (m_activename) {
    set_has_m_activename();
    m_activename_ = m_activename;
  } else {
    clear_has_m_activename();
    m_activename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_typeid = 3;
inline bool E_PeractivityPeractivity::has_m_typeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_typeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_PeractivityPeractivity::clear_has_m_typeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_PeractivityPeractivity::clear_m_typeid() {
  m_typeid_ = 0;
  clear_has_m_typeid();
}
inline ::google::protobuf::int32 E_PeractivityPeractivity::m_typeid() const {
  return m_typeid_;
}
inline void E_PeractivityPeractivity::set_m_typeid(::google::protobuf::int32 value) {
  set_has_m_typeid();
  m_typeid_ = value;
}

// optional int32 m_functionid = 4;
inline bool E_PeractivityPeractivity::has_m_functionid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_functionid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_PeractivityPeractivity::clear_has_m_functionid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_PeractivityPeractivity::clear_m_functionid() {
  m_functionid_ = 0;
  clear_has_m_functionid();
}
inline ::google::protobuf::int32 E_PeractivityPeractivity::m_functionid() const {
  return m_functionid_;
}
inline void E_PeractivityPeractivity::set_m_functionid(::google::protobuf::int32 value) {
  set_has_m_functionid();
  m_functionid_ = value;
}

// optional string m_opeday = 5;
inline bool E_PeractivityPeractivity::has_m_opeday() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_opeday() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_PeractivityPeractivity::clear_has_m_opeday() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_PeractivityPeractivity::clear_m_opeday() {
  if (m_opeday_ != &::google::protobuf::internal::kEmptyString) {
    m_opeday_->clear();
  }
  clear_has_m_opeday();
}
inline const ::std::string& E_PeractivityPeractivity::m_opeday() const {
  return *m_opeday_;
}
inline void E_PeractivityPeractivity::set_m_opeday(const ::std::string& value) {
  set_has_m_opeday();
  if (m_opeday_ == &::google::protobuf::internal::kEmptyString) {
    m_opeday_ = new ::std::string;
  }
  m_opeday_->assign(value);
}
inline void E_PeractivityPeractivity::set_m_opeday(const char* value) {
  set_has_m_opeday();
  if (m_opeday_ == &::google::protobuf::internal::kEmptyString) {
    m_opeday_ = new ::std::string;
  }
  m_opeday_->assign(value);
}
inline void E_PeractivityPeractivity::set_m_opeday(const char* value, size_t size) {
  set_has_m_opeday();
  if (m_opeday_ == &::google::protobuf::internal::kEmptyString) {
    m_opeday_ = new ::std::string;
  }
  m_opeday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_PeractivityPeractivity::mutable_m_opeday() {
  set_has_m_opeday();
  if (m_opeday_ == &::google::protobuf::internal::kEmptyString) {
    m_opeday_ = new ::std::string;
  }
  return m_opeday_;
}
inline ::std::string* E_PeractivityPeractivity::release_m_opeday() {
  clear_has_m_opeday();
  if (m_opeday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_opeday_;
    m_opeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_PeractivityPeractivity::set_allocated_m_opeday(::std::string* m_opeday) {
  if (m_opeday_ != &::google::protobuf::internal::kEmptyString) {
    delete m_opeday_;
  }
  if (m_opeday) {
    set_has_m_opeday();
    m_opeday_ = m_opeday;
  } else {
    clear_has_m_opeday();
    m_opeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_closeday = 6;
inline bool E_PeractivityPeractivity::has_m_closeday() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_closeday() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_PeractivityPeractivity::clear_has_m_closeday() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_PeractivityPeractivity::clear_m_closeday() {
  if (m_closeday_ != &::google::protobuf::internal::kEmptyString) {
    m_closeday_->clear();
  }
  clear_has_m_closeday();
}
inline const ::std::string& E_PeractivityPeractivity::m_closeday() const {
  return *m_closeday_;
}
inline void E_PeractivityPeractivity::set_m_closeday(const ::std::string& value) {
  set_has_m_closeday();
  if (m_closeday_ == &::google::protobuf::internal::kEmptyString) {
    m_closeday_ = new ::std::string;
  }
  m_closeday_->assign(value);
}
inline void E_PeractivityPeractivity::set_m_closeday(const char* value) {
  set_has_m_closeday();
  if (m_closeday_ == &::google::protobuf::internal::kEmptyString) {
    m_closeday_ = new ::std::string;
  }
  m_closeday_->assign(value);
}
inline void E_PeractivityPeractivity::set_m_closeday(const char* value, size_t size) {
  set_has_m_closeday();
  if (m_closeday_ == &::google::protobuf::internal::kEmptyString) {
    m_closeday_ = new ::std::string;
  }
  m_closeday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_PeractivityPeractivity::mutable_m_closeday() {
  set_has_m_closeday();
  if (m_closeday_ == &::google::protobuf::internal::kEmptyString) {
    m_closeday_ = new ::std::string;
  }
  return m_closeday_;
}
inline ::std::string* E_PeractivityPeractivity::release_m_closeday() {
  clear_has_m_closeday();
  if (m_closeday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_closeday_;
    m_closeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_PeractivityPeractivity::set_allocated_m_closeday(::std::string* m_closeday) {
  if (m_closeday_ != &::google::protobuf::internal::kEmptyString) {
    delete m_closeday_;
  }
  if (m_closeday) {
    set_has_m_closeday();
    m_closeday_ = m_closeday;
  } else {
    clear_has_m_closeday();
    m_closeday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_serverdelaytime = 7;
inline bool E_PeractivityPeractivity::has_m_serverdelaytime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_serverdelaytime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_PeractivityPeractivity::clear_has_m_serverdelaytime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_PeractivityPeractivity::clear_m_serverdelaytime() {
  m_serverdelaytime_ = 0;
  clear_has_m_serverdelaytime();
}
inline ::google::protobuf::int32 E_PeractivityPeractivity::m_serverdelaytime() const {
  return m_serverdelaytime_;
}
inline void E_PeractivityPeractivity::set_m_serverdelaytime(::google::protobuf::int32 value) {
  set_has_m_serverdelaytime();
  m_serverdelaytime_ = value;
}

// optional int32 m_servertime = 8;
inline bool E_PeractivityPeractivity::has_m_servertime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_servertime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_PeractivityPeractivity::clear_has_m_servertime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_PeractivityPeractivity::clear_m_servertime() {
  m_servertime_ = 0;
  clear_has_m_servertime();
}
inline ::google::protobuf::int32 E_PeractivityPeractivity::m_servertime() const {
  return m_servertime_;
}
inline void E_PeractivityPeractivity::set_m_servertime(::google::protobuf::int32 value) {
  set_has_m_servertime();
  m_servertime_ = value;
}

// optional int32 m_openingtime = 9;
inline bool E_PeractivityPeractivity::has_m_openingtime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_openingtime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_PeractivityPeractivity::clear_has_m_openingtime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_PeractivityPeractivity::clear_m_openingtime() {
  m_openingtime_ = 0;
  clear_has_m_openingtime();
}
inline ::google::protobuf::int32 E_PeractivityPeractivity::m_openingtime() const {
  return m_openingtime_;
}
inline void E_PeractivityPeractivity::set_m_openingtime(::google::protobuf::int32 value) {
  set_has_m_openingtime();
  m_openingtime_ = value;
}

// optional int32 m_advancetime = 10;
inline bool E_PeractivityPeractivity::has_m_advancetime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_advancetime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_PeractivityPeractivity::clear_has_m_advancetime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_PeractivityPeractivity::clear_m_advancetime() {
  m_advancetime_ = 0;
  clear_has_m_advancetime();
}
inline ::google::protobuf::int32 E_PeractivityPeractivity::m_advancetime() const {
  return m_advancetime_;
}
inline void E_PeractivityPeractivity::set_m_advancetime(::google::protobuf::int32 value) {
  set_has_m_advancetime();
  m_advancetime_ = value;
}

// optional int32 m_intervaltime = 11;
inline bool E_PeractivityPeractivity::has_m_intervaltime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_intervaltime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_PeractivityPeractivity::clear_has_m_intervaltime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_PeractivityPeractivity::clear_m_intervaltime() {
  m_intervaltime_ = 0;
  clear_has_m_intervaltime();
}
inline ::google::protobuf::int32 E_PeractivityPeractivity::m_intervaltime() const {
  return m_intervaltime_;
}
inline void E_PeractivityPeractivity::set_m_intervaltime(::google::protobuf::int32 value) {
  set_has_m_intervaltime();
  m_intervaltime_ = value;
}

// optional int32 m_iscross = 12;
inline bool E_PeractivityPeractivity::has_m_iscross() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_PeractivityPeractivity::set_has_m_iscross() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_PeractivityPeractivity::clear_has_m_iscross() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_PeractivityPeractivity::clear_m_iscross() {
  m_iscross_ = 0;
  clear_has_m_iscross();
}
inline ::google::protobuf::int32 E_PeractivityPeractivity::m_iscross() const {
  return m_iscross_;
}
inline void E_PeractivityPeractivity::set_m_iscross(::google::protobuf::int32 value) {
  set_has_m_iscross();
  m_iscross_ = value;
}

// -------------------------------------------------------------------

// Sheet_PeractivityPeractivity

// repeated .proto_ff.E_PeractivityPeractivity E_PeractivityPeractivity_List = 1;
inline int Sheet_PeractivityPeractivity::e_peractivityperactivity_list_size() const {
  return e_peractivityperactivity_list_.size();
}
inline void Sheet_PeractivityPeractivity::clear_e_peractivityperactivity_list() {
  e_peractivityperactivity_list_.Clear();
}
inline const ::proto_ff::E_PeractivityPeractivity& Sheet_PeractivityPeractivity::e_peractivityperactivity_list(int index) const {
  return e_peractivityperactivity_list_.Get(index);
}
inline ::proto_ff::E_PeractivityPeractivity* Sheet_PeractivityPeractivity::mutable_e_peractivityperactivity_list(int index) {
  return e_peractivityperactivity_list_.Mutable(index);
}
inline ::proto_ff::E_PeractivityPeractivity* Sheet_PeractivityPeractivity::add_e_peractivityperactivity_list() {
  return e_peractivityperactivity_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityPeractivity >&
Sheet_PeractivityPeractivity::e_peractivityperactivity_list() const {
  return e_peractivityperactivity_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityPeractivity >*
Sheet_PeractivityPeractivity::mutable_e_peractivityperactivity_list() {
  return &e_peractivityperactivity_list_;
}

// -------------------------------------------------------------------

// E_PeractivityWeek

// optional int32 m_id = 1;
inline bool E_PeractivityWeek::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_PeractivityWeek::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_PeractivityWeek::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_PeractivityWeek::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_PeractivityWeek::m_id() const {
  return m_id_;
}
inline void E_PeractivityWeek::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_time = 2;
inline bool E_PeractivityWeek::has_m_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_PeractivityWeek::set_has_m_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_PeractivityWeek::clear_has_m_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_PeractivityWeek::clear_m_time() {
  if (m_time_ != &::google::protobuf::internal::kEmptyString) {
    m_time_->clear();
  }
  clear_has_m_time();
}
inline const ::std::string& E_PeractivityWeek::m_time() const {
  return *m_time_;
}
inline void E_PeractivityWeek::set_m_time(const ::std::string& value) {
  set_has_m_time();
  if (m_time_ == &::google::protobuf::internal::kEmptyString) {
    m_time_ = new ::std::string;
  }
  m_time_->assign(value);
}
inline void E_PeractivityWeek::set_m_time(const char* value) {
  set_has_m_time();
  if (m_time_ == &::google::protobuf::internal::kEmptyString) {
    m_time_ = new ::std::string;
  }
  m_time_->assign(value);
}
inline void E_PeractivityWeek::set_m_time(const char* value, size_t size) {
  set_has_m_time();
  if (m_time_ == &::google::protobuf::internal::kEmptyString) {
    m_time_ = new ::std::string;
  }
  m_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_PeractivityWeek::mutable_m_time() {
  set_has_m_time();
  if (m_time_ == &::google::protobuf::internal::kEmptyString) {
    m_time_ = new ::std::string;
  }
  return m_time_;
}
inline ::std::string* E_PeractivityWeek::release_m_time() {
  clear_has_m_time();
  if (m_time_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_time_;
    m_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_PeractivityWeek::set_allocated_m_time(::std::string* m_time) {
  if (m_time_ != &::google::protobuf::internal::kEmptyString) {
    delete m_time_;
  }
  if (m_time) {
    set_has_m_time();
    m_time_ = m_time;
  } else {
    clear_has_m_time();
    m_time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string m_week = 3;
inline int E_PeractivityWeek::m_week_size() const {
  return m_week_.size();
}
inline void E_PeractivityWeek::clear_m_week() {
  m_week_.Clear();
}
inline const ::std::string& E_PeractivityWeek::m_week(int index) const {
  return m_week_.Get(index);
}
inline ::std::string* E_PeractivityWeek::mutable_m_week(int index) {
  return m_week_.Mutable(index);
}
inline void E_PeractivityWeek::set_m_week(int index, const ::std::string& value) {
  m_week_.Mutable(index)->assign(value);
}
inline void E_PeractivityWeek::set_m_week(int index, const char* value) {
  m_week_.Mutable(index)->assign(value);
}
inline void E_PeractivityWeek::set_m_week(int index, const char* value, size_t size) {
  m_week_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_PeractivityWeek::add_m_week() {
  return m_week_.Add();
}
inline void E_PeractivityWeek::add_m_week(const ::std::string& value) {
  m_week_.Add()->assign(value);
}
inline void E_PeractivityWeek::add_m_week(const char* value) {
  m_week_.Add()->assign(value);
}
inline void E_PeractivityWeek::add_m_week(const char* value, size_t size) {
  m_week_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
E_PeractivityWeek::m_week() const {
  return m_week_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
E_PeractivityWeek::mutable_m_week() {
  return &m_week_;
}

// -------------------------------------------------------------------

// Sheet_PeractivityWeek

// repeated .proto_ff.E_PeractivityWeek E_PeractivityWeek_List = 1;
inline int Sheet_PeractivityWeek::e_peractivityweek_list_size() const {
  return e_peractivityweek_list_.size();
}
inline void Sheet_PeractivityWeek::clear_e_peractivityweek_list() {
  e_peractivityweek_list_.Clear();
}
inline const ::proto_ff::E_PeractivityWeek& Sheet_PeractivityWeek::e_peractivityweek_list(int index) const {
  return e_peractivityweek_list_.Get(index);
}
inline ::proto_ff::E_PeractivityWeek* Sheet_PeractivityWeek::mutable_e_peractivityweek_list(int index) {
  return e_peractivityweek_list_.Mutable(index);
}
inline ::proto_ff::E_PeractivityWeek* Sheet_PeractivityWeek::add_e_peractivityweek_list() {
  return e_peractivityweek_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityWeek >&
Sheet_PeractivityWeek::e_peractivityweek_list() const {
  return e_peractivityweek_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_PeractivityWeek >*
Sheet_PeractivityWeek::mutable_e_peractivityweek_list() {
  return &e_peractivityweek_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_perActivity_2eproto__INCLUDED
