// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: back.proto

#ifndef PROTOBUF_back_2eproto__INCLUDED
#define PROTOBUF_back_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_back_2eproto();
void protobuf_AssignDesc_back_2eproto();
void protobuf_ShutdownFile_back_2eproto();

class backbackbackDesc;
class backback;
class Sheet_backback;

// ===================================================================

class backbackbackDesc : public ::google::protobuf::Message {
 public:
  backbackbackDesc();
  virtual ~backbackbackDesc();

  backbackbackDesc(const backbackbackDesc& from);

  inline backbackbackDesc& operator=(const backbackbackDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const backbackbackDesc& default_instance();

  void Swap(backbackbackDesc* other);

  // implements Message ----------------------------------------------

  backbackbackDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const backbackbackDesc& from);
  void MergeFrom(const backbackbackDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Expend = 1;
  inline bool has_expend() const;
  inline void clear_expend();
  static const int kExpendFieldNumber = 1;
  inline ::google::protobuf::int32 expend() const;
  inline void set_expend(::google::protobuf::int32 value);

  // optional int32 Num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 Exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.backbackbackDesc)
 private:
  inline void set_has_expend();
  inline void clear_has_expend();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 expend_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_back_2eproto();
  friend void protobuf_AssignDesc_back_2eproto();
  friend void protobuf_ShutdownFile_back_2eproto();

  void InitAsDefaultInstance();
  static backbackbackDesc* default_instance_;
};
// -------------------------------------------------------------------

class backback : public ::google::protobuf::Message {
 public:
  backback();
  virtual ~backback();

  backback(const backback& from);

  inline backback& operator=(const backback& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const backback& default_instance();

  void Swap(backback* other);

  // implements Message ----------------------------------------------

  backback* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const backback& from);
  void MergeFrom(const backback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 backTimes = 4;
  inline bool has_backtimes() const;
  inline void clear_backtimes();
  static const int kBackTimesFieldNumber = 4;
  inline ::google::protobuf::int32 backtimes() const;
  inline void set_backtimes(::google::protobuf::int32 value);

  // optional int32 vipType = 5;
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kVipTypeFieldNumber = 5;
  inline ::google::protobuf::int32 viptype() const;
  inline void set_viptype(::google::protobuf::int32 value);

  // optional int32 group = 6;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 6;
  inline ::google::protobuf::int32 group() const;
  inline void set_group(::google::protobuf::int32 value);

  // optional int64 duplicateID = 7;
  inline bool has_duplicateid() const;
  inline void clear_duplicateid();
  static const int kDuplicateIDFieldNumber = 7;
  inline ::google::protobuf::int64 duplicateid() const;
  inline void set_duplicateid(::google::protobuf::int64 value);

  // optional int64 bossTypeID = 8;
  inline bool has_bosstypeid() const;
  inline void clear_bosstypeid();
  static const int kBossTypeIDFieldNumber = 8;
  inline ::google::protobuf::int64 bosstypeid() const;
  inline void set_bosstypeid(::google::protobuf::int64 value);

  // optional int32 functionUnlock = 9;
  inline bool has_functionunlock() const;
  inline void clear_functionunlock();
  static const int kFunctionUnlockFieldNumber = 9;
  inline ::google::protobuf::int32 functionunlock() const;
  inline void set_functionunlock(::google::protobuf::int32 value);

  // optional int32 levelLimit = 10;
  inline bool has_levellimit() const;
  inline void clear_levellimit();
  static const int kLevelLimitFieldNumber = 10;
  inline ::google::protobuf::int32 levellimit() const;
  inline void set_levellimit(::google::protobuf::int32 value);

  // optional int64 itemId = 11;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 11;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional string icon = 12;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 12;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // repeated .proto_ff.backbackbackDesc back = 13;
  inline int back_size() const;
  inline void clear_back();
  static const int kBackFieldNumber = 13;
  inline const ::proto_ff::backbackbackDesc& back(int index) const;
  inline ::proto_ff::backbackbackDesc* mutable_back(int index);
  inline ::proto_ff::backbackbackDesc* add_back();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::backbackbackDesc >&
      back() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::backbackbackDesc >*
      mutable_back();

  // repeated int32 param = 14;
  inline int param_size() const;
  inline void clear_param();
  static const int kParamFieldNumber = 14;
  inline ::google::protobuf::int32 param(int index) const;
  inline void set_param(int index, ::google::protobuf::int32 value);
  inline void add_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_param();

  // @@protoc_insertion_point(class_scope:proto_ff.backback)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_backtimes();
  inline void clear_has_backtimes();
  inline void set_has_viptype();
  inline void clear_has_viptype();
  inline void set_has_group();
  inline void clear_has_group();
  inline void set_has_duplicateid();
  inline void clear_has_duplicateid();
  inline void set_has_bosstypeid();
  inline void clear_has_bosstypeid();
  inline void set_has_functionunlock();
  inline void clear_has_functionunlock();
  inline void set_has_levellimit();
  inline void clear_has_levellimit();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_icon();
  inline void clear_has_icon();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::std::string* name_;
  ::google::protobuf::int32 backtimes_;
  ::google::protobuf::int32 viptype_;
  ::google::protobuf::int64 duplicateid_;
  ::google::protobuf::int32 group_;
  ::google::protobuf::int32 functionunlock_;
  ::google::protobuf::int64 bosstypeid_;
  ::google::protobuf::int64 itemid_;
  ::std::string* icon_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::backbackbackDesc > back_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > param_;
  ::google::protobuf::int32 levellimit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_back_2eproto();
  friend void protobuf_AssignDesc_back_2eproto();
  friend void protobuf_ShutdownFile_back_2eproto();

  void InitAsDefaultInstance();
  static backback* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_backback : public ::google::protobuf::Message {
 public:
  Sheet_backback();
  virtual ~Sheet_backback();

  Sheet_backback(const Sheet_backback& from);

  inline Sheet_backback& operator=(const Sheet_backback& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_backback& default_instance();

  void Swap(Sheet_backback* other);

  // implements Message ----------------------------------------------

  Sheet_backback* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_backback& from);
  void MergeFrom(const Sheet_backback& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.backback backback_List = 1;
  inline int backback_list_size() const;
  inline void clear_backback_list();
  static const int kBackbackListFieldNumber = 1;
  inline const ::proto_ff::backback& backback_list(int index) const;
  inline ::proto_ff::backback* mutable_backback_list(int index);
  inline ::proto_ff::backback* add_backback_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::backback >&
      backback_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::backback >*
      mutable_backback_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_backback)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::backback > backback_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_back_2eproto();
  friend void protobuf_AssignDesc_back_2eproto();
  friend void protobuf_ShutdownFile_back_2eproto();

  void InitAsDefaultInstance();
  static Sheet_backback* default_instance_;
};
// ===================================================================


// ===================================================================

// backbackbackDesc

// optional int32 Expend = 1;
inline bool backbackbackDesc::has_expend() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void backbackbackDesc::set_has_expend() {
  _has_bits_[0] |= 0x00000001u;
}
inline void backbackbackDesc::clear_has_expend() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void backbackbackDesc::clear_expend() {
  expend_ = 0;
  clear_has_expend();
}
inline ::google::protobuf::int32 backbackbackDesc::expend() const {
  return expend_;
}
inline void backbackbackDesc::set_expend(::google::protobuf::int32 value) {
  set_has_expend();
  expend_ = value;
}

// optional int32 Num = 2;
inline bool backbackbackDesc::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void backbackbackDesc::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void backbackbackDesc::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void backbackbackDesc::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 backbackbackDesc::num() const {
  return num_;
}
inline void backbackbackDesc::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 Exp = 3;
inline bool backbackbackDesc::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void backbackbackDesc::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void backbackbackDesc::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void backbackbackDesc::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 backbackbackDesc::exp() const {
  return exp_;
}
inline void backbackbackDesc::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// backback

// optional int32 id = 1;
inline bool backback::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void backback::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void backback::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void backback::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 backback::id() const {
  return id_;
}
inline void backback::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool backback::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void backback::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void backback::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void backback::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 backback::type() const {
  return type_;
}
inline void backback::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string name = 3;
inline bool backback::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void backback::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void backback::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void backback::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& backback::name() const {
  return *name_;
}
inline void backback::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void backback::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void backback::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* backback::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* backback::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void backback::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 backTimes = 4;
inline bool backback::has_backtimes() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void backback::set_has_backtimes() {
  _has_bits_[0] |= 0x00000008u;
}
inline void backback::clear_has_backtimes() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void backback::clear_backtimes() {
  backtimes_ = 0;
  clear_has_backtimes();
}
inline ::google::protobuf::int32 backback::backtimes() const {
  return backtimes_;
}
inline void backback::set_backtimes(::google::protobuf::int32 value) {
  set_has_backtimes();
  backtimes_ = value;
}

// optional int32 vipType = 5;
inline bool backback::has_viptype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void backback::set_has_viptype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void backback::clear_has_viptype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void backback::clear_viptype() {
  viptype_ = 0;
  clear_has_viptype();
}
inline ::google::protobuf::int32 backback::viptype() const {
  return viptype_;
}
inline void backback::set_viptype(::google::protobuf::int32 value) {
  set_has_viptype();
  viptype_ = value;
}

// optional int32 group = 6;
inline bool backback::has_group() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void backback::set_has_group() {
  _has_bits_[0] |= 0x00000020u;
}
inline void backback::clear_has_group() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void backback::clear_group() {
  group_ = 0;
  clear_has_group();
}
inline ::google::protobuf::int32 backback::group() const {
  return group_;
}
inline void backback::set_group(::google::protobuf::int32 value) {
  set_has_group();
  group_ = value;
}

// optional int64 duplicateID = 7;
inline bool backback::has_duplicateid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void backback::set_has_duplicateid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void backback::clear_has_duplicateid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void backback::clear_duplicateid() {
  duplicateid_ = GOOGLE_LONGLONG(0);
  clear_has_duplicateid();
}
inline ::google::protobuf::int64 backback::duplicateid() const {
  return duplicateid_;
}
inline void backback::set_duplicateid(::google::protobuf::int64 value) {
  set_has_duplicateid();
  duplicateid_ = value;
}

// optional int64 bossTypeID = 8;
inline bool backback::has_bosstypeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void backback::set_has_bosstypeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void backback::clear_has_bosstypeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void backback::clear_bosstypeid() {
  bosstypeid_ = GOOGLE_LONGLONG(0);
  clear_has_bosstypeid();
}
inline ::google::protobuf::int64 backback::bosstypeid() const {
  return bosstypeid_;
}
inline void backback::set_bosstypeid(::google::protobuf::int64 value) {
  set_has_bosstypeid();
  bosstypeid_ = value;
}

// optional int32 functionUnlock = 9;
inline bool backback::has_functionunlock() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void backback::set_has_functionunlock() {
  _has_bits_[0] |= 0x00000100u;
}
inline void backback::clear_has_functionunlock() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void backback::clear_functionunlock() {
  functionunlock_ = 0;
  clear_has_functionunlock();
}
inline ::google::protobuf::int32 backback::functionunlock() const {
  return functionunlock_;
}
inline void backback::set_functionunlock(::google::protobuf::int32 value) {
  set_has_functionunlock();
  functionunlock_ = value;
}

// optional int32 levelLimit = 10;
inline bool backback::has_levellimit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void backback::set_has_levellimit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void backback::clear_has_levellimit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void backback::clear_levellimit() {
  levellimit_ = 0;
  clear_has_levellimit();
}
inline ::google::protobuf::int32 backback::levellimit() const {
  return levellimit_;
}
inline void backback::set_levellimit(::google::protobuf::int32 value) {
  set_has_levellimit();
  levellimit_ = value;
}

// optional int64 itemId = 11;
inline bool backback::has_itemid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void backback::set_has_itemid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void backback::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void backback::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 backback::itemid() const {
  return itemid_;
}
inline void backback::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string icon = 12;
inline bool backback::has_icon() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void backback::set_has_icon() {
  _has_bits_[0] |= 0x00000800u;
}
inline void backback::clear_has_icon() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void backback::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& backback::icon() const {
  return *icon_;
}
inline void backback::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void backback::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void backback::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* backback::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* backback::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void backback::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.backbackbackDesc back = 13;
inline int backback::back_size() const {
  return back_.size();
}
inline void backback::clear_back() {
  back_.Clear();
}
inline const ::proto_ff::backbackbackDesc& backback::back(int index) const {
  return back_.Get(index);
}
inline ::proto_ff::backbackbackDesc* backback::mutable_back(int index) {
  return back_.Mutable(index);
}
inline ::proto_ff::backbackbackDesc* backback::add_back() {
  return back_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::backbackbackDesc >&
backback::back() const {
  return back_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::backbackbackDesc >*
backback::mutable_back() {
  return &back_;
}

// repeated int32 param = 14;
inline int backback::param_size() const {
  return param_.size();
}
inline void backback::clear_param() {
  param_.Clear();
}
inline ::google::protobuf::int32 backback::param(int index) const {
  return param_.Get(index);
}
inline void backback::set_param(int index, ::google::protobuf::int32 value) {
  param_.Set(index, value);
}
inline void backback::add_param(::google::protobuf::int32 value) {
  param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
backback::param() const {
  return param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
backback::mutable_param() {
  return &param_;
}

// -------------------------------------------------------------------

// Sheet_backback

// repeated .proto_ff.backback backback_List = 1;
inline int Sheet_backback::backback_list_size() const {
  return backback_list_.size();
}
inline void Sheet_backback::clear_backback_list() {
  backback_list_.Clear();
}
inline const ::proto_ff::backback& Sheet_backback::backback_list(int index) const {
  return backback_list_.Get(index);
}
inline ::proto_ff::backback* Sheet_backback::mutable_backback_list(int index) {
  return backback_list_.Mutable(index);
}
inline ::proto_ff::backback* Sheet_backback::add_backback_list() {
  return backback_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::backback >&
Sheet_backback::backback_list() const {
  return backback_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::backback >*
Sheet_backback::mutable_backback_list() {
  return &backback_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_back_2eproto__INCLUDED
