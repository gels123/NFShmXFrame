// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: festival.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "festival.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* festivalmuban_JFduihuan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_JFduihuan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_JFduihuan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_JFduihuan_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_dingzhi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_dingzhi_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_dingzhi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_dingzhi_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_CZfanzuan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_CZfanzuan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_CZfanzuan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_CZfanzuan_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_lianxuCZ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_lianxuCZ_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_lianxuCZ_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_lianxuCZ_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_prerecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_prerecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_prerecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_prerecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_doubleGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_doubleGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_doubleGift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_doubleGift_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalbigyanhuarecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalbigyanhuarecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalbigyanhuarecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalbigyanhuarecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalbigyanhuacost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalbigyanhuacost_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalbigyanhuacost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalbigyanhuacost_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_bigyanhua_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_bigyanhua_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_bigyanhua_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_bigyanhua_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalfestival_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalfestival_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalfestival_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalfestival_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivaltemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivaltemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivaltemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivaltemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_worldboss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_worldboss_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_worldboss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_worldboss_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_libao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_libao_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_libao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_libao_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_double_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_double_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_double_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_double_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmiaoshu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmiaoshu_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmiaoshu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmiaoshu_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_denglu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_denglu_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_denglu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_denglu_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_touzi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_touzi_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_touzi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_touzi_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_zhichong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_zhichong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_zhichong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_zhichong_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_leichong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_leichong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_leichong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_leichong_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_duihuan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_duihuan_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_duihuan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_duihuan_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivald_diaoluo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivald_diaoluo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivald_diaoluo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivald_diaoluo_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_leixiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_leixiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_leixiao_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_leixiao_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_shouchong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_shouchong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_shouchong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_shouchong_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_yanhua_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_yanhua_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_yanhua_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_yanhua_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalyanhuaConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalyanhuaConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalyanhuaConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalyanhuaConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_shop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_shop_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_czjb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_czjb_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_czjb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_czjb_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_scsb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_scsb_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_scsb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_scsb_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_eggs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_eggs_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_eggs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_eggs_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivaleggConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivaleggConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivaleggConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivaleggConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalconstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalconstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_shousha_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_shousha_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_shousha_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_shousha_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalmuban_huoyue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalmuban_huoyue_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_festivalmuban_huoyue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_festivalmuban_huoyue_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_festival_2eproto() {
  protobuf_AddDesc_festival_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "festival.proto");
  GOOGLE_CHECK(file != NULL);
  festivalmuban_JFduihuan_descriptor_ = file->message_type(0);
  static const int festivalmuban_JFduihuan_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_JFduihuan, tiaojianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_JFduihuan, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_JFduihuan, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_JFduihuan, prizenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_JFduihuan, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_JFduihuan, propnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_JFduihuan, times_),
  };
  festivalmuban_JFduihuan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_JFduihuan_descriptor_,
      festivalmuban_JFduihuan::default_instance_,
      festivalmuban_JFduihuan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_JFduihuan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_JFduihuan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_JFduihuan));
  Sheet_festivalmuban_JFduihuan_descriptor_ = file->message_type(1);
  static const int Sheet_festivalmuban_JFduihuan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_JFduihuan, festivalmuban_jfduihuan_list_),
  };
  Sheet_festivalmuban_JFduihuan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_JFduihuan_descriptor_,
      Sheet_festivalmuban_JFduihuan::default_instance_,
      Sheet_festivalmuban_JFduihuan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_JFduihuan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_JFduihuan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_JFduihuan));
  festivalmuban_dingzhi_descriptor_ = file->message_type(2);
  static const int festivalmuban_dingzhi_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, mustboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, currencytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, freeboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, freenum_),
  };
  festivalmuban_dingzhi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_dingzhi_descriptor_,
      festivalmuban_dingzhi::default_instance_,
      festivalmuban_dingzhi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_dingzhi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_dingzhi));
  Sheet_festivalmuban_dingzhi_descriptor_ = file->message_type(3);
  static const int Sheet_festivalmuban_dingzhi_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_dingzhi, festivalmuban_dingzhi_list_),
  };
  Sheet_festivalmuban_dingzhi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_dingzhi_descriptor_,
      Sheet_festivalmuban_dingzhi::default_instance_,
      Sheet_festivalmuban_dingzhi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_dingzhi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_dingzhi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_dingzhi));
  festivalmuban_CZfanzuan_descriptor_ = file->message_type(4);
  static const int festivalmuban_CZfanzuan_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_CZfanzuan, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_CZfanzuan, rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_CZfanzuan, repaytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_CZfanzuan, repaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_CZfanzuan, timeslimit_),
  };
  festivalmuban_CZfanzuan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_CZfanzuan_descriptor_,
      festivalmuban_CZfanzuan::default_instance_,
      festivalmuban_CZfanzuan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_CZfanzuan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_CZfanzuan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_CZfanzuan));
  Sheet_festivalmuban_CZfanzuan_descriptor_ = file->message_type(5);
  static const int Sheet_festivalmuban_CZfanzuan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_CZfanzuan, festivalmuban_czfanzuan_list_),
  };
  Sheet_festivalmuban_CZfanzuan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_CZfanzuan_descriptor_,
      Sheet_festivalmuban_CZfanzuan::default_instance_,
      Sheet_festivalmuban_CZfanzuan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_CZfanzuan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_CZfanzuan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_CZfanzuan));
  festivalmuban_lianxuCZ_descriptor_ = file->message_type(6);
  static const int festivalmuban_lianxuCZ_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_lianxuCZ, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_lianxuCZ, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_lianxuCZ, remarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_lianxuCZ, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_lianxuCZ, jiangli_),
  };
  festivalmuban_lianxuCZ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_lianxuCZ_descriptor_,
      festivalmuban_lianxuCZ::default_instance_,
      festivalmuban_lianxuCZ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_lianxuCZ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_lianxuCZ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_lianxuCZ));
  Sheet_festivalmuban_lianxuCZ_descriptor_ = file->message_type(7);
  static const int Sheet_festivalmuban_lianxuCZ_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_lianxuCZ, festivalmuban_lianxucz_list_),
  };
  Sheet_festivalmuban_lianxuCZ_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_lianxuCZ_descriptor_,
      Sheet_festivalmuban_lianxuCZ::default_instance_,
      Sheet_festivalmuban_lianxuCZ_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_lianxuCZ, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_lianxuCZ, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_lianxuCZ));
  festivalmuban_prerecharge_descriptor_ = file->message_type(8);
  static const int festivalmuban_prerecharge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_prerecharge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_prerecharge, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_prerecharge, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_prerecharge, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_prerecharge, rechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_prerecharge, times_),
  };
  festivalmuban_prerecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_prerecharge_descriptor_,
      festivalmuban_prerecharge::default_instance_,
      festivalmuban_prerecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_prerecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_prerecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_prerecharge));
  Sheet_festivalmuban_prerecharge_descriptor_ = file->message_type(9);
  static const int Sheet_festivalmuban_prerecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_prerecharge, festivalmuban_prerecharge_list_),
  };
  Sheet_festivalmuban_prerecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_prerecharge_descriptor_,
      Sheet_festivalmuban_prerecharge::default_instance_,
      Sheet_festivalmuban_prerecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_prerecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_prerecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_prerecharge));
  festivalmuban_doubleGift_descriptor_ = file->message_type(10);
  static const int festivalmuban_doubleGift_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_doubleGift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_doubleGift, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_doubleGift, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_doubleGift, freebox_),
  };
  festivalmuban_doubleGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_doubleGift_descriptor_,
      festivalmuban_doubleGift::default_instance_,
      festivalmuban_doubleGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_doubleGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_doubleGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_doubleGift));
  Sheet_festivalmuban_doubleGift_descriptor_ = file->message_type(11);
  static const int Sheet_festivalmuban_doubleGift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_doubleGift, festivalmuban_doublegift_list_),
  };
  Sheet_festivalmuban_doubleGift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_doubleGift_descriptor_,
      Sheet_festivalmuban_doubleGift::default_instance_,
      Sheet_festivalmuban_doubleGift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_doubleGift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_doubleGift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_doubleGift));
  festivalbigyanhuarecharge_descriptor_ = file->message_type(12);
  static const int festivalbigyanhuarecharge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalbigyanhuarecharge, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalbigyanhuarecharge, recharge_),
  };
  festivalbigyanhuarecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalbigyanhuarecharge_descriptor_,
      festivalbigyanhuarecharge::default_instance_,
      festivalbigyanhuarecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalbigyanhuarecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalbigyanhuarecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalbigyanhuarecharge));
  Sheet_festivalbigyanhuarecharge_descriptor_ = file->message_type(13);
  static const int Sheet_festivalbigyanhuarecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalbigyanhuarecharge, festivalbigyanhuarecharge_list_),
  };
  Sheet_festivalbigyanhuarecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalbigyanhuarecharge_descriptor_,
      Sheet_festivalbigyanhuarecharge::default_instance_,
      Sheet_festivalbigyanhuarecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalbigyanhuarecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalbigyanhuarecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalbigyanhuarecharge));
  festivalbigyanhuacost_descriptor_ = file->message_type(14);
  static const int festivalbigyanhuacost_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalbigyanhuacost, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalbigyanhuacost, singlecost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalbigyanhuacost, allcost_),
  };
  festivalbigyanhuacost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalbigyanhuacost_descriptor_,
      festivalbigyanhuacost::default_instance_,
      festivalbigyanhuacost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalbigyanhuacost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalbigyanhuacost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalbigyanhuacost));
  Sheet_festivalbigyanhuacost_descriptor_ = file->message_type(15);
  static const int Sheet_festivalbigyanhuacost_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalbigyanhuacost, festivalbigyanhuacost_list_),
  };
  Sheet_festivalbigyanhuacost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalbigyanhuacost_descriptor_,
      Sheet_festivalbigyanhuacost::default_instance_,
      Sheet_festivalbigyanhuacost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalbigyanhuacost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalbigyanhuacost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalbigyanhuacost));
  festivalmuban_bigyanhua_descriptor_ = file->message_type(16);
  static const int festivalmuban_bigyanhua_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, modeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, scale_),
  };
  festivalmuban_bigyanhua_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_bigyanhua_descriptor_,
      festivalmuban_bigyanhua::default_instance_,
      festivalmuban_bigyanhua_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_bigyanhua, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_bigyanhua));
  Sheet_festivalmuban_bigyanhua_descriptor_ = file->message_type(17);
  static const int Sheet_festivalmuban_bigyanhua_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_bigyanhua, festivalmuban_bigyanhua_list_),
  };
  Sheet_festivalmuban_bigyanhua_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_bigyanhua_descriptor_,
      Sheet_festivalmuban_bigyanhua::default_instance_,
      Sheet_festivalmuban_bigyanhua_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_bigyanhua, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_bigyanhua, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_bigyanhua));
  festivalfestival_descriptor_ = file->message_type(18);
  static const int festivalfestival_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, huodongtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, nameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, servertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, timea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, timeb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, timetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, rechange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, ifopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, loginpoppriority_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, belong_),
  };
  festivalfestival_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalfestival_descriptor_,
      festivalfestival::default_instance_,
      festivalfestival_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalfestival, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalfestival));
  Sheet_festivalfestival_descriptor_ = file->message_type(19);
  static const int Sheet_festivalfestival_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalfestival, festivalfestival_list_),
  };
  Sheet_festivalfestival_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalfestival_descriptor_,
      Sheet_festivalfestival::default_instance_,
      Sheet_festivalfestival_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalfestival, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalfestival, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalfestival));
  festivaltemplate_descriptor_ = file->message_type(20);
  static const int festivaltemplate_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, muban_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, nameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, timea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, timeb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, timetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, rechange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, remarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, jiangli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, beijing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, desc_),
  };
  festivaltemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivaltemplate_descriptor_,
      festivaltemplate::default_instance_,
      festivaltemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaltemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivaltemplate));
  Sheet_festivaltemplate_descriptor_ = file->message_type(21);
  static const int Sheet_festivaltemplate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivaltemplate, festivaltemplate_list_),
  };
  Sheet_festivaltemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivaltemplate_descriptor_,
      Sheet_festivaltemplate::default_instance_,
      Sheet_festivaltemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivaltemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivaltemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivaltemplate));
  festivalmuban_worldboss_descriptor_ = file->message_type(22);
  static const int festivalmuban_worldboss_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_worldboss, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_worldboss, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_worldboss, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_worldboss, conditiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_worldboss, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_worldboss, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_worldboss, boxid_),
  };
  festivalmuban_worldboss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_worldboss_descriptor_,
      festivalmuban_worldboss::default_instance_,
      festivalmuban_worldboss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_worldboss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_worldboss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_worldboss));
  Sheet_festivalmuban_worldboss_descriptor_ = file->message_type(23);
  static const int Sheet_festivalmuban_worldboss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_worldboss, festivalmuban_worldboss_list_),
  };
  Sheet_festivalmuban_worldboss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_worldboss_descriptor_,
      Sheet_festivalmuban_worldboss::default_instance_,
      Sheet_festivalmuban_worldboss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_worldboss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_worldboss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_worldboss));
  festivalmuban_libao_descriptor_ = file->message_type(24);
  static const int festivalmuban_libao_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, term_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, currencytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, backtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, dayback_),
  };
  festivalmuban_libao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_libao_descriptor_,
      festivalmuban_libao::default_instance_,
      festivalmuban_libao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_libao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_libao));
  Sheet_festivalmuban_libao_descriptor_ = file->message_type(25);
  static const int Sheet_festivalmuban_libao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_libao, festivalmuban_libao_list_),
  };
  Sheet_festivalmuban_libao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_libao_descriptor_,
      Sheet_festivalmuban_libao::default_instance_,
      Sheet_festivalmuban_libao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_libao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_libao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_libao));
  festivalmuban_double_descriptor_ = file->message_type(26);
  static const int festivalmuban_double_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_double, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_double, gear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_double, boxid_),
  };
  festivalmuban_double_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_double_descriptor_,
      festivalmuban_double::default_instance_,
      festivalmuban_double_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_double, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_double, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_double));
  Sheet_festivalmuban_double_descriptor_ = file->message_type(27);
  static const int Sheet_festivalmuban_double_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_double, festivalmuban_double_list_),
  };
  Sheet_festivalmuban_double_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_double_descriptor_,
      Sheet_festivalmuban_double::default_instance_,
      Sheet_festivalmuban_double_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_double, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_double, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_double));
  festivalmiaoshu_descriptor_ = file->message_type(28);
  static const int festivalmiaoshu_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmiaoshu, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmiaoshu, wenzi_),
  };
  festivalmiaoshu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmiaoshu_descriptor_,
      festivalmiaoshu::default_instance_,
      festivalmiaoshu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmiaoshu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmiaoshu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmiaoshu));
  Sheet_festivalmiaoshu_descriptor_ = file->message_type(29);
  static const int Sheet_festivalmiaoshu_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmiaoshu, festivalmiaoshu_list_),
  };
  Sheet_festivalmiaoshu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmiaoshu_descriptor_,
      Sheet_festivalmiaoshu::default_instance_,
      Sheet_festivalmiaoshu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmiaoshu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmiaoshu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmiaoshu));
  festivalmuban_denglu_descriptor_ = file->message_type(30);
  static const int festivalmuban_denglu_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_denglu, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_denglu, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_denglu, remarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_denglu, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_denglu, jiangli_),
  };
  festivalmuban_denglu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_denglu_descriptor_,
      festivalmuban_denglu::default_instance_,
      festivalmuban_denglu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_denglu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_denglu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_denglu));
  Sheet_festivalmuban_denglu_descriptor_ = file->message_type(31);
  static const int Sheet_festivalmuban_denglu_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_denglu, festivalmuban_denglu_list_),
  };
  Sheet_festivalmuban_denglu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_denglu_descriptor_,
      Sheet_festivalmuban_denglu::default_instance_,
      Sheet_festivalmuban_denglu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_denglu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_denglu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_denglu));
  festivalmuban_touzi_descriptor_ = file->message_type(32);
  static const int festivalmuban_touzi_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, addnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, remarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, jiangli_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, linkid_),
  };
  festivalmuban_touzi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_touzi_descriptor_,
      festivalmuban_touzi::default_instance_,
      festivalmuban_touzi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_touzi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_touzi));
  Sheet_festivalmuban_touzi_descriptor_ = file->message_type(33);
  static const int Sheet_festivalmuban_touzi_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_touzi, festivalmuban_touzi_list_),
  };
  Sheet_festivalmuban_touzi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_touzi_descriptor_,
      Sheet_festivalmuban_touzi::default_instance_,
      Sheet_festivalmuban_touzi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_touzi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_touzi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_touzi));
  festivalmuban_zhichong_descriptor_ = file->message_type(34);
  static const int festivalmuban_zhichong_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_zhichong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_zhichong, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_zhichong, severnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_zhichong, remarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_zhichong, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_zhichong, jiangli_),
  };
  festivalmuban_zhichong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_zhichong_descriptor_,
      festivalmuban_zhichong::default_instance_,
      festivalmuban_zhichong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_zhichong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_zhichong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_zhichong));
  Sheet_festivalmuban_zhichong_descriptor_ = file->message_type(35);
  static const int Sheet_festivalmuban_zhichong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_zhichong, festivalmuban_zhichong_list_),
  };
  Sheet_festivalmuban_zhichong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_zhichong_descriptor_,
      Sheet_festivalmuban_zhichong::default_instance_,
      Sheet_festivalmuban_zhichong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_zhichong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_zhichong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_zhichong));
  festivalmuban_leichong_descriptor_ = file->message_type(36);
  static const int festivalmuban_leichong_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leichong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leichong, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leichong, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leichong, remarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leichong, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leichong, jiangli_),
  };
  festivalmuban_leichong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_leichong_descriptor_,
      festivalmuban_leichong::default_instance_,
      festivalmuban_leichong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leichong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leichong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_leichong));
  Sheet_festivalmuban_leichong_descriptor_ = file->message_type(37);
  static const int Sheet_festivalmuban_leichong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_leichong, festivalmuban_leichong_list_),
  };
  Sheet_festivalmuban_leichong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_leichong_descriptor_,
      Sheet_festivalmuban_leichong::default_instance_,
      Sheet_festivalmuban_leichong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_leichong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_leichong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_leichong));
  festivalmuban_duihuan_descriptor_ = file->message_type(38);
  static const int festivalmuban_duihuan_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_duihuan, tiaojianid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_duihuan, prizeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_duihuan, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_duihuan, prizenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_duihuan, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_duihuan, propnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_duihuan, times_),
  };
  festivalmuban_duihuan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_duihuan_descriptor_,
      festivalmuban_duihuan::default_instance_,
      festivalmuban_duihuan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_duihuan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_duihuan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_duihuan));
  Sheet_festivalmuban_duihuan_descriptor_ = file->message_type(39);
  static const int Sheet_festivalmuban_duihuan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_duihuan, festivalmuban_duihuan_list_),
  };
  Sheet_festivalmuban_duihuan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_duihuan_descriptor_,
      Sheet_festivalmuban_duihuan::default_instance_,
      Sheet_festivalmuban_duihuan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_duihuan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_duihuan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_duihuan));
  festivald_diaoluo_descriptor_ = file->message_type(40);
  static const int festivald_diaoluo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivald_diaoluo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivald_diaoluo, mixlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivald_diaoluo, bosstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivald_diaoluo, dropnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivald_diaoluo, droprand_),
  };
  festivald_diaoluo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivald_diaoluo_descriptor_,
      festivald_diaoluo::default_instance_,
      festivald_diaoluo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivald_diaoluo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivald_diaoluo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivald_diaoluo));
  Sheet_festivald_diaoluo_descriptor_ = file->message_type(41);
  static const int Sheet_festivald_diaoluo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivald_diaoluo, festivald_diaoluo_list_),
  };
  Sheet_festivald_diaoluo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivald_diaoluo_descriptor_,
      Sheet_festivald_diaoluo::default_instance_,
      Sheet_festivald_diaoluo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivald_diaoluo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivald_diaoluo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivald_diaoluo));
  festivalmuban_leixiao_descriptor_ = file->message_type(42);
  static const int festivalmuban_leixiao_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leixiao, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leixiao, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leixiao, xiaofei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leixiao, remarkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leixiao, miaoshu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leixiao, jiangli_),
  };
  festivalmuban_leixiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_leixiao_descriptor_,
      festivalmuban_leixiao::default_instance_,
      festivalmuban_leixiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leixiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_leixiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_leixiao));
  Sheet_festivalmuban_leixiao_descriptor_ = file->message_type(43);
  static const int Sheet_festivalmuban_leixiao_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_leixiao, festivalmuban_leixiao_list_),
  };
  Sheet_festivalmuban_leixiao_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_leixiao_descriptor_,
      Sheet_festivalmuban_leixiao::default_instance_,
      Sheet_festivalmuban_leixiao_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_leixiao, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_leixiao, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_leixiao));
  festivalmuban_shouchong_descriptor_ = file->message_type(44);
  static const int festivalmuban_shouchong_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shouchong, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shouchong, jiangli_),
  };
  festivalmuban_shouchong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_shouchong_descriptor_,
      festivalmuban_shouchong::default_instance_,
      festivalmuban_shouchong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shouchong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shouchong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_shouchong));
  Sheet_festivalmuban_shouchong_descriptor_ = file->message_type(45);
  static const int Sheet_festivalmuban_shouchong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_shouchong, festivalmuban_shouchong_list_),
  };
  Sheet_festivalmuban_shouchong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_shouchong_descriptor_,
      Sheet_festivalmuban_shouchong::default_instance_,
      Sheet_festivalmuban_shouchong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_shouchong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_shouchong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_shouchong));
  festivalmuban_yanhua_descriptor_ = file->message_type(46);
  static const int festivalmuban_yanhua_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, relation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, modelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, modeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, scale_),
  };
  festivalmuban_yanhua_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_yanhua_descriptor_,
      festivalmuban_yanhua::default_instance_,
      festivalmuban_yanhua_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_yanhua, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_yanhua));
  Sheet_festivalmuban_yanhua_descriptor_ = file->message_type(47);
  static const int Sheet_festivalmuban_yanhua_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_yanhua, festivalmuban_yanhua_list_),
  };
  Sheet_festivalmuban_yanhua_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_yanhua_descriptor_,
      Sheet_festivalmuban_yanhua::default_instance_,
      Sheet_festivalmuban_yanhua_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_yanhua, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_yanhua, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_yanhua));
  festivalyanhuaConstant_descriptor_ = file->message_type(48);
  static const int festivalyanhuaConstant_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalyanhuaConstant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalyanhuaConstant, costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalyanhuaConstant, rewardpool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalyanhuaConstant, cointye_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalyanhuaConstant, number_),
  };
  festivalyanhuaConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalyanhuaConstant_descriptor_,
      festivalyanhuaConstant::default_instance_,
      festivalyanhuaConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalyanhuaConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalyanhuaConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalyanhuaConstant));
  Sheet_festivalyanhuaConstant_descriptor_ = file->message_type(49);
  static const int Sheet_festivalyanhuaConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalyanhuaConstant, festivalyanhuaconstant_list_),
  };
  Sheet_festivalyanhuaConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalyanhuaConstant_descriptor_,
      Sheet_festivalyanhuaConstant::default_instance_,
      Sheet_festivalyanhuaConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalyanhuaConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalyanhuaConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalyanhuaConstant));
  festivalmuban_shop_descriptor_ = file->message_type(50);
  static const int festivalmuban_shop_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, pricea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, priceb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, discount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, quantity_),
  };
  festivalmuban_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_shop_descriptor_,
      festivalmuban_shop::default_instance_,
      festivalmuban_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_shop));
  Sheet_festivalmuban_shop_descriptor_ = file->message_type(51);
  static const int Sheet_festivalmuban_shop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_shop, festivalmuban_shop_list_),
  };
  Sheet_festivalmuban_shop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_shop_descriptor_,
      Sheet_festivalmuban_shop::default_instance_,
      Sheet_festivalmuban_shop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_shop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_shop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_shop));
  festivalmuban_czjb_descriptor_ = file->message_type(52);
  static const int festivalmuban_czjb_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_czjb, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_czjb, rechargepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_czjb, perc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_czjb, fristpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_czjb, presenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_czjb, point_),
  };
  festivalmuban_czjb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_czjb_descriptor_,
      festivalmuban_czjb::default_instance_,
      festivalmuban_czjb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_czjb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_czjb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_czjb));
  Sheet_festivalmuban_czjb_descriptor_ = file->message_type(53);
  static const int Sheet_festivalmuban_czjb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_czjb, festivalmuban_czjb_list_),
  };
  Sheet_festivalmuban_czjb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_czjb_descriptor_,
      Sheet_festivalmuban_czjb::default_instance_,
      Sheet_festivalmuban_czjb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_czjb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_czjb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_czjb));
  festivalmuban_scsb_descriptor_ = file->message_type(54);
  static const int festivalmuban_scsb_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_scsb, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_scsb, rechargepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_scsb, fristpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_scsb, presenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_scsb, point_),
  };
  festivalmuban_scsb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_scsb_descriptor_,
      festivalmuban_scsb::default_instance_,
      festivalmuban_scsb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_scsb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_scsb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_scsb));
  Sheet_festivalmuban_scsb_descriptor_ = file->message_type(55);
  static const int Sheet_festivalmuban_scsb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_scsb, festivalmuban_scsb_list_),
  };
  Sheet_festivalmuban_scsb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_scsb_descriptor_,
      Sheet_festivalmuban_scsb::default_instance_,
      Sheet_festivalmuban_scsb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_scsb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_scsb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_scsb));
  festivalmuban_eggs_descriptor_ = file->message_type(56);
  static const int festivalmuban_eggs_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, isnote_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, relation_),
  };
  festivalmuban_eggs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_eggs_descriptor_,
      festivalmuban_eggs::default_instance_,
      festivalmuban_eggs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_eggs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_eggs));
  Sheet_festivalmuban_eggs_descriptor_ = file->message_type(57);
  static const int Sheet_festivalmuban_eggs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_eggs, festivalmuban_eggs_list_),
  };
  Sheet_festivalmuban_eggs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_eggs_descriptor_,
      Sheet_festivalmuban_eggs::default_instance_,
      Sheet_festivalmuban_eggs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_eggs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_eggs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_eggs));
  festivaleggConstant_descriptor_ = file->message_type(58);
  static const int festivaleggConstant_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, exreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, freetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, poolchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, specialrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, specialaddrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, flashcost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, rewardpool_),
  };
  festivaleggConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivaleggConstant_descriptor_,
      festivaleggConstant::default_instance_,
      festivaleggConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivaleggConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivaleggConstant));
  Sheet_festivaleggConstant_descriptor_ = file->message_type(59);
  static const int Sheet_festivaleggConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivaleggConstant, festivaleggconstant_list_),
  };
  Sheet_festivaleggConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivaleggConstant_descriptor_,
      Sheet_festivaleggConstant::default_instance_,
      Sheet_festivaleggConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivaleggConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivaleggConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivaleggConstant));
  festivalconstant_descriptor_ = file->message_type(60);
  static const int festivalconstant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalconstant, constantid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalconstant, constantdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalconstant, stringdata_),
  };
  festivalconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalconstant_descriptor_,
      festivalconstant::default_instance_,
      festivalconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalconstant));
  Sheet_festivalconstant_descriptor_ = file->message_type(61);
  static const int Sheet_festivalconstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalconstant, festivalconstant_list_),
  };
  Sheet_festivalconstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalconstant_descriptor_,
      Sheet_festivalconstant::default_instance_,
      Sheet_festivalconstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalconstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalconstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalconstant));
  festivalmuban_shousha_descriptor_ = file->message_type(62);
  static const int festivalmuban_shousha_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shousha, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shousha, bossid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shousha, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shousha, linkid_),
  };
  festivalmuban_shousha_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_shousha_descriptor_,
      festivalmuban_shousha::default_instance_,
      festivalmuban_shousha_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shousha, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_shousha, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_shousha));
  Sheet_festivalmuban_shousha_descriptor_ = file->message_type(63);
  static const int Sheet_festivalmuban_shousha_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_shousha, festivalmuban_shousha_list_),
  };
  Sheet_festivalmuban_shousha_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_shousha_descriptor_,
      Sheet_festivalmuban_shousha::default_instance_,
      Sheet_festivalmuban_shousha_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_shousha, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_shousha, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_shousha));
  festivalmuban_huoyue_descriptor_ = file->message_type(64);
  static const int festivalmuban_huoyue_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_huoyue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_huoyue, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_huoyue, desc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_huoyue, boxid_),
  };
  festivalmuban_huoyue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalmuban_huoyue_descriptor_,
      festivalmuban_huoyue::default_instance_,
      festivalmuban_huoyue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_huoyue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalmuban_huoyue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalmuban_huoyue));
  Sheet_festivalmuban_huoyue_descriptor_ = file->message_type(65);
  static const int Sheet_festivalmuban_huoyue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_huoyue, festivalmuban_huoyue_list_),
  };
  Sheet_festivalmuban_huoyue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_festivalmuban_huoyue_descriptor_,
      Sheet_festivalmuban_huoyue::default_instance_,
      Sheet_festivalmuban_huoyue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_huoyue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_festivalmuban_huoyue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_festivalmuban_huoyue));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_festival_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_JFduihuan_descriptor_, &festivalmuban_JFduihuan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_JFduihuan_descriptor_, &Sheet_festivalmuban_JFduihuan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_dingzhi_descriptor_, &festivalmuban_dingzhi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_dingzhi_descriptor_, &Sheet_festivalmuban_dingzhi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_CZfanzuan_descriptor_, &festivalmuban_CZfanzuan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_CZfanzuan_descriptor_, &Sheet_festivalmuban_CZfanzuan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_lianxuCZ_descriptor_, &festivalmuban_lianxuCZ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_lianxuCZ_descriptor_, &Sheet_festivalmuban_lianxuCZ::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_prerecharge_descriptor_, &festivalmuban_prerecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_prerecharge_descriptor_, &Sheet_festivalmuban_prerecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_doubleGift_descriptor_, &festivalmuban_doubleGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_doubleGift_descriptor_, &Sheet_festivalmuban_doubleGift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalbigyanhuarecharge_descriptor_, &festivalbigyanhuarecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalbigyanhuarecharge_descriptor_, &Sheet_festivalbigyanhuarecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalbigyanhuacost_descriptor_, &festivalbigyanhuacost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalbigyanhuacost_descriptor_, &Sheet_festivalbigyanhuacost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_bigyanhua_descriptor_, &festivalmuban_bigyanhua::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_bigyanhua_descriptor_, &Sheet_festivalmuban_bigyanhua::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalfestival_descriptor_, &festivalfestival::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalfestival_descriptor_, &Sheet_festivalfestival::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivaltemplate_descriptor_, &festivaltemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivaltemplate_descriptor_, &Sheet_festivaltemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_worldboss_descriptor_, &festivalmuban_worldboss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_worldboss_descriptor_, &Sheet_festivalmuban_worldboss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_libao_descriptor_, &festivalmuban_libao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_libao_descriptor_, &Sheet_festivalmuban_libao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_double_descriptor_, &festivalmuban_double::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_double_descriptor_, &Sheet_festivalmuban_double::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmiaoshu_descriptor_, &festivalmiaoshu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmiaoshu_descriptor_, &Sheet_festivalmiaoshu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_denglu_descriptor_, &festivalmuban_denglu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_denglu_descriptor_, &Sheet_festivalmuban_denglu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_touzi_descriptor_, &festivalmuban_touzi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_touzi_descriptor_, &Sheet_festivalmuban_touzi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_zhichong_descriptor_, &festivalmuban_zhichong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_zhichong_descriptor_, &Sheet_festivalmuban_zhichong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_leichong_descriptor_, &festivalmuban_leichong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_leichong_descriptor_, &Sheet_festivalmuban_leichong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_duihuan_descriptor_, &festivalmuban_duihuan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_duihuan_descriptor_, &Sheet_festivalmuban_duihuan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivald_diaoluo_descriptor_, &festivald_diaoluo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivald_diaoluo_descriptor_, &Sheet_festivald_diaoluo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_leixiao_descriptor_, &festivalmuban_leixiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_leixiao_descriptor_, &Sheet_festivalmuban_leixiao::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_shouchong_descriptor_, &festivalmuban_shouchong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_shouchong_descriptor_, &Sheet_festivalmuban_shouchong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_yanhua_descriptor_, &festivalmuban_yanhua::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_yanhua_descriptor_, &Sheet_festivalmuban_yanhua::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalyanhuaConstant_descriptor_, &festivalyanhuaConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalyanhuaConstant_descriptor_, &Sheet_festivalyanhuaConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_shop_descriptor_, &festivalmuban_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_shop_descriptor_, &Sheet_festivalmuban_shop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_czjb_descriptor_, &festivalmuban_czjb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_czjb_descriptor_, &Sheet_festivalmuban_czjb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_scsb_descriptor_, &festivalmuban_scsb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_scsb_descriptor_, &Sheet_festivalmuban_scsb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_eggs_descriptor_, &festivalmuban_eggs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_eggs_descriptor_, &Sheet_festivalmuban_eggs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivaleggConstant_descriptor_, &festivaleggConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivaleggConstant_descriptor_, &Sheet_festivaleggConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalconstant_descriptor_, &festivalconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalconstant_descriptor_, &Sheet_festivalconstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_shousha_descriptor_, &festivalmuban_shousha::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_shousha_descriptor_, &Sheet_festivalmuban_shousha::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalmuban_huoyue_descriptor_, &festivalmuban_huoyue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_festivalmuban_huoyue_descriptor_, &Sheet_festivalmuban_huoyue::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_festival_2eproto() {
  delete festivalmuban_JFduihuan::default_instance_;
  delete festivalmuban_JFduihuan_reflection_;
  delete Sheet_festivalmuban_JFduihuan::default_instance_;
  delete Sheet_festivalmuban_JFduihuan_reflection_;
  delete festivalmuban_dingzhi::default_instance_;
  delete festivalmuban_dingzhi_reflection_;
  delete Sheet_festivalmuban_dingzhi::default_instance_;
  delete Sheet_festivalmuban_dingzhi_reflection_;
  delete festivalmuban_CZfanzuan::default_instance_;
  delete festivalmuban_CZfanzuan_reflection_;
  delete Sheet_festivalmuban_CZfanzuan::default_instance_;
  delete Sheet_festivalmuban_CZfanzuan_reflection_;
  delete festivalmuban_lianxuCZ::default_instance_;
  delete festivalmuban_lianxuCZ_reflection_;
  delete Sheet_festivalmuban_lianxuCZ::default_instance_;
  delete Sheet_festivalmuban_lianxuCZ_reflection_;
  delete festivalmuban_prerecharge::default_instance_;
  delete festivalmuban_prerecharge_reflection_;
  delete Sheet_festivalmuban_prerecharge::default_instance_;
  delete Sheet_festivalmuban_prerecharge_reflection_;
  delete festivalmuban_doubleGift::default_instance_;
  delete festivalmuban_doubleGift_reflection_;
  delete Sheet_festivalmuban_doubleGift::default_instance_;
  delete Sheet_festivalmuban_doubleGift_reflection_;
  delete festivalbigyanhuarecharge::default_instance_;
  delete festivalbigyanhuarecharge_reflection_;
  delete Sheet_festivalbigyanhuarecharge::default_instance_;
  delete Sheet_festivalbigyanhuarecharge_reflection_;
  delete festivalbigyanhuacost::default_instance_;
  delete festivalbigyanhuacost_reflection_;
  delete Sheet_festivalbigyanhuacost::default_instance_;
  delete Sheet_festivalbigyanhuacost_reflection_;
  delete festivalmuban_bigyanhua::default_instance_;
  delete festivalmuban_bigyanhua_reflection_;
  delete Sheet_festivalmuban_bigyanhua::default_instance_;
  delete Sheet_festivalmuban_bigyanhua_reflection_;
  delete festivalfestival::default_instance_;
  delete festivalfestival_reflection_;
  delete Sheet_festivalfestival::default_instance_;
  delete Sheet_festivalfestival_reflection_;
  delete festivaltemplate::default_instance_;
  delete festivaltemplate_reflection_;
  delete Sheet_festivaltemplate::default_instance_;
  delete Sheet_festivaltemplate_reflection_;
  delete festivalmuban_worldboss::default_instance_;
  delete festivalmuban_worldboss_reflection_;
  delete Sheet_festivalmuban_worldboss::default_instance_;
  delete Sheet_festivalmuban_worldboss_reflection_;
  delete festivalmuban_libao::default_instance_;
  delete festivalmuban_libao_reflection_;
  delete Sheet_festivalmuban_libao::default_instance_;
  delete Sheet_festivalmuban_libao_reflection_;
  delete festivalmuban_double::default_instance_;
  delete festivalmuban_double_reflection_;
  delete Sheet_festivalmuban_double::default_instance_;
  delete Sheet_festivalmuban_double_reflection_;
  delete festivalmiaoshu::default_instance_;
  delete festivalmiaoshu_reflection_;
  delete Sheet_festivalmiaoshu::default_instance_;
  delete Sheet_festivalmiaoshu_reflection_;
  delete festivalmuban_denglu::default_instance_;
  delete festivalmuban_denglu_reflection_;
  delete Sheet_festivalmuban_denglu::default_instance_;
  delete Sheet_festivalmuban_denglu_reflection_;
  delete festivalmuban_touzi::default_instance_;
  delete festivalmuban_touzi_reflection_;
  delete Sheet_festivalmuban_touzi::default_instance_;
  delete Sheet_festivalmuban_touzi_reflection_;
  delete festivalmuban_zhichong::default_instance_;
  delete festivalmuban_zhichong_reflection_;
  delete Sheet_festivalmuban_zhichong::default_instance_;
  delete Sheet_festivalmuban_zhichong_reflection_;
  delete festivalmuban_leichong::default_instance_;
  delete festivalmuban_leichong_reflection_;
  delete Sheet_festivalmuban_leichong::default_instance_;
  delete Sheet_festivalmuban_leichong_reflection_;
  delete festivalmuban_duihuan::default_instance_;
  delete festivalmuban_duihuan_reflection_;
  delete Sheet_festivalmuban_duihuan::default_instance_;
  delete Sheet_festivalmuban_duihuan_reflection_;
  delete festivald_diaoluo::default_instance_;
  delete festivald_diaoluo_reflection_;
  delete Sheet_festivald_diaoluo::default_instance_;
  delete Sheet_festivald_diaoluo_reflection_;
  delete festivalmuban_leixiao::default_instance_;
  delete festivalmuban_leixiao_reflection_;
  delete Sheet_festivalmuban_leixiao::default_instance_;
  delete Sheet_festivalmuban_leixiao_reflection_;
  delete festivalmuban_shouchong::default_instance_;
  delete festivalmuban_shouchong_reflection_;
  delete Sheet_festivalmuban_shouchong::default_instance_;
  delete Sheet_festivalmuban_shouchong_reflection_;
  delete festivalmuban_yanhua::default_instance_;
  delete festivalmuban_yanhua_reflection_;
  delete Sheet_festivalmuban_yanhua::default_instance_;
  delete Sheet_festivalmuban_yanhua_reflection_;
  delete festivalyanhuaConstant::default_instance_;
  delete festivalyanhuaConstant_reflection_;
  delete Sheet_festivalyanhuaConstant::default_instance_;
  delete Sheet_festivalyanhuaConstant_reflection_;
  delete festivalmuban_shop::default_instance_;
  delete festivalmuban_shop_reflection_;
  delete Sheet_festivalmuban_shop::default_instance_;
  delete Sheet_festivalmuban_shop_reflection_;
  delete festivalmuban_czjb::default_instance_;
  delete festivalmuban_czjb_reflection_;
  delete Sheet_festivalmuban_czjb::default_instance_;
  delete Sheet_festivalmuban_czjb_reflection_;
  delete festivalmuban_scsb::default_instance_;
  delete festivalmuban_scsb_reflection_;
  delete Sheet_festivalmuban_scsb::default_instance_;
  delete Sheet_festivalmuban_scsb_reflection_;
  delete festivalmuban_eggs::default_instance_;
  delete festivalmuban_eggs_reflection_;
  delete Sheet_festivalmuban_eggs::default_instance_;
  delete Sheet_festivalmuban_eggs_reflection_;
  delete festivaleggConstant::default_instance_;
  delete festivaleggConstant_reflection_;
  delete Sheet_festivaleggConstant::default_instance_;
  delete Sheet_festivaleggConstant_reflection_;
  delete festivalconstant::default_instance_;
  delete festivalconstant_reflection_;
  delete Sheet_festivalconstant::default_instance_;
  delete Sheet_festivalconstant_reflection_;
  delete festivalmuban_shousha::default_instance_;
  delete festivalmuban_shousha_reflection_;
  delete Sheet_festivalmuban_shousha::default_instance_;
  delete Sheet_festivalmuban_shousha_reflection_;
  delete festivalmuban_huoyue::default_instance_;
  delete festivalmuban_huoyue_reflection_;
  delete Sheet_festivalmuban_huoyue::default_instance_;
  delete Sheet_festivalmuban_huoyue_reflection_;
}

void protobuf_AddDesc_festival_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016festival.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"\372\001\n\027festivalmuban_JFduihuan\022$\n"
    "\ntiaoJianId\030\001 \001(\005B\020\302\377\024\014\350\276\276\346\210\220\346\235\241\344\273\266\022!\n\007p"
    "rizeId\030\002 \001(\003B\020\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\022\030\n\004prof\030\003"
    " \001(\005B\n\302\377\024\006\350\201\214\344\270\232\022\"\n\010prizeNum\030\004 \001(\005B\020\302\377\024\014"
    "\345\245\226\345\212\261\346\225\260\351\207\217\022\032\n\006propId\030\005 \001(\003B\n\302\377\024\006\351\201\223\345\205\267"
    "\022\033\n\007propNum\030\006 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\037\n\005times\030\007"
    " \001(\005B\020\302\377\024\014\351\231\220\350\264\255\346\254\241\346\225\260\"n\n\035Sheet_festival"
    "muban_JFduihuan\022M\n\034festivalmuban_JFduihu"
    "an_List\030\001 \003(\0132!.proto_ff.festivalmuban_J"
    "FduihuanB\004\210\301\024x\"\237\002\n\025festivalmuban_dingzhi"
    "\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\033\n\003des\030\002 \001(\tB\016\302\377\024\006\346"
    "\217\217\350\277\260\220\301\024 \022)\n\tmustBoxId\030\003 \001(\003B\026\302\377\024\022\345\277\205\351\200\211"
    "\347\244\274\345\214\205\345\206\205\345\256\271\022&\n\014currencyType\030\004 \001(\005B\020\302\377\024\014"
    "\350\264\247\345\270\201\347\261\273\345\236\213\022\031\n\005price\030\005 \001(\005B\n\302\377\024\006\344\273\267\346\240\274\022"
    "\031\n\005times\030\006 \001(\005B\n\302\377\024\006\346\254\241\346\225\260\022)\n\tfreeBoxId\030"
    "\007 \003(\003B\026\302\377\024\022\350\207\252\351\200\211\347\244\274\345\214\205\345\206\205\345\256\271\022!\n\007freeNum"
    "\030\010 \003(\005B\020\302\377\024\014\350\207\252\351\200\211\346\225\260\351\207\217\"h\n\033Sheet_festiv"
    "almuban_dingzhi\022I\n\032festivalmuban_dingzhi"
    "_List\030\001 \003(\0132\037.proto_ff.festivalmuban_din"
    "gzhiB\004\210\301\024n\"\305\001\n\027festivalmuban_CZfanzuan\022\022"
    "\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\'\n\nrechargeId\030\002 \001(\005B\023"
    "\302\377\024\017\345\204\262\345\200\274\350\256\241\350\264\271\347\202\271\022#\n\trepayType\030\003 \001(\005B\020"
    "\302\377\024\014\350\265\240\351\200\201\347\261\273\345\236\213\022\"\n\010repayNum\030\004 \001(\005B\020\302\377\024\014"
    "\350\277\224\351\222\273\346\225\260\351\207\217\022$\n\ntimesLimit\030\005 \001(\005B\020\302\377\024\014\351\231"
    "\220\345\210\266\346\254\241\346\225\260\"n\n\035Sheet_festivalmuban_CZfanz"
    "uan\022M\n\034festivalmuban_CZfanzuan_List\030\001 \003("
    "\0132!.proto_ff.festivalmuban_CZfanzuanB\004\210\301"
    "\024o\"\261\001\n\026festivalmuban_lianxuCZ\022\030\n\002id\030\001 \001("
    "\005B\014\302\377\024\010\346\241\243\344\275\215id\022\035\n\003Num\030\002 \001(\005B\020\302\377\024\014\346\235\241\344\273\266"
    "\345\217\202\346\225\260\022\036\n\010remarkId\030\003 \001(\005B\014\302\377\024\010\346\217\217\350\277\260ID\022\037"
    "\n\007miaoshu\030\004 \001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024 \022\035\n\007jiang"
    "Li\030\005 \001(\003B\014\302\377\024\010\345\245\226\345\212\261id\"k\n\034Sheet_festival"
    "muban_lianxuCZ\022K\n\033festivalmuban_lianxuCZ"
    "_List\030\001 \003(\0132 .proto_ff.festivalmuban_lia"
    "nxuCZB\004\210\301\024o\"\321\001\n\031festivalmuban_prerecharg"
    "e\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\031\n\005order\030\002 \001(\005B\n\302\377"
    "\024\006\346\216\222\345\272\217\022\033\n\003des\030\003 \001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024 \022\036\n"
    "\005boxid\030\004 \001(\003B\017\302\377\024\013\345\245\226\345\212\261boxid\022\'\n\nrecharg"
    "eId\030\005 \001(\005B\023\302\377\024\017\345\205\205\345\200\274\350\256\241\350\264\271\347\202\271\022\037\n\005times\030"
    "\006 \001(\005B\020\302\377\024\014\351\231\220\350\264\255\346\254\241\346\225\260\"t\n\037Sheet_festiva"
    "lmuban_prerecharge\022Q\n\036festivalmuban_prer"
    "echarge_List\030\001 \003(\0132#.proto_ff.festivalmu"
    "ban_prerechargeB\004\210\301\024|\"\210\001\n\030festivalmuban_"
    "doubleGift\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\030\n\004gear\030\002"
    " \001(\005B\n\302\377\024\006\346\241\243\344\275\215\022\033\n\005boxId\030\003 \001(\003B\014\302\377\024\010\345\245\226"
    "\345\212\261id\022!\n\007freeBox\030\004 \001(\003B\020\302\377\024\014\345\205\215\350\264\271\345\245\226\345\212\261"
    "\"q\n\036Sheet_festivalmuban_doubleGift\022O\n\035fe"
    "stivalmuban_doubleGift_List\030\001 \003(\0132\".prot"
    "o_ff.festivalmuban_doubleGiftB\004\210\301\024k\"[\n\031f"
    "estivalbigyanhuarecharge\022\035\n\003num\030\001 \001(\005B\020\302"
    "\377\024\014\347\274\272\345\260\221\346\225\260\351\207\217\022\037\n\010recharge\030\002 \001(\005B\r\302\377\024\t\350"
    "\256\241\350\264\271\347\202\271\"t\n\037Sheet_festivalbigyanhuarecha"
    "rge\022Q\n\036festivalbigyanhuarecharge_List\030\001 "
    "\003(\0132#.proto_ff.festivalbigyanhuarecharge"
    "B\004\210\301\024x\"\207\001\n\025festivalbigyanhuacost\022\031\n\005time"
    "s\030\001 \001(\005B\n\302\377\024\006\346\254\241\346\225\260\022*\n\nsingleCost\030\002 \001(\005B"
    "\026\302\377\024\022\351\234\200\350\246\201\351\201\223\345\205\267\346\225\260\351\207\217\022\'\n\007allCost\030\003 \001(\005"
    "B\026\302\377\024\022\345\205\250\351\203\250\345\257\271\345\272\224\346\225\260\351\207\217\"h\n\033Sheet_festiv"
    "albigyanhuacost\022I\n\032festivalbigyanhuacost"
    "_List\030\001 \003(\0132\037.proto_ff.festivalbigyanhua"
    "costB\004\210\301\024r\"\361\002\n\027festivalmuban_bigyanhua\022\022"
    "\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006itemid\030\002 \001(\003B\n\302\377\024\006"
    "\347\211\251\345\223\201\022\027\n\003num\030\003 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\030\n\004prof\030"
    "\004 \001(\005B\n\302\377\024\006\350\201\214\344\270\232\022\036\n\004type\030\005 \001(\005B\020\302\377\024\014\345\245\226"
    "\346\261\240\347\261\273\345\236\213\022\037\n\005order\030\006 \001(\005B\020\302\377\024\014\346\230\276\347\244\272\346\216\222\345"
    "\272\217\022%\n\013probability\030\007 \001(\005B\020\302\377\024\014\346\216\211\350\220\275\346\235\203\351\207"
    "\215\022\"\n\010relation\030\010 \001(\003B\020\302\377\024\014\345\205\263\350\201\224\351\241\265\347\255\276\022\035\n"
    "\007modelid\030\t \001(\003B\014\302\377\024\010\346\250\241\345\236\213id\022#\n\tmodeltyp"
    "e\030\n \001(\005B\020\302\377\024\014\346\250\241\345\236\213\347\261\273\345\236\213\022#\n\005scale\030\013 \001(\t"
    "B\024\302\377\024\014\345\201\217\347\247\273\347\274\251\346\224\276\220\301\024 \"n\n\035Sheet_festival"
    "muban_bigyanhua\022M\n\034festivalmuban_bigyanh"
    "ua_List\030\001 \003(\0132!.proto_ff.festivalmuban_b"
    "igyanhuaB\004\210\301\024r\"\356\004\n\020festivalfestival\022\030\n\002i"
    "d\030\001 \001(\003B\014\302\377\024\010\350\212\202\346\227\245ID\022%\n\013huoDongType\030\002 \001"
    "(\005B\020\302\377\024\014\346\264\273\345\212\250\347\261\273\345\236\213\022\"\n\006nameId\030\003 \001(\005B\022\302\377"
    "\024\016\346\264\273\345\212\250\345\220\215\347\247\260id\022\"\n\004name\030\004 \001(\tB\024\302\377\024\014\346\264\273\345"
    "\212\250\345\220\215\347\247\260\220\301\024%\022\'\n\nservertype\030\005 \001(\005B\023\302\377\024\017\346\234"
    "\215\345\212\241\345\231\250\347\261\273\345\236\213\022#\n\005timeA\030\006 \001(\tB\024\302\377\024\014\345\274\200\345\247\213"
    "\346\227\266\351\227\264\220\301\024 \022#\n\005timeB\030\007 \001(\tB\024\302\377\024\014\347\273\223\346\235\237\346\227\266"
    "\351\227\264\220\301\024 \022\"\n\010timeType\030\010 \001(\005B\020\302\377\024\014\346\227\266\351\227\264\347\261\273"
    "\345\236\213\022\037\n\005Level\030\t \001(\005B\020\302\377\024\014\347\255\211\347\272\247\350\246\201\346\261\202\022%\n\010"
    "vipLevel\030\n \001(\005B\023\302\377\024\017vip\347\255\211\347\272\247\350\246\201\346\261\202\022:\n\010r"
    "echange\030\013 \001(\005B(\302\377\024$\345\205\205\345\200\274\350\246\201\346\261\202\351\253\230\347\272\247\350\277\220"
    "\350\220\245\346\264\273\345\212\250\350\256\241\346\225\260\022 \n\006ifOpen\030\014 \001(\005B\020\302\377\024\014\346\264\273"
    "\345\212\250\345\274\200\345\205\263\022#\n\004list\030\r \001(\tB\025\302\377\024\014\346\250\241\346\235\277\345\210\227\350\241"
    "\250\220\301\024\343\005\022\034\n\004icon\030\016 \001(\tB\016\302\377\024\006\345\233\276\346\240\207\220\301\024 \0223\n\020"
    "loginPopPriority\030\017 \001(\005B\031\302\377\024\025\347\231\273\351\231\206\345\274\271\345\207\272"
    "\344\274\230\345\205\210\347\272\247\022\034\n\006belong\030\020 \001(\005B\014\302\377\024\010\351\231\204\345\261\236ID\""
    "Z\n\026Sheet_festivalfestival\022@\n\025festivalfes"
    "tival_List\030\001 \003(\0132\032.proto_ff.festivalfest"
    "ivalB\005\210\301\024\274\001\"\271\005\n\020festivaltemplate\022\030\n\002id\030\001"
    " \001(\005B\014\302\377\024\010\346\250\241\346\235\277ID\022\037\n\005muBan\030\002 \001(\005B\020\302\377\024\014\346"
    "\250\241\346\235\277\347\261\273\345\236\213\022\031\n\005order\030\003 \001(\005B\n\302\377\024\006\346\216\222\345\272\217\022#"
    "\n\004list\030\004 \001(\tB\025\302\377\024\014\350\276\276\346\210\220\346\235\241\344\273\266\220\301\024\321\004\022\"\n\006n"
    "ameId\030\005 \001(\005B\022\302\377\024\016\346\250\241\346\235\277\345\220\215\347\247\260id\022\"\n\004Name\030"
    "\006 \001(\tB\024\302\377\024\014\346\250\241\346\235\277\345\220\215\347\247\260\220\301\024 \022\"\n\004type\030\007 \001("
    "\tB\024\302\377\024\014\346\250\241\346\235\277\347\261\273\345\236\213\220\301\024 \022#\n\005timeA\030\010 \001(\tB\024"
    "\302\377\024\014\345\274\200\345\247\213\346\227\266\351\227\264\220\301\024 \022#\n\005timeB\030\t \001(\tB\024\302\377\024"
    "\014\347\273\223\346\235\237\346\227\266\351\227\264\220\301\024 \022\"\n\010timeType\030\n \001(\005B\020\302\377\024"
    "\014\346\227\266\351\227\264\347\261\273\345\236\213\022\037\n\005level\030\013 \001(\005B\020\302\377\024\014\347\255\211\347\272\247"
    "\350\246\201\346\261\202\022%\n\010vipLevel\030\014 \001(\005B\023\302\377\024\017vip\347\255\211\347\272\247\350"
    "\246\201\346\261\202\022:\n\010rechange\030\r \001(\005B(\302\377\024$\345\205\205\345\200\274\350\246\201\346\261"
    "\202\351\253\230\347\272\247\350\277\220\350\220\245\346\264\273\345\212\250\350\256\241\346\225\260\022\036\n\010remarkId\030\016 "
    "\001(\005B\014\302\377\024\010\346\217\217\350\277\260ID\022%\n\007MiaoShu\030\017 \001(\tB\024\302\377\024\014"
    "\346\250\241\346\235\277\346\217\217\350\277\260\220\301\024x\022!\n\007jiangLi\030\020 \001(\003B\020\302\377\024\014\346"
    "\264\273\345\212\250\346\235\241\344\273\266\022\037\n\007beiJing\030\021 \001(\tB\016\302\377\024\006\350\203\214\346\231\257"
    "\220\301\024 \022\035\n\005title\030\022 \001(\tB\016\302\377\024\006\346\240\207\351\242\230\220\301\024 \022\"\n\004d"
    "esc\030\023 \001(\tB\024\302\377\024\014\346\240\207\351\242\230\346\226\207\346\241\243\220\301\024)\"Z\n\026Sheet"
    "_festivaltemplate\022@\n\025festivaltemplate_Li"
    "st\030\001 \003(\0132\032.proto_ff.festivaltemplateB\005\210\301"
    "\024\373\017\"\360\001\n\027festivalmuban_worldboss\022\022\n\002id\030\001 "
    "\001(\005B\006\302\377\024\002id\022\034\n\006bossid\030\002 \001(\005B\014\302\377\024\010\351\246\226\351\242\206I"
    "D\022\030\n\004sort\030\003 \001(\005B\n\302\377\024\006\346\216\222\345\272\217\022\'\n\rcondition"
    "Type\030\004 \001(\005B\020\302\377\024\014\346\235\241\344\273\266\347\261\273\345\236\213\022 \n\tconditio"
    "n\030\005 \001(\005B\r\302\377\024\t\346\235\241\344\273\266\345\200\274\022!\n\003des\030\006 \001(\tB\024\302\377\024"
    "\014\344\273\273\345\212\241\346\217\217\350\277\260\220\301\0245\022\033\n\005boxId\030\007 \001(\003B\014\302\377\024\010\345\245"
    "\226\345\212\261id\"n\n\035Sheet_festivalmuban_worldboss\022"
    "M\n\034festivalmuban_worldboss_List\030\001 \003(\0132!."
    "proto_ff.festivalmuban_worldbossB\004\210\301\024w\"\237"
    "\002\n\023festivalmuban_libao\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002"
    "id\022\037\n\005boxid\030\002 \001(\003B\020\302\377\024\014\347\244\274\345\214\205\345\206\205\345\256\271\022\037\n\004t"
    "erm\030\003 \001(\005B\021\302\377\024\r\350\264\255\344\271\260\346\227\266\351\227\264h\022\037\n\005level\030\004 "
    "\001(\005B\020\302\377\024\014\350\264\255\344\271\260\347\255\211\347\272\247\022&\n\014currencyType\030\005 "
    "\001(\005B\020\302\377\024\014\350\264\247\345\270\201\347\261\273\345\236\213\022\031\n\005price\030\006 \001(\005B\n\302\377"
    "\024\006\344\273\267\346\240\274\022(\n\010backType\030\007 \001(\005B\026\302\377\024\022\350\277\224\350\277\230\350\264"
    "\247\345\270\201\347\261\273\345\236\213\022$\n\007dayBack\030\010 \001(\005B\023\302\377\024\017\346\257\217\346\227\245\350"
    "\277\224\350\277\230\351\207\217\"c\n\031Sheet_festivalmuban_libao\022F\n"
    "\030festivalmuban_libao_List\030\001 \003(\0132\035.proto_"
    "ff.festivalmuban_libaoB\005\210\301\024\213\002\"a\n\024festiva"
    "lmuban_double\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\030\n\004gea"
    "r\030\002 \001(\005B\n\302\377\024\006\346\241\243\344\275\215\022\033\n\005boxId\030\003 \001(\003B\014\302\377\024\010"
    "\345\245\226\345\212\261id\"e\n\032Sheet_festivalmuban_double\022G"
    "\n\031festivalmuban_double_List\030\001 \003(\0132\036.prot"
    "o_ff.festivalmuban_doubleB\004\210\301\024o\"P\n\017festi"
    "valmiaoshu\022\030\n\002id\030\001 \001(\005B\014\302\377\024\010\346\217\217\350\277\260ID\022#\n\005"
    "wenzi\030\002 \001(\tB\024\302\377\024\014\346\226\207\345\255\227\346\217\217\350\277\260\220\301\0246\"V\n\025She"
    "et_festivalmiaoshu\022=\n\024festivalmiaoshu_Li"
    "st\030\001 \003(\0132\031.proto_ff.festivalmiaoshuB\004\210\301\024"
    "l\"\263\001\n\024festivalmuban_denglu\022\034\n\002id\030\001 \001(\005B\020"
    "\302\377\024\014\350\276\276\346\210\220\346\235\241\344\273\266\022\035\n\003Num\030\002 \001(\005B\020\302\377\024\014\346\235\241\344\273"
    "\266\345\217\202\346\225\260\022\036\n\010remarkId\030\003 \001(\005B\014\302\377\024\010\346\217\217\350\277\260ID\022"
    "\037\n\007miaoshu\030\004 \001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024 \022\035\n\007jian"
    "gLi\030\005 \001(\003B\014\302\377\024\010\345\245\226\345\212\261ID\"f\n\032Sheet_festiva"
    "lmuban_denglu\022H\n\031festivalmuban_denglu_Li"
    "st\030\001 \003(\0132\036.proto_ff.festivalmuban_denglu"
    "B\005\210\301\024\351\001\"\216\002\n\023festivalmuban_touzi\022\030\n\002id\030\001 "
    "\001(\005B\014\302\377\024\010\346\212\225\350\265\204id\022\036\n\004type\030\002 \001(\005B\020\302\377\024\014\346\212\225"
    "\350\265\204\347\261\273\345\236\213\022\035\n\003Num\030\003 \001(\005B\020\302\377\024\014\351\242\206\345\217\226\346\235\241\344\273\266"
    "\022 \n\006addNum\030\004 \001(\003B\020\302\377\024\014\351\242\235\345\244\226\345\217\202\346\225\260\022\036\n\010re"
    "markId\030\005 \001(\005B\014\302\377\024\010\346\217\217\350\277\260ID\022\037\n\007miaoshu\030\006 "
    "\001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024!\022\035\n\007jiangLi\030\007 \001(\003B\014\302\377"
    "\024\010\345\245\226\345\212\261id\022\034\n\006linkId\030\010 \001(\003B\014\302\377\024\010\350\267\263\350\275\254id"
    "\"c\n\031Sheet_festivalmuban_touzi\022F\n\030festiva"
    "lmuban_touzi_List\030\001 \003(\0132\035.proto_ff.festi"
    "valmuban_touziB\005\210\301\024\225\003\"\342\001\n\026festivalmuban_"
    "zhichong\022\030\n\002id\030\001 \001(\005B\014\302\377\024\010\346\241\243\344\275\215id\022\035\n\003Nu"
    "m\030\002 \001(\005B\020\302\377\024\014\346\235\241\344\273\266\345\217\202\346\225\260\022/\n\010severNum\030\003 "
    "\001(\tB\035\302\377\024\025\346\234\215\345\212\241\345\231\250\346\235\241\344\273\266\345\217\202\346\225\260\220\301\024 \022\036\n\010re"
    "markId\030\004 \001(\005B\014\302\377\024\010\346\217\217\350\277\260ID\022\037\n\007miaoshu\030\005 "
    "\001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024 \022\035\n\007jiangLi\030\006 \001(\003B\014\302\377"
    "\024\010\345\245\226\345\212\261id\"l\n\034Sheet_festivalmuban_zhicho"
    "ng\022L\n\033festivalmuban_zhichong_List\030\001 \003(\0132"
    " .proto_ff.festivalmuban_zhichongB\005\210\301\024\314\001"
    "\"\321\001\n\026festivalmuban_leichong\022\030\n\002id\030\001 \001(\005B"
    "\014\302\377\024\010\346\241\243\344\275\215id\022\036\n\004type\030\002 \001(\005B\020\302\377\024\014\346\235\241\344\273\266\347"
    "\261\273\345\236\213\022\035\n\003Num\030\003 \001(\005B\020\302\377\024\014\346\235\241\344\273\266\345\217\202\346\225\260\022\036\n\010"
    "remarkId\030\004 \001(\005B\014\302\377\024\010\346\217\217\350\277\260ID\022\037\n\007miaoshu\030"
    "\005 \001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024 \022\035\n\007jiangLi\030\006 \001(\003B\014"
    "\302\377\024\010\345\245\226\345\212\261id\"l\n\034Sheet_festivalmuban_leic"
    "hong\022L\n\033festivalmuban_leichong_List\030\001 \003("
    "\0132 .proto_ff.festivalmuban_leichongB\005\210\301\024"
    "\266\006\"\370\001\n\025festivalmuban_duihuan\022$\n\ntiaoJian"
    "Id\030\001 \001(\005B\020\302\377\024\014\350\276\276\346\210\220\346\235\241\344\273\266\022!\n\007prizeId\030\002 "
    "\001(\003B\020\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\022\030\n\004prof\030\003 \001(\005B\n\302\377\024"
    "\006\350\201\214\344\270\232\022\"\n\010prizeNum\030\004 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\346\225\260"
    "\351\207\217\022\032\n\006propId\030\005 \001(\003B\n\302\377\024\006\351\201\223\345\205\267\022\033\n\007propN"
    "um\030\006 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\037\n\005times\030\007 \001(\005B\020\302\377\024"
    "\014\351\231\220\350\264\255\346\254\241\346\225\260\"i\n\033Sheet_festivalmuban_dui"
    "huan\022J\n\032festivalmuban_duihuan_List\030\001 \003(\013"
    "2\037.proto_ff.festivalmuban_duihuanB\005\210\301\024\273\004"
    "\"\300\001\n\021festivald_diaoluo\022\026\n\002id\030\001 \001(\005B\n\302\377\024\006"
    "\345\272\217\345\217\267\022\"\n\010mixLevel\030\002 \001(\005B\020\302\377\024\014\347\255\211\347\272\247\344\270\213\351"
    "\231\220\022 \n\010bossType\030\003 \001(\005B\016\302\377\024\nboss\347\261\273\345\236\213\022%\n\007"
    "dropNum\030\004 \001(\tB\024\302\377\024\014\346\216\211\350\220\275\346\225\260\351\207\217\220\301\024 \022&\n\010d"
    "ropRand\030\005 \001(\tB\024\302\377\024\014\346\216\211\350\220\275\346\235\203\351\207\215\220\301\024 \"\\\n\027S"
    "heet_festivald_diaoluo\022A\n\026festivald_diao"
    "luo_List\030\001 \003(\0132\033.proto_ff.festivald_diao"
    "luoB\004\210\301\024l\"\324\001\n\025festivalmuban_leixiao\022\030\n\002i"
    "d\030\001 \001(\005B\014\302\377\024\010\346\241\243\344\275\215id\022\036\n\004type\030\002 \001(\005B\020\302\377\024"
    "\014\346\266\210\350\264\271\347\261\273\345\236\213\022!\n\007xiaoFei\030\003 \001(\005B\020\302\377\024\014\346\266\210\350"
    "\200\227\351\222\273\347\237\263\022\036\n\010remarkId\030\004 \001(\005B\014\302\377\024\010\346\217\217\350\277\260ID"
    "\022\037\n\007miaoshu\030\005 \001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024\"\022\035\n\007jia"
    "ngLi\030\006 \001(\003B\014\302\377\024\010\345\245\226\345\212\261id\"i\n\033Sheet_festiv"
    "almuban_leixiao\022J\n\032festivalmuban_leixiao"
    "_List\030\001 \003(\0132\037.proto_ff.festivalmuban_lei"
    "xiaoB\005\210\301\024\221\001\"R\n\027festivalmuban_shouchong\022\030"
    "\n\002id\030\001 \001(\005B\014\302\377\024\010\351\246\226\345\205\205id\022\035\n\007jiangLi\030\002 \001("
    "\003B\014\302\377\024\010\345\245\226\345\212\261id\"n\n\035Sheet_festivalmuban_s"
    "houchong\022M\n\034festivalmuban_shouchong_List"
    "\030\001 \003(\0132!.proto_ff.festivalmuban_shouchon"
    "gB\004\210\301\024i\"\356\002\n\024festivalmuban_yanhua\022\022\n\002id\030\001"
    " \001(\005B\006\302\377\024\002id\022\032\n\006itemid\030\002 \001(\003B\n\302\377\024\006\347\211\251\345\223\201"
    "\022\027\n\003num\030\003 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\030\n\004prof\030\004 \001(\005B"
    "\n\302\377\024\006\350\201\214\344\270\232\022\036\n\004type\030\005 \001(\005B\020\302\377\024\014\345\245\226\346\261\240\347\261\273"
    "\345\236\213\022\037\n\005order\030\006 \001(\005B\020\302\377\024\014\346\230\276\347\244\272\346\216\222\345\272\217\022%\n\013"
    "probability\030\007 \001(\005B\020\302\377\024\014\346\216\211\350\220\275\346\235\203\351\207\215\022\"\n\010r"
    "elation\030\010 \001(\003B\020\302\377\024\014\345\205\263\350\201\224\351\241\265\347\255\276\022\035\n\007model"
    "id\030\t \001(\003B\014\302\377\024\010\346\250\241\345\236\213id\022#\n\tmodeltype\030\n \001("
    "\005B\020\302\377\024\014\346\250\241\345\236\213\347\261\273\345\236\213\022#\n\005scale\030\013 \001(\tB\024\302\377\024\014"
    "\345\201\217\347\247\273\347\274\251\346\224\276\220\301\024 \"f\n\032Sheet_festivalmuban_"
    "yanhua\022H\n\031festivalmuban_yanhua_List\030\001 \003("
    "\0132\036.proto_ff.festivalmuban_yanhuaB\005\210\301\024\220\021"
    "\"\316\001\n\026festivalyanhuaConstant\022\030\n\002id\030\001 \001(\003B"
    "\014\302\377\024\010\346\235\241\344\273\266id\022*\n\010costItem\030\002 \001(\003B\030\302\377\024\024\346\212\275"
    "\345\245\226\346\266\210\350\200\227\347\232\204\347\211\251id\022#\n\nrewardPool\030\003 \001(\005B\017\302"
    "\377\024\013\345\245\226\345\212\261\346\261\240ID\022\'\n\007coinTye\030\004 \001(\005B\026\302\377\024\022\346\266\210"
    "\350\200\227\350\264\247\345\270\201\347\261\273\345\236\213\022 \n\006number\030\005 \001(\005B\020\302\377\024\014\350\264\247"
    "\345\270\201\346\225\260\351\207\217\"k\n\034Sheet_festivalyanhuaConstan"
    "t\022K\n\033festivalyanhuaConstant_List\030\001 \003(\0132 "
    ".proto_ff.festivalyanhuaConstantB\004\210\301\024x\"\215"
    "\002\n\022festivalmuban_shop\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\346"
    "\235\241\344\273\266id\022\034\n\006itemid\030\002 \001(\003B\014\302\377\024\010\345\225\206\345\223\201id\022\030\n"
    "\004prof\030\003 \001(\005B\n\302\377\024\006\350\201\214\344\270\232\022\032\n\006priceA\030\004 \001(\005B"
    "\n\302\377\024\006\345\216\237\344\273\267\022\032\n\006priceB\030\005 \001(\005B\n\302\377\024\006\347\216\260\344\273\267\022"
    "\"\n\010currency\030\006 \001(\005B\020\302\377\024\014\350\264\247\345\270\201\345\215\225\344\275\215\022\"\n\010d"
    "iscount\030\007 \001(\005B\020\302\377\024\014\346\212\230\346\211\243\346\230\276\347\244\272\022%\n\010quant"
    "ity\030\010 \001(\005B\023\302\377\024\017\344\270\252\344\272\272\351\231\220\350\264\255\346\225\260\"`\n\030Sheet_"
    "festivalmuban_shop\022D\n\027festivalmuban_shop"
    "_List\030\001 \003(\0132\034.proto_ff.festivalmuban_sho"
    "pB\005\210\301\024\265\001\"\345\001\n\022festivalmuban_czjb\022\030\n\002id\030\001 "
    "\001(\005B\014\302\377\024\010\346\235\241\344\273\266id\022(\n\rRechargePoint\030\002 \001(\t"
    "B\021\302\377\024\t\350\256\241\350\264\271\347\202\271\220\301\024 \022!\n\004Perc\030\003 \001(\005B\023\302\377\024\017\345"
    "\242\236\345\212\240\347\231\276\345\210\206\346\257\224\022&\n\014fristpresent\030\004 \001(\005B\020\302\377"
    "\024\014\350\265\240\351\200\201\346\225\260\351\207\217\022%\n\013presenttype\030\005 \001(\005B\020\302\377\024"
    "\014\350\265\240\351\200\201\347\261\273\345\236\213\022\031\n\005Point\030\006 \001(\005B\n\302\377\024\006\346\241\243\344\275\215"
    "\"_\n\030Sheet_festivalmuban_czjb\022C\n\027festival"
    "muban_czjb_List\030\001 \003(\0132\034.proto_ff.festiva"
    "lmuban_czjbB\004\210\301\024o\"\302\001\n\022festivalmuban_scsb"
    "\022\030\n\002id\030\001 \001(\005B\014\302\377\024\010\346\235\241\344\273\266id\022(\n\rRechargePo"
    "int\030\002 \001(\tB\021\302\377\024\t\350\256\241\350\264\271\347\202\271\220\301\024 \022&\n\014fristpre"
    "sent\030\003 \001(\005B\020\302\377\024\014\350\265\240\351\200\201\346\225\260\351\207\217\022%\n\013presentt"
    "ype\030\004 \001(\005B\020\302\377\024\014\350\265\240\351\200\201\347\261\273\345\236\213\022\031\n\005Point\030\005 \001"
    "(\005B\n\302\377\024\006\346\241\243\344\275\215\"_\n\030Sheet_festivalmuban_sc"
    "sb\022C\n\027festivalmuban_scsb_List\030\001 \003(\0132\034.pr"
    "oto_ff.festivalmuban_scsbB\004\210\301\024o\"\245\002\n\022fest"
    "ivalmuban_eggs\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006it"
    "emid\030\002 \001(\003B\n\302\377\024\006\347\211\251\345\223\201\022\027\n\003num\030\003 \001(\005B\n\302\377\024"
    "\006\346\225\260\351\207\217\022\030\n\004prof\030\004 \001(\005B\n\302\377\024\006\350\201\214\344\270\232\022\036\n\004typ"
    "e\030\005 \001(\005B\020\302\377\024\014\350\233\213\347\232\204\347\261\273\345\236\213\022\037\n\005order\030\006 \001(\005"
    "B\020\302\377\024\014\346\230\276\347\244\272\346\216\222\345\272\217\022 \n\006isnote\030\007 \001(\005B\020\302\377\024\014"
    "\346\230\257\345\220\246\350\256\260\345\275\225\022%\n\013probability\030\010 \001(\005B\020\302\377\024\014\346"
    "\216\211\350\220\275\346\235\203\351\207\215\022\"\n\010relation\030\t \001(\003B\020\302\377\024\014\345\205\263\350\201"
    "\224\351\241\265\347\255\276\"`\n\030Sheet_festivalmuban_eggs\022D\n\027f"
    "estivalmuban_eggs_List\030\001 \003(\0132\034.proto_ff."
    "festivalmuban_eggsB\005\210\301\024\316\001\"\337\003\n\023festivaleg"
    "gConstant\022\030\n\002id\030\001 \001(\003B\014\302\377\024\010\346\235\241\344\273\266id\022;\n\010e"
    "xReward\030\002 \001(\tB)\302\377\024!\351\242\235\345\244\226\345\245\226\345\212\261\346\254\241\346\225\260\344\270\216"
    "\345\245\226\345\212\261\346\225\260\351\207\217\220\301\024J\022*\n\010costItem\030\003 \001(\003B\030\302\377\024\024"
    "\347\240\270\350\233\213\346\266\210\350\200\227\347\232\204\347\211\251id\022:\n\010freeTime\030\004 \001(\005B("
    "\302\377\024$\347\240\270\350\233\213\345\205\215\350\264\271\346\212\275\345\245\226\347\232\204\346\227\266\351\227\264\357\274\210\346\227\266\357\274\211"
    "\022.\n\npoolChange\030\005 \001(\tB\032\302\377\024\022\350\233\213\346\261\240\350\275\254\346\215\242\351\230"
    "\210\345\200\274\220\301\024 \0221\n\013specialRate\030\006 \001(\005B\034\302\377\024\030\347\211\271\346\256"
    "\212\350\233\213\347\232\204\345\210\235\345\247\213\346\246\202\347\216\207\0224\n\016specialAddRate\030\007 "
    "\001(\005B\034\302\377\024\030\347\211\271\346\256\212\350\233\213\347\232\204\350\241\245\345\201\277\346\246\202\347\216\207\022\'\n\tfla"
    "shCost\030\010 \001(\tB\024\302\377\024\014\345\210\267\346\226\260\346\266\210\350\200\227\220\301\024 \022\"\n\005li"
    "mit\030\t \001(\005B\023\302\377\024\017\346\257\217\346\227\245\351\231\220\346\254\241\346\225\260\022#\n\nreward"
    "Pool\030\n \001(\005B\017\302\377\024\013\345\245\226\345\212\261\346\261\240ID\"b\n\031Sheet_fes"
    "tivaleggConstant\022E\n\030festivaleggConstant_"
    "List\030\001 \003(\0132\035.proto_ff.festivaleggConstan"
    "tB\004\210\301\024j\"\203\001\n\020festivalconstant\022 \n\nconstant"
    "id\030\001 \001(\003B\014\302\377\024\010\351\205\215\347\275\256id\022 \n\014constantdata\030\002"
    " \001(\003B\n\302\377\024\006\346\225\260\346\215\256\022+\n\nstringdata\030\003 \001(\tB\027\302\377"
    "\024\017\345\255\227\347\254\246\344\270\262\346\225\260\346\215\256\220\301\024F\"Y\n\026Sheet_festivalc"
    "onstant\022\?\n\025festivalconstant_List\030\001 \003(\0132\032"
    ".proto_ff.festivalconstantB\004\210\301\024n\"\210\001\n\025fes"
    "tivalmuban_shousha\022\030\n\002id\030\001 \001(\005B\014\302\377\024\010\346\241\243\344"
    "\275\215id\022\034\n\006bossId\030\002 \001(\003B\014\302\377\024\010\351\246\226\351\242\206ID\022\033\n\005bo"
    "xId\030\003 \001(\003B\014\302\377\024\010\345\245\226\345\212\261id\022\032\n\006linkid\030\004 \001(\003B"
    "\n\302\377\024\006linkid\"h\n\033Sheet_festivalmuban_shous"
    "ha\022I\n\032festivalmuban_shousha_List\030\001 \003(\0132\037"
    ".proto_ff.festivalmuban_shoushaB\004\210\301\024t\"\214\001"
    "\n\024festivalmuban_huoyue\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002"
    "id\022%\n\010activity\030\002 \001(\005B\023\302\377\024\017\351\234\200\350\246\201\346\264\273\350\267\203\345\272"
    "\246\022\034\n\004desc\030\003 \001(\tB\016\302\377\024\006\346\217\217\350\277\260\220\301\024(\022\033\n\005boxId"
    "\030\004 \001(\003B\014\302\377\024\010\345\245\226\345\212\261id\"f\n\032Sheet_festivalmu"
    "ban_huoyue\022H\n\031festivalmuban_huoyue_List\030"
    "\001 \003(\0132\036.proto_ff.festivalmuban_huoyueB\005\210"
    "\301\024\374\002", 11524);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "festival.proto", &protobuf_RegisterTypes);
  festivalmuban_JFduihuan::default_instance_ = new festivalmuban_JFduihuan();
  Sheet_festivalmuban_JFduihuan::default_instance_ = new Sheet_festivalmuban_JFduihuan();
  festivalmuban_dingzhi::default_instance_ = new festivalmuban_dingzhi();
  Sheet_festivalmuban_dingzhi::default_instance_ = new Sheet_festivalmuban_dingzhi();
  festivalmuban_CZfanzuan::default_instance_ = new festivalmuban_CZfanzuan();
  Sheet_festivalmuban_CZfanzuan::default_instance_ = new Sheet_festivalmuban_CZfanzuan();
  festivalmuban_lianxuCZ::default_instance_ = new festivalmuban_lianxuCZ();
  Sheet_festivalmuban_lianxuCZ::default_instance_ = new Sheet_festivalmuban_lianxuCZ();
  festivalmuban_prerecharge::default_instance_ = new festivalmuban_prerecharge();
  Sheet_festivalmuban_prerecharge::default_instance_ = new Sheet_festivalmuban_prerecharge();
  festivalmuban_doubleGift::default_instance_ = new festivalmuban_doubleGift();
  Sheet_festivalmuban_doubleGift::default_instance_ = new Sheet_festivalmuban_doubleGift();
  festivalbigyanhuarecharge::default_instance_ = new festivalbigyanhuarecharge();
  Sheet_festivalbigyanhuarecharge::default_instance_ = new Sheet_festivalbigyanhuarecharge();
  festivalbigyanhuacost::default_instance_ = new festivalbigyanhuacost();
  Sheet_festivalbigyanhuacost::default_instance_ = new Sheet_festivalbigyanhuacost();
  festivalmuban_bigyanhua::default_instance_ = new festivalmuban_bigyanhua();
  Sheet_festivalmuban_bigyanhua::default_instance_ = new Sheet_festivalmuban_bigyanhua();
  festivalfestival::default_instance_ = new festivalfestival();
  Sheet_festivalfestival::default_instance_ = new Sheet_festivalfestival();
  festivaltemplate::default_instance_ = new festivaltemplate();
  Sheet_festivaltemplate::default_instance_ = new Sheet_festivaltemplate();
  festivalmuban_worldboss::default_instance_ = new festivalmuban_worldboss();
  Sheet_festivalmuban_worldboss::default_instance_ = new Sheet_festivalmuban_worldboss();
  festivalmuban_libao::default_instance_ = new festivalmuban_libao();
  Sheet_festivalmuban_libao::default_instance_ = new Sheet_festivalmuban_libao();
  festivalmuban_double::default_instance_ = new festivalmuban_double();
  Sheet_festivalmuban_double::default_instance_ = new Sheet_festivalmuban_double();
  festivalmiaoshu::default_instance_ = new festivalmiaoshu();
  Sheet_festivalmiaoshu::default_instance_ = new Sheet_festivalmiaoshu();
  festivalmuban_denglu::default_instance_ = new festivalmuban_denglu();
  Sheet_festivalmuban_denglu::default_instance_ = new Sheet_festivalmuban_denglu();
  festivalmuban_touzi::default_instance_ = new festivalmuban_touzi();
  Sheet_festivalmuban_touzi::default_instance_ = new Sheet_festivalmuban_touzi();
  festivalmuban_zhichong::default_instance_ = new festivalmuban_zhichong();
  Sheet_festivalmuban_zhichong::default_instance_ = new Sheet_festivalmuban_zhichong();
  festivalmuban_leichong::default_instance_ = new festivalmuban_leichong();
  Sheet_festivalmuban_leichong::default_instance_ = new Sheet_festivalmuban_leichong();
  festivalmuban_duihuan::default_instance_ = new festivalmuban_duihuan();
  Sheet_festivalmuban_duihuan::default_instance_ = new Sheet_festivalmuban_duihuan();
  festivald_diaoluo::default_instance_ = new festivald_diaoluo();
  Sheet_festivald_diaoluo::default_instance_ = new Sheet_festivald_diaoluo();
  festivalmuban_leixiao::default_instance_ = new festivalmuban_leixiao();
  Sheet_festivalmuban_leixiao::default_instance_ = new Sheet_festivalmuban_leixiao();
  festivalmuban_shouchong::default_instance_ = new festivalmuban_shouchong();
  Sheet_festivalmuban_shouchong::default_instance_ = new Sheet_festivalmuban_shouchong();
  festivalmuban_yanhua::default_instance_ = new festivalmuban_yanhua();
  Sheet_festivalmuban_yanhua::default_instance_ = new Sheet_festivalmuban_yanhua();
  festivalyanhuaConstant::default_instance_ = new festivalyanhuaConstant();
  Sheet_festivalyanhuaConstant::default_instance_ = new Sheet_festivalyanhuaConstant();
  festivalmuban_shop::default_instance_ = new festivalmuban_shop();
  Sheet_festivalmuban_shop::default_instance_ = new Sheet_festivalmuban_shop();
  festivalmuban_czjb::default_instance_ = new festivalmuban_czjb();
  Sheet_festivalmuban_czjb::default_instance_ = new Sheet_festivalmuban_czjb();
  festivalmuban_scsb::default_instance_ = new festivalmuban_scsb();
  Sheet_festivalmuban_scsb::default_instance_ = new Sheet_festivalmuban_scsb();
  festivalmuban_eggs::default_instance_ = new festivalmuban_eggs();
  Sheet_festivalmuban_eggs::default_instance_ = new Sheet_festivalmuban_eggs();
  festivaleggConstant::default_instance_ = new festivaleggConstant();
  Sheet_festivaleggConstant::default_instance_ = new Sheet_festivaleggConstant();
  festivalconstant::default_instance_ = new festivalconstant();
  Sheet_festivalconstant::default_instance_ = new Sheet_festivalconstant();
  festivalmuban_shousha::default_instance_ = new festivalmuban_shousha();
  Sheet_festivalmuban_shousha::default_instance_ = new Sheet_festivalmuban_shousha();
  festivalmuban_huoyue::default_instance_ = new festivalmuban_huoyue();
  Sheet_festivalmuban_huoyue::default_instance_ = new Sheet_festivalmuban_huoyue();
  festivalmuban_JFduihuan::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_JFduihuan::default_instance_->InitAsDefaultInstance();
  festivalmuban_dingzhi::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_dingzhi::default_instance_->InitAsDefaultInstance();
  festivalmuban_CZfanzuan::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_CZfanzuan::default_instance_->InitAsDefaultInstance();
  festivalmuban_lianxuCZ::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_lianxuCZ::default_instance_->InitAsDefaultInstance();
  festivalmuban_prerecharge::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_prerecharge::default_instance_->InitAsDefaultInstance();
  festivalmuban_doubleGift::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_doubleGift::default_instance_->InitAsDefaultInstance();
  festivalbigyanhuarecharge::default_instance_->InitAsDefaultInstance();
  Sheet_festivalbigyanhuarecharge::default_instance_->InitAsDefaultInstance();
  festivalbigyanhuacost::default_instance_->InitAsDefaultInstance();
  Sheet_festivalbigyanhuacost::default_instance_->InitAsDefaultInstance();
  festivalmuban_bigyanhua::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_bigyanhua::default_instance_->InitAsDefaultInstance();
  festivalfestival::default_instance_->InitAsDefaultInstance();
  Sheet_festivalfestival::default_instance_->InitAsDefaultInstance();
  festivaltemplate::default_instance_->InitAsDefaultInstance();
  Sheet_festivaltemplate::default_instance_->InitAsDefaultInstance();
  festivalmuban_worldboss::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_worldboss::default_instance_->InitAsDefaultInstance();
  festivalmuban_libao::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_libao::default_instance_->InitAsDefaultInstance();
  festivalmuban_double::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_double::default_instance_->InitAsDefaultInstance();
  festivalmiaoshu::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmiaoshu::default_instance_->InitAsDefaultInstance();
  festivalmuban_denglu::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_denglu::default_instance_->InitAsDefaultInstance();
  festivalmuban_touzi::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_touzi::default_instance_->InitAsDefaultInstance();
  festivalmuban_zhichong::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_zhichong::default_instance_->InitAsDefaultInstance();
  festivalmuban_leichong::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_leichong::default_instance_->InitAsDefaultInstance();
  festivalmuban_duihuan::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_duihuan::default_instance_->InitAsDefaultInstance();
  festivald_diaoluo::default_instance_->InitAsDefaultInstance();
  Sheet_festivald_diaoluo::default_instance_->InitAsDefaultInstance();
  festivalmuban_leixiao::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_leixiao::default_instance_->InitAsDefaultInstance();
  festivalmuban_shouchong::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_shouchong::default_instance_->InitAsDefaultInstance();
  festivalmuban_yanhua::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_yanhua::default_instance_->InitAsDefaultInstance();
  festivalyanhuaConstant::default_instance_->InitAsDefaultInstance();
  Sheet_festivalyanhuaConstant::default_instance_->InitAsDefaultInstance();
  festivalmuban_shop::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_shop::default_instance_->InitAsDefaultInstance();
  festivalmuban_czjb::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_czjb::default_instance_->InitAsDefaultInstance();
  festivalmuban_scsb::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_scsb::default_instance_->InitAsDefaultInstance();
  festivalmuban_eggs::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_eggs::default_instance_->InitAsDefaultInstance();
  festivaleggConstant::default_instance_->InitAsDefaultInstance();
  Sheet_festivaleggConstant::default_instance_->InitAsDefaultInstance();
  festivalconstant::default_instance_->InitAsDefaultInstance();
  Sheet_festivalconstant::default_instance_->InitAsDefaultInstance();
  festivalmuban_shousha::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_shousha::default_instance_->InitAsDefaultInstance();
  festivalmuban_huoyue::default_instance_->InitAsDefaultInstance();
  Sheet_festivalmuban_huoyue::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_festival_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_festival_2eproto {
  StaticDescriptorInitializer_festival_2eproto() {
    protobuf_AddDesc_festival_2eproto();
  }
} static_descriptor_initializer_festival_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_JFduihuan::kTiaoJianIdFieldNumber;
const int festivalmuban_JFduihuan::kPrizeIdFieldNumber;
const int festivalmuban_JFduihuan::kProfFieldNumber;
const int festivalmuban_JFduihuan::kPrizeNumFieldNumber;
const int festivalmuban_JFduihuan::kPropIdFieldNumber;
const int festivalmuban_JFduihuan::kPropNumFieldNumber;
const int festivalmuban_JFduihuan::kTimesFieldNumber;
#endif  // !_MSC_VER

festivalmuban_JFduihuan::festivalmuban_JFduihuan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_JFduihuan::InitAsDefaultInstance() {
}

festivalmuban_JFduihuan::festivalmuban_JFduihuan(const festivalmuban_JFduihuan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_JFduihuan::SharedCtor() {
  _cached_size_ = 0;
  tiaojianid_ = 0;
  prizeid_ = GOOGLE_LONGLONG(0);
  prof_ = 0;
  prizenum_ = 0;
  propid_ = GOOGLE_LONGLONG(0);
  propnum_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_JFduihuan::~festivalmuban_JFduihuan() {
  SharedDtor();
}

void festivalmuban_JFduihuan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_JFduihuan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_JFduihuan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_JFduihuan_descriptor_;
}

const festivalmuban_JFduihuan& festivalmuban_JFduihuan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_JFduihuan* festivalmuban_JFduihuan::default_instance_ = NULL;

festivalmuban_JFduihuan* festivalmuban_JFduihuan::New() const {
  return new festivalmuban_JFduihuan;
}

void festivalmuban_JFduihuan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tiaojianid_ = 0;
    prizeid_ = GOOGLE_LONGLONG(0);
    prof_ = 0;
    prizenum_ = 0;
    propid_ = GOOGLE_LONGLONG(0);
    propnum_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_JFduihuan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tiaoJianId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiaojianid_)));
          set_has_tiaojianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prizeId;
        break;
      }

      // optional int64 prizeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional int32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prizeNum;
        break;
      }

      // optional int32 prizeNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prizenum_)));
          set_has_prizenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_propId;
        break;
      }

      // optional int64 propId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_propNum;
        break;
      }

      // optional int32 propNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propnum_)));
          set_has_propnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // optional int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_JFduihuan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tiaoJianId = 1;
  if (has_tiaojianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tiaojianid(), output);
  }

  // optional int64 prizeId = 2;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->prizeid(), output);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prof(), output);
  }

  // optional int32 prizeNum = 4;
  if (has_prizenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prizenum(), output);
  }

  // optional int64 propId = 5;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->propid(), output);
  }

  // optional int32 propNum = 6;
  if (has_propnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->propnum(), output);
  }

  // optional int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_JFduihuan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tiaoJianId = 1;
  if (has_tiaojianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tiaojianid(), target);
  }

  // optional int64 prizeId = 2;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->prizeid(), target);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prof(), target);
  }

  // optional int32 prizeNum = 4;
  if (has_prizenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prizenum(), target);
  }

  // optional int64 propId = 5;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->propid(), target);
  }

  // optional int32 propNum = 6;
  if (has_propnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->propnum(), target);
  }

  // optional int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_JFduihuan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tiaoJianId = 1;
    if (has_tiaojianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiaojianid());
    }

    // optional int64 prizeId = 2;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prizeid());
    }

    // optional int32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 prizeNum = 4;
    if (has_prizenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prizenum());
    }

    // optional int64 propId = 5;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->propid());
    }

    // optional int32 propNum = 6;
    if (has_propnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propnum());
    }

    // optional int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_JFduihuan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_JFduihuan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_JFduihuan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_JFduihuan::MergeFrom(const festivalmuban_JFduihuan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tiaojianid()) {
      set_tiaojianid(from.tiaojianid());
    }
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_prizenum()) {
      set_prizenum(from.prizenum());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_propnum()) {
      set_propnum(from.propnum());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_JFduihuan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_JFduihuan::CopyFrom(const festivalmuban_JFduihuan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_JFduihuan::IsInitialized() const {

  return true;
}

void festivalmuban_JFduihuan::Swap(festivalmuban_JFduihuan* other) {
  if (other != this) {
    std::swap(tiaojianid_, other->tiaojianid_);
    std::swap(prizeid_, other->prizeid_);
    std::swap(prof_, other->prof_);
    std::swap(prizenum_, other->prizenum_);
    std::swap(propid_, other->propid_);
    std::swap(propnum_, other->propnum_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_JFduihuan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_JFduihuan_descriptor_;
  metadata.reflection = festivalmuban_JFduihuan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_JFduihuan::kFestivalmubanJFduihuanListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_JFduihuan::Sheet_festivalmuban_JFduihuan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_JFduihuan::InitAsDefaultInstance() {
}

Sheet_festivalmuban_JFduihuan::Sheet_festivalmuban_JFduihuan(const Sheet_festivalmuban_JFduihuan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_JFduihuan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_JFduihuan::~Sheet_festivalmuban_JFduihuan() {
  SharedDtor();
}

void Sheet_festivalmuban_JFduihuan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_JFduihuan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_JFduihuan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_JFduihuan_descriptor_;
}

const Sheet_festivalmuban_JFduihuan& Sheet_festivalmuban_JFduihuan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_JFduihuan* Sheet_festivalmuban_JFduihuan::default_instance_ = NULL;

Sheet_festivalmuban_JFduihuan* Sheet_festivalmuban_JFduihuan::New() const {
  return new Sheet_festivalmuban_JFduihuan;
}

void Sheet_festivalmuban_JFduihuan::Clear() {
  festivalmuban_jfduihuan_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_JFduihuan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_JFduihuan festivalmuban_JFduihuan_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_JFduihuan_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_jfduihuan_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_JFduihuan_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_JFduihuan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_JFduihuan festivalmuban_JFduihuan_List = 1;
  for (int i = 0; i < this->festivalmuban_jfduihuan_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_jfduihuan_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_JFduihuan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_JFduihuan festivalmuban_JFduihuan_List = 1;
  for (int i = 0; i < this->festivalmuban_jfduihuan_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_jfduihuan_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_JFduihuan::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_JFduihuan festivalmuban_JFduihuan_List = 1;
  total_size += 1 * this->festivalmuban_jfduihuan_list_size();
  for (int i = 0; i < this->festivalmuban_jfduihuan_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_jfduihuan_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_JFduihuan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_JFduihuan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_JFduihuan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_JFduihuan::MergeFrom(const Sheet_festivalmuban_JFduihuan& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_jfduihuan_list_.MergeFrom(from.festivalmuban_jfduihuan_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_JFduihuan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_JFduihuan::CopyFrom(const Sheet_festivalmuban_JFduihuan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_JFduihuan::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_JFduihuan::Swap(Sheet_festivalmuban_JFduihuan* other) {
  if (other != this) {
    festivalmuban_jfduihuan_list_.Swap(&other->festivalmuban_jfduihuan_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_JFduihuan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_JFduihuan_descriptor_;
  metadata.reflection = Sheet_festivalmuban_JFduihuan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_dingzhi::kIdFieldNumber;
const int festivalmuban_dingzhi::kDesFieldNumber;
const int festivalmuban_dingzhi::kMustBoxIdFieldNumber;
const int festivalmuban_dingzhi::kCurrencyTypeFieldNumber;
const int festivalmuban_dingzhi::kPriceFieldNumber;
const int festivalmuban_dingzhi::kTimesFieldNumber;
const int festivalmuban_dingzhi::kFreeBoxIdFieldNumber;
const int festivalmuban_dingzhi::kFreeNumFieldNumber;
#endif  // !_MSC_VER

festivalmuban_dingzhi::festivalmuban_dingzhi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_dingzhi::InitAsDefaultInstance() {
}

festivalmuban_dingzhi::festivalmuban_dingzhi(const festivalmuban_dingzhi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_dingzhi::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mustboxid_ = GOOGLE_LONGLONG(0);
  currencytype_ = 0;
  price_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_dingzhi::~festivalmuban_dingzhi() {
  SharedDtor();
}

void festivalmuban_dingzhi::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_dingzhi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_dingzhi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_dingzhi_descriptor_;
}

const festivalmuban_dingzhi& festivalmuban_dingzhi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_dingzhi* festivalmuban_dingzhi::default_instance_ = NULL;

festivalmuban_dingzhi* festivalmuban_dingzhi::New() const {
  return new festivalmuban_dingzhi;
}

void festivalmuban_dingzhi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    mustboxid_ = GOOGLE_LONGLONG(0);
    currencytype_ = 0;
    price_ = 0;
    times_ = 0;
  }
  freeboxid_.Clear();
  freenum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_dingzhi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_des;
        break;
      }

      // optional string des = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mustBoxId;
        break;
      }

      // optional int64 mustBoxId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mustBoxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mustboxid_)));
          set_has_mustboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_currencyType;
        break;
      }

      // optional int32 currencyType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currencyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencytype_)));
          set_has_currencytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_price;
        break;
      }

      // optional int32 price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_times;
        break;
      }

      // optional int32 times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_freeBoxId;
        break;
      }

      // repeated int64 freeBoxId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeBoxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_freeboxid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_freeboxid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_freeBoxId;
        if (input->ExpectTag(64)) goto parse_freeNum;
        break;
      }

      // repeated int32 freeNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_freenum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_freenum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_freeNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_dingzhi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string des = 2;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->des(), output);
  }

  // optional int64 mustBoxId = 3;
  if (has_mustboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->mustboxid(), output);
  }

  // optional int32 currencyType = 4;
  if (has_currencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currencytype(), output);
  }

  // optional int32 price = 5;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->price(), output);
  }

  // optional int32 times = 6;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->times(), output);
  }

  // repeated int64 freeBoxId = 7;
  for (int i = 0; i < this->freeboxid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->freeboxid(i), output);
  }

  // repeated int32 freeNum = 8;
  for (int i = 0; i < this->freenum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->freenum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_dingzhi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string des = 2;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->des(), target);
  }

  // optional int64 mustBoxId = 3;
  if (has_mustboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->mustboxid(), target);
  }

  // optional int32 currencyType = 4;
  if (has_currencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currencytype(), target);
  }

  // optional int32 price = 5;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->price(), target);
  }

  // optional int32 times = 6;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->times(), target);
  }

  // repeated int64 freeBoxId = 7;
  for (int i = 0; i < this->freeboxid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->freeboxid(i), target);
  }

  // repeated int32 freeNum = 8;
  for (int i = 0; i < this->freenum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->freenum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_dingzhi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string des = 2;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

    // optional int64 mustBoxId = 3;
    if (has_mustboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mustboxid());
    }

    // optional int32 currencyType = 4;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencytype());
    }

    // optional int32 price = 5;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 times = 6;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  // repeated int64 freeBoxId = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->freeboxid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->freeboxid(i));
    }
    total_size += 1 * this->freeboxid_size() + data_size;
  }

  // repeated int32 freeNum = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->freenum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->freenum(i));
    }
    total_size += 1 * this->freenum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_dingzhi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_dingzhi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_dingzhi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_dingzhi::MergeFrom(const festivalmuban_dingzhi& from) {
  GOOGLE_CHECK_NE(&from, this);
  freeboxid_.MergeFrom(from.freeboxid_);
  freenum_.MergeFrom(from.freenum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_mustboxid()) {
      set_mustboxid(from.mustboxid());
    }
    if (from.has_currencytype()) {
      set_currencytype(from.currencytype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_dingzhi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_dingzhi::CopyFrom(const festivalmuban_dingzhi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_dingzhi::IsInitialized() const {

  return true;
}

void festivalmuban_dingzhi::Swap(festivalmuban_dingzhi* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(des_, other->des_);
    std::swap(mustboxid_, other->mustboxid_);
    std::swap(currencytype_, other->currencytype_);
    std::swap(price_, other->price_);
    std::swap(times_, other->times_);
    freeboxid_.Swap(&other->freeboxid_);
    freenum_.Swap(&other->freenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_dingzhi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_dingzhi_descriptor_;
  metadata.reflection = festivalmuban_dingzhi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_dingzhi::kFestivalmubanDingzhiListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_dingzhi::Sheet_festivalmuban_dingzhi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_dingzhi::InitAsDefaultInstance() {
}

Sheet_festivalmuban_dingzhi::Sheet_festivalmuban_dingzhi(const Sheet_festivalmuban_dingzhi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_dingzhi::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_dingzhi::~Sheet_festivalmuban_dingzhi() {
  SharedDtor();
}

void Sheet_festivalmuban_dingzhi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_dingzhi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_dingzhi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_dingzhi_descriptor_;
}

const Sheet_festivalmuban_dingzhi& Sheet_festivalmuban_dingzhi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_dingzhi* Sheet_festivalmuban_dingzhi::default_instance_ = NULL;

Sheet_festivalmuban_dingzhi* Sheet_festivalmuban_dingzhi::New() const {
  return new Sheet_festivalmuban_dingzhi;
}

void Sheet_festivalmuban_dingzhi::Clear() {
  festivalmuban_dingzhi_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_dingzhi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_dingzhi festivalmuban_dingzhi_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_dingzhi_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_dingzhi_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_dingzhi_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_dingzhi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_dingzhi festivalmuban_dingzhi_List = 1;
  for (int i = 0; i < this->festivalmuban_dingzhi_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_dingzhi_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_dingzhi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_dingzhi festivalmuban_dingzhi_List = 1;
  for (int i = 0; i < this->festivalmuban_dingzhi_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_dingzhi_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_dingzhi::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_dingzhi festivalmuban_dingzhi_List = 1;
  total_size += 1 * this->festivalmuban_dingzhi_list_size();
  for (int i = 0; i < this->festivalmuban_dingzhi_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_dingzhi_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_dingzhi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_dingzhi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_dingzhi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_dingzhi::MergeFrom(const Sheet_festivalmuban_dingzhi& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_dingzhi_list_.MergeFrom(from.festivalmuban_dingzhi_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_dingzhi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_dingzhi::CopyFrom(const Sheet_festivalmuban_dingzhi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_dingzhi::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_dingzhi::Swap(Sheet_festivalmuban_dingzhi* other) {
  if (other != this) {
    festivalmuban_dingzhi_list_.Swap(&other->festivalmuban_dingzhi_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_dingzhi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_dingzhi_descriptor_;
  metadata.reflection = Sheet_festivalmuban_dingzhi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_CZfanzuan::kIdFieldNumber;
const int festivalmuban_CZfanzuan::kRechargeIdFieldNumber;
const int festivalmuban_CZfanzuan::kRepayTypeFieldNumber;
const int festivalmuban_CZfanzuan::kRepayNumFieldNumber;
const int festivalmuban_CZfanzuan::kTimesLimitFieldNumber;
#endif  // !_MSC_VER

festivalmuban_CZfanzuan::festivalmuban_CZfanzuan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_CZfanzuan::InitAsDefaultInstance() {
}

festivalmuban_CZfanzuan::festivalmuban_CZfanzuan(const festivalmuban_CZfanzuan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_CZfanzuan::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  rechargeid_ = 0;
  repaytype_ = 0;
  repaynum_ = 0;
  timeslimit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_CZfanzuan::~festivalmuban_CZfanzuan() {
  SharedDtor();
}

void festivalmuban_CZfanzuan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_CZfanzuan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_CZfanzuan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_CZfanzuan_descriptor_;
}

const festivalmuban_CZfanzuan& festivalmuban_CZfanzuan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_CZfanzuan* festivalmuban_CZfanzuan::default_instance_ = NULL;

festivalmuban_CZfanzuan* festivalmuban_CZfanzuan::New() const {
  return new festivalmuban_CZfanzuan;
}

void festivalmuban_CZfanzuan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    rechargeid_ = 0;
    repaytype_ = 0;
    repaynum_ = 0;
    timeslimit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_CZfanzuan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rechargeId;
        break;
      }

      // optional int32 rechargeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargeid_)));
          set_has_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_repayType;
        break;
      }

      // optional int32 repayType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repayType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repaytype_)));
          set_has_repaytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_repayNum;
        break;
      }

      // optional int32 repayNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_repayNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repaynum_)));
          set_has_repaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timesLimit;
        break;
      }

      // optional int32 timesLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timesLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeslimit_)));
          set_has_timeslimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_CZfanzuan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 rechargeId = 2;
  if (has_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rechargeid(), output);
  }

  // optional int32 repayType = 3;
  if (has_repaytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->repaytype(), output);
  }

  // optional int32 repayNum = 4;
  if (has_repaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->repaynum(), output);
  }

  // optional int32 timesLimit = 5;
  if (has_timeslimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->timeslimit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_CZfanzuan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 rechargeId = 2;
  if (has_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rechargeid(), target);
  }

  // optional int32 repayType = 3;
  if (has_repaytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->repaytype(), target);
  }

  // optional int32 repayNum = 4;
  if (has_repaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->repaynum(), target);
  }

  // optional int32 timesLimit = 5;
  if (has_timeslimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->timeslimit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_CZfanzuan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 rechargeId = 2;
    if (has_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargeid());
    }

    // optional int32 repayType = 3;
    if (has_repaytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repaytype());
    }

    // optional int32 repayNum = 4;
    if (has_repaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repaynum());
    }

    // optional int32 timesLimit = 5;
    if (has_timeslimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeslimit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_CZfanzuan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_CZfanzuan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_CZfanzuan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_CZfanzuan::MergeFrom(const festivalmuban_CZfanzuan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rechargeid()) {
      set_rechargeid(from.rechargeid());
    }
    if (from.has_repaytype()) {
      set_repaytype(from.repaytype());
    }
    if (from.has_repaynum()) {
      set_repaynum(from.repaynum());
    }
    if (from.has_timeslimit()) {
      set_timeslimit(from.timeslimit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_CZfanzuan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_CZfanzuan::CopyFrom(const festivalmuban_CZfanzuan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_CZfanzuan::IsInitialized() const {

  return true;
}

void festivalmuban_CZfanzuan::Swap(festivalmuban_CZfanzuan* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rechargeid_, other->rechargeid_);
    std::swap(repaytype_, other->repaytype_);
    std::swap(repaynum_, other->repaynum_);
    std::swap(timeslimit_, other->timeslimit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_CZfanzuan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_CZfanzuan_descriptor_;
  metadata.reflection = festivalmuban_CZfanzuan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_CZfanzuan::kFestivalmubanCZfanzuanListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_CZfanzuan::Sheet_festivalmuban_CZfanzuan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_CZfanzuan::InitAsDefaultInstance() {
}

Sheet_festivalmuban_CZfanzuan::Sheet_festivalmuban_CZfanzuan(const Sheet_festivalmuban_CZfanzuan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_CZfanzuan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_CZfanzuan::~Sheet_festivalmuban_CZfanzuan() {
  SharedDtor();
}

void Sheet_festivalmuban_CZfanzuan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_CZfanzuan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_CZfanzuan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_CZfanzuan_descriptor_;
}

const Sheet_festivalmuban_CZfanzuan& Sheet_festivalmuban_CZfanzuan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_CZfanzuan* Sheet_festivalmuban_CZfanzuan::default_instance_ = NULL;

Sheet_festivalmuban_CZfanzuan* Sheet_festivalmuban_CZfanzuan::New() const {
  return new Sheet_festivalmuban_CZfanzuan;
}

void Sheet_festivalmuban_CZfanzuan::Clear() {
  festivalmuban_czfanzuan_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_CZfanzuan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_CZfanzuan festivalmuban_CZfanzuan_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_CZfanzuan_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_czfanzuan_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_CZfanzuan_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_CZfanzuan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_CZfanzuan festivalmuban_CZfanzuan_List = 1;
  for (int i = 0; i < this->festivalmuban_czfanzuan_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_czfanzuan_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_CZfanzuan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_CZfanzuan festivalmuban_CZfanzuan_List = 1;
  for (int i = 0; i < this->festivalmuban_czfanzuan_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_czfanzuan_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_CZfanzuan::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_CZfanzuan festivalmuban_CZfanzuan_List = 1;
  total_size += 1 * this->festivalmuban_czfanzuan_list_size();
  for (int i = 0; i < this->festivalmuban_czfanzuan_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_czfanzuan_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_CZfanzuan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_CZfanzuan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_CZfanzuan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_CZfanzuan::MergeFrom(const Sheet_festivalmuban_CZfanzuan& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_czfanzuan_list_.MergeFrom(from.festivalmuban_czfanzuan_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_CZfanzuan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_CZfanzuan::CopyFrom(const Sheet_festivalmuban_CZfanzuan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_CZfanzuan::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_CZfanzuan::Swap(Sheet_festivalmuban_CZfanzuan* other) {
  if (other != this) {
    festivalmuban_czfanzuan_list_.Swap(&other->festivalmuban_czfanzuan_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_CZfanzuan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_CZfanzuan_descriptor_;
  metadata.reflection = Sheet_festivalmuban_CZfanzuan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_lianxuCZ::kIdFieldNumber;
const int festivalmuban_lianxuCZ::kNumFieldNumber;
const int festivalmuban_lianxuCZ::kRemarkIdFieldNumber;
const int festivalmuban_lianxuCZ::kMiaoshuFieldNumber;
const int festivalmuban_lianxuCZ::kJiangLiFieldNumber;
#endif  // !_MSC_VER

festivalmuban_lianxuCZ::festivalmuban_lianxuCZ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_lianxuCZ::InitAsDefaultInstance() {
}

festivalmuban_lianxuCZ::festivalmuban_lianxuCZ(const festivalmuban_lianxuCZ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_lianxuCZ::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  remarkid_ = 0;
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jiangli_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_lianxuCZ::~festivalmuban_lianxuCZ() {
  SharedDtor();
}

void festivalmuban_lianxuCZ::SharedDtor() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_lianxuCZ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_lianxuCZ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_lianxuCZ_descriptor_;
}

const festivalmuban_lianxuCZ& festivalmuban_lianxuCZ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_lianxuCZ* festivalmuban_lianxuCZ::default_instance_ = NULL;

festivalmuban_lianxuCZ* festivalmuban_lianxuCZ::New() const {
  return new festivalmuban_lianxuCZ;
}

void festivalmuban_lianxuCZ::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
    remarkid_ = 0;
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    jiangli_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_lianxuCZ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional int32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remarkId;
        break;
      }

      // optional int32 remarkId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remarkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remarkid_)));
          set_has_remarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_lianxuCZ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 remarkId = 3;
  if (has_remarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remarkid(), output);
  }

  // optional string miaoshu = 4;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->miaoshu(), output);
  }

  // optional int64 jiangLi = 5;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->jiangli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_lianxuCZ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 remarkId = 3;
  if (has_remarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remarkid(), target);
  }

  // optional string miaoshu = 4;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->miaoshu(), target);
  }

  // optional int64 jiangLi = 5;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->jiangli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_lianxuCZ::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 remarkId = 3;
    if (has_remarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remarkid());
    }

    // optional string miaoshu = 4;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 jiangLi = 5;
    if (has_jiangli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_lianxuCZ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_lianxuCZ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_lianxuCZ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_lianxuCZ::MergeFrom(const festivalmuban_lianxuCZ& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_remarkid()) {
      set_remarkid(from.remarkid());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_lianxuCZ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_lianxuCZ::CopyFrom(const festivalmuban_lianxuCZ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_lianxuCZ::IsInitialized() const {

  return true;
}

void festivalmuban_lianxuCZ::Swap(festivalmuban_lianxuCZ* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(remarkid_, other->remarkid_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_lianxuCZ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_lianxuCZ_descriptor_;
  metadata.reflection = festivalmuban_lianxuCZ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_lianxuCZ::kFestivalmubanLianxuCZListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_lianxuCZ::Sheet_festivalmuban_lianxuCZ()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_lianxuCZ::InitAsDefaultInstance() {
}

Sheet_festivalmuban_lianxuCZ::Sheet_festivalmuban_lianxuCZ(const Sheet_festivalmuban_lianxuCZ& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_lianxuCZ::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_lianxuCZ::~Sheet_festivalmuban_lianxuCZ() {
  SharedDtor();
}

void Sheet_festivalmuban_lianxuCZ::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_lianxuCZ::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_lianxuCZ::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_lianxuCZ_descriptor_;
}

const Sheet_festivalmuban_lianxuCZ& Sheet_festivalmuban_lianxuCZ::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_lianxuCZ* Sheet_festivalmuban_lianxuCZ::default_instance_ = NULL;

Sheet_festivalmuban_lianxuCZ* Sheet_festivalmuban_lianxuCZ::New() const {
  return new Sheet_festivalmuban_lianxuCZ;
}

void Sheet_festivalmuban_lianxuCZ::Clear() {
  festivalmuban_lianxucz_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_lianxuCZ::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_lianxuCZ festivalmuban_lianxuCZ_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_lianxuCZ_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_lianxucz_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_lianxuCZ_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_lianxuCZ::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_lianxuCZ festivalmuban_lianxuCZ_List = 1;
  for (int i = 0; i < this->festivalmuban_lianxucz_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_lianxucz_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_lianxuCZ::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_lianxuCZ festivalmuban_lianxuCZ_List = 1;
  for (int i = 0; i < this->festivalmuban_lianxucz_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_lianxucz_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_lianxuCZ::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_lianxuCZ festivalmuban_lianxuCZ_List = 1;
  total_size += 1 * this->festivalmuban_lianxucz_list_size();
  for (int i = 0; i < this->festivalmuban_lianxucz_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_lianxucz_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_lianxuCZ::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_lianxuCZ* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_lianxuCZ*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_lianxuCZ::MergeFrom(const Sheet_festivalmuban_lianxuCZ& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_lianxucz_list_.MergeFrom(from.festivalmuban_lianxucz_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_lianxuCZ::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_lianxuCZ::CopyFrom(const Sheet_festivalmuban_lianxuCZ& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_lianxuCZ::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_lianxuCZ::Swap(Sheet_festivalmuban_lianxuCZ* other) {
  if (other != this) {
    festivalmuban_lianxucz_list_.Swap(&other->festivalmuban_lianxucz_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_lianxuCZ::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_lianxuCZ_descriptor_;
  metadata.reflection = Sheet_festivalmuban_lianxuCZ_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_prerecharge::kIdFieldNumber;
const int festivalmuban_prerecharge::kOrderFieldNumber;
const int festivalmuban_prerecharge::kDesFieldNumber;
const int festivalmuban_prerecharge::kBoxidFieldNumber;
const int festivalmuban_prerecharge::kRechargeIdFieldNumber;
const int festivalmuban_prerecharge::kTimesFieldNumber;
#endif  // !_MSC_VER

festivalmuban_prerecharge::festivalmuban_prerecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_prerecharge::InitAsDefaultInstance() {
}

festivalmuban_prerecharge::festivalmuban_prerecharge(const festivalmuban_prerecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_prerecharge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  order_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boxid_ = GOOGLE_LONGLONG(0);
  rechargeid_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_prerecharge::~festivalmuban_prerecharge() {
  SharedDtor();
}

void festivalmuban_prerecharge::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_prerecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_prerecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_prerecharge_descriptor_;
}

const festivalmuban_prerecharge& festivalmuban_prerecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_prerecharge* festivalmuban_prerecharge::default_instance_ = NULL;

festivalmuban_prerecharge* festivalmuban_prerecharge::New() const {
  return new festivalmuban_prerecharge;
}

void festivalmuban_prerecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    order_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    boxid_ = GOOGLE_LONGLONG(0);
    rechargeid_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_prerecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order;
        break;
      }

      // optional int32 order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_des;
        break;
      }

      // optional string des = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rechargeId;
        break;
      }

      // optional int32 rechargeId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargeid_)));
          set_has_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_times;
        break;
      }

      // optional int32 times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_prerecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order(), output);
  }

  // optional string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->des(), output);
  }

  // optional int64 boxid = 4;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->boxid(), output);
  }

  // optional int32 rechargeId = 5;
  if (has_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rechargeid(), output);
  }

  // optional int32 times = 6;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_prerecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 order = 2;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order(), target);
  }

  // optional string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->des(), target);
  }

  // optional int64 boxid = 4;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->boxid(), target);
  }

  // optional int32 rechargeId = 5;
  if (has_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rechargeid(), target);
  }

  // optional int32 times = 6;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_prerecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional string des = 3;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

    // optional int64 boxid = 4;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int32 rechargeId = 5;
    if (has_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargeid());
    }

    // optional int32 times = 6;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_prerecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_prerecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_prerecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_prerecharge::MergeFrom(const festivalmuban_prerecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_rechargeid()) {
      set_rechargeid(from.rechargeid());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_prerecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_prerecharge::CopyFrom(const festivalmuban_prerecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_prerecharge::IsInitialized() const {

  return true;
}

void festivalmuban_prerecharge::Swap(festivalmuban_prerecharge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(order_, other->order_);
    std::swap(des_, other->des_);
    std::swap(boxid_, other->boxid_);
    std::swap(rechargeid_, other->rechargeid_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_prerecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_prerecharge_descriptor_;
  metadata.reflection = festivalmuban_prerecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_prerecharge::kFestivalmubanPrerechargeListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_prerecharge::Sheet_festivalmuban_prerecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_prerecharge::InitAsDefaultInstance() {
}

Sheet_festivalmuban_prerecharge::Sheet_festivalmuban_prerecharge(const Sheet_festivalmuban_prerecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_prerecharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_prerecharge::~Sheet_festivalmuban_prerecharge() {
  SharedDtor();
}

void Sheet_festivalmuban_prerecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_prerecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_prerecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_prerecharge_descriptor_;
}

const Sheet_festivalmuban_prerecharge& Sheet_festivalmuban_prerecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_prerecharge* Sheet_festivalmuban_prerecharge::default_instance_ = NULL;

Sheet_festivalmuban_prerecharge* Sheet_festivalmuban_prerecharge::New() const {
  return new Sheet_festivalmuban_prerecharge;
}

void Sheet_festivalmuban_prerecharge::Clear() {
  festivalmuban_prerecharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_prerecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_prerecharge festivalmuban_prerecharge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_prerecharge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_prerecharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_prerecharge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_prerecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_prerecharge festivalmuban_prerecharge_List = 1;
  for (int i = 0; i < this->festivalmuban_prerecharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_prerecharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_prerecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_prerecharge festivalmuban_prerecharge_List = 1;
  for (int i = 0; i < this->festivalmuban_prerecharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_prerecharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_prerecharge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_prerecharge festivalmuban_prerecharge_List = 1;
  total_size += 1 * this->festivalmuban_prerecharge_list_size();
  for (int i = 0; i < this->festivalmuban_prerecharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_prerecharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_prerecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_prerecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_prerecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_prerecharge::MergeFrom(const Sheet_festivalmuban_prerecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_prerecharge_list_.MergeFrom(from.festivalmuban_prerecharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_prerecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_prerecharge::CopyFrom(const Sheet_festivalmuban_prerecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_prerecharge::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_prerecharge::Swap(Sheet_festivalmuban_prerecharge* other) {
  if (other != this) {
    festivalmuban_prerecharge_list_.Swap(&other->festivalmuban_prerecharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_prerecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_prerecharge_descriptor_;
  metadata.reflection = Sheet_festivalmuban_prerecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_doubleGift::kIdFieldNumber;
const int festivalmuban_doubleGift::kGearFieldNumber;
const int festivalmuban_doubleGift::kBoxIdFieldNumber;
const int festivalmuban_doubleGift::kFreeBoxFieldNumber;
#endif  // !_MSC_VER

festivalmuban_doubleGift::festivalmuban_doubleGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_doubleGift::InitAsDefaultInstance() {
}

festivalmuban_doubleGift::festivalmuban_doubleGift(const festivalmuban_doubleGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_doubleGift::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  gear_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  freebox_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_doubleGift::~festivalmuban_doubleGift() {
  SharedDtor();
}

void festivalmuban_doubleGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_doubleGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_doubleGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_doubleGift_descriptor_;
}

const festivalmuban_doubleGift& festivalmuban_doubleGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_doubleGift* festivalmuban_doubleGift::default_instance_ = NULL;

festivalmuban_doubleGift* festivalmuban_doubleGift::New() const {
  return new festivalmuban_doubleGift;
}

void festivalmuban_doubleGift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    gear_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
    freebox_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_doubleGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gear;
        break;
      }

      // optional int32 gear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boxId;
        break;
      }

      // optional int64 boxId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_freeBox;
        break;
      }

      // optional int64 freeBox = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeBox:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &freebox_)));
          set_has_freebox();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_doubleGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gear(), output);
  }

  // optional int64 boxId = 3;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->boxid(), output);
  }

  // optional int64 freeBox = 4;
  if (has_freebox()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->freebox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_doubleGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gear(), target);
  }

  // optional int64 boxId = 3;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->boxid(), target);
  }

  // optional int64 freeBox = 4;
  if (has_freebox()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->freebox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_doubleGift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 gear = 2;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

    // optional int64 boxId = 3;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int64 freeBox = 4;
    if (has_freebox()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->freebox());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_doubleGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_doubleGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_doubleGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_doubleGift::MergeFrom(const festivalmuban_doubleGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_freebox()) {
      set_freebox(from.freebox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_doubleGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_doubleGift::CopyFrom(const festivalmuban_doubleGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_doubleGift::IsInitialized() const {

  return true;
}

void festivalmuban_doubleGift::Swap(festivalmuban_doubleGift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gear_, other->gear_);
    std::swap(boxid_, other->boxid_);
    std::swap(freebox_, other->freebox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_doubleGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_doubleGift_descriptor_;
  metadata.reflection = festivalmuban_doubleGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_doubleGift::kFestivalmubanDoubleGiftListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_doubleGift::Sheet_festivalmuban_doubleGift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_doubleGift::InitAsDefaultInstance() {
}

Sheet_festivalmuban_doubleGift::Sheet_festivalmuban_doubleGift(const Sheet_festivalmuban_doubleGift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_doubleGift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_doubleGift::~Sheet_festivalmuban_doubleGift() {
  SharedDtor();
}

void Sheet_festivalmuban_doubleGift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_doubleGift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_doubleGift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_doubleGift_descriptor_;
}

const Sheet_festivalmuban_doubleGift& Sheet_festivalmuban_doubleGift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_doubleGift* Sheet_festivalmuban_doubleGift::default_instance_ = NULL;

Sheet_festivalmuban_doubleGift* Sheet_festivalmuban_doubleGift::New() const {
  return new Sheet_festivalmuban_doubleGift;
}

void Sheet_festivalmuban_doubleGift::Clear() {
  festivalmuban_doublegift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_doubleGift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_doubleGift festivalmuban_doubleGift_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_doubleGift_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_doublegift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_doubleGift_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_doubleGift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_doubleGift festivalmuban_doubleGift_List = 1;
  for (int i = 0; i < this->festivalmuban_doublegift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_doublegift_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_doubleGift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_doubleGift festivalmuban_doubleGift_List = 1;
  for (int i = 0; i < this->festivalmuban_doublegift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_doublegift_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_doubleGift::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_doubleGift festivalmuban_doubleGift_List = 1;
  total_size += 1 * this->festivalmuban_doublegift_list_size();
  for (int i = 0; i < this->festivalmuban_doublegift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_doublegift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_doubleGift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_doubleGift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_doubleGift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_doubleGift::MergeFrom(const Sheet_festivalmuban_doubleGift& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_doublegift_list_.MergeFrom(from.festivalmuban_doublegift_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_doubleGift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_doubleGift::CopyFrom(const Sheet_festivalmuban_doubleGift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_doubleGift::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_doubleGift::Swap(Sheet_festivalmuban_doubleGift* other) {
  if (other != this) {
    festivalmuban_doublegift_list_.Swap(&other->festivalmuban_doublegift_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_doubleGift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_doubleGift_descriptor_;
  metadata.reflection = Sheet_festivalmuban_doubleGift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalbigyanhuarecharge::kNumFieldNumber;
const int festivalbigyanhuarecharge::kRechargeFieldNumber;
#endif  // !_MSC_VER

festivalbigyanhuarecharge::festivalbigyanhuarecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalbigyanhuarecharge::InitAsDefaultInstance() {
}

festivalbigyanhuarecharge::festivalbigyanhuarecharge(const festivalbigyanhuarecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalbigyanhuarecharge::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  recharge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalbigyanhuarecharge::~festivalbigyanhuarecharge() {
  SharedDtor();
}

void festivalbigyanhuarecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalbigyanhuarecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalbigyanhuarecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalbigyanhuarecharge_descriptor_;
}

const festivalbigyanhuarecharge& festivalbigyanhuarecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalbigyanhuarecharge* festivalbigyanhuarecharge::default_instance_ = NULL;

festivalbigyanhuarecharge* festivalbigyanhuarecharge::New() const {
  return new festivalbigyanhuarecharge;
}

void festivalbigyanhuarecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    recharge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalbigyanhuarecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recharge;
        break;
      }

      // optional int32 recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalbigyanhuarecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 recharge = 2;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalbigyanhuarecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 recharge = 2;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalbigyanhuarecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 recharge = 2;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recharge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalbigyanhuarecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalbigyanhuarecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalbigyanhuarecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalbigyanhuarecharge::MergeFrom(const festivalbigyanhuarecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalbigyanhuarecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalbigyanhuarecharge::CopyFrom(const festivalbigyanhuarecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalbigyanhuarecharge::IsInitialized() const {

  return true;
}

void festivalbigyanhuarecharge::Swap(festivalbigyanhuarecharge* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(recharge_, other->recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalbigyanhuarecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalbigyanhuarecharge_descriptor_;
  metadata.reflection = festivalbigyanhuarecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalbigyanhuarecharge::kFestivalbigyanhuarechargeListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalbigyanhuarecharge::Sheet_festivalbigyanhuarecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalbigyanhuarecharge::InitAsDefaultInstance() {
}

Sheet_festivalbigyanhuarecharge::Sheet_festivalbigyanhuarecharge(const Sheet_festivalbigyanhuarecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalbigyanhuarecharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalbigyanhuarecharge::~Sheet_festivalbigyanhuarecharge() {
  SharedDtor();
}

void Sheet_festivalbigyanhuarecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalbigyanhuarecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalbigyanhuarecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalbigyanhuarecharge_descriptor_;
}

const Sheet_festivalbigyanhuarecharge& Sheet_festivalbigyanhuarecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalbigyanhuarecharge* Sheet_festivalbigyanhuarecharge::default_instance_ = NULL;

Sheet_festivalbigyanhuarecharge* Sheet_festivalbigyanhuarecharge::New() const {
  return new Sheet_festivalbigyanhuarecharge;
}

void Sheet_festivalbigyanhuarecharge::Clear() {
  festivalbigyanhuarecharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalbigyanhuarecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalbigyanhuarecharge festivalbigyanhuarecharge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalbigyanhuarecharge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalbigyanhuarecharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalbigyanhuarecharge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalbigyanhuarecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalbigyanhuarecharge festivalbigyanhuarecharge_List = 1;
  for (int i = 0; i < this->festivalbigyanhuarecharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalbigyanhuarecharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalbigyanhuarecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalbigyanhuarecharge festivalbigyanhuarecharge_List = 1;
  for (int i = 0; i < this->festivalbigyanhuarecharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalbigyanhuarecharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalbigyanhuarecharge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalbigyanhuarecharge festivalbigyanhuarecharge_List = 1;
  total_size += 1 * this->festivalbigyanhuarecharge_list_size();
  for (int i = 0; i < this->festivalbigyanhuarecharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalbigyanhuarecharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalbigyanhuarecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalbigyanhuarecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalbigyanhuarecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalbigyanhuarecharge::MergeFrom(const Sheet_festivalbigyanhuarecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalbigyanhuarecharge_list_.MergeFrom(from.festivalbigyanhuarecharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalbigyanhuarecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalbigyanhuarecharge::CopyFrom(const Sheet_festivalbigyanhuarecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalbigyanhuarecharge::IsInitialized() const {

  return true;
}

void Sheet_festivalbigyanhuarecharge::Swap(Sheet_festivalbigyanhuarecharge* other) {
  if (other != this) {
    festivalbigyanhuarecharge_list_.Swap(&other->festivalbigyanhuarecharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalbigyanhuarecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalbigyanhuarecharge_descriptor_;
  metadata.reflection = Sheet_festivalbigyanhuarecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalbigyanhuacost::kTimesFieldNumber;
const int festivalbigyanhuacost::kSingleCostFieldNumber;
const int festivalbigyanhuacost::kAllCostFieldNumber;
#endif  // !_MSC_VER

festivalbigyanhuacost::festivalbigyanhuacost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalbigyanhuacost::InitAsDefaultInstance() {
}

festivalbigyanhuacost::festivalbigyanhuacost(const festivalbigyanhuacost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalbigyanhuacost::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  singlecost_ = 0;
  allcost_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalbigyanhuacost::~festivalbigyanhuacost() {
  SharedDtor();
}

void festivalbigyanhuacost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalbigyanhuacost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalbigyanhuacost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalbigyanhuacost_descriptor_;
}

const festivalbigyanhuacost& festivalbigyanhuacost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalbigyanhuacost* festivalbigyanhuacost::default_instance_ = NULL;

festivalbigyanhuacost* festivalbigyanhuacost::New() const {
  return new festivalbigyanhuacost;
}

void festivalbigyanhuacost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0;
    singlecost_ = 0;
    allcost_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalbigyanhuacost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_singleCost;
        break;
      }

      // optional int32 singleCost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_singleCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &singlecost_)));
          set_has_singlecost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_allCost;
        break;
      }

      // optional int32 allCost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allcost_)));
          set_has_allcost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalbigyanhuacost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->times(), output);
  }

  // optional int32 singleCost = 2;
  if (has_singlecost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->singlecost(), output);
  }

  // optional int32 allCost = 3;
  if (has_allcost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->allcost(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalbigyanhuacost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->times(), target);
  }

  // optional int32 singleCost = 2;
  if (has_singlecost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->singlecost(), target);
  }

  // optional int32 allCost = 3;
  if (has_allcost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->allcost(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalbigyanhuacost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional int32 singleCost = 2;
    if (has_singlecost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->singlecost());
    }

    // optional int32 allCost = 3;
    if (has_allcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allcost());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalbigyanhuacost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalbigyanhuacost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalbigyanhuacost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalbigyanhuacost::MergeFrom(const festivalbigyanhuacost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_singlecost()) {
      set_singlecost(from.singlecost());
    }
    if (from.has_allcost()) {
      set_allcost(from.allcost());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalbigyanhuacost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalbigyanhuacost::CopyFrom(const festivalbigyanhuacost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalbigyanhuacost::IsInitialized() const {

  return true;
}

void festivalbigyanhuacost::Swap(festivalbigyanhuacost* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(singlecost_, other->singlecost_);
    std::swap(allcost_, other->allcost_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalbigyanhuacost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalbigyanhuacost_descriptor_;
  metadata.reflection = festivalbigyanhuacost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalbigyanhuacost::kFestivalbigyanhuacostListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalbigyanhuacost::Sheet_festivalbigyanhuacost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalbigyanhuacost::InitAsDefaultInstance() {
}

Sheet_festivalbigyanhuacost::Sheet_festivalbigyanhuacost(const Sheet_festivalbigyanhuacost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalbigyanhuacost::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalbigyanhuacost::~Sheet_festivalbigyanhuacost() {
  SharedDtor();
}

void Sheet_festivalbigyanhuacost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalbigyanhuacost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalbigyanhuacost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalbigyanhuacost_descriptor_;
}

const Sheet_festivalbigyanhuacost& Sheet_festivalbigyanhuacost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalbigyanhuacost* Sheet_festivalbigyanhuacost::default_instance_ = NULL;

Sheet_festivalbigyanhuacost* Sheet_festivalbigyanhuacost::New() const {
  return new Sheet_festivalbigyanhuacost;
}

void Sheet_festivalbigyanhuacost::Clear() {
  festivalbigyanhuacost_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalbigyanhuacost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalbigyanhuacost festivalbigyanhuacost_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalbigyanhuacost_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalbigyanhuacost_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalbigyanhuacost_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalbigyanhuacost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalbigyanhuacost festivalbigyanhuacost_List = 1;
  for (int i = 0; i < this->festivalbigyanhuacost_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalbigyanhuacost_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalbigyanhuacost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalbigyanhuacost festivalbigyanhuacost_List = 1;
  for (int i = 0; i < this->festivalbigyanhuacost_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalbigyanhuacost_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalbigyanhuacost::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalbigyanhuacost festivalbigyanhuacost_List = 1;
  total_size += 1 * this->festivalbigyanhuacost_list_size();
  for (int i = 0; i < this->festivalbigyanhuacost_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalbigyanhuacost_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalbigyanhuacost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalbigyanhuacost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalbigyanhuacost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalbigyanhuacost::MergeFrom(const Sheet_festivalbigyanhuacost& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalbigyanhuacost_list_.MergeFrom(from.festivalbigyanhuacost_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalbigyanhuacost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalbigyanhuacost::CopyFrom(const Sheet_festivalbigyanhuacost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalbigyanhuacost::IsInitialized() const {

  return true;
}

void Sheet_festivalbigyanhuacost::Swap(Sheet_festivalbigyanhuacost* other) {
  if (other != this) {
    festivalbigyanhuacost_list_.Swap(&other->festivalbigyanhuacost_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalbigyanhuacost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalbigyanhuacost_descriptor_;
  metadata.reflection = Sheet_festivalbigyanhuacost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_bigyanhua::kIdFieldNumber;
const int festivalmuban_bigyanhua::kItemidFieldNumber;
const int festivalmuban_bigyanhua::kNumFieldNumber;
const int festivalmuban_bigyanhua::kProfFieldNumber;
const int festivalmuban_bigyanhua::kTypeFieldNumber;
const int festivalmuban_bigyanhua::kOrderFieldNumber;
const int festivalmuban_bigyanhua::kProbabilityFieldNumber;
const int festivalmuban_bigyanhua::kRelationFieldNumber;
const int festivalmuban_bigyanhua::kModelidFieldNumber;
const int festivalmuban_bigyanhua::kModeltypeFieldNumber;
const int festivalmuban_bigyanhua::kScaleFieldNumber;
#endif  // !_MSC_VER

festivalmuban_bigyanhua::festivalmuban_bigyanhua()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_bigyanhua::InitAsDefaultInstance() {
}

festivalmuban_bigyanhua::festivalmuban_bigyanhua(const festivalmuban_bigyanhua& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_bigyanhua::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  prof_ = 0;
  type_ = 0;
  order_ = 0;
  probability_ = 0;
  relation_ = GOOGLE_LONGLONG(0);
  modelid_ = GOOGLE_LONGLONG(0);
  modeltype_ = 0;
  scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_bigyanhua::~festivalmuban_bigyanhua() {
  SharedDtor();
}

void festivalmuban_bigyanhua::SharedDtor() {
  if (scale_ != &::google::protobuf::internal::kEmptyString) {
    delete scale_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_bigyanhua::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_bigyanhua::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_bigyanhua_descriptor_;
}

const festivalmuban_bigyanhua& festivalmuban_bigyanhua::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_bigyanhua* festivalmuban_bigyanhua::default_instance_ = NULL;

festivalmuban_bigyanhua* festivalmuban_bigyanhua::New() const {
  return new festivalmuban_bigyanhua;
}

void festivalmuban_bigyanhua::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    prof_ = 0;
    type_ = 0;
    order_ = 0;
    probability_ = 0;
    relation_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    modelid_ = GOOGLE_LONGLONG(0);
    modeltype_ = 0;
    if (has_scale()) {
      if (scale_ != &::google::protobuf::internal::kEmptyString) {
        scale_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_bigyanhua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order;
        break;
      }

      // optional int32 order = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_probability;
        break;
      }

      // optional int32 probability = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_relation;
        break;
      }

      // optional int64 relation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_modelid;
        break;
      }

      // optional int64 modelid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_modeltype;
        break;
      }

      // optional int32 modeltype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeltype_)));
          set_has_modeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_scale;
        break;
      }

      // optional string scale = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scale().data(), this->scale().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_bigyanhua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 order = 6;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->order(), output);
  }

  // optional int32 probability = 7;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->probability(), output);
  }

  // optional int64 relation = 8;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->relation(), output);
  }

  // optional int64 modelid = 9;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->modelid(), output);
  }

  // optional int32 modeltype = 10;
  if (has_modeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->modeltype(), output);
  }

  // optional string scale = 11;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_bigyanhua::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 order = 6;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->order(), target);
  }

  // optional int32 probability = 7;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->probability(), target);
  }

  // optional int64 relation = 8;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->relation(), target);
  }

  // optional int64 modelid = 9;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->modelid(), target);
  }

  // optional int32 modeltype = 10;
  if (has_modeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->modeltype(), target);
  }

  // optional string scale = 11;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_bigyanhua::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 order = 6;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 probability = 7;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

    // optional int64 relation = 8;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 modelid = 9;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->modelid());
    }

    // optional int32 modeltype = 10;
    if (has_modeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeltype());
    }

    // optional string scale = 11;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_bigyanhua::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_bigyanhua* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_bigyanhua*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_bigyanhua::MergeFrom(const festivalmuban_bigyanhua& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_modeltype()) {
      set_modeltype(from.modeltype());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_bigyanhua::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_bigyanhua::CopyFrom(const festivalmuban_bigyanhua& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_bigyanhua::IsInitialized() const {

  return true;
}

void festivalmuban_bigyanhua::Swap(festivalmuban_bigyanhua* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(prof_, other->prof_);
    std::swap(type_, other->type_);
    std::swap(order_, other->order_);
    std::swap(probability_, other->probability_);
    std::swap(relation_, other->relation_);
    std::swap(modelid_, other->modelid_);
    std::swap(modeltype_, other->modeltype_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_bigyanhua::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_bigyanhua_descriptor_;
  metadata.reflection = festivalmuban_bigyanhua_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_bigyanhua::kFestivalmubanBigyanhuaListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_bigyanhua::Sheet_festivalmuban_bigyanhua()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_bigyanhua::InitAsDefaultInstance() {
}

Sheet_festivalmuban_bigyanhua::Sheet_festivalmuban_bigyanhua(const Sheet_festivalmuban_bigyanhua& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_bigyanhua::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_bigyanhua::~Sheet_festivalmuban_bigyanhua() {
  SharedDtor();
}

void Sheet_festivalmuban_bigyanhua::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_bigyanhua::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_bigyanhua::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_bigyanhua_descriptor_;
}

const Sheet_festivalmuban_bigyanhua& Sheet_festivalmuban_bigyanhua::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_bigyanhua* Sheet_festivalmuban_bigyanhua::default_instance_ = NULL;

Sheet_festivalmuban_bigyanhua* Sheet_festivalmuban_bigyanhua::New() const {
  return new Sheet_festivalmuban_bigyanhua;
}

void Sheet_festivalmuban_bigyanhua::Clear() {
  festivalmuban_bigyanhua_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_bigyanhua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_bigyanhua festivalmuban_bigyanhua_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_bigyanhua_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_bigyanhua_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_bigyanhua_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_bigyanhua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_bigyanhua festivalmuban_bigyanhua_List = 1;
  for (int i = 0; i < this->festivalmuban_bigyanhua_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_bigyanhua_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_bigyanhua::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_bigyanhua festivalmuban_bigyanhua_List = 1;
  for (int i = 0; i < this->festivalmuban_bigyanhua_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_bigyanhua_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_bigyanhua::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_bigyanhua festivalmuban_bigyanhua_List = 1;
  total_size += 1 * this->festivalmuban_bigyanhua_list_size();
  for (int i = 0; i < this->festivalmuban_bigyanhua_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_bigyanhua_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_bigyanhua::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_bigyanhua* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_bigyanhua*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_bigyanhua::MergeFrom(const Sheet_festivalmuban_bigyanhua& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_bigyanhua_list_.MergeFrom(from.festivalmuban_bigyanhua_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_bigyanhua::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_bigyanhua::CopyFrom(const Sheet_festivalmuban_bigyanhua& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_bigyanhua::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_bigyanhua::Swap(Sheet_festivalmuban_bigyanhua* other) {
  if (other != this) {
    festivalmuban_bigyanhua_list_.Swap(&other->festivalmuban_bigyanhua_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_bigyanhua::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_bigyanhua_descriptor_;
  metadata.reflection = Sheet_festivalmuban_bigyanhua_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalfestival::kIdFieldNumber;
const int festivalfestival::kHuoDongTypeFieldNumber;
const int festivalfestival::kNameIdFieldNumber;
const int festivalfestival::kNameFieldNumber;
const int festivalfestival::kServertypeFieldNumber;
const int festivalfestival::kTimeAFieldNumber;
const int festivalfestival::kTimeBFieldNumber;
const int festivalfestival::kTimeTypeFieldNumber;
const int festivalfestival::kLevelFieldNumber;
const int festivalfestival::kVipLevelFieldNumber;
const int festivalfestival::kRechangeFieldNumber;
const int festivalfestival::kIfOpenFieldNumber;
const int festivalfestival::kListFieldNumber;
const int festivalfestival::kIconFieldNumber;
const int festivalfestival::kLoginPopPriorityFieldNumber;
const int festivalfestival::kBelongFieldNumber;
#endif  // !_MSC_VER

festivalfestival::festivalfestival()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalfestival::InitAsDefaultInstance() {
}

festivalfestival::festivalfestival(const festivalfestival& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalfestival::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  huodongtype_ = 0;
  nameid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  servertype_ = 0;
  timea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timetype_ = 0;
  level_ = 0;
  viplevel_ = 0;
  rechange_ = 0;
  ifopen_ = 0;
  list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginpoppriority_ = 0;
  belong_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalfestival::~festivalfestival() {
  SharedDtor();
}

void festivalfestival::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (timea_ != &::google::protobuf::internal::kEmptyString) {
    delete timea_;
  }
  if (timeb_ != &::google::protobuf::internal::kEmptyString) {
    delete timeb_;
  }
  if (list_ != &::google::protobuf::internal::kEmptyString) {
    delete list_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void festivalfestival::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalfestival::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalfestival_descriptor_;
}

const festivalfestival& festivalfestival::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalfestival* festivalfestival::default_instance_ = NULL;

festivalfestival* festivalfestival::New() const {
  return new festivalfestival;
}

void festivalfestival::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    huodongtype_ = 0;
    nameid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    servertype_ = 0;
    if (has_timea()) {
      if (timea_ != &::google::protobuf::internal::kEmptyString) {
        timea_->clear();
      }
    }
    if (has_timeb()) {
      if (timeb_ != &::google::protobuf::internal::kEmptyString) {
        timeb_->clear();
      }
    }
    timetype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    viplevel_ = 0;
    rechange_ = 0;
    ifopen_ = 0;
    if (has_list()) {
      if (list_ != &::google::protobuf::internal::kEmptyString) {
        list_->clear();
      }
    }
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    loginpoppriority_ = 0;
    belong_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalfestival::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_huoDongType;
        break;
      }

      // optional int32 huoDongType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_huoDongType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &huodongtype_)));
          set_has_huodongtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nameId;
        break;
      }

      // optional int32 nameId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nameid_)));
          set_has_nameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_servertype;
        break;
      }

      // optional int32 servertype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_servertype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &servertype_)));
          set_has_servertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_timeA;
        break;
      }

      // optional string timeA = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timea()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timea().data(), this->timea().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_timeB;
        break;
      }

      // optional string timeB = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timeb().data(), this->timeb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_timeType;
        break;
      }

      // optional int32 timeType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timetype_)));
          set_has_timetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_Level;
        break;
      }

      // optional int32 Level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rechange;
        break;
      }

      // optional int32 rechange = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechange_)));
          set_has_rechange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ifOpen;
        break;
      }

      // optional int32 ifOpen = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ifOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifopen_)));
          set_has_ifopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_list;
        break;
      }

      // optional string list = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->list().data(), this->list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_icon;
        break;
      }

      // optional string icon = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_loginPopPriority;
        break;
      }

      // optional int32 loginPopPriority = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginPopPriority:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginpoppriority_)));
          set_has_loginpoppriority();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_belong;
        break;
      }

      // optional int32 belong = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_belong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &belong_)));
          set_has_belong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalfestival::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 huoDongType = 2;
  if (has_huodongtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->huodongtype(), output);
  }

  // optional int32 nameId = 3;
  if (has_nameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nameid(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 servertype = 5;
  if (has_servertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->servertype(), output);
  }

  // optional string timeA = 6;
  if (has_timea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timea().data(), this->timea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->timea(), output);
  }

  // optional string timeB = 7;
  if (has_timeb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeb().data(), this->timeb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->timeb(), output);
  }

  // optional int32 timeType = 8;
  if (has_timetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->timetype(), output);
  }

  // optional int32 Level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional int32 vipLevel = 10;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->viplevel(), output);
  }

  // optional int32 rechange = 11;
  if (has_rechange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rechange(), output);
  }

  // optional int32 ifOpen = 12;
  if (has_ifopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ifopen(), output);
  }

  // optional string list = 13;
  if (has_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->list().data(), this->list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->list(), output);
  }

  // optional string icon = 14;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->icon(), output);
  }

  // optional int32 loginPopPriority = 15;
  if (has_loginpoppriority()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->loginpoppriority(), output);
  }

  // optional int32 belong = 16;
  if (has_belong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->belong(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalfestival::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 huoDongType = 2;
  if (has_huodongtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->huodongtype(), target);
  }

  // optional int32 nameId = 3;
  if (has_nameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nameid(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 servertype = 5;
  if (has_servertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->servertype(), target);
  }

  // optional string timeA = 6;
  if (has_timea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timea().data(), this->timea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->timea(), target);
  }

  // optional string timeB = 7;
  if (has_timeb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeb().data(), this->timeb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->timeb(), target);
  }

  // optional int32 timeType = 8;
  if (has_timetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->timetype(), target);
  }

  // optional int32 Level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional int32 vipLevel = 10;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->viplevel(), target);
  }

  // optional int32 rechange = 11;
  if (has_rechange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rechange(), target);
  }

  // optional int32 ifOpen = 12;
  if (has_ifopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ifopen(), target);
  }

  // optional string list = 13;
  if (has_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->list().data(), this->list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->list(), target);
  }

  // optional string icon = 14;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->icon(), target);
  }

  // optional int32 loginPopPriority = 15;
  if (has_loginpoppriority()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->loginpoppriority(), target);
  }

  // optional int32 belong = 16;
  if (has_belong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->belong(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalfestival::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 huoDongType = 2;
    if (has_huodongtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->huodongtype());
    }

    // optional int32 nameId = 3;
    if (has_nameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nameid());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 servertype = 5;
    if (has_servertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->servertype());
    }

    // optional string timeA = 6;
    if (has_timea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timea());
    }

    // optional string timeB = 7;
    if (has_timeb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeb());
    }

    // optional int32 timeType = 8;
    if (has_timetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timetype());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 Level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 vipLevel = 10;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 rechange = 11;
    if (has_rechange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechange());
    }

    // optional int32 ifOpen = 12;
    if (has_ifopen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifopen());
    }

    // optional string list = 13;
    if (has_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list());
    }

    // optional string icon = 14;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 loginPopPriority = 15;
    if (has_loginpoppriority()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginpoppriority());
    }

    // optional int32 belong = 16;
    if (has_belong()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->belong());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalfestival::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalfestival* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalfestival*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalfestival::MergeFrom(const festivalfestival& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_huodongtype()) {
      set_huodongtype(from.huodongtype());
    }
    if (from.has_nameid()) {
      set_nameid(from.nameid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_servertype()) {
      set_servertype(from.servertype());
    }
    if (from.has_timea()) {
      set_timea(from.timea());
    }
    if (from.has_timeb()) {
      set_timeb(from.timeb());
    }
    if (from.has_timetype()) {
      set_timetype(from.timetype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_rechange()) {
      set_rechange(from.rechange());
    }
    if (from.has_ifopen()) {
      set_ifopen(from.ifopen());
    }
    if (from.has_list()) {
      set_list(from.list());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_loginpoppriority()) {
      set_loginpoppriority(from.loginpoppriority());
    }
    if (from.has_belong()) {
      set_belong(from.belong());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalfestival::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalfestival::CopyFrom(const festivalfestival& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalfestival::IsInitialized() const {

  return true;
}

void festivalfestival::Swap(festivalfestival* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(huodongtype_, other->huodongtype_);
    std::swap(nameid_, other->nameid_);
    std::swap(name_, other->name_);
    std::swap(servertype_, other->servertype_);
    std::swap(timea_, other->timea_);
    std::swap(timeb_, other->timeb_);
    std::swap(timetype_, other->timetype_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(rechange_, other->rechange_);
    std::swap(ifopen_, other->ifopen_);
    std::swap(list_, other->list_);
    std::swap(icon_, other->icon_);
    std::swap(loginpoppriority_, other->loginpoppriority_);
    std::swap(belong_, other->belong_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalfestival::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalfestival_descriptor_;
  metadata.reflection = festivalfestival_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalfestival::kFestivalfestivalListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalfestival::Sheet_festivalfestival()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalfestival::InitAsDefaultInstance() {
}

Sheet_festivalfestival::Sheet_festivalfestival(const Sheet_festivalfestival& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalfestival::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalfestival::~Sheet_festivalfestival() {
  SharedDtor();
}

void Sheet_festivalfestival::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalfestival::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalfestival::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalfestival_descriptor_;
}

const Sheet_festivalfestival& Sheet_festivalfestival::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalfestival* Sheet_festivalfestival::default_instance_ = NULL;

Sheet_festivalfestival* Sheet_festivalfestival::New() const {
  return new Sheet_festivalfestival;
}

void Sheet_festivalfestival::Clear() {
  festivalfestival_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalfestival::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalfestival festivalfestival_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalfestival_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalfestival_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalfestival_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalfestival::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalfestival festivalfestival_List = 1;
  for (int i = 0; i < this->festivalfestival_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalfestival_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalfestival::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalfestival festivalfestival_List = 1;
  for (int i = 0; i < this->festivalfestival_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalfestival_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalfestival::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalfestival festivalfestival_List = 1;
  total_size += 1 * this->festivalfestival_list_size();
  for (int i = 0; i < this->festivalfestival_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalfestival_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalfestival::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalfestival* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalfestival*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalfestival::MergeFrom(const Sheet_festivalfestival& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalfestival_list_.MergeFrom(from.festivalfestival_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalfestival::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalfestival::CopyFrom(const Sheet_festivalfestival& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalfestival::IsInitialized() const {

  return true;
}

void Sheet_festivalfestival::Swap(Sheet_festivalfestival* other) {
  if (other != this) {
    festivalfestival_list_.Swap(&other->festivalfestival_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalfestival::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalfestival_descriptor_;
  metadata.reflection = Sheet_festivalfestival_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivaltemplate::kIdFieldNumber;
const int festivaltemplate::kMuBanFieldNumber;
const int festivaltemplate::kOrderFieldNumber;
const int festivaltemplate::kListFieldNumber;
const int festivaltemplate::kNameIdFieldNumber;
const int festivaltemplate::kNameFieldNumber;
const int festivaltemplate::kTypeFieldNumber;
const int festivaltemplate::kTimeAFieldNumber;
const int festivaltemplate::kTimeBFieldNumber;
const int festivaltemplate::kTimeTypeFieldNumber;
const int festivaltemplate::kLevelFieldNumber;
const int festivaltemplate::kVipLevelFieldNumber;
const int festivaltemplate::kRechangeFieldNumber;
const int festivaltemplate::kRemarkIdFieldNumber;
const int festivaltemplate::kMiaoShuFieldNumber;
const int festivaltemplate::kJiangLiFieldNumber;
const int festivaltemplate::kBeiJingFieldNumber;
const int festivaltemplate::kTitleFieldNumber;
const int festivaltemplate::kDescFieldNumber;
#endif  // !_MSC_VER

festivaltemplate::festivaltemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivaltemplate::InitAsDefaultInstance() {
}

festivaltemplate::festivaltemplate(const festivaltemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivaltemplate::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  muban_ = 0;
  order_ = 0;
  list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nameid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timea_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timeb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timetype_ = 0;
  level_ = 0;
  viplevel_ = 0;
  rechange_ = 0;
  remarkid_ = 0;
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jiangli_ = GOOGLE_LONGLONG(0);
  beijing_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivaltemplate::~festivaltemplate() {
  SharedDtor();
}

void festivaltemplate::SharedDtor() {
  if (list_ != &::google::protobuf::internal::kEmptyString) {
    delete list_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (timea_ != &::google::protobuf::internal::kEmptyString) {
    delete timea_;
  }
  if (timeb_ != &::google::protobuf::internal::kEmptyString) {
    delete timeb_;
  }
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (beijing_ != &::google::protobuf::internal::kEmptyString) {
    delete beijing_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void festivaltemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivaltemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivaltemplate_descriptor_;
}

const festivaltemplate& festivaltemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivaltemplate* festivaltemplate::default_instance_ = NULL;

festivaltemplate* festivaltemplate::New() const {
  return new festivaltemplate;
}

void festivaltemplate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    muban_ = 0;
    order_ = 0;
    if (has_list()) {
      if (list_ != &::google::protobuf::internal::kEmptyString) {
        list_->clear();
      }
    }
    nameid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_timea()) {
      if (timea_ != &::google::protobuf::internal::kEmptyString) {
        timea_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_timeb()) {
      if (timeb_ != &::google::protobuf::internal::kEmptyString) {
        timeb_->clear();
      }
    }
    timetype_ = 0;
    level_ = 0;
    viplevel_ = 0;
    rechange_ = 0;
    remarkid_ = 0;
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    jiangli_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_beijing()) {
      if (beijing_ != &::google::protobuf::internal::kEmptyString) {
        beijing_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivaltemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_muBan;
        break;
      }

      // optional int32 muBan = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_muBan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &muban_)));
          set_has_muban();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_order;
        break;
      }

      // optional int32 order = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_list;
        break;
      }

      // optional string list = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_list()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->list().data(), this->list().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_nameId;
        break;
      }

      // optional int32 nameId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nameId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nameid_)));
          set_has_nameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_Name;
        break;
      }

      // optional string Name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_type;
        break;
      }

      // optional string type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_timeA;
        break;
      }

      // optional string timeA = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timea()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timea().data(), this->timea().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_timeB;
        break;
      }

      // optional string timeB = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timeB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timeb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timeb().data(), this->timeb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_timeType;
        break;
      }

      // optional int32 timeType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timetype_)));
          set_has_timetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_level;
        break;
      }

      // optional int32 level = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_rechange;
        break;
      }

      // optional int32 rechange = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechange_)));
          set_has_rechange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_remarkId;
        break;
      }

      // optional int32 remarkId = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remarkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remarkid_)));
          set_has_remarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_MiaoShu;
        break;
      }

      // optional string MiaoShu = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MiaoShu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_beiJing;
        break;
      }

      // optional string beiJing = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beiJing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beijing()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beijing().data(), this->beijing().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_title;
        break;
      }

      // optional string title = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_desc;
        break;
      }

      // optional string desc = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivaltemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 muBan = 2;
  if (has_muban()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->muban(), output);
  }

  // optional int32 order = 3;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->order(), output);
  }

  // optional string list = 4;
  if (has_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->list().data(), this->list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->list(), output);
  }

  // optional int32 nameId = 5;
  if (has_nameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nameid(), output);
  }

  // optional string Name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->type(), output);
  }

  // optional string timeA = 8;
  if (has_timea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timea().data(), this->timea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->timea(), output);
  }

  // optional string timeB = 9;
  if (has_timeb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeb().data(), this->timeb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->timeb(), output);
  }

  // optional int32 timeType = 10;
  if (has_timetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->timetype(), output);
  }

  // optional int32 level = 11;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->level(), output);
  }

  // optional int32 vipLevel = 12;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->viplevel(), output);
  }

  // optional int32 rechange = 13;
  if (has_rechange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->rechange(), output);
  }

  // optional int32 remarkId = 14;
  if (has_remarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->remarkid(), output);
  }

  // optional string MiaoShu = 15;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->miaoshu(), output);
  }

  // optional int64 jiangLi = 16;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->jiangli(), output);
  }

  // optional string beiJing = 17;
  if (has_beijing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beijing().data(), this->beijing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->beijing(), output);
  }

  // optional string title = 18;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->title(), output);
  }

  // optional string desc = 19;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivaltemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 muBan = 2;
  if (has_muban()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->muban(), target);
  }

  // optional int32 order = 3;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->order(), target);
  }

  // optional string list = 4;
  if (has_list()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->list().data(), this->list().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->list(), target);
  }

  // optional int32 nameId = 5;
  if (has_nameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nameid(), target);
  }

  // optional string Name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // optional string type = 7;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->type(), target);
  }

  // optional string timeA = 8;
  if (has_timea()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timea().data(), this->timea().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->timea(), target);
  }

  // optional string timeB = 9;
  if (has_timeb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timeb().data(), this->timeb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->timeb(), target);
  }

  // optional int32 timeType = 10;
  if (has_timetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->timetype(), target);
  }

  // optional int32 level = 11;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->level(), target);
  }

  // optional int32 vipLevel = 12;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->viplevel(), target);
  }

  // optional int32 rechange = 13;
  if (has_rechange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->rechange(), target);
  }

  // optional int32 remarkId = 14;
  if (has_remarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->remarkid(), target);
  }

  // optional string MiaoShu = 15;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->miaoshu(), target);
  }

  // optional int64 jiangLi = 16;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->jiangli(), target);
  }

  // optional string beiJing = 17;
  if (has_beijing()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beijing().data(), this->beijing().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->beijing(), target);
  }

  // optional string title = 18;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->title(), target);
  }

  // optional string desc = 19;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivaltemplate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 muBan = 2;
    if (has_muban()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->muban());
    }

    // optional int32 order = 3;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional string list = 4;
    if (has_list()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->list());
    }

    // optional int32 nameId = 5;
    if (has_nameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nameid());
    }

    // optional string Name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 7;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional string timeA = 8;
    if (has_timea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timea());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string timeB = 9;
    if (has_timeb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timeb());
    }

    // optional int32 timeType = 10;
    if (has_timetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timetype());
    }

    // optional int32 level = 11;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 vipLevel = 12;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 rechange = 13;
    if (has_rechange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechange());
    }

    // optional int32 remarkId = 14;
    if (has_remarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remarkid());
    }

    // optional string MiaoShu = 15;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 jiangLi = 16;
    if (has_jiangli()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string beiJing = 17;
    if (has_beijing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beijing());
    }

    // optional string title = 18;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string desc = 19;
    if (has_desc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivaltemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivaltemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivaltemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivaltemplate::MergeFrom(const festivaltemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_muban()) {
      set_muban(from.muban());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_list()) {
      set_list(from.list());
    }
    if (from.has_nameid()) {
      set_nameid(from.nameid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_timea()) {
      set_timea(from.timea());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timeb()) {
      set_timeb(from.timeb());
    }
    if (from.has_timetype()) {
      set_timetype(from.timetype());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_rechange()) {
      set_rechange(from.rechange());
    }
    if (from.has_remarkid()) {
      set_remarkid(from.remarkid());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_beijing()) {
      set_beijing(from.beijing());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivaltemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivaltemplate::CopyFrom(const festivaltemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivaltemplate::IsInitialized() const {

  return true;
}

void festivaltemplate::Swap(festivaltemplate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(muban_, other->muban_);
    std::swap(order_, other->order_);
    std::swap(list_, other->list_);
    std::swap(nameid_, other->nameid_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(timea_, other->timea_);
    std::swap(timeb_, other->timeb_);
    std::swap(timetype_, other->timetype_);
    std::swap(level_, other->level_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(rechange_, other->rechange_);
    std::swap(remarkid_, other->remarkid_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(beijing_, other->beijing_);
    std::swap(title_, other->title_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivaltemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivaltemplate_descriptor_;
  metadata.reflection = festivaltemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivaltemplate::kFestivaltemplateListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivaltemplate::Sheet_festivaltemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivaltemplate::InitAsDefaultInstance() {
}

Sheet_festivaltemplate::Sheet_festivaltemplate(const Sheet_festivaltemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivaltemplate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivaltemplate::~Sheet_festivaltemplate() {
  SharedDtor();
}

void Sheet_festivaltemplate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivaltemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivaltemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivaltemplate_descriptor_;
}

const Sheet_festivaltemplate& Sheet_festivaltemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivaltemplate* Sheet_festivaltemplate::default_instance_ = NULL;

Sheet_festivaltemplate* Sheet_festivaltemplate::New() const {
  return new Sheet_festivaltemplate;
}

void Sheet_festivaltemplate::Clear() {
  festivaltemplate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivaltemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivaltemplate festivaltemplate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivaltemplate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivaltemplate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivaltemplate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivaltemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivaltemplate festivaltemplate_List = 1;
  for (int i = 0; i < this->festivaltemplate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivaltemplate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivaltemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivaltemplate festivaltemplate_List = 1;
  for (int i = 0; i < this->festivaltemplate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivaltemplate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivaltemplate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivaltemplate festivaltemplate_List = 1;
  total_size += 1 * this->festivaltemplate_list_size();
  for (int i = 0; i < this->festivaltemplate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivaltemplate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivaltemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivaltemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivaltemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivaltemplate::MergeFrom(const Sheet_festivaltemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivaltemplate_list_.MergeFrom(from.festivaltemplate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivaltemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivaltemplate::CopyFrom(const Sheet_festivaltemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivaltemplate::IsInitialized() const {

  return true;
}

void Sheet_festivaltemplate::Swap(Sheet_festivaltemplate* other) {
  if (other != this) {
    festivaltemplate_list_.Swap(&other->festivaltemplate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivaltemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivaltemplate_descriptor_;
  metadata.reflection = Sheet_festivaltemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_worldboss::kIdFieldNumber;
const int festivalmuban_worldboss::kBossidFieldNumber;
const int festivalmuban_worldboss::kSortFieldNumber;
const int festivalmuban_worldboss::kConditionTypeFieldNumber;
const int festivalmuban_worldboss::kConditionFieldNumber;
const int festivalmuban_worldboss::kDesFieldNumber;
const int festivalmuban_worldboss::kBoxIdFieldNumber;
#endif  // !_MSC_VER

festivalmuban_worldboss::festivalmuban_worldboss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_worldboss::InitAsDefaultInstance() {
}

festivalmuban_worldboss::festivalmuban_worldboss(const festivalmuban_worldboss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_worldboss::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  bossid_ = 0;
  sort_ = 0;
  conditiontype_ = 0;
  condition_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_worldboss::~festivalmuban_worldboss() {
  SharedDtor();
}

void festivalmuban_worldboss::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_worldboss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_worldboss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_worldboss_descriptor_;
}

const festivalmuban_worldboss& festivalmuban_worldboss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_worldboss* festivalmuban_worldboss::default_instance_ = NULL;

festivalmuban_worldboss* festivalmuban_worldboss::New() const {
  return new festivalmuban_worldboss;
}

void festivalmuban_worldboss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    bossid_ = 0;
    sort_ = 0;
    conditiontype_ = 0;
    condition_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    boxid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_worldboss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossid;
        break;
      }

      // optional int32 bossid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sort;
        break;
      }

      // optional int32 sort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_conditionType;
        break;
      }

      // optional int32 conditionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conditionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conditiontype_)));
          set_has_conditiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_condition;
        break;
      }

      // optional int32 condition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &condition_)));
          set_has_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_des;
        break;
      }

      // optional string des = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_boxId;
        break;
      }

      // optional int64 boxId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_worldboss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 bossid = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->bossid(), output);
  }

  // optional int32 sort = 3;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sort(), output);
  }

  // optional int32 conditionType = 4;
  if (has_conditiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->conditiontype(), output);
  }

  // optional int32 condition = 5;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->condition(), output);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->des(), output);
  }

  // optional int64 boxId = 7;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_worldboss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 bossid = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->bossid(), target);
  }

  // optional int32 sort = 3;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sort(), target);
  }

  // optional int32 conditionType = 4;
  if (has_conditiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->conditiontype(), target);
  }

  // optional int32 condition = 5;
  if (has_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->condition(), target);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->des(), target);
  }

  // optional int64 boxId = 7;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_worldboss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 bossid = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

    // optional int32 sort = 3;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }

    // optional int32 conditionType = 4;
    if (has_conditiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conditiontype());
    }

    // optional int32 condition = 5;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->condition());
    }

    // optional string des = 6;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

    // optional int64 boxId = 7;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_worldboss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_worldboss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_worldboss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_worldboss::MergeFrom(const festivalmuban_worldboss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_conditiontype()) {
      set_conditiontype(from.conditiontype());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_worldboss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_worldboss::CopyFrom(const festivalmuban_worldboss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_worldboss::IsInitialized() const {

  return true;
}

void festivalmuban_worldboss::Swap(festivalmuban_worldboss* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bossid_, other->bossid_);
    std::swap(sort_, other->sort_);
    std::swap(conditiontype_, other->conditiontype_);
    std::swap(condition_, other->condition_);
    std::swap(des_, other->des_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_worldboss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_worldboss_descriptor_;
  metadata.reflection = festivalmuban_worldboss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_worldboss::kFestivalmubanWorldbossListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_worldboss::Sheet_festivalmuban_worldboss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_worldboss::InitAsDefaultInstance() {
}

Sheet_festivalmuban_worldboss::Sheet_festivalmuban_worldboss(const Sheet_festivalmuban_worldboss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_worldboss::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_worldboss::~Sheet_festivalmuban_worldboss() {
  SharedDtor();
}

void Sheet_festivalmuban_worldboss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_worldboss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_worldboss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_worldboss_descriptor_;
}

const Sheet_festivalmuban_worldboss& Sheet_festivalmuban_worldboss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_worldboss* Sheet_festivalmuban_worldboss::default_instance_ = NULL;

Sheet_festivalmuban_worldboss* Sheet_festivalmuban_worldboss::New() const {
  return new Sheet_festivalmuban_worldboss;
}

void Sheet_festivalmuban_worldboss::Clear() {
  festivalmuban_worldboss_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_worldboss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_worldboss festivalmuban_worldboss_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_worldboss_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_worldboss_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_worldboss_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_worldboss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_worldboss festivalmuban_worldboss_List = 1;
  for (int i = 0; i < this->festivalmuban_worldboss_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_worldboss_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_worldboss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_worldboss festivalmuban_worldboss_List = 1;
  for (int i = 0; i < this->festivalmuban_worldboss_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_worldboss_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_worldboss::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_worldboss festivalmuban_worldboss_List = 1;
  total_size += 1 * this->festivalmuban_worldboss_list_size();
  for (int i = 0; i < this->festivalmuban_worldboss_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_worldboss_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_worldboss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_worldboss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_worldboss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_worldboss::MergeFrom(const Sheet_festivalmuban_worldboss& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_worldboss_list_.MergeFrom(from.festivalmuban_worldboss_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_worldboss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_worldboss::CopyFrom(const Sheet_festivalmuban_worldboss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_worldboss::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_worldboss::Swap(Sheet_festivalmuban_worldboss* other) {
  if (other != this) {
    festivalmuban_worldboss_list_.Swap(&other->festivalmuban_worldboss_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_worldboss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_worldboss_descriptor_;
  metadata.reflection = Sheet_festivalmuban_worldboss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_libao::kIdFieldNumber;
const int festivalmuban_libao::kBoxidFieldNumber;
const int festivalmuban_libao::kTermFieldNumber;
const int festivalmuban_libao::kLevelFieldNumber;
const int festivalmuban_libao::kCurrencyTypeFieldNumber;
const int festivalmuban_libao::kPriceFieldNumber;
const int festivalmuban_libao::kBackTypeFieldNumber;
const int festivalmuban_libao::kDayBackFieldNumber;
#endif  // !_MSC_VER

festivalmuban_libao::festivalmuban_libao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_libao::InitAsDefaultInstance() {
}

festivalmuban_libao::festivalmuban_libao(const festivalmuban_libao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_libao::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  term_ = 0;
  level_ = 0;
  currencytype_ = 0;
  price_ = 0;
  backtype_ = 0;
  dayback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_libao::~festivalmuban_libao() {
  SharedDtor();
}

void festivalmuban_libao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_libao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_libao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_libao_descriptor_;
}

const festivalmuban_libao& festivalmuban_libao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_libao* festivalmuban_libao::default_instance_ = NULL;

festivalmuban_libao* festivalmuban_libao::New() const {
  return new festivalmuban_libao;
}

void festivalmuban_libao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
    term_ = 0;
    level_ = 0;
    currencytype_ = 0;
    price_ = 0;
    backtype_ = 0;
    dayback_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_libao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_term;
        break;
      }

      // optional int32 term = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_term:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &term_)));
          set_has_term();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currencyType;
        break;
      }

      // optional int32 currencyType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currencyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currencytype_)));
          set_has_currencytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_price;
        break;
      }

      // optional int32 price = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_backType;
        break;
      }

      // optional int32 backType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backtype_)));
          set_has_backtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dayBack;
        break;
      }

      // optional int32 dayBack = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayBack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayback_)));
          set_has_dayback();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_libao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 boxid = 2;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->boxid(), output);
  }

  // optional int32 term = 3;
  if (has_term()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->term(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 currencyType = 5;
  if (has_currencytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currencytype(), output);
  }

  // optional int32 price = 6;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->price(), output);
  }

  // optional int32 backType = 7;
  if (has_backtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->backtype(), output);
  }

  // optional int32 dayBack = 8;
  if (has_dayback()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dayback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_libao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 boxid = 2;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->boxid(), target);
  }

  // optional int32 term = 3;
  if (has_term()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->term(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 currencyType = 5;
  if (has_currencytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currencytype(), target);
  }

  // optional int32 price = 6;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->price(), target);
  }

  // optional int32 backType = 7;
  if (has_backtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->backtype(), target);
  }

  // optional int32 dayBack = 8;
  if (has_dayback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dayback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_libao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 boxid = 2;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int32 term = 3;
    if (has_term()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->term());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 currencyType = 5;
    if (has_currencytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currencytype());
    }

    // optional int32 price = 6;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // optional int32 backType = 7;
    if (has_backtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backtype());
    }

    // optional int32 dayBack = 8;
    if (has_dayback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayback());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_libao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_libao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_libao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_libao::MergeFrom(const festivalmuban_libao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_term()) {
      set_term(from.term());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_currencytype()) {
      set_currencytype(from.currencytype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_backtype()) {
      set_backtype(from.backtype());
    }
    if (from.has_dayback()) {
      set_dayback(from.dayback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_libao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_libao::CopyFrom(const festivalmuban_libao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_libao::IsInitialized() const {

  return true;
}

void festivalmuban_libao::Swap(festivalmuban_libao* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(boxid_, other->boxid_);
    std::swap(term_, other->term_);
    std::swap(level_, other->level_);
    std::swap(currencytype_, other->currencytype_);
    std::swap(price_, other->price_);
    std::swap(backtype_, other->backtype_);
    std::swap(dayback_, other->dayback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_libao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_libao_descriptor_;
  metadata.reflection = festivalmuban_libao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_libao::kFestivalmubanLibaoListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_libao::Sheet_festivalmuban_libao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_libao::InitAsDefaultInstance() {
}

Sheet_festivalmuban_libao::Sheet_festivalmuban_libao(const Sheet_festivalmuban_libao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_libao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_libao::~Sheet_festivalmuban_libao() {
  SharedDtor();
}

void Sheet_festivalmuban_libao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_libao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_libao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_libao_descriptor_;
}

const Sheet_festivalmuban_libao& Sheet_festivalmuban_libao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_libao* Sheet_festivalmuban_libao::default_instance_ = NULL;

Sheet_festivalmuban_libao* Sheet_festivalmuban_libao::New() const {
  return new Sheet_festivalmuban_libao;
}

void Sheet_festivalmuban_libao::Clear() {
  festivalmuban_libao_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_libao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_libao festivalmuban_libao_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_libao_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_libao_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_libao_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_libao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_libao festivalmuban_libao_List = 1;
  for (int i = 0; i < this->festivalmuban_libao_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_libao_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_libao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_libao festivalmuban_libao_List = 1;
  for (int i = 0; i < this->festivalmuban_libao_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_libao_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_libao::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_libao festivalmuban_libao_List = 1;
  total_size += 1 * this->festivalmuban_libao_list_size();
  for (int i = 0; i < this->festivalmuban_libao_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_libao_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_libao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_libao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_libao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_libao::MergeFrom(const Sheet_festivalmuban_libao& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_libao_list_.MergeFrom(from.festivalmuban_libao_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_libao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_libao::CopyFrom(const Sheet_festivalmuban_libao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_libao::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_libao::Swap(Sheet_festivalmuban_libao* other) {
  if (other != this) {
    festivalmuban_libao_list_.Swap(&other->festivalmuban_libao_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_libao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_libao_descriptor_;
  metadata.reflection = Sheet_festivalmuban_libao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_double::kIdFieldNumber;
const int festivalmuban_double::kGearFieldNumber;
const int festivalmuban_double::kBoxIdFieldNumber;
#endif  // !_MSC_VER

festivalmuban_double::festivalmuban_double()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_double::InitAsDefaultInstance() {
}

festivalmuban_double::festivalmuban_double(const festivalmuban_double& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_double::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  gear_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_double::~festivalmuban_double() {
  SharedDtor();
}

void festivalmuban_double::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_double::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_double::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_double_descriptor_;
}

const festivalmuban_double& festivalmuban_double::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_double* festivalmuban_double::default_instance_ = NULL;

festivalmuban_double* festivalmuban_double::New() const {
  return new festivalmuban_double;
}

void festivalmuban_double::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    gear_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_double::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gear;
        break;
      }

      // optional int32 gear = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boxId;
        break;
      }

      // optional int64 boxId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_double::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gear(), output);
  }

  // optional int64 boxId = 3;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_double::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 gear = 2;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gear(), target);
  }

  // optional int64 boxId = 3;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_double::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 gear = 2;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

    // optional int64 boxId = 3;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_double::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_double* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_double*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_double::MergeFrom(const festivalmuban_double& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_double::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_double::CopyFrom(const festivalmuban_double& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_double::IsInitialized() const {

  return true;
}

void festivalmuban_double::Swap(festivalmuban_double* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(gear_, other->gear_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_double::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_double_descriptor_;
  metadata.reflection = festivalmuban_double_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_double::kFestivalmubanDoubleListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_double::Sheet_festivalmuban_double()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_double::InitAsDefaultInstance() {
}

Sheet_festivalmuban_double::Sheet_festivalmuban_double(const Sheet_festivalmuban_double& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_double::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_double::~Sheet_festivalmuban_double() {
  SharedDtor();
}

void Sheet_festivalmuban_double::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_double::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_double::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_double_descriptor_;
}

const Sheet_festivalmuban_double& Sheet_festivalmuban_double::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_double* Sheet_festivalmuban_double::default_instance_ = NULL;

Sheet_festivalmuban_double* Sheet_festivalmuban_double::New() const {
  return new Sheet_festivalmuban_double;
}

void Sheet_festivalmuban_double::Clear() {
  festivalmuban_double_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_double::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_double festivalmuban_double_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_double_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_double_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_double_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_double::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_double festivalmuban_double_List = 1;
  for (int i = 0; i < this->festivalmuban_double_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_double_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_double::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_double festivalmuban_double_List = 1;
  for (int i = 0; i < this->festivalmuban_double_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_double_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_double::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_double festivalmuban_double_List = 1;
  total_size += 1 * this->festivalmuban_double_list_size();
  for (int i = 0; i < this->festivalmuban_double_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_double_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_double::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_double* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_double*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_double::MergeFrom(const Sheet_festivalmuban_double& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_double_list_.MergeFrom(from.festivalmuban_double_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_double::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_double::CopyFrom(const Sheet_festivalmuban_double& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_double::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_double::Swap(Sheet_festivalmuban_double* other) {
  if (other != this) {
    festivalmuban_double_list_.Swap(&other->festivalmuban_double_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_double::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_double_descriptor_;
  metadata.reflection = Sheet_festivalmuban_double_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmiaoshu::kIdFieldNumber;
const int festivalmiaoshu::kWenziFieldNumber;
#endif  // !_MSC_VER

festivalmiaoshu::festivalmiaoshu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmiaoshu::InitAsDefaultInstance() {
}

festivalmiaoshu::festivalmiaoshu(const festivalmiaoshu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmiaoshu::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  wenzi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmiaoshu::~festivalmiaoshu() {
  SharedDtor();
}

void festivalmiaoshu::SharedDtor() {
  if (wenzi_ != &::google::protobuf::internal::kEmptyString) {
    delete wenzi_;
  }
  if (this != default_instance_) {
  }
}

void festivalmiaoshu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmiaoshu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmiaoshu_descriptor_;
}

const festivalmiaoshu& festivalmiaoshu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmiaoshu* festivalmiaoshu::default_instance_ = NULL;

festivalmiaoshu* festivalmiaoshu::New() const {
  return new festivalmiaoshu;
}

void festivalmiaoshu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_wenzi()) {
      if (wenzi_ != &::google::protobuf::internal::kEmptyString) {
        wenzi_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmiaoshu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wenzi;
        break;
      }

      // optional string wenzi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wenzi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wenzi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wenzi().data(), this->wenzi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmiaoshu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string wenzi = 2;
  if (has_wenzi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wenzi().data(), this->wenzi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->wenzi(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmiaoshu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string wenzi = 2;
  if (has_wenzi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wenzi().data(), this->wenzi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wenzi(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmiaoshu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string wenzi = 2;
    if (has_wenzi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wenzi());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmiaoshu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmiaoshu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmiaoshu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmiaoshu::MergeFrom(const festivalmiaoshu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_wenzi()) {
      set_wenzi(from.wenzi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmiaoshu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmiaoshu::CopyFrom(const festivalmiaoshu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmiaoshu::IsInitialized() const {

  return true;
}

void festivalmiaoshu::Swap(festivalmiaoshu* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(wenzi_, other->wenzi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmiaoshu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmiaoshu_descriptor_;
  metadata.reflection = festivalmiaoshu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmiaoshu::kFestivalmiaoshuListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmiaoshu::Sheet_festivalmiaoshu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmiaoshu::InitAsDefaultInstance() {
}

Sheet_festivalmiaoshu::Sheet_festivalmiaoshu(const Sheet_festivalmiaoshu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmiaoshu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmiaoshu::~Sheet_festivalmiaoshu() {
  SharedDtor();
}

void Sheet_festivalmiaoshu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmiaoshu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmiaoshu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmiaoshu_descriptor_;
}

const Sheet_festivalmiaoshu& Sheet_festivalmiaoshu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmiaoshu* Sheet_festivalmiaoshu::default_instance_ = NULL;

Sheet_festivalmiaoshu* Sheet_festivalmiaoshu::New() const {
  return new Sheet_festivalmiaoshu;
}

void Sheet_festivalmiaoshu::Clear() {
  festivalmiaoshu_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmiaoshu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmiaoshu festivalmiaoshu_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmiaoshu_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmiaoshu_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmiaoshu_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmiaoshu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmiaoshu festivalmiaoshu_List = 1;
  for (int i = 0; i < this->festivalmiaoshu_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmiaoshu_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmiaoshu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmiaoshu festivalmiaoshu_List = 1;
  for (int i = 0; i < this->festivalmiaoshu_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmiaoshu_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmiaoshu::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmiaoshu festivalmiaoshu_List = 1;
  total_size += 1 * this->festivalmiaoshu_list_size();
  for (int i = 0; i < this->festivalmiaoshu_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmiaoshu_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmiaoshu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmiaoshu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmiaoshu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmiaoshu::MergeFrom(const Sheet_festivalmiaoshu& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmiaoshu_list_.MergeFrom(from.festivalmiaoshu_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmiaoshu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmiaoshu::CopyFrom(const Sheet_festivalmiaoshu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmiaoshu::IsInitialized() const {

  return true;
}

void Sheet_festivalmiaoshu::Swap(Sheet_festivalmiaoshu* other) {
  if (other != this) {
    festivalmiaoshu_list_.Swap(&other->festivalmiaoshu_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmiaoshu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmiaoshu_descriptor_;
  metadata.reflection = Sheet_festivalmiaoshu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_denglu::kIdFieldNumber;
const int festivalmuban_denglu::kNumFieldNumber;
const int festivalmuban_denglu::kRemarkIdFieldNumber;
const int festivalmuban_denglu::kMiaoshuFieldNumber;
const int festivalmuban_denglu::kJiangLiFieldNumber;
#endif  // !_MSC_VER

festivalmuban_denglu::festivalmuban_denglu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_denglu::InitAsDefaultInstance() {
}

festivalmuban_denglu::festivalmuban_denglu(const festivalmuban_denglu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_denglu::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  remarkid_ = 0;
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jiangli_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_denglu::~festivalmuban_denglu() {
  SharedDtor();
}

void festivalmuban_denglu::SharedDtor() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_denglu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_denglu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_denglu_descriptor_;
}

const festivalmuban_denglu& festivalmuban_denglu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_denglu* festivalmuban_denglu::default_instance_ = NULL;

festivalmuban_denglu* festivalmuban_denglu::New() const {
  return new festivalmuban_denglu;
}

void festivalmuban_denglu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
    remarkid_ = 0;
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    jiangli_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_denglu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional int32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_remarkId;
        break;
      }

      // optional int32 remarkId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remarkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remarkid_)));
          set_has_remarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_denglu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 remarkId = 3;
  if (has_remarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->remarkid(), output);
  }

  // optional string miaoshu = 4;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->miaoshu(), output);
  }

  // optional int64 jiangLi = 5;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->jiangli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_denglu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 remarkId = 3;
  if (has_remarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->remarkid(), target);
  }

  // optional string miaoshu = 4;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->miaoshu(), target);
  }

  // optional int64 jiangLi = 5;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->jiangli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_denglu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 remarkId = 3;
    if (has_remarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remarkid());
    }

    // optional string miaoshu = 4;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 jiangLi = 5;
    if (has_jiangli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_denglu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_denglu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_denglu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_denglu::MergeFrom(const festivalmuban_denglu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_remarkid()) {
      set_remarkid(from.remarkid());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_denglu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_denglu::CopyFrom(const festivalmuban_denglu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_denglu::IsInitialized() const {

  return true;
}

void festivalmuban_denglu::Swap(festivalmuban_denglu* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(remarkid_, other->remarkid_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_denglu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_denglu_descriptor_;
  metadata.reflection = festivalmuban_denglu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_denglu::kFestivalmubanDengluListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_denglu::Sheet_festivalmuban_denglu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_denglu::InitAsDefaultInstance() {
}

Sheet_festivalmuban_denglu::Sheet_festivalmuban_denglu(const Sheet_festivalmuban_denglu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_denglu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_denglu::~Sheet_festivalmuban_denglu() {
  SharedDtor();
}

void Sheet_festivalmuban_denglu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_denglu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_denglu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_denglu_descriptor_;
}

const Sheet_festivalmuban_denglu& Sheet_festivalmuban_denglu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_denglu* Sheet_festivalmuban_denglu::default_instance_ = NULL;

Sheet_festivalmuban_denglu* Sheet_festivalmuban_denglu::New() const {
  return new Sheet_festivalmuban_denglu;
}

void Sheet_festivalmuban_denglu::Clear() {
  festivalmuban_denglu_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_denglu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_denglu festivalmuban_denglu_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_denglu_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_denglu_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_denglu_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_denglu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_denglu festivalmuban_denglu_List = 1;
  for (int i = 0; i < this->festivalmuban_denglu_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_denglu_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_denglu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_denglu festivalmuban_denglu_List = 1;
  for (int i = 0; i < this->festivalmuban_denglu_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_denglu_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_denglu::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_denglu festivalmuban_denglu_List = 1;
  total_size += 1 * this->festivalmuban_denglu_list_size();
  for (int i = 0; i < this->festivalmuban_denglu_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_denglu_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_denglu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_denglu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_denglu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_denglu::MergeFrom(const Sheet_festivalmuban_denglu& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_denglu_list_.MergeFrom(from.festivalmuban_denglu_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_denglu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_denglu::CopyFrom(const Sheet_festivalmuban_denglu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_denglu::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_denglu::Swap(Sheet_festivalmuban_denglu* other) {
  if (other != this) {
    festivalmuban_denglu_list_.Swap(&other->festivalmuban_denglu_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_denglu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_denglu_descriptor_;
  metadata.reflection = Sheet_festivalmuban_denglu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_touzi::kIdFieldNumber;
const int festivalmuban_touzi::kTypeFieldNumber;
const int festivalmuban_touzi::kNumFieldNumber;
const int festivalmuban_touzi::kAddNumFieldNumber;
const int festivalmuban_touzi::kRemarkIdFieldNumber;
const int festivalmuban_touzi::kMiaoshuFieldNumber;
const int festivalmuban_touzi::kJiangLiFieldNumber;
const int festivalmuban_touzi::kLinkIdFieldNumber;
#endif  // !_MSC_VER

festivalmuban_touzi::festivalmuban_touzi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_touzi::InitAsDefaultInstance() {
}

festivalmuban_touzi::festivalmuban_touzi(const festivalmuban_touzi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_touzi::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  num_ = 0;
  addnum_ = GOOGLE_LONGLONG(0);
  remarkid_ = 0;
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jiangli_ = GOOGLE_LONGLONG(0);
  linkid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_touzi::~festivalmuban_touzi() {
  SharedDtor();
}

void festivalmuban_touzi::SharedDtor() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_touzi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_touzi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_touzi_descriptor_;
}

const festivalmuban_touzi& festivalmuban_touzi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_touzi* festivalmuban_touzi::default_instance_ = NULL;

festivalmuban_touzi* festivalmuban_touzi::New() const {
  return new festivalmuban_touzi;
}

void festivalmuban_touzi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    num_ = 0;
    addnum_ = GOOGLE_LONGLONG(0);
    remarkid_ = 0;
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    jiangli_ = GOOGLE_LONGLONG(0);
    linkid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_touzi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional int32 Num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addNum;
        break;
      }

      // optional int64 addNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_remarkId;
        break;
      }

      // optional int32 remarkId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remarkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remarkid_)));
          set_has_remarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_linkId;
        break;
      }

      // optional int64 linkId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &linkid_)));
          set_has_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_touzi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int64 addNum = 4;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->addnum(), output);
  }

  // optional int32 remarkId = 5;
  if (has_remarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->remarkid(), output);
  }

  // optional string miaoshu = 6;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->miaoshu(), output);
  }

  // optional int64 jiangLi = 7;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->jiangli(), output);
  }

  // optional int64 linkId = 8;
  if (has_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->linkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_touzi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int64 addNum = 4;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->addnum(), target);
  }

  // optional int32 remarkId = 5;
  if (has_remarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->remarkid(), target);
  }

  // optional string miaoshu = 6;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->miaoshu(), target);
  }

  // optional int64 jiangLi = 7;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->jiangli(), target);
  }

  // optional int64 linkId = 8;
  if (has_linkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->linkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_touzi::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 addNum = 4;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->addnum());
    }

    // optional int32 remarkId = 5;
    if (has_remarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remarkid());
    }

    // optional string miaoshu = 6;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 jiangLi = 7;
    if (has_jiangli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

    // optional int64 linkId = 8;
    if (has_linkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->linkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_touzi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_touzi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_touzi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_touzi::MergeFrom(const festivalmuban_touzi& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
    if (from.has_remarkid()) {
      set_remarkid(from.remarkid());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
    if (from.has_linkid()) {
      set_linkid(from.linkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_touzi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_touzi::CopyFrom(const festivalmuban_touzi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_touzi::IsInitialized() const {

  return true;
}

void festivalmuban_touzi::Swap(festivalmuban_touzi* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(addnum_, other->addnum_);
    std::swap(remarkid_, other->remarkid_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(linkid_, other->linkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_touzi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_touzi_descriptor_;
  metadata.reflection = festivalmuban_touzi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_touzi::kFestivalmubanTouziListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_touzi::Sheet_festivalmuban_touzi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_touzi::InitAsDefaultInstance() {
}

Sheet_festivalmuban_touzi::Sheet_festivalmuban_touzi(const Sheet_festivalmuban_touzi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_touzi::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_touzi::~Sheet_festivalmuban_touzi() {
  SharedDtor();
}

void Sheet_festivalmuban_touzi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_touzi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_touzi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_touzi_descriptor_;
}

const Sheet_festivalmuban_touzi& Sheet_festivalmuban_touzi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_touzi* Sheet_festivalmuban_touzi::default_instance_ = NULL;

Sheet_festivalmuban_touzi* Sheet_festivalmuban_touzi::New() const {
  return new Sheet_festivalmuban_touzi;
}

void Sheet_festivalmuban_touzi::Clear() {
  festivalmuban_touzi_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_touzi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_touzi festivalmuban_touzi_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_touzi_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_touzi_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_touzi_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_touzi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_touzi festivalmuban_touzi_List = 1;
  for (int i = 0; i < this->festivalmuban_touzi_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_touzi_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_touzi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_touzi festivalmuban_touzi_List = 1;
  for (int i = 0; i < this->festivalmuban_touzi_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_touzi_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_touzi::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_touzi festivalmuban_touzi_List = 1;
  total_size += 1 * this->festivalmuban_touzi_list_size();
  for (int i = 0; i < this->festivalmuban_touzi_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_touzi_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_touzi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_touzi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_touzi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_touzi::MergeFrom(const Sheet_festivalmuban_touzi& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_touzi_list_.MergeFrom(from.festivalmuban_touzi_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_touzi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_touzi::CopyFrom(const Sheet_festivalmuban_touzi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_touzi::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_touzi::Swap(Sheet_festivalmuban_touzi* other) {
  if (other != this) {
    festivalmuban_touzi_list_.Swap(&other->festivalmuban_touzi_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_touzi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_touzi_descriptor_;
  metadata.reflection = Sheet_festivalmuban_touzi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_zhichong::kIdFieldNumber;
const int festivalmuban_zhichong::kNumFieldNumber;
const int festivalmuban_zhichong::kSeverNumFieldNumber;
const int festivalmuban_zhichong::kRemarkIdFieldNumber;
const int festivalmuban_zhichong::kMiaoshuFieldNumber;
const int festivalmuban_zhichong::kJiangLiFieldNumber;
#endif  // !_MSC_VER

festivalmuban_zhichong::festivalmuban_zhichong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_zhichong::InitAsDefaultInstance() {
}

festivalmuban_zhichong::festivalmuban_zhichong(const festivalmuban_zhichong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_zhichong::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  severnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  remarkid_ = 0;
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jiangli_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_zhichong::~festivalmuban_zhichong() {
  SharedDtor();
}

void festivalmuban_zhichong::SharedDtor() {
  if (severnum_ != &::google::protobuf::internal::kEmptyString) {
    delete severnum_;
  }
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_zhichong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_zhichong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_zhichong_descriptor_;
}

const festivalmuban_zhichong& festivalmuban_zhichong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_zhichong* festivalmuban_zhichong::default_instance_ = NULL;

festivalmuban_zhichong* festivalmuban_zhichong::New() const {
  return new festivalmuban_zhichong;
}

void festivalmuban_zhichong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
    if (has_severnum()) {
      if (severnum_ != &::google::protobuf::internal::kEmptyString) {
        severnum_->clear();
      }
    }
    remarkid_ = 0;
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    jiangli_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_zhichong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional int32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_severNum;
        break;
      }

      // optional string severNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_severNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_severnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->severnum().data(), this->severnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remarkId;
        break;
      }

      // optional int32 remarkId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remarkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remarkid_)));
          set_has_remarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_zhichong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional string severNum = 3;
  if (has_severnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->severnum().data(), this->severnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->severnum(), output);
  }

  // optional int32 remarkId = 4;
  if (has_remarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remarkid(), output);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->miaoshu(), output);
  }

  // optional int64 jiangLi = 6;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->jiangli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_zhichong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional string severNum = 3;
  if (has_severnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->severnum().data(), this->severnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->severnum(), target);
  }

  // optional int32 remarkId = 4;
  if (has_remarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remarkid(), target);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->miaoshu(), target);
  }

  // optional int64 jiangLi = 6;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->jiangli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_zhichong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional string severNum = 3;
    if (has_severnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->severnum());
    }

    // optional int32 remarkId = 4;
    if (has_remarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remarkid());
    }

    // optional string miaoshu = 5;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 jiangLi = 6;
    if (has_jiangli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_zhichong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_zhichong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_zhichong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_zhichong::MergeFrom(const festivalmuban_zhichong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_severnum()) {
      set_severnum(from.severnum());
    }
    if (from.has_remarkid()) {
      set_remarkid(from.remarkid());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_zhichong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_zhichong::CopyFrom(const festivalmuban_zhichong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_zhichong::IsInitialized() const {

  return true;
}

void festivalmuban_zhichong::Swap(festivalmuban_zhichong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(severnum_, other->severnum_);
    std::swap(remarkid_, other->remarkid_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_zhichong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_zhichong_descriptor_;
  metadata.reflection = festivalmuban_zhichong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_zhichong::kFestivalmubanZhichongListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_zhichong::Sheet_festivalmuban_zhichong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_zhichong::InitAsDefaultInstance() {
}

Sheet_festivalmuban_zhichong::Sheet_festivalmuban_zhichong(const Sheet_festivalmuban_zhichong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_zhichong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_zhichong::~Sheet_festivalmuban_zhichong() {
  SharedDtor();
}

void Sheet_festivalmuban_zhichong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_zhichong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_zhichong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_zhichong_descriptor_;
}

const Sheet_festivalmuban_zhichong& Sheet_festivalmuban_zhichong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_zhichong* Sheet_festivalmuban_zhichong::default_instance_ = NULL;

Sheet_festivalmuban_zhichong* Sheet_festivalmuban_zhichong::New() const {
  return new Sheet_festivalmuban_zhichong;
}

void Sheet_festivalmuban_zhichong::Clear() {
  festivalmuban_zhichong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_zhichong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_zhichong festivalmuban_zhichong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_zhichong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_zhichong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_zhichong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_zhichong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_zhichong festivalmuban_zhichong_List = 1;
  for (int i = 0; i < this->festivalmuban_zhichong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_zhichong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_zhichong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_zhichong festivalmuban_zhichong_List = 1;
  for (int i = 0; i < this->festivalmuban_zhichong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_zhichong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_zhichong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_zhichong festivalmuban_zhichong_List = 1;
  total_size += 1 * this->festivalmuban_zhichong_list_size();
  for (int i = 0; i < this->festivalmuban_zhichong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_zhichong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_zhichong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_zhichong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_zhichong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_zhichong::MergeFrom(const Sheet_festivalmuban_zhichong& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_zhichong_list_.MergeFrom(from.festivalmuban_zhichong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_zhichong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_zhichong::CopyFrom(const Sheet_festivalmuban_zhichong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_zhichong::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_zhichong::Swap(Sheet_festivalmuban_zhichong* other) {
  if (other != this) {
    festivalmuban_zhichong_list_.Swap(&other->festivalmuban_zhichong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_zhichong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_zhichong_descriptor_;
  metadata.reflection = Sheet_festivalmuban_zhichong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_leichong::kIdFieldNumber;
const int festivalmuban_leichong::kTypeFieldNumber;
const int festivalmuban_leichong::kNumFieldNumber;
const int festivalmuban_leichong::kRemarkIdFieldNumber;
const int festivalmuban_leichong::kMiaoshuFieldNumber;
const int festivalmuban_leichong::kJiangLiFieldNumber;
#endif  // !_MSC_VER

festivalmuban_leichong::festivalmuban_leichong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_leichong::InitAsDefaultInstance() {
}

festivalmuban_leichong::festivalmuban_leichong(const festivalmuban_leichong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_leichong::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  num_ = 0;
  remarkid_ = 0;
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jiangli_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_leichong::~festivalmuban_leichong() {
  SharedDtor();
}

void festivalmuban_leichong::SharedDtor() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_leichong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_leichong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_leichong_descriptor_;
}

const festivalmuban_leichong& festivalmuban_leichong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_leichong* festivalmuban_leichong::default_instance_ = NULL;

festivalmuban_leichong* festivalmuban_leichong::New() const {
  return new festivalmuban_leichong;
}

void festivalmuban_leichong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    num_ = 0;
    remarkid_ = 0;
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    jiangli_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_leichong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Num;
        break;
      }

      // optional int32 Num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remarkId;
        break;
      }

      // optional int32 remarkId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remarkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remarkid_)));
          set_has_remarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_leichong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 remarkId = 4;
  if (has_remarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remarkid(), output);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->miaoshu(), output);
  }

  // optional int64 jiangLi = 6;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->jiangli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_leichong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 Num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 remarkId = 4;
  if (has_remarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remarkid(), target);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->miaoshu(), target);
  }

  // optional int64 jiangLi = 6;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->jiangli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_leichong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 Num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 remarkId = 4;
    if (has_remarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remarkid());
    }

    // optional string miaoshu = 5;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 jiangLi = 6;
    if (has_jiangli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_leichong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_leichong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_leichong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_leichong::MergeFrom(const festivalmuban_leichong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_remarkid()) {
      set_remarkid(from.remarkid());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_leichong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_leichong::CopyFrom(const festivalmuban_leichong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_leichong::IsInitialized() const {

  return true;
}

void festivalmuban_leichong::Swap(festivalmuban_leichong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(num_, other->num_);
    std::swap(remarkid_, other->remarkid_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_leichong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_leichong_descriptor_;
  metadata.reflection = festivalmuban_leichong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_leichong::kFestivalmubanLeichongListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_leichong::Sheet_festivalmuban_leichong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_leichong::InitAsDefaultInstance() {
}

Sheet_festivalmuban_leichong::Sheet_festivalmuban_leichong(const Sheet_festivalmuban_leichong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_leichong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_leichong::~Sheet_festivalmuban_leichong() {
  SharedDtor();
}

void Sheet_festivalmuban_leichong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_leichong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_leichong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_leichong_descriptor_;
}

const Sheet_festivalmuban_leichong& Sheet_festivalmuban_leichong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_leichong* Sheet_festivalmuban_leichong::default_instance_ = NULL;

Sheet_festivalmuban_leichong* Sheet_festivalmuban_leichong::New() const {
  return new Sheet_festivalmuban_leichong;
}

void Sheet_festivalmuban_leichong::Clear() {
  festivalmuban_leichong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_leichong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_leichong festivalmuban_leichong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_leichong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_leichong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_leichong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_leichong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_leichong festivalmuban_leichong_List = 1;
  for (int i = 0; i < this->festivalmuban_leichong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_leichong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_leichong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_leichong festivalmuban_leichong_List = 1;
  for (int i = 0; i < this->festivalmuban_leichong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_leichong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_leichong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_leichong festivalmuban_leichong_List = 1;
  total_size += 1 * this->festivalmuban_leichong_list_size();
  for (int i = 0; i < this->festivalmuban_leichong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_leichong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_leichong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_leichong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_leichong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_leichong::MergeFrom(const Sheet_festivalmuban_leichong& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_leichong_list_.MergeFrom(from.festivalmuban_leichong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_leichong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_leichong::CopyFrom(const Sheet_festivalmuban_leichong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_leichong::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_leichong::Swap(Sheet_festivalmuban_leichong* other) {
  if (other != this) {
    festivalmuban_leichong_list_.Swap(&other->festivalmuban_leichong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_leichong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_leichong_descriptor_;
  metadata.reflection = Sheet_festivalmuban_leichong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_duihuan::kTiaoJianIdFieldNumber;
const int festivalmuban_duihuan::kPrizeIdFieldNumber;
const int festivalmuban_duihuan::kProfFieldNumber;
const int festivalmuban_duihuan::kPrizeNumFieldNumber;
const int festivalmuban_duihuan::kPropIdFieldNumber;
const int festivalmuban_duihuan::kPropNumFieldNumber;
const int festivalmuban_duihuan::kTimesFieldNumber;
#endif  // !_MSC_VER

festivalmuban_duihuan::festivalmuban_duihuan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_duihuan::InitAsDefaultInstance() {
}

festivalmuban_duihuan::festivalmuban_duihuan(const festivalmuban_duihuan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_duihuan::SharedCtor() {
  _cached_size_ = 0;
  tiaojianid_ = 0;
  prizeid_ = GOOGLE_LONGLONG(0);
  prof_ = 0;
  prizenum_ = 0;
  propid_ = GOOGLE_LONGLONG(0);
  propnum_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_duihuan::~festivalmuban_duihuan() {
  SharedDtor();
}

void festivalmuban_duihuan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_duihuan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_duihuan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_duihuan_descriptor_;
}

const festivalmuban_duihuan& festivalmuban_duihuan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_duihuan* festivalmuban_duihuan::default_instance_ = NULL;

festivalmuban_duihuan* festivalmuban_duihuan::New() const {
  return new festivalmuban_duihuan;
}

void festivalmuban_duihuan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tiaojianid_ = 0;
    prizeid_ = GOOGLE_LONGLONG(0);
    prof_ = 0;
    prizenum_ = 0;
    propid_ = GOOGLE_LONGLONG(0);
    propnum_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_duihuan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tiaoJianId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tiaojianid_)));
          set_has_tiaojianid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prizeId;
        break;
      }

      // optional int64 prizeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prizeid_)));
          set_has_prizeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional int32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prizeNum;
        break;
      }

      // optional int32 prizeNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prizeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prizenum_)));
          set_has_prizenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_propId;
        break;
      }

      // optional int64 propId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_propNum;
        break;
      }

      // optional int32 propNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propnum_)));
          set_has_propnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // optional int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_duihuan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 tiaoJianId = 1;
  if (has_tiaojianid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tiaojianid(), output);
  }

  // optional int64 prizeId = 2;
  if (has_prizeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->prizeid(), output);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prof(), output);
  }

  // optional int32 prizeNum = 4;
  if (has_prizenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prizenum(), output);
  }

  // optional int64 propId = 5;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->propid(), output);
  }

  // optional int32 propNum = 6;
  if (has_propnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->propnum(), output);
  }

  // optional int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_duihuan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 tiaoJianId = 1;
  if (has_tiaojianid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tiaojianid(), target);
  }

  // optional int64 prizeId = 2;
  if (has_prizeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->prizeid(), target);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prof(), target);
  }

  // optional int32 prizeNum = 4;
  if (has_prizenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prizenum(), target);
  }

  // optional int64 propId = 5;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->propid(), target);
  }

  // optional int32 propNum = 6;
  if (has_propnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->propnum(), target);
  }

  // optional int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_duihuan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 tiaoJianId = 1;
    if (has_tiaojianid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tiaojianid());
    }

    // optional int64 prizeId = 2;
    if (has_prizeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prizeid());
    }

    // optional int32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 prizeNum = 4;
    if (has_prizenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prizenum());
    }

    // optional int64 propId = 5;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->propid());
    }

    // optional int32 propNum = 6;
    if (has_propnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propnum());
    }

    // optional int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_duihuan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_duihuan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_duihuan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_duihuan::MergeFrom(const festivalmuban_duihuan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tiaojianid()) {
      set_tiaojianid(from.tiaojianid());
    }
    if (from.has_prizeid()) {
      set_prizeid(from.prizeid());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_prizenum()) {
      set_prizenum(from.prizenum());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_propnum()) {
      set_propnum(from.propnum());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_duihuan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_duihuan::CopyFrom(const festivalmuban_duihuan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_duihuan::IsInitialized() const {

  return true;
}

void festivalmuban_duihuan::Swap(festivalmuban_duihuan* other) {
  if (other != this) {
    std::swap(tiaojianid_, other->tiaojianid_);
    std::swap(prizeid_, other->prizeid_);
    std::swap(prof_, other->prof_);
    std::swap(prizenum_, other->prizenum_);
    std::swap(propid_, other->propid_);
    std::swap(propnum_, other->propnum_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_duihuan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_duihuan_descriptor_;
  metadata.reflection = festivalmuban_duihuan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_duihuan::kFestivalmubanDuihuanListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_duihuan::Sheet_festivalmuban_duihuan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_duihuan::InitAsDefaultInstance() {
}

Sheet_festivalmuban_duihuan::Sheet_festivalmuban_duihuan(const Sheet_festivalmuban_duihuan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_duihuan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_duihuan::~Sheet_festivalmuban_duihuan() {
  SharedDtor();
}

void Sheet_festivalmuban_duihuan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_duihuan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_duihuan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_duihuan_descriptor_;
}

const Sheet_festivalmuban_duihuan& Sheet_festivalmuban_duihuan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_duihuan* Sheet_festivalmuban_duihuan::default_instance_ = NULL;

Sheet_festivalmuban_duihuan* Sheet_festivalmuban_duihuan::New() const {
  return new Sheet_festivalmuban_duihuan;
}

void Sheet_festivalmuban_duihuan::Clear() {
  festivalmuban_duihuan_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_duihuan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_duihuan festivalmuban_duihuan_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_duihuan_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_duihuan_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_duihuan_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_duihuan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_duihuan festivalmuban_duihuan_List = 1;
  for (int i = 0; i < this->festivalmuban_duihuan_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_duihuan_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_duihuan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_duihuan festivalmuban_duihuan_List = 1;
  for (int i = 0; i < this->festivalmuban_duihuan_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_duihuan_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_duihuan::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_duihuan festivalmuban_duihuan_List = 1;
  total_size += 1 * this->festivalmuban_duihuan_list_size();
  for (int i = 0; i < this->festivalmuban_duihuan_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_duihuan_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_duihuan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_duihuan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_duihuan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_duihuan::MergeFrom(const Sheet_festivalmuban_duihuan& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_duihuan_list_.MergeFrom(from.festivalmuban_duihuan_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_duihuan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_duihuan::CopyFrom(const Sheet_festivalmuban_duihuan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_duihuan::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_duihuan::Swap(Sheet_festivalmuban_duihuan* other) {
  if (other != this) {
    festivalmuban_duihuan_list_.Swap(&other->festivalmuban_duihuan_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_duihuan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_duihuan_descriptor_;
  metadata.reflection = Sheet_festivalmuban_duihuan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivald_diaoluo::kIdFieldNumber;
const int festivald_diaoluo::kMixLevelFieldNumber;
const int festivald_diaoluo::kBossTypeFieldNumber;
const int festivald_diaoluo::kDropNumFieldNumber;
const int festivald_diaoluo::kDropRandFieldNumber;
#endif  // !_MSC_VER

festivald_diaoluo::festivald_diaoluo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivald_diaoluo::InitAsDefaultInstance() {
}

festivald_diaoluo::festivald_diaoluo(const festivald_diaoluo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivald_diaoluo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mixlevel_ = 0;
  bosstype_ = 0;
  dropnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  droprand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivald_diaoluo::~festivald_diaoluo() {
  SharedDtor();
}

void festivald_diaoluo::SharedDtor() {
  if (dropnum_ != &::google::protobuf::internal::kEmptyString) {
    delete dropnum_;
  }
  if (droprand_ != &::google::protobuf::internal::kEmptyString) {
    delete droprand_;
  }
  if (this != default_instance_) {
  }
}

void festivald_diaoluo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivald_diaoluo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivald_diaoluo_descriptor_;
}

const festivald_diaoluo& festivald_diaoluo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivald_diaoluo* festivald_diaoluo::default_instance_ = NULL;

festivald_diaoluo* festivald_diaoluo::New() const {
  return new festivald_diaoluo;
}

void festivald_diaoluo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    mixlevel_ = 0;
    bosstype_ = 0;
    if (has_dropnum()) {
      if (dropnum_ != &::google::protobuf::internal::kEmptyString) {
        dropnum_->clear();
      }
    }
    if (has_droprand()) {
      if (droprand_ != &::google::protobuf::internal::kEmptyString) {
        droprand_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivald_diaoluo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mixLevel;
        break;
      }

      // optional int32 mixLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mixLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mixlevel_)));
          set_has_mixlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bossType;
        break;
      }

      // optional int32 bossType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bosstype_)));
          set_has_bosstype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dropNum;
        break;
      }

      // optional string dropNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dropnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dropnum().data(), this->dropnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dropRand;
        break;
      }

      // optional string dropRand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dropRand:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_droprand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->droprand().data(), this->droprand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivald_diaoluo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 mixLevel = 2;
  if (has_mixlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mixlevel(), output);
  }

  // optional int32 bossType = 3;
  if (has_bosstype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bosstype(), output);
  }

  // optional string dropNum = 4;
  if (has_dropnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dropnum().data(), this->dropnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->dropnum(), output);
  }

  // optional string dropRand = 5;
  if (has_droprand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->droprand().data(), this->droprand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->droprand(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivald_diaoluo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 mixLevel = 2;
  if (has_mixlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mixlevel(), target);
  }

  // optional int32 bossType = 3;
  if (has_bosstype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bosstype(), target);
  }

  // optional string dropNum = 4;
  if (has_dropnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dropnum().data(), this->dropnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dropnum(), target);
  }

  // optional string dropRand = 5;
  if (has_droprand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->droprand().data(), this->droprand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->droprand(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivald_diaoluo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 mixLevel = 2;
    if (has_mixlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mixlevel());
    }

    // optional int32 bossType = 3;
    if (has_bosstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bosstype());
    }

    // optional string dropNum = 4;
    if (has_dropnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dropnum());
    }

    // optional string dropRand = 5;
    if (has_droprand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->droprand());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivald_diaoluo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivald_diaoluo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivald_diaoluo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivald_diaoluo::MergeFrom(const festivald_diaoluo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mixlevel()) {
      set_mixlevel(from.mixlevel());
    }
    if (from.has_bosstype()) {
      set_bosstype(from.bosstype());
    }
    if (from.has_dropnum()) {
      set_dropnum(from.dropnum());
    }
    if (from.has_droprand()) {
      set_droprand(from.droprand());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivald_diaoluo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivald_diaoluo::CopyFrom(const festivald_diaoluo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivald_diaoluo::IsInitialized() const {

  return true;
}

void festivald_diaoluo::Swap(festivald_diaoluo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mixlevel_, other->mixlevel_);
    std::swap(bosstype_, other->bosstype_);
    std::swap(dropnum_, other->dropnum_);
    std::swap(droprand_, other->droprand_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivald_diaoluo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivald_diaoluo_descriptor_;
  metadata.reflection = festivald_diaoluo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivald_diaoluo::kFestivaldDiaoluoListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivald_diaoluo::Sheet_festivald_diaoluo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivald_diaoluo::InitAsDefaultInstance() {
}

Sheet_festivald_diaoluo::Sheet_festivald_diaoluo(const Sheet_festivald_diaoluo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivald_diaoluo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivald_diaoluo::~Sheet_festivald_diaoluo() {
  SharedDtor();
}

void Sheet_festivald_diaoluo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivald_diaoluo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivald_diaoluo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivald_diaoluo_descriptor_;
}

const Sheet_festivald_diaoluo& Sheet_festivald_diaoluo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivald_diaoluo* Sheet_festivald_diaoluo::default_instance_ = NULL;

Sheet_festivald_diaoluo* Sheet_festivald_diaoluo::New() const {
  return new Sheet_festivald_diaoluo;
}

void Sheet_festivald_diaoluo::Clear() {
  festivald_diaoluo_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivald_diaoluo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivald_diaoluo festivald_diaoluo_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivald_diaoluo_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivald_diaoluo_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivald_diaoluo_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivald_diaoluo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivald_diaoluo festivald_diaoluo_List = 1;
  for (int i = 0; i < this->festivald_diaoluo_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivald_diaoluo_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivald_diaoluo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivald_diaoluo festivald_diaoluo_List = 1;
  for (int i = 0; i < this->festivald_diaoluo_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivald_diaoluo_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivald_diaoluo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivald_diaoluo festivald_diaoluo_List = 1;
  total_size += 1 * this->festivald_diaoluo_list_size();
  for (int i = 0; i < this->festivald_diaoluo_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivald_diaoluo_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivald_diaoluo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivald_diaoluo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivald_diaoluo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivald_diaoluo::MergeFrom(const Sheet_festivald_diaoluo& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivald_diaoluo_list_.MergeFrom(from.festivald_diaoluo_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivald_diaoluo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivald_diaoluo::CopyFrom(const Sheet_festivald_diaoluo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivald_diaoluo::IsInitialized() const {

  return true;
}

void Sheet_festivald_diaoluo::Swap(Sheet_festivald_diaoluo* other) {
  if (other != this) {
    festivald_diaoluo_list_.Swap(&other->festivald_diaoluo_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivald_diaoluo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivald_diaoluo_descriptor_;
  metadata.reflection = Sheet_festivald_diaoluo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_leixiao::kIdFieldNumber;
const int festivalmuban_leixiao::kTypeFieldNumber;
const int festivalmuban_leixiao::kXiaoFeiFieldNumber;
const int festivalmuban_leixiao::kRemarkIdFieldNumber;
const int festivalmuban_leixiao::kMiaoshuFieldNumber;
const int festivalmuban_leixiao::kJiangLiFieldNumber;
#endif  // !_MSC_VER

festivalmuban_leixiao::festivalmuban_leixiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_leixiao::InitAsDefaultInstance() {
}

festivalmuban_leixiao::festivalmuban_leixiao(const festivalmuban_leixiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_leixiao::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  xiaofei_ = 0;
  remarkid_ = 0;
  miaoshu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  jiangli_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_leixiao::~festivalmuban_leixiao() {
  SharedDtor();
}

void festivalmuban_leixiao::SharedDtor() {
  if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
    delete miaoshu_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_leixiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_leixiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_leixiao_descriptor_;
}

const festivalmuban_leixiao& festivalmuban_leixiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_leixiao* festivalmuban_leixiao::default_instance_ = NULL;

festivalmuban_leixiao* festivalmuban_leixiao::New() const {
  return new festivalmuban_leixiao;
}

void festivalmuban_leixiao::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    xiaofei_ = 0;
    remarkid_ = 0;
    if (has_miaoshu()) {
      if (miaoshu_ != &::google::protobuf::internal::kEmptyString) {
        miaoshu_->clear();
      }
    }
    jiangli_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_leixiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_xiaoFei;
        break;
      }

      // optional int32 xiaoFei = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xiaoFei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xiaofei_)));
          set_has_xiaofei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remarkId;
        break;
      }

      // optional int32 remarkId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remarkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remarkid_)));
          set_has_remarkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_miaoshu;
        break;
      }

      // optional string miaoshu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_miaoshu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_miaoshu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->miaoshu().data(), this->miaoshu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_leixiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 xiaoFei = 3;
  if (has_xiaofei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->xiaofei(), output);
  }

  // optional int32 remarkId = 4;
  if (has_remarkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->remarkid(), output);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->miaoshu(), output);
  }

  // optional int64 jiangLi = 6;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->jiangli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_leixiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 xiaoFei = 3;
  if (has_xiaofei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->xiaofei(), target);
  }

  // optional int32 remarkId = 4;
  if (has_remarkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->remarkid(), target);
  }

  // optional string miaoshu = 5;
  if (has_miaoshu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->miaoshu().data(), this->miaoshu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->miaoshu(), target);
  }

  // optional int64 jiangLi = 6;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->jiangli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_leixiao::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 xiaoFei = 3;
    if (has_xiaofei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xiaofei());
    }

    // optional int32 remarkId = 4;
    if (has_remarkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remarkid());
    }

    // optional string miaoshu = 5;
    if (has_miaoshu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->miaoshu());
    }

    // optional int64 jiangLi = 6;
    if (has_jiangli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_leixiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_leixiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_leixiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_leixiao::MergeFrom(const festivalmuban_leixiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_xiaofei()) {
      set_xiaofei(from.xiaofei());
    }
    if (from.has_remarkid()) {
      set_remarkid(from.remarkid());
    }
    if (from.has_miaoshu()) {
      set_miaoshu(from.miaoshu());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_leixiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_leixiao::CopyFrom(const festivalmuban_leixiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_leixiao::IsInitialized() const {

  return true;
}

void festivalmuban_leixiao::Swap(festivalmuban_leixiao* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(xiaofei_, other->xiaofei_);
    std::swap(remarkid_, other->remarkid_);
    std::swap(miaoshu_, other->miaoshu_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_leixiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_leixiao_descriptor_;
  metadata.reflection = festivalmuban_leixiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_leixiao::kFestivalmubanLeixiaoListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_leixiao::Sheet_festivalmuban_leixiao()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_leixiao::InitAsDefaultInstance() {
}

Sheet_festivalmuban_leixiao::Sheet_festivalmuban_leixiao(const Sheet_festivalmuban_leixiao& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_leixiao::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_leixiao::~Sheet_festivalmuban_leixiao() {
  SharedDtor();
}

void Sheet_festivalmuban_leixiao::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_leixiao::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_leixiao::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_leixiao_descriptor_;
}

const Sheet_festivalmuban_leixiao& Sheet_festivalmuban_leixiao::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_leixiao* Sheet_festivalmuban_leixiao::default_instance_ = NULL;

Sheet_festivalmuban_leixiao* Sheet_festivalmuban_leixiao::New() const {
  return new Sheet_festivalmuban_leixiao;
}

void Sheet_festivalmuban_leixiao::Clear() {
  festivalmuban_leixiao_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_leixiao::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_leixiao festivalmuban_leixiao_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_leixiao_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_leixiao_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_leixiao_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_leixiao::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_leixiao festivalmuban_leixiao_List = 1;
  for (int i = 0; i < this->festivalmuban_leixiao_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_leixiao_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_leixiao::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_leixiao festivalmuban_leixiao_List = 1;
  for (int i = 0; i < this->festivalmuban_leixiao_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_leixiao_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_leixiao::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_leixiao festivalmuban_leixiao_List = 1;
  total_size += 1 * this->festivalmuban_leixiao_list_size();
  for (int i = 0; i < this->festivalmuban_leixiao_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_leixiao_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_leixiao::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_leixiao* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_leixiao*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_leixiao::MergeFrom(const Sheet_festivalmuban_leixiao& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_leixiao_list_.MergeFrom(from.festivalmuban_leixiao_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_leixiao::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_leixiao::CopyFrom(const Sheet_festivalmuban_leixiao& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_leixiao::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_leixiao::Swap(Sheet_festivalmuban_leixiao* other) {
  if (other != this) {
    festivalmuban_leixiao_list_.Swap(&other->festivalmuban_leixiao_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_leixiao::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_leixiao_descriptor_;
  metadata.reflection = Sheet_festivalmuban_leixiao_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_shouchong::kIdFieldNumber;
const int festivalmuban_shouchong::kJiangLiFieldNumber;
#endif  // !_MSC_VER

festivalmuban_shouchong::festivalmuban_shouchong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_shouchong::InitAsDefaultInstance() {
}

festivalmuban_shouchong::festivalmuban_shouchong(const festivalmuban_shouchong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_shouchong::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  jiangli_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_shouchong::~festivalmuban_shouchong() {
  SharedDtor();
}

void festivalmuban_shouchong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_shouchong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_shouchong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_shouchong_descriptor_;
}

const festivalmuban_shouchong& festivalmuban_shouchong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_shouchong* festivalmuban_shouchong::default_instance_ = NULL;

festivalmuban_shouchong* festivalmuban_shouchong::New() const {
  return new festivalmuban_shouchong;
}

void festivalmuban_shouchong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    jiangli_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_shouchong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_jiangLi;
        break;
      }

      // optional int64 jiangLi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jiangLi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &jiangli_)));
          set_has_jiangli();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_shouchong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 jiangLi = 2;
  if (has_jiangli()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->jiangli(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_shouchong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 jiangLi = 2;
  if (has_jiangli()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->jiangli(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_shouchong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 jiangLi = 2;
    if (has_jiangli()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->jiangli());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_shouchong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_shouchong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_shouchong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_shouchong::MergeFrom(const festivalmuban_shouchong& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_jiangli()) {
      set_jiangli(from.jiangli());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_shouchong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_shouchong::CopyFrom(const festivalmuban_shouchong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_shouchong::IsInitialized() const {

  return true;
}

void festivalmuban_shouchong::Swap(festivalmuban_shouchong* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(jiangli_, other->jiangli_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_shouchong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_shouchong_descriptor_;
  metadata.reflection = festivalmuban_shouchong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_shouchong::kFestivalmubanShouchongListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_shouchong::Sheet_festivalmuban_shouchong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_shouchong::InitAsDefaultInstance() {
}

Sheet_festivalmuban_shouchong::Sheet_festivalmuban_shouchong(const Sheet_festivalmuban_shouchong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_shouchong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_shouchong::~Sheet_festivalmuban_shouchong() {
  SharedDtor();
}

void Sheet_festivalmuban_shouchong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_shouchong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_shouchong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_shouchong_descriptor_;
}

const Sheet_festivalmuban_shouchong& Sheet_festivalmuban_shouchong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_shouchong* Sheet_festivalmuban_shouchong::default_instance_ = NULL;

Sheet_festivalmuban_shouchong* Sheet_festivalmuban_shouchong::New() const {
  return new Sheet_festivalmuban_shouchong;
}

void Sheet_festivalmuban_shouchong::Clear() {
  festivalmuban_shouchong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_shouchong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_shouchong festivalmuban_shouchong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_shouchong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_shouchong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_shouchong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_shouchong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_shouchong festivalmuban_shouchong_List = 1;
  for (int i = 0; i < this->festivalmuban_shouchong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_shouchong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_shouchong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_shouchong festivalmuban_shouchong_List = 1;
  for (int i = 0; i < this->festivalmuban_shouchong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_shouchong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_shouchong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_shouchong festivalmuban_shouchong_List = 1;
  total_size += 1 * this->festivalmuban_shouchong_list_size();
  for (int i = 0; i < this->festivalmuban_shouchong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_shouchong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_shouchong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_shouchong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_shouchong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_shouchong::MergeFrom(const Sheet_festivalmuban_shouchong& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_shouchong_list_.MergeFrom(from.festivalmuban_shouchong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_shouchong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_shouchong::CopyFrom(const Sheet_festivalmuban_shouchong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_shouchong::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_shouchong::Swap(Sheet_festivalmuban_shouchong* other) {
  if (other != this) {
    festivalmuban_shouchong_list_.Swap(&other->festivalmuban_shouchong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_shouchong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_shouchong_descriptor_;
  metadata.reflection = Sheet_festivalmuban_shouchong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_yanhua::kIdFieldNumber;
const int festivalmuban_yanhua::kItemidFieldNumber;
const int festivalmuban_yanhua::kNumFieldNumber;
const int festivalmuban_yanhua::kProfFieldNumber;
const int festivalmuban_yanhua::kTypeFieldNumber;
const int festivalmuban_yanhua::kOrderFieldNumber;
const int festivalmuban_yanhua::kProbabilityFieldNumber;
const int festivalmuban_yanhua::kRelationFieldNumber;
const int festivalmuban_yanhua::kModelidFieldNumber;
const int festivalmuban_yanhua::kModeltypeFieldNumber;
const int festivalmuban_yanhua::kScaleFieldNumber;
#endif  // !_MSC_VER

festivalmuban_yanhua::festivalmuban_yanhua()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_yanhua::InitAsDefaultInstance() {
}

festivalmuban_yanhua::festivalmuban_yanhua(const festivalmuban_yanhua& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_yanhua::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  prof_ = 0;
  type_ = 0;
  order_ = 0;
  probability_ = 0;
  relation_ = GOOGLE_LONGLONG(0);
  modelid_ = GOOGLE_LONGLONG(0);
  modeltype_ = 0;
  scale_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_yanhua::~festivalmuban_yanhua() {
  SharedDtor();
}

void festivalmuban_yanhua::SharedDtor() {
  if (scale_ != &::google::protobuf::internal::kEmptyString) {
    delete scale_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_yanhua::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_yanhua::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_yanhua_descriptor_;
}

const festivalmuban_yanhua& festivalmuban_yanhua::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_yanhua* festivalmuban_yanhua::default_instance_ = NULL;

festivalmuban_yanhua* festivalmuban_yanhua::New() const {
  return new festivalmuban_yanhua;
}

void festivalmuban_yanhua::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    prof_ = 0;
    type_ = 0;
    order_ = 0;
    probability_ = 0;
    relation_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    modelid_ = GOOGLE_LONGLONG(0);
    modeltype_ = 0;
    if (has_scale()) {
      if (scale_ != &::google::protobuf::internal::kEmptyString) {
        scale_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_yanhua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order;
        break;
      }

      // optional int32 order = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_probability;
        break;
      }

      // optional int32 probability = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_relation;
        break;
      }

      // optional int64 relation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_modelid;
        break;
      }

      // optional int64 modelid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modelid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modelid_)));
          set_has_modelid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_modeltype;
        break;
      }

      // optional int32 modeltype = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modeltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modeltype_)));
          set_has_modeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_scale;
        break;
      }

      // optional string scale = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scale:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scale()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scale().data(), this->scale().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_yanhua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 order = 6;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->order(), output);
  }

  // optional int32 probability = 7;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->probability(), output);
  }

  // optional int64 relation = 8;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->relation(), output);
  }

  // optional int64 modelid = 9;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->modelid(), output);
  }

  // optional int32 modeltype = 10;
  if (has_modeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->modeltype(), output);
  }

  // optional string scale = 11;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->scale(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_yanhua::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 order = 6;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->order(), target);
  }

  // optional int32 probability = 7;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->probability(), target);
  }

  // optional int64 relation = 8;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->relation(), target);
  }

  // optional int64 modelid = 9;
  if (has_modelid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->modelid(), target);
  }

  // optional int32 modeltype = 10;
  if (has_modeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->modeltype(), target);
  }

  // optional string scale = 11;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scale().data(), this->scale().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->scale(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_yanhua::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 order = 6;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 probability = 7;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

    // optional int64 relation = 8;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relation());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 modelid = 9;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->modelid());
    }

    // optional int32 modeltype = 10;
    if (has_modeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modeltype());
    }

    // optional string scale = 11;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scale());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_yanhua::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_yanhua* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_yanhua*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_yanhua::MergeFrom(const festivalmuban_yanhua& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
    if (from.has_modeltype()) {
      set_modeltype(from.modeltype());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_yanhua::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_yanhua::CopyFrom(const festivalmuban_yanhua& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_yanhua::IsInitialized() const {

  return true;
}

void festivalmuban_yanhua::Swap(festivalmuban_yanhua* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(prof_, other->prof_);
    std::swap(type_, other->type_);
    std::swap(order_, other->order_);
    std::swap(probability_, other->probability_);
    std::swap(relation_, other->relation_);
    std::swap(modelid_, other->modelid_);
    std::swap(modeltype_, other->modeltype_);
    std::swap(scale_, other->scale_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_yanhua::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_yanhua_descriptor_;
  metadata.reflection = festivalmuban_yanhua_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_yanhua::kFestivalmubanYanhuaListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_yanhua::Sheet_festivalmuban_yanhua()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_yanhua::InitAsDefaultInstance() {
}

Sheet_festivalmuban_yanhua::Sheet_festivalmuban_yanhua(const Sheet_festivalmuban_yanhua& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_yanhua::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_yanhua::~Sheet_festivalmuban_yanhua() {
  SharedDtor();
}

void Sheet_festivalmuban_yanhua::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_yanhua::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_yanhua::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_yanhua_descriptor_;
}

const Sheet_festivalmuban_yanhua& Sheet_festivalmuban_yanhua::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_yanhua* Sheet_festivalmuban_yanhua::default_instance_ = NULL;

Sheet_festivalmuban_yanhua* Sheet_festivalmuban_yanhua::New() const {
  return new Sheet_festivalmuban_yanhua;
}

void Sheet_festivalmuban_yanhua::Clear() {
  festivalmuban_yanhua_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_yanhua::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_yanhua festivalmuban_yanhua_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_yanhua_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_yanhua_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_yanhua_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_yanhua::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_yanhua festivalmuban_yanhua_List = 1;
  for (int i = 0; i < this->festivalmuban_yanhua_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_yanhua_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_yanhua::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_yanhua festivalmuban_yanhua_List = 1;
  for (int i = 0; i < this->festivalmuban_yanhua_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_yanhua_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_yanhua::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_yanhua festivalmuban_yanhua_List = 1;
  total_size += 1 * this->festivalmuban_yanhua_list_size();
  for (int i = 0; i < this->festivalmuban_yanhua_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_yanhua_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_yanhua::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_yanhua* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_yanhua*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_yanhua::MergeFrom(const Sheet_festivalmuban_yanhua& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_yanhua_list_.MergeFrom(from.festivalmuban_yanhua_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_yanhua::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_yanhua::CopyFrom(const Sheet_festivalmuban_yanhua& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_yanhua::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_yanhua::Swap(Sheet_festivalmuban_yanhua* other) {
  if (other != this) {
    festivalmuban_yanhua_list_.Swap(&other->festivalmuban_yanhua_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_yanhua::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_yanhua_descriptor_;
  metadata.reflection = Sheet_festivalmuban_yanhua_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalyanhuaConstant::kIdFieldNumber;
const int festivalyanhuaConstant::kCostItemFieldNumber;
const int festivalyanhuaConstant::kRewardPoolFieldNumber;
const int festivalyanhuaConstant::kCoinTyeFieldNumber;
const int festivalyanhuaConstant::kNumberFieldNumber;
#endif  // !_MSC_VER

festivalyanhuaConstant::festivalyanhuaConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalyanhuaConstant::InitAsDefaultInstance() {
}

festivalyanhuaConstant::festivalyanhuaConstant(const festivalyanhuaConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalyanhuaConstant::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  costitem_ = GOOGLE_LONGLONG(0);
  rewardpool_ = 0;
  cointye_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalyanhuaConstant::~festivalyanhuaConstant() {
  SharedDtor();
}

void festivalyanhuaConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalyanhuaConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalyanhuaConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalyanhuaConstant_descriptor_;
}

const festivalyanhuaConstant& festivalyanhuaConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalyanhuaConstant* festivalyanhuaConstant::default_instance_ = NULL;

festivalyanhuaConstant* festivalyanhuaConstant::New() const {
  return new festivalyanhuaConstant;
}

void festivalyanhuaConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    costitem_ = GOOGLE_LONGLONG(0);
    rewardpool_ = 0;
    cointye_ = 0;
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalyanhuaConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_costItem;
        break;
      }

      // optional int64 costItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &costitem_)));
          set_has_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardPool;
        break;
      }

      // optional int32 rewardPool = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardpool_)));
          set_has_rewardpool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_coinTye;
        break;
      }

      // optional int32 coinTye = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coinTye:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cointye_)));
          set_has_cointye();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_number;
        break;
      }

      // optional int32 number = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalyanhuaConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 costItem = 2;
  if (has_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->costitem(), output);
  }

  // optional int32 rewardPool = 3;
  if (has_rewardpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardpool(), output);
  }

  // optional int32 coinTye = 4;
  if (has_cointye()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cointye(), output);
  }

  // optional int32 number = 5;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalyanhuaConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 costItem = 2;
  if (has_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->costitem(), target);
  }

  // optional int32 rewardPool = 3;
  if (has_rewardpool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewardpool(), target);
  }

  // optional int32 coinTye = 4;
  if (has_cointye()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cointye(), target);
  }

  // optional int32 number = 5;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalyanhuaConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 costItem = 2;
    if (has_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->costitem());
    }

    // optional int32 rewardPool = 3;
    if (has_rewardpool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardpool());
    }

    // optional int32 coinTye = 4;
    if (has_cointye()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cointye());
    }

    // optional int32 number = 5;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalyanhuaConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalyanhuaConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalyanhuaConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalyanhuaConstant::MergeFrom(const festivalyanhuaConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_costitem()) {
      set_costitem(from.costitem());
    }
    if (from.has_rewardpool()) {
      set_rewardpool(from.rewardpool());
    }
    if (from.has_cointye()) {
      set_cointye(from.cointye());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalyanhuaConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalyanhuaConstant::CopyFrom(const festivalyanhuaConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalyanhuaConstant::IsInitialized() const {

  return true;
}

void festivalyanhuaConstant::Swap(festivalyanhuaConstant* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(costitem_, other->costitem_);
    std::swap(rewardpool_, other->rewardpool_);
    std::swap(cointye_, other->cointye_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalyanhuaConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalyanhuaConstant_descriptor_;
  metadata.reflection = festivalyanhuaConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalyanhuaConstant::kFestivalyanhuaConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalyanhuaConstant::Sheet_festivalyanhuaConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalyanhuaConstant::InitAsDefaultInstance() {
}

Sheet_festivalyanhuaConstant::Sheet_festivalyanhuaConstant(const Sheet_festivalyanhuaConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalyanhuaConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalyanhuaConstant::~Sheet_festivalyanhuaConstant() {
  SharedDtor();
}

void Sheet_festivalyanhuaConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalyanhuaConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalyanhuaConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalyanhuaConstant_descriptor_;
}

const Sheet_festivalyanhuaConstant& Sheet_festivalyanhuaConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalyanhuaConstant* Sheet_festivalyanhuaConstant::default_instance_ = NULL;

Sheet_festivalyanhuaConstant* Sheet_festivalyanhuaConstant::New() const {
  return new Sheet_festivalyanhuaConstant;
}

void Sheet_festivalyanhuaConstant::Clear() {
  festivalyanhuaconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalyanhuaConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalyanhuaConstant festivalyanhuaConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalyanhuaConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalyanhuaconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalyanhuaConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalyanhuaConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalyanhuaConstant festivalyanhuaConstant_List = 1;
  for (int i = 0; i < this->festivalyanhuaconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalyanhuaconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalyanhuaConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalyanhuaConstant festivalyanhuaConstant_List = 1;
  for (int i = 0; i < this->festivalyanhuaconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalyanhuaconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalyanhuaConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalyanhuaConstant festivalyanhuaConstant_List = 1;
  total_size += 1 * this->festivalyanhuaconstant_list_size();
  for (int i = 0; i < this->festivalyanhuaconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalyanhuaconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalyanhuaConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalyanhuaConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalyanhuaConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalyanhuaConstant::MergeFrom(const Sheet_festivalyanhuaConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalyanhuaconstant_list_.MergeFrom(from.festivalyanhuaconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalyanhuaConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalyanhuaConstant::CopyFrom(const Sheet_festivalyanhuaConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalyanhuaConstant::IsInitialized() const {

  return true;
}

void Sheet_festivalyanhuaConstant::Swap(Sheet_festivalyanhuaConstant* other) {
  if (other != this) {
    festivalyanhuaconstant_list_.Swap(&other->festivalyanhuaconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalyanhuaConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalyanhuaConstant_descriptor_;
  metadata.reflection = Sheet_festivalyanhuaConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_shop::kIdFieldNumber;
const int festivalmuban_shop::kItemidFieldNumber;
const int festivalmuban_shop::kProfFieldNumber;
const int festivalmuban_shop::kPriceAFieldNumber;
const int festivalmuban_shop::kPriceBFieldNumber;
const int festivalmuban_shop::kCurrencyFieldNumber;
const int festivalmuban_shop::kDiscountFieldNumber;
const int festivalmuban_shop::kQuantityFieldNumber;
#endif  // !_MSC_VER

festivalmuban_shop::festivalmuban_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_shop::InitAsDefaultInstance() {
}

festivalmuban_shop::festivalmuban_shop(const festivalmuban_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_shop::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  itemid_ = GOOGLE_LONGLONG(0);
  prof_ = 0;
  pricea_ = 0;
  priceb_ = 0;
  currency_ = 0;
  discount_ = 0;
  quantity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_shop::~festivalmuban_shop() {
  SharedDtor();
}

void festivalmuban_shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_shop_descriptor_;
}

const festivalmuban_shop& festivalmuban_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_shop* festivalmuban_shop::default_instance_ = NULL;

festivalmuban_shop* festivalmuban_shop::New() const {
  return new festivalmuban_shop;
}

void festivalmuban_shop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    itemid_ = GOOGLE_LONGLONG(0);
    prof_ = 0;
    pricea_ = 0;
    priceb_ = 0;
    currency_ = 0;
    discount_ = 0;
    quantity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional int32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_priceA;
        break;
      }

      // optional int32 priceA = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pricea_)));
          set_has_pricea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_priceB;
        break;
      }

      // optional int32 priceB = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_priceB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &priceb_)));
          set_has_priceb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_currency;
        break;
      }

      // optional int32 currency = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_discount;
        break;
      }

      // optional int32 discount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_discount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &discount_)));
          set_has_discount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quantity;
        break;
      }

      // optional int32 quantity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prof(), output);
  }

  // optional int32 priceA = 4;
  if (has_pricea()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pricea(), output);
  }

  // optional int32 priceB = 5;
  if (has_priceb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->priceb(), output);
  }

  // optional int32 currency = 6;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->currency(), output);
  }

  // optional int32 discount = 7;
  if (has_discount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->discount(), output);
  }

  // optional int32 quantity = 8;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quantity(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prof(), target);
  }

  // optional int32 priceA = 4;
  if (has_pricea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pricea(), target);
  }

  // optional int32 priceB = 5;
  if (has_priceb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->priceb(), target);
  }

  // optional int32 currency = 6;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->currency(), target);
  }

  // optional int32 discount = 7;
  if (has_discount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->discount(), target);
  }

  // optional int32 quantity = 8;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quantity(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_shop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 priceA = 4;
    if (has_pricea()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pricea());
    }

    // optional int32 priceB = 5;
    if (has_priceb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->priceb());
    }

    // optional int32 currency = 6;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

    // optional int32 discount = 7;
    if (has_discount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->discount());
    }

    // optional int32 quantity = 8;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quantity());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_shop::MergeFrom(const festivalmuban_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_pricea()) {
      set_pricea(from.pricea());
    }
    if (from.has_priceb()) {
      set_priceb(from.priceb());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_discount()) {
      set_discount(from.discount());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_shop::CopyFrom(const festivalmuban_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_shop::IsInitialized() const {

  return true;
}

void festivalmuban_shop::Swap(festivalmuban_shop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(prof_, other->prof_);
    std::swap(pricea_, other->pricea_);
    std::swap(priceb_, other->priceb_);
    std::swap(currency_, other->currency_);
    std::swap(discount_, other->discount_);
    std::swap(quantity_, other->quantity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_shop_descriptor_;
  metadata.reflection = festivalmuban_shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_shop::kFestivalmubanShopListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_shop::Sheet_festivalmuban_shop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_shop::InitAsDefaultInstance() {
}

Sheet_festivalmuban_shop::Sheet_festivalmuban_shop(const Sheet_festivalmuban_shop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_shop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_shop::~Sheet_festivalmuban_shop() {
  SharedDtor();
}

void Sheet_festivalmuban_shop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_shop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_shop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_shop_descriptor_;
}

const Sheet_festivalmuban_shop& Sheet_festivalmuban_shop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_shop* Sheet_festivalmuban_shop::default_instance_ = NULL;

Sheet_festivalmuban_shop* Sheet_festivalmuban_shop::New() const {
  return new Sheet_festivalmuban_shop;
}

void Sheet_festivalmuban_shop::Clear() {
  festivalmuban_shop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_shop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_shop festivalmuban_shop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_shop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_shop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_shop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_shop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_shop festivalmuban_shop_List = 1;
  for (int i = 0; i < this->festivalmuban_shop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_shop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_shop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_shop festivalmuban_shop_List = 1;
  for (int i = 0; i < this->festivalmuban_shop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_shop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_shop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_shop festivalmuban_shop_List = 1;
  total_size += 1 * this->festivalmuban_shop_list_size();
  for (int i = 0; i < this->festivalmuban_shop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_shop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_shop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_shop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_shop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_shop::MergeFrom(const Sheet_festivalmuban_shop& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_shop_list_.MergeFrom(from.festivalmuban_shop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_shop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_shop::CopyFrom(const Sheet_festivalmuban_shop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_shop::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_shop::Swap(Sheet_festivalmuban_shop* other) {
  if (other != this) {
    festivalmuban_shop_list_.Swap(&other->festivalmuban_shop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_shop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_shop_descriptor_;
  metadata.reflection = Sheet_festivalmuban_shop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_czjb::kIdFieldNumber;
const int festivalmuban_czjb::kRechargePointFieldNumber;
const int festivalmuban_czjb::kPercFieldNumber;
const int festivalmuban_czjb::kFristpresentFieldNumber;
const int festivalmuban_czjb::kPresenttypeFieldNumber;
const int festivalmuban_czjb::kPointFieldNumber;
#endif  // !_MSC_VER

festivalmuban_czjb::festivalmuban_czjb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_czjb::InitAsDefaultInstance() {
}

festivalmuban_czjb::festivalmuban_czjb(const festivalmuban_czjb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_czjb::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  rechargepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  perc_ = 0;
  fristpresent_ = 0;
  presenttype_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_czjb::~festivalmuban_czjb() {
  SharedDtor();
}

void festivalmuban_czjb::SharedDtor() {
  if (rechargepoint_ != &::google::protobuf::internal::kEmptyString) {
    delete rechargepoint_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_czjb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_czjb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_czjb_descriptor_;
}

const festivalmuban_czjb& festivalmuban_czjb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_czjb* festivalmuban_czjb::default_instance_ = NULL;

festivalmuban_czjb* festivalmuban_czjb::New() const {
  return new festivalmuban_czjb;
}

void festivalmuban_czjb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_rechargepoint()) {
      if (rechargepoint_ != &::google::protobuf::internal::kEmptyString) {
        rechargepoint_->clear();
      }
    }
    perc_ = 0;
    fristpresent_ = 0;
    presenttype_ = 0;
    point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_czjb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RechargePoint;
        break;
      }

      // optional string RechargePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RechargePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rechargepoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rechargepoint().data(), this->rechargepoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Perc;
        break;
      }

      // optional int32 Perc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Perc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perc_)));
          set_has_perc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fristpresent;
        break;
      }

      // optional int32 fristpresent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fristpresent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fristpresent_)));
          set_has_fristpresent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_presenttype;
        break;
      }

      // optional int32 presenttype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presenttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presenttype_)));
          set_has_presenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Point;
        break;
      }

      // optional int32 Point = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_czjb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string RechargePoint = 2;
  if (has_rechargepoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargepoint().data(), this->rechargepoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rechargepoint(), output);
  }

  // optional int32 Perc = 3;
  if (has_perc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->perc(), output);
  }

  // optional int32 fristpresent = 4;
  if (has_fristpresent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fristpresent(), output);
  }

  // optional int32 presenttype = 5;
  if (has_presenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->presenttype(), output);
  }

  // optional int32 Point = 6;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_czjb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string RechargePoint = 2;
  if (has_rechargepoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargepoint().data(), this->rechargepoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rechargepoint(), target);
  }

  // optional int32 Perc = 3;
  if (has_perc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->perc(), target);
  }

  // optional int32 fristpresent = 4;
  if (has_fristpresent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fristpresent(), target);
  }

  // optional int32 presenttype = 5;
  if (has_presenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->presenttype(), target);
  }

  // optional int32 Point = 6;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_czjb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string RechargePoint = 2;
    if (has_rechargepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rechargepoint());
    }

    // optional int32 Perc = 3;
    if (has_perc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->perc());
    }

    // optional int32 fristpresent = 4;
    if (has_fristpresent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fristpresent());
    }

    // optional int32 presenttype = 5;
    if (has_presenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presenttype());
    }

    // optional int32 Point = 6;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_czjb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_czjb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_czjb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_czjb::MergeFrom(const festivalmuban_czjb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rechargepoint()) {
      set_rechargepoint(from.rechargepoint());
    }
    if (from.has_perc()) {
      set_perc(from.perc());
    }
    if (from.has_fristpresent()) {
      set_fristpresent(from.fristpresent());
    }
    if (from.has_presenttype()) {
      set_presenttype(from.presenttype());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_czjb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_czjb::CopyFrom(const festivalmuban_czjb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_czjb::IsInitialized() const {

  return true;
}

void festivalmuban_czjb::Swap(festivalmuban_czjb* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rechargepoint_, other->rechargepoint_);
    std::swap(perc_, other->perc_);
    std::swap(fristpresent_, other->fristpresent_);
    std::swap(presenttype_, other->presenttype_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_czjb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_czjb_descriptor_;
  metadata.reflection = festivalmuban_czjb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_czjb::kFestivalmubanCzjbListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_czjb::Sheet_festivalmuban_czjb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_czjb::InitAsDefaultInstance() {
}

Sheet_festivalmuban_czjb::Sheet_festivalmuban_czjb(const Sheet_festivalmuban_czjb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_czjb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_czjb::~Sheet_festivalmuban_czjb() {
  SharedDtor();
}

void Sheet_festivalmuban_czjb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_czjb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_czjb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_czjb_descriptor_;
}

const Sheet_festivalmuban_czjb& Sheet_festivalmuban_czjb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_czjb* Sheet_festivalmuban_czjb::default_instance_ = NULL;

Sheet_festivalmuban_czjb* Sheet_festivalmuban_czjb::New() const {
  return new Sheet_festivalmuban_czjb;
}

void Sheet_festivalmuban_czjb::Clear() {
  festivalmuban_czjb_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_czjb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_czjb festivalmuban_czjb_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_czjb_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_czjb_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_czjb_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_czjb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_czjb festivalmuban_czjb_List = 1;
  for (int i = 0; i < this->festivalmuban_czjb_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_czjb_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_czjb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_czjb festivalmuban_czjb_List = 1;
  for (int i = 0; i < this->festivalmuban_czjb_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_czjb_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_czjb::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_czjb festivalmuban_czjb_List = 1;
  total_size += 1 * this->festivalmuban_czjb_list_size();
  for (int i = 0; i < this->festivalmuban_czjb_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_czjb_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_czjb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_czjb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_czjb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_czjb::MergeFrom(const Sheet_festivalmuban_czjb& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_czjb_list_.MergeFrom(from.festivalmuban_czjb_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_czjb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_czjb::CopyFrom(const Sheet_festivalmuban_czjb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_czjb::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_czjb::Swap(Sheet_festivalmuban_czjb* other) {
  if (other != this) {
    festivalmuban_czjb_list_.Swap(&other->festivalmuban_czjb_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_czjb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_czjb_descriptor_;
  metadata.reflection = Sheet_festivalmuban_czjb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_scsb::kIdFieldNumber;
const int festivalmuban_scsb::kRechargePointFieldNumber;
const int festivalmuban_scsb::kFristpresentFieldNumber;
const int festivalmuban_scsb::kPresenttypeFieldNumber;
const int festivalmuban_scsb::kPointFieldNumber;
#endif  // !_MSC_VER

festivalmuban_scsb::festivalmuban_scsb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_scsb::InitAsDefaultInstance() {
}

festivalmuban_scsb::festivalmuban_scsb(const festivalmuban_scsb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_scsb::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  rechargepoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fristpresent_ = 0;
  presenttype_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_scsb::~festivalmuban_scsb() {
  SharedDtor();
}

void festivalmuban_scsb::SharedDtor() {
  if (rechargepoint_ != &::google::protobuf::internal::kEmptyString) {
    delete rechargepoint_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_scsb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_scsb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_scsb_descriptor_;
}

const festivalmuban_scsb& festivalmuban_scsb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_scsb* festivalmuban_scsb::default_instance_ = NULL;

festivalmuban_scsb* festivalmuban_scsb::New() const {
  return new festivalmuban_scsb;
}

void festivalmuban_scsb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_rechargepoint()) {
      if (rechargepoint_ != &::google::protobuf::internal::kEmptyString) {
        rechargepoint_->clear();
      }
    }
    fristpresent_ = 0;
    presenttype_ = 0;
    point_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_scsb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_RechargePoint;
        break;
      }

      // optional string RechargePoint = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RechargePoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rechargepoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rechargepoint().data(), this->rechargepoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fristpresent;
        break;
      }

      // optional int32 fristpresent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fristpresent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fristpresent_)));
          set_has_fristpresent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_presenttype;
        break;
      }

      // optional int32 presenttype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presenttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presenttype_)));
          set_has_presenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Point;
        break;
      }

      // optional int32 Point = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_scsb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string RechargePoint = 2;
  if (has_rechargepoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargepoint().data(), this->rechargepoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rechargepoint(), output);
  }

  // optional int32 fristpresent = 3;
  if (has_fristpresent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fristpresent(), output);
  }

  // optional int32 presenttype = 4;
  if (has_presenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->presenttype(), output);
  }

  // optional int32 Point = 5;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_scsb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string RechargePoint = 2;
  if (has_rechargepoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rechargepoint().data(), this->rechargepoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rechargepoint(), target);
  }

  // optional int32 fristpresent = 3;
  if (has_fristpresent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fristpresent(), target);
  }

  // optional int32 presenttype = 4;
  if (has_presenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->presenttype(), target);
  }

  // optional int32 Point = 5;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_scsb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string RechargePoint = 2;
    if (has_rechargepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rechargepoint());
    }

    // optional int32 fristpresent = 3;
    if (has_fristpresent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fristpresent());
    }

    // optional int32 presenttype = 4;
    if (has_presenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presenttype());
    }

    // optional int32 Point = 5;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_scsb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_scsb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_scsb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_scsb::MergeFrom(const festivalmuban_scsb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_rechargepoint()) {
      set_rechargepoint(from.rechargepoint());
    }
    if (from.has_fristpresent()) {
      set_fristpresent(from.fristpresent());
    }
    if (from.has_presenttype()) {
      set_presenttype(from.presenttype());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_scsb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_scsb::CopyFrom(const festivalmuban_scsb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_scsb::IsInitialized() const {

  return true;
}

void festivalmuban_scsb::Swap(festivalmuban_scsb* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(rechargepoint_, other->rechargepoint_);
    std::swap(fristpresent_, other->fristpresent_);
    std::swap(presenttype_, other->presenttype_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_scsb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_scsb_descriptor_;
  metadata.reflection = festivalmuban_scsb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_scsb::kFestivalmubanScsbListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_scsb::Sheet_festivalmuban_scsb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_scsb::InitAsDefaultInstance() {
}

Sheet_festivalmuban_scsb::Sheet_festivalmuban_scsb(const Sheet_festivalmuban_scsb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_scsb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_scsb::~Sheet_festivalmuban_scsb() {
  SharedDtor();
}

void Sheet_festivalmuban_scsb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_scsb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_scsb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_scsb_descriptor_;
}

const Sheet_festivalmuban_scsb& Sheet_festivalmuban_scsb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_scsb* Sheet_festivalmuban_scsb::default_instance_ = NULL;

Sheet_festivalmuban_scsb* Sheet_festivalmuban_scsb::New() const {
  return new Sheet_festivalmuban_scsb;
}

void Sheet_festivalmuban_scsb::Clear() {
  festivalmuban_scsb_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_scsb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_scsb festivalmuban_scsb_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_scsb_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_scsb_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_scsb_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_scsb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_scsb festivalmuban_scsb_List = 1;
  for (int i = 0; i < this->festivalmuban_scsb_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_scsb_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_scsb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_scsb festivalmuban_scsb_List = 1;
  for (int i = 0; i < this->festivalmuban_scsb_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_scsb_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_scsb::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_scsb festivalmuban_scsb_List = 1;
  total_size += 1 * this->festivalmuban_scsb_list_size();
  for (int i = 0; i < this->festivalmuban_scsb_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_scsb_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_scsb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_scsb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_scsb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_scsb::MergeFrom(const Sheet_festivalmuban_scsb& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_scsb_list_.MergeFrom(from.festivalmuban_scsb_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_scsb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_scsb::CopyFrom(const Sheet_festivalmuban_scsb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_scsb::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_scsb::Swap(Sheet_festivalmuban_scsb* other) {
  if (other != this) {
    festivalmuban_scsb_list_.Swap(&other->festivalmuban_scsb_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_scsb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_scsb_descriptor_;
  metadata.reflection = Sheet_festivalmuban_scsb_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_eggs::kIdFieldNumber;
const int festivalmuban_eggs::kItemidFieldNumber;
const int festivalmuban_eggs::kNumFieldNumber;
const int festivalmuban_eggs::kProfFieldNumber;
const int festivalmuban_eggs::kTypeFieldNumber;
const int festivalmuban_eggs::kOrderFieldNumber;
const int festivalmuban_eggs::kIsnoteFieldNumber;
const int festivalmuban_eggs::kProbabilityFieldNumber;
const int festivalmuban_eggs::kRelationFieldNumber;
#endif  // !_MSC_VER

festivalmuban_eggs::festivalmuban_eggs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_eggs::InitAsDefaultInstance() {
}

festivalmuban_eggs::festivalmuban_eggs(const festivalmuban_eggs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_eggs::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  prof_ = 0;
  type_ = 0;
  order_ = 0;
  isnote_ = 0;
  probability_ = 0;
  relation_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_eggs::~festivalmuban_eggs() {
  SharedDtor();
}

void festivalmuban_eggs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_eggs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_eggs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_eggs_descriptor_;
}

const festivalmuban_eggs& festivalmuban_eggs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_eggs* festivalmuban_eggs::default_instance_ = NULL;

festivalmuban_eggs* festivalmuban_eggs::New() const {
  return new festivalmuban_eggs;
}

void festivalmuban_eggs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    prof_ = 0;
    type_ = 0;
    order_ = 0;
    isnote_ = 0;
    probability_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    relation_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_eggs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemid;
        break;
      }

      // optional int64 itemid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional int32 type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_order;
        break;
      }

      // optional int32 order = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_)));
          set_has_order();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isnote;
        break;
      }

      // optional int32 isnote = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isnote:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isnote_)));
          set_has_isnote();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_probability;
        break;
      }

      // optional int32 probability = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &probability_)));
          set_has_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_relation;
        break;
      }

      // optional int64 relation = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &relation_)));
          set_has_relation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_eggs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional int32 type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->type(), output);
  }

  // optional int32 order = 6;
  if (has_order()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->order(), output);
  }

  // optional int32 isnote = 7;
  if (has_isnote()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isnote(), output);
  }

  // optional int32 probability = 8;
  if (has_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->probability(), output);
  }

  // optional int64 relation = 9;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->relation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_eggs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 itemid = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional int32 type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->type(), target);
  }

  // optional int32 order = 6;
  if (has_order()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->order(), target);
  }

  // optional int32 isnote = 7;
  if (has_isnote()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isnote(), target);
  }

  // optional int32 probability = 8;
  if (has_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->probability(), target);
  }

  // optional int64 relation = 9;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->relation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_eggs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 itemid = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional int32 type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 order = 6;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order());
    }

    // optional int32 isnote = 7;
    if (has_isnote()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isnote());
    }

    // optional int32 probability = 8;
    if (has_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->probability());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 relation = 9;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->relation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_eggs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_eggs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_eggs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_eggs::MergeFrom(const festivalmuban_eggs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_isnote()) {
      set_isnote(from.isnote());
    }
    if (from.has_probability()) {
      set_probability(from.probability());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_relation()) {
      set_relation(from.relation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_eggs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_eggs::CopyFrom(const festivalmuban_eggs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_eggs::IsInitialized() const {

  return true;
}

void festivalmuban_eggs::Swap(festivalmuban_eggs* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(prof_, other->prof_);
    std::swap(type_, other->type_);
    std::swap(order_, other->order_);
    std::swap(isnote_, other->isnote_);
    std::swap(probability_, other->probability_);
    std::swap(relation_, other->relation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_eggs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_eggs_descriptor_;
  metadata.reflection = festivalmuban_eggs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_eggs::kFestivalmubanEggsListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_eggs::Sheet_festivalmuban_eggs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_eggs::InitAsDefaultInstance() {
}

Sheet_festivalmuban_eggs::Sheet_festivalmuban_eggs(const Sheet_festivalmuban_eggs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_eggs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_eggs::~Sheet_festivalmuban_eggs() {
  SharedDtor();
}

void Sheet_festivalmuban_eggs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_eggs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_eggs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_eggs_descriptor_;
}

const Sheet_festivalmuban_eggs& Sheet_festivalmuban_eggs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_eggs* Sheet_festivalmuban_eggs::default_instance_ = NULL;

Sheet_festivalmuban_eggs* Sheet_festivalmuban_eggs::New() const {
  return new Sheet_festivalmuban_eggs;
}

void Sheet_festivalmuban_eggs::Clear() {
  festivalmuban_eggs_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_eggs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_eggs festivalmuban_eggs_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_eggs_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_eggs_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_eggs_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_eggs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_eggs festivalmuban_eggs_List = 1;
  for (int i = 0; i < this->festivalmuban_eggs_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_eggs_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_eggs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_eggs festivalmuban_eggs_List = 1;
  for (int i = 0; i < this->festivalmuban_eggs_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_eggs_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_eggs::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_eggs festivalmuban_eggs_List = 1;
  total_size += 1 * this->festivalmuban_eggs_list_size();
  for (int i = 0; i < this->festivalmuban_eggs_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_eggs_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_eggs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_eggs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_eggs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_eggs::MergeFrom(const Sheet_festivalmuban_eggs& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_eggs_list_.MergeFrom(from.festivalmuban_eggs_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_eggs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_eggs::CopyFrom(const Sheet_festivalmuban_eggs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_eggs::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_eggs::Swap(Sheet_festivalmuban_eggs* other) {
  if (other != this) {
    festivalmuban_eggs_list_.Swap(&other->festivalmuban_eggs_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_eggs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_eggs_descriptor_;
  metadata.reflection = Sheet_festivalmuban_eggs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivaleggConstant::kIdFieldNumber;
const int festivaleggConstant::kExRewardFieldNumber;
const int festivaleggConstant::kCostItemFieldNumber;
const int festivaleggConstant::kFreeTimeFieldNumber;
const int festivaleggConstant::kPoolChangeFieldNumber;
const int festivaleggConstant::kSpecialRateFieldNumber;
const int festivaleggConstant::kSpecialAddRateFieldNumber;
const int festivaleggConstant::kFlashCostFieldNumber;
const int festivaleggConstant::kLimitFieldNumber;
const int festivaleggConstant::kRewardPoolFieldNumber;
#endif  // !_MSC_VER

festivaleggConstant::festivaleggConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivaleggConstant::InitAsDefaultInstance() {
}

festivaleggConstant::festivaleggConstant(const festivaleggConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivaleggConstant::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  exreward_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  costitem_ = GOOGLE_LONGLONG(0);
  freetime_ = 0;
  poolchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  specialrate_ = 0;
  specialaddrate_ = 0;
  flashcost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  limit_ = 0;
  rewardpool_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivaleggConstant::~festivaleggConstant() {
  SharedDtor();
}

void festivaleggConstant::SharedDtor() {
  if (exreward_ != &::google::protobuf::internal::kEmptyString) {
    delete exreward_;
  }
  if (poolchange_ != &::google::protobuf::internal::kEmptyString) {
    delete poolchange_;
  }
  if (flashcost_ != &::google::protobuf::internal::kEmptyString) {
    delete flashcost_;
  }
  if (this != default_instance_) {
  }
}

void festivaleggConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivaleggConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivaleggConstant_descriptor_;
}

const festivaleggConstant& festivaleggConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivaleggConstant* festivaleggConstant::default_instance_ = NULL;

festivaleggConstant* festivaleggConstant::New() const {
  return new festivaleggConstant;
}

void festivaleggConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_exreward()) {
      if (exreward_ != &::google::protobuf::internal::kEmptyString) {
        exreward_->clear();
      }
    }
    costitem_ = GOOGLE_LONGLONG(0);
    freetime_ = 0;
    if (has_poolchange()) {
      if (poolchange_ != &::google::protobuf::internal::kEmptyString) {
        poolchange_->clear();
      }
    }
    specialrate_ = 0;
    specialaddrate_ = 0;
    if (has_flashcost()) {
      if (flashcost_ != &::google::protobuf::internal::kEmptyString) {
        flashcost_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    limit_ = 0;
    rewardpool_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivaleggConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_exReward;
        break;
      }

      // optional string exReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exreward()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exreward().data(), this->exreward().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_costItem;
        break;
      }

      // optional int64 costItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &costitem_)));
          set_has_costitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_freeTime;
        break;
      }

      // optional int32 freeTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freetime_)));
          set_has_freetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_poolChange;
        break;
      }

      // optional string poolChange = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poolChange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poolchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poolchange().data(), this->poolchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_specialRate;
        break;
      }

      // optional int32 specialRate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialrate_)));
          set_has_specialrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_specialAddRate;
        break;
      }

      // optional int32 specialAddRate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_specialAddRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &specialaddrate_)));
          set_has_specialaddrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_flashCost;
        break;
      }

      // optional string flashCost = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flashCost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flashcost()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flashcost().data(), this->flashcost().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_limit;
        break;
      }

      // optional int32 limit = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_rewardPool;
        break;
      }

      // optional int32 rewardPool = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardPool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardpool_)));
          set_has_rewardpool();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivaleggConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string exReward = 2;
  if (has_exreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exreward().data(), this->exreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->exreward(), output);
  }

  // optional int64 costItem = 3;
  if (has_costitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->costitem(), output);
  }

  // optional int32 freeTime = 4;
  if (has_freetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->freetime(), output);
  }

  // optional string poolChange = 5;
  if (has_poolchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolchange().data(), this->poolchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->poolchange(), output);
  }

  // optional int32 specialRate = 6;
  if (has_specialrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->specialrate(), output);
  }

  // optional int32 specialAddRate = 7;
  if (has_specialaddrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->specialaddrate(), output);
  }

  // optional string flashCost = 8;
  if (has_flashcost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flashcost().data(), this->flashcost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->flashcost(), output);
  }

  // optional int32 limit = 9;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->limit(), output);
  }

  // optional int32 rewardPool = 10;
  if (has_rewardpool()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->rewardpool(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivaleggConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string exReward = 2;
  if (has_exreward()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exreward().data(), this->exreward().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exreward(), target);
  }

  // optional int64 costItem = 3;
  if (has_costitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->costitem(), target);
  }

  // optional int32 freeTime = 4;
  if (has_freetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->freetime(), target);
  }

  // optional string poolChange = 5;
  if (has_poolchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poolchange().data(), this->poolchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->poolchange(), target);
  }

  // optional int32 specialRate = 6;
  if (has_specialrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->specialrate(), target);
  }

  // optional int32 specialAddRate = 7;
  if (has_specialaddrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->specialaddrate(), target);
  }

  // optional string flashCost = 8;
  if (has_flashcost()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flashcost().data(), this->flashcost().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->flashcost(), target);
  }

  // optional int32 limit = 9;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->limit(), target);
  }

  // optional int32 rewardPool = 10;
  if (has_rewardpool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->rewardpool(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivaleggConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string exReward = 2;
    if (has_exreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exreward());
    }

    // optional int64 costItem = 3;
    if (has_costitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->costitem());
    }

    // optional int32 freeTime = 4;
    if (has_freetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freetime());
    }

    // optional string poolChange = 5;
    if (has_poolchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poolchange());
    }

    // optional int32 specialRate = 6;
    if (has_specialrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialrate());
    }

    // optional int32 specialAddRate = 7;
    if (has_specialaddrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->specialaddrate());
    }

    // optional string flashCost = 8;
    if (has_flashcost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flashcost());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 limit = 9;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional int32 rewardPool = 10;
    if (has_rewardpool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardpool());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivaleggConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivaleggConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivaleggConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivaleggConstant::MergeFrom(const festivaleggConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exreward()) {
      set_exreward(from.exreward());
    }
    if (from.has_costitem()) {
      set_costitem(from.costitem());
    }
    if (from.has_freetime()) {
      set_freetime(from.freetime());
    }
    if (from.has_poolchange()) {
      set_poolchange(from.poolchange());
    }
    if (from.has_specialrate()) {
      set_specialrate(from.specialrate());
    }
    if (from.has_specialaddrate()) {
      set_specialaddrate(from.specialaddrate());
    }
    if (from.has_flashcost()) {
      set_flashcost(from.flashcost());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_rewardpool()) {
      set_rewardpool(from.rewardpool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivaleggConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivaleggConstant::CopyFrom(const festivaleggConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivaleggConstant::IsInitialized() const {

  return true;
}

void festivaleggConstant::Swap(festivaleggConstant* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exreward_, other->exreward_);
    std::swap(costitem_, other->costitem_);
    std::swap(freetime_, other->freetime_);
    std::swap(poolchange_, other->poolchange_);
    std::swap(specialrate_, other->specialrate_);
    std::swap(specialaddrate_, other->specialaddrate_);
    std::swap(flashcost_, other->flashcost_);
    std::swap(limit_, other->limit_);
    std::swap(rewardpool_, other->rewardpool_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivaleggConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivaleggConstant_descriptor_;
  metadata.reflection = festivaleggConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivaleggConstant::kFestivaleggConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivaleggConstant::Sheet_festivaleggConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivaleggConstant::InitAsDefaultInstance() {
}

Sheet_festivaleggConstant::Sheet_festivaleggConstant(const Sheet_festivaleggConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivaleggConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivaleggConstant::~Sheet_festivaleggConstant() {
  SharedDtor();
}

void Sheet_festivaleggConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivaleggConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivaleggConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivaleggConstant_descriptor_;
}

const Sheet_festivaleggConstant& Sheet_festivaleggConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivaleggConstant* Sheet_festivaleggConstant::default_instance_ = NULL;

Sheet_festivaleggConstant* Sheet_festivaleggConstant::New() const {
  return new Sheet_festivaleggConstant;
}

void Sheet_festivaleggConstant::Clear() {
  festivaleggconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivaleggConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivaleggConstant festivaleggConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivaleggConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivaleggconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivaleggConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivaleggConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivaleggConstant festivaleggConstant_List = 1;
  for (int i = 0; i < this->festivaleggconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivaleggconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivaleggConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivaleggConstant festivaleggConstant_List = 1;
  for (int i = 0; i < this->festivaleggconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivaleggconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivaleggConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivaleggConstant festivaleggConstant_List = 1;
  total_size += 1 * this->festivaleggconstant_list_size();
  for (int i = 0; i < this->festivaleggconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivaleggconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivaleggConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivaleggConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivaleggConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivaleggConstant::MergeFrom(const Sheet_festivaleggConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivaleggconstant_list_.MergeFrom(from.festivaleggconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivaleggConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivaleggConstant::CopyFrom(const Sheet_festivaleggConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivaleggConstant::IsInitialized() const {

  return true;
}

void Sheet_festivaleggConstant::Swap(Sheet_festivaleggConstant* other) {
  if (other != this) {
    festivaleggconstant_list_.Swap(&other->festivaleggconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivaleggConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivaleggConstant_descriptor_;
  metadata.reflection = Sheet_festivaleggConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalconstant::kConstantidFieldNumber;
const int festivalconstant::kConstantdataFieldNumber;
const int festivalconstant::kStringdataFieldNumber;
#endif  // !_MSC_VER

festivalconstant::festivalconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalconstant::InitAsDefaultInstance() {
}

festivalconstant::festivalconstant(const festivalconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalconstant::SharedCtor() {
  _cached_size_ = 0;
  constantid_ = GOOGLE_LONGLONG(0);
  constantdata_ = GOOGLE_LONGLONG(0);
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalconstant::~festivalconstant() {
  SharedDtor();
}

void festivalconstant::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void festivalconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalconstant_descriptor_;
}

const festivalconstant& festivalconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalconstant* festivalconstant::default_instance_ = NULL;

festivalconstant* festivalconstant::New() const {
  return new festivalconstant;
}

void festivalconstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    constantid_ = GOOGLE_LONGLONG(0);
    constantdata_ = GOOGLE_LONGLONG(0);
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 constantid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantid_)));
          set_has_constantid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_constantdata;
        break;
      }

      // optional int64 constantdata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_constantdata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &constantdata_)));
          set_has_constantdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 constantid = 1;
  if (has_constantid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->constantid(), output);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->constantdata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 constantid = 1;
  if (has_constantid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->constantid(), target);
  }

  // optional int64 constantdata = 2;
  if (has_constantdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->constantdata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalconstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 constantid = 1;
    if (has_constantid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantid());
    }

    // optional int64 constantdata = 2;
    if (has_constantdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->constantdata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalconstant::MergeFrom(const festivalconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_constantid()) {
      set_constantid(from.constantid());
    }
    if (from.has_constantdata()) {
      set_constantdata(from.constantdata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalconstant::CopyFrom(const festivalconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalconstant::IsInitialized() const {

  return true;
}

void festivalconstant::Swap(festivalconstant* other) {
  if (other != this) {
    std::swap(constantid_, other->constantid_);
    std::swap(constantdata_, other->constantdata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalconstant_descriptor_;
  metadata.reflection = festivalconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalconstant::kFestivalconstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalconstant::Sheet_festivalconstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalconstant::InitAsDefaultInstance() {
}

Sheet_festivalconstant::Sheet_festivalconstant(const Sheet_festivalconstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalconstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalconstant::~Sheet_festivalconstant() {
  SharedDtor();
}

void Sheet_festivalconstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalconstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalconstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalconstant_descriptor_;
}

const Sheet_festivalconstant& Sheet_festivalconstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalconstant* Sheet_festivalconstant::default_instance_ = NULL;

Sheet_festivalconstant* Sheet_festivalconstant::New() const {
  return new Sheet_festivalconstant;
}

void Sheet_festivalconstant::Clear() {
  festivalconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalconstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalconstant festivalconstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalconstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalconstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalconstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalconstant festivalconstant_List = 1;
  for (int i = 0; i < this->festivalconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalconstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalconstant festivalconstant_List = 1;
  for (int i = 0; i < this->festivalconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalconstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalconstant festivalconstant_List = 1;
  total_size += 1 * this->festivalconstant_list_size();
  for (int i = 0; i < this->festivalconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalconstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalconstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalconstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalconstant::MergeFrom(const Sheet_festivalconstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalconstant_list_.MergeFrom(from.festivalconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalconstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalconstant::CopyFrom(const Sheet_festivalconstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalconstant::IsInitialized() const {

  return true;
}

void Sheet_festivalconstant::Swap(Sheet_festivalconstant* other) {
  if (other != this) {
    festivalconstant_list_.Swap(&other->festivalconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalconstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalconstant_descriptor_;
  metadata.reflection = Sheet_festivalconstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_shousha::kIdFieldNumber;
const int festivalmuban_shousha::kBossIdFieldNumber;
const int festivalmuban_shousha::kBoxIdFieldNumber;
const int festivalmuban_shousha::kLinkidFieldNumber;
#endif  // !_MSC_VER

festivalmuban_shousha::festivalmuban_shousha()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_shousha::InitAsDefaultInstance() {
}

festivalmuban_shousha::festivalmuban_shousha(const festivalmuban_shousha& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_shousha::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  bossid_ = GOOGLE_LONGLONG(0);
  boxid_ = GOOGLE_LONGLONG(0);
  linkid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_shousha::~festivalmuban_shousha() {
  SharedDtor();
}

void festivalmuban_shousha::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalmuban_shousha::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_shousha::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_shousha_descriptor_;
}

const festivalmuban_shousha& festivalmuban_shousha::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_shousha* festivalmuban_shousha::default_instance_ = NULL;

festivalmuban_shousha* festivalmuban_shousha::New() const {
  return new festivalmuban_shousha;
}

void festivalmuban_shousha::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    bossid_ = GOOGLE_LONGLONG(0);
    boxid_ = GOOGLE_LONGLONG(0);
    linkid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_shousha::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bossId;
        break;
      }

      // optional int64 bossId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bossId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_boxId;
        break;
      }

      // optional int64 boxId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_linkid;
        break;
      }

      // optional int64 linkid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_linkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &linkid_)));
          set_has_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_shousha::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->bossid(), output);
  }

  // optional int64 boxId = 3;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->boxid(), output);
  }

  // optional int64 linkid = 4;
  if (has_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->linkid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_shousha::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 bossId = 2;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->bossid(), target);
  }

  // optional int64 boxId = 3;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->boxid(), target);
  }

  // optional int64 linkid = 4;
  if (has_linkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->linkid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_shousha::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 bossId = 2;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bossid());
    }

    // optional int64 boxId = 3;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int64 linkid = 4;
    if (has_linkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->linkid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_shousha::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_shousha* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_shousha*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_shousha::MergeFrom(const festivalmuban_shousha& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_linkid()) {
      set_linkid(from.linkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_shousha::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_shousha::CopyFrom(const festivalmuban_shousha& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_shousha::IsInitialized() const {

  return true;
}

void festivalmuban_shousha::Swap(festivalmuban_shousha* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(bossid_, other->bossid_);
    std::swap(boxid_, other->boxid_);
    std::swap(linkid_, other->linkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_shousha::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_shousha_descriptor_;
  metadata.reflection = festivalmuban_shousha_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_shousha::kFestivalmubanShoushaListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_shousha::Sheet_festivalmuban_shousha()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_shousha::InitAsDefaultInstance() {
}

Sheet_festivalmuban_shousha::Sheet_festivalmuban_shousha(const Sheet_festivalmuban_shousha& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_shousha::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_shousha::~Sheet_festivalmuban_shousha() {
  SharedDtor();
}

void Sheet_festivalmuban_shousha::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_shousha::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_shousha::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_shousha_descriptor_;
}

const Sheet_festivalmuban_shousha& Sheet_festivalmuban_shousha::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_shousha* Sheet_festivalmuban_shousha::default_instance_ = NULL;

Sheet_festivalmuban_shousha* Sheet_festivalmuban_shousha::New() const {
  return new Sheet_festivalmuban_shousha;
}

void Sheet_festivalmuban_shousha::Clear() {
  festivalmuban_shousha_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_shousha::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_shousha festivalmuban_shousha_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_shousha_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_shousha_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_shousha_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_shousha::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_shousha festivalmuban_shousha_List = 1;
  for (int i = 0; i < this->festivalmuban_shousha_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_shousha_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_shousha::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_shousha festivalmuban_shousha_List = 1;
  for (int i = 0; i < this->festivalmuban_shousha_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_shousha_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_shousha::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_shousha festivalmuban_shousha_List = 1;
  total_size += 1 * this->festivalmuban_shousha_list_size();
  for (int i = 0; i < this->festivalmuban_shousha_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_shousha_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_shousha::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_shousha* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_shousha*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_shousha::MergeFrom(const Sheet_festivalmuban_shousha& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_shousha_list_.MergeFrom(from.festivalmuban_shousha_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_shousha::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_shousha::CopyFrom(const Sheet_festivalmuban_shousha& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_shousha::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_shousha::Swap(Sheet_festivalmuban_shousha* other) {
  if (other != this) {
    festivalmuban_shousha_list_.Swap(&other->festivalmuban_shousha_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_shousha::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_shousha_descriptor_;
  metadata.reflection = Sheet_festivalmuban_shousha_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalmuban_huoyue::kIdFieldNumber;
const int festivalmuban_huoyue::kActivityFieldNumber;
const int festivalmuban_huoyue::kDescFieldNumber;
const int festivalmuban_huoyue::kBoxIdFieldNumber;
#endif  // !_MSC_VER

festivalmuban_huoyue::festivalmuban_huoyue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalmuban_huoyue::InitAsDefaultInstance() {
}

festivalmuban_huoyue::festivalmuban_huoyue(const festivalmuban_huoyue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalmuban_huoyue::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  activity_ = 0;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  boxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalmuban_huoyue::~festivalmuban_huoyue() {
  SharedDtor();
}

void festivalmuban_huoyue::SharedDtor() {
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void festivalmuban_huoyue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalmuban_huoyue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalmuban_huoyue_descriptor_;
}

const festivalmuban_huoyue& festivalmuban_huoyue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

festivalmuban_huoyue* festivalmuban_huoyue::default_instance_ = NULL;

festivalmuban_huoyue* festivalmuban_huoyue::New() const {
  return new festivalmuban_huoyue;
}

void festivalmuban_huoyue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    activity_ = 0;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
    boxid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalmuban_huoyue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activity;
        break;
      }

      // optional int32 activity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activity_)));
          set_has_activity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_desc;
        break;
      }

      // optional string desc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxId;
        break;
      }

      // optional int64 boxId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalmuban_huoyue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 activity = 2;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->activity(), output);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->desc(), output);
  }

  // optional int64 boxId = 4;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalmuban_huoyue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 activity = 2;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->activity(), target);
  }

  // optional string desc = 3;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->desc(), target);
  }

  // optional int64 boxId = 4;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalmuban_huoyue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 activity = 2;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activity());
    }

    // optional string desc = 3;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

    // optional int64 boxId = 4;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalmuban_huoyue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalmuban_huoyue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalmuban_huoyue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalmuban_huoyue::MergeFrom(const festivalmuban_huoyue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalmuban_huoyue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalmuban_huoyue::CopyFrom(const festivalmuban_huoyue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalmuban_huoyue::IsInitialized() const {

  return true;
}

void festivalmuban_huoyue::Swap(festivalmuban_huoyue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(activity_, other->activity_);
    std::swap(desc_, other->desc_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalmuban_huoyue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalmuban_huoyue_descriptor_;
  metadata.reflection = festivalmuban_huoyue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_festivalmuban_huoyue::kFestivalmubanHuoyueListFieldNumber;
#endif  // !_MSC_VER

Sheet_festivalmuban_huoyue::Sheet_festivalmuban_huoyue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_festivalmuban_huoyue::InitAsDefaultInstance() {
}

Sheet_festivalmuban_huoyue::Sheet_festivalmuban_huoyue(const Sheet_festivalmuban_huoyue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_festivalmuban_huoyue::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_festivalmuban_huoyue::~Sheet_festivalmuban_huoyue() {
  SharedDtor();
}

void Sheet_festivalmuban_huoyue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_festivalmuban_huoyue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_festivalmuban_huoyue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_festivalmuban_huoyue_descriptor_;
}

const Sheet_festivalmuban_huoyue& Sheet_festivalmuban_huoyue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_festival_2eproto();
  return *default_instance_;
}

Sheet_festivalmuban_huoyue* Sheet_festivalmuban_huoyue::default_instance_ = NULL;

Sheet_festivalmuban_huoyue* Sheet_festivalmuban_huoyue::New() const {
  return new Sheet_festivalmuban_huoyue;
}

void Sheet_festivalmuban_huoyue::Clear() {
  festivalmuban_huoyue_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_festivalmuban_huoyue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.festivalmuban_huoyue festivalmuban_huoyue_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalmuban_huoyue_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_festivalmuban_huoyue_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_festivalmuban_huoyue_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_festivalmuban_huoyue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.festivalmuban_huoyue festivalmuban_huoyue_List = 1;
  for (int i = 0; i < this->festivalmuban_huoyue_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->festivalmuban_huoyue_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_festivalmuban_huoyue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.festivalmuban_huoyue festivalmuban_huoyue_List = 1;
  for (int i = 0; i < this->festivalmuban_huoyue_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->festivalmuban_huoyue_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_festivalmuban_huoyue::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.festivalmuban_huoyue festivalmuban_huoyue_List = 1;
  total_size += 1 * this->festivalmuban_huoyue_list_size();
  for (int i = 0; i < this->festivalmuban_huoyue_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->festivalmuban_huoyue_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_festivalmuban_huoyue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_festivalmuban_huoyue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_festivalmuban_huoyue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_festivalmuban_huoyue::MergeFrom(const Sheet_festivalmuban_huoyue& from) {
  GOOGLE_CHECK_NE(&from, this);
  festivalmuban_huoyue_list_.MergeFrom(from.festivalmuban_huoyue_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_festivalmuban_huoyue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_festivalmuban_huoyue::CopyFrom(const Sheet_festivalmuban_huoyue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_festivalmuban_huoyue::IsInitialized() const {

  return true;
}

void Sheet_festivalmuban_huoyue::Swap(Sheet_festivalmuban_huoyue* other) {
  if (other != this) {
    festivalmuban_huoyue_list_.Swap(&other->festivalmuban_huoyue_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_festivalmuban_huoyue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_festivalmuban_huoyue_descriptor_;
  metadata.reflection = Sheet_festivalmuban_huoyue_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
