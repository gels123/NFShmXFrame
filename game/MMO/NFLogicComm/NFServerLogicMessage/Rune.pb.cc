// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Rune.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Rune.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyRuneList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRuneList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneUnDressReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneUnDressReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneUnDressRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneUnDressRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneGrowReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneGrowReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneGrowRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneGrowRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneMakeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneMakeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneMakeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneMakeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneWordStarLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneWordStarLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneWordStarLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneWordStarLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneWordFengYinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneWordFengYinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneWordFengYinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneWordFengYinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneActiveJuejiReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneActiveJuejiReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneActiveJuejiRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneActiveJuejiRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneFeiShengReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneFeiShengReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneFeiShengRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneFeiShengRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneDecomposeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneDecomposeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RuneDecomposeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RuneDecomposeRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Rune_2eproto() {
  protobuf_AddDesc_Rune_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Rune.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyRuneList_descriptor_ = file->message_type(0);
  static const int NotifyRuneList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRuneList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRuneList, list_),
  };
  NotifyRuneList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRuneList_descriptor_,
      NotifyRuneList::default_instance_,
      NotifyRuneList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRuneList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRuneList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRuneList));
  RuneDressReq_descriptor_ = file->message_type(1);
  static const int RuneDressReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressReq, bag_pos_),
  };
  RuneDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneDressReq_descriptor_,
      RuneDressReq::default_instance_,
      RuneDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneDressReq));
  RuneDressRsp_descriptor_ = file->message_type(2);
  static const int RuneDressRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressRsp, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressRsp, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressRsp, return_val_),
  };
  RuneDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneDressRsp_descriptor_,
      RuneDressRsp::default_instance_,
      RuneDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneDressRsp));
  RuneUnDressReq_descriptor_ = file->message_type(3);
  static const int RuneUnDressReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneUnDressReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneUnDressReq, slot_pos_),
  };
  RuneUnDressReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneUnDressReq_descriptor_,
      RuneUnDressReq::default_instance_,
      RuneUnDressReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneUnDressReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneUnDressReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneUnDressReq));
  RuneUnDressRsp_descriptor_ = file->message_type(4);
  static const int RuneUnDressRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneUnDressRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneUnDressRsp, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneUnDressRsp, slot_pos_),
  };
  RuneUnDressRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneUnDressRsp_descriptor_,
      RuneUnDressRsp::default_instance_,
      RuneUnDressRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneUnDressRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneUnDressRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneUnDressRsp));
  RuneGrowReq_descriptor_ = file->message_type(5);
  static const int RuneGrowReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowReq, slot_pos_),
  };
  RuneGrowReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneGrowReq_descriptor_,
      RuneGrowReq::default_instance_,
      RuneGrowReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneGrowReq));
  RuneGrowRsp_descriptor_ = file->message_type(6);
  static const int RuneGrowRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowRsp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowRsp, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowRsp, slot_pos_),
  };
  RuneGrowRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneGrowRsp_descriptor_,
      RuneGrowRsp::default_instance_,
      RuneGrowRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneGrowRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneGrowRsp));
  RuneMakeReq_descriptor_ = file->message_type(7);
  static const int RuneMakeReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeReq, bag_pos_),
  };
  RuneMakeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneMakeReq_descriptor_,
      RuneMakeReq::default_instance_,
      RuneMakeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneMakeReq));
  RuneMakeRsp_descriptor_ = file->message_type(8);
  static const int RuneMakeRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeRsp, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeRsp, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeRsp, bag_pos_),
  };
  RuneMakeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneMakeRsp_descriptor_,
      RuneMakeRsp::default_instance_,
      RuneMakeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneMakeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneMakeRsp));
  RuneWordStarLvReq_descriptor_ = file->message_type(9);
  static const int RuneWordStarLvReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvReq, word_pos_),
  };
  RuneWordStarLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneWordStarLvReq_descriptor_,
      RuneWordStarLvReq::default_instance_,
      RuneWordStarLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneWordStarLvReq));
  RuneWordStarLvRsp_descriptor_ = file->message_type(10);
  static const int RuneWordStarLvRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvRsp, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvRsp, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvRsp, word_pos_),
  };
  RuneWordStarLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneWordStarLvRsp_descriptor_,
      RuneWordStarLvRsp::default_instance_,
      RuneWordStarLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordStarLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneWordStarLvRsp));
  RuneWordFengYinReq_descriptor_ = file->message_type(11);
  static const int RuneWordFengYinReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinReq, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinReq, word_pos_),
  };
  RuneWordFengYinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneWordFengYinReq_descriptor_,
      RuneWordFengYinReq::default_instance_,
      RuneWordFengYinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneWordFengYinReq));
  RuneWordFengYinRsp_descriptor_ = file->message_type(12);
  static const int RuneWordFengYinRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinRsp, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinRsp, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinRsp, word_pos_),
  };
  RuneWordFengYinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneWordFengYinRsp_descriptor_,
      RuneWordFengYinRsp::default_instance_,
      RuneWordFengYinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneWordFengYinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneWordFengYinRsp));
  RuneActiveJuejiReq_descriptor_ = file->message_type(13);
  static const int RuneActiveJuejiReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneActiveJuejiReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneActiveJuejiReq, id_),
  };
  RuneActiveJuejiReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneActiveJuejiReq_descriptor_,
      RuneActiveJuejiReq::default_instance_,
      RuneActiveJuejiReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneActiveJuejiReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneActiveJuejiReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneActiveJuejiReq));
  RuneActiveJuejiRsp_descriptor_ = file->message_type(14);
  static const int RuneActiveJuejiRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneActiveJuejiRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneActiveJuejiRsp, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneActiveJuejiRsp, id_),
  };
  RuneActiveJuejiRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneActiveJuejiRsp_descriptor_,
      RuneActiveJuejiRsp::default_instance_,
      RuneActiveJuejiRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneActiveJuejiRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneActiveJuejiRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneActiveJuejiRsp));
  RuneFeiShengReq_descriptor_ = file->message_type(15);
  static const int RuneFeiShengReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneFeiShengReq, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneFeiShengReq, slot_pos_),
  };
  RuneFeiShengReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneFeiShengReq_descriptor_,
      RuneFeiShengReq::default_instance_,
      RuneFeiShengReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneFeiShengReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneFeiShengReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneFeiShengReq));
  RuneFeiShengRsp_descriptor_ = file->message_type(16);
  static const int RuneFeiShengRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneFeiShengRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneFeiShengRsp, equip_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneFeiShengRsp, slot_pos_),
  };
  RuneFeiShengRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneFeiShengRsp_descriptor_,
      RuneFeiShengRsp::default_instance_,
      RuneFeiShengRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneFeiShengRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneFeiShengRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneFeiShengRsp));
  RuneDecomposeReq_descriptor_ = file->message_type(17);
  static const int RuneDecomposeReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDecomposeReq, rune_pos_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDecomposeReq, word_pos_list_),
  };
  RuneDecomposeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneDecomposeReq_descriptor_,
      RuneDecomposeReq::default_instance_,
      RuneDecomposeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDecomposeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDecomposeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneDecomposeReq));
  RuneDecomposeRsp_descriptor_ = file->message_type(18);
  static const int RuneDecomposeRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDecomposeRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDecomposeRsp, rune_pos_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDecomposeRsp, word_pos_list_),
  };
  RuneDecomposeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RuneDecomposeRsp_descriptor_,
      RuneDecomposeRsp::default_instance_,
      RuneDecomposeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDecomposeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RuneDecomposeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RuneDecomposeRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Rune_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRuneList_descriptor_, &NotifyRuneList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneDressReq_descriptor_, &RuneDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneDressRsp_descriptor_, &RuneDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneUnDressReq_descriptor_, &RuneUnDressReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneUnDressRsp_descriptor_, &RuneUnDressRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneGrowReq_descriptor_, &RuneGrowReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneGrowRsp_descriptor_, &RuneGrowRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneMakeReq_descriptor_, &RuneMakeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneMakeRsp_descriptor_, &RuneMakeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneWordStarLvReq_descriptor_, &RuneWordStarLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneWordStarLvRsp_descriptor_, &RuneWordStarLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneWordFengYinReq_descriptor_, &RuneWordFengYinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneWordFengYinRsp_descriptor_, &RuneWordFengYinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneActiveJuejiReq_descriptor_, &RuneActiveJuejiReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneActiveJuejiRsp_descriptor_, &RuneActiveJuejiRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneFeiShengReq_descriptor_, &RuneFeiShengReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneFeiShengRsp_descriptor_, &RuneFeiShengRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneDecomposeReq_descriptor_, &RuneDecomposeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RuneDecomposeRsp_descriptor_, &RuneDecomposeRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Rune_2eproto() {
  delete NotifyRuneList::default_instance_;
  delete NotifyRuneList_reflection_;
  delete RuneDressReq::default_instance_;
  delete RuneDressReq_reflection_;
  delete RuneDressRsp::default_instance_;
  delete RuneDressRsp_reflection_;
  delete RuneUnDressReq::default_instance_;
  delete RuneUnDressReq_reflection_;
  delete RuneUnDressRsp::default_instance_;
  delete RuneUnDressRsp_reflection_;
  delete RuneGrowReq::default_instance_;
  delete RuneGrowReq_reflection_;
  delete RuneGrowRsp::default_instance_;
  delete RuneGrowRsp_reflection_;
  delete RuneMakeReq::default_instance_;
  delete RuneMakeReq_reflection_;
  delete RuneMakeRsp::default_instance_;
  delete RuneMakeRsp_reflection_;
  delete RuneWordStarLvReq::default_instance_;
  delete RuneWordStarLvReq_reflection_;
  delete RuneWordStarLvRsp::default_instance_;
  delete RuneWordStarLvRsp_reflection_;
  delete RuneWordFengYinReq::default_instance_;
  delete RuneWordFengYinReq_reflection_;
  delete RuneWordFengYinRsp::default_instance_;
  delete RuneWordFengYinRsp_reflection_;
  delete RuneActiveJuejiReq::default_instance_;
  delete RuneActiveJuejiReq_reflection_;
  delete RuneActiveJuejiRsp::default_instance_;
  delete RuneActiveJuejiRsp_reflection_;
  delete RuneFeiShengReq::default_instance_;
  delete RuneFeiShengReq_reflection_;
  delete RuneFeiShengRsp::default_instance_;
  delete RuneFeiShengRsp_reflection_;
  delete RuneDecomposeReq::default_instance_;
  delete RuneDecomposeReq_reflection_;
  delete RuneDecomposeRsp::default_instance_;
  delete RuneDecomposeRsp_reflection_;
}

void protobuf_AddDesc_Rune_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nRune.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"A\n\016NotifyRuneList\022\014\n\004type\030\001 \001"
    "(\005\022!\n\004list\030\002 \003(\0132\023.proto_ff.RuneEntry\"D\n"
    "\014RuneDressReq\022\021\n\tequip_pos\030\001 \001(\005\022\020\n\010slot"
    "_pos\030\002 \001(\005\022\017\n\007bag_pos\030\003 \001(\005\"T\n\014RuneDress"
    "Rsp\022\013\n\003ret\030\001 \001(\005\022\021\n\tequip_pos\030\002 \001(\005\022\020\n\010s"
    "lot_pos\030\003 \001(\005\022\022\n\nreturn_val\030\004 \001(\005\"5\n\016Run"
    "eUnDressReq\022\021\n\tequip_pos\030\001 \001(\005\022\020\n\010slot_p"
    "os\030\002 \001(\005\"B\n\016RuneUnDressRsp\022\013\n\003ret\030\001 \001(\005\022"
    "\021\n\tequip_pos\030\002 \001(\005\022\020\n\010slot_pos\030\003 \001(\005\"@\n\013"
    "RuneGrowReq\022\014\n\004type\030\001 \001(\005\022\021\n\tequip_pos\030\002"
    " \001(\005\022\020\n\010slot_pos\030\003 \001(\005\"M\n\013RuneGrowRsp\022\013\n"
    "\003ret\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\021\n\tequip_pos\030\003 "
    "\001(\005\022\020\n\010slot_pos\030\004 \001(\005\"C\n\013RuneMakeReq\022\021\n\t"
    "equip_pos\030\001 \001(\005\022\020\n\010slot_pos\030\002 \001(\005\022\017\n\007bag"
    "_pos\030\003 \001(\005\"P\n\013RuneMakeRsp\022\013\n\003ret\030\001 \001(\005\022\021"
    "\n\tequip_pos\030\002 \001(\005\022\020\n\010slot_pos\030\003 \001(\005\022\017\n\007b"
    "ag_pos\030\004 \001(\005\"J\n\021RuneWordStarLvReq\022\021\n\tequ"
    "ip_pos\030\001 \001(\005\022\020\n\010slot_pos\030\002 \001(\005\022\020\n\010word_p"
    "os\030\003 \001(\005\"W\n\021RuneWordStarLvRsp\022\013\n\003ret\030\001 \001"
    "(\005\022\021\n\tequip_pos\030\002 \001(\005\022\020\n\010slot_pos\030\003 \001(\005\022"
    "\020\n\010word_pos\030\004 \001(\005\"K\n\022RuneWordFengYinReq\022"
    "\021\n\tequip_pos\030\001 \001(\005\022\020\n\010slot_pos\030\002 \001(\005\022\020\n\010"
    "word_pos\030\003 \001(\005\"X\n\022RuneWordFengYinRsp\022\013\n\003"
    "ret\030\001 \001(\005\022\021\n\tequip_pos\030\002 \001(\005\022\020\n\010slot_pos"
    "\030\003 \001(\005\022\020\n\010word_pos\030\004 \001(\005\"3\n\022RuneActiveJu"
    "ejiReq\022\021\n\tequip_pos\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"@\n"
    "\022RuneActiveJuejiRsp\022\013\n\003ret\030\001 \001(\005\022\021\n\tequi"
    "p_pos\030\002 \001(\005\022\n\n\002id\030\003 \001(\005\"6\n\017RuneFeiShengR"
    "eq\022\021\n\tequip_pos\030\001 \001(\005\022\020\n\010slot_pos\030\002 \001(\005\""
    "C\n\017RuneFeiShengRsp\022\013\n\003ret\030\001 \001(\005\022\021\n\tequip"
    "_pos\030\002 \001(\005\022\020\n\010slot_pos\030\003 \001(\005\"@\n\020RuneDeco"
    "mposeReq\022\025\n\rrune_pos_list\030\001 \003(\005\022\025\n\rword_"
    "pos_list\030\002 \003(\005\"M\n\020RuneDecomposeRsp\022\013\n\003re"
    "t\030\001 \001(\005\022\025\n\rrune_pos_list\030\002 \003(\005\022\025\n\rword_p"
    "os_list\030\003 \003(\005", 1413);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Rune.proto", &protobuf_RegisterTypes);
  NotifyRuneList::default_instance_ = new NotifyRuneList();
  RuneDressReq::default_instance_ = new RuneDressReq();
  RuneDressRsp::default_instance_ = new RuneDressRsp();
  RuneUnDressReq::default_instance_ = new RuneUnDressReq();
  RuneUnDressRsp::default_instance_ = new RuneUnDressRsp();
  RuneGrowReq::default_instance_ = new RuneGrowReq();
  RuneGrowRsp::default_instance_ = new RuneGrowRsp();
  RuneMakeReq::default_instance_ = new RuneMakeReq();
  RuneMakeRsp::default_instance_ = new RuneMakeRsp();
  RuneWordStarLvReq::default_instance_ = new RuneWordStarLvReq();
  RuneWordStarLvRsp::default_instance_ = new RuneWordStarLvRsp();
  RuneWordFengYinReq::default_instance_ = new RuneWordFengYinReq();
  RuneWordFengYinRsp::default_instance_ = new RuneWordFengYinRsp();
  RuneActiveJuejiReq::default_instance_ = new RuneActiveJuejiReq();
  RuneActiveJuejiRsp::default_instance_ = new RuneActiveJuejiRsp();
  RuneFeiShengReq::default_instance_ = new RuneFeiShengReq();
  RuneFeiShengRsp::default_instance_ = new RuneFeiShengRsp();
  RuneDecomposeReq::default_instance_ = new RuneDecomposeReq();
  RuneDecomposeRsp::default_instance_ = new RuneDecomposeRsp();
  NotifyRuneList::default_instance_->InitAsDefaultInstance();
  RuneDressReq::default_instance_->InitAsDefaultInstance();
  RuneDressRsp::default_instance_->InitAsDefaultInstance();
  RuneUnDressReq::default_instance_->InitAsDefaultInstance();
  RuneUnDressRsp::default_instance_->InitAsDefaultInstance();
  RuneGrowReq::default_instance_->InitAsDefaultInstance();
  RuneGrowRsp::default_instance_->InitAsDefaultInstance();
  RuneMakeReq::default_instance_->InitAsDefaultInstance();
  RuneMakeRsp::default_instance_->InitAsDefaultInstance();
  RuneWordStarLvReq::default_instance_->InitAsDefaultInstance();
  RuneWordStarLvRsp::default_instance_->InitAsDefaultInstance();
  RuneWordFengYinReq::default_instance_->InitAsDefaultInstance();
  RuneWordFengYinRsp::default_instance_->InitAsDefaultInstance();
  RuneActiveJuejiReq::default_instance_->InitAsDefaultInstance();
  RuneActiveJuejiRsp::default_instance_->InitAsDefaultInstance();
  RuneFeiShengReq::default_instance_->InitAsDefaultInstance();
  RuneFeiShengRsp::default_instance_->InitAsDefaultInstance();
  RuneDecomposeReq::default_instance_->InitAsDefaultInstance();
  RuneDecomposeRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Rune_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Rune_2eproto {
  StaticDescriptorInitializer_Rune_2eproto() {
    protobuf_AddDesc_Rune_2eproto();
  }
} static_descriptor_initializer_Rune_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyRuneList::kTypeFieldNumber;
const int NotifyRuneList::kListFieldNumber;
#endif  // !_MSC_VER

NotifyRuneList::NotifyRuneList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRuneList::InitAsDefaultInstance() {
}

NotifyRuneList::NotifyRuneList(const NotifyRuneList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRuneList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRuneList::~NotifyRuneList() {
  SharedDtor();
}

void NotifyRuneList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyRuneList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRuneList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRuneList_descriptor_;
}

const NotifyRuneList& NotifyRuneList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

NotifyRuneList* NotifyRuneList::default_instance_ = NULL;

NotifyRuneList* NotifyRuneList::New() const {
  return new NotifyRuneList;
}

void NotifyRuneList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRuneList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .proto_ff.RuneEntry list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRuneList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.RuneEntry list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRuneList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.RuneEntry list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRuneList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .proto_ff.RuneEntry list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRuneList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRuneList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRuneList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRuneList::MergeFrom(const NotifyRuneList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRuneList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRuneList::CopyFrom(const NotifyRuneList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRuneList::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void NotifyRuneList::Swap(NotifyRuneList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRuneList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRuneList_descriptor_;
  metadata.reflection = NotifyRuneList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneDressReq::kEquipPosFieldNumber;
const int RuneDressReq::kSlotPosFieldNumber;
const int RuneDressReq::kBagPosFieldNumber;
#endif  // !_MSC_VER

RuneDressReq::RuneDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneDressReq::InitAsDefaultInstance() {
}

RuneDressReq::RuneDressReq(const RuneDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneDressReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  bag_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneDressReq::~RuneDressReq() {
  SharedDtor();
}

void RuneDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneDressReq_descriptor_;
}

const RuneDressReq& RuneDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneDressReq* RuneDressReq::default_instance_ = NULL;

RuneDressReq* RuneDressReq::New() const {
  return new RuneDressReq;
}

void RuneDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0;
    slot_pos_ = 0;
    bag_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bag_pos;
        break;
      }

      // optional int32 bag_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bag_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bag_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 bag_pos = 3;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneDressReq::MergeFrom(const RuneDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneDressReq::CopyFrom(const RuneDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneDressReq::IsInitialized() const {

  return true;
}

void RuneDressReq::Swap(RuneDressReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneDressReq_descriptor_;
  metadata.reflection = RuneDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneDressRsp::kRetFieldNumber;
const int RuneDressRsp::kEquipPosFieldNumber;
const int RuneDressRsp::kSlotPosFieldNumber;
const int RuneDressRsp::kReturnValFieldNumber;
#endif  // !_MSC_VER

RuneDressRsp::RuneDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneDressRsp::InitAsDefaultInstance() {
}

RuneDressRsp::RuneDressRsp(const RuneDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  return_val_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneDressRsp::~RuneDressRsp() {
  SharedDtor();
}

void RuneDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneDressRsp_descriptor_;
}

const RuneDressRsp& RuneDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneDressRsp* RuneDressRsp::default_instance_ = NULL;

RuneDressRsp* RuneDressRsp::New() const {
  return new RuneDressRsp;
}

void RuneDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_pos_ = 0;
    slot_pos_ = 0;
    return_val_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_return_val;
        break;
      }

      // optional int32 return_val = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_return_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &return_val_)));
          set_has_return_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  // optional int32 return_val = 4;
  if (has_return_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->return_val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  // optional int32 return_val = 4;
  if (has_return_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->return_val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 return_val = 4;
    if (has_return_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->return_val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneDressRsp::MergeFrom(const RuneDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_return_val()) {
      set_return_val(from.return_val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneDressRsp::CopyFrom(const RuneDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneDressRsp::IsInitialized() const {

  return true;
}

void RuneDressRsp::Swap(RuneDressRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(return_val_, other->return_val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneDressRsp_descriptor_;
  metadata.reflection = RuneDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneUnDressReq::kEquipPosFieldNumber;
const int RuneUnDressReq::kSlotPosFieldNumber;
#endif  // !_MSC_VER

RuneUnDressReq::RuneUnDressReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneUnDressReq::InitAsDefaultInstance() {
}

RuneUnDressReq::RuneUnDressReq(const RuneUnDressReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneUnDressReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneUnDressReq::~RuneUnDressReq() {
  SharedDtor();
}

void RuneUnDressReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneUnDressReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneUnDressReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneUnDressReq_descriptor_;
}

const RuneUnDressReq& RuneUnDressReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneUnDressReq* RuneUnDressReq::default_instance_ = NULL;

RuneUnDressReq* RuneUnDressReq::New() const {
  return new RuneUnDressReq;
}

void RuneUnDressReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0;
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneUnDressReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneUnDressReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneUnDressReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneUnDressReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneUnDressReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneUnDressReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneUnDressReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneUnDressReq::MergeFrom(const RuneUnDressReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneUnDressReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneUnDressReq::CopyFrom(const RuneUnDressReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneUnDressReq::IsInitialized() const {

  return true;
}

void RuneUnDressReq::Swap(RuneUnDressReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneUnDressReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneUnDressReq_descriptor_;
  metadata.reflection = RuneUnDressReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneUnDressRsp::kRetFieldNumber;
const int RuneUnDressRsp::kEquipPosFieldNumber;
const int RuneUnDressRsp::kSlotPosFieldNumber;
#endif  // !_MSC_VER

RuneUnDressRsp::RuneUnDressRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneUnDressRsp::InitAsDefaultInstance() {
}

RuneUnDressRsp::RuneUnDressRsp(const RuneUnDressRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneUnDressRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneUnDressRsp::~RuneUnDressRsp() {
  SharedDtor();
}

void RuneUnDressRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneUnDressRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneUnDressRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneUnDressRsp_descriptor_;
}

const RuneUnDressRsp& RuneUnDressRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneUnDressRsp* RuneUnDressRsp::default_instance_ = NULL;

RuneUnDressRsp* RuneUnDressRsp::New() const {
  return new RuneUnDressRsp;
}

void RuneUnDressRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_pos_ = 0;
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneUnDressRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneUnDressRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneUnDressRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneUnDressRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneUnDressRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneUnDressRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneUnDressRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneUnDressRsp::MergeFrom(const RuneUnDressRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneUnDressRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneUnDressRsp::CopyFrom(const RuneUnDressRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneUnDressRsp::IsInitialized() const {

  return true;
}

void RuneUnDressRsp::Swap(RuneUnDressRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneUnDressRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneUnDressRsp_descriptor_;
  metadata.reflection = RuneUnDressRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneGrowReq::kTypeFieldNumber;
const int RuneGrowReq::kEquipPosFieldNumber;
const int RuneGrowReq::kSlotPosFieldNumber;
#endif  // !_MSC_VER

RuneGrowReq::RuneGrowReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneGrowReq::InitAsDefaultInstance() {
}

RuneGrowReq::RuneGrowReq(const RuneGrowReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneGrowReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneGrowReq::~RuneGrowReq() {
  SharedDtor();
}

void RuneGrowReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneGrowReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneGrowReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneGrowReq_descriptor_;
}

const RuneGrowReq& RuneGrowReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneGrowReq* RuneGrowReq::default_instance_ = NULL;

RuneGrowReq* RuneGrowReq::New() const {
  return new RuneGrowReq;
}

void RuneGrowReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    equip_pos_ = 0;
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneGrowReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneGrowReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneGrowReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneGrowReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneGrowReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneGrowReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneGrowReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneGrowReq::MergeFrom(const RuneGrowReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneGrowReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneGrowReq::CopyFrom(const RuneGrowReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneGrowReq::IsInitialized() const {

  return true;
}

void RuneGrowReq::Swap(RuneGrowReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneGrowReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneGrowReq_descriptor_;
  metadata.reflection = RuneGrowReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneGrowRsp::kRetFieldNumber;
const int RuneGrowRsp::kTypeFieldNumber;
const int RuneGrowRsp::kEquipPosFieldNumber;
const int RuneGrowRsp::kSlotPosFieldNumber;
#endif  // !_MSC_VER

RuneGrowRsp::RuneGrowRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneGrowRsp::InitAsDefaultInstance() {
}

RuneGrowRsp::RuneGrowRsp(const RuneGrowRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneGrowRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneGrowRsp::~RuneGrowRsp() {
  SharedDtor();
}

void RuneGrowRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneGrowRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneGrowRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneGrowRsp_descriptor_;
}

const RuneGrowRsp& RuneGrowRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneGrowRsp* RuneGrowRsp::default_instance_ = NULL;

RuneGrowRsp* RuneGrowRsp::New() const {
  return new RuneGrowRsp;
}

void RuneGrowRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
    equip_pos_ = 0;
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneGrowRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneGrowRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 equip_pos = 3;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 4;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneGrowRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 equip_pos = 3;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 4;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneGrowRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 equip_pos = 3;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 4;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneGrowRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneGrowRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneGrowRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneGrowRsp::MergeFrom(const RuneGrowRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneGrowRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneGrowRsp::CopyFrom(const RuneGrowRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneGrowRsp::IsInitialized() const {

  return true;
}

void RuneGrowRsp::Swap(RuneGrowRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneGrowRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneGrowRsp_descriptor_;
  metadata.reflection = RuneGrowRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneMakeReq::kEquipPosFieldNumber;
const int RuneMakeReq::kSlotPosFieldNumber;
const int RuneMakeReq::kBagPosFieldNumber;
#endif  // !_MSC_VER

RuneMakeReq::RuneMakeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneMakeReq::InitAsDefaultInstance() {
}

RuneMakeReq::RuneMakeReq(const RuneMakeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneMakeReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  bag_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneMakeReq::~RuneMakeReq() {
  SharedDtor();
}

void RuneMakeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneMakeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneMakeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneMakeReq_descriptor_;
}

const RuneMakeReq& RuneMakeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneMakeReq* RuneMakeReq::default_instance_ = NULL;

RuneMakeReq* RuneMakeReq::New() const {
  return new RuneMakeReq;
}

void RuneMakeReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0;
    slot_pos_ = 0;
    bag_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneMakeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bag_pos;
        break;
      }

      // optional int32 bag_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneMakeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bag_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneMakeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  // optional int32 bag_pos = 3;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bag_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneMakeReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 bag_pos = 3;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneMakeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneMakeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneMakeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneMakeReq::MergeFrom(const RuneMakeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneMakeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneMakeReq::CopyFrom(const RuneMakeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneMakeReq::IsInitialized() const {

  return true;
}

void RuneMakeReq::Swap(RuneMakeReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneMakeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneMakeReq_descriptor_;
  metadata.reflection = RuneMakeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneMakeRsp::kRetFieldNumber;
const int RuneMakeRsp::kEquipPosFieldNumber;
const int RuneMakeRsp::kSlotPosFieldNumber;
const int RuneMakeRsp::kBagPosFieldNumber;
#endif  // !_MSC_VER

RuneMakeRsp::RuneMakeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneMakeRsp::InitAsDefaultInstance() {
}

RuneMakeRsp::RuneMakeRsp(const RuneMakeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneMakeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  bag_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneMakeRsp::~RuneMakeRsp() {
  SharedDtor();
}

void RuneMakeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneMakeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneMakeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneMakeRsp_descriptor_;
}

const RuneMakeRsp& RuneMakeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneMakeRsp* RuneMakeRsp::default_instance_ = NULL;

RuneMakeRsp* RuneMakeRsp::New() const {
  return new RuneMakeRsp;
}

void RuneMakeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_pos_ = 0;
    slot_pos_ = 0;
    bag_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneMakeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bag_pos;
        break;
      }

      // optional int32 bag_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bag_pos_)));
          set_has_bag_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneMakeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  // optional int32 bag_pos = 4;
  if (has_bag_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bag_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneMakeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  // optional int32 bag_pos = 4;
  if (has_bag_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bag_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneMakeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 bag_pos = 4;
    if (has_bag_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bag_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneMakeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneMakeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneMakeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneMakeRsp::MergeFrom(const RuneMakeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_bag_pos()) {
      set_bag_pos(from.bag_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneMakeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneMakeRsp::CopyFrom(const RuneMakeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneMakeRsp::IsInitialized() const {

  return true;
}

void RuneMakeRsp::Swap(RuneMakeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(bag_pos_, other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneMakeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneMakeRsp_descriptor_;
  metadata.reflection = RuneMakeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneWordStarLvReq::kEquipPosFieldNumber;
const int RuneWordStarLvReq::kSlotPosFieldNumber;
const int RuneWordStarLvReq::kWordPosFieldNumber;
#endif  // !_MSC_VER

RuneWordStarLvReq::RuneWordStarLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneWordStarLvReq::InitAsDefaultInstance() {
}

RuneWordStarLvReq::RuneWordStarLvReq(const RuneWordStarLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneWordStarLvReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  word_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneWordStarLvReq::~RuneWordStarLvReq() {
  SharedDtor();
}

void RuneWordStarLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneWordStarLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneWordStarLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneWordStarLvReq_descriptor_;
}

const RuneWordStarLvReq& RuneWordStarLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneWordStarLvReq* RuneWordStarLvReq::default_instance_ = NULL;

RuneWordStarLvReq* RuneWordStarLvReq::New() const {
  return new RuneWordStarLvReq;
}

void RuneWordStarLvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0;
    slot_pos_ = 0;
    word_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneWordStarLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_word_pos;
        break;
      }

      // optional int32 word_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_pos_)));
          set_has_word_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneWordStarLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  // optional int32 word_pos = 3;
  if (has_word_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->word_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneWordStarLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  // optional int32 word_pos = 3;
  if (has_word_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->word_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneWordStarLvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 word_pos = 3;
    if (has_word_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->word_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneWordStarLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneWordStarLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneWordStarLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneWordStarLvReq::MergeFrom(const RuneWordStarLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_word_pos()) {
      set_word_pos(from.word_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneWordStarLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneWordStarLvReq::CopyFrom(const RuneWordStarLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneWordStarLvReq::IsInitialized() const {

  return true;
}

void RuneWordStarLvReq::Swap(RuneWordStarLvReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(word_pos_, other->word_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneWordStarLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneWordStarLvReq_descriptor_;
  metadata.reflection = RuneWordStarLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneWordStarLvRsp::kRetFieldNumber;
const int RuneWordStarLvRsp::kEquipPosFieldNumber;
const int RuneWordStarLvRsp::kSlotPosFieldNumber;
const int RuneWordStarLvRsp::kWordPosFieldNumber;
#endif  // !_MSC_VER

RuneWordStarLvRsp::RuneWordStarLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneWordStarLvRsp::InitAsDefaultInstance() {
}

RuneWordStarLvRsp::RuneWordStarLvRsp(const RuneWordStarLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneWordStarLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  word_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneWordStarLvRsp::~RuneWordStarLvRsp() {
  SharedDtor();
}

void RuneWordStarLvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneWordStarLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneWordStarLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneWordStarLvRsp_descriptor_;
}

const RuneWordStarLvRsp& RuneWordStarLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneWordStarLvRsp* RuneWordStarLvRsp::default_instance_ = NULL;

RuneWordStarLvRsp* RuneWordStarLvRsp::New() const {
  return new RuneWordStarLvRsp;
}

void RuneWordStarLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_pos_ = 0;
    slot_pos_ = 0;
    word_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneWordStarLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_word_pos;
        break;
      }

      // optional int32 word_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_pos_)));
          set_has_word_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneWordStarLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  // optional int32 word_pos = 4;
  if (has_word_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->word_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneWordStarLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  // optional int32 word_pos = 4;
  if (has_word_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->word_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneWordStarLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 word_pos = 4;
    if (has_word_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->word_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneWordStarLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneWordStarLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneWordStarLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneWordStarLvRsp::MergeFrom(const RuneWordStarLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_word_pos()) {
      set_word_pos(from.word_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneWordStarLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneWordStarLvRsp::CopyFrom(const RuneWordStarLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneWordStarLvRsp::IsInitialized() const {

  return true;
}

void RuneWordStarLvRsp::Swap(RuneWordStarLvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(word_pos_, other->word_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneWordStarLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneWordStarLvRsp_descriptor_;
  metadata.reflection = RuneWordStarLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneWordFengYinReq::kEquipPosFieldNumber;
const int RuneWordFengYinReq::kSlotPosFieldNumber;
const int RuneWordFengYinReq::kWordPosFieldNumber;
#endif  // !_MSC_VER

RuneWordFengYinReq::RuneWordFengYinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneWordFengYinReq::InitAsDefaultInstance() {
}

RuneWordFengYinReq::RuneWordFengYinReq(const RuneWordFengYinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneWordFengYinReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  word_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneWordFengYinReq::~RuneWordFengYinReq() {
  SharedDtor();
}

void RuneWordFengYinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneWordFengYinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneWordFengYinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneWordFengYinReq_descriptor_;
}

const RuneWordFengYinReq& RuneWordFengYinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneWordFengYinReq* RuneWordFengYinReq::default_instance_ = NULL;

RuneWordFengYinReq* RuneWordFengYinReq::New() const {
  return new RuneWordFengYinReq;
}

void RuneWordFengYinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0;
    slot_pos_ = 0;
    word_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneWordFengYinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_word_pos;
        break;
      }

      // optional int32 word_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_pos_)));
          set_has_word_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneWordFengYinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  // optional int32 word_pos = 3;
  if (has_word_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->word_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneWordFengYinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  // optional int32 word_pos = 3;
  if (has_word_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->word_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneWordFengYinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 word_pos = 3;
    if (has_word_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->word_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneWordFengYinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneWordFengYinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneWordFengYinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneWordFengYinReq::MergeFrom(const RuneWordFengYinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_word_pos()) {
      set_word_pos(from.word_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneWordFengYinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneWordFengYinReq::CopyFrom(const RuneWordFengYinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneWordFengYinReq::IsInitialized() const {

  return true;
}

void RuneWordFengYinReq::Swap(RuneWordFengYinReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(word_pos_, other->word_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneWordFengYinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneWordFengYinReq_descriptor_;
  metadata.reflection = RuneWordFengYinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneWordFengYinRsp::kRetFieldNumber;
const int RuneWordFengYinRsp::kEquipPosFieldNumber;
const int RuneWordFengYinRsp::kSlotPosFieldNumber;
const int RuneWordFengYinRsp::kWordPosFieldNumber;
#endif  // !_MSC_VER

RuneWordFengYinRsp::RuneWordFengYinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneWordFengYinRsp::InitAsDefaultInstance() {
}

RuneWordFengYinRsp::RuneWordFengYinRsp(const RuneWordFengYinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneWordFengYinRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  word_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneWordFengYinRsp::~RuneWordFengYinRsp() {
  SharedDtor();
}

void RuneWordFengYinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneWordFengYinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneWordFengYinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneWordFengYinRsp_descriptor_;
}

const RuneWordFengYinRsp& RuneWordFengYinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneWordFengYinRsp* RuneWordFengYinRsp::default_instance_ = NULL;

RuneWordFengYinRsp* RuneWordFengYinRsp::New() const {
  return new RuneWordFengYinRsp;
}

void RuneWordFengYinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_pos_ = 0;
    slot_pos_ = 0;
    word_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneWordFengYinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_word_pos;
        break;
      }

      // optional int32 word_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_pos_)));
          set_has_word_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneWordFengYinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  // optional int32 word_pos = 4;
  if (has_word_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->word_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneWordFengYinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  // optional int32 word_pos = 4;
  if (has_word_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->word_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneWordFengYinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int32 word_pos = 4;
    if (has_word_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->word_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneWordFengYinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneWordFengYinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneWordFengYinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneWordFengYinRsp::MergeFrom(const RuneWordFengYinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_word_pos()) {
      set_word_pos(from.word_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneWordFengYinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneWordFengYinRsp::CopyFrom(const RuneWordFengYinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneWordFengYinRsp::IsInitialized() const {

  return true;
}

void RuneWordFengYinRsp::Swap(RuneWordFengYinRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(word_pos_, other->word_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneWordFengYinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneWordFengYinRsp_descriptor_;
  metadata.reflection = RuneWordFengYinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneActiveJuejiReq::kEquipPosFieldNumber;
const int RuneActiveJuejiReq::kIdFieldNumber;
#endif  // !_MSC_VER

RuneActiveJuejiReq::RuneActiveJuejiReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneActiveJuejiReq::InitAsDefaultInstance() {
}

RuneActiveJuejiReq::RuneActiveJuejiReq(const RuneActiveJuejiReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneActiveJuejiReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneActiveJuejiReq::~RuneActiveJuejiReq() {
  SharedDtor();
}

void RuneActiveJuejiReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneActiveJuejiReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneActiveJuejiReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneActiveJuejiReq_descriptor_;
}

const RuneActiveJuejiReq& RuneActiveJuejiReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneActiveJuejiReq* RuneActiveJuejiReq::default_instance_ = NULL;

RuneActiveJuejiReq* RuneActiveJuejiReq::New() const {
  return new RuneActiveJuejiReq;
}

void RuneActiveJuejiReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneActiveJuejiReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneActiveJuejiReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_pos(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneActiveJuejiReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_pos(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneActiveJuejiReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneActiveJuejiReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneActiveJuejiReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneActiveJuejiReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneActiveJuejiReq::MergeFrom(const RuneActiveJuejiReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneActiveJuejiReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneActiveJuejiReq::CopyFrom(const RuneActiveJuejiReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneActiveJuejiReq::IsInitialized() const {

  return true;
}

void RuneActiveJuejiReq::Swap(RuneActiveJuejiReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneActiveJuejiReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneActiveJuejiReq_descriptor_;
  metadata.reflection = RuneActiveJuejiReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneActiveJuejiRsp::kRetFieldNumber;
const int RuneActiveJuejiRsp::kEquipPosFieldNumber;
const int RuneActiveJuejiRsp::kIdFieldNumber;
#endif  // !_MSC_VER

RuneActiveJuejiRsp::RuneActiveJuejiRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneActiveJuejiRsp::InitAsDefaultInstance() {
}

RuneActiveJuejiRsp::RuneActiveJuejiRsp(const RuneActiveJuejiRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneActiveJuejiRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_pos_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneActiveJuejiRsp::~RuneActiveJuejiRsp() {
  SharedDtor();
}

void RuneActiveJuejiRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneActiveJuejiRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneActiveJuejiRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneActiveJuejiRsp_descriptor_;
}

const RuneActiveJuejiRsp& RuneActiveJuejiRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneActiveJuejiRsp* RuneActiveJuejiRsp::default_instance_ = NULL;

RuneActiveJuejiRsp* RuneActiveJuejiRsp::New() const {
  return new RuneActiveJuejiRsp;
}

void RuneActiveJuejiRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_pos_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneActiveJuejiRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneActiveJuejiRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneActiveJuejiRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneActiveJuejiRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneActiveJuejiRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneActiveJuejiRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneActiveJuejiRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneActiveJuejiRsp::MergeFrom(const RuneActiveJuejiRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneActiveJuejiRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneActiveJuejiRsp::CopyFrom(const RuneActiveJuejiRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneActiveJuejiRsp::IsInitialized() const {

  return true;
}

void RuneActiveJuejiRsp::Swap(RuneActiveJuejiRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneActiveJuejiRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneActiveJuejiRsp_descriptor_;
  metadata.reflection = RuneActiveJuejiRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneFeiShengReq::kEquipPosFieldNumber;
const int RuneFeiShengReq::kSlotPosFieldNumber;
#endif  // !_MSC_VER

RuneFeiShengReq::RuneFeiShengReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneFeiShengReq::InitAsDefaultInstance() {
}

RuneFeiShengReq::RuneFeiShengReq(const RuneFeiShengReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneFeiShengReq::SharedCtor() {
  _cached_size_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneFeiShengReq::~RuneFeiShengReq() {
  SharedDtor();
}

void RuneFeiShengReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneFeiShengReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneFeiShengReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneFeiShengReq_descriptor_;
}

const RuneFeiShengReq& RuneFeiShengReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneFeiShengReq* RuneFeiShengReq::default_instance_ = NULL;

RuneFeiShengReq* RuneFeiShengReq::New() const {
  return new RuneFeiShengReq;
}

void RuneFeiShengReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equip_pos_ = 0;
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneFeiShengReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 equip_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneFeiShengReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneFeiShengReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 equip_pos = 1;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 2;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneFeiShengReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 equip_pos = 1;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 2;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneFeiShengReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneFeiShengReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneFeiShengReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneFeiShengReq::MergeFrom(const RuneFeiShengReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneFeiShengReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneFeiShengReq::CopyFrom(const RuneFeiShengReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneFeiShengReq::IsInitialized() const {

  return true;
}

void RuneFeiShengReq::Swap(RuneFeiShengReq* other) {
  if (other != this) {
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneFeiShengReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneFeiShengReq_descriptor_;
  metadata.reflection = RuneFeiShengReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneFeiShengRsp::kRetFieldNumber;
const int RuneFeiShengRsp::kEquipPosFieldNumber;
const int RuneFeiShengRsp::kSlotPosFieldNumber;
#endif  // !_MSC_VER

RuneFeiShengRsp::RuneFeiShengRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneFeiShengRsp::InitAsDefaultInstance() {
}

RuneFeiShengRsp::RuneFeiShengRsp(const RuneFeiShengRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneFeiShengRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  equip_pos_ = 0;
  slot_pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneFeiShengRsp::~RuneFeiShengRsp() {
  SharedDtor();
}

void RuneFeiShengRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneFeiShengRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneFeiShengRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneFeiShengRsp_descriptor_;
}

const RuneFeiShengRsp& RuneFeiShengRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneFeiShengRsp* RuneFeiShengRsp::default_instance_ = NULL;

RuneFeiShengRsp* RuneFeiShengRsp::New() const {
  return new RuneFeiShengRsp;
}

void RuneFeiShengRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    equip_pos_ = 0;
    slot_pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneFeiShengRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_equip_pos;
        break;
      }

      // optional int32 equip_pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &equip_pos_)));
          set_has_equip_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot_pos;
        break;
      }

      // optional int32 slot_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneFeiShengRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->equip_pos(), output);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneFeiShengRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 equip_pos = 2;
  if (has_equip_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->equip_pos(), target);
  }

  // optional int32 slot_pos = 3;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneFeiShengRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 equip_pos = 2;
    if (has_equip_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->equip_pos());
    }

    // optional int32 slot_pos = 3;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneFeiShengRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneFeiShengRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneFeiShengRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneFeiShengRsp::MergeFrom(const RuneFeiShengRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_equip_pos()) {
      set_equip_pos(from.equip_pos());
    }
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneFeiShengRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneFeiShengRsp::CopyFrom(const RuneFeiShengRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneFeiShengRsp::IsInitialized() const {

  return true;
}

void RuneFeiShengRsp::Swap(RuneFeiShengRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(equip_pos_, other->equip_pos_);
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneFeiShengRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneFeiShengRsp_descriptor_;
  metadata.reflection = RuneFeiShengRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneDecomposeReq::kRunePosListFieldNumber;
const int RuneDecomposeReq::kWordPosListFieldNumber;
#endif  // !_MSC_VER

RuneDecomposeReq::RuneDecomposeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneDecomposeReq::InitAsDefaultInstance() {
}

RuneDecomposeReq::RuneDecomposeReq(const RuneDecomposeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneDecomposeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneDecomposeReq::~RuneDecomposeReq() {
  SharedDtor();
}

void RuneDecomposeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneDecomposeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneDecomposeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneDecomposeReq_descriptor_;
}

const RuneDecomposeReq& RuneDecomposeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneDecomposeReq* RuneDecomposeReq::default_instance_ = NULL;

RuneDecomposeReq* RuneDecomposeReq::New() const {
  return new RuneDecomposeReq;
}

void RuneDecomposeReq::Clear() {
  rune_pos_list_.Clear();
  word_pos_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneDecomposeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 rune_pos_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rune_pos_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_rune_pos_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rune_pos_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rune_pos_list;
        if (input->ExpectTag(16)) goto parse_word_pos_list;
        break;
      }

      // repeated int32 word_pos_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_pos_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_word_pos_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_word_pos_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_word_pos_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneDecomposeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 rune_pos_list = 1;
  for (int i = 0; i < this->rune_pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->rune_pos_list(i), output);
  }

  // repeated int32 word_pos_list = 2;
  for (int i = 0; i < this->word_pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->word_pos_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneDecomposeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 rune_pos_list = 1;
  for (int i = 0; i < this->rune_pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->rune_pos_list(i), target);
  }

  // repeated int32 word_pos_list = 2;
  for (int i = 0; i < this->word_pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->word_pos_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneDecomposeReq::ByteSize() const {
  int total_size = 0;

  // repeated int32 rune_pos_list = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rune_pos_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rune_pos_list(i));
    }
    total_size += 1 * this->rune_pos_list_size() + data_size;
  }

  // repeated int32 word_pos_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->word_pos_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->word_pos_list(i));
    }
    total_size += 1 * this->word_pos_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneDecomposeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneDecomposeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneDecomposeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneDecomposeReq::MergeFrom(const RuneDecomposeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  rune_pos_list_.MergeFrom(from.rune_pos_list_);
  word_pos_list_.MergeFrom(from.word_pos_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneDecomposeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneDecomposeReq::CopyFrom(const RuneDecomposeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneDecomposeReq::IsInitialized() const {

  return true;
}

void RuneDecomposeReq::Swap(RuneDecomposeReq* other) {
  if (other != this) {
    rune_pos_list_.Swap(&other->rune_pos_list_);
    word_pos_list_.Swap(&other->word_pos_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneDecomposeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneDecomposeReq_descriptor_;
  metadata.reflection = RuneDecomposeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RuneDecomposeRsp::kRetFieldNumber;
const int RuneDecomposeRsp::kRunePosListFieldNumber;
const int RuneDecomposeRsp::kWordPosListFieldNumber;
#endif  // !_MSC_VER

RuneDecomposeRsp::RuneDecomposeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RuneDecomposeRsp::InitAsDefaultInstance() {
}

RuneDecomposeRsp::RuneDecomposeRsp(const RuneDecomposeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RuneDecomposeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RuneDecomposeRsp::~RuneDecomposeRsp() {
  SharedDtor();
}

void RuneDecomposeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RuneDecomposeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RuneDecomposeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RuneDecomposeRsp_descriptor_;
}

const RuneDecomposeRsp& RuneDecomposeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Rune_2eproto();
  return *default_instance_;
}

RuneDecomposeRsp* RuneDecomposeRsp::default_instance_ = NULL;

RuneDecomposeRsp* RuneDecomposeRsp::New() const {
  return new RuneDecomposeRsp;
}

void RuneDecomposeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  rune_pos_list_.Clear();
  word_pos_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RuneDecomposeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rune_pos_list;
        break;
      }

      // repeated int32 rune_pos_list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rune_pos_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_rune_pos_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rune_pos_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rune_pos_list;
        if (input->ExpectTag(24)) goto parse_word_pos_list;
        break;
      }

      // repeated int32 word_pos_list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_pos_list:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_word_pos_list())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_word_pos_list())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_word_pos_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RuneDecomposeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated int32 rune_pos_list = 2;
  for (int i = 0; i < this->rune_pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->rune_pos_list(i), output);
  }

  // repeated int32 word_pos_list = 3;
  for (int i = 0; i < this->word_pos_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->word_pos_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RuneDecomposeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated int32 rune_pos_list = 2;
  for (int i = 0; i < this->rune_pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->rune_pos_list(i), target);
  }

  // repeated int32 word_pos_list = 3;
  for (int i = 0; i < this->word_pos_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->word_pos_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RuneDecomposeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int32 rune_pos_list = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rune_pos_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rune_pos_list(i));
    }
    total_size += 1 * this->rune_pos_list_size() + data_size;
  }

  // repeated int32 word_pos_list = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->word_pos_list_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->word_pos_list(i));
    }
    total_size += 1 * this->word_pos_list_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RuneDecomposeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RuneDecomposeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RuneDecomposeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RuneDecomposeRsp::MergeFrom(const RuneDecomposeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  rune_pos_list_.MergeFrom(from.rune_pos_list_);
  word_pos_list_.MergeFrom(from.word_pos_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RuneDecomposeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RuneDecomposeRsp::CopyFrom(const RuneDecomposeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuneDecomposeRsp::IsInitialized() const {

  return true;
}

void RuneDecomposeRsp::Swap(RuneDecomposeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    rune_pos_list_.Swap(&other->rune_pos_list_);
    word_pos_list_.Swap(&other->word_pos_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RuneDecomposeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RuneDecomposeRsp_descriptor_;
  metadata.reflection = RuneDecomposeRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
