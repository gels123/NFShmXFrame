// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ranking.proto

#ifndef PROTOBUF_ranking_2eproto__INCLUDED
#define PROTOBUF_ranking_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ranking_2eproto();
void protobuf_AssignDesc_ranking_2eproto();
void protobuf_ShutdownFile_ranking_2eproto();

class rankingranking;
class Sheet_rankingranking;
class rankingdate;
class Sheet_rankingdate;
class rankingpkcons;
class Sheet_rankingpkcons;

// ===================================================================

class rankingranking : public ::google::protobuf::Message {
 public:
  rankingranking();
  virtual ~rankingranking();

  rankingranking(const rankingranking& from);

  inline rankingranking& operator=(const rankingranking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rankingranking& default_instance();

  void Swap(rankingranking* other);

  // implements Message ----------------------------------------------

  rankingranking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rankingranking& from);
  void MergeFrom(const rankingranking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rankingID = 1;
  inline bool has_rankingid() const;
  inline void clear_rankingid();
  static const int kRankingIDFieldNumber = 1;
  inline ::google::protobuf::int32 rankingid() const;
  inline void set_rankingid(::google::protobuf::int32 value);

  // optional string rankingName = 2;
  inline bool has_rankingname() const;
  inline void clear_rankingname();
  static const int kRankingNameFieldNumber = 2;
  inline const ::std::string& rankingname() const;
  inline void set_rankingname(const ::std::string& value);
  inline void set_rankingname(const char* value);
  inline void set_rankingname(const char* value, size_t size);
  inline ::std::string* mutable_rankingname();
  inline ::std::string* release_rankingname();
  inline void set_allocated_rankingname(::std::string* rankingname);

  // optional int32 save = 3;
  inline bool has_save() const;
  inline void clear_save();
  static const int kSaveFieldNumber = 3;
  inline ::google::protobuf::int32 save() const;
  inline void set_save(::google::protobuf::int32 value);

  // optional int32 capacity = 4;
  inline bool has_capacity() const;
  inline void clear_capacity();
  static const int kCapacityFieldNumber = 4;
  inline ::google::protobuf::int32 capacity() const;
  inline void set_capacity(::google::protobuf::int32 value);

  // optional int32 showSize = 5;
  inline bool has_showsize() const;
  inline void clear_showsize();
  static const int kShowSizeFieldNumber = 5;
  inline ::google::protobuf::int32 showsize() const;
  inline void set_showsize(::google::protobuf::int32 value);

  // optional int32 rankModule = 6;
  inline bool has_rankmodule() const;
  inline void clear_rankmodule();
  static const int kRankModuleFieldNumber = 6;
  inline ::google::protobuf::int32 rankmodule() const;
  inline void set_rankmodule(::google::protobuf::int32 value);

  // repeated int32 dateID = 7;
  inline int dateid_size() const;
  inline void clear_dateid();
  static const int kDateIDFieldNumber = 7;
  inline ::google::protobuf::int32 dateid(int index) const;
  inline void set_dateid(int index, ::google::protobuf::int32 value);
  inline void add_dateid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      dateid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_dateid();

  // @@protoc_insertion_point(class_scope:proto_ff.rankingranking)
 private:
  inline void set_has_rankingid();
  inline void clear_has_rankingid();
  inline void set_has_rankingname();
  inline void clear_has_rankingname();
  inline void set_has_save();
  inline void clear_has_save();
  inline void set_has_capacity();
  inline void clear_has_capacity();
  inline void set_has_showsize();
  inline void clear_has_showsize();
  inline void set_has_rankmodule();
  inline void clear_has_rankmodule();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rankingname_;
  ::google::protobuf::int32 rankingid_;
  ::google::protobuf::int32 save_;
  ::google::protobuf::int32 capacity_;
  ::google::protobuf::int32 showsize_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > dateid_;
  ::google::protobuf::int32 rankmodule_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_ranking_2eproto();
  friend void protobuf_AssignDesc_ranking_2eproto();
  friend void protobuf_ShutdownFile_ranking_2eproto();

  void InitAsDefaultInstance();
  static rankingranking* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_rankingranking : public ::google::protobuf::Message {
 public:
  Sheet_rankingranking();
  virtual ~Sheet_rankingranking();

  Sheet_rankingranking(const Sheet_rankingranking& from);

  inline Sheet_rankingranking& operator=(const Sheet_rankingranking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_rankingranking& default_instance();

  void Swap(Sheet_rankingranking* other);

  // implements Message ----------------------------------------------

  Sheet_rankingranking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_rankingranking& from);
  void MergeFrom(const Sheet_rankingranking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.rankingranking rankingranking_List = 1;
  inline int rankingranking_list_size() const;
  inline void clear_rankingranking_list();
  static const int kRankingrankingListFieldNumber = 1;
  inline const ::proto_ff::rankingranking& rankingranking_list(int index) const;
  inline ::proto_ff::rankingranking* mutable_rankingranking_list(int index);
  inline ::proto_ff::rankingranking* add_rankingranking_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingranking >&
      rankingranking_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingranking >*
      mutable_rankingranking_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_rankingranking)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingranking > rankingranking_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ranking_2eproto();
  friend void protobuf_AssignDesc_ranking_2eproto();
  friend void protobuf_ShutdownFile_ranking_2eproto();

  void InitAsDefaultInstance();
  static Sheet_rankingranking* default_instance_;
};
// -------------------------------------------------------------------

class rankingdate : public ::google::protobuf::Message {
 public:
  rankingdate();
  virtual ~rankingdate();

  rankingdate(const rankingdate& from);

  inline rankingdate& operator=(const rankingdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rankingdate& default_instance();

  void Swap(rankingdate* other);

  // implements Message ----------------------------------------------

  rankingdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rankingdate& from);
  void MergeFrom(const rankingdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 dateID = 1;
  inline bool has_dateid() const;
  inline void clear_dateid();
  static const int kDateIDFieldNumber = 1;
  inline ::google::protobuf::int32 dateid() const;
  inline void set_dateid(::google::protobuf::int32 value);

  // optional string dateName = 2;
  inline bool has_datename() const;
  inline void clear_datename();
  static const int kDateNameFieldNumber = 2;
  inline const ::std::string& datename() const;
  inline void set_datename(const ::std::string& value);
  inline void set_datename(const char* value);
  inline void set_datename(const char* value, size_t size);
  inline ::std::string* mutable_datename();
  inline ::std::string* release_datename();
  inline void set_allocated_datename(::std::string* datename);

  // @@protoc_insertion_point(class_scope:proto_ff.rankingdate)
 private:
  inline void set_has_dateid();
  inline void clear_has_dateid();
  inline void set_has_datename();
  inline void clear_has_datename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* datename_;
  ::google::protobuf::int32 dateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ranking_2eproto();
  friend void protobuf_AssignDesc_ranking_2eproto();
  friend void protobuf_ShutdownFile_ranking_2eproto();

  void InitAsDefaultInstance();
  static rankingdate* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_rankingdate : public ::google::protobuf::Message {
 public:
  Sheet_rankingdate();
  virtual ~Sheet_rankingdate();

  Sheet_rankingdate(const Sheet_rankingdate& from);

  inline Sheet_rankingdate& operator=(const Sheet_rankingdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_rankingdate& default_instance();

  void Swap(Sheet_rankingdate* other);

  // implements Message ----------------------------------------------

  Sheet_rankingdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_rankingdate& from);
  void MergeFrom(const Sheet_rankingdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.rankingdate rankingdate_List = 1;
  inline int rankingdate_list_size() const;
  inline void clear_rankingdate_list();
  static const int kRankingdateListFieldNumber = 1;
  inline const ::proto_ff::rankingdate& rankingdate_list(int index) const;
  inline ::proto_ff::rankingdate* mutable_rankingdate_list(int index);
  inline ::proto_ff::rankingdate* add_rankingdate_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingdate >&
      rankingdate_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingdate >*
      mutable_rankingdate_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_rankingdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingdate > rankingdate_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ranking_2eproto();
  friend void protobuf_AssignDesc_ranking_2eproto();
  friend void protobuf_ShutdownFile_ranking_2eproto();

  void InitAsDefaultInstance();
  static Sheet_rankingdate* default_instance_;
};
// -------------------------------------------------------------------

class rankingpkcons : public ::google::protobuf::Message {
 public:
  rankingpkcons();
  virtual ~rankingpkcons();

  rankingpkcons(const rankingpkcons& from);

  inline rankingpkcons& operator=(const rankingpkcons& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const rankingpkcons& default_instance();

  void Swap(rankingpkcons* other);

  // implements Message ----------------------------------------------

  rankingpkcons* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const rankingpkcons& from);
  void MergeFrom(const rankingpkcons& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 valuedata = 2;
  inline bool has_valuedata() const;
  inline void clear_valuedata();
  static const int kValuedataFieldNumber = 2;
  inline ::google::protobuf::int32 valuedata() const;
  inline void set_valuedata(::google::protobuf::int32 value);

  // optional string stringdata = 3;
  inline bool has_stringdata() const;
  inline void clear_stringdata();
  static const int kStringdataFieldNumber = 3;
  inline const ::std::string& stringdata() const;
  inline void set_stringdata(const ::std::string& value);
  inline void set_stringdata(const char* value);
  inline void set_stringdata(const char* value, size_t size);
  inline ::std::string* mutable_stringdata();
  inline ::std::string* release_stringdata();
  inline void set_allocated_stringdata(::std::string* stringdata);

  // @@protoc_insertion_point(class_scope:proto_ff.rankingpkcons)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_valuedata();
  inline void clear_has_valuedata();
  inline void set_has_stringdata();
  inline void clear_has_stringdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 valuedata_;
  ::std::string* stringdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ranking_2eproto();
  friend void protobuf_AssignDesc_ranking_2eproto();
  friend void protobuf_ShutdownFile_ranking_2eproto();

  void InitAsDefaultInstance();
  static rankingpkcons* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_rankingpkcons : public ::google::protobuf::Message {
 public:
  Sheet_rankingpkcons();
  virtual ~Sheet_rankingpkcons();

  Sheet_rankingpkcons(const Sheet_rankingpkcons& from);

  inline Sheet_rankingpkcons& operator=(const Sheet_rankingpkcons& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_rankingpkcons& default_instance();

  void Swap(Sheet_rankingpkcons* other);

  // implements Message ----------------------------------------------

  Sheet_rankingpkcons* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_rankingpkcons& from);
  void MergeFrom(const Sheet_rankingpkcons& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.rankingpkcons rankingpkcons_List = 1;
  inline int rankingpkcons_list_size() const;
  inline void clear_rankingpkcons_list();
  static const int kRankingpkconsListFieldNumber = 1;
  inline const ::proto_ff::rankingpkcons& rankingpkcons_list(int index) const;
  inline ::proto_ff::rankingpkcons* mutable_rankingpkcons_list(int index);
  inline ::proto_ff::rankingpkcons* add_rankingpkcons_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingpkcons >&
      rankingpkcons_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingpkcons >*
      mutable_rankingpkcons_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_rankingpkcons)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingpkcons > rankingpkcons_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ranking_2eproto();
  friend void protobuf_AssignDesc_ranking_2eproto();
  friend void protobuf_ShutdownFile_ranking_2eproto();

  void InitAsDefaultInstance();
  static Sheet_rankingpkcons* default_instance_;
};
// ===================================================================


// ===================================================================

// rankingranking

// optional int32 rankingID = 1;
inline bool rankingranking::has_rankingid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rankingranking::set_has_rankingid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rankingranking::clear_has_rankingid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rankingranking::clear_rankingid() {
  rankingid_ = 0;
  clear_has_rankingid();
}
inline ::google::protobuf::int32 rankingranking::rankingid() const {
  return rankingid_;
}
inline void rankingranking::set_rankingid(::google::protobuf::int32 value) {
  set_has_rankingid();
  rankingid_ = value;
}

// optional string rankingName = 2;
inline bool rankingranking::has_rankingname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rankingranking::set_has_rankingname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rankingranking::clear_has_rankingname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rankingranking::clear_rankingname() {
  if (rankingname_ != &::google::protobuf::internal::kEmptyString) {
    rankingname_->clear();
  }
  clear_has_rankingname();
}
inline const ::std::string& rankingranking::rankingname() const {
  return *rankingname_;
}
inline void rankingranking::set_rankingname(const ::std::string& value) {
  set_has_rankingname();
  if (rankingname_ == &::google::protobuf::internal::kEmptyString) {
    rankingname_ = new ::std::string;
  }
  rankingname_->assign(value);
}
inline void rankingranking::set_rankingname(const char* value) {
  set_has_rankingname();
  if (rankingname_ == &::google::protobuf::internal::kEmptyString) {
    rankingname_ = new ::std::string;
  }
  rankingname_->assign(value);
}
inline void rankingranking::set_rankingname(const char* value, size_t size) {
  set_has_rankingname();
  if (rankingname_ == &::google::protobuf::internal::kEmptyString) {
    rankingname_ = new ::std::string;
  }
  rankingname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rankingranking::mutable_rankingname() {
  set_has_rankingname();
  if (rankingname_ == &::google::protobuf::internal::kEmptyString) {
    rankingname_ = new ::std::string;
  }
  return rankingname_;
}
inline ::std::string* rankingranking::release_rankingname() {
  clear_has_rankingname();
  if (rankingname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rankingname_;
    rankingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rankingranking::set_allocated_rankingname(::std::string* rankingname) {
  if (rankingname_ != &::google::protobuf::internal::kEmptyString) {
    delete rankingname_;
  }
  if (rankingname) {
    set_has_rankingname();
    rankingname_ = rankingname;
  } else {
    clear_has_rankingname();
    rankingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 save = 3;
inline bool rankingranking::has_save() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rankingranking::set_has_save() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rankingranking::clear_has_save() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rankingranking::clear_save() {
  save_ = 0;
  clear_has_save();
}
inline ::google::protobuf::int32 rankingranking::save() const {
  return save_;
}
inline void rankingranking::set_save(::google::protobuf::int32 value) {
  set_has_save();
  save_ = value;
}

// optional int32 capacity = 4;
inline bool rankingranking::has_capacity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void rankingranking::set_has_capacity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void rankingranking::clear_has_capacity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void rankingranking::clear_capacity() {
  capacity_ = 0;
  clear_has_capacity();
}
inline ::google::protobuf::int32 rankingranking::capacity() const {
  return capacity_;
}
inline void rankingranking::set_capacity(::google::protobuf::int32 value) {
  set_has_capacity();
  capacity_ = value;
}

// optional int32 showSize = 5;
inline bool rankingranking::has_showsize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void rankingranking::set_has_showsize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void rankingranking::clear_has_showsize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void rankingranking::clear_showsize() {
  showsize_ = 0;
  clear_has_showsize();
}
inline ::google::protobuf::int32 rankingranking::showsize() const {
  return showsize_;
}
inline void rankingranking::set_showsize(::google::protobuf::int32 value) {
  set_has_showsize();
  showsize_ = value;
}

// optional int32 rankModule = 6;
inline bool rankingranking::has_rankmodule() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void rankingranking::set_has_rankmodule() {
  _has_bits_[0] |= 0x00000020u;
}
inline void rankingranking::clear_has_rankmodule() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void rankingranking::clear_rankmodule() {
  rankmodule_ = 0;
  clear_has_rankmodule();
}
inline ::google::protobuf::int32 rankingranking::rankmodule() const {
  return rankmodule_;
}
inline void rankingranking::set_rankmodule(::google::protobuf::int32 value) {
  set_has_rankmodule();
  rankmodule_ = value;
}

// repeated int32 dateID = 7;
inline int rankingranking::dateid_size() const {
  return dateid_.size();
}
inline void rankingranking::clear_dateid() {
  dateid_.Clear();
}
inline ::google::protobuf::int32 rankingranking::dateid(int index) const {
  return dateid_.Get(index);
}
inline void rankingranking::set_dateid(int index, ::google::protobuf::int32 value) {
  dateid_.Set(index, value);
}
inline void rankingranking::add_dateid(::google::protobuf::int32 value) {
  dateid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
rankingranking::dateid() const {
  return dateid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
rankingranking::mutable_dateid() {
  return &dateid_;
}

// -------------------------------------------------------------------

// Sheet_rankingranking

// repeated .proto_ff.rankingranking rankingranking_List = 1;
inline int Sheet_rankingranking::rankingranking_list_size() const {
  return rankingranking_list_.size();
}
inline void Sheet_rankingranking::clear_rankingranking_list() {
  rankingranking_list_.Clear();
}
inline const ::proto_ff::rankingranking& Sheet_rankingranking::rankingranking_list(int index) const {
  return rankingranking_list_.Get(index);
}
inline ::proto_ff::rankingranking* Sheet_rankingranking::mutable_rankingranking_list(int index) {
  return rankingranking_list_.Mutable(index);
}
inline ::proto_ff::rankingranking* Sheet_rankingranking::add_rankingranking_list() {
  return rankingranking_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingranking >&
Sheet_rankingranking::rankingranking_list() const {
  return rankingranking_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingranking >*
Sheet_rankingranking::mutable_rankingranking_list() {
  return &rankingranking_list_;
}

// -------------------------------------------------------------------

// rankingdate

// optional int32 dateID = 1;
inline bool rankingdate::has_dateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rankingdate::set_has_dateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rankingdate::clear_has_dateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rankingdate::clear_dateid() {
  dateid_ = 0;
  clear_has_dateid();
}
inline ::google::protobuf::int32 rankingdate::dateid() const {
  return dateid_;
}
inline void rankingdate::set_dateid(::google::protobuf::int32 value) {
  set_has_dateid();
  dateid_ = value;
}

// optional string dateName = 2;
inline bool rankingdate::has_datename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rankingdate::set_has_datename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rankingdate::clear_has_datename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rankingdate::clear_datename() {
  if (datename_ != &::google::protobuf::internal::kEmptyString) {
    datename_->clear();
  }
  clear_has_datename();
}
inline const ::std::string& rankingdate::datename() const {
  return *datename_;
}
inline void rankingdate::set_datename(const ::std::string& value) {
  set_has_datename();
  if (datename_ == &::google::protobuf::internal::kEmptyString) {
    datename_ = new ::std::string;
  }
  datename_->assign(value);
}
inline void rankingdate::set_datename(const char* value) {
  set_has_datename();
  if (datename_ == &::google::protobuf::internal::kEmptyString) {
    datename_ = new ::std::string;
  }
  datename_->assign(value);
}
inline void rankingdate::set_datename(const char* value, size_t size) {
  set_has_datename();
  if (datename_ == &::google::protobuf::internal::kEmptyString) {
    datename_ = new ::std::string;
  }
  datename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rankingdate::mutable_datename() {
  set_has_datename();
  if (datename_ == &::google::protobuf::internal::kEmptyString) {
    datename_ = new ::std::string;
  }
  return datename_;
}
inline ::std::string* rankingdate::release_datename() {
  clear_has_datename();
  if (datename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = datename_;
    datename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rankingdate::set_allocated_datename(::std::string* datename) {
  if (datename_ != &::google::protobuf::internal::kEmptyString) {
    delete datename_;
  }
  if (datename) {
    set_has_datename();
    datename_ = datename;
  } else {
    clear_has_datename();
    datename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_rankingdate

// repeated .proto_ff.rankingdate rankingdate_List = 1;
inline int Sheet_rankingdate::rankingdate_list_size() const {
  return rankingdate_list_.size();
}
inline void Sheet_rankingdate::clear_rankingdate_list() {
  rankingdate_list_.Clear();
}
inline const ::proto_ff::rankingdate& Sheet_rankingdate::rankingdate_list(int index) const {
  return rankingdate_list_.Get(index);
}
inline ::proto_ff::rankingdate* Sheet_rankingdate::mutable_rankingdate_list(int index) {
  return rankingdate_list_.Mutable(index);
}
inline ::proto_ff::rankingdate* Sheet_rankingdate::add_rankingdate_list() {
  return rankingdate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingdate >&
Sheet_rankingdate::rankingdate_list() const {
  return rankingdate_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingdate >*
Sheet_rankingdate::mutable_rankingdate_list() {
  return &rankingdate_list_;
}

// -------------------------------------------------------------------

// rankingpkcons

// optional int32 ID = 1;
inline bool rankingpkcons::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void rankingpkcons::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void rankingpkcons::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void rankingpkcons::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 rankingpkcons::id() const {
  return id_;
}
inline void rankingpkcons::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 valuedata = 2;
inline bool rankingpkcons::has_valuedata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void rankingpkcons::set_has_valuedata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void rankingpkcons::clear_has_valuedata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void rankingpkcons::clear_valuedata() {
  valuedata_ = 0;
  clear_has_valuedata();
}
inline ::google::protobuf::int32 rankingpkcons::valuedata() const {
  return valuedata_;
}
inline void rankingpkcons::set_valuedata(::google::protobuf::int32 value) {
  set_has_valuedata();
  valuedata_ = value;
}

// optional string stringdata = 3;
inline bool rankingpkcons::has_stringdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void rankingpkcons::set_has_stringdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void rankingpkcons::clear_has_stringdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void rankingpkcons::clear_stringdata() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    stringdata_->clear();
  }
  clear_has_stringdata();
}
inline const ::std::string& rankingpkcons::stringdata() const {
  return *stringdata_;
}
inline void rankingpkcons::set_stringdata(const ::std::string& value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void rankingpkcons::set_stringdata(const char* value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void rankingpkcons::set_stringdata(const char* value, size_t size) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* rankingpkcons::mutable_stringdata() {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  return stringdata_;
}
inline ::std::string* rankingpkcons::release_stringdata() {
  clear_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringdata_;
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void rankingpkcons::set_allocated_stringdata(::std::string* stringdata) {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (stringdata) {
    set_has_stringdata();
    stringdata_ = stringdata;
  } else {
    clear_has_stringdata();
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_rankingpkcons

// repeated .proto_ff.rankingpkcons rankingpkcons_List = 1;
inline int Sheet_rankingpkcons::rankingpkcons_list_size() const {
  return rankingpkcons_list_.size();
}
inline void Sheet_rankingpkcons::clear_rankingpkcons_list() {
  rankingpkcons_list_.Clear();
}
inline const ::proto_ff::rankingpkcons& Sheet_rankingpkcons::rankingpkcons_list(int index) const {
  return rankingpkcons_list_.Get(index);
}
inline ::proto_ff::rankingpkcons* Sheet_rankingpkcons::mutable_rankingpkcons_list(int index) {
  return rankingpkcons_list_.Mutable(index);
}
inline ::proto_ff::rankingpkcons* Sheet_rankingpkcons::add_rankingpkcons_list() {
  return rankingpkcons_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingpkcons >&
Sheet_rankingpkcons::rankingpkcons_list() const {
  return rankingpkcons_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::rankingpkcons >*
Sheet_rankingpkcons::mutable_rankingpkcons_list() {
  return &rankingpkcons_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ranking_2eproto__INCLUDED
