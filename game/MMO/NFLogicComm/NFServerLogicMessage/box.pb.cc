// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: box.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "box.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* boxequipDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  boxequipDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* boxitemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  boxitemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* boxbox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  boxbox_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_boxbox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_boxbox_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_box_2eproto() {
  protobuf_AddDesc_box_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "box.proto");
  GOOGLE_CHECK(file != NULL);
  boxequipDesc_descriptor_ = file->message_type(0);
  static const int boxequipDesc_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxequipDesc, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxequipDesc, minnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxequipDesc, isbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxequipDesc, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxequipDesc, id_),
  };
  boxequipDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      boxequipDesc_descriptor_,
      boxequipDesc::default_instance_,
      boxequipDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxequipDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxequipDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(boxequipDesc));
  boxitemDesc_descriptor_ = file->message_type(1);
  static const int boxitemDesc_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxitemDesc, rand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxitemDesc, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxitemDesc, rarerand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxitemDesc, minnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxitemDesc, isbind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxitemDesc, id_),
  };
  boxitemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      boxitemDesc_descriptor_,
      boxitemDesc::default_instance_,
      boxitemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxitemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxitemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(boxitemDesc));
  boxbox_descriptor_ = file->message_type(2);
  static const int boxbox_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, drop_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, goldminnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, goldmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, goldrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, bindjewelminnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, bindjewelmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, bindjewelrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, jewelminnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, jewelmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, jewelrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, godjewelminnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, godjewelmaxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, godjewelrand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, eq_profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, item_),
  };
  boxbox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      boxbox_descriptor_,
      boxbox::default_instance_,
      boxbox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(boxbox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(boxbox));
  Sheet_boxbox_descriptor_ = file->message_type(3);
  static const int Sheet_boxbox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_boxbox, boxbox_list_),
  };
  Sheet_boxbox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_boxbox_descriptor_,
      Sheet_boxbox::default_instance_,
      Sheet_boxbox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_boxbox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_boxbox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_boxbox));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_box_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    boxequipDesc_descriptor_, &boxequipDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    boxitemDesc_descriptor_, &boxitemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    boxbox_descriptor_, &boxbox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_boxbox_descriptor_, &Sheet_boxbox::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_box_2eproto() {
  delete boxequipDesc::default_instance_;
  delete boxequipDesc_reflection_;
  delete boxitemDesc::default_instance_;
  delete boxitemDesc_reflection_;
  delete boxbox::default_instance_;
  delete boxbox_reflection_;
  delete Sheet_boxbox::default_instance_;
  delete Sheet_boxbox_reflection_;
}

void protobuf_AddDesc_box_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tbox.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\"\251\001\n\014boxequipDesc\022!\n\004rand\030\001 \001(\005B\023\302\377\024"
    "\017\346\246\202\347\216\207\347\231\276\345\210\206\346\257\224\022 \n\006minNum\030\002 \001(\005B\020\302\377\024\014\346\234"
    "\200\345\260\217\346\225\260\351\207\217\022\032\n\006isbind\030\003 \001(\005B\n\302\377\024\006\347\273\221\345\256\232\022 "
    "\n\006maxNum\030\004 \001(\005B\020\302\377\024\014\346\234\200\345\244\247\346\225\260\351\207\217\022\026\n\002id\030\005"
    " \001(\tB\n\302\377\024\002id\220\301\024/\"\326\001\n\013boxitemDesc\022\035\n\004rand"
    "\030\001 \001(\tB\017\302\377\024\006\346\235\203\351\207\215\220\301\024\257\002\022 \n\006maxNum\030\002 \001(\005B"
    "\020\302\377\024\014\346\234\200\345\244\247\346\225\260\351\207\217\022%\n\010rarerand\030\003 \001(\005B\023\302\377\024"
    "\017\346\246\202\347\216\207\347\231\276\345\210\206\346\257\224\022 \n\006minNum\030\004 \001(\005B\020\302\377\024\014\346\234"
    "\200\345\260\217\346\225\260\351\207\217\022$\n\006isbind\030\005 \001(\tB\024\302\377\024\014\346\240\207\345\256\232\346\240"
    "\207\350\256\260\220\301\024\177\022\027\n\002id\030\006 \001(\tB\013\302\377\024\002id\220\301\024\377\005\"\337\005\n\006bo"
    "xbox\022\033\n\002id\030\001 \001(\003B\017\302\377\024\013\346\216\211\350\220\275\345\214\205ID\022#\n\tdro"
    "p_type\030\002 \001(\005B\020\302\377\024\014\346\216\211\350\220\275\347\261\273\345\236\213\022$\n\ngoldmi"
    "nNum\030\003 \001(\005B\020\302\377\024\014\351\207\221\345\270\201\344\270\213\351\231\220\022$\n\ngoldmaxN"
    "um\030\004 \001(\005B\020\302\377\024\014\351\207\221\345\270\201\344\270\212\351\231\220\022%\n\010goldrand\030\005"
    " \001(\005B\023\302\377\024\017\351\207\221\345\270\201\346\216\211\350\220\275\347\216\207\022)\n\017bindjewelmi"
    "nNum\030\006 \001(\005B\020\302\377\024\014\347\273\221\351\222\273\344\270\213\351\231\220\022)\n\017bindjewe"
    "lmaxNum\030\007 \001(\005B\020\302\377\024\014\347\273\221\351\222\273\344\270\212\351\231\220\022*\n\rbindj"
    "ewelrand\030\010 \001(\005B\023\302\377\024\017\347\273\221\351\222\273\346\216\211\350\220\275\347\216\207\022%\n\013j"
    "ewelminNum\030\t \001(\005B\020\302\377\024\014\351\222\273\347\237\263\344\270\213\351\231\220\022%\n\013je"
    "welmaxNum\030\n \001(\005B\020\302\377\024\014\351\222\273\347\237\263\344\270\212\351\231\220\022&\n\tjew"
    "elrand\030\013 \001(\005B\023\302\377\024\017\351\222\273\347\237\263\346\216\211\350\220\275\347\216\207\022(\n\016god"
    "jewelminNum\030\014 \001(\005B\020\302\377\024\014\347\245\236\351\222\273\344\270\213\351\231\220\022(\n\016g"
    "odjewelmaxNum\030\r \001(\005B\020\302\377\024\014\347\245\236\351\222\273\344\270\212\351\231\220\022)\n"
    "\014godjewelrand\030\016 \001(\005B\023\302\377\024\017\347\245\236\351\222\273\346\216\211\350\220\275\347\216\207"
    "\0221\n\req_profession\030\017 \001(\tB\032\302\377\024\022\350\243\205\345\244\207\350\201\214\344\270"
    "\232\351\231\220\345\210\266\220\301\024 \022;\n\005equip\030\020 \003(\0132\026.proto_ff.bo"
    "xequipDescB\024\302\377\024\014\347\250\200\346\234\211\350\243\205\345\244\207\210\301\024\010\0229\n\004item"
    "\030\021 \003(\0132\025.proto_ff.boxitemDescB\024\302\377\024\014\347\250\200\346\234"
    "\211\347\211\251\345\223\201\210\301\0242\"<\n\014Sheet_boxbox\022,\n\013boxbox_Li"
    "st\030\001 \003(\0132\020.proto_ff.boxboxB\005\210\301\024\271(", 1233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "box.proto", &protobuf_RegisterTypes);
  boxequipDesc::default_instance_ = new boxequipDesc();
  boxitemDesc::default_instance_ = new boxitemDesc();
  boxbox::default_instance_ = new boxbox();
  Sheet_boxbox::default_instance_ = new Sheet_boxbox();
  boxequipDesc::default_instance_->InitAsDefaultInstance();
  boxitemDesc::default_instance_->InitAsDefaultInstance();
  boxbox::default_instance_->InitAsDefaultInstance();
  Sheet_boxbox::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_box_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_box_2eproto {
  StaticDescriptorInitializer_box_2eproto() {
    protobuf_AddDesc_box_2eproto();
  }
} static_descriptor_initializer_box_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int boxequipDesc::kRandFieldNumber;
const int boxequipDesc::kMinNumFieldNumber;
const int boxequipDesc::kIsbindFieldNumber;
const int boxequipDesc::kMaxNumFieldNumber;
const int boxequipDesc::kIdFieldNumber;
#endif  // !_MSC_VER

boxequipDesc::boxequipDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void boxequipDesc::InitAsDefaultInstance() {
}

boxequipDesc::boxequipDesc(const boxequipDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void boxequipDesc::SharedCtor() {
  _cached_size_ = 0;
  rand_ = 0;
  minnum_ = 0;
  isbind_ = 0;
  maxnum_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

boxequipDesc::~boxequipDesc() {
  SharedDtor();
}

void boxequipDesc::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void boxequipDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* boxequipDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return boxequipDesc_descriptor_;
}

const boxequipDesc& boxequipDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box_2eproto();
  return *default_instance_;
}

boxequipDesc* boxequipDesc::default_instance_ = NULL;

boxequipDesc* boxequipDesc::New() const {
  return new boxequipDesc;
}

void boxequipDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rand_ = 0;
    minnum_ = 0;
    isbind_ = 0;
    maxnum_ = 0;
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool boxequipDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rand_)));
          set_has_rand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minNum;
        break;
      }

      // optional int32 minNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minnum_)));
          set_has_minnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isbind;
        break;
      }

      // optional int32 isbind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isbind_)));
          set_has_isbind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxNum;
        break;
      }

      // optional int32 maxNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_id;
        break;
      }

      // optional string id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void boxequipDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rand = 1;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rand(), output);
  }

  // optional int32 minNum = 2;
  if (has_minnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minnum(), output);
  }

  // optional int32 isbind = 3;
  if (has_isbind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isbind(), output);
  }

  // optional int32 maxNum = 4;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxnum(), output);
  }

  // optional string id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* boxequipDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rand = 1;
  if (has_rand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rand(), target);
  }

  // optional int32 minNum = 2;
  if (has_minnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minnum(), target);
  }

  // optional int32 isbind = 3;
  if (has_isbind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isbind(), target);
  }

  // optional int32 maxNum = 4;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxnum(), target);
  }

  // optional string id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int boxequipDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rand = 1;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rand());
    }

    // optional int32 minNum = 2;
    if (has_minnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minnum());
    }

    // optional int32 isbind = 3;
    if (has_isbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isbind());
    }

    // optional int32 maxNum = 4;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }

    // optional string id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void boxequipDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const boxequipDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const boxequipDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void boxequipDesc::MergeFrom(const boxequipDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rand()) {
      set_rand(from.rand());
    }
    if (from.has_minnum()) {
      set_minnum(from.minnum());
    }
    if (from.has_isbind()) {
      set_isbind(from.isbind());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void boxequipDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boxequipDesc::CopyFrom(const boxequipDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boxequipDesc::IsInitialized() const {

  return true;
}

void boxequipDesc::Swap(boxequipDesc* other) {
  if (other != this) {
    std::swap(rand_, other->rand_);
    std::swap(minnum_, other->minnum_);
    std::swap(isbind_, other->isbind_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata boxequipDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = boxequipDesc_descriptor_;
  metadata.reflection = boxequipDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int boxitemDesc::kRandFieldNumber;
const int boxitemDesc::kMaxNumFieldNumber;
const int boxitemDesc::kRarerandFieldNumber;
const int boxitemDesc::kMinNumFieldNumber;
const int boxitemDesc::kIsbindFieldNumber;
const int boxitemDesc::kIdFieldNumber;
#endif  // !_MSC_VER

boxitemDesc::boxitemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void boxitemDesc::InitAsDefaultInstance() {
}

boxitemDesc::boxitemDesc(const boxitemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void boxitemDesc::SharedCtor() {
  _cached_size_ = 0;
  rand_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxnum_ = 0;
  rarerand_ = 0;
  minnum_ = 0;
  isbind_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

boxitemDesc::~boxitemDesc() {
  SharedDtor();
}

void boxitemDesc::SharedDtor() {
  if (rand_ != &::google::protobuf::internal::kEmptyString) {
    delete rand_;
  }
  if (isbind_ != &::google::protobuf::internal::kEmptyString) {
    delete isbind_;
  }
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void boxitemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* boxitemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return boxitemDesc_descriptor_;
}

const boxitemDesc& boxitemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box_2eproto();
  return *default_instance_;
}

boxitemDesc* boxitemDesc::default_instance_ = NULL;

boxitemDesc* boxitemDesc::New() const {
  return new boxitemDesc;
}

void boxitemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rand()) {
      if (rand_ != &::google::protobuf::internal::kEmptyString) {
        rand_->clear();
      }
    }
    maxnum_ = 0;
    rarerand_ = 0;
    minnum_ = 0;
    if (has_isbind()) {
      if (isbind_ != &::google::protobuf::internal::kEmptyString) {
        isbind_->clear();
      }
    }
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool boxitemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string rand = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rand()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rand().data(), this->rand().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxNum;
        break;
      }

      // optional int32 maxNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rarerand;
        break;
      }

      // optional int32 rarerand = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rarerand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rarerand_)));
          set_has_rarerand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_minNum;
        break;
      }

      // optional int32 minNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minnum_)));
          set_has_minnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_isbind;
        break;
      }

      // optional string isbind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isbind:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isbind()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isbind().data(), this->isbind().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_id;
        break;
      }

      // optional string id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void boxitemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string rand = 1;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rand().data(), this->rand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rand(), output);
  }

  // optional int32 maxNum = 2;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxnum(), output);
  }

  // optional int32 rarerand = 3;
  if (has_rarerand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rarerand(), output);
  }

  // optional int32 minNum = 4;
  if (has_minnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->minnum(), output);
  }

  // optional string isbind = 5;
  if (has_isbind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isbind().data(), this->isbind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->isbind(), output);
  }

  // optional string id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* boxitemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string rand = 1;
  if (has_rand()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rand().data(), this->rand().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rand(), target);
  }

  // optional int32 maxNum = 2;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxnum(), target);
  }

  // optional int32 rarerand = 3;
  if (has_rarerand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rarerand(), target);
  }

  // optional int32 minNum = 4;
  if (has_minnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->minnum(), target);
  }

  // optional string isbind = 5;
  if (has_isbind()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isbind().data(), this->isbind().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->isbind(), target);
  }

  // optional string id = 6;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int boxitemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string rand = 1;
    if (has_rand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rand());
    }

    // optional int32 maxNum = 2;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnum());
    }

    // optional int32 rarerand = 3;
    if (has_rarerand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rarerand());
    }

    // optional int32 minNum = 4;
    if (has_minnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minnum());
    }

    // optional string isbind = 5;
    if (has_isbind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isbind());
    }

    // optional string id = 6;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void boxitemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const boxitemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const boxitemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void boxitemDesc::MergeFrom(const boxitemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rand()) {
      set_rand(from.rand());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_rarerand()) {
      set_rarerand(from.rarerand());
    }
    if (from.has_minnum()) {
      set_minnum(from.minnum());
    }
    if (from.has_isbind()) {
      set_isbind(from.isbind());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void boxitemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boxitemDesc::CopyFrom(const boxitemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boxitemDesc::IsInitialized() const {

  return true;
}

void boxitemDesc::Swap(boxitemDesc* other) {
  if (other != this) {
    std::swap(rand_, other->rand_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(rarerand_, other->rarerand_);
    std::swap(minnum_, other->minnum_);
    std::swap(isbind_, other->isbind_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata boxitemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = boxitemDesc_descriptor_;
  metadata.reflection = boxitemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int boxbox::kIdFieldNumber;
const int boxbox::kDropTypeFieldNumber;
const int boxbox::kGoldminNumFieldNumber;
const int boxbox::kGoldmaxNumFieldNumber;
const int boxbox::kGoldrandFieldNumber;
const int boxbox::kBindjewelminNumFieldNumber;
const int boxbox::kBindjewelmaxNumFieldNumber;
const int boxbox::kBindjewelrandFieldNumber;
const int boxbox::kJewelminNumFieldNumber;
const int boxbox::kJewelmaxNumFieldNumber;
const int boxbox::kJewelrandFieldNumber;
const int boxbox::kGodjewelminNumFieldNumber;
const int boxbox::kGodjewelmaxNumFieldNumber;
const int boxbox::kGodjewelrandFieldNumber;
const int boxbox::kEqProfessionFieldNumber;
const int boxbox::kEquipFieldNumber;
const int boxbox::kItemFieldNumber;
#endif  // !_MSC_VER

boxbox::boxbox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void boxbox::InitAsDefaultInstance() {
}

boxbox::boxbox(const boxbox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void boxbox::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  drop_type_ = 0;
  goldminnum_ = 0;
  goldmaxnum_ = 0;
  goldrand_ = 0;
  bindjewelminnum_ = 0;
  bindjewelmaxnum_ = 0;
  bindjewelrand_ = 0;
  jewelminnum_ = 0;
  jewelmaxnum_ = 0;
  jewelrand_ = 0;
  godjewelminnum_ = 0;
  godjewelmaxnum_ = 0;
  godjewelrand_ = 0;
  eq_profession_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

boxbox::~boxbox() {
  SharedDtor();
}

void boxbox::SharedDtor() {
  if (eq_profession_ != &::google::protobuf::internal::kEmptyString) {
    delete eq_profession_;
  }
  if (this != default_instance_) {
  }
}

void boxbox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* boxbox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return boxbox_descriptor_;
}

const boxbox& boxbox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box_2eproto();
  return *default_instance_;
}

boxbox* boxbox::default_instance_ = NULL;

boxbox* boxbox::New() const {
  return new boxbox;
}

void boxbox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    drop_type_ = 0;
    goldminnum_ = 0;
    goldmaxnum_ = 0;
    goldrand_ = 0;
    bindjewelminnum_ = 0;
    bindjewelmaxnum_ = 0;
    bindjewelrand_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    jewelminnum_ = 0;
    jewelmaxnum_ = 0;
    jewelrand_ = 0;
    godjewelminnum_ = 0;
    godjewelmaxnum_ = 0;
    godjewelrand_ = 0;
    if (has_eq_profession()) {
      if (eq_profession_ != &::google::protobuf::internal::kEmptyString) {
        eq_profession_->clear();
      }
    }
  }
  equip_.Clear();
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool boxbox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_drop_type;
        break;
      }

      // optional int32 drop_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_drop_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drop_type_)));
          set_has_drop_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goldminNum;
        break;
      }

      // optional int32 goldminNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldminNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldminnum_)));
          set_has_goldminnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_goldmaxNum;
        break;
      }

      // optional int32 goldmaxNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldmaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldmaxnum_)));
          set_has_goldmaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_goldrand;
        break;
      }

      // optional int32 goldrand = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldrand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldrand_)));
          set_has_goldrand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bindjewelminNum;
        break;
      }

      // optional int32 bindjewelminNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindjewelminNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindjewelminnum_)));
          set_has_bindjewelminnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bindjewelmaxNum;
        break;
      }

      // optional int32 bindjewelmaxNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindjewelmaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindjewelmaxnum_)));
          set_has_bindjewelmaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bindjewelrand;
        break;
      }

      // optional int32 bindjewelrand = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindjewelrand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindjewelrand_)));
          set_has_bindjewelrand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_jewelminNum;
        break;
      }

      // optional int32 jewelminNum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jewelminNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelminnum_)));
          set_has_jewelminnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_jewelmaxNum;
        break;
      }

      // optional int32 jewelmaxNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jewelmaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelmaxnum_)));
          set_has_jewelmaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_jewelrand;
        break;
      }

      // optional int32 jewelrand = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jewelrand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jewelrand_)));
          set_has_jewelrand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_godjewelminNum;
        break;
      }

      // optional int32 godjewelminNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godjewelminNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godjewelminnum_)));
          set_has_godjewelminnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_godjewelmaxNum;
        break;
      }

      // optional int32 godjewelmaxNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godjewelmaxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godjewelmaxnum_)));
          set_has_godjewelmaxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_godjewelrand;
        break;
      }

      // optional int32 godjewelrand = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godjewelrand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godjewelrand_)));
          set_has_godjewelrand();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_eq_profession;
        break;
      }

      // optional string eq_profession = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eq_profession:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eq_profession()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eq_profession().data(), this->eq_profession().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_equip;
        break;
      }

      // repeated .proto_ff.boxequipDesc equip = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_equip;
        if (input->ExpectTag(138)) goto parse_item;
        break;
      }

      // repeated .proto_ff.boxitemDesc item = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void boxbox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 drop_type = 2;
  if (has_drop_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->drop_type(), output);
  }

  // optional int32 goldminNum = 3;
  if (has_goldminnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->goldminnum(), output);
  }

  // optional int32 goldmaxNum = 4;
  if (has_goldmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goldmaxnum(), output);
  }

  // optional int32 goldrand = 5;
  if (has_goldrand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->goldrand(), output);
  }

  // optional int32 bindjewelminNum = 6;
  if (has_bindjewelminnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bindjewelminnum(), output);
  }

  // optional int32 bindjewelmaxNum = 7;
  if (has_bindjewelmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bindjewelmaxnum(), output);
  }

  // optional int32 bindjewelrand = 8;
  if (has_bindjewelrand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bindjewelrand(), output);
  }

  // optional int32 jewelminNum = 9;
  if (has_jewelminnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->jewelminnum(), output);
  }

  // optional int32 jewelmaxNum = 10;
  if (has_jewelmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->jewelmaxnum(), output);
  }

  // optional int32 jewelrand = 11;
  if (has_jewelrand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->jewelrand(), output);
  }

  // optional int32 godjewelminNum = 12;
  if (has_godjewelminnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->godjewelminnum(), output);
  }

  // optional int32 godjewelmaxNum = 13;
  if (has_godjewelmaxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->godjewelmaxnum(), output);
  }

  // optional int32 godjewelrand = 14;
  if (has_godjewelrand()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->godjewelrand(), output);
  }

  // optional string eq_profession = 15;
  if (has_eq_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eq_profession().data(), this->eq_profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->eq_profession(), output);
  }

  // repeated .proto_ff.boxequipDesc equip = 16;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->equip(i), output);
  }

  // repeated .proto_ff.boxitemDesc item = 17;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* boxbox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 drop_type = 2;
  if (has_drop_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->drop_type(), target);
  }

  // optional int32 goldminNum = 3;
  if (has_goldminnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->goldminnum(), target);
  }

  // optional int32 goldmaxNum = 4;
  if (has_goldmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goldmaxnum(), target);
  }

  // optional int32 goldrand = 5;
  if (has_goldrand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->goldrand(), target);
  }

  // optional int32 bindjewelminNum = 6;
  if (has_bindjewelminnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bindjewelminnum(), target);
  }

  // optional int32 bindjewelmaxNum = 7;
  if (has_bindjewelmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bindjewelmaxnum(), target);
  }

  // optional int32 bindjewelrand = 8;
  if (has_bindjewelrand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bindjewelrand(), target);
  }

  // optional int32 jewelminNum = 9;
  if (has_jewelminnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->jewelminnum(), target);
  }

  // optional int32 jewelmaxNum = 10;
  if (has_jewelmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->jewelmaxnum(), target);
  }

  // optional int32 jewelrand = 11;
  if (has_jewelrand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->jewelrand(), target);
  }

  // optional int32 godjewelminNum = 12;
  if (has_godjewelminnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->godjewelminnum(), target);
  }

  // optional int32 godjewelmaxNum = 13;
  if (has_godjewelmaxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->godjewelmaxnum(), target);
  }

  // optional int32 godjewelrand = 14;
  if (has_godjewelrand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->godjewelrand(), target);
  }

  // optional string eq_profession = 15;
  if (has_eq_profession()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eq_profession().data(), this->eq_profession().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->eq_profession(), target);
  }

  // repeated .proto_ff.boxequipDesc equip = 16;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->equip(i), target);
  }

  // repeated .proto_ff.boxitemDesc item = 17;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int boxbox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 drop_type = 2;
    if (has_drop_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->drop_type());
    }

    // optional int32 goldminNum = 3;
    if (has_goldminnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldminnum());
    }

    // optional int32 goldmaxNum = 4;
    if (has_goldmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldmaxnum());
    }

    // optional int32 goldrand = 5;
    if (has_goldrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldrand());
    }

    // optional int32 bindjewelminNum = 6;
    if (has_bindjewelminnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindjewelminnum());
    }

    // optional int32 bindjewelmaxNum = 7;
    if (has_bindjewelmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindjewelmaxnum());
    }

    // optional int32 bindjewelrand = 8;
    if (has_bindjewelrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindjewelrand());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 jewelminNum = 9;
    if (has_jewelminnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelminnum());
    }

    // optional int32 jewelmaxNum = 10;
    if (has_jewelmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelmaxnum());
    }

    // optional int32 jewelrand = 11;
    if (has_jewelrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jewelrand());
    }

    // optional int32 godjewelminNum = 12;
    if (has_godjewelminnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godjewelminnum());
    }

    // optional int32 godjewelmaxNum = 13;
    if (has_godjewelmaxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godjewelmaxnum());
    }

    // optional int32 godjewelrand = 14;
    if (has_godjewelrand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godjewelrand());
    }

    // optional string eq_profession = 15;
    if (has_eq_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eq_profession());
    }

  }
  // repeated .proto_ff.boxequipDesc equip = 16;
  total_size += 2 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .proto_ff.boxitemDesc item = 17;
  total_size += 2 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void boxbox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const boxbox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const boxbox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void boxbox::MergeFrom(const boxbox& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_drop_type()) {
      set_drop_type(from.drop_type());
    }
    if (from.has_goldminnum()) {
      set_goldminnum(from.goldminnum());
    }
    if (from.has_goldmaxnum()) {
      set_goldmaxnum(from.goldmaxnum());
    }
    if (from.has_goldrand()) {
      set_goldrand(from.goldrand());
    }
    if (from.has_bindjewelminnum()) {
      set_bindjewelminnum(from.bindjewelminnum());
    }
    if (from.has_bindjewelmaxnum()) {
      set_bindjewelmaxnum(from.bindjewelmaxnum());
    }
    if (from.has_bindjewelrand()) {
      set_bindjewelrand(from.bindjewelrand());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_jewelminnum()) {
      set_jewelminnum(from.jewelminnum());
    }
    if (from.has_jewelmaxnum()) {
      set_jewelmaxnum(from.jewelmaxnum());
    }
    if (from.has_jewelrand()) {
      set_jewelrand(from.jewelrand());
    }
    if (from.has_godjewelminnum()) {
      set_godjewelminnum(from.godjewelminnum());
    }
    if (from.has_godjewelmaxnum()) {
      set_godjewelmaxnum(from.godjewelmaxnum());
    }
    if (from.has_godjewelrand()) {
      set_godjewelrand(from.godjewelrand());
    }
    if (from.has_eq_profession()) {
      set_eq_profession(from.eq_profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void boxbox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void boxbox::CopyFrom(const boxbox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool boxbox::IsInitialized() const {

  return true;
}

void boxbox::Swap(boxbox* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(drop_type_, other->drop_type_);
    std::swap(goldminnum_, other->goldminnum_);
    std::swap(goldmaxnum_, other->goldmaxnum_);
    std::swap(goldrand_, other->goldrand_);
    std::swap(bindjewelminnum_, other->bindjewelminnum_);
    std::swap(bindjewelmaxnum_, other->bindjewelmaxnum_);
    std::swap(bindjewelrand_, other->bindjewelrand_);
    std::swap(jewelminnum_, other->jewelminnum_);
    std::swap(jewelmaxnum_, other->jewelmaxnum_);
    std::swap(jewelrand_, other->jewelrand_);
    std::swap(godjewelminnum_, other->godjewelminnum_);
    std::swap(godjewelmaxnum_, other->godjewelmaxnum_);
    std::swap(godjewelrand_, other->godjewelrand_);
    std::swap(eq_profession_, other->eq_profession_);
    equip_.Swap(&other->equip_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata boxbox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = boxbox_descriptor_;
  metadata.reflection = boxbox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_boxbox::kBoxboxListFieldNumber;
#endif  // !_MSC_VER

Sheet_boxbox::Sheet_boxbox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_boxbox::InitAsDefaultInstance() {
}

Sheet_boxbox::Sheet_boxbox(const Sheet_boxbox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_boxbox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_boxbox::~Sheet_boxbox() {
  SharedDtor();
}

void Sheet_boxbox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_boxbox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_boxbox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_boxbox_descriptor_;
}

const Sheet_boxbox& Sheet_boxbox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_box_2eproto();
  return *default_instance_;
}

Sheet_boxbox* Sheet_boxbox::default_instance_ = NULL;

Sheet_boxbox* Sheet_boxbox::New() const {
  return new Sheet_boxbox;
}

void Sheet_boxbox::Clear() {
  boxbox_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_boxbox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.boxbox boxbox_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boxbox_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_boxbox_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_boxbox_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_boxbox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.boxbox boxbox_List = 1;
  for (int i = 0; i < this->boxbox_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->boxbox_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_boxbox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.boxbox boxbox_List = 1;
  for (int i = 0; i < this->boxbox_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->boxbox_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_boxbox::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.boxbox boxbox_List = 1;
  total_size += 1 * this->boxbox_list_size();
  for (int i = 0; i < this->boxbox_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->boxbox_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_boxbox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_boxbox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_boxbox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_boxbox::MergeFrom(const Sheet_boxbox& from) {
  GOOGLE_CHECK_NE(&from, this);
  boxbox_list_.MergeFrom(from.boxbox_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_boxbox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_boxbox::CopyFrom(const Sheet_boxbox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_boxbox::IsInitialized() const {

  return true;
}

void Sheet_boxbox::Swap(Sheet_boxbox* other) {
  if (other != this) {
    boxbox_list_.Swap(&other->boxbox_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_boxbox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_boxbox_descriptor_;
  metadata.reflection = Sheet_boxbox_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
