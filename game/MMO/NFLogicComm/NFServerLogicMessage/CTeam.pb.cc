// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CTeam.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CTeam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* TeamMemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMultMemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMultMemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMemSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMemSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMultMemSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMultMemSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamApplyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamApplyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMultApplyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMultApplyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterTeamMemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterTeamMemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterMultiTeamMemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterMultiTeamMemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamApplyLstReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamApplyLstReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamApplyLstRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamApplyLstRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamReplyApplyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamReplyApplyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamReplyApplyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamReplyApplyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamUpdateMemNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamUpdateMemNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamUpdateMemSimpleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamUpdateMemSimpleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamUpdateInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamUpdateInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamUpdateSimpleNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamUpdateSimpleNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamClearApplyLstReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamClearApplyLstReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamClearApplyLstRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamClearApplyLstRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamUpdateApplyNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamUpdateApplyNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApplyJoinTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApplyJoinTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteJoinTeamNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteJoinTeamNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyInviteJoinTeamReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyInviteJoinTeamReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReplyInviteJoinTeamRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReplyInviteJoinTeamRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamSetObjReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamSetObjReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamSetObjRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamSetObjRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPromoteLeaderReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPromoteLeaderReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamPromoteLeaderRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamPromoteLeaderRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamAutoMatchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamAutoMatchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamAutoMatchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamAutoMatchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamKickMemReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamKickMemReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamKickMemRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamKickMemRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamQuitReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamQuitReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamQuitRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamQuitRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamRefuseNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamRefuseNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMatchAtonceReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMatchAtonceReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamMatchAtonceRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamMatchAtonceRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCCreteTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCCreteTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCJoinTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCJoinTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCQuitTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCQuitTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCUpdateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCUpdateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCTeamLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCTeamLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCTeamDismiss_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCTeamDismiss_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLCharTeamUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLCharTeamUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLUpdateSimpleTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLUpdateSimpleTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLDismissTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLDismissTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* CLCharTeamClonessUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CLCharTeamClonessUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* LSTeamRobotHpSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LSTeamRobotHpSync_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupInviteStateProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupInviteStateProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupAllInviteStateProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupAllInviteStateProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Duplicate_CancelStateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Duplicate_CancelStateNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTeamRobotProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTeamRobotProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupMultTeamRobotProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupMultTeamRobotProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CTeam_2eproto() {
  protobuf_AddDesc_CTeam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CTeam.proto");
  GOOGLE_CHECK(file != NULL);
  TeamMemProto_descriptor_ = file->message_type(0);
  static const int TeamMemProto_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, jointime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, robotflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, palace_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, break_count_),
  };
  TeamMemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemProto_descriptor_,
      TeamMemProto::default_instance_,
      TeamMemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemProto));
  TeamMultMemProto_descriptor_ = file->message_type(1);
  static const int TeamMultMemProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMultMemProto, mem_lst_),
  };
  TeamMultMemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMultMemProto_descriptor_,
      TeamMultMemProto::default_instance_,
      TeamMultMemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMultMemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMultMemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMultMemProto));
  TeamMemSimpleProto_descriptor_ = file->message_type(2);
  static const int TeamMemSimpleProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemSimpleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemSimpleProto, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemSimpleProto, maxhp_),
  };
  TeamMemSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMemSimpleProto_descriptor_,
      TeamMemSimpleProto::default_instance_,
      TeamMemSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMemSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMemSimpleProto));
  TeamMultMemSimpleProto_descriptor_ = file->message_type(3);
  static const int TeamMultMemSimpleProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMultMemSimpleProto, mem_simple_),
  };
  TeamMultMemSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMultMemSimpleProto_descriptor_,
      TeamMultMemSimpleProto::default_instance_,
      TeamMultMemSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMultMemSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMultMemSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMultMemSimpleProto));
  TeamProto_descriptor_ = file->message_type(4);
  static const int TeamProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProto, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProto, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProto, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProto, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProto, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProto, auto_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProto, mems_),
  };
  TeamProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamProto_descriptor_,
      TeamProto::default_instance_,
      TeamProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamProto));
  TeamApplyProto_descriptor_ = file->message_type(5);
  static const int TeamApplyProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyProto, apply_time_),
  };
  TeamApplyProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamApplyProto_descriptor_,
      TeamApplyProto::default_instance_,
      TeamApplyProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamApplyProto));
  TeamMultApplyProto_descriptor_ = file->message_type(6);
  static const int TeamMultApplyProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMultApplyProto, apply_lst_),
  };
  TeamMultApplyProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMultApplyProto_descriptor_,
      TeamMultApplyProto::default_instance_,
      TeamMultApplyProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMultApplyProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMultApplyProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMultApplyProto));
  CenterTeamMemProto_descriptor_ = file->message_type(7);
  static const int CenterTeamMemProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, robotflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, palace_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, palace_breakcount_),
  };
  CenterTeamMemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterTeamMemProto_descriptor_,
      CenterTeamMemProto::default_instance_,
      CenterTeamMemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterTeamMemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterTeamMemProto));
  CenterMultiTeamMemProto_descriptor_ = file->message_type(8);
  static const int CenterMultiTeamMemProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterMultiTeamMemProto, mem_),
  };
  CenterMultiTeamMemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterMultiTeamMemProto_descriptor_,
      CenterMultiTeamMemProto::default_instance_,
      CenterMultiTeamMemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterMultiTeamMemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterMultiTeamMemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterMultiTeamMemProto));
  CreateTeamReq_descriptor_ = file->message_type(9);
  static const int CreateTeamReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamReq, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamReq, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamReq, max_level_),
  };
  CreateTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTeamReq_descriptor_,
      CreateTeamReq::default_instance_,
      CreateTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTeamReq));
  CreateTeamRsp_descriptor_ = file->message_type(10);
  static const int CreateTeamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamRsp, retcode_),
  };
  CreateTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateTeamRsp_descriptor_,
      CreateTeamRsp::default_instance_,
      CreateTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateTeamRsp));
  TeamApplyLstReq_descriptor_ = file->message_type(11);
  static const int TeamApplyLstReq_offsets_[1] = {
  };
  TeamApplyLstReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamApplyLstReq_descriptor_,
      TeamApplyLstReq::default_instance_,
      TeamApplyLstReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyLstReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyLstReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamApplyLstReq));
  TeamApplyLstRsp_descriptor_ = file->message_type(12);
  static const int TeamApplyLstRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyLstRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyLstRsp, apply_),
  };
  TeamApplyLstRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamApplyLstRsp_descriptor_,
      TeamApplyLstRsp::default_instance_,
      TeamApplyLstRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyLstRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamApplyLstRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamApplyLstRsp));
  TeamReplyApplyReq_descriptor_ = file->message_type(13);
  static const int TeamReplyApplyReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamReplyApplyReq, cid_),
  };
  TeamReplyApplyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamReplyApplyReq_descriptor_,
      TeamReplyApplyReq::default_instance_,
      TeamReplyApplyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamReplyApplyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamReplyApplyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamReplyApplyReq));
  TeamReplyApplyRsp_descriptor_ = file->message_type(14);
  static const int TeamReplyApplyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamReplyApplyRsp, retcode_),
  };
  TeamReplyApplyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamReplyApplyRsp_descriptor_,
      TeamReplyApplyRsp::default_instance_,
      TeamReplyApplyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamReplyApplyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamReplyApplyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamReplyApplyRsp));
  TeamUpdateMemNotify_descriptor_ = file->message_type(15);
  static const int TeamUpdateMemNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateMemNotify, del_mem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateMemNotify, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateMemNotify, mems_),
  };
  TeamUpdateMemNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamUpdateMemNotify_descriptor_,
      TeamUpdateMemNotify::default_instance_,
      TeamUpdateMemNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateMemNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateMemNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamUpdateMemNotify));
  TeamUpdateMemSimpleNotify_descriptor_ = file->message_type(16);
  static const int TeamUpdateMemSimpleNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateMemSimpleNotify, simple_info_),
  };
  TeamUpdateMemSimpleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamUpdateMemSimpleNotify_descriptor_,
      TeamUpdateMemSimpleNotify::default_instance_,
      TeamUpdateMemSimpleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateMemSimpleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateMemSimpleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamUpdateMemSimpleNotify));
  TeamUpdateInfoNotify_descriptor_ = file->message_type(17);
  static const int TeamUpdateInfoNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateInfoNotify, info_),
  };
  TeamUpdateInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamUpdateInfoNotify_descriptor_,
      TeamUpdateInfoNotify::default_instance_,
      TeamUpdateInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamUpdateInfoNotify));
  TeamUpdateSimpleNotify_descriptor_ = file->message_type(18);
  static const int TeamUpdateSimpleNotify_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateSimpleNotify, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateSimpleNotify, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateSimpleNotify, max_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateSimpleNotify, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateSimpleNotify, auto_match_),
  };
  TeamUpdateSimpleNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamUpdateSimpleNotify_descriptor_,
      TeamUpdateSimpleNotify::default_instance_,
      TeamUpdateSimpleNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateSimpleNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateSimpleNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamUpdateSimpleNotify));
  TeamClearApplyLstReq_descriptor_ = file->message_type(19);
  static const int TeamClearApplyLstReq_offsets_[1] = {
  };
  TeamClearApplyLstReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamClearApplyLstReq_descriptor_,
      TeamClearApplyLstReq::default_instance_,
      TeamClearApplyLstReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamClearApplyLstReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamClearApplyLstReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamClearApplyLstReq));
  TeamClearApplyLstRsp_descriptor_ = file->message_type(20);
  static const int TeamClearApplyLstRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamClearApplyLstRsp, retcode_),
  };
  TeamClearApplyLstRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamClearApplyLstRsp_descriptor_,
      TeamClearApplyLstRsp::default_instance_,
      TeamClearApplyLstRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamClearApplyLstRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamClearApplyLstRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamClearApplyLstRsp));
  TeamUpdateApplyNotify_descriptor_ = file->message_type(21);
  static const int TeamUpdateApplyNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateApplyNotify, del_apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateApplyNotify, apply_),
  };
  TeamUpdateApplyNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamUpdateApplyNotify_descriptor_,
      TeamUpdateApplyNotify::default_instance_,
      TeamUpdateApplyNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateApplyNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamUpdateApplyNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamUpdateApplyNotify));
  ApplyJoinTeamReq_descriptor_ = file->message_type(22);
  static const int ApplyJoinTeamReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReq, teamid_),
  };
  ApplyJoinTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinTeamReq_descriptor_,
      ApplyJoinTeamReq::default_instance_,
      ApplyJoinTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinTeamReq));
  ApplyJoinTeamRsp_descriptor_ = file->message_type(23);
  static const int ApplyJoinTeamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamRsp, retcode_),
  };
  ApplyJoinTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApplyJoinTeamRsp_descriptor_,
      ApplyJoinTeamRsp::default_instance_,
      ApplyJoinTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApplyJoinTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApplyJoinTeamRsp));
  InviteJoinTeamReq_descriptor_ = file->message_type(24);
  static const int InviteJoinTeamReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReq, invite_cid_),
  };
  InviteJoinTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinTeamReq_descriptor_,
      InviteJoinTeamReq::default_instance_,
      InviteJoinTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinTeamReq));
  InviteJoinTeamRsp_descriptor_ = file->message_type(25);
  static const int InviteJoinTeamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamRsp, retcode_),
  };
  InviteJoinTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinTeamRsp_descriptor_,
      InviteJoinTeamRsp::default_instance_,
      InviteJoinTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinTeamRsp));
  InviteJoinTeamNotify_descriptor_ = file->message_type(26);
  static const int InviteJoinTeamNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamNotify, invite_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamNotify, invite_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamNotify, teamid_),
  };
  InviteJoinTeamNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteJoinTeamNotify_descriptor_,
      InviteJoinTeamNotify::default_instance_,
      InviteJoinTeamNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteJoinTeamNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteJoinTeamNotify));
  ReplyInviteJoinTeamReq_descriptor_ = file->message_type(27);
  static const int ReplyInviteJoinTeamReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinTeamReq, reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinTeamReq, teamid_),
  };
  ReplyInviteJoinTeamReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyInviteJoinTeamReq_descriptor_,
      ReplyInviteJoinTeamReq::default_instance_,
      ReplyInviteJoinTeamReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinTeamReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinTeamReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyInviteJoinTeamReq));
  ReplyInviteJoinTeamRsp_descriptor_ = file->message_type(28);
  static const int ReplyInviteJoinTeamRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinTeamRsp, retcode_),
  };
  ReplyInviteJoinTeamRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReplyInviteJoinTeamRsp_descriptor_,
      ReplyInviteJoinTeamRsp::default_instance_,
      ReplyInviteJoinTeamRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinTeamRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReplyInviteJoinTeamRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReplyInviteJoinTeamRsp));
  TeamSetObjReq_descriptor_ = file->message_type(29);
  static const int TeamSetObjReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSetObjReq, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSetObjReq, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSetObjReq, max_level_),
  };
  TeamSetObjReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamSetObjReq_descriptor_,
      TeamSetObjReq::default_instance_,
      TeamSetObjReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSetObjReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSetObjReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamSetObjReq));
  TeamSetObjRsp_descriptor_ = file->message_type(30);
  static const int TeamSetObjRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSetObjRsp, retcode_),
  };
  TeamSetObjRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamSetObjRsp_descriptor_,
      TeamSetObjRsp::default_instance_,
      TeamSetObjRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSetObjRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamSetObjRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamSetObjRsp));
  TeamPromoteLeaderReq_descriptor_ = file->message_type(31);
  static const int TeamPromoteLeaderReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPromoteLeaderReq, cid_),
  };
  TeamPromoteLeaderReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPromoteLeaderReq_descriptor_,
      TeamPromoteLeaderReq::default_instance_,
      TeamPromoteLeaderReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPromoteLeaderReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPromoteLeaderReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPromoteLeaderReq));
  TeamPromoteLeaderRsp_descriptor_ = file->message_type(32);
  static const int TeamPromoteLeaderRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPromoteLeaderRsp, retcode_),
  };
  TeamPromoteLeaderRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamPromoteLeaderRsp_descriptor_,
      TeamPromoteLeaderRsp::default_instance_,
      TeamPromoteLeaderRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPromoteLeaderRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamPromoteLeaderRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamPromoteLeaderRsp));
  TeamAutoMatchReq_descriptor_ = file->message_type(33);
  static const int TeamAutoMatchReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchReq, auto_match_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchReq, object_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchReq, min_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchReq, max_level_),
  };
  TeamAutoMatchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamAutoMatchReq_descriptor_,
      TeamAutoMatchReq::default_instance_,
      TeamAutoMatchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamAutoMatchReq));
  TeamAutoMatchRsp_descriptor_ = file->message_type(34);
  static const int TeamAutoMatchRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchRsp, retcode_),
  };
  TeamAutoMatchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamAutoMatchRsp_descriptor_,
      TeamAutoMatchRsp::default_instance_,
      TeamAutoMatchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamAutoMatchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamAutoMatchRsp));
  TeamKickMemReq_descriptor_ = file->message_type(35);
  static const int TeamKickMemReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamKickMemReq, kick_cid_),
  };
  TeamKickMemReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamKickMemReq_descriptor_,
      TeamKickMemReq::default_instance_,
      TeamKickMemReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamKickMemReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamKickMemReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamKickMemReq));
  TeamKickMemRsp_descriptor_ = file->message_type(36);
  static const int TeamKickMemRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamKickMemRsp, retcode_),
  };
  TeamKickMemRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamKickMemRsp_descriptor_,
      TeamKickMemRsp::default_instance_,
      TeamKickMemRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamKickMemRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamKickMemRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamKickMemRsp));
  TeamQuitReq_descriptor_ = file->message_type(37);
  static const int TeamQuitReq_offsets_[1] = {
  };
  TeamQuitReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamQuitReq_descriptor_,
      TeamQuitReq::default_instance_,
      TeamQuitReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuitReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuitReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamQuitReq));
  TeamQuitRsp_descriptor_ = file->message_type(38);
  static const int TeamQuitRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuitRsp, retcode_),
  };
  TeamQuitRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamQuitRsp_descriptor_,
      TeamQuitRsp::default_instance_,
      TeamQuitRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuitRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamQuitRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamQuitRsp));
  TeamRefuseNotify_descriptor_ = file->message_type(39);
  static const int TeamRefuseNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRefuseNotify, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRefuseNotify, name_),
  };
  TeamRefuseNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamRefuseNotify_descriptor_,
      TeamRefuseNotify::default_instance_,
      TeamRefuseNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRefuseNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamRefuseNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamRefuseNotify));
  TeamMatchAtonceReq_descriptor_ = file->message_type(40);
  static const int TeamMatchAtonceReq_offsets_[1] = {
  };
  TeamMatchAtonceReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMatchAtonceReq_descriptor_,
      TeamMatchAtonceReq::default_instance_,
      TeamMatchAtonceReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMatchAtonceReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMatchAtonceReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMatchAtonceReq));
  TeamMatchAtonceRsp_descriptor_ = file->message_type(41);
  static const int TeamMatchAtonceRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMatchAtonceRsp, retcode_),
  };
  TeamMatchAtonceRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamMatchAtonceRsp_descriptor_,
      TeamMatchAtonceRsp::default_instance_,
      TeamMatchAtonceRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMatchAtonceRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamMatchAtonceRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamMatchAtonceRsp));
  SCCreteTeam_descriptor_ = file->message_type(42);
  static const int SCCreteTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCreteTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCreteTeam, info_),
  };
  SCCreteTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCCreteTeam_descriptor_,
      SCCreteTeam::default_instance_,
      SCCreteTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCreteTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCCreteTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCCreteTeam));
  SCJoinTeam_descriptor_ = file->message_type(43);
  static const int SCJoinTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCJoinTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCJoinTeam, info_),
  };
  SCJoinTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCJoinTeam_descriptor_,
      SCJoinTeam::default_instance_,
      SCJoinTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCJoinTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCJoinTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCJoinTeam));
  SCQuitTeam_descriptor_ = file->message_type(44);
  static const int SCQuitTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCQuitTeam, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCQuitTeam, teamid_),
  };
  SCQuitTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCQuitTeam_descriptor_,
      SCQuitTeam::default_instance_,
      SCQuitTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCQuitTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCQuitTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCQuitTeam));
  SCUpdateTeam_descriptor_ = file->message_type(45);
  static const int SCUpdateTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCUpdateTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCUpdateTeam, info_),
  };
  SCUpdateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCUpdateTeam_descriptor_,
      SCUpdateTeam::default_instance_,
      SCUpdateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCUpdateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCUpdateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCUpdateTeam));
  SCTeamLeader_descriptor_ = file->message_type(46);
  static const int SCTeamLeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCTeamLeader, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCTeamLeader, leader_),
  };
  SCTeamLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCTeamLeader_descriptor_,
      SCTeamLeader::default_instance_,
      SCTeamLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCTeamLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCTeamLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCTeamLeader));
  SCTeamDismiss_descriptor_ = file->message_type(47);
  static const int SCTeamDismiss_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCTeamDismiss, teamid_),
  };
  SCTeamDismiss_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCTeamDismiss_descriptor_,
      SCTeamDismiss::default_instance_,
      SCTeamDismiss_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCTeamDismiss, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCTeamDismiss, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCTeamDismiss));
  CLCharTeamUpdate_descriptor_ = file->message_type(48);
  static const int CLCharTeamUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamUpdate, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamUpdate, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamUpdate, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamUpdate, mem_cnt_),
  };
  CLCharTeamUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLCharTeamUpdate_descriptor_,
      CLCharTeamUpdate::default_instance_,
      CLCharTeamUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLCharTeamUpdate));
  CLUpdateSimpleTeam_descriptor_ = file->message_type(49);
  static const int CLUpdateSimpleTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLUpdateSimpleTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLUpdateSimpleTeam, leadercid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLUpdateSimpleTeam, info_),
  };
  CLUpdateSimpleTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLUpdateSimpleTeam_descriptor_,
      CLUpdateSimpleTeam::default_instance_,
      CLUpdateSimpleTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLUpdateSimpleTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLUpdateSimpleTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLUpdateSimpleTeam));
  CLDismissTeam_descriptor_ = file->message_type(50);
  static const int CLDismissTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLDismissTeam, teamid_),
  };
  CLDismissTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLDismissTeam_descriptor_,
      CLDismissTeam::default_instance_,
      CLDismissTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLDismissTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLDismissTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLDismissTeam));
  CLCharTeamClonessUpdate_descriptor_ = file->message_type(51);
  static const int CLCharTeamClonessUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamClonessUpdate, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamClonessUpdate, cloness_lev_),
  };
  CLCharTeamClonessUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CLCharTeamClonessUpdate_descriptor_,
      CLCharTeamClonessUpdate::default_instance_,
      CLCharTeamClonessUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamClonessUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CLCharTeamClonessUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CLCharTeamClonessUpdate));
  LSTeamRobotHpSync_descriptor_ = file->message_type(52);
  static const int LSTeamRobotHpSync_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSTeamRobotHpSync, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSTeamRobotHpSync, robotcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSTeamRobotHpSync, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSTeamRobotHpSync, maxhp_),
  };
  LSTeamRobotHpSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LSTeamRobotHpSync_descriptor_,
      LSTeamRobotHpSync::default_instance_,
      LSTeamRobotHpSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSTeamRobotHpSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LSTeamRobotHpSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LSTeamRobotHpSync));
  DupInviteStateProto_descriptor_ = file->message_type(53);
  static const int DupInviteStateProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupInviteStateProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupInviteStateProto, state_),
  };
  DupInviteStateProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupInviteStateProto_descriptor_,
      DupInviteStateProto::default_instance_,
      DupInviteStateProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupInviteStateProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupInviteStateProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupInviteStateProto));
  DupAllInviteStateProto_descriptor_ = file->message_type(54);
  static const int DupAllInviteStateProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupAllInviteStateProto, all_state_),
  };
  DupAllInviteStateProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupAllInviteStateProto_descriptor_,
      DupAllInviteStateProto::default_instance_,
      DupAllInviteStateProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupAllInviteStateProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupAllInviteStateProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupAllInviteStateProto));
  Duplicate_CancelStateNotify_descriptor_ = file->message_type(55);
  static const int Duplicate_CancelStateNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_CancelStateNotify, retcode_),
  };
  Duplicate_CancelStateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Duplicate_CancelStateNotify_descriptor_,
      Duplicate_CancelStateNotify::default_instance_,
      Duplicate_CancelStateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_CancelStateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Duplicate_CancelStateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Duplicate_CancelStateNotify));
  DupTeamRobotProto_descriptor_ = file->message_type(56);
  static const int DupTeamRobotProto_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, charcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, coef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, robotcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, fight_),
  };
  DupTeamRobotProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTeamRobotProto_descriptor_,
      DupTeamRobotProto::default_instance_,
      DupTeamRobotProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTeamRobotProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTeamRobotProto));
  DupMultTeamRobotProto_descriptor_ = file->message_type(57);
  static const int DupMultTeamRobotProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupMultTeamRobotProto, info_),
  };
  DupMultTeamRobotProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupMultTeamRobotProto_descriptor_,
      DupMultTeamRobotProto::default_instance_,
      DupMultTeamRobotProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupMultTeamRobotProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupMultTeamRobotProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupMultTeamRobotProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CTeam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemProto_descriptor_, &TeamMemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMultMemProto_descriptor_, &TeamMultMemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMemSimpleProto_descriptor_, &TeamMemSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMultMemSimpleProto_descriptor_, &TeamMultMemSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamProto_descriptor_, &TeamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamApplyProto_descriptor_, &TeamApplyProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMultApplyProto_descriptor_, &TeamMultApplyProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterTeamMemProto_descriptor_, &CenterTeamMemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterMultiTeamMemProto_descriptor_, &CenterMultiTeamMemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTeamReq_descriptor_, &CreateTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateTeamRsp_descriptor_, &CreateTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamApplyLstReq_descriptor_, &TeamApplyLstReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamApplyLstRsp_descriptor_, &TeamApplyLstRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamReplyApplyReq_descriptor_, &TeamReplyApplyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamReplyApplyRsp_descriptor_, &TeamReplyApplyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamUpdateMemNotify_descriptor_, &TeamUpdateMemNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamUpdateMemSimpleNotify_descriptor_, &TeamUpdateMemSimpleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamUpdateInfoNotify_descriptor_, &TeamUpdateInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamUpdateSimpleNotify_descriptor_, &TeamUpdateSimpleNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamClearApplyLstReq_descriptor_, &TeamClearApplyLstReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamClearApplyLstRsp_descriptor_, &TeamClearApplyLstRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamUpdateApplyNotify_descriptor_, &TeamUpdateApplyNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinTeamReq_descriptor_, &ApplyJoinTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApplyJoinTeamRsp_descriptor_, &ApplyJoinTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinTeamReq_descriptor_, &InviteJoinTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinTeamRsp_descriptor_, &InviteJoinTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteJoinTeamNotify_descriptor_, &InviteJoinTeamNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyInviteJoinTeamReq_descriptor_, &ReplyInviteJoinTeamReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReplyInviteJoinTeamRsp_descriptor_, &ReplyInviteJoinTeamRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamSetObjReq_descriptor_, &TeamSetObjReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamSetObjRsp_descriptor_, &TeamSetObjRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPromoteLeaderReq_descriptor_, &TeamPromoteLeaderReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamPromoteLeaderRsp_descriptor_, &TeamPromoteLeaderRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamAutoMatchReq_descriptor_, &TeamAutoMatchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamAutoMatchRsp_descriptor_, &TeamAutoMatchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamKickMemReq_descriptor_, &TeamKickMemReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamKickMemRsp_descriptor_, &TeamKickMemRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamQuitReq_descriptor_, &TeamQuitReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamQuitRsp_descriptor_, &TeamQuitRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamRefuseNotify_descriptor_, &TeamRefuseNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMatchAtonceReq_descriptor_, &TeamMatchAtonceReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamMatchAtonceRsp_descriptor_, &TeamMatchAtonceRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCCreteTeam_descriptor_, &SCCreteTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCJoinTeam_descriptor_, &SCJoinTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCQuitTeam_descriptor_, &SCQuitTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCUpdateTeam_descriptor_, &SCUpdateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCTeamLeader_descriptor_, &SCTeamLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCTeamDismiss_descriptor_, &SCTeamDismiss::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLCharTeamUpdate_descriptor_, &CLCharTeamUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLUpdateSimpleTeam_descriptor_, &CLUpdateSimpleTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLDismissTeam_descriptor_, &CLDismissTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CLCharTeamClonessUpdate_descriptor_, &CLCharTeamClonessUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LSTeamRobotHpSync_descriptor_, &LSTeamRobotHpSync::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupInviteStateProto_descriptor_, &DupInviteStateProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupAllInviteStateProto_descriptor_, &DupAllInviteStateProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Duplicate_CancelStateNotify_descriptor_, &Duplicate_CancelStateNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTeamRobotProto_descriptor_, &DupTeamRobotProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupMultTeamRobotProto_descriptor_, &DupMultTeamRobotProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CTeam_2eproto() {
  delete TeamMemProto::default_instance_;
  delete TeamMemProto_reflection_;
  delete TeamMultMemProto::default_instance_;
  delete TeamMultMemProto_reflection_;
  delete TeamMemSimpleProto::default_instance_;
  delete TeamMemSimpleProto_reflection_;
  delete TeamMultMemSimpleProto::default_instance_;
  delete TeamMultMemSimpleProto_reflection_;
  delete TeamProto::default_instance_;
  delete TeamProto_reflection_;
  delete TeamApplyProto::default_instance_;
  delete TeamApplyProto_reflection_;
  delete TeamMultApplyProto::default_instance_;
  delete TeamMultApplyProto_reflection_;
  delete CenterTeamMemProto::default_instance_;
  delete CenterTeamMemProto_reflection_;
  delete CenterMultiTeamMemProto::default_instance_;
  delete CenterMultiTeamMemProto_reflection_;
  delete CreateTeamReq::default_instance_;
  delete CreateTeamReq_reflection_;
  delete CreateTeamRsp::default_instance_;
  delete CreateTeamRsp_reflection_;
  delete TeamApplyLstReq::default_instance_;
  delete TeamApplyLstReq_reflection_;
  delete TeamApplyLstRsp::default_instance_;
  delete TeamApplyLstRsp_reflection_;
  delete TeamReplyApplyReq::default_instance_;
  delete TeamReplyApplyReq_reflection_;
  delete TeamReplyApplyRsp::default_instance_;
  delete TeamReplyApplyRsp_reflection_;
  delete TeamUpdateMemNotify::default_instance_;
  delete TeamUpdateMemNotify_reflection_;
  delete TeamUpdateMemSimpleNotify::default_instance_;
  delete TeamUpdateMemSimpleNotify_reflection_;
  delete TeamUpdateInfoNotify::default_instance_;
  delete TeamUpdateInfoNotify_reflection_;
  delete TeamUpdateSimpleNotify::default_instance_;
  delete TeamUpdateSimpleNotify_reflection_;
  delete TeamClearApplyLstReq::default_instance_;
  delete TeamClearApplyLstReq_reflection_;
  delete TeamClearApplyLstRsp::default_instance_;
  delete TeamClearApplyLstRsp_reflection_;
  delete TeamUpdateApplyNotify::default_instance_;
  delete TeamUpdateApplyNotify_reflection_;
  delete ApplyJoinTeamReq::default_instance_;
  delete ApplyJoinTeamReq_reflection_;
  delete ApplyJoinTeamRsp::default_instance_;
  delete ApplyJoinTeamRsp_reflection_;
  delete InviteJoinTeamReq::default_instance_;
  delete InviteJoinTeamReq_reflection_;
  delete InviteJoinTeamRsp::default_instance_;
  delete InviteJoinTeamRsp_reflection_;
  delete InviteJoinTeamNotify::default_instance_;
  delete InviteJoinTeamNotify_reflection_;
  delete ReplyInviteJoinTeamReq::default_instance_;
  delete ReplyInviteJoinTeamReq_reflection_;
  delete ReplyInviteJoinTeamRsp::default_instance_;
  delete ReplyInviteJoinTeamRsp_reflection_;
  delete TeamSetObjReq::default_instance_;
  delete TeamSetObjReq_reflection_;
  delete TeamSetObjRsp::default_instance_;
  delete TeamSetObjRsp_reflection_;
  delete TeamPromoteLeaderReq::default_instance_;
  delete TeamPromoteLeaderReq_reflection_;
  delete TeamPromoteLeaderRsp::default_instance_;
  delete TeamPromoteLeaderRsp_reflection_;
  delete TeamAutoMatchReq::default_instance_;
  delete TeamAutoMatchReq_reflection_;
  delete TeamAutoMatchRsp::default_instance_;
  delete TeamAutoMatchRsp_reflection_;
  delete TeamKickMemReq::default_instance_;
  delete TeamKickMemReq_reflection_;
  delete TeamKickMemRsp::default_instance_;
  delete TeamKickMemRsp_reflection_;
  delete TeamQuitReq::default_instance_;
  delete TeamQuitReq_reflection_;
  delete TeamQuitRsp::default_instance_;
  delete TeamQuitRsp_reflection_;
  delete TeamRefuseNotify::default_instance_;
  delete TeamRefuseNotify_reflection_;
  delete TeamMatchAtonceReq::default_instance_;
  delete TeamMatchAtonceReq_reflection_;
  delete TeamMatchAtonceRsp::default_instance_;
  delete TeamMatchAtonceRsp_reflection_;
  delete SCCreteTeam::default_instance_;
  delete SCCreteTeam_reflection_;
  delete SCJoinTeam::default_instance_;
  delete SCJoinTeam_reflection_;
  delete SCQuitTeam::default_instance_;
  delete SCQuitTeam_reflection_;
  delete SCUpdateTeam::default_instance_;
  delete SCUpdateTeam_reflection_;
  delete SCTeamLeader::default_instance_;
  delete SCTeamLeader_reflection_;
  delete SCTeamDismiss::default_instance_;
  delete SCTeamDismiss_reflection_;
  delete CLCharTeamUpdate::default_instance_;
  delete CLCharTeamUpdate_reflection_;
  delete CLUpdateSimpleTeam::default_instance_;
  delete CLUpdateSimpleTeam_reflection_;
  delete CLDismissTeam::default_instance_;
  delete CLDismissTeam_reflection_;
  delete CLCharTeamClonessUpdate::default_instance_;
  delete CLCharTeamClonessUpdate_reflection_;
  delete LSTeamRobotHpSync::default_instance_;
  delete LSTeamRobotHpSync_reflection_;
  delete DupInviteStateProto::default_instance_;
  delete DupInviteStateProto_reflection_;
  delete DupAllInviteStateProto::default_instance_;
  delete DupAllInviteStateProto_reflection_;
  delete Duplicate_CancelStateNotify::default_instance_;
  delete Duplicate_CancelStateNotify_reflection_;
  delete DupTeamRobotProto::default_instance_;
  delete DupTeamRobotProto_reflection_;
  delete DupMultTeamRobotProto::default_instance_;
  delete DupMultTeamRobotProto_reflection_;
}

void protobuf_AddDesc_CTeam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ClientServerCmd_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013CTeam.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\032\022common_logic.proto\032\tCom.proto\032\025C"
    "lientServerCmd.proto\032\017ComDefine.proto\"\256\002"
    "\n\014TeamMemProto\022\013\n\003cid\030\001 \001(\004\022\014\n\004name\030\002 \001("
    "\014\022\r\n\005level\030\003 \001(\r\022\014\n\004prof\030\004 \001(\005\022)\n\006facade"
    "\030\005 \001(\0132\031.proto_ff.RoleFacadeProto\022\021\n\tvip"
    "_level\030\006 \001(\005\022\020\n\010joinTime\030\007 \001(\004\022\r\n\005fight\030"
    "\010 \001(\004\022\016\n\006online\030\t \001(\005\022\r\n\005mapid\030\n \001(\004\022\n\n\002"
    "hp\030\013 \001(\004\022\r\n\005maxhp\030\014 \001(\004\022\021\n\trobotflag\030\r \001"
    "(\005\022\017\n\007unionid\030\016 \001(\r\022\024\n\014palace_layer\030\017 \001("
    "\005\022\023\n\013break_count\030\020 \001(\005\";\n\020TeamMultMemPro"
    "to\022\'\n\007mem_lst\030\001 \003(\0132\026.proto_ff.TeamMemPr"
    "oto\"<\n\022TeamMemSimpleProto\022\013\n\003cid\030\001 \001(\004\022\n"
    "\n\002hp\030\002 \001(\004\022\r\n\005maxhp\030\003 \001(\004\"J\n\026TeamMultMem"
    "SimpleProto\0220\n\nmem_simple\030\001 \003(\0132\034.proto_"
    "ff.TeamMemSimpleProto\"\242\001\n\tTeamProto\022\016\n\006t"
    "eamid\030\001 \001(\r\022\021\n\tobject_id\030\002 \001(\004\022\021\n\tmin_le"
    "vel\030\003 \001(\005\022\021\n\tmax_level\030\004 \001(\005\022\016\n\006leader\030\005"
    " \001(\004\022\022\n\nauto_match\030\006 \001(\005\022(\n\004mems\030\007 \001(\0132\032"
    ".proto_ff.TeamMultMemProto\"k\n\016TeamApplyP"
    "roto\022\013\n\003cid\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\r\n\005level"
    "\030\003 \001(\r\022\014\n\004prof\030\004 \001(\005\022\r\n\005fight\030\005 \001(\004\022\022\n\na"
    "pply_time\030\006 \001(\004\"A\n\022TeamMultApplyProto\022+\n"
    "\tapply_lst\030\001 \003(\0132\030.proto_ff.TeamApplyPro"
    "to\"\241\001\n\022CenterTeamMemProto\022\013\n\003cid\030\001 \001(\004\022\014"
    "\n\004name\030\002 \001(\014\022\014\n\004prof\030\003 \001(\005\022\r\n\005level\030\004 \001("
    "\r\022\021\n\trobotflag\030\005 \001(\005\022\017\n\007unionid\030\006 \001(\r\022\024\n"
    "\014palace_layer\030\007 \001(\005\022\031\n\021palace_breakcount"
    "\030\010 \001(\005\"D\n\027CenterMultiTeamMemProto\022)\n\003mem"
    "\030\001 \003(\0132\034.proto_ff.CenterTeamMemProto\"H\n\r"
    "CreateTeamReq\022\021\n\tobject_id\030\001 \002(\004\022\021\n\tmin_"
    "level\030\002 \002(\005\022\021\n\tmax_level\030\003 \002(\005\" \n\rCreate"
    "TeamRsp\022\017\n\007retcode\030\001 \001(\005\"\021\n\017TeamApplyLst"
    "Req\"O\n\017TeamApplyLstRsp\022\017\n\007retcode\030\001 \002(\005\022"
    "+\n\005apply\030\002 \001(\0132\034.proto_ff.TeamMultApplyP"
    "roto\" \n\021TeamReplyApplyReq\022\013\n\003cid\030\001 \002(\004\"$"
    "\n\021TeamReplyApplyRsp\022\017\n\007retcode\030\001 \001(\005\"`\n\023"
    "TeamUpdateMemNotify\022\017\n\007del_mem\030\001 \003(\004\022\016\n\006"
    "reason\030\002 \001(\005\022(\n\004mems\030\003 \001(\0132\032.proto_ff.Te"
    "amMultMemProto\"R\n\031TeamUpdateMemSimpleNot"
    "ify\0225\n\013simple_info\030\001 \001(\0132 .proto_ff.Team"
    "MultMemSimpleProto\"9\n\024TeamUpdateInfoNoti"
    "fy\022!\n\004info\030\001 \001(\0132\023.proto_ff.TeamProto\"u\n"
    "\026TeamUpdateSimpleNotify\022\021\n\tobject_id\030\001 \001"
    "(\004\022\021\n\tmin_level\030\002 \001(\005\022\021\n\tmax_level\030\003 \001(\005"
    "\022\016\n\006leader\030\004 \001(\004\022\022\n\nauto_match\030\005 \001(\005\"\026\n\024"
    "TeamClearApplyLstReq\"\'\n\024TeamClearApplyLs"
    "tRsp\022\017\n\007retcode\030\001 \001(\005\"W\n\025TeamUpdateApply"
    "Notify\022\021\n\tdel_apply\030\001 \003(\004\022+\n\005apply\030\002 \001(\013"
    "2\034.proto_ff.TeamMultApplyProto\"\"\n\020ApplyJ"
    "oinTeamReq\022\016\n\006teamid\030\001 \002(\r\"#\n\020ApplyJoinT"
    "eamRsp\022\017\n\007retcode\030\001 \002(\005\"\'\n\021InviteJoinTea"
    "mReq\022\022\n\ninvite_cid\030\001 \002(\004\"$\n\021InviteJoinTe"
    "amRsp\022\017\n\007retcode\030\001 \001(\005\"O\n\024InviteJoinTeam"
    "Notify\022\022\n\ninvite_cid\030\001 \001(\004\022\023\n\013invite_nam"
    "e\030\002 \001(\014\022\016\n\006teamid\030\003 \001(\r\"7\n\026ReplyInviteJo"
    "inTeamReq\022\r\n\005reply\030\001 \002(\005\022\016\n\006teamid\030\002 \002(\r"
    "\")\n\026ReplyInviteJoinTeamRsp\022\017\n\007retcode\030\001 "
    "\001(\005\"H\n\rTeamSetObjReq\022\021\n\tobject_id\030\001 \002(\004\022"
    "\021\n\tmin_level\030\002 \002(\005\022\021\n\tmax_level\030\003 \002(\005\" \n"
    "\rTeamSetObjRsp\022\017\n\007retcode\030\001 \001(\005\"#\n\024TeamP"
    "romoteLeaderReq\022\013\n\003cid\030\001 \002(\004\"\'\n\024TeamProm"
    "oteLeaderRsp\022\017\n\007retcode\030\001 \001(\005\"_\n\020TeamAut"
    "oMatchReq\022\022\n\nauto_match\030\001 \002(\005\022\021\n\tobject_"
    "id\030\002 \002(\004\022\021\n\tmin_level\030\003 \002(\005\022\021\n\tmax_level"
    "\030\004 \002(\005\"#\n\020TeamAutoMatchRsp\022\017\n\007retcode\030\001 "
    "\001(\005\"\"\n\016TeamKickMemReq\022\020\n\010kick_cid\030\001 \002(\004\""
    "!\n\016TeamKickMemRsp\022\017\n\007retcode\030\001 \001(\005\"\r\n\013Te"
    "amQuitReq\"\036\n\013TeamQuitRsp\022\017\n\007retcode\030\001 \001("
    "\005\".\n\020TeamRefuseNotify\022\014\n\004type\030\001 \001(\005\022\014\n\004n"
    "ame\030\002 \001(\014\"\024\n\022TeamMatchAtonceReq\"%\n\022TeamM"
    "atchAtonceRsp\022\017\n\007retcode\030\001 \001(\005\"I\n\013SCCret"
    "eTeam\022\016\n\006teamid\030\001 \001(\r\022*\n\004info\030\002 \001(\0132\034.pr"
    "oto_ff.CenterTeamMemProto\"H\n\nSCJoinTeam\022"
    "\016\n\006teamid\030\001 \001(\r\022*\n\004info\030\002 \001(\0132\034.proto_ff"
    ".CenterTeamMemProto\")\n\nSCQuitTeam\022\013\n\003cid"
    "\030\001 \001(\004\022\016\n\006teamid\030\002 \001(\r\"O\n\014SCUpdateTeam\022\016"
    "\n\006teamid\030\001 \001(\r\022/\n\004info\030\002 \001(\0132!.proto_ff."
    "CenterMultiTeamMemProto\".\n\014SCTeamLeader\022"
    "\016\n\006teamid\030\001 \001(\r\022\016\n\006leader\030\002 \001(\004\"\037\n\rSCTea"
    "mDismiss\022\016\n\006teamid\030\001 \001(\r\"P\n\020CLCharTeamUp"
    "date\022\013\n\003cid\030\001 \001(\004\022\016\n\006teamid\030\002 \001(\r\022\016\n\006lea"
    "der\030\003 \001(\004\022\017\n\007mem_cnt\030\004 \001(\005\"h\n\022CLUpdateSi"
    "mpleTeam\022\016\n\006teamid\030\001 \001(\r\022\021\n\tleadercid\030\002 "
    "\001(\004\022/\n\004info\030\003 \001(\0132!.proto_ff.CenterMulti"
    "TeamMemProto\"\037\n\rCLDismissTeam\022\016\n\006teamid\030"
    "\001 \001(\r\";\n\027CLCharTeamClonessUpdate\022\013\n\003cid\030"
    "\001 \001(\004\022\023\n\013cloness_lev\030\002 \001(\005\"S\n\021LSTeamRobo"
    "tHpSync\022\016\n\006teamid\030\001 \001(\r\022\020\n\010robotcid\030\002 \001("
    "\004\022\r\n\005curhp\030\003 \001(\004\022\r\n\005maxhp\030\004 \001(\004\"1\n\023DupIn"
    "viteStateProto\022\013\n\003cid\030\001 \001(\004\022\r\n\005state\030\002 \001"
    "(\005\"J\n\026DupAllInviteStateProto\0220\n\tall_stat"
    "e\030\001 \003(\0132\035.proto_ff.DupInviteStateProto\"."
    "\n\033Duplicate_CancelStateNotify\022\017\n\007retcode"
    "\030\001 \002(\005\"\311\001\n\021DupTeamRobotProto\022\017\n\007charcid\030"
    "\001 \001(\004\022\014\n\004coef\030\002 \001(\r\022\013\n\003zid\030\003 \001(\r\022\020\n\010robo"
    "tcid\030\004 \001(\004\022\014\n\004name\030\005 \001(\014\022\r\n\005level\030\006 \001(\r\022"
    "\014\n\004prof\030\007 \001(\005\022)\n\006facade\030\010 \001(\0132\031.proto_ff"
    ".RoleFacadeProto\022\021\n\tvip_level\030\t \001(\005\022\r\n\005f"
    "ight\030\n \001(\004\"B\n\025DupMultTeamRobotProto\022)\n\004i"
    "nfo\030\001 \003(\0132\033.proto_ff.DupTeamRobotProto", 4038);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CTeam.proto", &protobuf_RegisterTypes);
  TeamMemProto::default_instance_ = new TeamMemProto();
  TeamMultMemProto::default_instance_ = new TeamMultMemProto();
  TeamMemSimpleProto::default_instance_ = new TeamMemSimpleProto();
  TeamMultMemSimpleProto::default_instance_ = new TeamMultMemSimpleProto();
  TeamProto::default_instance_ = new TeamProto();
  TeamApplyProto::default_instance_ = new TeamApplyProto();
  TeamMultApplyProto::default_instance_ = new TeamMultApplyProto();
  CenterTeamMemProto::default_instance_ = new CenterTeamMemProto();
  CenterMultiTeamMemProto::default_instance_ = new CenterMultiTeamMemProto();
  CreateTeamReq::default_instance_ = new CreateTeamReq();
  CreateTeamRsp::default_instance_ = new CreateTeamRsp();
  TeamApplyLstReq::default_instance_ = new TeamApplyLstReq();
  TeamApplyLstRsp::default_instance_ = new TeamApplyLstRsp();
  TeamReplyApplyReq::default_instance_ = new TeamReplyApplyReq();
  TeamReplyApplyRsp::default_instance_ = new TeamReplyApplyRsp();
  TeamUpdateMemNotify::default_instance_ = new TeamUpdateMemNotify();
  TeamUpdateMemSimpleNotify::default_instance_ = new TeamUpdateMemSimpleNotify();
  TeamUpdateInfoNotify::default_instance_ = new TeamUpdateInfoNotify();
  TeamUpdateSimpleNotify::default_instance_ = new TeamUpdateSimpleNotify();
  TeamClearApplyLstReq::default_instance_ = new TeamClearApplyLstReq();
  TeamClearApplyLstRsp::default_instance_ = new TeamClearApplyLstRsp();
  TeamUpdateApplyNotify::default_instance_ = new TeamUpdateApplyNotify();
  ApplyJoinTeamReq::default_instance_ = new ApplyJoinTeamReq();
  ApplyJoinTeamRsp::default_instance_ = new ApplyJoinTeamRsp();
  InviteJoinTeamReq::default_instance_ = new InviteJoinTeamReq();
  InviteJoinTeamRsp::default_instance_ = new InviteJoinTeamRsp();
  InviteJoinTeamNotify::default_instance_ = new InviteJoinTeamNotify();
  ReplyInviteJoinTeamReq::default_instance_ = new ReplyInviteJoinTeamReq();
  ReplyInviteJoinTeamRsp::default_instance_ = new ReplyInviteJoinTeamRsp();
  TeamSetObjReq::default_instance_ = new TeamSetObjReq();
  TeamSetObjRsp::default_instance_ = new TeamSetObjRsp();
  TeamPromoteLeaderReq::default_instance_ = new TeamPromoteLeaderReq();
  TeamPromoteLeaderRsp::default_instance_ = new TeamPromoteLeaderRsp();
  TeamAutoMatchReq::default_instance_ = new TeamAutoMatchReq();
  TeamAutoMatchRsp::default_instance_ = new TeamAutoMatchRsp();
  TeamKickMemReq::default_instance_ = new TeamKickMemReq();
  TeamKickMemRsp::default_instance_ = new TeamKickMemRsp();
  TeamQuitReq::default_instance_ = new TeamQuitReq();
  TeamQuitRsp::default_instance_ = new TeamQuitRsp();
  TeamRefuseNotify::default_instance_ = new TeamRefuseNotify();
  TeamMatchAtonceReq::default_instance_ = new TeamMatchAtonceReq();
  TeamMatchAtonceRsp::default_instance_ = new TeamMatchAtonceRsp();
  SCCreteTeam::default_instance_ = new SCCreteTeam();
  SCJoinTeam::default_instance_ = new SCJoinTeam();
  SCQuitTeam::default_instance_ = new SCQuitTeam();
  SCUpdateTeam::default_instance_ = new SCUpdateTeam();
  SCTeamLeader::default_instance_ = new SCTeamLeader();
  SCTeamDismiss::default_instance_ = new SCTeamDismiss();
  CLCharTeamUpdate::default_instance_ = new CLCharTeamUpdate();
  CLUpdateSimpleTeam::default_instance_ = new CLUpdateSimpleTeam();
  CLDismissTeam::default_instance_ = new CLDismissTeam();
  CLCharTeamClonessUpdate::default_instance_ = new CLCharTeamClonessUpdate();
  LSTeamRobotHpSync::default_instance_ = new LSTeamRobotHpSync();
  DupInviteStateProto::default_instance_ = new DupInviteStateProto();
  DupAllInviteStateProto::default_instance_ = new DupAllInviteStateProto();
  Duplicate_CancelStateNotify::default_instance_ = new Duplicate_CancelStateNotify();
  DupTeamRobotProto::default_instance_ = new DupTeamRobotProto();
  DupMultTeamRobotProto::default_instance_ = new DupMultTeamRobotProto();
  TeamMemProto::default_instance_->InitAsDefaultInstance();
  TeamMultMemProto::default_instance_->InitAsDefaultInstance();
  TeamMemSimpleProto::default_instance_->InitAsDefaultInstance();
  TeamMultMemSimpleProto::default_instance_->InitAsDefaultInstance();
  TeamProto::default_instance_->InitAsDefaultInstance();
  TeamApplyProto::default_instance_->InitAsDefaultInstance();
  TeamMultApplyProto::default_instance_->InitAsDefaultInstance();
  CenterTeamMemProto::default_instance_->InitAsDefaultInstance();
  CenterMultiTeamMemProto::default_instance_->InitAsDefaultInstance();
  CreateTeamReq::default_instance_->InitAsDefaultInstance();
  CreateTeamRsp::default_instance_->InitAsDefaultInstance();
  TeamApplyLstReq::default_instance_->InitAsDefaultInstance();
  TeamApplyLstRsp::default_instance_->InitAsDefaultInstance();
  TeamReplyApplyReq::default_instance_->InitAsDefaultInstance();
  TeamReplyApplyRsp::default_instance_->InitAsDefaultInstance();
  TeamUpdateMemNotify::default_instance_->InitAsDefaultInstance();
  TeamUpdateMemSimpleNotify::default_instance_->InitAsDefaultInstance();
  TeamUpdateInfoNotify::default_instance_->InitAsDefaultInstance();
  TeamUpdateSimpleNotify::default_instance_->InitAsDefaultInstance();
  TeamClearApplyLstReq::default_instance_->InitAsDefaultInstance();
  TeamClearApplyLstRsp::default_instance_->InitAsDefaultInstance();
  TeamUpdateApplyNotify::default_instance_->InitAsDefaultInstance();
  ApplyJoinTeamReq::default_instance_->InitAsDefaultInstance();
  ApplyJoinTeamRsp::default_instance_->InitAsDefaultInstance();
  InviteJoinTeamReq::default_instance_->InitAsDefaultInstance();
  InviteJoinTeamRsp::default_instance_->InitAsDefaultInstance();
  InviteJoinTeamNotify::default_instance_->InitAsDefaultInstance();
  ReplyInviteJoinTeamReq::default_instance_->InitAsDefaultInstance();
  ReplyInviteJoinTeamRsp::default_instance_->InitAsDefaultInstance();
  TeamSetObjReq::default_instance_->InitAsDefaultInstance();
  TeamSetObjRsp::default_instance_->InitAsDefaultInstance();
  TeamPromoteLeaderReq::default_instance_->InitAsDefaultInstance();
  TeamPromoteLeaderRsp::default_instance_->InitAsDefaultInstance();
  TeamAutoMatchReq::default_instance_->InitAsDefaultInstance();
  TeamAutoMatchRsp::default_instance_->InitAsDefaultInstance();
  TeamKickMemReq::default_instance_->InitAsDefaultInstance();
  TeamKickMemRsp::default_instance_->InitAsDefaultInstance();
  TeamQuitReq::default_instance_->InitAsDefaultInstance();
  TeamQuitRsp::default_instance_->InitAsDefaultInstance();
  TeamRefuseNotify::default_instance_->InitAsDefaultInstance();
  TeamMatchAtonceReq::default_instance_->InitAsDefaultInstance();
  TeamMatchAtonceRsp::default_instance_->InitAsDefaultInstance();
  SCCreteTeam::default_instance_->InitAsDefaultInstance();
  SCJoinTeam::default_instance_->InitAsDefaultInstance();
  SCQuitTeam::default_instance_->InitAsDefaultInstance();
  SCUpdateTeam::default_instance_->InitAsDefaultInstance();
  SCTeamLeader::default_instance_->InitAsDefaultInstance();
  SCTeamDismiss::default_instance_->InitAsDefaultInstance();
  CLCharTeamUpdate::default_instance_->InitAsDefaultInstance();
  CLUpdateSimpleTeam::default_instance_->InitAsDefaultInstance();
  CLDismissTeam::default_instance_->InitAsDefaultInstance();
  CLCharTeamClonessUpdate::default_instance_->InitAsDefaultInstance();
  LSTeamRobotHpSync::default_instance_->InitAsDefaultInstance();
  DupInviteStateProto::default_instance_->InitAsDefaultInstance();
  DupAllInviteStateProto::default_instance_->InitAsDefaultInstance();
  Duplicate_CancelStateNotify::default_instance_->InitAsDefaultInstance();
  DupTeamRobotProto::default_instance_->InitAsDefaultInstance();
  DupMultTeamRobotProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CTeam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CTeam_2eproto {
  StaticDescriptorInitializer_CTeam_2eproto() {
    protobuf_AddDesc_CTeam_2eproto();
  }
} static_descriptor_initializer_CTeam_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int TeamMemProto::kCidFieldNumber;
const int TeamMemProto::kNameFieldNumber;
const int TeamMemProto::kLevelFieldNumber;
const int TeamMemProto::kProfFieldNumber;
const int TeamMemProto::kFacadeFieldNumber;
const int TeamMemProto::kVipLevelFieldNumber;
const int TeamMemProto::kJoinTimeFieldNumber;
const int TeamMemProto::kFightFieldNumber;
const int TeamMemProto::kOnlineFieldNumber;
const int TeamMemProto::kMapidFieldNumber;
const int TeamMemProto::kHpFieldNumber;
const int TeamMemProto::kMaxhpFieldNumber;
const int TeamMemProto::kRobotflagFieldNumber;
const int TeamMemProto::kUnionidFieldNumber;
const int TeamMemProto::kPalaceLayerFieldNumber;
const int TeamMemProto::kBreakCountFieldNumber;
#endif  // !_MSC_VER

TeamMemProto::TeamMemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMemProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

TeamMemProto::TeamMemProto(const TeamMemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  prof_ = 0;
  facade_ = NULL;
  vip_level_ = 0;
  jointime_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  online_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  hp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  robotflag_ = 0;
  unionid_ = 0u;
  palace_layer_ = 0;
  break_count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemProto::~TeamMemProto() {
  SharedDtor();
}

void TeamMemProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void TeamMemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemProto_descriptor_;
}

const TeamMemProto& TeamMemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamMemProto* TeamMemProto::default_instance_ = NULL;

TeamMemProto* TeamMemProto::New() const {
  return new TeamMemProto;
}

void TeamMemProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    prof_ = 0;
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    vip_level_ = 0;
    jointime_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    online_ = 0;
    mapid_ = GOOGLE_ULONGLONG(0);
    hp_ = GOOGLE_ULONGLONG(0);
    maxhp_ = GOOGLE_ULONGLONG(0);
    robotflag_ = 0;
    unionid_ = 0u;
    palace_layer_ = 0;
    break_count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_joinTime;
        break;
      }

      // optional uint64 joinTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &jointime_)));
          set_has_jointime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_online;
        break;
      }

      // optional int32 online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hp;
        break;
      }

      // optional uint64 hp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_maxhp;
        break;
      }

      // optional uint64 maxhp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_robotflag;
        break;
      }

      // optional int32 robotflag = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotflag_)));
          set_has_robotflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_unionid;
        break;
      }

      // optional uint32 unionid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unionid_)));
          set_has_unionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_palace_layer;
        break;
      }

      // optional int32 palace_layer = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palace_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &palace_layer_)));
          set_has_palace_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_break_count;
        break;
      }

      // optional int32 break_count = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_break_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &break_count_)));
          set_has_break_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 5;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->facade(), output);
  }

  // optional int32 vip_level = 6;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip_level(), output);
  }

  // optional uint64 joinTime = 7;
  if (has_jointime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->jointime(), output);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->fight(), output);
  }

  // optional int32 online = 9;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->online(), output);
  }

  // optional uint64 mapid = 10;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->mapid(), output);
  }

  // optional uint64 hp = 11;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->hp(), output);
  }

  // optional uint64 maxhp = 12;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->maxhp(), output);
  }

  // optional int32 robotflag = 13;
  if (has_robotflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->robotflag(), output);
  }

  // optional uint32 unionid = 14;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->unionid(), output);
  }

  // optional int32 palace_layer = 15;
  if (has_palace_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->palace_layer(), output);
  }

  // optional int32 break_count = 16;
  if (has_break_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->break_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 5;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->facade(), target);
  }

  // optional int32 vip_level = 6;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip_level(), target);
  }

  // optional uint64 joinTime = 7;
  if (has_jointime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->jointime(), target);
  }

  // optional uint64 fight = 8;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->fight(), target);
  }

  // optional int32 online = 9;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->online(), target);
  }

  // optional uint64 mapid = 10;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->mapid(), target);
  }

  // optional uint64 hp = 11;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->hp(), target);
  }

  // optional uint64 maxhp = 12;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->maxhp(), target);
  }

  // optional int32 robotflag = 13;
  if (has_robotflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->robotflag(), target);
  }

  // optional uint32 unionid = 14;
  if (has_unionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->unionid(), target);
  }

  // optional int32 palace_layer = 15;
  if (has_palace_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->palace_layer(), target);
  }

  // optional int32 break_count = 16;
  if (has_break_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->break_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional .proto_ff.RoleFacadeProto facade = 5;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional int32 vip_level = 6;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional uint64 joinTime = 7;
    if (has_jointime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->jointime());
    }

    // optional uint64 fight = 8;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 online = 9;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional uint64 mapid = 10;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional uint64 hp = 11;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // optional uint64 maxhp = 12;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

    // optional int32 robotflag = 13;
    if (has_robotflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotflag());
    }

    // optional uint32 unionid = 14;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unionid());
    }

    // optional int32 palace_layer = 15;
    if (has_palace_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->palace_layer());
    }

    // optional int32 break_count = 16;
    if (has_break_count()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->break_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemProto::MergeFrom(const TeamMemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_jointime()) {
      set_jointime(from.jointime());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_robotflag()) {
      set_robotflag(from.robotflag());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
    if (from.has_palace_layer()) {
      set_palace_layer(from.palace_layer());
    }
    if (from.has_break_count()) {
      set_break_count(from.break_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemProto::CopyFrom(const TeamMemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemProto::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void TeamMemProto::Swap(TeamMemProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(prof_, other->prof_);
    std::swap(facade_, other->facade_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(jointime_, other->jointime_);
    std::swap(fight_, other->fight_);
    std::swap(online_, other->online_);
    std::swap(mapid_, other->mapid_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(robotflag_, other->robotflag_);
    std::swap(unionid_, other->unionid_);
    std::swap(palace_layer_, other->palace_layer_);
    std::swap(break_count_, other->break_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemProto_descriptor_;
  metadata.reflection = TeamMemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMultMemProto::kMemLstFieldNumber;
#endif  // !_MSC_VER

TeamMultMemProto::TeamMultMemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMultMemProto::InitAsDefaultInstance() {
}

TeamMultMemProto::TeamMultMemProto(const TeamMultMemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMultMemProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMultMemProto::~TeamMultMemProto() {
  SharedDtor();
}

void TeamMultMemProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMultMemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMultMemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMultMemProto_descriptor_;
}

const TeamMultMemProto& TeamMultMemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamMultMemProto* TeamMultMemProto::default_instance_ = NULL;

TeamMultMemProto* TeamMultMemProto::New() const {
  return new TeamMultMemProto;
}

void TeamMultMemProto::Clear() {
  mem_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMultMemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.TeamMemProto mem_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mem_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMultMemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.TeamMemProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMultMemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.TeamMemProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMultMemProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.TeamMemProto mem_lst = 1;
  total_size += 1 * this->mem_lst_size();
  for (int i = 0; i < this->mem_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMultMemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMultMemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMultMemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMultMemProto::MergeFrom(const TeamMultMemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_lst_.MergeFrom(from.mem_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMultMemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMultMemProto::CopyFrom(const TeamMultMemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMultMemProto::IsInitialized() const {

  for (int i = 0; i < mem_lst_size(); i++) {
    if (!this->mem_lst(i).IsInitialized()) return false;
  }
  return true;
}

void TeamMultMemProto::Swap(TeamMultMemProto* other) {
  if (other != this) {
    mem_lst_.Swap(&other->mem_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMultMemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMultMemProto_descriptor_;
  metadata.reflection = TeamMultMemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMemSimpleProto::kCidFieldNumber;
const int TeamMemSimpleProto::kHpFieldNumber;
const int TeamMemSimpleProto::kMaxhpFieldNumber;
#endif  // !_MSC_VER

TeamMemSimpleProto::TeamMemSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMemSimpleProto::InitAsDefaultInstance() {
}

TeamMemSimpleProto::TeamMemSimpleProto(const TeamMemSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMemSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  hp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMemSimpleProto::~TeamMemSimpleProto() {
  SharedDtor();
}

void TeamMemSimpleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMemSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMemSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMemSimpleProto_descriptor_;
}

const TeamMemSimpleProto& TeamMemSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamMemSimpleProto* TeamMemSimpleProto::default_instance_ = NULL;

TeamMemSimpleProto* TeamMemSimpleProto::New() const {
  return new TeamMemSimpleProto;
}

void TeamMemSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    hp_ = GOOGLE_ULONGLONG(0);
    maxhp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMemSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional uint64 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxhp;
        break;
      }

      // optional uint64 maxhp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMemSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->hp(), output);
  }

  // optional uint64 maxhp = 3;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMemSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->hp(), target);
  }

  // optional uint64 maxhp = 3;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMemSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hp());
    }

    // optional uint64 maxhp = 3;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMemSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMemSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMemSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMemSimpleProto::MergeFrom(const TeamMemSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMemSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMemSimpleProto::CopyFrom(const TeamMemSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMemSimpleProto::IsInitialized() const {

  return true;
}

void TeamMemSimpleProto::Swap(TeamMemSimpleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(hp_, other->hp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMemSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMemSimpleProto_descriptor_;
  metadata.reflection = TeamMemSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMultMemSimpleProto::kMemSimpleFieldNumber;
#endif  // !_MSC_VER

TeamMultMemSimpleProto::TeamMultMemSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMultMemSimpleProto::InitAsDefaultInstance() {
}

TeamMultMemSimpleProto::TeamMultMemSimpleProto(const TeamMultMemSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMultMemSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMultMemSimpleProto::~TeamMultMemSimpleProto() {
  SharedDtor();
}

void TeamMultMemSimpleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMultMemSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMultMemSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMultMemSimpleProto_descriptor_;
}

const TeamMultMemSimpleProto& TeamMultMemSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamMultMemSimpleProto* TeamMultMemSimpleProto::default_instance_ = NULL;

TeamMultMemSimpleProto* TeamMultMemSimpleProto::New() const {
  return new TeamMultMemSimpleProto;
}

void TeamMultMemSimpleProto::Clear() {
  mem_simple_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMultMemSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.TeamMemSimpleProto mem_simple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mem_simple;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMultMemSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.TeamMemSimpleProto mem_simple = 1;
  for (int i = 0; i < this->mem_simple_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem_simple(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMultMemSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.TeamMemSimpleProto mem_simple = 1;
  for (int i = 0; i < this->mem_simple_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem_simple(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMultMemSimpleProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.TeamMemSimpleProto mem_simple = 1;
  total_size += 1 * this->mem_simple_size();
  for (int i = 0; i < this->mem_simple_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem_simple(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMultMemSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMultMemSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMultMemSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMultMemSimpleProto::MergeFrom(const TeamMultMemSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_simple_.MergeFrom(from.mem_simple_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMultMemSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMultMemSimpleProto::CopyFrom(const TeamMultMemSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMultMemSimpleProto::IsInitialized() const {

  return true;
}

void TeamMultMemSimpleProto::Swap(TeamMultMemSimpleProto* other) {
  if (other != this) {
    mem_simple_.Swap(&other->mem_simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMultMemSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMultMemSimpleProto_descriptor_;
  metadata.reflection = TeamMultMemSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamProto::kTeamidFieldNumber;
const int TeamProto::kObjectIdFieldNumber;
const int TeamProto::kMinLevelFieldNumber;
const int TeamProto::kMaxLevelFieldNumber;
const int TeamProto::kLeaderFieldNumber;
const int TeamProto::kAutoMatchFieldNumber;
const int TeamProto::kMemsFieldNumber;
#endif  // !_MSC_VER

TeamProto::TeamProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamProto::InitAsDefaultInstance() {
  mems_ = const_cast< ::proto_ff::TeamMultMemProto*>(&::proto_ff::TeamMultMemProto::default_instance());
}

TeamProto::TeamProto(const TeamProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamProto::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  object_id_ = GOOGLE_ULONGLONG(0);
  min_level_ = 0;
  max_level_ = 0;
  leader_ = GOOGLE_ULONGLONG(0);
  auto_match_ = 0;
  mems_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamProto::~TeamProto() {
  SharedDtor();
}

void TeamProto::SharedDtor() {
  if (this != default_instance_) {
    delete mems_;
  }
}

void TeamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamProto_descriptor_;
}

const TeamProto& TeamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamProto* TeamProto::default_instance_ = NULL;

TeamProto* TeamProto::New() const {
  return new TeamProto;
}

void TeamProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    object_id_ = GOOGLE_ULONGLONG(0);
    min_level_ = 0;
    max_level_ = 0;
    leader_ = GOOGLE_ULONGLONG(0);
    auto_match_ = 0;
    if (has_mems()) {
      if (mems_ != NULL) mems_->::proto_ff::TeamMultMemProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_id;
        break;
      }

      // optional uint64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_min_level;
        break;
      }

      // optional int32 min_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_level;
        break;
      }

      // optional int32 max_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_leader;
        break;
      }

      // optional uint64 leader = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_auto_match;
        break;
      }

      // optional int32 auto_match = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_match_)));
          set_has_auto_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mems;
        break;
      }

      // optional .proto_ff.TeamMultMemProto mems = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint64 object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_id(), output);
  }

  // optional int32 min_level = 3;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_level(), output);
  }

  // optional int32 max_level = 4;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_level(), output);
  }

  // optional uint64 leader = 5;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->leader(), output);
  }

  // optional int32 auto_match = 6;
  if (has_auto_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->auto_match(), output);
  }

  // optional .proto_ff.TeamMultMemProto mems = 7;
  if (has_mems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint64 object_id = 2;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_id(), target);
  }

  // optional int32 min_level = 3;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_level(), target);
  }

  // optional int32 max_level = 4;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_level(), target);
  }

  // optional uint64 leader = 5;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->leader(), target);
  }

  // optional int32 auto_match = 6;
  if (has_auto_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->auto_match(), target);
  }

  // optional .proto_ff.TeamMultMemProto mems = 7;
  if (has_mems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

    // optional int32 min_level = 3;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 max_level = 4;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

    // optional uint64 leader = 5;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader());
    }

    // optional int32 auto_match = 6;
    if (has_auto_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_match());
    }

    // optional .proto_ff.TeamMultMemProto mems = 7;
    if (has_mems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mems());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamProto::MergeFrom(const TeamProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_auto_match()) {
      set_auto_match(from.auto_match());
    }
    if (from.has_mems()) {
      mutable_mems()->::proto_ff::TeamMultMemProto::MergeFrom(from.mems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamProto::CopyFrom(const TeamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamProto::IsInitialized() const {

  if (has_mems()) {
    if (!this->mems().IsInitialized()) return false;
  }
  return true;
}

void TeamProto::Swap(TeamProto* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(object_id_, other->object_id_);
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    std::swap(leader_, other->leader_);
    std::swap(auto_match_, other->auto_match_);
    std::swap(mems_, other->mems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamProto_descriptor_;
  metadata.reflection = TeamProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamApplyProto::kCidFieldNumber;
const int TeamApplyProto::kNameFieldNumber;
const int TeamApplyProto::kLevelFieldNumber;
const int TeamApplyProto::kProfFieldNumber;
const int TeamApplyProto::kFightFieldNumber;
const int TeamApplyProto::kApplyTimeFieldNumber;
#endif  // !_MSC_VER

TeamApplyProto::TeamApplyProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamApplyProto::InitAsDefaultInstance() {
}

TeamApplyProto::TeamApplyProto(const TeamApplyProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamApplyProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  prof_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  apply_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamApplyProto::~TeamApplyProto() {
  SharedDtor();
}

void TeamApplyProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamApplyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamApplyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamApplyProto_descriptor_;
}

const TeamApplyProto& TeamApplyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamApplyProto* TeamApplyProto::default_instance_ = NULL;

TeamApplyProto* TeamApplyProto::New() const {
  return new TeamApplyProto;
}

void TeamApplyProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    prof_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
    apply_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamApplyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_apply_time;
        break;
      }

      // optional uint64 apply_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_time_)));
          set_has_apply_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamApplyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  // optional uint64 apply_time = 6;
  if (has_apply_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->apply_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamApplyProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  // optional uint64 apply_time = 6;
  if (has_apply_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->apply_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamApplyProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 apply_time = 6;
    if (has_apply_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamApplyProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamApplyProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamApplyProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamApplyProto::MergeFrom(const TeamApplyProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_apply_time()) {
      set_apply_time(from.apply_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamApplyProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamApplyProto::CopyFrom(const TeamApplyProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamApplyProto::IsInitialized() const {

  return true;
}

void TeamApplyProto::Swap(TeamApplyProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(prof_, other->prof_);
    std::swap(fight_, other->fight_);
    std::swap(apply_time_, other->apply_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamApplyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamApplyProto_descriptor_;
  metadata.reflection = TeamApplyProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMultApplyProto::kApplyLstFieldNumber;
#endif  // !_MSC_VER

TeamMultApplyProto::TeamMultApplyProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMultApplyProto::InitAsDefaultInstance() {
}

TeamMultApplyProto::TeamMultApplyProto(const TeamMultApplyProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMultApplyProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMultApplyProto::~TeamMultApplyProto() {
  SharedDtor();
}

void TeamMultApplyProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMultApplyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMultApplyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMultApplyProto_descriptor_;
}

const TeamMultApplyProto& TeamMultApplyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamMultApplyProto* TeamMultApplyProto::default_instance_ = NULL;

TeamMultApplyProto* TeamMultApplyProto::New() const {
  return new TeamMultApplyProto;
}

void TeamMultApplyProto::Clear() {
  apply_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMultApplyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.TeamApplyProto apply_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apply_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMultApplyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.TeamApplyProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apply_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMultApplyProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.TeamApplyProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->apply_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMultApplyProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.TeamApplyProto apply_lst = 1;
  total_size += 1 * this->apply_lst_size();
  for (int i = 0; i < this->apply_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMultApplyProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMultApplyProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMultApplyProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMultApplyProto::MergeFrom(const TeamMultApplyProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_lst_.MergeFrom(from.apply_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMultApplyProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMultApplyProto::CopyFrom(const TeamMultApplyProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMultApplyProto::IsInitialized() const {

  return true;
}

void TeamMultApplyProto::Swap(TeamMultApplyProto* other) {
  if (other != this) {
    apply_lst_.Swap(&other->apply_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMultApplyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMultApplyProto_descriptor_;
  metadata.reflection = TeamMultApplyProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterTeamMemProto::kCidFieldNumber;
const int CenterTeamMemProto::kNameFieldNumber;
const int CenterTeamMemProto::kProfFieldNumber;
const int CenterTeamMemProto::kLevelFieldNumber;
const int CenterTeamMemProto::kRobotflagFieldNumber;
const int CenterTeamMemProto::kUnionidFieldNumber;
const int CenterTeamMemProto::kPalaceLayerFieldNumber;
const int CenterTeamMemProto::kPalaceBreakcountFieldNumber;
#endif  // !_MSC_VER

CenterTeamMemProto::CenterTeamMemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterTeamMemProto::InitAsDefaultInstance() {
}

CenterTeamMemProto::CenterTeamMemProto(const CenterTeamMemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterTeamMemProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  level_ = 0u;
  robotflag_ = 0;
  unionid_ = 0u;
  palace_layer_ = 0;
  palace_breakcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterTeamMemProto::~CenterTeamMemProto() {
  SharedDtor();
}

void CenterTeamMemProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CenterTeamMemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterTeamMemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterTeamMemProto_descriptor_;
}

const CenterTeamMemProto& CenterTeamMemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

CenterTeamMemProto* CenterTeamMemProto::default_instance_ = NULL;

CenterTeamMemProto* CenterTeamMemProto::New() const {
  return new CenterTeamMemProto;
}

void CenterTeamMemProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0;
    level_ = 0u;
    robotflag_ = 0;
    unionid_ = 0u;
    palace_layer_ = 0;
    palace_breakcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterTeamMemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional int32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_robotflag;
        break;
      }

      // optional int32 robotflag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robotflag_)));
          set_has_robotflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_unionid;
        break;
      }

      // optional uint32 unionid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unionid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unionid_)));
          set_has_unionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_palace_layer;
        break;
      }

      // optional int32 palace_layer = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palace_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &palace_layer_)));
          set_has_palace_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_palace_breakcount;
        break;
      }

      // optional int32 palace_breakcount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_palace_breakcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &palace_breakcount_)));
          set_has_palace_breakcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterTeamMemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prof(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional int32 robotflag = 5;
  if (has_robotflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->robotflag(), output);
  }

  // optional uint32 unionid = 6;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->unionid(), output);
  }

  // optional int32 palace_layer = 7;
  if (has_palace_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->palace_layer(), output);
  }

  // optional int32 palace_breakcount = 8;
  if (has_palace_breakcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->palace_breakcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterTeamMemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->prof(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional int32 robotflag = 5;
  if (has_robotflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->robotflag(), target);
  }

  // optional uint32 unionid = 6;
  if (has_unionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->unionid(), target);
  }

  // optional int32 palace_layer = 7;
  if (has_palace_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->palace_layer(), target);
  }

  // optional int32 palace_breakcount = 8;
  if (has_palace_breakcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->palace_breakcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterTeamMemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int32 robotflag = 5;
    if (has_robotflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robotflag());
    }

    // optional uint32 unionid = 6;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unionid());
    }

    // optional int32 palace_layer = 7;
    if (has_palace_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->palace_layer());
    }

    // optional int32 palace_breakcount = 8;
    if (has_palace_breakcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->palace_breakcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterTeamMemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterTeamMemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterTeamMemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterTeamMemProto::MergeFrom(const CenterTeamMemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_robotflag()) {
      set_robotflag(from.robotflag());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
    if (from.has_palace_layer()) {
      set_palace_layer(from.palace_layer());
    }
    if (from.has_palace_breakcount()) {
      set_palace_breakcount(from.palace_breakcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterTeamMemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterTeamMemProto::CopyFrom(const CenterTeamMemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterTeamMemProto::IsInitialized() const {

  return true;
}

void CenterTeamMemProto::Swap(CenterTeamMemProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(robotflag_, other->robotflag_);
    std::swap(unionid_, other->unionid_);
    std::swap(palace_layer_, other->palace_layer_);
    std::swap(palace_breakcount_, other->palace_breakcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterTeamMemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterTeamMemProto_descriptor_;
  metadata.reflection = CenterTeamMemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterMultiTeamMemProto::kMemFieldNumber;
#endif  // !_MSC_VER

CenterMultiTeamMemProto::CenterMultiTeamMemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterMultiTeamMemProto::InitAsDefaultInstance() {
}

CenterMultiTeamMemProto::CenterMultiTeamMemProto(const CenterMultiTeamMemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterMultiTeamMemProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterMultiTeamMemProto::~CenterMultiTeamMemProto() {
  SharedDtor();
}

void CenterMultiTeamMemProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterMultiTeamMemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterMultiTeamMemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterMultiTeamMemProto_descriptor_;
}

const CenterMultiTeamMemProto& CenterMultiTeamMemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

CenterMultiTeamMemProto* CenterMultiTeamMemProto::default_instance_ = NULL;

CenterMultiTeamMemProto* CenterMultiTeamMemProto::New() const {
  return new CenterMultiTeamMemProto;
}

void CenterMultiTeamMemProto::Clear() {
  mem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterMultiTeamMemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CenterTeamMemProto mem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mem;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterMultiTeamMemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CenterTeamMemProto mem = 1;
  for (int i = 0; i < this->mem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterMultiTeamMemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CenterTeamMemProto mem = 1;
  for (int i = 0; i < this->mem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterMultiTeamMemProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CenterTeamMemProto mem = 1;
  total_size += 1 * this->mem_size();
  for (int i = 0; i < this->mem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterMultiTeamMemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterMultiTeamMemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterMultiTeamMemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterMultiTeamMemProto::MergeFrom(const CenterMultiTeamMemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_.MergeFrom(from.mem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterMultiTeamMemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterMultiTeamMemProto::CopyFrom(const CenterMultiTeamMemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterMultiTeamMemProto::IsInitialized() const {

  return true;
}

void CenterMultiTeamMemProto::Swap(CenterMultiTeamMemProto* other) {
  if (other != this) {
    mem_.Swap(&other->mem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterMultiTeamMemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterMultiTeamMemProto_descriptor_;
  metadata.reflection = CenterMultiTeamMemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTeamReq::kObjectIdFieldNumber;
const int CreateTeamReq::kMinLevelFieldNumber;
const int CreateTeamReq::kMaxLevelFieldNumber;
#endif  // !_MSC_VER

CreateTeamReq::CreateTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateTeamReq::InitAsDefaultInstance() {
}

CreateTeamReq::CreateTeamReq(const CreateTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateTeamReq::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  min_level_ = 0;
  max_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTeamReq::~CreateTeamReq() {
  SharedDtor();
}

void CreateTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTeamReq_descriptor_;
}

const CreateTeamReq& CreateTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

CreateTeamReq* CreateTeamReq::default_instance_ = NULL;

CreateTeamReq* CreateTeamReq::New() const {
  return new CreateTeamReq;
}

void CreateTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    min_level_ = 0;
    max_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // required int32 min_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_level;
        break;
      }

      // required int32 max_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }

  // required int32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // required int32 max_level = 3;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }

  // required int32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // required int32 max_level = 3;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

    // required int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // required int32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTeamReq::MergeFrom(const CreateTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTeamReq::CopyFrom(const CreateTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void CreateTeamReq::Swap(CreateTeamReq* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTeamReq_descriptor_;
  metadata.reflection = CreateTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateTeamRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

CreateTeamRsp::CreateTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateTeamRsp::InitAsDefaultInstance() {
}

CreateTeamRsp::CreateTeamRsp(const CreateTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateTeamRsp::~CreateTeamRsp() {
  SharedDtor();
}

void CreateTeamRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateTeamRsp_descriptor_;
}

const CreateTeamRsp& CreateTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

CreateTeamRsp* CreateTeamRsp::default_instance_ = NULL;

CreateTeamRsp* CreateTeamRsp::New() const {
  return new CreateTeamRsp;
}

void CreateTeamRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateTeamRsp::MergeFrom(const CreateTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateTeamRsp::CopyFrom(const CreateTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTeamRsp::IsInitialized() const {

  return true;
}

void CreateTeamRsp::Swap(CreateTeamRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateTeamRsp_descriptor_;
  metadata.reflection = CreateTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamApplyLstReq::TeamApplyLstReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamApplyLstReq::InitAsDefaultInstance() {
}

TeamApplyLstReq::TeamApplyLstReq(const TeamApplyLstReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamApplyLstReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamApplyLstReq::~TeamApplyLstReq() {
  SharedDtor();
}

void TeamApplyLstReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamApplyLstReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamApplyLstReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamApplyLstReq_descriptor_;
}

const TeamApplyLstReq& TeamApplyLstReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamApplyLstReq* TeamApplyLstReq::default_instance_ = NULL;

TeamApplyLstReq* TeamApplyLstReq::New() const {
  return new TeamApplyLstReq;
}

void TeamApplyLstReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamApplyLstReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamApplyLstReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamApplyLstReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamApplyLstReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamApplyLstReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamApplyLstReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamApplyLstReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamApplyLstReq::MergeFrom(const TeamApplyLstReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamApplyLstReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamApplyLstReq::CopyFrom(const TeamApplyLstReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamApplyLstReq::IsInitialized() const {

  return true;
}

void TeamApplyLstReq::Swap(TeamApplyLstReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamApplyLstReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamApplyLstReq_descriptor_;
  metadata.reflection = TeamApplyLstReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamApplyLstRsp::kRetcodeFieldNumber;
const int TeamApplyLstRsp::kApplyFieldNumber;
#endif  // !_MSC_VER

TeamApplyLstRsp::TeamApplyLstRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamApplyLstRsp::InitAsDefaultInstance() {
  apply_ = const_cast< ::proto_ff::TeamMultApplyProto*>(&::proto_ff::TeamMultApplyProto::default_instance());
}

TeamApplyLstRsp::TeamApplyLstRsp(const TeamApplyLstRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamApplyLstRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  apply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamApplyLstRsp::~TeamApplyLstRsp() {
  SharedDtor();
}

void TeamApplyLstRsp::SharedDtor() {
  if (this != default_instance_) {
    delete apply_;
  }
}

void TeamApplyLstRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamApplyLstRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamApplyLstRsp_descriptor_;
}

const TeamApplyLstRsp& TeamApplyLstRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamApplyLstRsp* TeamApplyLstRsp::default_instance_ = NULL;

TeamApplyLstRsp* TeamApplyLstRsp::New() const {
  return new TeamApplyLstRsp;
}

void TeamApplyLstRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    if (has_apply()) {
      if (apply_ != NULL) apply_->::proto_ff::TeamMultApplyProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamApplyLstRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_apply;
        break;
      }

      // optional .proto_ff.TeamMultApplyProto apply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamApplyLstRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional .proto_ff.TeamMultApplyProto apply = 2;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamApplyLstRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional .proto_ff.TeamMultApplyProto apply = 2;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->apply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamApplyLstRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional .proto_ff.TeamMultApplyProto apply = 2;
    if (has_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamApplyLstRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamApplyLstRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamApplyLstRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamApplyLstRsp::MergeFrom(const TeamApplyLstRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_apply()) {
      mutable_apply()->::proto_ff::TeamMultApplyProto::MergeFrom(from.apply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamApplyLstRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamApplyLstRsp::CopyFrom(const TeamApplyLstRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamApplyLstRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TeamApplyLstRsp::Swap(TeamApplyLstRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(apply_, other->apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamApplyLstRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamApplyLstRsp_descriptor_;
  metadata.reflection = TeamApplyLstRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamReplyApplyReq::kCidFieldNumber;
#endif  // !_MSC_VER

TeamReplyApplyReq::TeamReplyApplyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamReplyApplyReq::InitAsDefaultInstance() {
}

TeamReplyApplyReq::TeamReplyApplyReq(const TeamReplyApplyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamReplyApplyReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamReplyApplyReq::~TeamReplyApplyReq() {
  SharedDtor();
}

void TeamReplyApplyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamReplyApplyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamReplyApplyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamReplyApplyReq_descriptor_;
}

const TeamReplyApplyReq& TeamReplyApplyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamReplyApplyReq* TeamReplyApplyReq::default_instance_ = NULL;

TeamReplyApplyReq* TeamReplyApplyReq::New() const {
  return new TeamReplyApplyReq;
}

void TeamReplyApplyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamReplyApplyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamReplyApplyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamReplyApplyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamReplyApplyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamReplyApplyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamReplyApplyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamReplyApplyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamReplyApplyReq::MergeFrom(const TeamReplyApplyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamReplyApplyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamReplyApplyReq::CopyFrom(const TeamReplyApplyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamReplyApplyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TeamReplyApplyReq::Swap(TeamReplyApplyReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamReplyApplyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamReplyApplyReq_descriptor_;
  metadata.reflection = TeamReplyApplyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamReplyApplyRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

TeamReplyApplyRsp::TeamReplyApplyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamReplyApplyRsp::InitAsDefaultInstance() {
}

TeamReplyApplyRsp::TeamReplyApplyRsp(const TeamReplyApplyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamReplyApplyRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamReplyApplyRsp::~TeamReplyApplyRsp() {
  SharedDtor();
}

void TeamReplyApplyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamReplyApplyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamReplyApplyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamReplyApplyRsp_descriptor_;
}

const TeamReplyApplyRsp& TeamReplyApplyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamReplyApplyRsp* TeamReplyApplyRsp::default_instance_ = NULL;

TeamReplyApplyRsp* TeamReplyApplyRsp::New() const {
  return new TeamReplyApplyRsp;
}

void TeamReplyApplyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamReplyApplyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamReplyApplyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamReplyApplyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamReplyApplyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamReplyApplyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamReplyApplyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamReplyApplyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamReplyApplyRsp::MergeFrom(const TeamReplyApplyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamReplyApplyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamReplyApplyRsp::CopyFrom(const TeamReplyApplyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamReplyApplyRsp::IsInitialized() const {

  return true;
}

void TeamReplyApplyRsp::Swap(TeamReplyApplyRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamReplyApplyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamReplyApplyRsp_descriptor_;
  metadata.reflection = TeamReplyApplyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamUpdateMemNotify::kDelMemFieldNumber;
const int TeamUpdateMemNotify::kReasonFieldNumber;
const int TeamUpdateMemNotify::kMemsFieldNumber;
#endif  // !_MSC_VER

TeamUpdateMemNotify::TeamUpdateMemNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamUpdateMemNotify::InitAsDefaultInstance() {
  mems_ = const_cast< ::proto_ff::TeamMultMemProto*>(&::proto_ff::TeamMultMemProto::default_instance());
}

TeamUpdateMemNotify::TeamUpdateMemNotify(const TeamUpdateMemNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamUpdateMemNotify::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 0;
  mems_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamUpdateMemNotify::~TeamUpdateMemNotify() {
  SharedDtor();
}

void TeamUpdateMemNotify::SharedDtor() {
  if (this != default_instance_) {
    delete mems_;
  }
}

void TeamUpdateMemNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamUpdateMemNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamUpdateMemNotify_descriptor_;
}

const TeamUpdateMemNotify& TeamUpdateMemNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamUpdateMemNotify* TeamUpdateMemNotify::default_instance_ = NULL;

TeamUpdateMemNotify* TeamUpdateMemNotify::New() const {
  return new TeamUpdateMemNotify;
}

void TeamUpdateMemNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    reason_ = 0;
    if (has_mems()) {
      if (mems_ != NULL) mems_->::proto_ff::TeamMultMemProto::Clear();
    }
  }
  del_mem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamUpdateMemNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 del_mem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_mem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_del_mem())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_mem())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_del_mem;
        if (input->ExpectTag(16)) goto parse_reason;
        break;
      }

      // optional int32 reason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reason_)));
          set_has_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_mems;
        break;
      }

      // optional .proto_ff.TeamMultMemProto mems = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamUpdateMemNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 del_mem = 1;
  for (int i = 0; i < this->del_mem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->del_mem(i), output);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reason(), output);
  }

  // optional .proto_ff.TeamMultMemProto mems = 3;
  if (has_mems()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->mems(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamUpdateMemNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 del_mem = 1;
  for (int i = 0; i < this->del_mem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->del_mem(i), target);
  }

  // optional int32 reason = 2;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reason(), target);
  }

  // optional .proto_ff.TeamMultMemProto mems = 3;
  if (has_mems()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->mems(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamUpdateMemNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reason());
    }

    // optional .proto_ff.TeamMultMemProto mems = 3;
    if (has_mems()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mems());
    }

  }
  // repeated uint64 del_mem = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_mem_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_mem(i));
    }
    total_size += 1 * this->del_mem_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamUpdateMemNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamUpdateMemNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamUpdateMemNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamUpdateMemNotify::MergeFrom(const TeamUpdateMemNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  del_mem_.MergeFrom(from.del_mem_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_mems()) {
      mutable_mems()->::proto_ff::TeamMultMemProto::MergeFrom(from.mems());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamUpdateMemNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamUpdateMemNotify::CopyFrom(const TeamUpdateMemNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamUpdateMemNotify::IsInitialized() const {

  if (has_mems()) {
    if (!this->mems().IsInitialized()) return false;
  }
  return true;
}

void TeamUpdateMemNotify::Swap(TeamUpdateMemNotify* other) {
  if (other != this) {
    del_mem_.Swap(&other->del_mem_);
    std::swap(reason_, other->reason_);
    std::swap(mems_, other->mems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamUpdateMemNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamUpdateMemNotify_descriptor_;
  metadata.reflection = TeamUpdateMemNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamUpdateMemSimpleNotify::kSimpleInfoFieldNumber;
#endif  // !_MSC_VER

TeamUpdateMemSimpleNotify::TeamUpdateMemSimpleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamUpdateMemSimpleNotify::InitAsDefaultInstance() {
  simple_info_ = const_cast< ::proto_ff::TeamMultMemSimpleProto*>(&::proto_ff::TeamMultMemSimpleProto::default_instance());
}

TeamUpdateMemSimpleNotify::TeamUpdateMemSimpleNotify(const TeamUpdateMemSimpleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamUpdateMemSimpleNotify::SharedCtor() {
  _cached_size_ = 0;
  simple_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamUpdateMemSimpleNotify::~TeamUpdateMemSimpleNotify() {
  SharedDtor();
}

void TeamUpdateMemSimpleNotify::SharedDtor() {
  if (this != default_instance_) {
    delete simple_info_;
  }
}

void TeamUpdateMemSimpleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamUpdateMemSimpleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamUpdateMemSimpleNotify_descriptor_;
}

const TeamUpdateMemSimpleNotify& TeamUpdateMemSimpleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamUpdateMemSimpleNotify* TeamUpdateMemSimpleNotify::default_instance_ = NULL;

TeamUpdateMemSimpleNotify* TeamUpdateMemSimpleNotify::New() const {
  return new TeamUpdateMemSimpleNotify;
}

void TeamUpdateMemSimpleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_simple_info()) {
      if (simple_info_ != NULL) simple_info_->::proto_ff::TeamMultMemSimpleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamUpdateMemSimpleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.TeamMultMemSimpleProto simple_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamUpdateMemSimpleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.TeamMultMemSimpleProto simple_info = 1;
  if (has_simple_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->simple_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamUpdateMemSimpleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.TeamMultMemSimpleProto simple_info = 1;
  if (has_simple_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->simple_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamUpdateMemSimpleNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.TeamMultMemSimpleProto simple_info = 1;
    if (has_simple_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamUpdateMemSimpleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamUpdateMemSimpleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamUpdateMemSimpleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamUpdateMemSimpleNotify::MergeFrom(const TeamUpdateMemSimpleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_simple_info()) {
      mutable_simple_info()->::proto_ff::TeamMultMemSimpleProto::MergeFrom(from.simple_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamUpdateMemSimpleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamUpdateMemSimpleNotify::CopyFrom(const TeamUpdateMemSimpleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamUpdateMemSimpleNotify::IsInitialized() const {

  return true;
}

void TeamUpdateMemSimpleNotify::Swap(TeamUpdateMemSimpleNotify* other) {
  if (other != this) {
    std::swap(simple_info_, other->simple_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamUpdateMemSimpleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamUpdateMemSimpleNotify_descriptor_;
  metadata.reflection = TeamUpdateMemSimpleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamUpdateInfoNotify::kInfoFieldNumber;
#endif  // !_MSC_VER

TeamUpdateInfoNotify::TeamUpdateInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamUpdateInfoNotify::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::TeamProto*>(&::proto_ff::TeamProto::default_instance());
}

TeamUpdateInfoNotify::TeamUpdateInfoNotify(const TeamUpdateInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamUpdateInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamUpdateInfoNotify::~TeamUpdateInfoNotify() {
  SharedDtor();
}

void TeamUpdateInfoNotify::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TeamUpdateInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamUpdateInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamUpdateInfoNotify_descriptor_;
}

const TeamUpdateInfoNotify& TeamUpdateInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamUpdateInfoNotify* TeamUpdateInfoNotify::default_instance_ = NULL;

TeamUpdateInfoNotify* TeamUpdateInfoNotify::New() const {
  return new TeamUpdateInfoNotify;
}

void TeamUpdateInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::TeamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamUpdateInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.TeamProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamUpdateInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.TeamProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamUpdateInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.TeamProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamUpdateInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.TeamProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamUpdateInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamUpdateInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamUpdateInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamUpdateInfoNotify::MergeFrom(const TeamUpdateInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::TeamProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamUpdateInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamUpdateInfoNotify::CopyFrom(const TeamUpdateInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamUpdateInfoNotify::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TeamUpdateInfoNotify::Swap(TeamUpdateInfoNotify* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamUpdateInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamUpdateInfoNotify_descriptor_;
  metadata.reflection = TeamUpdateInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamUpdateSimpleNotify::kObjectIdFieldNumber;
const int TeamUpdateSimpleNotify::kMinLevelFieldNumber;
const int TeamUpdateSimpleNotify::kMaxLevelFieldNumber;
const int TeamUpdateSimpleNotify::kLeaderFieldNumber;
const int TeamUpdateSimpleNotify::kAutoMatchFieldNumber;
#endif  // !_MSC_VER

TeamUpdateSimpleNotify::TeamUpdateSimpleNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamUpdateSimpleNotify::InitAsDefaultInstance() {
}

TeamUpdateSimpleNotify::TeamUpdateSimpleNotify(const TeamUpdateSimpleNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamUpdateSimpleNotify::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  min_level_ = 0;
  max_level_ = 0;
  leader_ = GOOGLE_ULONGLONG(0);
  auto_match_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamUpdateSimpleNotify::~TeamUpdateSimpleNotify() {
  SharedDtor();
}

void TeamUpdateSimpleNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamUpdateSimpleNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamUpdateSimpleNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamUpdateSimpleNotify_descriptor_;
}

const TeamUpdateSimpleNotify& TeamUpdateSimpleNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamUpdateSimpleNotify* TeamUpdateSimpleNotify::default_instance_ = NULL;

TeamUpdateSimpleNotify* TeamUpdateSimpleNotify::New() const {
  return new TeamUpdateSimpleNotify;
}

void TeamUpdateSimpleNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    min_level_ = 0;
    max_level_ = 0;
    leader_ = GOOGLE_ULONGLONG(0);
    auto_match_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamUpdateSimpleNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // optional int32 min_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_level;
        break;
      }

      // optional int32 max_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leader;
        break;
      }

      // optional uint64 leader = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_auto_match;
        break;
      }

      // optional int32 auto_match = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_match:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_match_)));
          set_has_auto_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamUpdateSimpleNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }

  // optional int32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // optional int32 max_level = 3;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  // optional uint64 leader = 4;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->leader(), output);
  }

  // optional int32 auto_match = 5;
  if (has_auto_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->auto_match(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamUpdateSimpleNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }

  // optional int32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // optional int32 max_level = 3;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  // optional uint64 leader = 4;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->leader(), target);
  }

  // optional int32 auto_match = 5;
  if (has_auto_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->auto_match(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamUpdateSimpleNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

    // optional int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // optional int32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

    // optional uint64 leader = 4;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader());
    }

    // optional int32 auto_match = 5;
    if (has_auto_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_match());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamUpdateSimpleNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamUpdateSimpleNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamUpdateSimpleNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamUpdateSimpleNotify::MergeFrom(const TeamUpdateSimpleNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_auto_match()) {
      set_auto_match(from.auto_match());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamUpdateSimpleNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamUpdateSimpleNotify::CopyFrom(const TeamUpdateSimpleNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamUpdateSimpleNotify::IsInitialized() const {

  return true;
}

void TeamUpdateSimpleNotify::Swap(TeamUpdateSimpleNotify* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    std::swap(leader_, other->leader_);
    std::swap(auto_match_, other->auto_match_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamUpdateSimpleNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamUpdateSimpleNotify_descriptor_;
  metadata.reflection = TeamUpdateSimpleNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamClearApplyLstReq::TeamClearApplyLstReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamClearApplyLstReq::InitAsDefaultInstance() {
}

TeamClearApplyLstReq::TeamClearApplyLstReq(const TeamClearApplyLstReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamClearApplyLstReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamClearApplyLstReq::~TeamClearApplyLstReq() {
  SharedDtor();
}

void TeamClearApplyLstReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamClearApplyLstReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamClearApplyLstReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamClearApplyLstReq_descriptor_;
}

const TeamClearApplyLstReq& TeamClearApplyLstReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamClearApplyLstReq* TeamClearApplyLstReq::default_instance_ = NULL;

TeamClearApplyLstReq* TeamClearApplyLstReq::New() const {
  return new TeamClearApplyLstReq;
}

void TeamClearApplyLstReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamClearApplyLstReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamClearApplyLstReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamClearApplyLstReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamClearApplyLstReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamClearApplyLstReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamClearApplyLstReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamClearApplyLstReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamClearApplyLstReq::MergeFrom(const TeamClearApplyLstReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamClearApplyLstReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamClearApplyLstReq::CopyFrom(const TeamClearApplyLstReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamClearApplyLstReq::IsInitialized() const {

  return true;
}

void TeamClearApplyLstReq::Swap(TeamClearApplyLstReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamClearApplyLstReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamClearApplyLstReq_descriptor_;
  metadata.reflection = TeamClearApplyLstReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamClearApplyLstRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

TeamClearApplyLstRsp::TeamClearApplyLstRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamClearApplyLstRsp::InitAsDefaultInstance() {
}

TeamClearApplyLstRsp::TeamClearApplyLstRsp(const TeamClearApplyLstRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamClearApplyLstRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamClearApplyLstRsp::~TeamClearApplyLstRsp() {
  SharedDtor();
}

void TeamClearApplyLstRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamClearApplyLstRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamClearApplyLstRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamClearApplyLstRsp_descriptor_;
}

const TeamClearApplyLstRsp& TeamClearApplyLstRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamClearApplyLstRsp* TeamClearApplyLstRsp::default_instance_ = NULL;

TeamClearApplyLstRsp* TeamClearApplyLstRsp::New() const {
  return new TeamClearApplyLstRsp;
}

void TeamClearApplyLstRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamClearApplyLstRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamClearApplyLstRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamClearApplyLstRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamClearApplyLstRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamClearApplyLstRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamClearApplyLstRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamClearApplyLstRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamClearApplyLstRsp::MergeFrom(const TeamClearApplyLstRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamClearApplyLstRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamClearApplyLstRsp::CopyFrom(const TeamClearApplyLstRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamClearApplyLstRsp::IsInitialized() const {

  return true;
}

void TeamClearApplyLstRsp::Swap(TeamClearApplyLstRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamClearApplyLstRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamClearApplyLstRsp_descriptor_;
  metadata.reflection = TeamClearApplyLstRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamUpdateApplyNotify::kDelApplyFieldNumber;
const int TeamUpdateApplyNotify::kApplyFieldNumber;
#endif  // !_MSC_VER

TeamUpdateApplyNotify::TeamUpdateApplyNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamUpdateApplyNotify::InitAsDefaultInstance() {
  apply_ = const_cast< ::proto_ff::TeamMultApplyProto*>(&::proto_ff::TeamMultApplyProto::default_instance());
}

TeamUpdateApplyNotify::TeamUpdateApplyNotify(const TeamUpdateApplyNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamUpdateApplyNotify::SharedCtor() {
  _cached_size_ = 0;
  apply_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamUpdateApplyNotify::~TeamUpdateApplyNotify() {
  SharedDtor();
}

void TeamUpdateApplyNotify::SharedDtor() {
  if (this != default_instance_) {
    delete apply_;
  }
}

void TeamUpdateApplyNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamUpdateApplyNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamUpdateApplyNotify_descriptor_;
}

const TeamUpdateApplyNotify& TeamUpdateApplyNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamUpdateApplyNotify* TeamUpdateApplyNotify::default_instance_ = NULL;

TeamUpdateApplyNotify* TeamUpdateApplyNotify::New() const {
  return new TeamUpdateApplyNotify;
}

void TeamUpdateApplyNotify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_apply()) {
      if (apply_ != NULL) apply_->::proto_ff::TeamMultApplyProto::Clear();
    }
  }
  del_apply_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamUpdateApplyNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 del_apply = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_del_apply:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_del_apply())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_del_apply())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_del_apply;
        if (input->ExpectTag(18)) goto parse_apply;
        break;
      }

      // optional .proto_ff.TeamMultApplyProto apply = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamUpdateApplyNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 del_apply = 1;
  for (int i = 0; i < this->del_apply_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->del_apply(i), output);
  }

  // optional .proto_ff.TeamMultApplyProto apply = 2;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->apply(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamUpdateApplyNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 del_apply = 1;
  for (int i = 0; i < this->del_apply_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->del_apply(i), target);
  }

  // optional .proto_ff.TeamMultApplyProto apply = 2;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->apply(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamUpdateApplyNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto_ff.TeamMultApplyProto apply = 2;
    if (has_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply());
    }

  }
  // repeated uint64 del_apply = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->del_apply_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->del_apply(i));
    }
    total_size += 1 * this->del_apply_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamUpdateApplyNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamUpdateApplyNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamUpdateApplyNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamUpdateApplyNotify::MergeFrom(const TeamUpdateApplyNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  del_apply_.MergeFrom(from.del_apply_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_apply()) {
      mutable_apply()->::proto_ff::TeamMultApplyProto::MergeFrom(from.apply());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamUpdateApplyNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamUpdateApplyNotify::CopyFrom(const TeamUpdateApplyNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamUpdateApplyNotify::IsInitialized() const {

  return true;
}

void TeamUpdateApplyNotify::Swap(TeamUpdateApplyNotify* other) {
  if (other != this) {
    del_apply_.Swap(&other->del_apply_);
    std::swap(apply_, other->apply_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamUpdateApplyNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamUpdateApplyNotify_descriptor_;
  metadata.reflection = TeamUpdateApplyNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinTeamReq::kTeamidFieldNumber;
#endif  // !_MSC_VER

ApplyJoinTeamReq::ApplyJoinTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinTeamReq::InitAsDefaultInstance() {
}

ApplyJoinTeamReq::ApplyJoinTeamReq(const ApplyJoinTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinTeamReq::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinTeamReq::~ApplyJoinTeamReq() {
  SharedDtor();
}

void ApplyJoinTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinTeamReq_descriptor_;
}

const ApplyJoinTeamReq& ApplyJoinTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

ApplyJoinTeamReq* ApplyJoinTeamReq::default_instance_ = NULL;

ApplyJoinTeamReq* ApplyJoinTeamReq::New() const {
  return new ApplyJoinTeamReq;
}

void ApplyJoinTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinTeamReq::MergeFrom(const ApplyJoinTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinTeamReq::CopyFrom(const ApplyJoinTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ApplyJoinTeamReq::Swap(ApplyJoinTeamReq* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinTeamReq_descriptor_;
  metadata.reflection = ApplyJoinTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApplyJoinTeamRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

ApplyJoinTeamRsp::ApplyJoinTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ApplyJoinTeamRsp::InitAsDefaultInstance() {
}

ApplyJoinTeamRsp::ApplyJoinTeamRsp(const ApplyJoinTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ApplyJoinTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApplyJoinTeamRsp::~ApplyJoinTeamRsp() {
  SharedDtor();
}

void ApplyJoinTeamRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ApplyJoinTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApplyJoinTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApplyJoinTeamRsp_descriptor_;
}

const ApplyJoinTeamRsp& ApplyJoinTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

ApplyJoinTeamRsp* ApplyJoinTeamRsp::default_instance_ = NULL;

ApplyJoinTeamRsp* ApplyJoinTeamRsp::New() const {
  return new ApplyJoinTeamRsp;
}

void ApplyJoinTeamRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApplyJoinTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ApplyJoinTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ApplyJoinTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ApplyJoinTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApplyJoinTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApplyJoinTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApplyJoinTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApplyJoinTeamRsp::MergeFrom(const ApplyJoinTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApplyJoinTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplyJoinTeamRsp::CopyFrom(const ApplyJoinTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplyJoinTeamRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ApplyJoinTeamRsp::Swap(ApplyJoinTeamRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApplyJoinTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApplyJoinTeamRsp_descriptor_;
  metadata.reflection = ApplyJoinTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinTeamReq::kInviteCidFieldNumber;
#endif  // !_MSC_VER

InviteJoinTeamReq::InviteJoinTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinTeamReq::InitAsDefaultInstance() {
}

InviteJoinTeamReq::InviteJoinTeamReq(const InviteJoinTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinTeamReq::SharedCtor() {
  _cached_size_ = 0;
  invite_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinTeamReq::~InviteJoinTeamReq() {
  SharedDtor();
}

void InviteJoinTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinTeamReq_descriptor_;
}

const InviteJoinTeamReq& InviteJoinTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

InviteJoinTeamReq* InviteJoinTeamReq::default_instance_ = NULL;

InviteJoinTeamReq* InviteJoinTeamReq::New() const {
  return new InviteJoinTeamReq;
}

void InviteJoinTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invite_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 invite_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_cid_)));
          set_has_invite_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 invite_cid = 1;
  if (has_invite_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 invite_cid = 1;
  if (has_invite_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 invite_cid = 1;
    if (has_invite_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinTeamReq::MergeFrom(const InviteJoinTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_cid()) {
      set_invite_cid(from.invite_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinTeamReq::CopyFrom(const InviteJoinTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteJoinTeamReq::Swap(InviteJoinTeamReq* other) {
  if (other != this) {
    std::swap(invite_cid_, other->invite_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinTeamReq_descriptor_;
  metadata.reflection = InviteJoinTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinTeamRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

InviteJoinTeamRsp::InviteJoinTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinTeamRsp::InitAsDefaultInstance() {
}

InviteJoinTeamRsp::InviteJoinTeamRsp(const InviteJoinTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinTeamRsp::~InviteJoinTeamRsp() {
  SharedDtor();
}

void InviteJoinTeamRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteJoinTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinTeamRsp_descriptor_;
}

const InviteJoinTeamRsp& InviteJoinTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

InviteJoinTeamRsp* InviteJoinTeamRsp::default_instance_ = NULL;

InviteJoinTeamRsp* InviteJoinTeamRsp::New() const {
  return new InviteJoinTeamRsp;
}

void InviteJoinTeamRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinTeamRsp::MergeFrom(const InviteJoinTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinTeamRsp::CopyFrom(const InviteJoinTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinTeamRsp::IsInitialized() const {

  return true;
}

void InviteJoinTeamRsp::Swap(InviteJoinTeamRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinTeamRsp_descriptor_;
  metadata.reflection = InviteJoinTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteJoinTeamNotify::kInviteCidFieldNumber;
const int InviteJoinTeamNotify::kInviteNameFieldNumber;
const int InviteJoinTeamNotify::kTeamidFieldNumber;
#endif  // !_MSC_VER

InviteJoinTeamNotify::InviteJoinTeamNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteJoinTeamNotify::InitAsDefaultInstance() {
}

InviteJoinTeamNotify::InviteJoinTeamNotify(const InviteJoinTeamNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteJoinTeamNotify::SharedCtor() {
  _cached_size_ = 0;
  invite_cid_ = GOOGLE_ULONGLONG(0);
  invite_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteJoinTeamNotify::~InviteJoinTeamNotify() {
  SharedDtor();
}

void InviteJoinTeamNotify::SharedDtor() {
  if (invite_name_ != &::google::protobuf::internal::kEmptyString) {
    delete invite_name_;
  }
  if (this != default_instance_) {
  }
}

void InviteJoinTeamNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteJoinTeamNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteJoinTeamNotify_descriptor_;
}

const InviteJoinTeamNotify& InviteJoinTeamNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

InviteJoinTeamNotify* InviteJoinTeamNotify::default_instance_ = NULL;

InviteJoinTeamNotify* InviteJoinTeamNotify::New() const {
  return new InviteJoinTeamNotify;
}

void InviteJoinTeamNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invite_cid_ = GOOGLE_ULONGLONG(0);
    if (has_invite_name()) {
      if (invite_name_ != &::google::protobuf::internal::kEmptyString) {
        invite_name_->clear();
      }
    }
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteJoinTeamNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 invite_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &invite_cid_)));
          set_has_invite_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invite_name;
        break;
      }

      // optional bytes invite_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invite_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_invite_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteJoinTeamNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 invite_cid = 1;
  if (has_invite_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->invite_cid(), output);
  }

  // optional bytes invite_name = 2;
  if (has_invite_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->invite_name(), output);
  }

  // optional uint32 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteJoinTeamNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 invite_cid = 1;
  if (has_invite_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->invite_cid(), target);
  }

  // optional bytes invite_name = 2;
  if (has_invite_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->invite_name(), target);
  }

  // optional uint32 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteJoinTeamNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 invite_cid = 1;
    if (has_invite_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->invite_cid());
    }

    // optional bytes invite_name = 2;
    if (has_invite_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->invite_name());
    }

    // optional uint32 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteJoinTeamNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteJoinTeamNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteJoinTeamNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteJoinTeamNotify::MergeFrom(const InviteJoinTeamNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invite_cid()) {
      set_invite_cid(from.invite_cid());
    }
    if (from.has_invite_name()) {
      set_invite_name(from.invite_name());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteJoinTeamNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteJoinTeamNotify::CopyFrom(const InviteJoinTeamNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteJoinTeamNotify::IsInitialized() const {

  return true;
}

void InviteJoinTeamNotify::Swap(InviteJoinTeamNotify* other) {
  if (other != this) {
    std::swap(invite_cid_, other->invite_cid_);
    std::swap(invite_name_, other->invite_name_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteJoinTeamNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteJoinTeamNotify_descriptor_;
  metadata.reflection = InviteJoinTeamNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyInviteJoinTeamReq::kReplyFieldNumber;
const int ReplyInviteJoinTeamReq::kTeamidFieldNumber;
#endif  // !_MSC_VER

ReplyInviteJoinTeamReq::ReplyInviteJoinTeamReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyInviteJoinTeamReq::InitAsDefaultInstance() {
}

ReplyInviteJoinTeamReq::ReplyInviteJoinTeamReq(const ReplyInviteJoinTeamReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyInviteJoinTeamReq::SharedCtor() {
  _cached_size_ = 0;
  reply_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyInviteJoinTeamReq::~ReplyInviteJoinTeamReq() {
  SharedDtor();
}

void ReplyInviteJoinTeamReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyInviteJoinTeamReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyInviteJoinTeamReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyInviteJoinTeamReq_descriptor_;
}

const ReplyInviteJoinTeamReq& ReplyInviteJoinTeamReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

ReplyInviteJoinTeamReq* ReplyInviteJoinTeamReq::default_instance_ = NULL;

ReplyInviteJoinTeamReq* ReplyInviteJoinTeamReq::New() const {
  return new ReplyInviteJoinTeamReq;
}

void ReplyInviteJoinTeamReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reply_ = 0;
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyInviteJoinTeamReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reply = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reply_)));
          set_has_reply();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // required uint32 teamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyInviteJoinTeamReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reply = 1;
  if (has_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reply(), output);
  }

  // required uint32 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyInviteJoinTeamReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reply = 1;
  if (has_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reply(), target);
  }

  // required uint32 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyInviteJoinTeamReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reply = 1;
    if (has_reply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reply());
    }

    // required uint32 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyInviteJoinTeamReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyInviteJoinTeamReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyInviteJoinTeamReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyInviteJoinTeamReq::MergeFrom(const ReplyInviteJoinTeamReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reply()) {
      set_reply(from.reply());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyInviteJoinTeamReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyInviteJoinTeamReq::CopyFrom(const ReplyInviteJoinTeamReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyInviteJoinTeamReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReplyInviteJoinTeamReq::Swap(ReplyInviteJoinTeamReq* other) {
  if (other != this) {
    std::swap(reply_, other->reply_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyInviteJoinTeamReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyInviteJoinTeamReq_descriptor_;
  metadata.reflection = ReplyInviteJoinTeamReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReplyInviteJoinTeamRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

ReplyInviteJoinTeamRsp::ReplyInviteJoinTeamRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReplyInviteJoinTeamRsp::InitAsDefaultInstance() {
}

ReplyInviteJoinTeamRsp::ReplyInviteJoinTeamRsp(const ReplyInviteJoinTeamRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReplyInviteJoinTeamRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReplyInviteJoinTeamRsp::~ReplyInviteJoinTeamRsp() {
  SharedDtor();
}

void ReplyInviteJoinTeamRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReplyInviteJoinTeamRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReplyInviteJoinTeamRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyInviteJoinTeamRsp_descriptor_;
}

const ReplyInviteJoinTeamRsp& ReplyInviteJoinTeamRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

ReplyInviteJoinTeamRsp* ReplyInviteJoinTeamRsp::default_instance_ = NULL;

ReplyInviteJoinTeamRsp* ReplyInviteJoinTeamRsp::New() const {
  return new ReplyInviteJoinTeamRsp;
}

void ReplyInviteJoinTeamRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReplyInviteJoinTeamRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReplyInviteJoinTeamRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReplyInviteJoinTeamRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReplyInviteJoinTeamRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReplyInviteJoinTeamRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReplyInviteJoinTeamRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReplyInviteJoinTeamRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReplyInviteJoinTeamRsp::MergeFrom(const ReplyInviteJoinTeamRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReplyInviteJoinTeamRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyInviteJoinTeamRsp::CopyFrom(const ReplyInviteJoinTeamRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyInviteJoinTeamRsp::IsInitialized() const {

  return true;
}

void ReplyInviteJoinTeamRsp::Swap(ReplyInviteJoinTeamRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReplyInviteJoinTeamRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReplyInviteJoinTeamRsp_descriptor_;
  metadata.reflection = ReplyInviteJoinTeamRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamSetObjReq::kObjectIdFieldNumber;
const int TeamSetObjReq::kMinLevelFieldNumber;
const int TeamSetObjReq::kMaxLevelFieldNumber;
#endif  // !_MSC_VER

TeamSetObjReq::TeamSetObjReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamSetObjReq::InitAsDefaultInstance() {
}

TeamSetObjReq::TeamSetObjReq(const TeamSetObjReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamSetObjReq::SharedCtor() {
  _cached_size_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  min_level_ = 0;
  max_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamSetObjReq::~TeamSetObjReq() {
  SharedDtor();
}

void TeamSetObjReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamSetObjReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamSetObjReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamSetObjReq_descriptor_;
}

const TeamSetObjReq& TeamSetObjReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamSetObjReq* TeamSetObjReq::default_instance_ = NULL;

TeamSetObjReq* TeamSetObjReq::New() const {
  return new TeamSetObjReq;
}

void TeamSetObjReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    object_id_ = GOOGLE_ULONGLONG(0);
    min_level_ = 0;
    max_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamSetObjReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 object_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_min_level;
        break;
      }

      // required int32 min_level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_max_level;
        break;
      }

      // required int32 max_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamSetObjReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->object_id(), output);
  }

  // required int32 min_level = 2;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->min_level(), output);
  }

  // required int32 max_level = 3;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamSetObjReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 object_id = 1;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->object_id(), target);
  }

  // required int32 min_level = 2;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->min_level(), target);
  }

  // required int32 max_level = 3;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamSetObjReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 object_id = 1;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

    // required int32 min_level = 2;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // required int32 max_level = 3;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamSetObjReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamSetObjReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamSetObjReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamSetObjReq::MergeFrom(const TeamSetObjReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamSetObjReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamSetObjReq::CopyFrom(const TeamSetObjReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamSetObjReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TeamSetObjReq::Swap(TeamSetObjReq* other) {
  if (other != this) {
    std::swap(object_id_, other->object_id_);
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamSetObjReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamSetObjReq_descriptor_;
  metadata.reflection = TeamSetObjReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamSetObjRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

TeamSetObjRsp::TeamSetObjRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamSetObjRsp::InitAsDefaultInstance() {
}

TeamSetObjRsp::TeamSetObjRsp(const TeamSetObjRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamSetObjRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamSetObjRsp::~TeamSetObjRsp() {
  SharedDtor();
}

void TeamSetObjRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamSetObjRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamSetObjRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamSetObjRsp_descriptor_;
}

const TeamSetObjRsp& TeamSetObjRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamSetObjRsp* TeamSetObjRsp::default_instance_ = NULL;

TeamSetObjRsp* TeamSetObjRsp::New() const {
  return new TeamSetObjRsp;
}

void TeamSetObjRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamSetObjRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamSetObjRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamSetObjRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamSetObjRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamSetObjRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamSetObjRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamSetObjRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamSetObjRsp::MergeFrom(const TeamSetObjRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamSetObjRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamSetObjRsp::CopyFrom(const TeamSetObjRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamSetObjRsp::IsInitialized() const {

  return true;
}

void TeamSetObjRsp::Swap(TeamSetObjRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamSetObjRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamSetObjRsp_descriptor_;
  metadata.reflection = TeamSetObjRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPromoteLeaderReq::kCidFieldNumber;
#endif  // !_MSC_VER

TeamPromoteLeaderReq::TeamPromoteLeaderReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamPromoteLeaderReq::InitAsDefaultInstance() {
}

TeamPromoteLeaderReq::TeamPromoteLeaderReq(const TeamPromoteLeaderReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamPromoteLeaderReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPromoteLeaderReq::~TeamPromoteLeaderReq() {
  SharedDtor();
}

void TeamPromoteLeaderReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPromoteLeaderReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPromoteLeaderReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPromoteLeaderReq_descriptor_;
}

const TeamPromoteLeaderReq& TeamPromoteLeaderReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamPromoteLeaderReq* TeamPromoteLeaderReq::default_instance_ = NULL;

TeamPromoteLeaderReq* TeamPromoteLeaderReq::New() const {
  return new TeamPromoteLeaderReq;
}

void TeamPromoteLeaderReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPromoteLeaderReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamPromoteLeaderReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamPromoteLeaderReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamPromoteLeaderReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPromoteLeaderReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPromoteLeaderReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPromoteLeaderReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPromoteLeaderReq::MergeFrom(const TeamPromoteLeaderReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPromoteLeaderReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPromoteLeaderReq::CopyFrom(const TeamPromoteLeaderReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPromoteLeaderReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TeamPromoteLeaderReq::Swap(TeamPromoteLeaderReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPromoteLeaderReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPromoteLeaderReq_descriptor_;
  metadata.reflection = TeamPromoteLeaderReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamPromoteLeaderRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

TeamPromoteLeaderRsp::TeamPromoteLeaderRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamPromoteLeaderRsp::InitAsDefaultInstance() {
}

TeamPromoteLeaderRsp::TeamPromoteLeaderRsp(const TeamPromoteLeaderRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamPromoteLeaderRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamPromoteLeaderRsp::~TeamPromoteLeaderRsp() {
  SharedDtor();
}

void TeamPromoteLeaderRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamPromoteLeaderRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamPromoteLeaderRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamPromoteLeaderRsp_descriptor_;
}

const TeamPromoteLeaderRsp& TeamPromoteLeaderRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamPromoteLeaderRsp* TeamPromoteLeaderRsp::default_instance_ = NULL;

TeamPromoteLeaderRsp* TeamPromoteLeaderRsp::New() const {
  return new TeamPromoteLeaderRsp;
}

void TeamPromoteLeaderRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamPromoteLeaderRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamPromoteLeaderRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamPromoteLeaderRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamPromoteLeaderRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamPromoteLeaderRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamPromoteLeaderRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamPromoteLeaderRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamPromoteLeaderRsp::MergeFrom(const TeamPromoteLeaderRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamPromoteLeaderRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamPromoteLeaderRsp::CopyFrom(const TeamPromoteLeaderRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamPromoteLeaderRsp::IsInitialized() const {

  return true;
}

void TeamPromoteLeaderRsp::Swap(TeamPromoteLeaderRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamPromoteLeaderRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamPromoteLeaderRsp_descriptor_;
  metadata.reflection = TeamPromoteLeaderRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamAutoMatchReq::kAutoMatchFieldNumber;
const int TeamAutoMatchReq::kObjectIdFieldNumber;
const int TeamAutoMatchReq::kMinLevelFieldNumber;
const int TeamAutoMatchReq::kMaxLevelFieldNumber;
#endif  // !_MSC_VER

TeamAutoMatchReq::TeamAutoMatchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamAutoMatchReq::InitAsDefaultInstance() {
}

TeamAutoMatchReq::TeamAutoMatchReq(const TeamAutoMatchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamAutoMatchReq::SharedCtor() {
  _cached_size_ = 0;
  auto_match_ = 0;
  object_id_ = GOOGLE_ULONGLONG(0);
  min_level_ = 0;
  max_level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamAutoMatchReq::~TeamAutoMatchReq() {
  SharedDtor();
}

void TeamAutoMatchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamAutoMatchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAutoMatchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamAutoMatchReq_descriptor_;
}

const TeamAutoMatchReq& TeamAutoMatchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamAutoMatchReq* TeamAutoMatchReq::default_instance_ = NULL;

TeamAutoMatchReq* TeamAutoMatchReq::New() const {
  return new TeamAutoMatchReq;
}

void TeamAutoMatchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    auto_match_ = 0;
    object_id_ = GOOGLE_ULONGLONG(0);
    min_level_ = 0;
    max_level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamAutoMatchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 auto_match = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &auto_match_)));
          set_has_auto_match();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_object_id;
        break;
      }

      // required uint64 object_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_object_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &object_id_)));
          set_has_object_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_min_level;
        break;
      }

      // required int32 min_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_level_)));
          set_has_min_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_level;
        break;
      }

      // required int32 max_level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_level_)));
          set_has_max_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamAutoMatchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 auto_match = 1;
  if (has_auto_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->auto_match(), output);
  }

  // required uint64 object_id = 2;
  if (has_object_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->object_id(), output);
  }

  // required int32 min_level = 3;
  if (has_min_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->min_level(), output);
  }

  // required int32 max_level = 4;
  if (has_max_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamAutoMatchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 auto_match = 1;
  if (has_auto_match()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->auto_match(), target);
  }

  // required uint64 object_id = 2;
  if (has_object_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->object_id(), target);
  }

  // required int32 min_level = 3;
  if (has_min_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->min_level(), target);
  }

  // required int32 max_level = 4;
  if (has_max_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamAutoMatchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 auto_match = 1;
    if (has_auto_match()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->auto_match());
    }

    // required uint64 object_id = 2;
    if (has_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->object_id());
    }

    // required int32 min_level = 3;
    if (has_min_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_level());
    }

    // required int32 max_level = 4;
    if (has_max_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAutoMatchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamAutoMatchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamAutoMatchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamAutoMatchReq::MergeFrom(const TeamAutoMatchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_auto_match()) {
      set_auto_match(from.auto_match());
    }
    if (from.has_object_id()) {
      set_object_id(from.object_id());
    }
    if (from.has_min_level()) {
      set_min_level(from.min_level());
    }
    if (from.has_max_level()) {
      set_max_level(from.max_level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamAutoMatchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAutoMatchReq::CopyFrom(const TeamAutoMatchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAutoMatchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TeamAutoMatchReq::Swap(TeamAutoMatchReq* other) {
  if (other != this) {
    std::swap(auto_match_, other->auto_match_);
    std::swap(object_id_, other->object_id_);
    std::swap(min_level_, other->min_level_);
    std::swap(max_level_, other->max_level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamAutoMatchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamAutoMatchReq_descriptor_;
  metadata.reflection = TeamAutoMatchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamAutoMatchRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

TeamAutoMatchRsp::TeamAutoMatchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamAutoMatchRsp::InitAsDefaultInstance() {
}

TeamAutoMatchRsp::TeamAutoMatchRsp(const TeamAutoMatchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamAutoMatchRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamAutoMatchRsp::~TeamAutoMatchRsp() {
  SharedDtor();
}

void TeamAutoMatchRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamAutoMatchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamAutoMatchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamAutoMatchRsp_descriptor_;
}

const TeamAutoMatchRsp& TeamAutoMatchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamAutoMatchRsp* TeamAutoMatchRsp::default_instance_ = NULL;

TeamAutoMatchRsp* TeamAutoMatchRsp::New() const {
  return new TeamAutoMatchRsp;
}

void TeamAutoMatchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamAutoMatchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamAutoMatchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamAutoMatchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamAutoMatchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamAutoMatchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamAutoMatchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamAutoMatchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamAutoMatchRsp::MergeFrom(const TeamAutoMatchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamAutoMatchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamAutoMatchRsp::CopyFrom(const TeamAutoMatchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamAutoMatchRsp::IsInitialized() const {

  return true;
}

void TeamAutoMatchRsp::Swap(TeamAutoMatchRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamAutoMatchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamAutoMatchRsp_descriptor_;
  metadata.reflection = TeamAutoMatchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamKickMemReq::kKickCidFieldNumber;
#endif  // !_MSC_VER

TeamKickMemReq::TeamKickMemReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamKickMemReq::InitAsDefaultInstance() {
}

TeamKickMemReq::TeamKickMemReq(const TeamKickMemReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamKickMemReq::SharedCtor() {
  _cached_size_ = 0;
  kick_cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamKickMemReq::~TeamKickMemReq() {
  SharedDtor();
}

void TeamKickMemReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamKickMemReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamKickMemReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamKickMemReq_descriptor_;
}

const TeamKickMemReq& TeamKickMemReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamKickMemReq* TeamKickMemReq::default_instance_ = NULL;

TeamKickMemReq* TeamKickMemReq::New() const {
  return new TeamKickMemReq;
}

void TeamKickMemReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    kick_cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamKickMemReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 kick_cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &kick_cid_)));
          set_has_kick_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamKickMemReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 kick_cid = 1;
  if (has_kick_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->kick_cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamKickMemReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 kick_cid = 1;
  if (has_kick_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->kick_cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamKickMemReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 kick_cid = 1;
    if (has_kick_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->kick_cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamKickMemReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamKickMemReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamKickMemReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamKickMemReq::MergeFrom(const TeamKickMemReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kick_cid()) {
      set_kick_cid(from.kick_cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamKickMemReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamKickMemReq::CopyFrom(const TeamKickMemReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamKickMemReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TeamKickMemReq::Swap(TeamKickMemReq* other) {
  if (other != this) {
    std::swap(kick_cid_, other->kick_cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamKickMemReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamKickMemReq_descriptor_;
  metadata.reflection = TeamKickMemReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamKickMemRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

TeamKickMemRsp::TeamKickMemRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamKickMemRsp::InitAsDefaultInstance() {
}

TeamKickMemRsp::TeamKickMemRsp(const TeamKickMemRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamKickMemRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamKickMemRsp::~TeamKickMemRsp() {
  SharedDtor();
}

void TeamKickMemRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamKickMemRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamKickMemRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamKickMemRsp_descriptor_;
}

const TeamKickMemRsp& TeamKickMemRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamKickMemRsp* TeamKickMemRsp::default_instance_ = NULL;

TeamKickMemRsp* TeamKickMemRsp::New() const {
  return new TeamKickMemRsp;
}

void TeamKickMemRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamKickMemRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamKickMemRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamKickMemRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamKickMemRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamKickMemRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamKickMemRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamKickMemRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamKickMemRsp::MergeFrom(const TeamKickMemRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamKickMemRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamKickMemRsp::CopyFrom(const TeamKickMemRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamKickMemRsp::IsInitialized() const {

  return true;
}

void TeamKickMemRsp::Swap(TeamKickMemRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamKickMemRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamKickMemRsp_descriptor_;
  metadata.reflection = TeamKickMemRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamQuitReq::TeamQuitReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamQuitReq::InitAsDefaultInstance() {
}

TeamQuitReq::TeamQuitReq(const TeamQuitReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamQuitReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamQuitReq::~TeamQuitReq() {
  SharedDtor();
}

void TeamQuitReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamQuitReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamQuitReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamQuitReq_descriptor_;
}

const TeamQuitReq& TeamQuitReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamQuitReq* TeamQuitReq::default_instance_ = NULL;

TeamQuitReq* TeamQuitReq::New() const {
  return new TeamQuitReq;
}

void TeamQuitReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamQuitReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamQuitReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamQuitReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamQuitReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamQuitReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamQuitReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamQuitReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamQuitReq::MergeFrom(const TeamQuitReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamQuitReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamQuitReq::CopyFrom(const TeamQuitReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamQuitReq::IsInitialized() const {

  return true;
}

void TeamQuitReq::Swap(TeamQuitReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamQuitReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamQuitReq_descriptor_;
  metadata.reflection = TeamQuitReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamQuitRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

TeamQuitRsp::TeamQuitRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamQuitRsp::InitAsDefaultInstance() {
}

TeamQuitRsp::TeamQuitRsp(const TeamQuitRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamQuitRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamQuitRsp::~TeamQuitRsp() {
  SharedDtor();
}

void TeamQuitRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamQuitRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamQuitRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamQuitRsp_descriptor_;
}

const TeamQuitRsp& TeamQuitRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamQuitRsp* TeamQuitRsp::default_instance_ = NULL;

TeamQuitRsp* TeamQuitRsp::New() const {
  return new TeamQuitRsp;
}

void TeamQuitRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamQuitRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamQuitRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamQuitRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamQuitRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamQuitRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamQuitRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamQuitRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamQuitRsp::MergeFrom(const TeamQuitRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamQuitRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamQuitRsp::CopyFrom(const TeamQuitRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamQuitRsp::IsInitialized() const {

  return true;
}

void TeamQuitRsp::Swap(TeamQuitRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamQuitRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamQuitRsp_descriptor_;
  metadata.reflection = TeamQuitRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamRefuseNotify::kTypeFieldNumber;
const int TeamRefuseNotify::kNameFieldNumber;
#endif  // !_MSC_VER

TeamRefuseNotify::TeamRefuseNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamRefuseNotify::InitAsDefaultInstance() {
}

TeamRefuseNotify::TeamRefuseNotify(const TeamRefuseNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamRefuseNotify::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamRefuseNotify::~TeamRefuseNotify() {
  SharedDtor();
}

void TeamRefuseNotify::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TeamRefuseNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamRefuseNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamRefuseNotify_descriptor_;
}

const TeamRefuseNotify& TeamRefuseNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamRefuseNotify* TeamRefuseNotify::default_instance_ = NULL;

TeamRefuseNotify* TeamRefuseNotify::New() const {
  return new TeamRefuseNotify;
}

void TeamRefuseNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamRefuseNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamRefuseNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamRefuseNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamRefuseNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamRefuseNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamRefuseNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamRefuseNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamRefuseNotify::MergeFrom(const TeamRefuseNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamRefuseNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamRefuseNotify::CopyFrom(const TeamRefuseNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamRefuseNotify::IsInitialized() const {

  return true;
}

void TeamRefuseNotify::Swap(TeamRefuseNotify* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamRefuseNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamRefuseNotify_descriptor_;
  metadata.reflection = TeamRefuseNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

TeamMatchAtonceReq::TeamMatchAtonceReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMatchAtonceReq::InitAsDefaultInstance() {
}

TeamMatchAtonceReq::TeamMatchAtonceReq(const TeamMatchAtonceReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMatchAtonceReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMatchAtonceReq::~TeamMatchAtonceReq() {
  SharedDtor();
}

void TeamMatchAtonceReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMatchAtonceReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMatchAtonceReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMatchAtonceReq_descriptor_;
}

const TeamMatchAtonceReq& TeamMatchAtonceReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamMatchAtonceReq* TeamMatchAtonceReq::default_instance_ = NULL;

TeamMatchAtonceReq* TeamMatchAtonceReq::New() const {
  return new TeamMatchAtonceReq;
}

void TeamMatchAtonceReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMatchAtonceReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void TeamMatchAtonceReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMatchAtonceReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMatchAtonceReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMatchAtonceReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMatchAtonceReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMatchAtonceReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMatchAtonceReq::MergeFrom(const TeamMatchAtonceReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMatchAtonceReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMatchAtonceReq::CopyFrom(const TeamMatchAtonceReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMatchAtonceReq::IsInitialized() const {

  return true;
}

void TeamMatchAtonceReq::Swap(TeamMatchAtonceReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMatchAtonceReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMatchAtonceReq_descriptor_;
  metadata.reflection = TeamMatchAtonceReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamMatchAtonceRsp::kRetcodeFieldNumber;
#endif  // !_MSC_VER

TeamMatchAtonceRsp::TeamMatchAtonceRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamMatchAtonceRsp::InitAsDefaultInstance() {
}

TeamMatchAtonceRsp::TeamMatchAtonceRsp(const TeamMatchAtonceRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamMatchAtonceRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamMatchAtonceRsp::~TeamMatchAtonceRsp() {
  SharedDtor();
}

void TeamMatchAtonceRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TeamMatchAtonceRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamMatchAtonceRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamMatchAtonceRsp_descriptor_;
}

const TeamMatchAtonceRsp& TeamMatchAtonceRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

TeamMatchAtonceRsp* TeamMatchAtonceRsp::default_instance_ = NULL;

TeamMatchAtonceRsp* TeamMatchAtonceRsp::New() const {
  return new TeamMatchAtonceRsp;
}

void TeamMatchAtonceRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamMatchAtonceRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamMatchAtonceRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamMatchAtonceRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamMatchAtonceRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamMatchAtonceRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamMatchAtonceRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamMatchAtonceRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamMatchAtonceRsp::MergeFrom(const TeamMatchAtonceRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamMatchAtonceRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamMatchAtonceRsp::CopyFrom(const TeamMatchAtonceRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamMatchAtonceRsp::IsInitialized() const {

  return true;
}

void TeamMatchAtonceRsp::Swap(TeamMatchAtonceRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamMatchAtonceRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamMatchAtonceRsp_descriptor_;
  metadata.reflection = TeamMatchAtonceRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCCreteTeam::kTeamidFieldNumber;
const int SCCreteTeam::kInfoFieldNumber;
#endif  // !_MSC_VER

SCCreteTeam::SCCreteTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCCreteTeam::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::CenterTeamMemProto*>(&::proto_ff::CenterTeamMemProto::default_instance());
}

SCCreteTeam::SCCreteTeam(const SCCreteTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCCreteTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCCreteTeam::~SCCreteTeam() {
  SharedDtor();
}

void SCCreteTeam::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SCCreteTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCCreteTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCCreteTeam_descriptor_;
}

const SCCreteTeam& SCCreteTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

SCCreteTeam* SCCreteTeam::default_instance_ = NULL;

SCCreteTeam* SCCreteTeam::New() const {
  return new SCCreteTeam;
}

void SCCreteTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::CenterTeamMemProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCCreteTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.CenterTeamMemProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCCreteTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional .proto_ff.CenterTeamMemProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCCreteTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional .proto_ff.CenterTeamMemProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCCreteTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional .proto_ff.CenterTeamMemProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCCreteTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCCreteTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCCreteTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCCreteTeam::MergeFrom(const SCCreteTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::CenterTeamMemProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCCreteTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCCreteTeam::CopyFrom(const SCCreteTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCCreteTeam::IsInitialized() const {

  return true;
}

void SCCreteTeam::Swap(SCCreteTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCCreteTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCCreteTeam_descriptor_;
  metadata.reflection = SCCreteTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCJoinTeam::kTeamidFieldNumber;
const int SCJoinTeam::kInfoFieldNumber;
#endif  // !_MSC_VER

SCJoinTeam::SCJoinTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCJoinTeam::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::CenterTeamMemProto*>(&::proto_ff::CenterTeamMemProto::default_instance());
}

SCJoinTeam::SCJoinTeam(const SCJoinTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCJoinTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCJoinTeam::~SCJoinTeam() {
  SharedDtor();
}

void SCJoinTeam::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SCJoinTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCJoinTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCJoinTeam_descriptor_;
}

const SCJoinTeam& SCJoinTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

SCJoinTeam* SCJoinTeam::default_instance_ = NULL;

SCJoinTeam* SCJoinTeam::New() const {
  return new SCJoinTeam;
}

void SCJoinTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::CenterTeamMemProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.CenterTeamMemProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional .proto_ff.CenterTeamMemProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCJoinTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional .proto_ff.CenterTeamMemProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCJoinTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional .proto_ff.CenterTeamMemProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCJoinTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCJoinTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCJoinTeam::MergeFrom(const SCJoinTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::CenterTeamMemProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCJoinTeam::CopyFrom(const SCJoinTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCJoinTeam::IsInitialized() const {

  return true;
}

void SCJoinTeam::Swap(SCJoinTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCJoinTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCJoinTeam_descriptor_;
  metadata.reflection = SCJoinTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCQuitTeam::kCidFieldNumber;
const int SCQuitTeam::kTeamidFieldNumber;
#endif  // !_MSC_VER

SCQuitTeam::SCQuitTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCQuitTeam::InitAsDefaultInstance() {
}

SCQuitTeam::SCQuitTeam(const SCQuitTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCQuitTeam::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCQuitTeam::~SCQuitTeam() {
  SharedDtor();
}

void SCQuitTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCQuitTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCQuitTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCQuitTeam_descriptor_;
}

const SCQuitTeam& SCQuitTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

SCQuitTeam* SCQuitTeam::default_instance_ = NULL;

SCQuitTeam* SCQuitTeam::New() const {
  return new SCQuitTeam;
}

void SCQuitTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCQuitTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCQuitTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCQuitTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCQuitTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCQuitTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCQuitTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCQuitTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCQuitTeam::MergeFrom(const SCQuitTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCQuitTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCQuitTeam::CopyFrom(const SCQuitTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCQuitTeam::IsInitialized() const {

  return true;
}

void SCQuitTeam::Swap(SCQuitTeam* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCQuitTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCQuitTeam_descriptor_;
  metadata.reflection = SCQuitTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCUpdateTeam::kTeamidFieldNumber;
const int SCUpdateTeam::kInfoFieldNumber;
#endif  // !_MSC_VER

SCUpdateTeam::SCUpdateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCUpdateTeam::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::CenterMultiTeamMemProto*>(&::proto_ff::CenterMultiTeamMemProto::default_instance());
}

SCUpdateTeam::SCUpdateTeam(const SCUpdateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCUpdateTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCUpdateTeam::~SCUpdateTeam() {
  SharedDtor();
}

void SCUpdateTeam::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SCUpdateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCUpdateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCUpdateTeam_descriptor_;
}

const SCUpdateTeam& SCUpdateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

SCUpdateTeam* SCUpdateTeam::default_instance_ = NULL;

SCUpdateTeam* SCUpdateTeam::New() const {
  return new SCUpdateTeam;
}

void SCUpdateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::CenterMultiTeamMemProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCUpdateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.CenterMultiTeamMemProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCUpdateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional .proto_ff.CenterMultiTeamMemProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCUpdateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional .proto_ff.CenterMultiTeamMemProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCUpdateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional .proto_ff.CenterMultiTeamMemProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCUpdateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCUpdateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCUpdateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCUpdateTeam::MergeFrom(const SCUpdateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::CenterMultiTeamMemProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCUpdateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCUpdateTeam::CopyFrom(const SCUpdateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCUpdateTeam::IsInitialized() const {

  return true;
}

void SCUpdateTeam::Swap(SCUpdateTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCUpdateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCUpdateTeam_descriptor_;
  metadata.reflection = SCUpdateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCTeamLeader::kTeamidFieldNumber;
const int SCTeamLeader::kLeaderFieldNumber;
#endif  // !_MSC_VER

SCTeamLeader::SCTeamLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCTeamLeader::InitAsDefaultInstance() {
}

SCTeamLeader::SCTeamLeader(const SCTeamLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCTeamLeader::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  leader_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCTeamLeader::~SCTeamLeader() {
  SharedDtor();
}

void SCTeamLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCTeamLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCTeamLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCTeamLeader_descriptor_;
}

const SCTeamLeader& SCTeamLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

SCTeamLeader* SCTeamLeader::default_instance_ = NULL;

SCTeamLeader* SCTeamLeader::New() const {
  return new SCTeamLeader;
}

void SCTeamLeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    leader_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCTeamLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leader;
        break;
      }

      // optional uint64 leader = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCTeamLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint64 leader = 2;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leader(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCTeamLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint64 leader = 2;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leader(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCTeamLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint64 leader = 2;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCTeamLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCTeamLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCTeamLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCTeamLeader::MergeFrom(const SCTeamLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCTeamLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTeamLeader::CopyFrom(const SCTeamLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTeamLeader::IsInitialized() const {

  return true;
}

void SCTeamLeader::Swap(SCTeamLeader* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(leader_, other->leader_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCTeamLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCTeamLeader_descriptor_;
  metadata.reflection = SCTeamLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCTeamDismiss::kTeamidFieldNumber;
#endif  // !_MSC_VER

SCTeamDismiss::SCTeamDismiss()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCTeamDismiss::InitAsDefaultInstance() {
}

SCTeamDismiss::SCTeamDismiss(const SCTeamDismiss& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCTeamDismiss::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCTeamDismiss::~SCTeamDismiss() {
  SharedDtor();
}

void SCTeamDismiss::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCTeamDismiss::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCTeamDismiss::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCTeamDismiss_descriptor_;
}

const SCTeamDismiss& SCTeamDismiss::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

SCTeamDismiss* SCTeamDismiss::default_instance_ = NULL;

SCTeamDismiss* SCTeamDismiss::New() const {
  return new SCTeamDismiss;
}

void SCTeamDismiss::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCTeamDismiss::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCTeamDismiss::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCTeamDismiss::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCTeamDismiss::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCTeamDismiss::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCTeamDismiss* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCTeamDismiss*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCTeamDismiss::MergeFrom(const SCTeamDismiss& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCTeamDismiss::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCTeamDismiss::CopyFrom(const SCTeamDismiss& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCTeamDismiss::IsInitialized() const {

  return true;
}

void SCTeamDismiss::Swap(SCTeamDismiss* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCTeamDismiss::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCTeamDismiss_descriptor_;
  metadata.reflection = SCTeamDismiss_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLCharTeamUpdate::kCidFieldNumber;
const int CLCharTeamUpdate::kTeamidFieldNumber;
const int CLCharTeamUpdate::kLeaderFieldNumber;
const int CLCharTeamUpdate::kMemCntFieldNumber;
#endif  // !_MSC_VER

CLCharTeamUpdate::CLCharTeamUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLCharTeamUpdate::InitAsDefaultInstance() {
}

CLCharTeamUpdate::CLCharTeamUpdate(const CLCharTeamUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLCharTeamUpdate::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  teamid_ = 0u;
  leader_ = GOOGLE_ULONGLONG(0);
  mem_cnt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLCharTeamUpdate::~CLCharTeamUpdate() {
  SharedDtor();
}

void CLCharTeamUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLCharTeamUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLCharTeamUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLCharTeamUpdate_descriptor_;
}

const CLCharTeamUpdate& CLCharTeamUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

CLCharTeamUpdate* CLCharTeamUpdate::default_instance_ = NULL;

CLCharTeamUpdate* CLCharTeamUpdate::New() const {
  return new CLCharTeamUpdate;
}

void CLCharTeamUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    teamid_ = 0u;
    leader_ = GOOGLE_ULONGLONG(0);
    mem_cnt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLCharTeamUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader;
        break;
      }

      // optional uint64 leader = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mem_cnt;
        break;
      }

      // optional int32 mem_cnt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_cnt_)));
          set_has_mem_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLCharTeamUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 teamid = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  // optional uint64 leader = 3;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leader(), output);
  }

  // optional int32 mem_cnt = 4;
  if (has_mem_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mem_cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLCharTeamUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 teamid = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  // optional uint64 leader = 3;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leader(), target);
  }

  // optional int32 mem_cnt = 4;
  if (has_mem_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mem_cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLCharTeamUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 teamid = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint64 leader = 3;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader());
    }

    // optional int32 mem_cnt = 4;
    if (has_mem_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_cnt());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLCharTeamUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLCharTeamUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLCharTeamUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLCharTeamUpdate::MergeFrom(const CLCharTeamUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_mem_cnt()) {
      set_mem_cnt(from.mem_cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLCharTeamUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLCharTeamUpdate::CopyFrom(const CLCharTeamUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLCharTeamUpdate::IsInitialized() const {

  return true;
}

void CLCharTeamUpdate::Swap(CLCharTeamUpdate* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(teamid_, other->teamid_);
    std::swap(leader_, other->leader_);
    std::swap(mem_cnt_, other->mem_cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLCharTeamUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLCharTeamUpdate_descriptor_;
  metadata.reflection = CLCharTeamUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLUpdateSimpleTeam::kTeamidFieldNumber;
const int CLUpdateSimpleTeam::kLeadercidFieldNumber;
const int CLUpdateSimpleTeam::kInfoFieldNumber;
#endif  // !_MSC_VER

CLUpdateSimpleTeam::CLUpdateSimpleTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLUpdateSimpleTeam::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::CenterMultiTeamMemProto*>(&::proto_ff::CenterMultiTeamMemProto::default_instance());
}

CLUpdateSimpleTeam::CLUpdateSimpleTeam(const CLUpdateSimpleTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLUpdateSimpleTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  leadercid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLUpdateSimpleTeam::~CLUpdateSimpleTeam() {
  SharedDtor();
}

void CLUpdateSimpleTeam::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void CLUpdateSimpleTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLUpdateSimpleTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLUpdateSimpleTeam_descriptor_;
}

const CLUpdateSimpleTeam& CLUpdateSimpleTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

CLUpdateSimpleTeam* CLUpdateSimpleTeam::default_instance_ = NULL;

CLUpdateSimpleTeam* CLUpdateSimpleTeam::New() const {
  return new CLUpdateSimpleTeam;
}

void CLUpdateSimpleTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    leadercid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::CenterMultiTeamMemProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLUpdateSimpleTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_leadercid;
        break;
      }

      // optional uint64 leadercid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leadercid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leadercid_)));
          set_has_leadercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .proto_ff.CenterMultiTeamMemProto info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLUpdateSimpleTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint64 leadercid = 2;
  if (has_leadercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->leadercid(), output);
  }

  // optional .proto_ff.CenterMultiTeamMemProto info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLUpdateSimpleTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint64 leadercid = 2;
  if (has_leadercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->leadercid(), target);
  }

  // optional .proto_ff.CenterMultiTeamMemProto info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLUpdateSimpleTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint64 leadercid = 2;
    if (has_leadercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leadercid());
    }

    // optional .proto_ff.CenterMultiTeamMemProto info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLUpdateSimpleTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLUpdateSimpleTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLUpdateSimpleTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLUpdateSimpleTeam::MergeFrom(const CLUpdateSimpleTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_leadercid()) {
      set_leadercid(from.leadercid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::CenterMultiTeamMemProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLUpdateSimpleTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLUpdateSimpleTeam::CopyFrom(const CLUpdateSimpleTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLUpdateSimpleTeam::IsInitialized() const {

  return true;
}

void CLUpdateSimpleTeam::Swap(CLUpdateSimpleTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(leadercid_, other->leadercid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLUpdateSimpleTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLUpdateSimpleTeam_descriptor_;
  metadata.reflection = CLUpdateSimpleTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLDismissTeam::kTeamidFieldNumber;
#endif  // !_MSC_VER

CLDismissTeam::CLDismissTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLDismissTeam::InitAsDefaultInstance() {
}

CLDismissTeam::CLDismissTeam(const CLDismissTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLDismissTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLDismissTeam::~CLDismissTeam() {
  SharedDtor();
}

void CLDismissTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLDismissTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLDismissTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLDismissTeam_descriptor_;
}

const CLDismissTeam& CLDismissTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

CLDismissTeam* CLDismissTeam::default_instance_ = NULL;

CLDismissTeam* CLDismissTeam::New() const {
  return new CLDismissTeam;
}

void CLDismissTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLDismissTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLDismissTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLDismissTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLDismissTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLDismissTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLDismissTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLDismissTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLDismissTeam::MergeFrom(const CLDismissTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLDismissTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLDismissTeam::CopyFrom(const CLDismissTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLDismissTeam::IsInitialized() const {

  return true;
}

void CLDismissTeam::Swap(CLDismissTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLDismissTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLDismissTeam_descriptor_;
  metadata.reflection = CLDismissTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CLCharTeamClonessUpdate::kCidFieldNumber;
const int CLCharTeamClonessUpdate::kClonessLevFieldNumber;
#endif  // !_MSC_VER

CLCharTeamClonessUpdate::CLCharTeamClonessUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CLCharTeamClonessUpdate::InitAsDefaultInstance() {
}

CLCharTeamClonessUpdate::CLCharTeamClonessUpdate(const CLCharTeamClonessUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CLCharTeamClonessUpdate::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  cloness_lev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CLCharTeamClonessUpdate::~CLCharTeamClonessUpdate() {
  SharedDtor();
}

void CLCharTeamClonessUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CLCharTeamClonessUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CLCharTeamClonessUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CLCharTeamClonessUpdate_descriptor_;
}

const CLCharTeamClonessUpdate& CLCharTeamClonessUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

CLCharTeamClonessUpdate* CLCharTeamClonessUpdate::default_instance_ = NULL;

CLCharTeamClonessUpdate* CLCharTeamClonessUpdate::New() const {
  return new CLCharTeamClonessUpdate;
}

void CLCharTeamClonessUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    cloness_lev_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CLCharTeamClonessUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cloness_lev;
        break;
      }

      // optional int32 cloness_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloness_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloness_lev_)));
          set_has_cloness_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CLCharTeamClonessUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 cloness_lev = 2;
  if (has_cloness_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cloness_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CLCharTeamClonessUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 cloness_lev = 2;
  if (has_cloness_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cloness_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CLCharTeamClonessUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 cloness_lev = 2;
    if (has_cloness_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloness_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CLCharTeamClonessUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CLCharTeamClonessUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CLCharTeamClonessUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CLCharTeamClonessUpdate::MergeFrom(const CLCharTeamClonessUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_cloness_lev()) {
      set_cloness_lev(from.cloness_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CLCharTeamClonessUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CLCharTeamClonessUpdate::CopyFrom(const CLCharTeamClonessUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CLCharTeamClonessUpdate::IsInitialized() const {

  return true;
}

void CLCharTeamClonessUpdate::Swap(CLCharTeamClonessUpdate* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(cloness_lev_, other->cloness_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CLCharTeamClonessUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CLCharTeamClonessUpdate_descriptor_;
  metadata.reflection = CLCharTeamClonessUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LSTeamRobotHpSync::kTeamidFieldNumber;
const int LSTeamRobotHpSync::kRobotcidFieldNumber;
const int LSTeamRobotHpSync::kCurhpFieldNumber;
const int LSTeamRobotHpSync::kMaxhpFieldNumber;
#endif  // !_MSC_VER

LSTeamRobotHpSync::LSTeamRobotHpSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LSTeamRobotHpSync::InitAsDefaultInstance() {
}

LSTeamRobotHpSync::LSTeamRobotHpSync(const LSTeamRobotHpSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LSTeamRobotHpSync::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  robotcid_ = GOOGLE_ULONGLONG(0);
  curhp_ = GOOGLE_ULONGLONG(0);
  maxhp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LSTeamRobotHpSync::~LSTeamRobotHpSync() {
  SharedDtor();
}

void LSTeamRobotHpSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LSTeamRobotHpSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LSTeamRobotHpSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LSTeamRobotHpSync_descriptor_;
}

const LSTeamRobotHpSync& LSTeamRobotHpSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

LSTeamRobotHpSync* LSTeamRobotHpSync::default_instance_ = NULL;

LSTeamRobotHpSync* LSTeamRobotHpSync::New() const {
  return new LSTeamRobotHpSync;
}

void LSTeamRobotHpSync::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    robotcid_ = GOOGLE_ULONGLONG(0);
    curhp_ = GOOGLE_ULONGLONG(0);
    maxhp_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LSTeamRobotHpSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_robotcid;
        break;
      }

      // optional uint64 robotcid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &robotcid_)));
          set_has_robotcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curhp;
        break;
      }

      // optional uint64 curhp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxhp;
        break;
      }

      // optional uint64 maxhp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LSTeamRobotHpSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint64 robotcid = 2;
  if (has_robotcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->robotcid(), output);
  }

  // optional uint64 curhp = 3;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->curhp(), output);
  }

  // optional uint64 maxhp = 4;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->maxhp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LSTeamRobotHpSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint64 robotcid = 2;
  if (has_robotcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->robotcid(), target);
  }

  // optional uint64 curhp = 3;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->curhp(), target);
  }

  // optional uint64 maxhp = 4;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->maxhp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LSTeamRobotHpSync::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint64 robotcid = 2;
    if (has_robotcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->robotcid());
    }

    // optional uint64 curhp = 3;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->curhp());
    }

    // optional uint64 maxhp = 4;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->maxhp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LSTeamRobotHpSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LSTeamRobotHpSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LSTeamRobotHpSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LSTeamRobotHpSync::MergeFrom(const LSTeamRobotHpSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_robotcid()) {
      set_robotcid(from.robotcid());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LSTeamRobotHpSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LSTeamRobotHpSync::CopyFrom(const LSTeamRobotHpSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSTeamRobotHpSync::IsInitialized() const {

  return true;
}

void LSTeamRobotHpSync::Swap(LSTeamRobotHpSync* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(robotcid_, other->robotcid_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LSTeamRobotHpSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LSTeamRobotHpSync_descriptor_;
  metadata.reflection = LSTeamRobotHpSync_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupInviteStateProto::kCidFieldNumber;
const int DupInviteStateProto::kStateFieldNumber;
#endif  // !_MSC_VER

DupInviteStateProto::DupInviteStateProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupInviteStateProto::InitAsDefaultInstance() {
}

DupInviteStateProto::DupInviteStateProto(const DupInviteStateProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupInviteStateProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupInviteStateProto::~DupInviteStateProto() {
  SharedDtor();
}

void DupInviteStateProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupInviteStateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupInviteStateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupInviteStateProto_descriptor_;
}

const DupInviteStateProto& DupInviteStateProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

DupInviteStateProto* DupInviteStateProto::default_instance_ = NULL;

DupInviteStateProto* DupInviteStateProto::New() const {
  return new DupInviteStateProto;
}

void DupInviteStateProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupInviteStateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupInviteStateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupInviteStateProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupInviteStateProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupInviteStateProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupInviteStateProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupInviteStateProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupInviteStateProto::MergeFrom(const DupInviteStateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupInviteStateProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupInviteStateProto::CopyFrom(const DupInviteStateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupInviteStateProto::IsInitialized() const {

  return true;
}

void DupInviteStateProto::Swap(DupInviteStateProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupInviteStateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupInviteStateProto_descriptor_;
  metadata.reflection = DupInviteStateProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupAllInviteStateProto::kAllStateFieldNumber;
#endif  // !_MSC_VER

DupAllInviteStateProto::DupAllInviteStateProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupAllInviteStateProto::InitAsDefaultInstance() {
}

DupAllInviteStateProto::DupAllInviteStateProto(const DupAllInviteStateProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupAllInviteStateProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupAllInviteStateProto::~DupAllInviteStateProto() {
  SharedDtor();
}

void DupAllInviteStateProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupAllInviteStateProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupAllInviteStateProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupAllInviteStateProto_descriptor_;
}

const DupAllInviteStateProto& DupAllInviteStateProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

DupAllInviteStateProto* DupAllInviteStateProto::default_instance_ = NULL;

DupAllInviteStateProto* DupAllInviteStateProto::New() const {
  return new DupAllInviteStateProto;
}

void DupAllInviteStateProto::Clear() {
  all_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupAllInviteStateProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DupInviteStateProto all_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_all_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_all_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_all_state;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupAllInviteStateProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DupInviteStateProto all_state = 1;
  for (int i = 0; i < this->all_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->all_state(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupAllInviteStateProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DupInviteStateProto all_state = 1;
  for (int i = 0; i < this->all_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->all_state(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupAllInviteStateProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DupInviteStateProto all_state = 1;
  total_size += 1 * this->all_state_size();
  for (int i = 0; i < this->all_state_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->all_state(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupAllInviteStateProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupAllInviteStateProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupAllInviteStateProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupAllInviteStateProto::MergeFrom(const DupAllInviteStateProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  all_state_.MergeFrom(from.all_state_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupAllInviteStateProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupAllInviteStateProto::CopyFrom(const DupAllInviteStateProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupAllInviteStateProto::IsInitialized() const {

  return true;
}

void DupAllInviteStateProto::Swap(DupAllInviteStateProto* other) {
  if (other != this) {
    all_state_.Swap(&other->all_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupAllInviteStateProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupAllInviteStateProto_descriptor_;
  metadata.reflection = DupAllInviteStateProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Duplicate_CancelStateNotify::kRetcodeFieldNumber;
#endif  // !_MSC_VER

Duplicate_CancelStateNotify::Duplicate_CancelStateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Duplicate_CancelStateNotify::InitAsDefaultInstance() {
}

Duplicate_CancelStateNotify::Duplicate_CancelStateNotify(const Duplicate_CancelStateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Duplicate_CancelStateNotify::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Duplicate_CancelStateNotify::~Duplicate_CancelStateNotify() {
  SharedDtor();
}

void Duplicate_CancelStateNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Duplicate_CancelStateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Duplicate_CancelStateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Duplicate_CancelStateNotify_descriptor_;
}

const Duplicate_CancelStateNotify& Duplicate_CancelStateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

Duplicate_CancelStateNotify* Duplicate_CancelStateNotify::default_instance_ = NULL;

Duplicate_CancelStateNotify* Duplicate_CancelStateNotify::New() const {
  return new Duplicate_CancelStateNotify;
}

void Duplicate_CancelStateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Duplicate_CancelStateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Duplicate_CancelStateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Duplicate_CancelStateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Duplicate_CancelStateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Duplicate_CancelStateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Duplicate_CancelStateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Duplicate_CancelStateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Duplicate_CancelStateNotify::MergeFrom(const Duplicate_CancelStateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Duplicate_CancelStateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Duplicate_CancelStateNotify::CopyFrom(const Duplicate_CancelStateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Duplicate_CancelStateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Duplicate_CancelStateNotify::Swap(Duplicate_CancelStateNotify* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Duplicate_CancelStateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Duplicate_CancelStateNotify_descriptor_;
  metadata.reflection = Duplicate_CancelStateNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTeamRobotProto::kCharcidFieldNumber;
const int DupTeamRobotProto::kCoefFieldNumber;
const int DupTeamRobotProto::kZidFieldNumber;
const int DupTeamRobotProto::kRobotcidFieldNumber;
const int DupTeamRobotProto::kNameFieldNumber;
const int DupTeamRobotProto::kLevelFieldNumber;
const int DupTeamRobotProto::kProfFieldNumber;
const int DupTeamRobotProto::kFacadeFieldNumber;
const int DupTeamRobotProto::kVipLevelFieldNumber;
const int DupTeamRobotProto::kFightFieldNumber;
#endif  // !_MSC_VER

DupTeamRobotProto::DupTeamRobotProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTeamRobotProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

DupTeamRobotProto::DupTeamRobotProto(const DupTeamRobotProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTeamRobotProto::SharedCtor() {
  _cached_size_ = 0;
  charcid_ = GOOGLE_ULONGLONG(0);
  coef_ = 0u;
  zid_ = 0u;
  robotcid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  prof_ = 0;
  facade_ = NULL;
  vip_level_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTeamRobotProto::~DupTeamRobotProto() {
  SharedDtor();
}

void DupTeamRobotProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void DupTeamRobotProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTeamRobotProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTeamRobotProto_descriptor_;
}

const DupTeamRobotProto& DupTeamRobotProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

DupTeamRobotProto* DupTeamRobotProto::default_instance_ = NULL;

DupTeamRobotProto* DupTeamRobotProto::New() const {
  return new DupTeamRobotProto;
}

void DupTeamRobotProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charcid_ = GOOGLE_ULONGLONG(0);
    coef_ = 0u;
    zid_ = 0u;
    robotcid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    prof_ = 0;
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vip_level_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTeamRobotProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charcid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charcid_)));
          set_has_charcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coef;
        break;
      }

      // optional uint32 coef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &coef_)));
          set_has_coef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_robotcid;
        break;
      }

      // optional uint64 robotcid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robotcid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &robotcid_)));
          set_has_robotcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional uint32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prof;
        break;
      }

      // optional int32 prof = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip_level;
        break;
      }

      // optional int32 vip_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTeamRobotProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charcid = 1;
  if (has_charcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charcid(), output);
  }

  // optional uint32 coef = 2;
  if (has_coef()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->coef(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional uint64 robotcid = 4;
  if (has_robotcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->robotcid(), output);
  }

  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional int32 prof = 7;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->prof(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->facade(), output);
  }

  // optional int32 vip_level = 9;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip_level(), output);
  }

  // optional uint64 fight = 10;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTeamRobotProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charcid = 1;
  if (has_charcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charcid(), target);
  }

  // optional uint32 coef = 2;
  if (has_coef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->coef(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional uint64 robotcid = 4;
  if (has_robotcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->robotcid(), target);
  }

  // optional bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // optional uint32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional int32 prof = 7;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->prof(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->facade(), target);
  }

  // optional int32 vip_level = 9;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vip_level(), target);
  }

  // optional uint64 fight = 10;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTeamRobotProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charcid = 1;
    if (has_charcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charcid());
    }

    // optional uint32 coef = 2;
    if (has_coef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->coef());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 robotcid = 4;
    if (has_robotcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->robotcid());
    }

    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional int32 prof = 7;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional .proto_ff.RoleFacadeProto facade = 8;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vip_level = 9;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_level());
    }

    // optional uint64 fight = 10;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTeamRobotProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTeamRobotProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTeamRobotProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTeamRobotProto::MergeFrom(const DupTeamRobotProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charcid()) {
      set_charcid(from.charcid());
    }
    if (from.has_coef()) {
      set_coef(from.coef());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_robotcid()) {
      set_robotcid(from.robotcid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTeamRobotProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTeamRobotProto::CopyFrom(const DupTeamRobotProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTeamRobotProto::IsInitialized() const {

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void DupTeamRobotProto::Swap(DupTeamRobotProto* other) {
  if (other != this) {
    std::swap(charcid_, other->charcid_);
    std::swap(coef_, other->coef_);
    std::swap(zid_, other->zid_);
    std::swap(robotcid_, other->robotcid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(prof_, other->prof_);
    std::swap(facade_, other->facade_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTeamRobotProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTeamRobotProto_descriptor_;
  metadata.reflection = DupTeamRobotProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupMultTeamRobotProto::kInfoFieldNumber;
#endif  // !_MSC_VER

DupMultTeamRobotProto::DupMultTeamRobotProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupMultTeamRobotProto::InitAsDefaultInstance() {
}

DupMultTeamRobotProto::DupMultTeamRobotProto(const DupMultTeamRobotProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupMultTeamRobotProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupMultTeamRobotProto::~DupMultTeamRobotProto() {
  SharedDtor();
}

void DupMultTeamRobotProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupMultTeamRobotProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupMultTeamRobotProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupMultTeamRobotProto_descriptor_;
}

const DupMultTeamRobotProto& DupMultTeamRobotProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CTeam_2eproto();
  return *default_instance_;
}

DupMultTeamRobotProto* DupMultTeamRobotProto::default_instance_ = NULL;

DupMultTeamRobotProto* DupMultTeamRobotProto::New() const {
  return new DupMultTeamRobotProto;
}

void DupMultTeamRobotProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupMultTeamRobotProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DupTeamRobotProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupMultTeamRobotProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DupTeamRobotProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupMultTeamRobotProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DupTeamRobotProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupMultTeamRobotProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DupTeamRobotProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupMultTeamRobotProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupMultTeamRobotProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupMultTeamRobotProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupMultTeamRobotProto::MergeFrom(const DupMultTeamRobotProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupMultTeamRobotProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupMultTeamRobotProto::CopyFrom(const DupMultTeamRobotProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupMultTeamRobotProto::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void DupMultTeamRobotProto::Swap(DupMultTeamRobotProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupMultTeamRobotProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupMultTeamRobotProto_descriptor_;
  metadata.reflection = DupMultTeamRobotProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
