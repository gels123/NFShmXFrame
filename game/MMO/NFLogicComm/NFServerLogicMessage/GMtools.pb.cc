// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GMtools.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GMtools.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* GMtoolsGMTools_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMtoolsGMTools_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GMtoolsGMTools_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GMtoolsGMTools_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMtoolsrecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMtoolsrecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GMtoolsrecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GMtoolsrecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMtoolsgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMtoolsgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GMtoolsgift_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GMtoolsgift_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMtoolsunlimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMtoolsunlimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GMtoolsunlimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GMtoolsunlimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMtoolsupperLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMtoolsupperLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GMtoolsupperLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GMtoolsupperLimit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GMtools_2eproto() {
  protobuf_AddDesc_GMtools_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GMtools.proto");
  GOOGLE_CHECK(file != NULL);
  GMtoolsGMTools_descriptor_ = file->message_type(0);
  static const int GMtoolsGMTools_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsGMTools, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsGMTools, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsGMTools, typeprarm_),
  };
  GMtoolsGMTools_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMtoolsGMTools_descriptor_,
      GMtoolsGMTools::default_instance_,
      GMtoolsGMTools_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsGMTools, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsGMTools, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMtoolsGMTools));
  Sheet_GMtoolsGMTools_descriptor_ = file->message_type(1);
  static const int Sheet_GMtoolsGMTools_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsGMTools, gmtoolsgmtools_list_),
  };
  Sheet_GMtoolsGMTools_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GMtoolsGMTools_descriptor_,
      Sheet_GMtoolsGMTools::default_instance_,
      Sheet_GMtoolsGMTools_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsGMTools, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsGMTools, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GMtoolsGMTools));
  GMtoolsrecharge_descriptor_ = file->message_type(2);
  static const int GMtoolsrecharge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsrecharge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsrecharge, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsrecharge, rechaarge_),
  };
  GMtoolsrecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMtoolsrecharge_descriptor_,
      GMtoolsrecharge::default_instance_,
      GMtoolsrecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsrecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsrecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMtoolsrecharge));
  Sheet_GMtoolsrecharge_descriptor_ = file->message_type(3);
  static const int Sheet_GMtoolsrecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsrecharge, gmtoolsrecharge_list_),
  };
  Sheet_GMtoolsrecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GMtoolsrecharge_descriptor_,
      Sheet_GMtoolsrecharge::default_instance_,
      Sheet_GMtoolsrecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsrecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsrecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GMtoolsrecharge));
  GMtoolsgift_descriptor_ = file->message_type(4);
  static const int GMtoolsgift_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsgift, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsgift, upperlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsgift, condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsgift, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsgift, daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsgift, boxid_),
  };
  GMtoolsgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMtoolsgift_descriptor_,
      GMtoolsgift::default_instance_,
      GMtoolsgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMtoolsgift));
  Sheet_GMtoolsgift_descriptor_ = file->message_type(5);
  static const int Sheet_GMtoolsgift_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsgift, gmtoolsgift_list_),
  };
  Sheet_GMtoolsgift_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GMtoolsgift_descriptor_,
      Sheet_GMtoolsgift::default_instance_,
      Sheet_GMtoolsgift_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsgift, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsgift, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GMtoolsgift));
  GMtoolsunlimit_descriptor_ = file->message_type(6);
  static const int GMtoolsunlimit_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsunlimit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsunlimit, upperlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsunlimit, cost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsunlimit, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsunlimit, dailynum_),
  };
  GMtoolsunlimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMtoolsunlimit_descriptor_,
      GMtoolsunlimit::default_instance_,
      GMtoolsunlimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsunlimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsunlimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMtoolsunlimit));
  Sheet_GMtoolsunlimit_descriptor_ = file->message_type(7);
  static const int Sheet_GMtoolsunlimit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsunlimit, gmtoolsunlimit_list_),
  };
  Sheet_GMtoolsunlimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GMtoolsunlimit_descriptor_,
      Sheet_GMtoolsunlimit::default_instance_,
      Sheet_GMtoolsunlimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsunlimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsunlimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GMtoolsunlimit));
  GMtoolsupperLimit_descriptor_ = file->message_type(8);
  static const int GMtoolsupperLimit_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsupperLimit, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsupperLimit, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsupperLimit, param_),
  };
  GMtoolsupperLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMtoolsupperLimit_descriptor_,
      GMtoolsupperLimit::default_instance_,
      GMtoolsupperLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsupperLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMtoolsupperLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMtoolsupperLimit));
  Sheet_GMtoolsupperLimit_descriptor_ = file->message_type(9);
  static const int Sheet_GMtoolsupperLimit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsupperLimit, gmtoolsupperlimit_list_),
  };
  Sheet_GMtoolsupperLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GMtoolsupperLimit_descriptor_,
      Sheet_GMtoolsupperLimit::default_instance_,
      Sheet_GMtoolsupperLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsupperLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GMtoolsupperLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GMtoolsupperLimit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GMtools_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMtoolsGMTools_descriptor_, &GMtoolsGMTools::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GMtoolsGMTools_descriptor_, &Sheet_GMtoolsGMTools::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMtoolsrecharge_descriptor_, &GMtoolsrecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GMtoolsrecharge_descriptor_, &Sheet_GMtoolsrecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMtoolsgift_descriptor_, &GMtoolsgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GMtoolsgift_descriptor_, &Sheet_GMtoolsgift::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMtoolsunlimit_descriptor_, &GMtoolsunlimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GMtoolsunlimit_descriptor_, &Sheet_GMtoolsunlimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMtoolsupperLimit_descriptor_, &GMtoolsupperLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GMtoolsupperLimit_descriptor_, &Sheet_GMtoolsupperLimit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GMtools_2eproto() {
  delete GMtoolsGMTools::default_instance_;
  delete GMtoolsGMTools_reflection_;
  delete Sheet_GMtoolsGMTools::default_instance_;
  delete Sheet_GMtoolsGMTools_reflection_;
  delete GMtoolsrecharge::default_instance_;
  delete GMtoolsrecharge_reflection_;
  delete Sheet_GMtoolsrecharge::default_instance_;
  delete Sheet_GMtoolsrecharge_reflection_;
  delete GMtoolsgift::default_instance_;
  delete GMtoolsgift_reflection_;
  delete Sheet_GMtoolsgift::default_instance_;
  delete Sheet_GMtoolsgift_reflection_;
  delete GMtoolsunlimit::default_instance_;
  delete GMtoolsunlimit_reflection_;
  delete Sheet_GMtoolsunlimit::default_instance_;
  delete Sheet_GMtoolsunlimit_reflection_;
  delete GMtoolsupperLimit::default_instance_;
  delete GMtoolsupperLimit_reflection_;
  delete Sheet_GMtoolsupperLimit::default_instance_;
  delete Sheet_GMtoolsupperLimit_reflection_;
}

void protobuf_AddDesc_GMtools_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rGMtools.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"g\n\016GMtoolsGMTools\022\022\n\002id\030\001 \001(\005B\006"
    "\302\377\024\002id\022\036\n\004type\030\002 \001(\005B\020\302\377\024\014\345\206\205\345\256\271\347\261\273\345\236\213\022!"
    "\n\ttypePrarm\030\003 \001(\tB\016\302\377\024\006\345\206\205\345\256\271\220\301\024<\"S\n\024She"
    "et_GMtoolsGMTools\022;\n\023GMtoolsGMTools_List"
    "\030\001 \003(\0132\030.proto_ff.GMtoolsGMToolsB\004\210\301\024\024\"m"
    "\n\017GMtoolsrecharge\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\036\n"
    "\004cost\030\002 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\347\202\271\346\225\260\022&\n\trechaar"
    "ge\030\003 \001(\005B\023\302\377\024\017\345\257\271\345\272\224\350\256\241\350\264\271\347\202\271\"V\n\025Sheet_G"
    "Mtoolsrecharge\022=\n\024GMtoolsrecharge_List\030\001"
    " \003(\0132\031.proto_ff.GMtoolsrechargeB\004\210\301\024\024\"\347\001"
    "\n\013GMtoolsgift\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022*\n\nupp"
    "erLimit\030\002 \001(\005B\026\302\377\024\022\351\234\200\350\246\201\347\232\204\344\270\212\351\231\220\345\200\274\0220\n"
    "\tcondition\030\003 \001(\tB\035\302\377\024\025\351\234\200\350\246\201\345\256\214\346\210\220\347\232\204\346\211\266"
    "\346\214\201\220\301\024<\022\036\n\004cost\030\004 \001(\005B\020\302\377\024\014\346\266\210\350\200\227\347\202\271\346\225\260\022"
    "%\n\005daily\030\005 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\346\257\217\346\227\245\351\207\215\347\275\256\022\037"
    "\n\005boxid\030\006 \001(\003B\020\302\377\024\014\345\245\226\345\212\261\345\206\205\345\256\271\"J\n\021Sheet"
    "_GMtoolsgift\0225\n\020GMtoolsgift_List\030\001 \003(\0132\025"
    ".proto_ff.GMtoolsgiftB\004\210\301\024\024\"\270\001\n\016GMtoolsu"
    "nlimit\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022*\n\nupperLimit"
    "\030\002 \001(\005B\026\302\377\024\022\351\234\200\350\246\201\347\232\204\344\270\212\351\231\220\345\200\274\022\036\n\004cost\030\003"
    " \001(\005B\020\302\377\024\014\346\266\210\350\200\227\347\202\271\346\225\260\022\031\n\005boxid\030\004 \001(\003B\n\302"
    "\377\024\006\345\245\226\345\212\261\022+\n\010dailyNum\030\005 \001(\005B\031\302\377\024\025\346\257\217\346\227\245\345"
    "\217\257\351\242\206\345\217\226\346\225\260\351\207\217\"S\n\024Sheet_GMtoolsunlimit\022;"
    "\n\023GMtoolsunlimit_List\030\001 \003(\0132\030.proto_ff.G"
    "MtoolsunlimitB\004\210\301\024\024\"\\\n\021GMtoolsupperLimit"
    "\022\022\n\002id\030\001 \001(\005B\006\302\377\024\002id\022\030\n\004type\030\002 \001(\005B\n\302\377\024\006"
    "\347\261\273\345\236\213\022\031\n\005param\030\003 \001(\005B\n\302\377\024\006\345\217\202\346\225\260\"\\\n\027She"
    "et_GMtoolsupperLimit\022A\n\026GMtoolsupperLimi"
    "t_List\030\001 \003(\0132\033.proto_ff.GMtoolsupperLimi"
    "tB\004\210\301\024\024", 1207);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GMtools.proto", &protobuf_RegisterTypes);
  GMtoolsGMTools::default_instance_ = new GMtoolsGMTools();
  Sheet_GMtoolsGMTools::default_instance_ = new Sheet_GMtoolsGMTools();
  GMtoolsrecharge::default_instance_ = new GMtoolsrecharge();
  Sheet_GMtoolsrecharge::default_instance_ = new Sheet_GMtoolsrecharge();
  GMtoolsgift::default_instance_ = new GMtoolsgift();
  Sheet_GMtoolsgift::default_instance_ = new Sheet_GMtoolsgift();
  GMtoolsunlimit::default_instance_ = new GMtoolsunlimit();
  Sheet_GMtoolsunlimit::default_instance_ = new Sheet_GMtoolsunlimit();
  GMtoolsupperLimit::default_instance_ = new GMtoolsupperLimit();
  Sheet_GMtoolsupperLimit::default_instance_ = new Sheet_GMtoolsupperLimit();
  GMtoolsGMTools::default_instance_->InitAsDefaultInstance();
  Sheet_GMtoolsGMTools::default_instance_->InitAsDefaultInstance();
  GMtoolsrecharge::default_instance_->InitAsDefaultInstance();
  Sheet_GMtoolsrecharge::default_instance_->InitAsDefaultInstance();
  GMtoolsgift::default_instance_->InitAsDefaultInstance();
  Sheet_GMtoolsgift::default_instance_->InitAsDefaultInstance();
  GMtoolsunlimit::default_instance_->InitAsDefaultInstance();
  Sheet_GMtoolsunlimit::default_instance_->InitAsDefaultInstance();
  GMtoolsupperLimit::default_instance_->InitAsDefaultInstance();
  Sheet_GMtoolsupperLimit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GMtools_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GMtools_2eproto {
  StaticDescriptorInitializer_GMtools_2eproto() {
    protobuf_AddDesc_GMtools_2eproto();
  }
} static_descriptor_initializer_GMtools_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GMtoolsGMTools::kIdFieldNumber;
const int GMtoolsGMTools::kTypeFieldNumber;
const int GMtoolsGMTools::kTypePrarmFieldNumber;
#endif  // !_MSC_VER

GMtoolsGMTools::GMtoolsGMTools()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMtoolsGMTools::InitAsDefaultInstance() {
}

GMtoolsGMTools::GMtoolsGMTools(const GMtoolsGMTools& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMtoolsGMTools::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  typeprarm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMtoolsGMTools::~GMtoolsGMTools() {
  SharedDtor();
}

void GMtoolsGMTools::SharedDtor() {
  if (typeprarm_ != &::google::protobuf::internal::kEmptyString) {
    delete typeprarm_;
  }
  if (this != default_instance_) {
  }
}

void GMtoolsGMTools::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMtoolsGMTools::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMtoolsGMTools_descriptor_;
}

const GMtoolsGMTools& GMtoolsGMTools::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

GMtoolsGMTools* GMtoolsGMTools::default_instance_ = NULL;

GMtoolsGMTools* GMtoolsGMTools::New() const {
  return new GMtoolsGMTools;
}

void GMtoolsGMTools::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    if (has_typeprarm()) {
      if (typeprarm_ != &::google::protobuf::internal::kEmptyString) {
        typeprarm_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMtoolsGMTools::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_typePrarm;
        break;
      }

      // optional string typePrarm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_typePrarm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_typeprarm()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->typeprarm().data(), this->typeprarm().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMtoolsGMTools::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional string typePrarm = 3;
  if (has_typeprarm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeprarm().data(), this->typeprarm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->typeprarm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMtoolsGMTools::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional string typePrarm = 3;
  if (has_typeprarm()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->typeprarm().data(), this->typeprarm().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->typeprarm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMtoolsGMTools::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string typePrarm = 3;
    if (has_typeprarm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->typeprarm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMtoolsGMTools::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMtoolsGMTools* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMtoolsGMTools*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMtoolsGMTools::MergeFrom(const GMtoolsGMTools& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_typeprarm()) {
      set_typeprarm(from.typeprarm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMtoolsGMTools::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMtoolsGMTools::CopyFrom(const GMtoolsGMTools& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMtoolsGMTools::IsInitialized() const {

  return true;
}

void GMtoolsGMTools::Swap(GMtoolsGMTools* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(typeprarm_, other->typeprarm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMtoolsGMTools::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMtoolsGMTools_descriptor_;
  metadata.reflection = GMtoolsGMTools_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GMtoolsGMTools::kGMtoolsGMToolsListFieldNumber;
#endif  // !_MSC_VER

Sheet_GMtoolsGMTools::Sheet_GMtoolsGMTools()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GMtoolsGMTools::InitAsDefaultInstance() {
}

Sheet_GMtoolsGMTools::Sheet_GMtoolsGMTools(const Sheet_GMtoolsGMTools& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GMtoolsGMTools::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GMtoolsGMTools::~Sheet_GMtoolsGMTools() {
  SharedDtor();
}

void Sheet_GMtoolsGMTools::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GMtoolsGMTools::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GMtoolsGMTools::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GMtoolsGMTools_descriptor_;
}

const Sheet_GMtoolsGMTools& Sheet_GMtoolsGMTools::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

Sheet_GMtoolsGMTools* Sheet_GMtoolsGMTools::default_instance_ = NULL;

Sheet_GMtoolsGMTools* Sheet_GMtoolsGMTools::New() const {
  return new Sheet_GMtoolsGMTools;
}

void Sheet_GMtoolsGMTools::Clear() {
  gmtoolsgmtools_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GMtoolsGMTools::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GMtoolsGMTools GMtoolsGMTools_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GMtoolsGMTools_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmtoolsgmtools_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GMtoolsGMTools_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GMtoolsGMTools::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GMtoolsGMTools GMtoolsGMTools_List = 1;
  for (int i = 0; i < this->gmtoolsgmtools_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmtoolsgmtools_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GMtoolsGMTools::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GMtoolsGMTools GMtoolsGMTools_List = 1;
  for (int i = 0; i < this->gmtoolsgmtools_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmtoolsgmtools_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GMtoolsGMTools::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GMtoolsGMTools GMtoolsGMTools_List = 1;
  total_size += 1 * this->gmtoolsgmtools_list_size();
  for (int i = 0; i < this->gmtoolsgmtools_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmtoolsgmtools_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GMtoolsGMTools::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GMtoolsGMTools* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GMtoolsGMTools*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GMtoolsGMTools::MergeFrom(const Sheet_GMtoolsGMTools& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmtoolsgmtools_list_.MergeFrom(from.gmtoolsgmtools_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GMtoolsGMTools::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GMtoolsGMTools::CopyFrom(const Sheet_GMtoolsGMTools& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GMtoolsGMTools::IsInitialized() const {

  return true;
}

void Sheet_GMtoolsGMTools::Swap(Sheet_GMtoolsGMTools* other) {
  if (other != this) {
    gmtoolsgmtools_list_.Swap(&other->gmtoolsgmtools_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GMtoolsGMTools::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GMtoolsGMTools_descriptor_;
  metadata.reflection = Sheet_GMtoolsGMTools_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMtoolsrecharge::kIdFieldNumber;
const int GMtoolsrecharge::kCostFieldNumber;
const int GMtoolsrecharge::kRechaargeFieldNumber;
#endif  // !_MSC_VER

GMtoolsrecharge::GMtoolsrecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMtoolsrecharge::InitAsDefaultInstance() {
}

GMtoolsrecharge::GMtoolsrecharge(const GMtoolsrecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMtoolsrecharge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cost_ = 0;
  rechaarge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMtoolsrecharge::~GMtoolsrecharge() {
  SharedDtor();
}

void GMtoolsrecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMtoolsrecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMtoolsrecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMtoolsrecharge_descriptor_;
}

const GMtoolsrecharge& GMtoolsrecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

GMtoolsrecharge* GMtoolsrecharge::default_instance_ = NULL;

GMtoolsrecharge* GMtoolsrecharge::New() const {
  return new GMtoolsrecharge;
}

void GMtoolsrecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cost_ = 0;
    rechaarge_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMtoolsrecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cost;
        break;
      }

      // optional int32 cost = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rechaarge;
        break;
      }

      // optional int32 rechaarge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechaarge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechaarge_)));
          set_has_rechaarge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMtoolsrecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 cost = 2;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cost(), output);
  }

  // optional int32 rechaarge = 3;
  if (has_rechaarge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rechaarge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMtoolsrecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 cost = 2;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cost(), target);
  }

  // optional int32 rechaarge = 3;
  if (has_rechaarge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rechaarge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMtoolsrecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 cost = 2;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 rechaarge = 3;
    if (has_rechaarge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechaarge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMtoolsrecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMtoolsrecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMtoolsrecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMtoolsrecharge::MergeFrom(const GMtoolsrecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_rechaarge()) {
      set_rechaarge(from.rechaarge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMtoolsrecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMtoolsrecharge::CopyFrom(const GMtoolsrecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMtoolsrecharge::IsInitialized() const {

  return true;
}

void GMtoolsrecharge::Swap(GMtoolsrecharge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cost_, other->cost_);
    std::swap(rechaarge_, other->rechaarge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMtoolsrecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMtoolsrecharge_descriptor_;
  metadata.reflection = GMtoolsrecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GMtoolsrecharge::kGMtoolsrechargeListFieldNumber;
#endif  // !_MSC_VER

Sheet_GMtoolsrecharge::Sheet_GMtoolsrecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GMtoolsrecharge::InitAsDefaultInstance() {
}

Sheet_GMtoolsrecharge::Sheet_GMtoolsrecharge(const Sheet_GMtoolsrecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GMtoolsrecharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GMtoolsrecharge::~Sheet_GMtoolsrecharge() {
  SharedDtor();
}

void Sheet_GMtoolsrecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GMtoolsrecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GMtoolsrecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GMtoolsrecharge_descriptor_;
}

const Sheet_GMtoolsrecharge& Sheet_GMtoolsrecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

Sheet_GMtoolsrecharge* Sheet_GMtoolsrecharge::default_instance_ = NULL;

Sheet_GMtoolsrecharge* Sheet_GMtoolsrecharge::New() const {
  return new Sheet_GMtoolsrecharge;
}

void Sheet_GMtoolsrecharge::Clear() {
  gmtoolsrecharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GMtoolsrecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GMtoolsrecharge GMtoolsrecharge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GMtoolsrecharge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmtoolsrecharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GMtoolsrecharge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GMtoolsrecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GMtoolsrecharge GMtoolsrecharge_List = 1;
  for (int i = 0; i < this->gmtoolsrecharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmtoolsrecharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GMtoolsrecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GMtoolsrecharge GMtoolsrecharge_List = 1;
  for (int i = 0; i < this->gmtoolsrecharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmtoolsrecharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GMtoolsrecharge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GMtoolsrecharge GMtoolsrecharge_List = 1;
  total_size += 1 * this->gmtoolsrecharge_list_size();
  for (int i = 0; i < this->gmtoolsrecharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmtoolsrecharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GMtoolsrecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GMtoolsrecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GMtoolsrecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GMtoolsrecharge::MergeFrom(const Sheet_GMtoolsrecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmtoolsrecharge_list_.MergeFrom(from.gmtoolsrecharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GMtoolsrecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GMtoolsrecharge::CopyFrom(const Sheet_GMtoolsrecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GMtoolsrecharge::IsInitialized() const {

  return true;
}

void Sheet_GMtoolsrecharge::Swap(Sheet_GMtoolsrecharge* other) {
  if (other != this) {
    gmtoolsrecharge_list_.Swap(&other->gmtoolsrecharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GMtoolsrecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GMtoolsrecharge_descriptor_;
  metadata.reflection = Sheet_GMtoolsrecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMtoolsgift::kIdFieldNumber;
const int GMtoolsgift::kUpperLimitFieldNumber;
const int GMtoolsgift::kConditionFieldNumber;
const int GMtoolsgift::kCostFieldNumber;
const int GMtoolsgift::kDailyFieldNumber;
const int GMtoolsgift::kBoxidFieldNumber;
#endif  // !_MSC_VER

GMtoolsgift::GMtoolsgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMtoolsgift::InitAsDefaultInstance() {
}

GMtoolsgift::GMtoolsgift(const GMtoolsgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMtoolsgift::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  upperlimit_ = 0;
  condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cost_ = 0;
  daily_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMtoolsgift::~GMtoolsgift() {
  SharedDtor();
}

void GMtoolsgift::SharedDtor() {
  if (condition_ != &::google::protobuf::internal::kEmptyString) {
    delete condition_;
  }
  if (this != default_instance_) {
  }
}

void GMtoolsgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMtoolsgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMtoolsgift_descriptor_;
}

const GMtoolsgift& GMtoolsgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

GMtoolsgift* GMtoolsgift::default_instance_ = NULL;

GMtoolsgift* GMtoolsgift::New() const {
  return new GMtoolsgift;
}

void GMtoolsgift::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    upperlimit_ = 0;
    if (has_condition()) {
      if (condition_ != &::google::protobuf::internal::kEmptyString) {
        condition_->clear();
      }
    }
    cost_ = 0;
    daily_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMtoolsgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upperLimit;
        break;
      }

      // optional int32 upperLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upperLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upperlimit_)));
          set_has_upperlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_condition;
        break;
      }

      // optional string condition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_condition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_condition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->condition().data(), this->condition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cost;
        break;
      }

      // optional int32 cost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_daily;
        break;
      }

      // optional int32 daily = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daily_)));
          set_has_daily();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMtoolsgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 upperLimit = 2;
  if (has_upperlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upperlimit(), output);
  }

  // optional string condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->condition(), output);
  }

  // optional int32 cost = 4;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost(), output);
  }

  // optional int32 daily = 5;
  if (has_daily()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->daily(), output);
  }

  // optional int64 boxid = 6;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMtoolsgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 upperLimit = 2;
  if (has_upperlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upperlimit(), target);
  }

  // optional string condition = 3;
  if (has_condition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->condition().data(), this->condition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->condition(), target);
  }

  // optional int32 cost = 4;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost(), target);
  }

  // optional int32 daily = 5;
  if (has_daily()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->daily(), target);
  }

  // optional int64 boxid = 6;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMtoolsgift::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 upperLimit = 2;
    if (has_upperlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upperlimit());
    }

    // optional string condition = 3;
    if (has_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->condition());
    }

    // optional int32 cost = 4;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int32 daily = 5;
    if (has_daily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daily());
    }

    // optional int64 boxid = 6;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMtoolsgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMtoolsgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMtoolsgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMtoolsgift::MergeFrom(const GMtoolsgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_upperlimit()) {
      set_upperlimit(from.upperlimit());
    }
    if (from.has_condition()) {
      set_condition(from.condition());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_daily()) {
      set_daily(from.daily());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMtoolsgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMtoolsgift::CopyFrom(const GMtoolsgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMtoolsgift::IsInitialized() const {

  return true;
}

void GMtoolsgift::Swap(GMtoolsgift* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(upperlimit_, other->upperlimit_);
    std::swap(condition_, other->condition_);
    std::swap(cost_, other->cost_);
    std::swap(daily_, other->daily_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMtoolsgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMtoolsgift_descriptor_;
  metadata.reflection = GMtoolsgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GMtoolsgift::kGMtoolsgiftListFieldNumber;
#endif  // !_MSC_VER

Sheet_GMtoolsgift::Sheet_GMtoolsgift()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GMtoolsgift::InitAsDefaultInstance() {
}

Sheet_GMtoolsgift::Sheet_GMtoolsgift(const Sheet_GMtoolsgift& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GMtoolsgift::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GMtoolsgift::~Sheet_GMtoolsgift() {
  SharedDtor();
}

void Sheet_GMtoolsgift::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GMtoolsgift::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GMtoolsgift::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GMtoolsgift_descriptor_;
}

const Sheet_GMtoolsgift& Sheet_GMtoolsgift::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

Sheet_GMtoolsgift* Sheet_GMtoolsgift::default_instance_ = NULL;

Sheet_GMtoolsgift* Sheet_GMtoolsgift::New() const {
  return new Sheet_GMtoolsgift;
}

void Sheet_GMtoolsgift::Clear() {
  gmtoolsgift_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GMtoolsgift::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GMtoolsgift GMtoolsgift_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GMtoolsgift_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmtoolsgift_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GMtoolsgift_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GMtoolsgift::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GMtoolsgift GMtoolsgift_List = 1;
  for (int i = 0; i < this->gmtoolsgift_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmtoolsgift_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GMtoolsgift::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GMtoolsgift GMtoolsgift_List = 1;
  for (int i = 0; i < this->gmtoolsgift_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmtoolsgift_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GMtoolsgift::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GMtoolsgift GMtoolsgift_List = 1;
  total_size += 1 * this->gmtoolsgift_list_size();
  for (int i = 0; i < this->gmtoolsgift_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmtoolsgift_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GMtoolsgift::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GMtoolsgift* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GMtoolsgift*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GMtoolsgift::MergeFrom(const Sheet_GMtoolsgift& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmtoolsgift_list_.MergeFrom(from.gmtoolsgift_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GMtoolsgift::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GMtoolsgift::CopyFrom(const Sheet_GMtoolsgift& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GMtoolsgift::IsInitialized() const {

  return true;
}

void Sheet_GMtoolsgift::Swap(Sheet_GMtoolsgift* other) {
  if (other != this) {
    gmtoolsgift_list_.Swap(&other->gmtoolsgift_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GMtoolsgift::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GMtoolsgift_descriptor_;
  metadata.reflection = Sheet_GMtoolsgift_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMtoolsunlimit::kIdFieldNumber;
const int GMtoolsunlimit::kUpperLimitFieldNumber;
const int GMtoolsunlimit::kCostFieldNumber;
const int GMtoolsunlimit::kBoxidFieldNumber;
const int GMtoolsunlimit::kDailyNumFieldNumber;
#endif  // !_MSC_VER

GMtoolsunlimit::GMtoolsunlimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMtoolsunlimit::InitAsDefaultInstance() {
}

GMtoolsunlimit::GMtoolsunlimit(const GMtoolsunlimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMtoolsunlimit::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  upperlimit_ = 0;
  cost_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  dailynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMtoolsunlimit::~GMtoolsunlimit() {
  SharedDtor();
}

void GMtoolsunlimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMtoolsunlimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMtoolsunlimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMtoolsunlimit_descriptor_;
}

const GMtoolsunlimit& GMtoolsunlimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

GMtoolsunlimit* GMtoolsunlimit::default_instance_ = NULL;

GMtoolsunlimit* GMtoolsunlimit::New() const {
  return new GMtoolsunlimit;
}

void GMtoolsunlimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    upperlimit_ = 0;
    cost_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
    dailynum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMtoolsunlimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upperLimit;
        break;
      }

      // optional int32 upperLimit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upperLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upperlimit_)));
          set_has_upperlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cost;
        break;
      }

      // optional int32 cost = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
          set_has_cost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boxid;
        break;
      }

      // optional int64 boxid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dailyNum;
        break;
      }

      // optional int32 dailyNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailynum_)));
          set_has_dailynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMtoolsunlimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 upperLimit = 2;
  if (has_upperlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upperlimit(), output);
  }

  // optional int32 cost = 3;
  if (has_cost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cost(), output);
  }

  // optional int64 boxid = 4;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->boxid(), output);
  }

  // optional int32 dailyNum = 5;
  if (has_dailynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dailynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMtoolsunlimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 upperLimit = 2;
  if (has_upperlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upperlimit(), target);
  }

  // optional int32 cost = 3;
  if (has_cost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cost(), target);
  }

  // optional int64 boxid = 4;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->boxid(), target);
  }

  // optional int32 dailyNum = 5;
  if (has_dailynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dailynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMtoolsunlimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 upperLimit = 2;
    if (has_upperlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upperlimit());
    }

    // optional int32 cost = 3;
    if (has_cost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cost());
    }

    // optional int64 boxid = 4;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int32 dailyNum = 5;
    if (has_dailynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMtoolsunlimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMtoolsunlimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMtoolsunlimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMtoolsunlimit::MergeFrom(const GMtoolsunlimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_upperlimit()) {
      set_upperlimit(from.upperlimit());
    }
    if (from.has_cost()) {
      set_cost(from.cost());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_dailynum()) {
      set_dailynum(from.dailynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMtoolsunlimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMtoolsunlimit::CopyFrom(const GMtoolsunlimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMtoolsunlimit::IsInitialized() const {

  return true;
}

void GMtoolsunlimit::Swap(GMtoolsunlimit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(upperlimit_, other->upperlimit_);
    std::swap(cost_, other->cost_);
    std::swap(boxid_, other->boxid_);
    std::swap(dailynum_, other->dailynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMtoolsunlimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMtoolsunlimit_descriptor_;
  metadata.reflection = GMtoolsunlimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GMtoolsunlimit::kGMtoolsunlimitListFieldNumber;
#endif  // !_MSC_VER

Sheet_GMtoolsunlimit::Sheet_GMtoolsunlimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GMtoolsunlimit::InitAsDefaultInstance() {
}

Sheet_GMtoolsunlimit::Sheet_GMtoolsunlimit(const Sheet_GMtoolsunlimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GMtoolsunlimit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GMtoolsunlimit::~Sheet_GMtoolsunlimit() {
  SharedDtor();
}

void Sheet_GMtoolsunlimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GMtoolsunlimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GMtoolsunlimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GMtoolsunlimit_descriptor_;
}

const Sheet_GMtoolsunlimit& Sheet_GMtoolsunlimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

Sheet_GMtoolsunlimit* Sheet_GMtoolsunlimit::default_instance_ = NULL;

Sheet_GMtoolsunlimit* Sheet_GMtoolsunlimit::New() const {
  return new Sheet_GMtoolsunlimit;
}

void Sheet_GMtoolsunlimit::Clear() {
  gmtoolsunlimit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GMtoolsunlimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GMtoolsunlimit GMtoolsunlimit_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GMtoolsunlimit_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmtoolsunlimit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GMtoolsunlimit_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GMtoolsunlimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GMtoolsunlimit GMtoolsunlimit_List = 1;
  for (int i = 0; i < this->gmtoolsunlimit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmtoolsunlimit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GMtoolsunlimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GMtoolsunlimit GMtoolsunlimit_List = 1;
  for (int i = 0; i < this->gmtoolsunlimit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmtoolsunlimit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GMtoolsunlimit::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GMtoolsunlimit GMtoolsunlimit_List = 1;
  total_size += 1 * this->gmtoolsunlimit_list_size();
  for (int i = 0; i < this->gmtoolsunlimit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmtoolsunlimit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GMtoolsunlimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GMtoolsunlimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GMtoolsunlimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GMtoolsunlimit::MergeFrom(const Sheet_GMtoolsunlimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmtoolsunlimit_list_.MergeFrom(from.gmtoolsunlimit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GMtoolsunlimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GMtoolsunlimit::CopyFrom(const Sheet_GMtoolsunlimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GMtoolsunlimit::IsInitialized() const {

  return true;
}

void Sheet_GMtoolsunlimit::Swap(Sheet_GMtoolsunlimit* other) {
  if (other != this) {
    gmtoolsunlimit_list_.Swap(&other->gmtoolsunlimit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GMtoolsunlimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GMtoolsunlimit_descriptor_;
  metadata.reflection = Sheet_GMtoolsunlimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMtoolsupperLimit::kIdFieldNumber;
const int GMtoolsupperLimit::kTypeFieldNumber;
const int GMtoolsupperLimit::kParamFieldNumber;
#endif  // !_MSC_VER

GMtoolsupperLimit::GMtoolsupperLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMtoolsupperLimit::InitAsDefaultInstance() {
}

GMtoolsupperLimit::GMtoolsupperLimit(const GMtoolsupperLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMtoolsupperLimit::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  param_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMtoolsupperLimit::~GMtoolsupperLimit() {
  SharedDtor();
}

void GMtoolsupperLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMtoolsupperLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMtoolsupperLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMtoolsupperLimit_descriptor_;
}

const GMtoolsupperLimit& GMtoolsupperLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

GMtoolsupperLimit* GMtoolsupperLimit::default_instance_ = NULL;

GMtoolsupperLimit* GMtoolsupperLimit::New() const {
  return new GMtoolsupperLimit;
}

void GMtoolsupperLimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    param_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMtoolsupperLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_param;
        break;
      }

      // optional int32 param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &param_)));
          set_has_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMtoolsupperLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 param = 3;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMtoolsupperLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 param = 3;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMtoolsupperLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 param = 3;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMtoolsupperLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMtoolsupperLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMtoolsupperLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMtoolsupperLimit::MergeFrom(const GMtoolsupperLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_param()) {
      set_param(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMtoolsupperLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMtoolsupperLimit::CopyFrom(const GMtoolsupperLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMtoolsupperLimit::IsInitialized() const {

  return true;
}

void GMtoolsupperLimit::Swap(GMtoolsupperLimit* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMtoolsupperLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMtoolsupperLimit_descriptor_;
  metadata.reflection = GMtoolsupperLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GMtoolsupperLimit::kGMtoolsupperLimitListFieldNumber;
#endif  // !_MSC_VER

Sheet_GMtoolsupperLimit::Sheet_GMtoolsupperLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GMtoolsupperLimit::InitAsDefaultInstance() {
}

Sheet_GMtoolsupperLimit::Sheet_GMtoolsupperLimit(const Sheet_GMtoolsupperLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GMtoolsupperLimit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GMtoolsupperLimit::~Sheet_GMtoolsupperLimit() {
  SharedDtor();
}

void Sheet_GMtoolsupperLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GMtoolsupperLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GMtoolsupperLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GMtoolsupperLimit_descriptor_;
}

const Sheet_GMtoolsupperLimit& Sheet_GMtoolsupperLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GMtools_2eproto();
  return *default_instance_;
}

Sheet_GMtoolsupperLimit* Sheet_GMtoolsupperLimit::default_instance_ = NULL;

Sheet_GMtoolsupperLimit* Sheet_GMtoolsupperLimit::New() const {
  return new Sheet_GMtoolsupperLimit;
}

void Sheet_GMtoolsupperLimit::Clear() {
  gmtoolsupperlimit_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GMtoolsupperLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GMtoolsupperLimit GMtoolsupperLimit_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GMtoolsupperLimit_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gmtoolsupperlimit_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_GMtoolsupperLimit_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GMtoolsupperLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GMtoolsupperLimit GMtoolsupperLimit_List = 1;
  for (int i = 0; i < this->gmtoolsupperlimit_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gmtoolsupperlimit_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GMtoolsupperLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GMtoolsupperLimit GMtoolsupperLimit_List = 1;
  for (int i = 0; i < this->gmtoolsupperlimit_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gmtoolsupperlimit_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GMtoolsupperLimit::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GMtoolsupperLimit GMtoolsupperLimit_List = 1;
  total_size += 1 * this->gmtoolsupperlimit_list_size();
  for (int i = 0; i < this->gmtoolsupperlimit_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gmtoolsupperlimit_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GMtoolsupperLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GMtoolsupperLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GMtoolsupperLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GMtoolsupperLimit::MergeFrom(const Sheet_GMtoolsupperLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  gmtoolsupperlimit_list_.MergeFrom(from.gmtoolsupperlimit_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GMtoolsupperLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GMtoolsupperLimit::CopyFrom(const Sheet_GMtoolsupperLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GMtoolsupperLimit::IsInitialized() const {

  return true;
}

void Sheet_GMtoolsupperLimit::Swap(Sheet_GMtoolsupperLimit* other) {
  if (other != this) {
    gmtoolsupperlimit_list_.Swap(&other->gmtoolsupperlimit_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GMtoolsupperLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GMtoolsupperLimit_descriptor_;
  metadata.reflection = Sheet_GMtoolsupperLimit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
