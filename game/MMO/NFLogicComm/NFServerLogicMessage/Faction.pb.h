// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Faction.proto

#ifndef PROTOBUF_Faction_2eproto__INCLUDED
#define PROTOBUF_Faction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "common_logic.pb.h"
#include "Com.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Faction_2eproto();
void protobuf_AssignDesc_Faction_2eproto();
void protobuf_ShutdownFile_Faction_2eproto();

class FactionListProto;
class FactionProto;
class FactionMemProto;
class FactionMemListProto;
class FactionApplyProto;
class FactionApplyListProto;
class FactionMemSimpleProto;
class FactionMemSimpleListProto;
class FactionSimpleProto;
class FactionRecordProto;
class FactionRecordListProto;
class Faction_SyncLoginRsp;
class Faction_SyncInfoRsp;
class Faction_InfoReq;
class Faction_InfoRsp;
class Faction_InfoListReq;
class Faction_InfoListRsp;
class Faction_SimpleReq;
class Faction_SimpleRsp;
class Faction_MemListReq;
class Faction_MemListRsp;
class Faction_CreateReq;
class Faction_CreateRsp;
class Faction_ApplyListReq;
class Faction_ApplyListRsp;
class Faction_ApplyJoinReq;
class Faction_ApplyJoinRsp;
class Faction_ApplyOperateReq;
class Faction_ApplyOperateRsp;
class Faction_KickReq;
class Faction_KickRsp;
class Faction_QuitReq;
class Faction_QuitRsp;
class Faction_AppointReq;
class Faction_AppointRsp;
class Faction_ChgNoticeReq;
class Faction_ChgNoticeRsp;
class Faction_SetApplyReq;
class Faction_SetApplyRsp;
class Faction_OneKeyApplyReq;
class Faction_OneKeyApplyRsp;
class Faction_ChgNameReq;
class Faction_ChgNameRsp;
class Faction_NewApplyNotify;
class Faction_InviteJoinReq;
class Faction_InviteJoinRsp;
class Faction_IviteJoinNotify;
class Faction_RecordListReq;
class Faction_RecordListRsp;
class CL_FactionRoleUpdateRsp;
class LC_FactionCreate;
class CL_FactionCreateResult;
class LC_FactionChgName;
class CL_FactionChgNameResult;

// ===================================================================

class FactionListProto : public ::google::protobuf::Message {
 public:
  FactionListProto();
  virtual ~FactionListProto();

  FactionListProto(const FactionListProto& from);

  inline FactionListProto& operator=(const FactionListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionListProto& default_instance();

  void Swap(FactionListProto* other);

  // implements Message ----------------------------------------------

  FactionListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionListProto& from);
  void MergeFrom(const FactionListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 leader_cid = 4;
  inline bool has_leader_cid() const;
  inline void clear_leader_cid();
  static const int kLeaderCidFieldNumber = 4;
  inline ::google::protobuf::uint64 leader_cid() const;
  inline void set_leader_cid(::google::protobuf::uint64 value);

  // optional bytes leader_name = 5;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 5;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const void* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 mem_count = 7;
  inline bool has_mem_count() const;
  inline void clear_mem_count();
  static const int kMemCountFieldNumber = 7;
  inline ::google::protobuf::int32 mem_count() const;
  inline void set_mem_count(::google::protobuf::int32 value);

  // optional uint64 fight = 8;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 8;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional int32 already_apply = 9;
  inline bool has_already_apply() const;
  inline void clear_already_apply();
  static const int kAlreadyApplyFieldNumber = 9;
  inline ::google::protobuf::int32 already_apply() const;
  inline void set_already_apply(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionListProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_leader_cid();
  inline void clear_has_leader_cid();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_mem_count();
  inline void clear_has_mem_count();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_already_apply();
  inline void clear_has_already_apply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint64 leader_cid_;
  ::std::string* leader_name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 mem_count_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::int32 already_apply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionProto : public ::google::protobuf::Message {
 public:
  FactionProto();
  virtual ~FactionProto();

  FactionProto(const FactionProto& from);

  inline FactionProto& operator=(const FactionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionProto& default_instance();

  void Swap(FactionProto* other);

  // implements Message ----------------------------------------------

  FactionProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionProto& from);
  void MergeFrom(const FactionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 mem_count = 5;
  inline bool has_mem_count() const;
  inline void clear_mem_count();
  static const int kMemCountFieldNumber = 5;
  inline ::google::protobuf::int32 mem_count() const;
  inline void set_mem_count(::google::protobuf::int32 value);

  // optional uint64 fight = 6;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 6;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional int32 grade = 7;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 7;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional uint64 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::uint64 exp() const;
  inline void set_exp(::google::protobuf::uint64 value);

  // optional string notice = 9;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 9;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional uint64 leader_cid = 10;
  inline bool has_leader_cid() const;
  inline void clear_leader_cid();
  static const int kLeaderCidFieldNumber = 10;
  inline ::google::protobuf::uint64 leader_cid() const;
  inline void set_leader_cid(::google::protobuf::uint64 value);

  // optional bytes leader_name = 11;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 11;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const void* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional .proto_ff.RoleFacadeProto facade = 12;
  inline bool has_facade() const;
  inline void clear_facade();
  static const int kFacadeFieldNumber = 12;
  inline const ::proto_ff::RoleFacadeProto& facade() const;
  inline ::proto_ff::RoleFacadeProto* mutable_facade();
  inline ::proto_ff::RoleFacadeProto* release_facade();
  inline void set_allocated_facade(::proto_ff::RoleFacadeProto* facade);

  // optional int32 apply_type = 13;
  inline bool has_apply_type() const;
  inline void clear_apply_type();
  static const int kApplyTypeFieldNumber = 13;
  inline ::google::protobuf::int32 apply_type() const;
  inline void set_apply_type(::google::protobuf::int32 value);

  // optional int32 apply_minlev = 14;
  inline bool has_apply_minlev() const;
  inline void clear_apply_minlev();
  static const int kApplyMinlevFieldNumber = 14;
  inline ::google::protobuf::int32 apply_minlev() const;
  inline void set_apply_minlev(::google::protobuf::int32 value);

  // optional uint64 apply_fight = 15;
  inline bool has_apply_fight() const;
  inline void clear_apply_fight();
  static const int kApplyFightFieldNumber = 15;
  inline ::google::protobuf::uint64 apply_fight() const;
  inline void set_apply_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_mem_count();
  inline void clear_has_mem_count();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_leader_cid();
  inline void clear_has_leader_cid();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_facade();
  inline void clear_has_facade();
  inline void set_has_apply_type();
  inline void clear_has_apply_type();
  inline void set_has_apply_minlev();
  inline void clear_has_apply_minlev();
  inline void set_has_apply_fight();
  inline void clear_has_apply_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 mem_count_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::uint64 exp_;
  ::std::string* notice_;
  ::google::protobuf::uint64 leader_cid_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 apply_type_;
  ::std::string* leader_name_;
  ::proto_ff::RoleFacadeProto* facade_;
  ::google::protobuf::uint64 apply_fight_;
  ::google::protobuf::int32 apply_minlev_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMemProto : public ::google::protobuf::Message {
 public:
  FactionMemProto();
  virtual ~FactionMemProto();

  FactionMemProto(const FactionMemProto& from);

  inline FactionMemProto& operator=(const FactionMemProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMemProto& default_instance();

  void Swap(FactionMemProto* other);

  // implements Message ----------------------------------------------

  FactionMemProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMemProto& from);
  void MergeFrom(const FactionMemProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 prof = 3;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 3;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 vip_level = 4;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 4;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 duty = 6;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 6;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // optional uint64 fight = 7;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 7;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional uint64 total_contri = 8;
  inline bool has_total_contri() const;
  inline void clear_total_contri();
  static const int kTotalContriFieldNumber = 8;
  inline ::google::protobuf::uint64 total_contri() const;
  inline void set_total_contri(::google::protobuf::uint64 value);

  // optional int32 is_online = 9;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 9;
  inline ::google::protobuf::int32 is_online() const;
  inline void set_is_online(::google::protobuf::int32 value);

  // optional uint64 logout_time = 10;
  inline bool has_logout_time() const;
  inline void clear_logout_time();
  static const int kLogoutTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 logout_time() const;
  inline void set_logout_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMemProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_total_contri();
  inline void clear_has_total_contri();
  inline void set_has_is_online();
  inline void clear_has_is_online();
  inline void set_has_logout_time();
  inline void clear_has_logout_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::uint64 total_contri_;
  ::google::protobuf::uint64 logout_time_;
  ::google::protobuf::int32 is_online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMemProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMemListProto : public ::google::protobuf::Message {
 public:
  FactionMemListProto();
  virtual ~FactionMemListProto();

  FactionMemListProto(const FactionMemListProto& from);

  inline FactionMemListProto& operator=(const FactionMemListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMemListProto& default_instance();

  void Swap(FactionMemListProto* other);

  // implements Message ----------------------------------------------

  FactionMemListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMemListProto& from);
  void MergeFrom(const FactionMemListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionMemProto mem_lst = 1;
  inline int mem_lst_size() const;
  inline void clear_mem_lst();
  static const int kMemLstFieldNumber = 1;
  inline const ::proto_ff::FactionMemProto& mem_lst(int index) const;
  inline ::proto_ff::FactionMemProto* mutable_mem_lst(int index);
  inline ::proto_ff::FactionMemProto* add_mem_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto >&
      mem_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto >*
      mutable_mem_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMemListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto > mem_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMemListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionApplyProto : public ::google::protobuf::Message {
 public:
  FactionApplyProto();
  virtual ~FactionApplyProto();

  FactionApplyProto(const FactionApplyProto& from);

  inline FactionApplyProto& operator=(const FactionApplyProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionApplyProto& default_instance();

  void Swap(FactionApplyProto* other);

  // implements Message ----------------------------------------------

  FactionApplyProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionApplyProto& from);
  void MergeFrom(const FactionApplyProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 fight = 4;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 4;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionApplyProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionApplyProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionApplyListProto : public ::google::protobuf::Message {
 public:
  FactionApplyListProto();
  virtual ~FactionApplyListProto();

  FactionApplyListProto(const FactionApplyListProto& from);

  inline FactionApplyListProto& operator=(const FactionApplyListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionApplyListProto& default_instance();

  void Swap(FactionApplyListProto* other);

  // implements Message ----------------------------------------------

  FactionApplyListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionApplyListProto& from);
  void MergeFrom(const FactionApplyListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionApplyProto apply_lst = 1;
  inline int apply_lst_size() const;
  inline void clear_apply_lst();
  static const int kApplyLstFieldNumber = 1;
  inline const ::proto_ff::FactionApplyProto& apply_lst(int index) const;
  inline ::proto_ff::FactionApplyProto* mutable_apply_lst(int index);
  inline ::proto_ff::FactionApplyProto* add_apply_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto >&
      apply_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto >*
      mutable_apply_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionApplyListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto > apply_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionApplyListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMemSimpleProto : public ::google::protobuf::Message {
 public:
  FactionMemSimpleProto();
  virtual ~FactionMemSimpleProto();

  FactionMemSimpleProto(const FactionMemSimpleProto& from);

  inline FactionMemSimpleProto& operator=(const FactionMemSimpleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMemSimpleProto& default_instance();

  void Swap(FactionMemSimpleProto* other);

  // implements Message ----------------------------------------------

  FactionMemSimpleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMemSimpleProto& from);
  void MergeFrom(const FactionMemSimpleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 duty = 4;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 4;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // optional uint64 fight = 5;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 5;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMemSimpleProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::uint64 fight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMemSimpleProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMemSimpleListProto : public ::google::protobuf::Message {
 public:
  FactionMemSimpleListProto();
  virtual ~FactionMemSimpleListProto();

  FactionMemSimpleListProto(const FactionMemSimpleListProto& from);

  inline FactionMemSimpleListProto& operator=(const FactionMemSimpleListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMemSimpleListProto& default_instance();

  void Swap(FactionMemSimpleListProto* other);

  // implements Message ----------------------------------------------

  FactionMemSimpleListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMemSimpleListProto& from);
  void MergeFrom(const FactionMemSimpleListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
  inline int simple_lst_size() const;
  inline void clear_simple_lst();
  static const int kSimpleLstFieldNumber = 1;
  inline const ::proto_ff::FactionMemSimpleProto& simple_lst(int index) const;
  inline ::proto_ff::FactionMemSimpleProto* mutable_simple_lst(int index);
  inline ::proto_ff::FactionMemSimpleProto* add_simple_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto >&
      simple_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto >*
      mutable_simple_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMemSimpleListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto > simple_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMemSimpleListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionSimpleProto : public ::google::protobuf::Message {
 public:
  FactionSimpleProto();
  virtual ~FactionSimpleProto();

  FactionSimpleProto(const FactionSimpleProto& from);

  inline FactionSimpleProto& operator=(const FactionSimpleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionSimpleProto& default_instance();

  void Swap(FactionSimpleProto* other);

  // implements Message ----------------------------------------------

  FactionSimpleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionSimpleProto& from);
  void MergeFrom(const FactionSimpleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 leader_cid = 4;
  inline bool has_leader_cid() const;
  inline void clear_leader_cid();
  static const int kLeaderCidFieldNumber = 4;
  inline ::google::protobuf::uint64 leader_cid() const;
  inline void set_leader_cid(::google::protobuf::uint64 value);

  // optional bytes leader_name = 5;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 5;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const void* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 mem_count = 7;
  inline bool has_mem_count() const;
  inline void clear_mem_count();
  static const int kMemCountFieldNumber = 7;
  inline ::google::protobuf::int32 mem_count() const;
  inline void set_mem_count(::google::protobuf::int32 value);

  // optional uint64 fight = 8;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 8;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional int32 apply_type = 9;
  inline bool has_apply_type() const;
  inline void clear_apply_type();
  static const int kApplyTypeFieldNumber = 9;
  inline ::google::protobuf::int32 apply_type() const;
  inline void set_apply_type(::google::protobuf::int32 value);

  // optional int32 apply_minlev = 10;
  inline bool has_apply_minlev() const;
  inline void clear_apply_minlev();
  static const int kApplyMinlevFieldNumber = 10;
  inline ::google::protobuf::int32 apply_minlev() const;
  inline void set_apply_minlev(::google::protobuf::int32 value);

  // optional uint64 apply_fight = 11;
  inline bool has_apply_fight() const;
  inline void clear_apply_fight();
  static const int kApplyFightFieldNumber = 11;
  inline ::google::protobuf::uint64 apply_fight() const;
  inline void set_apply_fight(::google::protobuf::uint64 value);

  // optional .proto_ff.FactionMemSimpleListProto mem = 12;
  inline bool has_mem() const;
  inline void clear_mem();
  static const int kMemFieldNumber = 12;
  inline const ::proto_ff::FactionMemSimpleListProto& mem() const;
  inline ::proto_ff::FactionMemSimpleListProto* mutable_mem();
  inline ::proto_ff::FactionMemSimpleListProto* release_mem();
  inline void set_allocated_mem(::proto_ff::FactionMemSimpleListProto* mem);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionSimpleProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_leader_cid();
  inline void clear_has_leader_cid();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_mem_count();
  inline void clear_has_mem_count();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_apply_type();
  inline void clear_has_apply_type();
  inline void set_has_apply_minlev();
  inline void clear_has_apply_minlev();
  inline void set_has_apply_fight();
  inline void clear_has_apply_fight();
  inline void set_has_mem();
  inline void clear_has_mem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint64 leader_cid_;
  ::std::string* leader_name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 mem_count_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::int32 apply_type_;
  ::google::protobuf::int32 apply_minlev_;
  ::google::protobuf::uint64 apply_fight_;
  ::proto_ff::FactionMemSimpleListProto* mem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionSimpleProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionRecordProto : public ::google::protobuf::Message {
 public:
  FactionRecordProto();
  virtual ~FactionRecordProto();

  FactionRecordProto(const FactionRecordProto& from);

  inline FactionRecordProto& operator=(const FactionRecordProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionRecordProto& default_instance();

  void Swap(FactionRecordProto* other);

  // implements Message ----------------------------------------------

  FactionRecordProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionRecordProto& from);
  void MergeFrom(const FactionRecordProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional int32 op = 3;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 3;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional int64 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionRecordProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int32 op_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionRecordProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionRecordListProto : public ::google::protobuf::Message {
 public:
  FactionRecordListProto();
  virtual ~FactionRecordListProto();

  FactionRecordListProto(const FactionRecordListProto& from);

  inline FactionRecordListProto& operator=(const FactionRecordListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionRecordListProto& default_instance();

  void Swap(FactionRecordListProto* other);

  // implements Message ----------------------------------------------

  FactionRecordListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionRecordListProto& from);
  void MergeFrom(const FactionRecordListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionRecordProto record_lst = 1;
  inline int record_lst_size() const;
  inline void clear_record_lst();
  static const int kRecordLstFieldNumber = 1;
  inline const ::proto_ff::FactionRecordProto& record_lst(int index) const;
  inline ::proto_ff::FactionRecordProto* mutable_record_lst(int index);
  inline ::proto_ff::FactionRecordProto* add_record_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto >&
      record_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto >*
      mutable_record_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionRecordListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto > record_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionRecordListProto* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SyncLoginRsp : public ::google::protobuf::Message {
 public:
  Faction_SyncLoginRsp();
  virtual ~Faction_SyncLoginRsp();

  Faction_SyncLoginRsp(const Faction_SyncLoginRsp& from);

  inline Faction_SyncLoginRsp& operator=(const Faction_SyncLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SyncLoginRsp& default_instance();

  void Swap(Faction_SyncLoginRsp* other);

  // implements Message ----------------------------------------------

  Faction_SyncLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SyncLoginRsp& from);
  void MergeFrom(const Faction_SyncLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FactionProto& info() const;
  inline ::proto_ff::FactionProto* mutable_info();
  inline ::proto_ff::FactionProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionProto* info);

  // optional int32 duty = 2;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 2;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SyncLoginRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_duty();
  inline void clear_has_duty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionProto* info_;
  ::google::protobuf::int32 duty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SyncLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SyncInfoRsp : public ::google::protobuf::Message {
 public:
  Faction_SyncInfoRsp();
  virtual ~Faction_SyncInfoRsp();

  Faction_SyncInfoRsp(const Faction_SyncInfoRsp& from);

  inline Faction_SyncInfoRsp& operator=(const Faction_SyncInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SyncInfoRsp& default_instance();

  void Swap(Faction_SyncInfoRsp* other);

  // implements Message ----------------------------------------------

  Faction_SyncInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SyncInfoRsp& from);
  void MergeFrom(const Faction_SyncInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 duty = 3;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 3;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SyncInfoRsp)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_duty();
  inline void clear_has_duty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 duty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SyncInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InfoReq : public ::google::protobuf::Message {
 public:
  Faction_InfoReq();
  virtual ~Faction_InfoReq();

  Faction_InfoReq(const Faction_InfoReq& from);

  inline Faction_InfoReq& operator=(const Faction_InfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InfoReq& default_instance();

  void Swap(Faction_InfoReq* other);

  // implements Message ----------------------------------------------

  Faction_InfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InfoReq& from);
  void MergeFrom(const Faction_InfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InfoRsp : public ::google::protobuf::Message {
 public:
  Faction_InfoRsp();
  virtual ~Faction_InfoRsp();

  Faction_InfoRsp(const Faction_InfoRsp& from);

  inline Faction_InfoRsp& operator=(const Faction_InfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InfoRsp& default_instance();

  void Swap(Faction_InfoRsp* other);

  // implements Message ----------------------------------------------

  Faction_InfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InfoRsp& from);
  void MergeFrom(const Faction_InfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionProto info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::FactionProto& info() const;
  inline ::proto_ff::FactionProto* mutable_info();
  inline ::proto_ff::FactionProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InfoRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionProto* info_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InfoListReq : public ::google::protobuf::Message {
 public:
  Faction_InfoListReq();
  virtual ~Faction_InfoListReq();

  Faction_InfoListReq(const Faction_InfoListReq& from);

  inline Faction_InfoListReq& operator=(const Faction_InfoListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InfoListReq& default_instance();

  void Swap(Faction_InfoListReq* other);

  // implements Message ----------------------------------------------

  Faction_InfoListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InfoListReq& from);
  void MergeFrom(const Faction_InfoListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InfoListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InfoListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InfoListRsp : public ::google::protobuf::Message {
 public:
  Faction_InfoListRsp();
  virtual ~Faction_InfoListRsp();

  Faction_InfoListRsp(const Faction_InfoListRsp& from);

  inline Faction_InfoListRsp& operator=(const Faction_InfoListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InfoListRsp& default_instance();

  void Swap(Faction_InfoListRsp* other);

  // implements Message ----------------------------------------------

  Faction_InfoListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InfoListRsp& from);
  void MergeFrom(const Faction_InfoListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionListProto info_lst = 1;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 1;
  inline const ::proto_ff::FactionListProto& info_lst(int index) const;
  inline ::proto_ff::FactionListProto* mutable_info_lst(int index);
  inline ::proto_ff::FactionListProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto >*
      mutable_info_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InfoListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto > info_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InfoListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SimpleReq : public ::google::protobuf::Message {
 public:
  Faction_SimpleReq();
  virtual ~Faction_SimpleReq();

  Faction_SimpleReq(const Faction_SimpleReq& from);

  inline Faction_SimpleReq& operator=(const Faction_SimpleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SimpleReq& default_instance();

  void Swap(Faction_SimpleReq* other);

  // implements Message ----------------------------------------------

  Faction_SimpleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SimpleReq& from);
  void MergeFrom(const Faction_SimpleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SimpleReq)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SimpleReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SimpleRsp : public ::google::protobuf::Message {
 public:
  Faction_SimpleRsp();
  virtual ~Faction_SimpleRsp();

  Faction_SimpleRsp(const Faction_SimpleRsp& from);

  inline Faction_SimpleRsp& operator=(const Faction_SimpleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SimpleRsp& default_instance();

  void Swap(Faction_SimpleRsp* other);

  // implements Message ----------------------------------------------

  Faction_SimpleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SimpleRsp& from);
  void MergeFrom(const Faction_SimpleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionSimpleProto simple = 2;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 2;
  inline const ::proto_ff::FactionSimpleProto& simple() const;
  inline ::proto_ff::FactionSimpleProto* mutable_simple();
  inline ::proto_ff::FactionSimpleProto* release_simple();
  inline void set_allocated_simple(::proto_ff::FactionSimpleProto* simple);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SimpleRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_simple();
  inline void clear_has_simple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionSimpleProto* simple_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SimpleRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_MemListReq : public ::google::protobuf::Message {
 public:
  Faction_MemListReq();
  virtual ~Faction_MemListReq();

  Faction_MemListReq(const Faction_MemListReq& from);

  inline Faction_MemListReq& operator=(const Faction_MemListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_MemListReq& default_instance();

  void Swap(Faction_MemListReq* other);

  // implements Message ----------------------------------------------

  Faction_MemListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_MemListReq& from);
  void MergeFrom(const Faction_MemListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_MemListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_MemListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_MemListRsp : public ::google::protobuf::Message {
 public:
  Faction_MemListRsp();
  virtual ~Faction_MemListRsp();

  Faction_MemListRsp(const Faction_MemListRsp& from);

  inline Faction_MemListRsp& operator=(const Faction_MemListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_MemListRsp& default_instance();

  void Swap(Faction_MemListRsp* other);

  // implements Message ----------------------------------------------

  Faction_MemListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_MemListRsp& from);
  void MergeFrom(const Faction_MemListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionMemListProto mem_lst = 2;
  inline bool has_mem_lst() const;
  inline void clear_mem_lst();
  static const int kMemLstFieldNumber = 2;
  inline const ::proto_ff::FactionMemListProto& mem_lst() const;
  inline ::proto_ff::FactionMemListProto* mutable_mem_lst();
  inline ::proto_ff::FactionMemListProto* release_mem_lst();
  inline void set_allocated_mem_lst(::proto_ff::FactionMemListProto* mem_lst);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_MemListRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_mem_lst();
  inline void clear_has_mem_lst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionMemListProto* mem_lst_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_MemListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_CreateReq : public ::google::protobuf::Message {
 public:
  Faction_CreateReq();
  virtual ~Faction_CreateReq();

  Faction_CreateReq(const Faction_CreateReq& from);

  inline Faction_CreateReq& operator=(const Faction_CreateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_CreateReq& default_instance();

  void Swap(Faction_CreateReq* other);

  // implements Message ----------------------------------------------

  Faction_CreateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_CreateReq& from);
  void MergeFrom(const Faction_CreateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_CreateReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_CreateReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_CreateRsp : public ::google::protobuf::Message {
 public:
  Faction_CreateRsp();
  virtual ~Faction_CreateRsp();

  Faction_CreateRsp(const Faction_CreateRsp& from);

  inline Faction_CreateRsp& operator=(const Faction_CreateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_CreateRsp& default_instance();

  void Swap(Faction_CreateRsp* other);

  // implements Message ----------------------------------------------

  Faction_CreateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_CreateRsp& from);
  void MergeFrom(const Faction_CreateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionProto info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::FactionProto& info() const;
  inline ::proto_ff::FactionProto* mutable_info();
  inline ::proto_ff::FactionProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_CreateRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionProto* info_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_CreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyListReq : public ::google::protobuf::Message {
 public:
  Faction_ApplyListReq();
  virtual ~Faction_ApplyListReq();

  Faction_ApplyListReq(const Faction_ApplyListReq& from);

  inline Faction_ApplyListReq& operator=(const Faction_ApplyListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyListReq& default_instance();

  void Swap(Faction_ApplyListReq* other);

  // implements Message ----------------------------------------------

  Faction_ApplyListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyListReq& from);
  void MergeFrom(const Faction_ApplyListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyListRsp : public ::google::protobuf::Message {
 public:
  Faction_ApplyListRsp();
  virtual ~Faction_ApplyListRsp();

  Faction_ApplyListRsp(const Faction_ApplyListRsp& from);

  inline Faction_ApplyListRsp& operator=(const Faction_ApplyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyListRsp& default_instance();

  void Swap(Faction_ApplyListRsp* other);

  // implements Message ----------------------------------------------

  Faction_ApplyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyListRsp& from);
  void MergeFrom(const Faction_ApplyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionApplyListProto info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::FactionApplyListProto& info() const;
  inline ::proto_ff::FactionApplyListProto* mutable_info();
  inline ::proto_ff::FactionApplyListProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionApplyListProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyListRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionApplyListProto* info_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyJoinReq : public ::google::protobuf::Message {
 public:
  Faction_ApplyJoinReq();
  virtual ~Faction_ApplyJoinReq();

  Faction_ApplyJoinReq(const Faction_ApplyJoinReq& from);

  inline Faction_ApplyJoinReq& operator=(const Faction_ApplyJoinReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyJoinReq& default_instance();

  void Swap(Faction_ApplyJoinReq* other);

  // implements Message ----------------------------------------------

  Faction_ApplyJoinReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyJoinReq& from);
  void MergeFrom(const Faction_ApplyJoinReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyJoinReq)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyJoinReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyJoinRsp : public ::google::protobuf::Message {
 public:
  Faction_ApplyJoinRsp();
  virtual ~Faction_ApplyJoinRsp();

  Faction_ApplyJoinRsp(const Faction_ApplyJoinRsp& from);

  inline Faction_ApplyJoinRsp& operator=(const Faction_ApplyJoinRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyJoinRsp& default_instance();

  void Swap(Faction_ApplyJoinRsp* other);

  // implements Message ----------------------------------------------

  Faction_ApplyJoinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyJoinRsp& from);
  void MergeFrom(const Faction_ApplyJoinRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyJoinRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyJoinRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyOperateReq : public ::google::protobuf::Message {
 public:
  Faction_ApplyOperateReq();
  virtual ~Faction_ApplyOperateReq();

  Faction_ApplyOperateReq(const Faction_ApplyOperateReq& from);

  inline Faction_ApplyOperateReq& operator=(const Faction_ApplyOperateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyOperateReq& default_instance();

  void Swap(Faction_ApplyOperateReq* other);

  // implements Message ----------------------------------------------

  Faction_ApplyOperateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyOperateReq& from);
  void MergeFrom(const Faction_ApplyOperateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyOperateReq)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 op_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyOperateReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyOperateRsp : public ::google::protobuf::Message {
 public:
  Faction_ApplyOperateRsp();
  virtual ~Faction_ApplyOperateRsp();

  Faction_ApplyOperateRsp(const Faction_ApplyOperateRsp& from);

  inline Faction_ApplyOperateRsp& operator=(const Faction_ApplyOperateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyOperateRsp& default_instance();

  void Swap(Faction_ApplyOperateRsp* other);

  // implements Message ----------------------------------------------

  Faction_ApplyOperateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyOperateRsp& from);
  void MergeFrom(const Faction_ApplyOperateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional .proto_ff.FactionMemListProto mem_lst = 4;
  inline bool has_mem_lst() const;
  inline void clear_mem_lst();
  static const int kMemLstFieldNumber = 4;
  inline const ::proto_ff::FactionMemListProto& mem_lst() const;
  inline ::proto_ff::FactionMemListProto* mutable_mem_lst();
  inline ::proto_ff::FactionMemListProto* release_mem_lst();
  inline void set_allocated_mem_lst(::proto_ff::FactionMemListProto* mem_lst);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyOperateRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_mem_lst();
  inline void clear_has_mem_lst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::uint64 cid_;
  ::proto_ff::FactionMemListProto* mem_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyOperateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_KickReq : public ::google::protobuf::Message {
 public:
  Faction_KickReq();
  virtual ~Faction_KickReq();

  Faction_KickReq(const Faction_KickReq& from);

  inline Faction_KickReq& operator=(const Faction_KickReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_KickReq& default_instance();

  void Swap(Faction_KickReq* other);

  // implements Message ----------------------------------------------

  Faction_KickReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_KickReq& from);
  void MergeFrom(const Faction_KickReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 cid_lst = 1;
  inline int cid_lst_size() const;
  inline void clear_cid_lst();
  static const int kCidLstFieldNumber = 1;
  inline ::google::protobuf::uint64 cid_lst(int index) const;
  inline void set_cid_lst(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_KickReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_KickReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_KickRsp : public ::google::protobuf::Message {
 public:
  Faction_KickRsp();
  virtual ~Faction_KickRsp();

  Faction_KickRsp(const Faction_KickRsp& from);

  inline Faction_KickRsp& operator=(const Faction_KickRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_KickRsp& default_instance();

  void Swap(Faction_KickRsp* other);

  // implements Message ----------------------------------------------

  Faction_KickRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_KickRsp& from);
  void MergeFrom(const Faction_KickRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated uint64 cid_lst = 2;
  inline int cid_lst_size() const;
  inline void clear_cid_lst();
  static const int kCidLstFieldNumber = 2;
  inline ::google::protobuf::uint64 cid_lst(int index) const;
  inline void set_cid_lst(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_KickRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_KickRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_QuitReq : public ::google::protobuf::Message {
 public:
  Faction_QuitReq();
  virtual ~Faction_QuitReq();

  Faction_QuitReq(const Faction_QuitReq& from);

  inline Faction_QuitReq& operator=(const Faction_QuitReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_QuitReq& default_instance();

  void Swap(Faction_QuitReq* other);

  // implements Message ----------------------------------------------

  Faction_QuitReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_QuitReq& from);
  void MergeFrom(const Faction_QuitReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_QuitReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_QuitReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_QuitRsp : public ::google::protobuf::Message {
 public:
  Faction_QuitRsp();
  virtual ~Faction_QuitRsp();

  Faction_QuitRsp(const Faction_QuitRsp& from);

  inline Faction_QuitRsp& operator=(const Faction_QuitRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_QuitRsp& default_instance();

  void Swap(Faction_QuitRsp* other);

  // implements Message ----------------------------------------------

  Faction_QuitRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_QuitRsp& from);
  void MergeFrom(const Faction_QuitRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_QuitRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_QuitRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AppointReq : public ::google::protobuf::Message {
 public:
  Faction_AppointReq();
  virtual ~Faction_AppointReq();

  Faction_AppointReq(const Faction_AppointReq& from);

  inline Faction_AppointReq& operator=(const Faction_AppointReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AppointReq& default_instance();

  void Swap(Faction_AppointReq* other);

  // implements Message ----------------------------------------------

  Faction_AppointReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AppointReq& from);
  void MergeFrom(const Faction_AppointReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 duty = 2;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 2;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AppointReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_duty();
  inline void clear_has_duty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 duty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AppointReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AppointRsp : public ::google::protobuf::Message {
 public:
  Faction_AppointRsp();
  virtual ~Faction_AppointRsp();

  Faction_AppointRsp(const Faction_AppointRsp& from);

  inline Faction_AppointRsp& operator=(const Faction_AppointRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AppointRsp& default_instance();

  void Swap(Faction_AppointRsp* other);

  // implements Message ----------------------------------------------

  Faction_AppointRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AppointRsp& from);
  void MergeFrom(const Faction_AppointRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 duty = 3;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 3;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // optional int32 self_duty = 4;
  inline bool has_self_duty() const;
  inline void clear_self_duty();
  static const int kSelfDutyFieldNumber = 4;
  inline ::google::protobuf::int32 self_duty() const;
  inline void set_self_duty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AppointRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_self_duty();
  inline void clear_has_self_duty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::int32 self_duty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AppointRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ChgNoticeReq : public ::google::protobuf::Message {
 public:
  Faction_ChgNoticeReq();
  virtual ~Faction_ChgNoticeReq();

  Faction_ChgNoticeReq(const Faction_ChgNoticeReq& from);

  inline Faction_ChgNoticeReq& operator=(const Faction_ChgNoticeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ChgNoticeReq& default_instance();

  void Swap(Faction_ChgNoticeReq* other);

  // implements Message ----------------------------------------------

  Faction_ChgNoticeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ChgNoticeReq& from);
  void MergeFrom(const Faction_ChgNoticeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes notice = 1;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 1;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ChgNoticeReq)
 private:
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ChgNoticeReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ChgNoticeRsp : public ::google::protobuf::Message {
 public:
  Faction_ChgNoticeRsp();
  virtual ~Faction_ChgNoticeRsp();

  Faction_ChgNoticeRsp(const Faction_ChgNoticeRsp& from);

  inline Faction_ChgNoticeRsp& operator=(const Faction_ChgNoticeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ChgNoticeRsp& default_instance();

  void Swap(Faction_ChgNoticeRsp* other);

  // implements Message ----------------------------------------------

  Faction_ChgNoticeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ChgNoticeRsp& from);
  void MergeFrom(const Faction_ChgNoticeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional bytes notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ChgNoticeRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ChgNoticeRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SetApplyReq : public ::google::protobuf::Message {
 public:
  Faction_SetApplyReq();
  virtual ~Faction_SetApplyReq();

  Faction_SetApplyReq(const Faction_SetApplyReq& from);

  inline Faction_SetApplyReq& operator=(const Faction_SetApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SetApplyReq& default_instance();

  void Swap(Faction_SetApplyReq* other);

  // implements Message ----------------------------------------------

  Faction_SetApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SetApplyReq& from);
  void MergeFrom(const Faction_SetApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SetApplyReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint64 fight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SetApplyReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SetApplyRsp : public ::google::protobuf::Message {
 public:
  Faction_SetApplyRsp();
  virtual ~Faction_SetApplyRsp();

  Faction_SetApplyRsp(const Faction_SetApplyRsp& from);

  inline Faction_SetApplyRsp& operator=(const Faction_SetApplyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SetApplyRsp& default_instance();

  void Swap(Faction_SetApplyRsp* other);

  // implements Message ----------------------------------------------

  Faction_SetApplyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SetApplyRsp& from);
  void MergeFrom(const Faction_SetApplyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 fight = 4;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 4;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SetApplyRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SetApplyRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_OneKeyApplyReq : public ::google::protobuf::Message {
 public:
  Faction_OneKeyApplyReq();
  virtual ~Faction_OneKeyApplyReq();

  Faction_OneKeyApplyReq(const Faction_OneKeyApplyReq& from);

  inline Faction_OneKeyApplyReq& operator=(const Faction_OneKeyApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_OneKeyApplyReq& default_instance();

  void Swap(Faction_OneKeyApplyReq* other);

  // implements Message ----------------------------------------------

  Faction_OneKeyApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_OneKeyApplyReq& from);
  void MergeFrom(const Faction_OneKeyApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_OneKeyApplyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_OneKeyApplyReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_OneKeyApplyRsp : public ::google::protobuf::Message {
 public:
  Faction_OneKeyApplyRsp();
  virtual ~Faction_OneKeyApplyRsp();

  Faction_OneKeyApplyRsp(const Faction_OneKeyApplyRsp& from);

  inline Faction_OneKeyApplyRsp& operator=(const Faction_OneKeyApplyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_OneKeyApplyRsp& default_instance();

  void Swap(Faction_OneKeyApplyRsp* other);

  // implements Message ----------------------------------------------

  Faction_OneKeyApplyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_OneKeyApplyRsp& from);
  void MergeFrom(const Faction_OneKeyApplyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated uint32 id_lst = 2;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 2;
  inline ::google::protobuf::uint32 id_lst(int index) const;
  inline void set_id_lst(int index, ::google::protobuf::uint32 value);
  inline void add_id_lst(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_OneKeyApplyRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_lst_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_OneKeyApplyRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ChgNameReq : public ::google::protobuf::Message {
 public:
  Faction_ChgNameReq();
  virtual ~Faction_ChgNameReq();

  Faction_ChgNameReq(const Faction_ChgNameReq& from);

  inline Faction_ChgNameReq& operator=(const Faction_ChgNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ChgNameReq& default_instance();

  void Swap(Faction_ChgNameReq* other);

  // implements Message ----------------------------------------------

  Faction_ChgNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ChgNameReq& from);
  void MergeFrom(const Faction_ChgNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ChgNameReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ChgNameReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ChgNameRsp : public ::google::protobuf::Message {
 public:
  Faction_ChgNameRsp();
  virtual ~Faction_ChgNameRsp();

  Faction_ChgNameRsp(const Faction_ChgNameRsp& from);

  inline Faction_ChgNameRsp& operator=(const Faction_ChgNameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ChgNameRsp& default_instance();

  void Swap(Faction_ChgNameRsp* other);

  // implements Message ----------------------------------------------

  Faction_ChgNameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ChgNameRsp& from);
  void MergeFrom(const Faction_ChgNameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ChgNameRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ChgNameRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_NewApplyNotify : public ::google::protobuf::Message {
 public:
  Faction_NewApplyNotify();
  virtual ~Faction_NewApplyNotify();

  Faction_NewApplyNotify(const Faction_NewApplyNotify& from);

  inline Faction_NewApplyNotify& operator=(const Faction_NewApplyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_NewApplyNotify& default_instance();

  void Swap(Faction_NewApplyNotify* other);

  // implements Message ----------------------------------------------

  Faction_NewApplyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_NewApplyNotify& from);
  void MergeFrom(const Faction_NewApplyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_NewApplyNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_NewApplyNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InviteJoinReq : public ::google::protobuf::Message {
 public:
  Faction_InviteJoinReq();
  virtual ~Faction_InviteJoinReq();

  Faction_InviteJoinReq(const Faction_InviteJoinReq& from);

  inline Faction_InviteJoinReq& operator=(const Faction_InviteJoinReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InviteJoinReq& default_instance();

  void Swap(Faction_InviteJoinReq* other);

  // implements Message ----------------------------------------------

  Faction_InviteJoinReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InviteJoinReq& from);
  void MergeFrom(const Faction_InviteJoinReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InviteJoinReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InviteJoinReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InviteJoinRsp : public ::google::protobuf::Message {
 public:
  Faction_InviteJoinRsp();
  virtual ~Faction_InviteJoinRsp();

  Faction_InviteJoinRsp(const Faction_InviteJoinRsp& from);

  inline Faction_InviteJoinRsp& operator=(const Faction_InviteJoinRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InviteJoinRsp& default_instance();

  void Swap(Faction_InviteJoinRsp* other);

  // implements Message ----------------------------------------------

  Faction_InviteJoinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InviteJoinRsp& from);
  void MergeFrom(const Faction_InviteJoinRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InviteJoinRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InviteJoinRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_IviteJoinNotify : public ::google::protobuf::Message {
 public:
  Faction_IviteJoinNotify();
  virtual ~Faction_IviteJoinNotify();

  Faction_IviteJoinNotify(const Faction_IviteJoinNotify& from);

  inline Faction_IviteJoinNotify& operator=(const Faction_IviteJoinNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_IviteJoinNotify& default_instance();

  void Swap(Faction_IviteJoinNotify* other);

  // implements Message ----------------------------------------------

  Faction_IviteJoinNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_IviteJoinNotify& from);
  void MergeFrom(const Faction_IviteJoinNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 faction_id = 3;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // required bytes faction_name = 4;
  inline bool has_faction_name() const;
  inline void clear_faction_name();
  static const int kFactionNameFieldNumber = 4;
  inline const ::std::string& faction_name() const;
  inline void set_faction_name(const ::std::string& value);
  inline void set_faction_name(const char* value);
  inline void set_faction_name(const void* value, size_t size);
  inline ::std::string* mutable_faction_name();
  inline ::std::string* release_faction_name();
  inline void set_allocated_faction_name(::std::string* faction_name);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_IviteJoinNotify)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_faction_name();
  inline void clear_has_faction_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::std::string* faction_name_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_IviteJoinNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_RecordListReq : public ::google::protobuf::Message {
 public:
  Faction_RecordListReq();
  virtual ~Faction_RecordListReq();

  Faction_RecordListReq(const Faction_RecordListReq& from);

  inline Faction_RecordListReq& operator=(const Faction_RecordListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_RecordListReq& default_instance();

  void Swap(Faction_RecordListReq* other);

  // implements Message ----------------------------------------------

  Faction_RecordListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_RecordListReq& from);
  void MergeFrom(const Faction_RecordListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_RecordListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_RecordListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_RecordListRsp : public ::google::protobuf::Message {
 public:
  Faction_RecordListRsp();
  virtual ~Faction_RecordListRsp();

  Faction_RecordListRsp(const Faction_RecordListRsp& from);

  inline Faction_RecordListRsp& operator=(const Faction_RecordListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_RecordListRsp& default_instance();

  void Swap(Faction_RecordListRsp* other);

  // implements Message ----------------------------------------------

  Faction_RecordListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_RecordListRsp& from);
  void MergeFrom(const Faction_RecordListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionRecordListProto lst = 2;
  inline bool has_lst() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 2;
  inline const ::proto_ff::FactionRecordListProto& lst() const;
  inline ::proto_ff::FactionRecordListProto* mutable_lst();
  inline ::proto_ff::FactionRecordListProto* release_lst();
  inline void set_allocated_lst(::proto_ff::FactionRecordListProto* lst);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_RecordListRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_lst();
  inline void clear_has_lst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionRecordListProto* lst_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_RecordListRsp* default_instance_;
};
// -------------------------------------------------------------------

class CL_FactionRoleUpdateRsp : public ::google::protobuf::Message {
 public:
  CL_FactionRoleUpdateRsp();
  virtual ~CL_FactionRoleUpdateRsp();

  CL_FactionRoleUpdateRsp(const CL_FactionRoleUpdateRsp& from);

  inline CL_FactionRoleUpdateRsp& operator=(const CL_FactionRoleUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CL_FactionRoleUpdateRsp& default_instance();

  void Swap(CL_FactionRoleUpdateRsp* other);

  // implements Message ----------------------------------------------

  CL_FactionRoleUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CL_FactionRoleUpdateRsp& from);
  void MergeFrom(const CL_FactionRoleUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 duty = 4;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 4;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // required int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required uint64 leader = 6;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 6;
  inline ::google::protobuf::uint64 leader() const;
  inline void set_leader(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CL_FactionRoleUpdateRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_leader();
  inline void clear_has_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::uint64 leader_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static CL_FactionRoleUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class LC_FactionCreate : public ::google::protobuf::Message {
 public:
  LC_FactionCreate();
  virtual ~LC_FactionCreate();

  LC_FactionCreate(const LC_FactionCreate& from);

  inline LC_FactionCreate& operator=(const LC_FactionCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LC_FactionCreate& default_instance();

  void Swap(LC_FactionCreate* other);

  // implements Message ----------------------------------------------

  LC_FactionCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LC_FactionCreate& from);
  void MergeFrom(const LC_FactionCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes notice = 3;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 3;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto_ff.LC_FactionCreate)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LC_FactionCreate* default_instance_;
};
// -------------------------------------------------------------------

class CL_FactionCreateResult : public ::google::protobuf::Message {
 public:
  CL_FactionCreateResult();
  virtual ~CL_FactionCreateResult();

  CL_FactionCreateResult(const CL_FactionCreateResult& from);

  inline CL_FactionCreateResult& operator=(const CL_FactionCreateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CL_FactionCreateResult& default_instance();

  void Swap(CL_FactionCreateResult* other);

  // implements Message ----------------------------------------------

  CL_FactionCreateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CL_FactionCreateResult& from);
  void MergeFrom(const CL_FactionCreateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CL_FactionCreateResult)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static CL_FactionCreateResult* default_instance_;
};
// -------------------------------------------------------------------

class LC_FactionChgName : public ::google::protobuf::Message {
 public:
  LC_FactionChgName();
  virtual ~LC_FactionChgName();

  LC_FactionChgName(const LC_FactionChgName& from);

  inline LC_FactionChgName& operator=(const LC_FactionChgName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LC_FactionChgName& default_instance();

  void Swap(LC_FactionChgName* other);

  // implements Message ----------------------------------------------

  LC_FactionChgName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LC_FactionChgName& from);
  void MergeFrom(const LC_FactionChgName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.LC_FactionChgName)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LC_FactionChgName* default_instance_;
};
// -------------------------------------------------------------------

class CL_FactionChgNameResult : public ::google::protobuf::Message {
 public:
  CL_FactionChgNameResult();
  virtual ~CL_FactionChgNameResult();

  CL_FactionChgNameResult(const CL_FactionChgNameResult& from);

  inline CL_FactionChgNameResult& operator=(const CL_FactionChgNameResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CL_FactionChgNameResult& default_instance();

  void Swap(CL_FactionChgNameResult* other);

  // implements Message ----------------------------------------------

  CL_FactionChgNameResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CL_FactionChgNameResult& from);
  void MergeFrom(const CL_FactionChgNameResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CL_FactionChgNameResult)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static CL_FactionChgNameResult* default_instance_;
};
// ===================================================================


// ===================================================================

// FactionListProto

// optional uint32 faction_id = 1;
inline bool FactionListProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionListProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionListProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionListProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionListProto::faction_id() const {
  return faction_id_;
}
inline void FactionListProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool FactionListProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionListProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionListProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionListProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionListProto::name() const {
  return *name_;
}
inline void FactionListProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionListProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionListProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionListProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionListProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionListProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rank = 3;
inline bool FactionListProto::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionListProto::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionListProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionListProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionListProto::rank() const {
  return rank_;
}
inline void FactionListProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 leader_cid = 4;
inline bool FactionListProto::has_leader_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionListProto::set_has_leader_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionListProto::clear_has_leader_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionListProto::clear_leader_cid() {
  leader_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_cid();
}
inline ::google::protobuf::uint64 FactionListProto::leader_cid() const {
  return leader_cid_;
}
inline void FactionListProto::set_leader_cid(::google::protobuf::uint64 value) {
  set_has_leader_cid();
  leader_cid_ = value;
}

// optional bytes leader_name = 5;
inline bool FactionListProto::has_leader_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionListProto::set_has_leader_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionListProto::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionListProto::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& FactionListProto::leader_name() const {
  return *leader_name_;
}
inline void FactionListProto::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionListProto::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionListProto::set_leader_name(const void* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionListProto::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* FactionListProto::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionListProto::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 6;
inline bool FactionListProto::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionListProto::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionListProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionListProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionListProto::level() const {
  return level_;
}
inline void FactionListProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 mem_count = 7;
inline bool FactionListProto::has_mem_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionListProto::set_has_mem_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionListProto::clear_has_mem_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionListProto::clear_mem_count() {
  mem_count_ = 0;
  clear_has_mem_count();
}
inline ::google::protobuf::int32 FactionListProto::mem_count() const {
  return mem_count_;
}
inline void FactionListProto::set_mem_count(::google::protobuf::int32 value) {
  set_has_mem_count();
  mem_count_ = value;
}

// optional uint64 fight = 8;
inline bool FactionListProto::has_fight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionListProto::set_has_fight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionListProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionListProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionListProto::fight() const {
  return fight_;
}
inline void FactionListProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 already_apply = 9;
inline bool FactionListProto::has_already_apply() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionListProto::set_has_already_apply() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionListProto::clear_has_already_apply() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionListProto::clear_already_apply() {
  already_apply_ = 0;
  clear_has_already_apply();
}
inline ::google::protobuf::int32 FactionListProto::already_apply() const {
  return already_apply_;
}
inline void FactionListProto::set_already_apply(::google::protobuf::int32 value) {
  set_has_already_apply();
  already_apply_ = value;
}

// -------------------------------------------------------------------

// FactionProto

// optional uint32 faction_id = 1;
inline bool FactionProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionProto::faction_id() const {
  return faction_id_;
}
inline void FactionProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool FactionProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionProto::name() const {
  return *name_;
}
inline void FactionProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool FactionProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionProto::level() const {
  return level_;
}
inline void FactionProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 rank = 4;
inline bool FactionProto::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionProto::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionProto::rank() const {
  return rank_;
}
inline void FactionProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 mem_count = 5;
inline bool FactionProto::has_mem_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionProto::set_has_mem_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionProto::clear_has_mem_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionProto::clear_mem_count() {
  mem_count_ = 0;
  clear_has_mem_count();
}
inline ::google::protobuf::int32 FactionProto::mem_count() const {
  return mem_count_;
}
inline void FactionProto::set_mem_count(::google::protobuf::int32 value) {
  set_has_mem_count();
  mem_count_ = value;
}

// optional uint64 fight = 6;
inline bool FactionProto::has_fight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionProto::set_has_fight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionProto::fight() const {
  return fight_;
}
inline void FactionProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 grade = 7;
inline bool FactionProto::has_grade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionProto::set_has_grade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionProto::clear_has_grade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionProto::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 FactionProto::grade() const {
  return grade_;
}
inline void FactionProto::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint64 exp = 8;
inline bool FactionProto::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionProto::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionProto::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionProto::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 FactionProto::exp() const {
  return exp_;
}
inline void FactionProto::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
}

// optional string notice = 9;
inline bool FactionProto::has_notice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionProto::set_has_notice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionProto::clear_has_notice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionProto::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& FactionProto::notice() const {
  return *notice_;
}
inline void FactionProto::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void FactionProto::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void FactionProto::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionProto::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* FactionProto::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionProto::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 leader_cid = 10;
inline bool FactionProto::has_leader_cid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FactionProto::set_has_leader_cid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FactionProto::clear_has_leader_cid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FactionProto::clear_leader_cid() {
  leader_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_cid();
}
inline ::google::protobuf::uint64 FactionProto::leader_cid() const {
  return leader_cid_;
}
inline void FactionProto::set_leader_cid(::google::protobuf::uint64 value) {
  set_has_leader_cid();
  leader_cid_ = value;
}

// optional bytes leader_name = 11;
inline bool FactionProto::has_leader_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FactionProto::set_has_leader_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FactionProto::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FactionProto::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& FactionProto::leader_name() const {
  return *leader_name_;
}
inline void FactionProto::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionProto::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionProto::set_leader_name(const void* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionProto::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* FactionProto::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionProto::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto_ff.RoleFacadeProto facade = 12;
inline bool FactionProto::has_facade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FactionProto::set_has_facade() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FactionProto::clear_has_facade() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FactionProto::clear_facade() {
  if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
  clear_has_facade();
}
inline const ::proto_ff::RoleFacadeProto& FactionProto::facade() const {
  return facade_ != NULL ? *facade_ : *default_instance_->facade_;
}
inline ::proto_ff::RoleFacadeProto* FactionProto::mutable_facade() {
  set_has_facade();
  if (facade_ == NULL) facade_ = new ::proto_ff::RoleFacadeProto;
  return facade_;
}
inline ::proto_ff::RoleFacadeProto* FactionProto::release_facade() {
  clear_has_facade();
  ::proto_ff::RoleFacadeProto* temp = facade_;
  facade_ = NULL;
  return temp;
}
inline void FactionProto::set_allocated_facade(::proto_ff::RoleFacadeProto* facade) {
  delete facade_;
  facade_ = facade;
  if (facade) {
    set_has_facade();
  } else {
    clear_has_facade();
  }
}

// optional int32 apply_type = 13;
inline bool FactionProto::has_apply_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FactionProto::set_has_apply_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FactionProto::clear_has_apply_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FactionProto::clear_apply_type() {
  apply_type_ = 0;
  clear_has_apply_type();
}
inline ::google::protobuf::int32 FactionProto::apply_type() const {
  return apply_type_;
}
inline void FactionProto::set_apply_type(::google::protobuf::int32 value) {
  set_has_apply_type();
  apply_type_ = value;
}

// optional int32 apply_minlev = 14;
inline bool FactionProto::has_apply_minlev() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FactionProto::set_has_apply_minlev() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FactionProto::clear_has_apply_minlev() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FactionProto::clear_apply_minlev() {
  apply_minlev_ = 0;
  clear_has_apply_minlev();
}
inline ::google::protobuf::int32 FactionProto::apply_minlev() const {
  return apply_minlev_;
}
inline void FactionProto::set_apply_minlev(::google::protobuf::int32 value) {
  set_has_apply_minlev();
  apply_minlev_ = value;
}

// optional uint64 apply_fight = 15;
inline bool FactionProto::has_apply_fight() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FactionProto::set_has_apply_fight() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FactionProto::clear_has_apply_fight() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FactionProto::clear_apply_fight() {
  apply_fight_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_fight();
}
inline ::google::protobuf::uint64 FactionProto::apply_fight() const {
  return apply_fight_;
}
inline void FactionProto::set_apply_fight(::google::protobuf::uint64 value) {
  set_has_apply_fight();
  apply_fight_ = value;
}

// -------------------------------------------------------------------

// FactionMemProto

// optional uint64 cid = 1;
inline bool FactionMemProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMemProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMemProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMemProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionMemProto::cid() const {
  return cid_;
}
inline void FactionMemProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool FactionMemProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMemProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMemProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMemProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionMemProto::name() const {
  return *name_;
}
inline void FactionMemProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMemProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMemProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionMemProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionMemProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionMemProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prof = 3;
inline bool FactionMemProto::has_prof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMemProto::set_has_prof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMemProto::clear_has_prof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMemProto::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 FactionMemProto::prof() const {
  return prof_;
}
inline void FactionMemProto::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 vip_level = 4;
inline bool FactionMemProto::has_vip_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMemProto::set_has_vip_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMemProto::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMemProto::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 FactionMemProto::vip_level() const {
  return vip_level_;
}
inline void FactionMemProto::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 level = 5;
inline bool FactionMemProto::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionMemProto::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionMemProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionMemProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionMemProto::level() const {
  return level_;
}
inline void FactionMemProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 duty = 6;
inline bool FactionMemProto::has_duty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionMemProto::set_has_duty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionMemProto::clear_has_duty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionMemProto::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 FactionMemProto::duty() const {
  return duty_;
}
inline void FactionMemProto::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// optional uint64 fight = 7;
inline bool FactionMemProto::has_fight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionMemProto::set_has_fight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionMemProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionMemProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionMemProto::fight() const {
  return fight_;
}
inline void FactionMemProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional uint64 total_contri = 8;
inline bool FactionMemProto::has_total_contri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionMemProto::set_has_total_contri() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionMemProto::clear_has_total_contri() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionMemProto::clear_total_contri() {
  total_contri_ = GOOGLE_ULONGLONG(0);
  clear_has_total_contri();
}
inline ::google::protobuf::uint64 FactionMemProto::total_contri() const {
  return total_contri_;
}
inline void FactionMemProto::set_total_contri(::google::protobuf::uint64 value) {
  set_has_total_contri();
  total_contri_ = value;
}

// optional int32 is_online = 9;
inline bool FactionMemProto::has_is_online() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionMemProto::set_has_is_online() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionMemProto::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionMemProto::clear_is_online() {
  is_online_ = 0;
  clear_has_is_online();
}
inline ::google::protobuf::int32 FactionMemProto::is_online() const {
  return is_online_;
}
inline void FactionMemProto::set_is_online(::google::protobuf::int32 value) {
  set_has_is_online();
  is_online_ = value;
}

// optional uint64 logout_time = 10;
inline bool FactionMemProto::has_logout_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FactionMemProto::set_has_logout_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FactionMemProto::clear_has_logout_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FactionMemProto::clear_logout_time() {
  logout_time_ = GOOGLE_ULONGLONG(0);
  clear_has_logout_time();
}
inline ::google::protobuf::uint64 FactionMemProto::logout_time() const {
  return logout_time_;
}
inline void FactionMemProto::set_logout_time(::google::protobuf::uint64 value) {
  set_has_logout_time();
  logout_time_ = value;
}

// -------------------------------------------------------------------

// FactionMemListProto

// repeated .proto_ff.FactionMemProto mem_lst = 1;
inline int FactionMemListProto::mem_lst_size() const {
  return mem_lst_.size();
}
inline void FactionMemListProto::clear_mem_lst() {
  mem_lst_.Clear();
}
inline const ::proto_ff::FactionMemProto& FactionMemListProto::mem_lst(int index) const {
  return mem_lst_.Get(index);
}
inline ::proto_ff::FactionMemProto* FactionMemListProto::mutable_mem_lst(int index) {
  return mem_lst_.Mutable(index);
}
inline ::proto_ff::FactionMemProto* FactionMemListProto::add_mem_lst() {
  return mem_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto >&
FactionMemListProto::mem_lst() const {
  return mem_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto >*
FactionMemListProto::mutable_mem_lst() {
  return &mem_lst_;
}

// -------------------------------------------------------------------

// FactionApplyProto

// optional uint64 cid = 1;
inline bool FactionApplyProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionApplyProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionApplyProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionApplyProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionApplyProto::cid() const {
  return cid_;
}
inline void FactionApplyProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool FactionApplyProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionApplyProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionApplyProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionApplyProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionApplyProto::name() const {
  return *name_;
}
inline void FactionApplyProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionApplyProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionApplyProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionApplyProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionApplyProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionApplyProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool FactionApplyProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionApplyProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionApplyProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionApplyProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionApplyProto::level() const {
  return level_;
}
inline void FactionApplyProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 fight = 4;
inline bool FactionApplyProto::has_fight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionApplyProto::set_has_fight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionApplyProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionApplyProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionApplyProto::fight() const {
  return fight_;
}
inline void FactionApplyProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// FactionApplyListProto

// repeated .proto_ff.FactionApplyProto apply_lst = 1;
inline int FactionApplyListProto::apply_lst_size() const {
  return apply_lst_.size();
}
inline void FactionApplyListProto::clear_apply_lst() {
  apply_lst_.Clear();
}
inline const ::proto_ff::FactionApplyProto& FactionApplyListProto::apply_lst(int index) const {
  return apply_lst_.Get(index);
}
inline ::proto_ff::FactionApplyProto* FactionApplyListProto::mutable_apply_lst(int index) {
  return apply_lst_.Mutable(index);
}
inline ::proto_ff::FactionApplyProto* FactionApplyListProto::add_apply_lst() {
  return apply_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto >&
FactionApplyListProto::apply_lst() const {
  return apply_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto >*
FactionApplyListProto::mutable_apply_lst() {
  return &apply_lst_;
}

// -------------------------------------------------------------------

// FactionMemSimpleProto

// optional uint64 cid = 1;
inline bool FactionMemSimpleProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMemSimpleProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMemSimpleProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMemSimpleProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionMemSimpleProto::cid() const {
  return cid_;
}
inline void FactionMemSimpleProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool FactionMemSimpleProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMemSimpleProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMemSimpleProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMemSimpleProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionMemSimpleProto::name() const {
  return *name_;
}
inline void FactionMemSimpleProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMemSimpleProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMemSimpleProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionMemSimpleProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionMemSimpleProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionMemSimpleProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool FactionMemSimpleProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMemSimpleProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMemSimpleProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMemSimpleProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionMemSimpleProto::level() const {
  return level_;
}
inline void FactionMemSimpleProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 duty = 4;
inline bool FactionMemSimpleProto::has_duty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMemSimpleProto::set_has_duty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMemSimpleProto::clear_has_duty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMemSimpleProto::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 FactionMemSimpleProto::duty() const {
  return duty_;
}
inline void FactionMemSimpleProto::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// optional uint64 fight = 5;
inline bool FactionMemSimpleProto::has_fight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionMemSimpleProto::set_has_fight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionMemSimpleProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionMemSimpleProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionMemSimpleProto::fight() const {
  return fight_;
}
inline void FactionMemSimpleProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// FactionMemSimpleListProto

// repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
inline int FactionMemSimpleListProto::simple_lst_size() const {
  return simple_lst_.size();
}
inline void FactionMemSimpleListProto::clear_simple_lst() {
  simple_lst_.Clear();
}
inline const ::proto_ff::FactionMemSimpleProto& FactionMemSimpleListProto::simple_lst(int index) const {
  return simple_lst_.Get(index);
}
inline ::proto_ff::FactionMemSimpleProto* FactionMemSimpleListProto::mutable_simple_lst(int index) {
  return simple_lst_.Mutable(index);
}
inline ::proto_ff::FactionMemSimpleProto* FactionMemSimpleListProto::add_simple_lst() {
  return simple_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto >&
FactionMemSimpleListProto::simple_lst() const {
  return simple_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto >*
FactionMemSimpleListProto::mutable_simple_lst() {
  return &simple_lst_;
}

// -------------------------------------------------------------------

// FactionSimpleProto

// optional uint32 faction_id = 1;
inline bool FactionSimpleProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionSimpleProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionSimpleProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionSimpleProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionSimpleProto::faction_id() const {
  return faction_id_;
}
inline void FactionSimpleProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool FactionSimpleProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionSimpleProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionSimpleProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionSimpleProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionSimpleProto::name() const {
  return *name_;
}
inline void FactionSimpleProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionSimpleProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionSimpleProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionSimpleProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionSimpleProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionSimpleProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rank = 3;
inline bool FactionSimpleProto::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionSimpleProto::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionSimpleProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionSimpleProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionSimpleProto::rank() const {
  return rank_;
}
inline void FactionSimpleProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 leader_cid = 4;
inline bool FactionSimpleProto::has_leader_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionSimpleProto::set_has_leader_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionSimpleProto::clear_has_leader_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionSimpleProto::clear_leader_cid() {
  leader_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_cid();
}
inline ::google::protobuf::uint64 FactionSimpleProto::leader_cid() const {
  return leader_cid_;
}
inline void FactionSimpleProto::set_leader_cid(::google::protobuf::uint64 value) {
  set_has_leader_cid();
  leader_cid_ = value;
}

// optional bytes leader_name = 5;
inline bool FactionSimpleProto::has_leader_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionSimpleProto::set_has_leader_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionSimpleProto::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionSimpleProto::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& FactionSimpleProto::leader_name() const {
  return *leader_name_;
}
inline void FactionSimpleProto::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionSimpleProto::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionSimpleProto::set_leader_name(const void* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionSimpleProto::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* FactionSimpleProto::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionSimpleProto::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 6;
inline bool FactionSimpleProto::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionSimpleProto::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionSimpleProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionSimpleProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionSimpleProto::level() const {
  return level_;
}
inline void FactionSimpleProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 mem_count = 7;
inline bool FactionSimpleProto::has_mem_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionSimpleProto::set_has_mem_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionSimpleProto::clear_has_mem_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionSimpleProto::clear_mem_count() {
  mem_count_ = 0;
  clear_has_mem_count();
}
inline ::google::protobuf::int32 FactionSimpleProto::mem_count() const {
  return mem_count_;
}
inline void FactionSimpleProto::set_mem_count(::google::protobuf::int32 value) {
  set_has_mem_count();
  mem_count_ = value;
}

// optional uint64 fight = 8;
inline bool FactionSimpleProto::has_fight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionSimpleProto::set_has_fight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionSimpleProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionSimpleProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionSimpleProto::fight() const {
  return fight_;
}
inline void FactionSimpleProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 apply_type = 9;
inline bool FactionSimpleProto::has_apply_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionSimpleProto::set_has_apply_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionSimpleProto::clear_has_apply_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionSimpleProto::clear_apply_type() {
  apply_type_ = 0;
  clear_has_apply_type();
}
inline ::google::protobuf::int32 FactionSimpleProto::apply_type() const {
  return apply_type_;
}
inline void FactionSimpleProto::set_apply_type(::google::protobuf::int32 value) {
  set_has_apply_type();
  apply_type_ = value;
}

// optional int32 apply_minlev = 10;
inline bool FactionSimpleProto::has_apply_minlev() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FactionSimpleProto::set_has_apply_minlev() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FactionSimpleProto::clear_has_apply_minlev() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FactionSimpleProto::clear_apply_minlev() {
  apply_minlev_ = 0;
  clear_has_apply_minlev();
}
inline ::google::protobuf::int32 FactionSimpleProto::apply_minlev() const {
  return apply_minlev_;
}
inline void FactionSimpleProto::set_apply_minlev(::google::protobuf::int32 value) {
  set_has_apply_minlev();
  apply_minlev_ = value;
}

// optional uint64 apply_fight = 11;
inline bool FactionSimpleProto::has_apply_fight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FactionSimpleProto::set_has_apply_fight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FactionSimpleProto::clear_has_apply_fight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FactionSimpleProto::clear_apply_fight() {
  apply_fight_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_fight();
}
inline ::google::protobuf::uint64 FactionSimpleProto::apply_fight() const {
  return apply_fight_;
}
inline void FactionSimpleProto::set_apply_fight(::google::protobuf::uint64 value) {
  set_has_apply_fight();
  apply_fight_ = value;
}

// optional .proto_ff.FactionMemSimpleListProto mem = 12;
inline bool FactionSimpleProto::has_mem() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FactionSimpleProto::set_has_mem() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FactionSimpleProto::clear_has_mem() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FactionSimpleProto::clear_mem() {
  if (mem_ != NULL) mem_->::proto_ff::FactionMemSimpleListProto::Clear();
  clear_has_mem();
}
inline const ::proto_ff::FactionMemSimpleListProto& FactionSimpleProto::mem() const {
  return mem_ != NULL ? *mem_ : *default_instance_->mem_;
}
inline ::proto_ff::FactionMemSimpleListProto* FactionSimpleProto::mutable_mem() {
  set_has_mem();
  if (mem_ == NULL) mem_ = new ::proto_ff::FactionMemSimpleListProto;
  return mem_;
}
inline ::proto_ff::FactionMemSimpleListProto* FactionSimpleProto::release_mem() {
  clear_has_mem();
  ::proto_ff::FactionMemSimpleListProto* temp = mem_;
  mem_ = NULL;
  return temp;
}
inline void FactionSimpleProto::set_allocated_mem(::proto_ff::FactionMemSimpleListProto* mem) {
  delete mem_;
  mem_ = mem;
  if (mem) {
    set_has_mem();
  } else {
    clear_has_mem();
  }
}

// -------------------------------------------------------------------

// FactionRecordProto

// optional bytes name = 1;
inline bool FactionRecordProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionRecordProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionRecordProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionRecordProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionRecordProto::name() const {
  return *name_;
}
inline void FactionRecordProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionRecordProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionRecordProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionRecordProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionRecordProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionRecordProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 time = 2;
inline bool FactionRecordProto::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionRecordProto::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionRecordProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionRecordProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FactionRecordProto::time() const {
  return time_;
}
inline void FactionRecordProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 op = 3;
inline bool FactionRecordProto::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionRecordProto::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionRecordProto::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionRecordProto::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 FactionRecordProto::op() const {
  return op_;
}
inline void FactionRecordProto::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// optional int64 param1 = 4;
inline bool FactionRecordProto::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionRecordProto::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionRecordProto::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionRecordProto::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 FactionRecordProto::param1() const {
  return param1_;
}
inline void FactionRecordProto::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// -------------------------------------------------------------------

// FactionRecordListProto

// repeated .proto_ff.FactionRecordProto record_lst = 1;
inline int FactionRecordListProto::record_lst_size() const {
  return record_lst_.size();
}
inline void FactionRecordListProto::clear_record_lst() {
  record_lst_.Clear();
}
inline const ::proto_ff::FactionRecordProto& FactionRecordListProto::record_lst(int index) const {
  return record_lst_.Get(index);
}
inline ::proto_ff::FactionRecordProto* FactionRecordListProto::mutable_record_lst(int index) {
  return record_lst_.Mutable(index);
}
inline ::proto_ff::FactionRecordProto* FactionRecordListProto::add_record_lst() {
  return record_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto >&
FactionRecordListProto::record_lst() const {
  return record_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto >*
FactionRecordListProto::mutable_record_lst() {
  return &record_lst_;
}

// -------------------------------------------------------------------

// Faction_SyncLoginRsp

// optional .proto_ff.FactionProto info = 1;
inline bool Faction_SyncLoginRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SyncLoginRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SyncLoginRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SyncLoginRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionProto& Faction_SyncLoginRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionProto* Faction_SyncLoginRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionProto;
  return info_;
}
inline ::proto_ff::FactionProto* Faction_SyncLoginRsp::release_info() {
  clear_has_info();
  ::proto_ff::FactionProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_SyncLoginRsp::set_allocated_info(::proto_ff::FactionProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional int32 duty = 2;
inline bool Faction_SyncLoginRsp::has_duty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SyncLoginRsp::set_has_duty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SyncLoginRsp::clear_has_duty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SyncLoginRsp::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 Faction_SyncLoginRsp::duty() const {
  return duty_;
}
inline void Faction_SyncLoginRsp::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// -------------------------------------------------------------------

// Faction_SyncInfoRsp

// optional uint32 faction_id = 1;
inline bool Faction_SyncInfoRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SyncInfoRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SyncInfoRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SyncInfoRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_SyncInfoRsp::faction_id() const {
  return faction_id_;
}
inline void Faction_SyncInfoRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool Faction_SyncInfoRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SyncInfoRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SyncInfoRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SyncInfoRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_SyncInfoRsp::name() const {
  return *name_;
}
inline void Faction_SyncInfoRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_SyncInfoRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_SyncInfoRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_SyncInfoRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_SyncInfoRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_SyncInfoRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 duty = 3;
inline bool Faction_SyncInfoRsp::has_duty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_SyncInfoRsp::set_has_duty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_SyncInfoRsp::clear_has_duty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_SyncInfoRsp::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 Faction_SyncInfoRsp::duty() const {
  return duty_;
}
inline void Faction_SyncInfoRsp::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// -------------------------------------------------------------------

// Faction_InfoReq

// -------------------------------------------------------------------

// Faction_InfoRsp

// required int32 ret = 1;
inline bool Faction_InfoRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_InfoRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_InfoRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_InfoRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_InfoRsp::ret() const {
  return ret_;
}
inline void Faction_InfoRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionProto info = 2;
inline bool Faction_InfoRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_InfoRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_InfoRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_InfoRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionProto& Faction_InfoRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionProto* Faction_InfoRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionProto;
  return info_;
}
inline ::proto_ff::FactionProto* Faction_InfoRsp::release_info() {
  clear_has_info();
  ::proto_ff::FactionProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_InfoRsp::set_allocated_info(::proto_ff::FactionProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Faction_InfoListReq

// -------------------------------------------------------------------

// Faction_InfoListRsp

// repeated .proto_ff.FactionListProto info_lst = 1;
inline int Faction_InfoListRsp::info_lst_size() const {
  return info_lst_.size();
}
inline void Faction_InfoListRsp::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::FactionListProto& Faction_InfoListRsp::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::FactionListProto* Faction_InfoListRsp::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::FactionListProto* Faction_InfoListRsp::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto >&
Faction_InfoListRsp::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto >*
Faction_InfoListRsp::mutable_info_lst() {
  return &info_lst_;
}

// -------------------------------------------------------------------

// Faction_SimpleReq

// optional uint32 faction_id = 1;
inline bool Faction_SimpleReq::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SimpleReq::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SimpleReq::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SimpleReq::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_SimpleReq::faction_id() const {
  return faction_id_;
}
inline void Faction_SimpleReq::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// Faction_SimpleRsp

// required int32 ret = 1;
inline bool Faction_SimpleRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SimpleRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SimpleRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SimpleRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_SimpleRsp::ret() const {
  return ret_;
}
inline void Faction_SimpleRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionSimpleProto simple = 2;
inline bool Faction_SimpleRsp::has_simple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SimpleRsp::set_has_simple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SimpleRsp::clear_has_simple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SimpleRsp::clear_simple() {
  if (simple_ != NULL) simple_->::proto_ff::FactionSimpleProto::Clear();
  clear_has_simple();
}
inline const ::proto_ff::FactionSimpleProto& Faction_SimpleRsp::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::proto_ff::FactionSimpleProto* Faction_SimpleRsp::mutable_simple() {
  set_has_simple();
  if (simple_ == NULL) simple_ = new ::proto_ff::FactionSimpleProto;
  return simple_;
}
inline ::proto_ff::FactionSimpleProto* Faction_SimpleRsp::release_simple() {
  clear_has_simple();
  ::proto_ff::FactionSimpleProto* temp = simple_;
  simple_ = NULL;
  return temp;
}
inline void Faction_SimpleRsp::set_allocated_simple(::proto_ff::FactionSimpleProto* simple) {
  delete simple_;
  simple_ = simple;
  if (simple) {
    set_has_simple();
  } else {
    clear_has_simple();
  }
}

// -------------------------------------------------------------------

// Faction_MemListReq

// -------------------------------------------------------------------

// Faction_MemListRsp

// required int32 ret = 1;
inline bool Faction_MemListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_MemListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_MemListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_MemListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_MemListRsp::ret() const {
  return ret_;
}
inline void Faction_MemListRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionMemListProto mem_lst = 2;
inline bool Faction_MemListRsp::has_mem_lst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_MemListRsp::set_has_mem_lst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_MemListRsp::clear_has_mem_lst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_MemListRsp::clear_mem_lst() {
  if (mem_lst_ != NULL) mem_lst_->::proto_ff::FactionMemListProto::Clear();
  clear_has_mem_lst();
}
inline const ::proto_ff::FactionMemListProto& Faction_MemListRsp::mem_lst() const {
  return mem_lst_ != NULL ? *mem_lst_ : *default_instance_->mem_lst_;
}
inline ::proto_ff::FactionMemListProto* Faction_MemListRsp::mutable_mem_lst() {
  set_has_mem_lst();
  if (mem_lst_ == NULL) mem_lst_ = new ::proto_ff::FactionMemListProto;
  return mem_lst_;
}
inline ::proto_ff::FactionMemListProto* Faction_MemListRsp::release_mem_lst() {
  clear_has_mem_lst();
  ::proto_ff::FactionMemListProto* temp = mem_lst_;
  mem_lst_ = NULL;
  return temp;
}
inline void Faction_MemListRsp::set_allocated_mem_lst(::proto_ff::FactionMemListProto* mem_lst) {
  delete mem_lst_;
  mem_lst_ = mem_lst;
  if (mem_lst) {
    set_has_mem_lst();
  } else {
    clear_has_mem_lst();
  }
}

// -------------------------------------------------------------------

// Faction_CreateReq

// optional bytes name = 1;
inline bool Faction_CreateReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_CreateReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_CreateReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_CreateReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_CreateReq::name() const {
  return *name_;
}
inline void Faction_CreateReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_CreateReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_CreateReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_CreateReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_CreateReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_CreateReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes notice = 2;
inline bool Faction_CreateReq::has_notice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_CreateReq::set_has_notice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_CreateReq::clear_has_notice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_CreateReq::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& Faction_CreateReq::notice() const {
  return *notice_;
}
inline void Faction_CreateReq::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_CreateReq::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_CreateReq::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_CreateReq::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* Faction_CreateReq::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_CreateReq::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_CreateRsp

// required int32 ret = 1;
inline bool Faction_CreateRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_CreateRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_CreateRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_CreateRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_CreateRsp::ret() const {
  return ret_;
}
inline void Faction_CreateRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionProto info = 2;
inline bool Faction_CreateRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_CreateRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_CreateRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_CreateRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionProto& Faction_CreateRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionProto* Faction_CreateRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionProto;
  return info_;
}
inline ::proto_ff::FactionProto* Faction_CreateRsp::release_info() {
  clear_has_info();
  ::proto_ff::FactionProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_CreateRsp::set_allocated_info(::proto_ff::FactionProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Faction_ApplyListReq

// -------------------------------------------------------------------

// Faction_ApplyListRsp

// required int32 ret = 1;
inline bool Faction_ApplyListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ApplyListRsp::ret() const {
  return ret_;
}
inline void Faction_ApplyListRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionApplyListProto info = 2;
inline bool Faction_ApplyListRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ApplyListRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ApplyListRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ApplyListRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionApplyListProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionApplyListProto& Faction_ApplyListRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionApplyListProto* Faction_ApplyListRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionApplyListProto;
  return info_;
}
inline ::proto_ff::FactionApplyListProto* Faction_ApplyListRsp::release_info() {
  clear_has_info();
  ::proto_ff::FactionApplyListProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_ApplyListRsp::set_allocated_info(::proto_ff::FactionApplyListProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Faction_ApplyJoinReq

// optional uint32 faction_id = 1;
inline bool Faction_ApplyJoinReq::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyJoinReq::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyJoinReq::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyJoinReq::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_ApplyJoinReq::faction_id() const {
  return faction_id_;
}
inline void Faction_ApplyJoinReq::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// Faction_ApplyJoinRsp

// required int32 ret = 1;
inline bool Faction_ApplyJoinRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyJoinRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyJoinRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyJoinRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ApplyJoinRsp::ret() const {
  return ret_;
}
inline void Faction_ApplyJoinRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 faction_id = 2;
inline bool Faction_ApplyJoinRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ApplyJoinRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ApplyJoinRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ApplyJoinRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_ApplyJoinRsp::faction_id() const {
  return faction_id_;
}
inline void Faction_ApplyJoinRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// Faction_ApplyOperateReq

// optional int32 op = 1;
inline bool Faction_ApplyOperateReq::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyOperateReq::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyOperateReq::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyOperateReq::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Faction_ApplyOperateReq::op() const {
  return op_;
}
inline void Faction_ApplyOperateReq::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// optional uint64 cid = 2;
inline bool Faction_ApplyOperateReq::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ApplyOperateReq::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ApplyOperateReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ApplyOperateReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_ApplyOperateReq::cid() const {
  return cid_;
}
inline void Faction_ApplyOperateReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Faction_ApplyOperateRsp

// required int32 ret = 1;
inline bool Faction_ApplyOperateRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyOperateRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyOperateRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyOperateRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ApplyOperateRsp::ret() const {
  return ret_;
}
inline void Faction_ApplyOperateRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 op = 2;
inline bool Faction_ApplyOperateRsp::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ApplyOperateRsp::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ApplyOperateRsp::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ApplyOperateRsp::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Faction_ApplyOperateRsp::op() const {
  return op_;
}
inline void Faction_ApplyOperateRsp::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// optional uint64 cid = 3;
inline bool Faction_ApplyOperateRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_ApplyOperateRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_ApplyOperateRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_ApplyOperateRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_ApplyOperateRsp::cid() const {
  return cid_;
}
inline void Faction_ApplyOperateRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional .proto_ff.FactionMemListProto mem_lst = 4;
inline bool Faction_ApplyOperateRsp::has_mem_lst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_ApplyOperateRsp::set_has_mem_lst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_ApplyOperateRsp::clear_has_mem_lst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_ApplyOperateRsp::clear_mem_lst() {
  if (mem_lst_ != NULL) mem_lst_->::proto_ff::FactionMemListProto::Clear();
  clear_has_mem_lst();
}
inline const ::proto_ff::FactionMemListProto& Faction_ApplyOperateRsp::mem_lst() const {
  return mem_lst_ != NULL ? *mem_lst_ : *default_instance_->mem_lst_;
}
inline ::proto_ff::FactionMemListProto* Faction_ApplyOperateRsp::mutable_mem_lst() {
  set_has_mem_lst();
  if (mem_lst_ == NULL) mem_lst_ = new ::proto_ff::FactionMemListProto;
  return mem_lst_;
}
inline ::proto_ff::FactionMemListProto* Faction_ApplyOperateRsp::release_mem_lst() {
  clear_has_mem_lst();
  ::proto_ff::FactionMemListProto* temp = mem_lst_;
  mem_lst_ = NULL;
  return temp;
}
inline void Faction_ApplyOperateRsp::set_allocated_mem_lst(::proto_ff::FactionMemListProto* mem_lst) {
  delete mem_lst_;
  mem_lst_ = mem_lst;
  if (mem_lst) {
    set_has_mem_lst();
  } else {
    clear_has_mem_lst();
  }
}

// -------------------------------------------------------------------

// Faction_KickReq

// repeated uint64 cid_lst = 1;
inline int Faction_KickReq::cid_lst_size() const {
  return cid_lst_.size();
}
inline void Faction_KickReq::clear_cid_lst() {
  cid_lst_.Clear();
}
inline ::google::protobuf::uint64 Faction_KickReq::cid_lst(int index) const {
  return cid_lst_.Get(index);
}
inline void Faction_KickReq::set_cid_lst(int index, ::google::protobuf::uint64 value) {
  cid_lst_.Set(index, value);
}
inline void Faction_KickReq::add_cid_lst(::google::protobuf::uint64 value) {
  cid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Faction_KickReq::cid_lst() const {
  return cid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Faction_KickReq::mutable_cid_lst() {
  return &cid_lst_;
}

// -------------------------------------------------------------------

// Faction_KickRsp

// required int32 ret = 1;
inline bool Faction_KickRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_KickRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_KickRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_KickRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_KickRsp::ret() const {
  return ret_;
}
inline void Faction_KickRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated uint64 cid_lst = 2;
inline int Faction_KickRsp::cid_lst_size() const {
  return cid_lst_.size();
}
inline void Faction_KickRsp::clear_cid_lst() {
  cid_lst_.Clear();
}
inline ::google::protobuf::uint64 Faction_KickRsp::cid_lst(int index) const {
  return cid_lst_.Get(index);
}
inline void Faction_KickRsp::set_cid_lst(int index, ::google::protobuf::uint64 value) {
  cid_lst_.Set(index, value);
}
inline void Faction_KickRsp::add_cid_lst(::google::protobuf::uint64 value) {
  cid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Faction_KickRsp::cid_lst() const {
  return cid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Faction_KickRsp::mutable_cid_lst() {
  return &cid_lst_;
}

// -------------------------------------------------------------------

// Faction_QuitReq

// -------------------------------------------------------------------

// Faction_QuitRsp

// required int32 ret = 1;
inline bool Faction_QuitRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_QuitRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_QuitRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_QuitRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_QuitRsp::ret() const {
  return ret_;
}
inline void Faction_QuitRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Faction_AppointReq

// optional uint64 cid = 1;
inline bool Faction_AppointReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_AppointReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_AppointReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_AppointReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_AppointReq::cid() const {
  return cid_;
}
inline void Faction_AppointReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 duty = 2;
inline bool Faction_AppointReq::has_duty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_AppointReq::set_has_duty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_AppointReq::clear_has_duty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_AppointReq::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 Faction_AppointReq::duty() const {
  return duty_;
}
inline void Faction_AppointReq::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// -------------------------------------------------------------------

// Faction_AppointRsp

// required int32 ret = 1;
inline bool Faction_AppointRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_AppointRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_AppointRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_AppointRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_AppointRsp::ret() const {
  return ret_;
}
inline void Faction_AppointRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 cid = 2;
inline bool Faction_AppointRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_AppointRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_AppointRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_AppointRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_AppointRsp::cid() const {
  return cid_;
}
inline void Faction_AppointRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 duty = 3;
inline bool Faction_AppointRsp::has_duty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_AppointRsp::set_has_duty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_AppointRsp::clear_has_duty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_AppointRsp::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 Faction_AppointRsp::duty() const {
  return duty_;
}
inline void Faction_AppointRsp::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// optional int32 self_duty = 4;
inline bool Faction_AppointRsp::has_self_duty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_AppointRsp::set_has_self_duty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_AppointRsp::clear_has_self_duty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_AppointRsp::clear_self_duty() {
  self_duty_ = 0;
  clear_has_self_duty();
}
inline ::google::protobuf::int32 Faction_AppointRsp::self_duty() const {
  return self_duty_;
}
inline void Faction_AppointRsp::set_self_duty(::google::protobuf::int32 value) {
  set_has_self_duty();
  self_duty_ = value;
}

// -------------------------------------------------------------------

// Faction_ChgNoticeReq

// optional bytes notice = 1;
inline bool Faction_ChgNoticeReq::has_notice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ChgNoticeReq::set_has_notice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ChgNoticeReq::clear_has_notice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ChgNoticeReq::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& Faction_ChgNoticeReq::notice() const {
  return *notice_;
}
inline void Faction_ChgNoticeReq::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_ChgNoticeReq::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_ChgNoticeReq::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_ChgNoticeReq::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* Faction_ChgNoticeReq::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_ChgNoticeReq::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_ChgNoticeRsp

// required int32 ret = 1;
inline bool Faction_ChgNoticeRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ChgNoticeRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ChgNoticeRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ChgNoticeRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ChgNoticeRsp::ret() const {
  return ret_;
}
inline void Faction_ChgNoticeRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional bytes notice = 2;
inline bool Faction_ChgNoticeRsp::has_notice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ChgNoticeRsp::set_has_notice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ChgNoticeRsp::clear_has_notice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ChgNoticeRsp::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& Faction_ChgNoticeRsp::notice() const {
  return *notice_;
}
inline void Faction_ChgNoticeRsp::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_ChgNoticeRsp::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_ChgNoticeRsp::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_ChgNoticeRsp::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* Faction_ChgNoticeRsp::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_ChgNoticeRsp::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_SetApplyReq

// optional int32 type = 1;
inline bool Faction_SetApplyReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SetApplyReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SetApplyReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SetApplyReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Faction_SetApplyReq::type() const {
  return type_;
}
inline void Faction_SetApplyReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 level = 2;
inline bool Faction_SetApplyReq::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SetApplyReq::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SetApplyReq::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SetApplyReq::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Faction_SetApplyReq::level() const {
  return level_;
}
inline void Faction_SetApplyReq::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 fight = 3;
inline bool Faction_SetApplyReq::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_SetApplyReq::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_SetApplyReq::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_SetApplyReq::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 Faction_SetApplyReq::fight() const {
  return fight_;
}
inline void Faction_SetApplyReq::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// Faction_SetApplyRsp

// required int32 ret = 1;
inline bool Faction_SetApplyRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SetApplyRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SetApplyRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SetApplyRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_SetApplyRsp::ret() const {
  return ret_;
}
inline void Faction_SetApplyRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 2;
inline bool Faction_SetApplyRsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SetApplyRsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SetApplyRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SetApplyRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Faction_SetApplyRsp::type() const {
  return type_;
}
inline void Faction_SetApplyRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 level = 3;
inline bool Faction_SetApplyRsp::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_SetApplyRsp::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_SetApplyRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_SetApplyRsp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Faction_SetApplyRsp::level() const {
  return level_;
}
inline void Faction_SetApplyRsp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 fight = 4;
inline bool Faction_SetApplyRsp::has_fight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_SetApplyRsp::set_has_fight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_SetApplyRsp::clear_has_fight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_SetApplyRsp::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 Faction_SetApplyRsp::fight() const {
  return fight_;
}
inline void Faction_SetApplyRsp::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// Faction_OneKeyApplyReq

// -------------------------------------------------------------------

// Faction_OneKeyApplyRsp

// required int32 ret = 1;
inline bool Faction_OneKeyApplyRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_OneKeyApplyRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_OneKeyApplyRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_OneKeyApplyRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_OneKeyApplyRsp::ret() const {
  return ret_;
}
inline void Faction_OneKeyApplyRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated uint32 id_lst = 2;
inline int Faction_OneKeyApplyRsp::id_lst_size() const {
  return id_lst_.size();
}
inline void Faction_OneKeyApplyRsp::clear_id_lst() {
  id_lst_.Clear();
}
inline ::google::protobuf::uint32 Faction_OneKeyApplyRsp::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline void Faction_OneKeyApplyRsp::set_id_lst(int index, ::google::protobuf::uint32 value) {
  id_lst_.Set(index, value);
}
inline void Faction_OneKeyApplyRsp::add_id_lst(::google::protobuf::uint32 value) {
  id_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Faction_OneKeyApplyRsp::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Faction_OneKeyApplyRsp::mutable_id_lst() {
  return &id_lst_;
}

// -------------------------------------------------------------------

// Faction_ChgNameReq

// optional bytes name = 1;
inline bool Faction_ChgNameReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ChgNameReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ChgNameReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ChgNameReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_ChgNameReq::name() const {
  return *name_;
}
inline void Faction_ChgNameReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_ChgNameReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_ChgNameReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_ChgNameReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_ChgNameReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_ChgNameReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_ChgNameRsp

// required int32 ret = 1;
inline bool Faction_ChgNameRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ChgNameRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ChgNameRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ChgNameRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ChgNameRsp::ret() const {
  return ret_;
}
inline void Faction_ChgNameRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional bytes name = 2;
inline bool Faction_ChgNameRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ChgNameRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ChgNameRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ChgNameRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_ChgNameRsp::name() const {
  return *name_;
}
inline void Faction_ChgNameRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_ChgNameRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_ChgNameRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_ChgNameRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_ChgNameRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_ChgNameRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_NewApplyNotify

// -------------------------------------------------------------------

// Faction_InviteJoinReq

// optional uint64 cid = 2;
inline bool Faction_InviteJoinReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_InviteJoinReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_InviteJoinReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_InviteJoinReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_InviteJoinReq::cid() const {
  return cid_;
}
inline void Faction_InviteJoinReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Faction_InviteJoinRsp

// required int32 ret = 1;
inline bool Faction_InviteJoinRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_InviteJoinRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_InviteJoinRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_InviteJoinRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_InviteJoinRsp::ret() const {
  return ret_;
}
inline void Faction_InviteJoinRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Faction_IviteJoinNotify

// required uint64 cid = 1;
inline bool Faction_IviteJoinNotify::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_IviteJoinNotify::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_IviteJoinNotify::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_IviteJoinNotify::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_IviteJoinNotify::cid() const {
  return cid_;
}
inline void Faction_IviteJoinNotify::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 2;
inline bool Faction_IviteJoinNotify::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_IviteJoinNotify::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_IviteJoinNotify::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_IviteJoinNotify::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_IviteJoinNotify::name() const {
  return *name_;
}
inline void Faction_IviteJoinNotify::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_IviteJoinNotify::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_IviteJoinNotify::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_IviteJoinNotify::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_IviteJoinNotify::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_IviteJoinNotify::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 faction_id = 3;
inline bool Faction_IviteJoinNotify::has_faction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_IviteJoinNotify::set_has_faction_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_IviteJoinNotify::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_IviteJoinNotify::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_IviteJoinNotify::faction_id() const {
  return faction_id_;
}
inline void Faction_IviteJoinNotify::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// required bytes faction_name = 4;
inline bool Faction_IviteJoinNotify::has_faction_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_IviteJoinNotify::set_has_faction_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_IviteJoinNotify::clear_has_faction_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_IviteJoinNotify::clear_faction_name() {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    faction_name_->clear();
  }
  clear_has_faction_name();
}
inline const ::std::string& Faction_IviteJoinNotify::faction_name() const {
  return *faction_name_;
}
inline void Faction_IviteJoinNotify::set_faction_name(const ::std::string& value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void Faction_IviteJoinNotify::set_faction_name(const char* value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void Faction_IviteJoinNotify::set_faction_name(const void* value, size_t size) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_IviteJoinNotify::mutable_faction_name() {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  return faction_name_;
}
inline ::std::string* Faction_IviteJoinNotify::release_faction_name() {
  clear_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faction_name_;
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_IviteJoinNotify::set_allocated_faction_name(::std::string* faction_name) {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (faction_name) {
    set_has_faction_name();
    faction_name_ = faction_name;
  } else {
    clear_has_faction_name();
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_RecordListReq

// -------------------------------------------------------------------

// Faction_RecordListRsp

// required int32 ret = 1;
inline bool Faction_RecordListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_RecordListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_RecordListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_RecordListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_RecordListRsp::ret() const {
  return ret_;
}
inline void Faction_RecordListRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionRecordListProto lst = 2;
inline bool Faction_RecordListRsp::has_lst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_RecordListRsp::set_has_lst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_RecordListRsp::clear_has_lst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_RecordListRsp::clear_lst() {
  if (lst_ != NULL) lst_->::proto_ff::FactionRecordListProto::Clear();
  clear_has_lst();
}
inline const ::proto_ff::FactionRecordListProto& Faction_RecordListRsp::lst() const {
  return lst_ != NULL ? *lst_ : *default_instance_->lst_;
}
inline ::proto_ff::FactionRecordListProto* Faction_RecordListRsp::mutable_lst() {
  set_has_lst();
  if (lst_ == NULL) lst_ = new ::proto_ff::FactionRecordListProto;
  return lst_;
}
inline ::proto_ff::FactionRecordListProto* Faction_RecordListRsp::release_lst() {
  clear_has_lst();
  ::proto_ff::FactionRecordListProto* temp = lst_;
  lst_ = NULL;
  return temp;
}
inline void Faction_RecordListRsp::set_allocated_lst(::proto_ff::FactionRecordListProto* lst) {
  delete lst_;
  lst_ = lst;
  if (lst) {
    set_has_lst();
  } else {
    clear_has_lst();
  }
}

// -------------------------------------------------------------------

// CL_FactionRoleUpdateRsp

// required uint64 cid = 1;
inline bool CL_FactionRoleUpdateRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CL_FactionRoleUpdateRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CL_FactionRoleUpdateRsp::cid() const {
  return cid_;
}
inline void CL_FactionRoleUpdateRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint32 faction_id = 2;
inline bool CL_FactionRoleUpdateRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CL_FactionRoleUpdateRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 CL_FactionRoleUpdateRsp::faction_id() const {
  return faction_id_;
}
inline void CL_FactionRoleUpdateRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// required bytes name = 3;
inline bool CL_FactionRoleUpdateRsp::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CL_FactionRoleUpdateRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CL_FactionRoleUpdateRsp::name() const {
  return *name_;
}
inline void CL_FactionRoleUpdateRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CL_FactionRoleUpdateRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CL_FactionRoleUpdateRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CL_FactionRoleUpdateRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CL_FactionRoleUpdateRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CL_FactionRoleUpdateRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 duty = 4;
inline bool CL_FactionRoleUpdateRsp::has_duty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_duty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_duty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CL_FactionRoleUpdateRsp::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 CL_FactionRoleUpdateRsp::duty() const {
  return duty_;
}
inline void CL_FactionRoleUpdateRsp::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// required int32 level = 5;
inline bool CL_FactionRoleUpdateRsp::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CL_FactionRoleUpdateRsp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CL_FactionRoleUpdateRsp::level() const {
  return level_;
}
inline void CL_FactionRoleUpdateRsp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required uint64 leader = 6;
inline bool CL_FactionRoleUpdateRsp::has_leader() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_leader() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_leader() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CL_FactionRoleUpdateRsp::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
  clear_has_leader();
}
inline ::google::protobuf::uint64 CL_FactionRoleUpdateRsp::leader() const {
  return leader_;
}
inline void CL_FactionRoleUpdateRsp::set_leader(::google::protobuf::uint64 value) {
  set_has_leader();
  leader_ = value;
}

// -------------------------------------------------------------------

// LC_FactionCreate

// required uint64 cid = 1;
inline bool LC_FactionCreate::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LC_FactionCreate::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LC_FactionCreate::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LC_FactionCreate::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 LC_FactionCreate::cid() const {
  return cid_;
}
inline void LC_FactionCreate::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 2;
inline bool LC_FactionCreate::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LC_FactionCreate::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LC_FactionCreate::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LC_FactionCreate::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LC_FactionCreate::name() const {
  return *name_;
}
inline void LC_FactionCreate::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LC_FactionCreate::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LC_FactionCreate::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LC_FactionCreate::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LC_FactionCreate::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LC_FactionCreate::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes notice = 3;
inline bool LC_FactionCreate::has_notice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LC_FactionCreate::set_has_notice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LC_FactionCreate::clear_has_notice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LC_FactionCreate::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& LC_FactionCreate::notice() const {
  return *notice_;
}
inline void LC_FactionCreate::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void LC_FactionCreate::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void LC_FactionCreate::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LC_FactionCreate::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* LC_FactionCreate::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LC_FactionCreate::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CL_FactionCreateResult

// required uint64 cid = 1;
inline bool CL_FactionCreateResult::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CL_FactionCreateResult::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CL_FactionCreateResult::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CL_FactionCreateResult::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CL_FactionCreateResult::cid() const {
  return cid_;
}
inline void CL_FactionCreateResult::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// LC_FactionChgName

// required uint64 cid = 1;
inline bool LC_FactionChgName::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LC_FactionChgName::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LC_FactionChgName::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LC_FactionChgName::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 LC_FactionChgName::cid() const {
  return cid_;
}
inline void LC_FactionChgName::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 2;
inline bool LC_FactionChgName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LC_FactionChgName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LC_FactionChgName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LC_FactionChgName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LC_FactionChgName::name() const {
  return *name_;
}
inline void LC_FactionChgName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LC_FactionChgName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LC_FactionChgName::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LC_FactionChgName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LC_FactionChgName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LC_FactionChgName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CL_FactionChgNameResult

// required int32 ret = 1;
inline bool CL_FactionChgNameResult::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CL_FactionChgNameResult::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CL_FactionChgNameResult::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CL_FactionChgNameResult::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 CL_FactionChgNameResult::ret() const {
  return ret_;
}
inline void CL_FactionChgNameResult::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint64 cid = 2;
inline bool CL_FactionChgNameResult::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CL_FactionChgNameResult::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CL_FactionChgNameResult::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CL_FactionChgNameResult::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CL_FactionChgNameResult::cid() const {
  return cid_;
}
inline void CL_FactionChgNameResult::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Faction_2eproto__INCLUDED
