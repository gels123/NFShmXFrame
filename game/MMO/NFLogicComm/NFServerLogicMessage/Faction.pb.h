// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Faction.proto

#ifndef PROTOBUF_Faction_2eproto__INCLUDED
#define PROTOBUF_Faction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "Com.pb.h"
#include "ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Faction_2eproto();
void protobuf_AssignDesc_Faction_2eproto();
void protobuf_ShutdownFile_Faction_2eproto();

class FactionListProto;
class FactionProto;
class FactionMemProto;
class FactionMemListProto;
class FactionApplyProto;
class FactionApplyListProto;
class FactionMemSimpleProto;
class FactionMemSimpleListProto;
class FactionSimpleProto;
class FactionRecordProto;
class FactionRecordListProto;
class FactionSalaryProto;
class FactionSalaryListProto;
class FactionDinnerProto;
class FactionInviteProto;
class FactionSkillProto;
class FactionSkillListProto;
class FactionAnswerRankProto;
class FactionAnswerRankListProto;
class FactionAnswerFinalProto;
class FactionBeastRankProto;
class FactionBeastRankListProto;
class Faction_SyncLoginRsp;
class Faction_SyncInfoRsp;
class Faction_InfoReq;
class Faction_InfoRsp;
class Faction_InfoListReq;
class Faction_InfoListRsp;
class Faction_SimpleReq;
class Faction_SimpleRsp;
class Faction_MemListReq;
class Faction_MemListRsp;
class Faction_CreateReq;
class Faction_CreateRsp;
class Faction_ApplyListReq;
class Faction_ApplyListRsp;
class Faction_ApplyJoinReq;
class Faction_ApplyJoinRsp;
class Faction_ApplyOperateReq;
class Faction_ApplyOperateRsp;
class Faction_KickReq;
class Faction_KickRsp;
class Faction_QuitReq;
class Faction_QuitRsp;
class Faction_AppointReq;
class Faction_AppointRsp;
class Faction_ChgNoticeReq;
class Faction_ChgNoticeRsp;
class Faction_SetApplyReq;
class Faction_SetApplyRsp;
class Faction_OneKeyApplyReq;
class Faction_OneKeyApplyRsp;
class Faction_ChgNameReq;
class Faction_ChgNameRsp;
class Faction_NewApplyNotify;
class Faction_InviteJoinReq;
class Faction_InviteJoinRsp;
class Faction_IviteJoinNotify;
class Faction_RecordListReq;
class Faction_RecordListRsp;
class Faction_DonateReq;
class Faction_DonateRsp;
class Faction_DonateNotify;
class Faction_SalaryReq;
class Faction_SalaryRsp;
class Faction_SalaryNotify;
class Faction_SalaryFetchReq;
class Faction_SalaryFetchRsp;
class Faction_DinnerUpdateRsp;
class Faction_TransInviteListReq;
class Faction_TransInviteListRsp;
class Faction_TransAcceptListRsp;
class Faction_TransInviteReq;
class Faction_TransInviteRsp;
class Faction_TransInviteNotify;
class Faction_TransDelAcceptNotify;
class Faction_TransAgreeReq;
class Faction_TransAgreeRsp;
class Faction_SkillInfoReq;
class Faction_SkillInfoRsp;
class Faction_SkillUpdateRsp;
class Faction_SkillUpgradeReq;
class Faction_SkillUpgradeRsp;
class Faction_AnswerRankListReq;
class Faction_AnswerRankListRsp;
class Faction_AnswerCurRankRsp;
class Faction_AnswerStageRsp;
class Faction_AnswerResultRsp;
class Faction_AnswerFinalRsp;
class Faction_BeastInfoReq;
class Faction_BeastInfoRsp;
class Faction_BeastOpenInfoNotify;
class Faction_BeastOpenReq;
class Faction_BeastOpenRsp;
class Faction_BeastCurHarmRankRsp;
class Faction_BeastFinishRsp;
class CL_FactionRoleUpdateRsp;
class LC_FactionCreate;
class CL_FactionCreateResult;
class LC_FactionChgName;
class CL_FactionChgNameResult;
class CL_FactionDismissNotify;
class LC_FactionAddAttrReq;
class LS_FactionAnswerCount;
class SL_FactionAnswerRank;
class SL_FactionAnswerCurRankReq;
class SC_FactionAnswerRankRsp;
class LS_FactionAnswerEndRsp;
class LC_FactionBeastFinishRsp;
class FactionGuardData;
class Faction_GuardSceneInfoReq;
class Faction_GuardSceneInfoRsp;
class FactionGuardRankProto;
class FactionGuardRankListProto;
class Faction_GuardPersonRankInfoReq;
class Faction_GuardPersonRankInfoRsp;
class FactionGuardSocialRankProto;
class FactionGuardSocialRankListProto;
class Faction_GuardSocialRankListReq;
class Faction_GuardSocialRankListRsp;
class GuardMonInfo;
class Faction_GuardMonsterInfo;
class Faction_GuardMonsterInfoNotify;
class Faction_GuardWaveReward;
class Faction_GuardFinishRsp;
class Faction_GuardEncouragementReq;
class Faction_GuardEncouragementRsp;
class LS_FactionGuardCount;
class SL_FactionGuardRank;
class SL_FactionGuardCurRankReq;
class SC_FactionGuardRankResultNotify;
class LS_FactionGuardEndRsp;
class LC_FactionGuardEndRsp;
class GuardPlayerHarm;
class LC_FactionGuardPlayerHarm;
class SC_FactionAnswerFinalRsp;
class CL_FactionAnswerQuestionRsp;
class FactionMoyuRankEntry;
class FactionMoyuRankReq;
class NtFactionMoyuRank;
class FactionMoyuRecvReq;
class FactionMoyuRecvRsp;
class NotifyFactionMoyuDup;
class FactionMoyuTeam;
class FactionMoyuEndRsp;
class FactionMoyuReq;
class NtFactionMoyuHarm;
class NtFactionMoyuDupKill;
class NtFactionMoyu;
class FactionMoyuRewardReq;
class FactionMoyuUpdateReq;
class FactionMoyuAddHarmReq;
class FactionSynMoyuReq;
class FactionMoyuPassReq;
class LCFactionMoyuRankReq;
class CLFactionMoyuRecvReq;

// ===================================================================

class FactionListProto : public ::google::protobuf::Message {
 public:
  FactionListProto();
  virtual ~FactionListProto();

  FactionListProto(const FactionListProto& from);

  inline FactionListProto& operator=(const FactionListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionListProto& default_instance();

  void Swap(FactionListProto* other);

  // implements Message ----------------------------------------------

  FactionListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionListProto& from);
  void MergeFrom(const FactionListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 leader_cid = 4;
  inline bool has_leader_cid() const;
  inline void clear_leader_cid();
  static const int kLeaderCidFieldNumber = 4;
  inline ::google::protobuf::uint64 leader_cid() const;
  inline void set_leader_cid(::google::protobuf::uint64 value);

  // optional bytes leader_name = 5;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 5;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const void* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 mem_count = 7;
  inline bool has_mem_count() const;
  inline void clear_mem_count();
  static const int kMemCountFieldNumber = 7;
  inline ::google::protobuf::int32 mem_count() const;
  inline void set_mem_count(::google::protobuf::int32 value);

  // optional uint64 fight = 8;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 8;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional int32 already_apply = 9;
  inline bool has_already_apply() const;
  inline void clear_already_apply();
  static const int kAlreadyApplyFieldNumber = 9;
  inline ::google::protobuf::int32 already_apply() const;
  inline void set_already_apply(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionListProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_leader_cid();
  inline void clear_has_leader_cid();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_mem_count();
  inline void clear_has_mem_count();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_already_apply();
  inline void clear_has_already_apply();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint64 leader_cid_;
  ::std::string* leader_name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 mem_count_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::int32 already_apply_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionProto : public ::google::protobuf::Message {
 public:
  FactionProto();
  virtual ~FactionProto();

  FactionProto(const FactionProto& from);

  inline FactionProto& operator=(const FactionProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionProto& default_instance();

  void Swap(FactionProto* other);

  // implements Message ----------------------------------------------

  FactionProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionProto& from);
  void MergeFrom(const FactionProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional int32 mem_count = 5;
  inline bool has_mem_count() const;
  inline void clear_mem_count();
  static const int kMemCountFieldNumber = 5;
  inline ::google::protobuf::int32 mem_count() const;
  inline void set_mem_count(::google::protobuf::int32 value);

  // optional uint64 fight = 6;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 6;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional int32 grade = 7;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 7;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);

  // optional uint64 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::uint64 exp() const;
  inline void set_exp(::google::protobuf::uint64 value);

  // optional string notice = 9;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 9;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const char* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // optional uint64 leader_cid = 10;
  inline bool has_leader_cid() const;
  inline void clear_leader_cid();
  static const int kLeaderCidFieldNumber = 10;
  inline ::google::protobuf::uint64 leader_cid() const;
  inline void set_leader_cid(::google::protobuf::uint64 value);

  // optional bytes leader_name = 11;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 11;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const void* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional .proto_ff.RoleFacadeProto facade = 12;
  inline bool has_facade() const;
  inline void clear_facade();
  static const int kFacadeFieldNumber = 12;
  inline const ::proto_ff::RoleFacadeProto& facade() const;
  inline ::proto_ff::RoleFacadeProto* mutable_facade();
  inline ::proto_ff::RoleFacadeProto* release_facade();
  inline void set_allocated_facade(::proto_ff::RoleFacadeProto* facade);

  // optional int32 apply_type = 13;
  inline bool has_apply_type() const;
  inline void clear_apply_type();
  static const int kApplyTypeFieldNumber = 13;
  inline ::google::protobuf::int32 apply_type() const;
  inline void set_apply_type(::google::protobuf::int32 value);

  // optional int32 apply_minlev = 14;
  inline bool has_apply_minlev() const;
  inline void clear_apply_minlev();
  static const int kApplyMinlevFieldNumber = 14;
  inline ::google::protobuf::int32 apply_minlev() const;
  inline void set_apply_minlev(::google::protobuf::int32 value);

  // optional uint64 apply_fight = 15;
  inline bool has_apply_fight() const;
  inline void clear_apply_fight();
  static const int kApplyFightFieldNumber = 15;
  inline ::google::protobuf::uint64 apply_fight() const;
  inline void set_apply_fight(::google::protobuf::uint64 value);

  // optional int32 online_num = 16;
  inline bool has_online_num() const;
  inline void clear_online_num();
  static const int kOnlineNumFieldNumber = 16;
  inline ::google::protobuf::int32 online_num() const;
  inline void set_online_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_mem_count();
  inline void clear_has_mem_count();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_grade();
  inline void clear_has_grade();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_notice();
  inline void clear_has_notice();
  inline void set_has_leader_cid();
  inline void clear_has_leader_cid();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_facade();
  inline void clear_has_facade();
  inline void set_has_apply_type();
  inline void clear_has_apply_type();
  inline void set_has_apply_minlev();
  inline void clear_has_apply_minlev();
  inline void set_has_apply_fight();
  inline void clear_has_apply_fight();
  inline void set_has_online_num();
  inline void clear_has_online_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 mem_count_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::uint64 exp_;
  ::std::string* notice_;
  ::google::protobuf::uint64 leader_cid_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::int32 apply_type_;
  ::std::string* leader_name_;
  ::proto_ff::RoleFacadeProto* facade_;
  ::google::protobuf::uint64 apply_fight_;
  ::google::protobuf::int32 apply_minlev_;
  ::google::protobuf::int32 online_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMemProto : public ::google::protobuf::Message {
 public:
  FactionMemProto();
  virtual ~FactionMemProto();

  FactionMemProto(const FactionMemProto& from);

  inline FactionMemProto& operator=(const FactionMemProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMemProto& default_instance();

  void Swap(FactionMemProto* other);

  // implements Message ----------------------------------------------

  FactionMemProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMemProto& from);
  void MergeFrom(const FactionMemProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 prof = 3;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 3;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional int32 vip_level = 4;
  inline bool has_vip_level() const;
  inline void clear_vip_level();
  static const int kVipLevelFieldNumber = 4;
  inline ::google::protobuf::int32 vip_level() const;
  inline void set_vip_level(::google::protobuf::int32 value);

  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 duty = 6;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 6;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // optional uint64 fight = 7;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 7;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional uint64 total_contri = 8;
  inline bool has_total_contri() const;
  inline void clear_total_contri();
  static const int kTotalContriFieldNumber = 8;
  inline ::google::protobuf::uint64 total_contri() const;
  inline void set_total_contri(::google::protobuf::uint64 value);

  // optional int32 is_online = 9;
  inline bool has_is_online() const;
  inline void clear_is_online();
  static const int kIsOnlineFieldNumber = 9;
  inline ::google::protobuf::int32 is_online() const;
  inline void set_is_online(::google::protobuf::int32 value);

  // optional uint64 logout_time = 10;
  inline bool has_logout_time() const;
  inline void clear_logout_time();
  static const int kLogoutTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 logout_time() const;
  inline void set_logout_time(::google::protobuf::uint64 value);

  // optional uint64 clan3_id = 11;
  inline bool has_clan3_id() const;
  inline void clear_clan3_id();
  static const int kClan3IdFieldNumber = 11;
  inline ::google::protobuf::uint64 clan3_id() const;
  inline void set_clan3_id(::google::protobuf::uint64 value);

  // optional uint64 clan5_id = 12;
  inline bool has_clan5_id() const;
  inline void clear_clan5_id();
  static const int kClan5IdFieldNumber = 12;
  inline ::google::protobuf::uint64 clan5_id() const;
  inline void set_clan5_id(::google::protobuf::uint64 value);

  // optional .proto_ff.RoleHeadPicProto head = 13;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 13;
  inline const ::proto_ff::RoleHeadPicProto& head() const;
  inline ::proto_ff::RoleHeadPicProto* mutable_head();
  inline ::proto_ff::RoleHeadPicProto* release_head();
  inline void set_allocated_head(::proto_ff::RoleHeadPicProto* head);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMemProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_vip_level();
  inline void clear_has_vip_level();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_total_contri();
  inline void clear_has_total_contri();
  inline void set_has_is_online();
  inline void clear_has_is_online();
  inline void set_has_logout_time();
  inline void clear_has_logout_time();
  inline void set_has_clan3_id();
  inline void clear_has_clan3_id();
  inline void set_has_clan5_id();
  inline void clear_has_clan5_id();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 vip_level_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::uint64 total_contri_;
  ::google::protobuf::uint64 logout_time_;
  ::google::protobuf::uint64 clan3_id_;
  ::google::protobuf::uint64 clan5_id_;
  ::proto_ff::RoleHeadPicProto* head_;
  ::google::protobuf::int32 is_online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMemProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMemListProto : public ::google::protobuf::Message {
 public:
  FactionMemListProto();
  virtual ~FactionMemListProto();

  FactionMemListProto(const FactionMemListProto& from);

  inline FactionMemListProto& operator=(const FactionMemListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMemListProto& default_instance();

  void Swap(FactionMemListProto* other);

  // implements Message ----------------------------------------------

  FactionMemListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMemListProto& from);
  void MergeFrom(const FactionMemListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionMemProto mem_lst = 1;
  inline int mem_lst_size() const;
  inline void clear_mem_lst();
  static const int kMemLstFieldNumber = 1;
  inline const ::proto_ff::FactionMemProto& mem_lst(int index) const;
  inline ::proto_ff::FactionMemProto* mutable_mem_lst(int index);
  inline ::proto_ff::FactionMemProto* add_mem_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto >&
      mem_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto >*
      mutable_mem_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMemListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto > mem_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMemListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionApplyProto : public ::google::protobuf::Message {
 public:
  FactionApplyProto();
  virtual ~FactionApplyProto();

  FactionApplyProto(const FactionApplyProto& from);

  inline FactionApplyProto& operator=(const FactionApplyProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionApplyProto& default_instance();

  void Swap(FactionApplyProto* other);

  // implements Message ----------------------------------------------

  FactionApplyProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionApplyProto& from);
  void MergeFrom(const FactionApplyProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 fight = 4;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 4;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionApplyProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionApplyProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionApplyListProto : public ::google::protobuf::Message {
 public:
  FactionApplyListProto();
  virtual ~FactionApplyListProto();

  FactionApplyListProto(const FactionApplyListProto& from);

  inline FactionApplyListProto& operator=(const FactionApplyListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionApplyListProto& default_instance();

  void Swap(FactionApplyListProto* other);

  // implements Message ----------------------------------------------

  FactionApplyListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionApplyListProto& from);
  void MergeFrom(const FactionApplyListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionApplyProto apply_lst = 1;
  inline int apply_lst_size() const;
  inline void clear_apply_lst();
  static const int kApplyLstFieldNumber = 1;
  inline const ::proto_ff::FactionApplyProto& apply_lst(int index) const;
  inline ::proto_ff::FactionApplyProto* mutable_apply_lst(int index);
  inline ::proto_ff::FactionApplyProto* add_apply_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto >&
      apply_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto >*
      mutable_apply_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionApplyListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto > apply_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionApplyListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMemSimpleProto : public ::google::protobuf::Message {
 public:
  FactionMemSimpleProto();
  virtual ~FactionMemSimpleProto();

  FactionMemSimpleProto(const FactionMemSimpleProto& from);

  inline FactionMemSimpleProto& operator=(const FactionMemSimpleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMemSimpleProto& default_instance();

  void Swap(FactionMemSimpleProto* other);

  // implements Message ----------------------------------------------

  FactionMemSimpleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMemSimpleProto& from);
  void MergeFrom(const FactionMemSimpleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 duty = 4;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 4;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // optional uint64 fight = 5;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 5;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMemSimpleProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::uint64 fight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMemSimpleProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionMemSimpleListProto : public ::google::protobuf::Message {
 public:
  FactionMemSimpleListProto();
  virtual ~FactionMemSimpleListProto();

  FactionMemSimpleListProto(const FactionMemSimpleListProto& from);

  inline FactionMemSimpleListProto& operator=(const FactionMemSimpleListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMemSimpleListProto& default_instance();

  void Swap(FactionMemSimpleListProto* other);

  // implements Message ----------------------------------------------

  FactionMemSimpleListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMemSimpleListProto& from);
  void MergeFrom(const FactionMemSimpleListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
  inline int simple_lst_size() const;
  inline void clear_simple_lst();
  static const int kSimpleLstFieldNumber = 1;
  inline const ::proto_ff::FactionMemSimpleProto& simple_lst(int index) const;
  inline ::proto_ff::FactionMemSimpleProto* mutable_simple_lst(int index);
  inline ::proto_ff::FactionMemSimpleProto* add_simple_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto >&
      simple_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto >*
      mutable_simple_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMemSimpleListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto > simple_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMemSimpleListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionSimpleProto : public ::google::protobuf::Message {
 public:
  FactionSimpleProto();
  virtual ~FactionSimpleProto();

  FactionSimpleProto(const FactionSimpleProto& from);

  inline FactionSimpleProto& operator=(const FactionSimpleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionSimpleProto& default_instance();

  void Swap(FactionSimpleProto* other);

  // implements Message ----------------------------------------------

  FactionSimpleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionSimpleProto& from);
  void MergeFrom(const FactionSimpleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 leader_cid = 4;
  inline bool has_leader_cid() const;
  inline void clear_leader_cid();
  static const int kLeaderCidFieldNumber = 4;
  inline ::google::protobuf::uint64 leader_cid() const;
  inline void set_leader_cid(::google::protobuf::uint64 value);

  // optional bytes leader_name = 5;
  inline bool has_leader_name() const;
  inline void clear_leader_name();
  static const int kLeaderNameFieldNumber = 5;
  inline const ::std::string& leader_name() const;
  inline void set_leader_name(const ::std::string& value);
  inline void set_leader_name(const char* value);
  inline void set_leader_name(const void* value, size_t size);
  inline ::std::string* mutable_leader_name();
  inline ::std::string* release_leader_name();
  inline void set_allocated_leader_name(::std::string* leader_name);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 mem_count = 7;
  inline bool has_mem_count() const;
  inline void clear_mem_count();
  static const int kMemCountFieldNumber = 7;
  inline ::google::protobuf::int32 mem_count() const;
  inline void set_mem_count(::google::protobuf::int32 value);

  // optional uint64 fight = 8;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 8;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // optional int32 apply_type = 9;
  inline bool has_apply_type() const;
  inline void clear_apply_type();
  static const int kApplyTypeFieldNumber = 9;
  inline ::google::protobuf::int32 apply_type() const;
  inline void set_apply_type(::google::protobuf::int32 value);

  // optional int32 apply_minlev = 10;
  inline bool has_apply_minlev() const;
  inline void clear_apply_minlev();
  static const int kApplyMinlevFieldNumber = 10;
  inline ::google::protobuf::int32 apply_minlev() const;
  inline void set_apply_minlev(::google::protobuf::int32 value);

  // optional uint64 apply_fight = 11;
  inline bool has_apply_fight() const;
  inline void clear_apply_fight();
  static const int kApplyFightFieldNumber = 11;
  inline ::google::protobuf::uint64 apply_fight() const;
  inline void set_apply_fight(::google::protobuf::uint64 value);

  // optional .proto_ff.FactionMemSimpleListProto mem = 12;
  inline bool has_mem() const;
  inline void clear_mem();
  static const int kMemFieldNumber = 12;
  inline const ::proto_ff::FactionMemSimpleListProto& mem() const;
  inline ::proto_ff::FactionMemSimpleListProto* mutable_mem();
  inline ::proto_ff::FactionMemSimpleListProto* release_mem();
  inline void set_allocated_mem(::proto_ff::FactionMemSimpleListProto* mem);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionSimpleProto)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_leader_cid();
  inline void clear_has_leader_cid();
  inline void set_has_leader_name();
  inline void clear_has_leader_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_mem_count();
  inline void clear_has_mem_count();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_apply_type();
  inline void clear_has_apply_type();
  inline void set_has_apply_minlev();
  inline void clear_has_apply_minlev();
  inline void set_has_apply_fight();
  inline void clear_has_apply_fight();
  inline void set_has_mem();
  inline void clear_has_mem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint64 leader_cid_;
  ::std::string* leader_name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 mem_count_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::int32 apply_type_;
  ::google::protobuf::int32 apply_minlev_;
  ::google::protobuf::uint64 apply_fight_;
  ::proto_ff::FactionMemSimpleListProto* mem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionSimpleProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionRecordProto : public ::google::protobuf::Message {
 public:
  FactionRecordProto();
  virtual ~FactionRecordProto();

  FactionRecordProto(const FactionRecordProto& from);

  inline FactionRecordProto& operator=(const FactionRecordProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionRecordProto& default_instance();

  void Swap(FactionRecordProto* other);

  // implements Message ----------------------------------------------

  FactionRecordProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionRecordProto& from);
  void MergeFrom(const FactionRecordProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional int32 op = 3;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 3;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional int64 param1 = 4;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 4;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionRecordProto)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_param1();
  inline void clear_has_param1();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int32 op_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionRecordProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionRecordListProto : public ::google::protobuf::Message {
 public:
  FactionRecordListProto();
  virtual ~FactionRecordListProto();

  FactionRecordListProto(const FactionRecordListProto& from);

  inline FactionRecordListProto& operator=(const FactionRecordListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionRecordListProto& default_instance();

  void Swap(FactionRecordListProto* other);

  // implements Message ----------------------------------------------

  FactionRecordListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionRecordListProto& from);
  void MergeFrom(const FactionRecordListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionRecordProto record_lst = 1;
  inline int record_lst_size() const;
  inline void clear_record_lst();
  static const int kRecordLstFieldNumber = 1;
  inline const ::proto_ff::FactionRecordProto& record_lst(int index) const;
  inline ::proto_ff::FactionRecordProto* mutable_record_lst(int index);
  inline ::proto_ff::FactionRecordProto* add_record_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto >&
      record_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto >*
      mutable_record_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionRecordListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto > record_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionRecordListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionSalaryProto : public ::google::protobuf::Message {
 public:
  FactionSalaryProto();
  virtual ~FactionSalaryProto();

  FactionSalaryProto(const FactionSalaryProto& from);

  inline FactionSalaryProto& operator=(const FactionSalaryProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionSalaryProto& default_instance();

  void Swap(FactionSalaryProto* other);

  // implements Message ----------------------------------------------

  FactionSalaryProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionSalaryProto& from);
  void MergeFrom(const FactionSalaryProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 cur = 2;
  inline bool has_cur() const;
  inline void clear_cur();
  static const int kCurFieldNumber = 2;
  inline ::google::protobuf::int32 cur() const;
  inline void set_cur(::google::protobuf::int32 value);

  // optional int32 fetch = 3;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 3;
  inline ::google::protobuf::int32 fetch() const;
  inline void set_fetch(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionSalaryProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cur();
  inline void clear_has_cur();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 cur_;
  ::google::protobuf::int32 fetch_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionSalaryProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionSalaryListProto : public ::google::protobuf::Message {
 public:
  FactionSalaryListProto();
  virtual ~FactionSalaryListProto();

  FactionSalaryListProto(const FactionSalaryListProto& from);

  inline FactionSalaryListProto& operator=(const FactionSalaryListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionSalaryListProto& default_instance();

  void Swap(FactionSalaryListProto* other);

  // implements Message ----------------------------------------------

  FactionSalaryListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionSalaryListProto& from);
  void MergeFrom(const FactionSalaryListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionSalaryProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FactionSalaryProto& info(int index) const;
  inline ::proto_ff::FactionSalaryProto* mutable_info(int index);
  inline ::proto_ff::FactionSalaryProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSalaryProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSalaryProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionSalaryListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSalaryProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionSalaryListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionDinnerProto : public ::google::protobuf::Message {
 public:
  FactionDinnerProto();
  virtual ~FactionDinnerProto();

  FactionDinnerProto(const FactionDinnerProto& from);

  inline FactionDinnerProto& operator=(const FactionDinnerProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionDinnerProto& default_instance();

  void Swap(FactionDinnerProto* other);

  // implements Message ----------------------------------------------

  FactionDinnerProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionDinnerProto& from);
  void MergeFrom(const FactionDinnerProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 trans = 1;
  inline bool has_trans() const;
  inline void clear_trans();
  static const int kTransFieldNumber = 1;
  inline ::google::protobuf::uint32 trans() const;
  inline void set_trans(::google::protobuf::uint32 value);

  // optional uint32 meat = 2;
  inline bool has_meat() const;
  inline void clear_meat();
  static const int kMeatFieldNumber = 2;
  inline ::google::protobuf::uint32 meat() const;
  inline void set_meat(::google::protobuf::uint32 value);

  // optional uint32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 contri = 4;
  inline bool has_contri() const;
  inline void clear_contri();
  static const int kContriFieldNumber = 4;
  inline ::google::protobuf::uint32 contri() const;
  inline void set_contri(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionDinnerProto)
 private:
  inline void set_has_trans();
  inline void clear_has_trans();
  inline void set_has_meat();
  inline void clear_has_meat();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_contri();
  inline void clear_has_contri();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 trans_;
  ::google::protobuf::uint32 meat_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 contri_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionDinnerProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionInviteProto : public ::google::protobuf::Message {
 public:
  FactionInviteProto();
  virtual ~FactionInviteProto();

  FactionInviteProto(const FactionInviteProto& from);

  inline FactionInviteProto& operator=(const FactionInviteProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionInviteProto& default_instance();

  void Swap(FactionInviteProto* other);

  // implements Message ----------------------------------------------

  FactionInviteProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionInviteProto& from);
  void MergeFrom(const FactionInviteProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 prof = 4;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 4;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional .proto_ff.RoleHeadPicProto head = 5;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 5;
  inline const ::proto_ff::RoleHeadPicProto& head() const;
  inline ::proto_ff::RoleHeadPicProto* mutable_head();
  inline ::proto_ff::RoleHeadPicProto* release_head();
  inline void set_allocated_head(::proto_ff::RoleHeadPicProto* head);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionInviteProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 prof_;
  ::proto_ff::RoleHeadPicProto* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionInviteProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionSkillProto : public ::google::protobuf::Message {
 public:
  FactionSkillProto();
  virtual ~FactionSkillProto();

  FactionSkillProto(const FactionSkillProto& from);

  inline FactionSkillProto& operator=(const FactionSkillProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionSkillProto& default_instance();

  void Swap(FactionSkillProto* other);

  // implements Message ----------------------------------------------

  FactionSkillProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionSkillProto& from);
  void MergeFrom(const FactionSkillProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionSkillProto)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionSkillProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionSkillListProto : public ::google::protobuf::Message {
 public:
  FactionSkillListProto();
  virtual ~FactionSkillListProto();

  FactionSkillListProto(const FactionSkillListProto& from);

  inline FactionSkillListProto& operator=(const FactionSkillListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionSkillListProto& default_instance();

  void Swap(FactionSkillListProto* other);

  // implements Message ----------------------------------------------

  FactionSkillListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionSkillListProto& from);
  void MergeFrom(const FactionSkillListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionSkillProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FactionSkillProto& info(int index) const;
  inline ::proto_ff::FactionSkillProto* mutable_info(int index);
  inline ::proto_ff::FactionSkillProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSkillProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSkillProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionSkillListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSkillProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionSkillListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionAnswerRankProto : public ::google::protobuf::Message {
 public:
  FactionAnswerRankProto();
  virtual ~FactionAnswerRankProto();

  FactionAnswerRankProto(const FactionAnswerRankProto& from);

  inline FactionAnswerRankProto& operator=(const FactionAnswerRankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionAnswerRankProto& default_instance();

  void Swap(FactionAnswerRankProto* other);

  // implements Message ----------------------------------------------

  FactionAnswerRankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionAnswerRankProto& from);
  void MergeFrom(const FactionAnswerRankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional int32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionAnswerRankProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint32 faction_id_;
  ::std::string* name_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionAnswerRankProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionAnswerRankListProto : public ::google::protobuf::Message {
 public:
  FactionAnswerRankListProto();
  virtual ~FactionAnswerRankListProto();

  FactionAnswerRankListProto(const FactionAnswerRankListProto& from);

  inline FactionAnswerRankListProto& operator=(const FactionAnswerRankListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionAnswerRankListProto& default_instance();

  void Swap(FactionAnswerRankListProto* other);

  // implements Message ----------------------------------------------

  FactionAnswerRankListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionAnswerRankListProto& from);
  void MergeFrom(const FactionAnswerRankListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionAnswerRankProto lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::proto_ff::FactionAnswerRankProto& lst(int index) const;
  inline ::proto_ff::FactionAnswerRankProto* mutable_lst(int index);
  inline ::proto_ff::FactionAnswerRankProto* add_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerRankProto >&
      lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerRankProto >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionAnswerRankListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerRankProto > lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionAnswerRankListProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionAnswerFinalProto : public ::google::protobuf::Message {
 public:
  FactionAnswerFinalProto();
  virtual ~FactionAnswerFinalProto();

  FactionAnswerFinalProto(const FactionAnswerFinalProto& from);

  inline FactionAnswerFinalProto& operator=(const FactionAnswerFinalProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionAnswerFinalProto& default_instance();

  void Swap(FactionAnswerFinalProto* other);

  // implements Message ----------------------------------------------

  FactionAnswerFinalProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionAnswerFinalProto& from);
  void MergeFrom(const FactionAnswerFinalProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint64 cid = 5;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 5;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 count = 6;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 6;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // optional int32 sec = 7;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 7;
  inline ::google::protobuf::int32 sec() const;
  inline void set_sec(::google::protobuf::int32 value);

  // optional bytes player_name = 8;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 8;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const void* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // optional uint32 faction_count = 9;
  inline bool has_faction_count() const;
  inline void clear_faction_count();
  static const int kFactionCountFieldNumber = 9;
  inline ::google::protobuf::uint32 faction_count() const;
  inline void set_faction_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionAnswerFinalProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_faction_count();
  inline void clear_has_faction_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint32 faction_id_;
  ::std::string* name_;
  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 count_;
  ::std::string* player_name_;
  ::google::protobuf::int32 sec_;
  ::google::protobuf::uint32 faction_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionAnswerFinalProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionBeastRankProto : public ::google::protobuf::Message {
 public:
  FactionBeastRankProto();
  virtual ~FactionBeastRankProto();

  FactionBeastRankProto(const FactionBeastRankProto& from);

  inline FactionBeastRankProto& operator=(const FactionBeastRankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionBeastRankProto& default_instance();

  void Swap(FactionBeastRankProto* other);

  // implements Message ----------------------------------------------

  FactionBeastRankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionBeastRankProto& from);
  void MergeFrom(const FactionBeastRankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 harm = 4;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 4;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionBeastRankProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_harm();
  inline void clear_has_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int64 harm_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionBeastRankProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionBeastRankListProto : public ::google::protobuf::Message {
 public:
  FactionBeastRankListProto();
  virtual ~FactionBeastRankListProto();

  FactionBeastRankListProto(const FactionBeastRankListProto& from);

  inline FactionBeastRankListProto& operator=(const FactionBeastRankListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionBeastRankListProto& default_instance();

  void Swap(FactionBeastRankListProto* other);

  // implements Message ----------------------------------------------

  FactionBeastRankListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionBeastRankListProto& from);
  void MergeFrom(const FactionBeastRankListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionBeastRankProto lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::proto_ff::FactionBeastRankProto& lst(int index) const;
  inline ::proto_ff::FactionBeastRankProto* mutable_lst(int index);
  inline ::proto_ff::FactionBeastRankProto* add_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastRankProto >&
      lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastRankProto >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionBeastRankListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastRankProto > lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionBeastRankListProto* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SyncLoginRsp : public ::google::protobuf::Message {
 public:
  Faction_SyncLoginRsp();
  virtual ~Faction_SyncLoginRsp();

  Faction_SyncLoginRsp(const Faction_SyncLoginRsp& from);

  inline Faction_SyncLoginRsp& operator=(const Faction_SyncLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SyncLoginRsp& default_instance();

  void Swap(Faction_SyncLoginRsp* other);

  // implements Message ----------------------------------------------

  Faction_SyncLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SyncLoginRsp& from);
  void MergeFrom(const Faction_SyncLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FactionProto& info() const;
  inline ::proto_ff::FactionProto* mutable_info();
  inline ::proto_ff::FactionProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionProto* info);

  // optional int32 duty = 2;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 2;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SyncLoginRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_duty();
  inline void clear_has_duty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionProto* info_;
  ::google::protobuf::int32 duty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SyncLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SyncInfoRsp : public ::google::protobuf::Message {
 public:
  Faction_SyncInfoRsp();
  virtual ~Faction_SyncInfoRsp();

  Faction_SyncInfoRsp(const Faction_SyncInfoRsp& from);

  inline Faction_SyncInfoRsp& operator=(const Faction_SyncInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SyncInfoRsp& default_instance();

  void Swap(Faction_SyncInfoRsp* other);

  // implements Message ----------------------------------------------

  Faction_SyncInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SyncInfoRsp& from);
  void MergeFrom(const Faction_SyncInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 duty = 3;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 3;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SyncInfoRsp)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SyncInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InfoReq : public ::google::protobuf::Message {
 public:
  Faction_InfoReq();
  virtual ~Faction_InfoReq();

  Faction_InfoReq(const Faction_InfoReq& from);

  inline Faction_InfoReq& operator=(const Faction_InfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InfoReq& default_instance();

  void Swap(Faction_InfoReq* other);

  // implements Message ----------------------------------------------

  Faction_InfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InfoReq& from);
  void MergeFrom(const Faction_InfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InfoRsp : public ::google::protobuf::Message {
 public:
  Faction_InfoRsp();
  virtual ~Faction_InfoRsp();

  Faction_InfoRsp(const Faction_InfoRsp& from);

  inline Faction_InfoRsp& operator=(const Faction_InfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InfoRsp& default_instance();

  void Swap(Faction_InfoRsp* other);

  // implements Message ----------------------------------------------

  Faction_InfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InfoRsp& from);
  void MergeFrom(const Faction_InfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionProto info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::FactionProto& info() const;
  inline ::proto_ff::FactionProto* mutable_info();
  inline ::proto_ff::FactionProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InfoRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionProto* info_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InfoListReq : public ::google::protobuf::Message {
 public:
  Faction_InfoListReq();
  virtual ~Faction_InfoListReq();

  Faction_InfoListReq(const Faction_InfoListReq& from);

  inline Faction_InfoListReq& operator=(const Faction_InfoListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InfoListReq& default_instance();

  void Swap(Faction_InfoListReq* other);

  // implements Message ----------------------------------------------

  Faction_InfoListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InfoListReq& from);
  void MergeFrom(const Faction_InfoListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InfoListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InfoListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InfoListRsp : public ::google::protobuf::Message {
 public:
  Faction_InfoListRsp();
  virtual ~Faction_InfoListRsp();

  Faction_InfoListRsp(const Faction_InfoListRsp& from);

  inline Faction_InfoListRsp& operator=(const Faction_InfoListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InfoListRsp& default_instance();

  void Swap(Faction_InfoListRsp* other);

  // implements Message ----------------------------------------------

  Faction_InfoListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InfoListRsp& from);
  void MergeFrom(const Faction_InfoListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionListProto info_lst = 1;
  inline int info_lst_size() const;
  inline void clear_info_lst();
  static const int kInfoLstFieldNumber = 1;
  inline const ::proto_ff::FactionListProto& info_lst(int index) const;
  inline ::proto_ff::FactionListProto* mutable_info_lst(int index);
  inline ::proto_ff::FactionListProto* add_info_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto >&
      info_lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto >*
      mutable_info_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InfoListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto > info_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InfoListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SimpleReq : public ::google::protobuf::Message {
 public:
  Faction_SimpleReq();
  virtual ~Faction_SimpleReq();

  Faction_SimpleReq(const Faction_SimpleReq& from);

  inline Faction_SimpleReq& operator=(const Faction_SimpleReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SimpleReq& default_instance();

  void Swap(Faction_SimpleReq* other);

  // implements Message ----------------------------------------------

  Faction_SimpleReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SimpleReq& from);
  void MergeFrom(const Faction_SimpleReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SimpleReq)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SimpleReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SimpleRsp : public ::google::protobuf::Message {
 public:
  Faction_SimpleRsp();
  virtual ~Faction_SimpleRsp();

  Faction_SimpleRsp(const Faction_SimpleRsp& from);

  inline Faction_SimpleRsp& operator=(const Faction_SimpleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SimpleRsp& default_instance();

  void Swap(Faction_SimpleRsp* other);

  // implements Message ----------------------------------------------

  Faction_SimpleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SimpleRsp& from);
  void MergeFrom(const Faction_SimpleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionSimpleProto simple = 2;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 2;
  inline const ::proto_ff::FactionSimpleProto& simple() const;
  inline ::proto_ff::FactionSimpleProto* mutable_simple();
  inline ::proto_ff::FactionSimpleProto* release_simple();
  inline void set_allocated_simple(::proto_ff::FactionSimpleProto* simple);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SimpleRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_simple();
  inline void clear_has_simple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionSimpleProto* simple_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SimpleRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_MemListReq : public ::google::protobuf::Message {
 public:
  Faction_MemListReq();
  virtual ~Faction_MemListReq();

  Faction_MemListReq(const Faction_MemListReq& from);

  inline Faction_MemListReq& operator=(const Faction_MemListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_MemListReq& default_instance();

  void Swap(Faction_MemListReq* other);

  // implements Message ----------------------------------------------

  Faction_MemListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_MemListReq& from);
  void MergeFrom(const Faction_MemListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_MemListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_MemListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_MemListRsp : public ::google::protobuf::Message {
 public:
  Faction_MemListRsp();
  virtual ~Faction_MemListRsp();

  Faction_MemListRsp(const Faction_MemListRsp& from);

  inline Faction_MemListRsp& operator=(const Faction_MemListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_MemListRsp& default_instance();

  void Swap(Faction_MemListRsp* other);

  // implements Message ----------------------------------------------

  Faction_MemListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_MemListRsp& from);
  void MergeFrom(const Faction_MemListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionMemListProto mem_lst = 2;
  inline bool has_mem_lst() const;
  inline void clear_mem_lst();
  static const int kMemLstFieldNumber = 2;
  inline const ::proto_ff::FactionMemListProto& mem_lst() const;
  inline ::proto_ff::FactionMemListProto* mutable_mem_lst();
  inline ::proto_ff::FactionMemListProto* release_mem_lst();
  inline void set_allocated_mem_lst(::proto_ff::FactionMemListProto* mem_lst);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_MemListRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_mem_lst();
  inline void clear_has_mem_lst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionMemListProto* mem_lst_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_MemListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_CreateReq : public ::google::protobuf::Message {
 public:
  Faction_CreateReq();
  virtual ~Faction_CreateReq();

  Faction_CreateReq(const Faction_CreateReq& from);

  inline Faction_CreateReq& operator=(const Faction_CreateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_CreateReq& default_instance();

  void Swap(Faction_CreateReq* other);

  // implements Message ----------------------------------------------

  Faction_CreateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_CreateReq& from);
  void MergeFrom(const Faction_CreateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional bytes notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_CreateReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_CreateReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_CreateRsp : public ::google::protobuf::Message {
 public:
  Faction_CreateRsp();
  virtual ~Faction_CreateRsp();

  Faction_CreateRsp(const Faction_CreateRsp& from);

  inline Faction_CreateRsp& operator=(const Faction_CreateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_CreateRsp& default_instance();

  void Swap(Faction_CreateRsp* other);

  // implements Message ----------------------------------------------

  Faction_CreateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_CreateRsp& from);
  void MergeFrom(const Faction_CreateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionProto info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::FactionProto& info() const;
  inline ::proto_ff::FactionProto* mutable_info();
  inline ::proto_ff::FactionProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_CreateRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionProto* info_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_CreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyListReq : public ::google::protobuf::Message {
 public:
  Faction_ApplyListReq();
  virtual ~Faction_ApplyListReq();

  Faction_ApplyListReq(const Faction_ApplyListReq& from);

  inline Faction_ApplyListReq& operator=(const Faction_ApplyListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyListReq& default_instance();

  void Swap(Faction_ApplyListReq* other);

  // implements Message ----------------------------------------------

  Faction_ApplyListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyListReq& from);
  void MergeFrom(const Faction_ApplyListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyListRsp : public ::google::protobuf::Message {
 public:
  Faction_ApplyListRsp();
  virtual ~Faction_ApplyListRsp();

  Faction_ApplyListRsp(const Faction_ApplyListRsp& from);

  inline Faction_ApplyListRsp& operator=(const Faction_ApplyListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyListRsp& default_instance();

  void Swap(Faction_ApplyListRsp* other);

  // implements Message ----------------------------------------------

  Faction_ApplyListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyListRsp& from);
  void MergeFrom(const Faction_ApplyListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionApplyListProto info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::proto_ff::FactionApplyListProto& info() const;
  inline ::proto_ff::FactionApplyListProto* mutable_info();
  inline ::proto_ff::FactionApplyListProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionApplyListProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyListRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionApplyListProto* info_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyJoinReq : public ::google::protobuf::Message {
 public:
  Faction_ApplyJoinReq();
  virtual ~Faction_ApplyJoinReq();

  Faction_ApplyJoinReq(const Faction_ApplyJoinReq& from);

  inline Faction_ApplyJoinReq& operator=(const Faction_ApplyJoinReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyJoinReq& default_instance();

  void Swap(Faction_ApplyJoinReq* other);

  // implements Message ----------------------------------------------

  Faction_ApplyJoinReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyJoinReq& from);
  void MergeFrom(const Faction_ApplyJoinReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyJoinReq)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyJoinReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyJoinRsp : public ::google::protobuf::Message {
 public:
  Faction_ApplyJoinRsp();
  virtual ~Faction_ApplyJoinRsp();

  Faction_ApplyJoinRsp(const Faction_ApplyJoinRsp& from);

  inline Faction_ApplyJoinRsp& operator=(const Faction_ApplyJoinRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyJoinRsp& default_instance();

  void Swap(Faction_ApplyJoinRsp* other);

  // implements Message ----------------------------------------------

  Faction_ApplyJoinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyJoinRsp& from);
  void MergeFrom(const Faction_ApplyJoinRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyJoinRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyJoinRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyOperateReq : public ::google::protobuf::Message {
 public:
  Faction_ApplyOperateReq();
  virtual ~Faction_ApplyOperateReq();

  Faction_ApplyOperateReq(const Faction_ApplyOperateReq& from);

  inline Faction_ApplyOperateReq& operator=(const Faction_ApplyOperateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyOperateReq& default_instance();

  void Swap(Faction_ApplyOperateReq* other);

  // implements Message ----------------------------------------------

  Faction_ApplyOperateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyOperateReq& from);
  void MergeFrom(const Faction_ApplyOperateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyOperateReq)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 op_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyOperateReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ApplyOperateRsp : public ::google::protobuf::Message {
 public:
  Faction_ApplyOperateRsp();
  virtual ~Faction_ApplyOperateRsp();

  Faction_ApplyOperateRsp(const Faction_ApplyOperateRsp& from);

  inline Faction_ApplyOperateRsp& operator=(const Faction_ApplyOperateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ApplyOperateRsp& default_instance();

  void Swap(Faction_ApplyOperateRsp* other);

  // implements Message ----------------------------------------------

  Faction_ApplyOperateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ApplyOperateRsp& from);
  void MergeFrom(const Faction_ApplyOperateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 op = 2;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 2;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // optional uint64 cid = 3;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 3;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional .proto_ff.FactionMemListProto mem_lst = 4;
  inline bool has_mem_lst() const;
  inline void clear_mem_lst();
  static const int kMemLstFieldNumber = 4;
  inline const ::proto_ff::FactionMemListProto& mem_lst() const;
  inline ::proto_ff::FactionMemListProto* mutable_mem_lst();
  inline ::proto_ff::FactionMemListProto* release_mem_lst();
  inline void set_allocated_mem_lst(::proto_ff::FactionMemListProto* mem_lst);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ApplyOperateRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_mem_lst();
  inline void clear_has_mem_lst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::uint64 cid_;
  ::proto_ff::FactionMemListProto* mem_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ApplyOperateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_KickReq : public ::google::protobuf::Message {
 public:
  Faction_KickReq();
  virtual ~Faction_KickReq();

  Faction_KickReq(const Faction_KickReq& from);

  inline Faction_KickReq& operator=(const Faction_KickReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_KickReq& default_instance();

  void Swap(Faction_KickReq* other);

  // implements Message ----------------------------------------------

  Faction_KickReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_KickReq& from);
  void MergeFrom(const Faction_KickReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 cid_lst = 1;
  inline int cid_lst_size() const;
  inline void clear_cid_lst();
  static const int kCidLstFieldNumber = 1;
  inline ::google::protobuf::uint64 cid_lst(int index) const;
  inline void set_cid_lst(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_KickReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_KickReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_KickRsp : public ::google::protobuf::Message {
 public:
  Faction_KickRsp();
  virtual ~Faction_KickRsp();

  Faction_KickRsp(const Faction_KickRsp& from);

  inline Faction_KickRsp& operator=(const Faction_KickRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_KickRsp& default_instance();

  void Swap(Faction_KickRsp* other);

  // implements Message ----------------------------------------------

  Faction_KickRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_KickRsp& from);
  void MergeFrom(const Faction_KickRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated uint64 cid_lst = 2;
  inline int cid_lst_size() const;
  inline void clear_cid_lst();
  static const int kCidLstFieldNumber = 2;
  inline ::google::protobuf::uint64 cid_lst(int index) const;
  inline void set_cid_lst(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_KickRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_KickRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_QuitReq : public ::google::protobuf::Message {
 public:
  Faction_QuitReq();
  virtual ~Faction_QuitReq();

  Faction_QuitReq(const Faction_QuitReq& from);

  inline Faction_QuitReq& operator=(const Faction_QuitReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_QuitReq& default_instance();

  void Swap(Faction_QuitReq* other);

  // implements Message ----------------------------------------------

  Faction_QuitReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_QuitReq& from);
  void MergeFrom(const Faction_QuitReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_QuitReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_QuitReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_QuitRsp : public ::google::protobuf::Message {
 public:
  Faction_QuitRsp();
  virtual ~Faction_QuitRsp();

  Faction_QuitRsp(const Faction_QuitRsp& from);

  inline Faction_QuitRsp& operator=(const Faction_QuitRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_QuitRsp& default_instance();

  void Swap(Faction_QuitRsp* other);

  // implements Message ----------------------------------------------

  Faction_QuitRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_QuitRsp& from);
  void MergeFrom(const Faction_QuitRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_QuitRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_QuitRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AppointReq : public ::google::protobuf::Message {
 public:
  Faction_AppointReq();
  virtual ~Faction_AppointReq();

  Faction_AppointReq(const Faction_AppointReq& from);

  inline Faction_AppointReq& operator=(const Faction_AppointReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AppointReq& default_instance();

  void Swap(Faction_AppointReq* other);

  // implements Message ----------------------------------------------

  Faction_AppointReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AppointReq& from);
  void MergeFrom(const Faction_AppointReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 duty = 2;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 2;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AppointReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_duty();
  inline void clear_has_duty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 duty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AppointReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AppointRsp : public ::google::protobuf::Message {
 public:
  Faction_AppointRsp();
  virtual ~Faction_AppointRsp();

  Faction_AppointRsp(const Faction_AppointRsp& from);

  inline Faction_AppointRsp& operator=(const Faction_AppointRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AppointRsp& default_instance();

  void Swap(Faction_AppointRsp* other);

  // implements Message ----------------------------------------------

  Faction_AppointRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AppointRsp& from);
  void MergeFrom(const Faction_AppointRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int32 duty = 3;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 3;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // optional int32 self_duty = 4;
  inline bool has_self_duty() const;
  inline void clear_self_duty();
  static const int kSelfDutyFieldNumber = 4;
  inline ::google::protobuf::int32 self_duty() const;
  inline void set_self_duty(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AppointRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_self_duty();
  inline void clear_has_self_duty();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::int32 self_duty_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AppointRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ChgNoticeReq : public ::google::protobuf::Message {
 public:
  Faction_ChgNoticeReq();
  virtual ~Faction_ChgNoticeReq();

  Faction_ChgNoticeReq(const Faction_ChgNoticeReq& from);

  inline Faction_ChgNoticeReq& operator=(const Faction_ChgNoticeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ChgNoticeReq& default_instance();

  void Swap(Faction_ChgNoticeReq* other);

  // implements Message ----------------------------------------------

  Faction_ChgNoticeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ChgNoticeReq& from);
  void MergeFrom(const Faction_ChgNoticeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes notice = 1;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 1;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ChgNoticeReq)
 private:
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ChgNoticeReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ChgNoticeRsp : public ::google::protobuf::Message {
 public:
  Faction_ChgNoticeRsp();
  virtual ~Faction_ChgNoticeRsp();

  Faction_ChgNoticeRsp(const Faction_ChgNoticeRsp& from);

  inline Faction_ChgNoticeRsp& operator=(const Faction_ChgNoticeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ChgNoticeRsp& default_instance();

  void Swap(Faction_ChgNoticeRsp* other);

  // implements Message ----------------------------------------------

  Faction_ChgNoticeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ChgNoticeRsp& from);
  void MergeFrom(const Faction_ChgNoticeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional bytes notice = 2;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 2;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ChgNoticeRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* notice_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ChgNoticeRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SetApplyReq : public ::google::protobuf::Message {
 public:
  Faction_SetApplyReq();
  virtual ~Faction_SetApplyReq();

  Faction_SetApplyReq(const Faction_SetApplyReq& from);

  inline Faction_SetApplyReq& operator=(const Faction_SetApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SetApplyReq& default_instance();

  void Swap(Faction_SetApplyReq* other);

  // implements Message ----------------------------------------------

  Faction_SetApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SetApplyReq& from);
  void MergeFrom(const Faction_SetApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SetApplyReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint64 fight_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SetApplyReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SetApplyRsp : public ::google::protobuf::Message {
 public:
  Faction_SetApplyRsp();
  virtual ~Faction_SetApplyRsp();

  Faction_SetApplyRsp(const Faction_SetApplyRsp& from);

  inline Faction_SetApplyRsp& operator=(const Faction_SetApplyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SetApplyRsp& default_instance();

  void Swap(Faction_SetApplyRsp* other);

  // implements Message ----------------------------------------------

  Faction_SetApplyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SetApplyRsp& from);
  void MergeFrom(const Faction_SetApplyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint64 fight = 4;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 4;
  inline ::google::protobuf::uint64 fight() const;
  inline void set_fight(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SetApplyRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fight();
  inline void clear_has_fight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::uint64 fight_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SetApplyRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_OneKeyApplyReq : public ::google::protobuf::Message {
 public:
  Faction_OneKeyApplyReq();
  virtual ~Faction_OneKeyApplyReq();

  Faction_OneKeyApplyReq(const Faction_OneKeyApplyReq& from);

  inline Faction_OneKeyApplyReq& operator=(const Faction_OneKeyApplyReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_OneKeyApplyReq& default_instance();

  void Swap(Faction_OneKeyApplyReq* other);

  // implements Message ----------------------------------------------

  Faction_OneKeyApplyReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_OneKeyApplyReq& from);
  void MergeFrom(const Faction_OneKeyApplyReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_OneKeyApplyReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_OneKeyApplyReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_OneKeyApplyRsp : public ::google::protobuf::Message {
 public:
  Faction_OneKeyApplyRsp();
  virtual ~Faction_OneKeyApplyRsp();

  Faction_OneKeyApplyRsp(const Faction_OneKeyApplyRsp& from);

  inline Faction_OneKeyApplyRsp& operator=(const Faction_OneKeyApplyRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_OneKeyApplyRsp& default_instance();

  void Swap(Faction_OneKeyApplyRsp* other);

  // implements Message ----------------------------------------------

  Faction_OneKeyApplyRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_OneKeyApplyRsp& from);
  void MergeFrom(const Faction_OneKeyApplyRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated uint32 id_lst = 2;
  inline int id_lst_size() const;
  inline void clear_id_lst();
  static const int kIdLstFieldNumber = 2;
  inline ::google::protobuf::uint32 id_lst(int index) const;
  inline void set_id_lst(int index, ::google::protobuf::uint32 value);
  inline void add_id_lst(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_OneKeyApplyRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_lst_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_OneKeyApplyRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ChgNameReq : public ::google::protobuf::Message {
 public:
  Faction_ChgNameReq();
  virtual ~Faction_ChgNameReq();

  Faction_ChgNameReq(const Faction_ChgNameReq& from);

  inline Faction_ChgNameReq& operator=(const Faction_ChgNameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ChgNameReq& default_instance();

  void Swap(Faction_ChgNameReq* other);

  // implements Message ----------------------------------------------

  Faction_ChgNameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ChgNameReq& from);
  void MergeFrom(const Faction_ChgNameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ChgNameReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ChgNameReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_ChgNameRsp : public ::google::protobuf::Message {
 public:
  Faction_ChgNameRsp();
  virtual ~Faction_ChgNameRsp();

  Faction_ChgNameRsp(const Faction_ChgNameRsp& from);

  inline Faction_ChgNameRsp& operator=(const Faction_ChgNameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_ChgNameRsp& default_instance();

  void Swap(Faction_ChgNameRsp* other);

  // implements Message ----------------------------------------------

  Faction_ChgNameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_ChgNameRsp& from);
  void MergeFrom(const Faction_ChgNameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_ChgNameRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_ChgNameRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_NewApplyNotify : public ::google::protobuf::Message {
 public:
  Faction_NewApplyNotify();
  virtual ~Faction_NewApplyNotify();

  Faction_NewApplyNotify(const Faction_NewApplyNotify& from);

  inline Faction_NewApplyNotify& operator=(const Faction_NewApplyNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_NewApplyNotify& default_instance();

  void Swap(Faction_NewApplyNotify* other);

  // implements Message ----------------------------------------------

  Faction_NewApplyNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_NewApplyNotify& from);
  void MergeFrom(const Faction_NewApplyNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_NewApplyNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_NewApplyNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InviteJoinReq : public ::google::protobuf::Message {
 public:
  Faction_InviteJoinReq();
  virtual ~Faction_InviteJoinReq();

  Faction_InviteJoinReq(const Faction_InviteJoinReq& from);

  inline Faction_InviteJoinReq& operator=(const Faction_InviteJoinReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InviteJoinReq& default_instance();

  void Swap(Faction_InviteJoinReq* other);

  // implements Message ----------------------------------------------

  Faction_InviteJoinReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InviteJoinReq& from);
  void MergeFrom(const Faction_InviteJoinReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InviteJoinReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InviteJoinReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_InviteJoinRsp : public ::google::protobuf::Message {
 public:
  Faction_InviteJoinRsp();
  virtual ~Faction_InviteJoinRsp();

  Faction_InviteJoinRsp(const Faction_InviteJoinRsp& from);

  inline Faction_InviteJoinRsp& operator=(const Faction_InviteJoinRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_InviteJoinRsp& default_instance();

  void Swap(Faction_InviteJoinRsp* other);

  // implements Message ----------------------------------------------

  Faction_InviteJoinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_InviteJoinRsp& from);
  void MergeFrom(const Faction_InviteJoinRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_InviteJoinRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_InviteJoinRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_IviteJoinNotify : public ::google::protobuf::Message {
 public:
  Faction_IviteJoinNotify();
  virtual ~Faction_IviteJoinNotify();

  Faction_IviteJoinNotify(const Faction_IviteJoinNotify& from);

  inline Faction_IviteJoinNotify& operator=(const Faction_IviteJoinNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_IviteJoinNotify& default_instance();

  void Swap(Faction_IviteJoinNotify* other);

  // implements Message ----------------------------------------------

  Faction_IviteJoinNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_IviteJoinNotify& from);
  void MergeFrom(const Faction_IviteJoinNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint32 faction_id = 3;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // required bytes faction_name = 4;
  inline bool has_faction_name() const;
  inline void clear_faction_name();
  static const int kFactionNameFieldNumber = 4;
  inline const ::std::string& faction_name() const;
  inline void set_faction_name(const ::std::string& value);
  inline void set_faction_name(const char* value);
  inline void set_faction_name(const void* value, size_t size);
  inline ::std::string* mutable_faction_name();
  inline ::std::string* release_faction_name();
  inline void set_allocated_faction_name(::std::string* faction_name);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_IviteJoinNotify)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_faction_name();
  inline void clear_has_faction_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::std::string* faction_name_;
  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_IviteJoinNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_RecordListReq : public ::google::protobuf::Message {
 public:
  Faction_RecordListReq();
  virtual ~Faction_RecordListReq();

  Faction_RecordListReq(const Faction_RecordListReq& from);

  inline Faction_RecordListReq& operator=(const Faction_RecordListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_RecordListReq& default_instance();

  void Swap(Faction_RecordListReq* other);

  // implements Message ----------------------------------------------

  Faction_RecordListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_RecordListReq& from);
  void MergeFrom(const Faction_RecordListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_RecordListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_RecordListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_RecordListRsp : public ::google::protobuf::Message {
 public:
  Faction_RecordListRsp();
  virtual ~Faction_RecordListRsp();

  Faction_RecordListRsp(const Faction_RecordListRsp& from);

  inline Faction_RecordListRsp& operator=(const Faction_RecordListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_RecordListRsp& default_instance();

  void Swap(Faction_RecordListRsp* other);

  // implements Message ----------------------------------------------

  Faction_RecordListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_RecordListRsp& from);
  void MergeFrom(const Faction_RecordListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionRecordListProto lst = 2;
  inline bool has_lst() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 2;
  inline const ::proto_ff::FactionRecordListProto& lst() const;
  inline ::proto_ff::FactionRecordListProto* mutable_lst();
  inline ::proto_ff::FactionRecordListProto* release_lst();
  inline void set_allocated_lst(::proto_ff::FactionRecordListProto* lst);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_RecordListRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_lst();
  inline void clear_has_lst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionRecordListProto* lst_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_RecordListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_DonateReq : public ::google::protobuf::Message {
 public:
  Faction_DonateReq();
  virtual ~Faction_DonateReq();

  Faction_DonateReq(const Faction_DonateReq& from);

  inline Faction_DonateReq& operator=(const Faction_DonateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_DonateReq& default_instance();

  void Swap(Faction_DonateReq* other);

  // implements Message ----------------------------------------------

  Faction_DonateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_DonateReq& from);
  void MergeFrom(const Faction_DonateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_DonateReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_DonateReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_DonateRsp : public ::google::protobuf::Message {
 public:
  Faction_DonateRsp();
  virtual ~Faction_DonateRsp();

  Faction_DonateRsp(const Faction_DonateRsp& from);

  inline Faction_DonateRsp& operator=(const Faction_DonateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_DonateRsp& default_instance();

  void Swap(Faction_DonateRsp* other);

  // implements Message ----------------------------------------------

  Faction_DonateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_DonateRsp& from);
  void MergeFrom(const Faction_DonateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_DonateRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_DonateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_DonateNotify : public ::google::protobuf::Message {
 public:
  Faction_DonateNotify();
  virtual ~Faction_DonateNotify();

  Faction_DonateNotify(const Faction_DonateNotify& from);

  inline Faction_DonateNotify& operator=(const Faction_DonateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_DonateNotify& default_instance();

  void Swap(Faction_DonateNotify* other);

  // implements Message ----------------------------------------------

  Faction_DonateNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_DonateNotify& from);
  void MergeFrom(const Faction_DonateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 donate = 1;
  inline bool has_donate() const;
  inline void clear_donate();
  static const int kDonateFieldNumber = 1;
  inline ::google::protobuf::int32 donate() const;
  inline void set_donate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_DonateNotify)
 private:
  inline void set_has_donate();
  inline void clear_has_donate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 donate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_DonateNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SalaryReq : public ::google::protobuf::Message {
 public:
  Faction_SalaryReq();
  virtual ~Faction_SalaryReq();

  Faction_SalaryReq(const Faction_SalaryReq& from);

  inline Faction_SalaryReq& operator=(const Faction_SalaryReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SalaryReq& default_instance();

  void Swap(Faction_SalaryReq* other);

  // implements Message ----------------------------------------------

  Faction_SalaryReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SalaryReq& from);
  void MergeFrom(const Faction_SalaryReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SalaryReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SalaryReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SalaryRsp : public ::google::protobuf::Message {
 public:
  Faction_SalaryRsp();
  virtual ~Faction_SalaryRsp();

  Faction_SalaryRsp(const Faction_SalaryRsp& from);

  inline Faction_SalaryRsp& operator=(const Faction_SalaryRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SalaryRsp& default_instance();

  void Swap(Faction_SalaryRsp* other);

  // implements Message ----------------------------------------------

  Faction_SalaryRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SalaryRsp& from);
  void MergeFrom(const Faction_SalaryRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionSalaryListProto salary = 1;
  inline bool has_salary() const;
  inline void clear_salary();
  static const int kSalaryFieldNumber = 1;
  inline const ::proto_ff::FactionSalaryListProto& salary() const;
  inline ::proto_ff::FactionSalaryListProto* mutable_salary();
  inline ::proto_ff::FactionSalaryListProto* release_salary();
  inline void set_allocated_salary(::proto_ff::FactionSalaryListProto* salary);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SalaryRsp)
 private:
  inline void set_has_salary();
  inline void clear_has_salary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionSalaryListProto* salary_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SalaryRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SalaryNotify : public ::google::protobuf::Message {
 public:
  Faction_SalaryNotify();
  virtual ~Faction_SalaryNotify();

  Faction_SalaryNotify(const Faction_SalaryNotify& from);

  inline Faction_SalaryNotify& operator=(const Faction_SalaryNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SalaryNotify& default_instance();

  void Swap(Faction_SalaryNotify* other);

  // implements Message ----------------------------------------------

  Faction_SalaryNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SalaryNotify& from);
  void MergeFrom(const Faction_SalaryNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionSalaryListProto salary = 1;
  inline bool has_salary() const;
  inline void clear_salary();
  static const int kSalaryFieldNumber = 1;
  inline const ::proto_ff::FactionSalaryListProto& salary() const;
  inline ::proto_ff::FactionSalaryListProto* mutable_salary();
  inline ::proto_ff::FactionSalaryListProto* release_salary();
  inline void set_allocated_salary(::proto_ff::FactionSalaryListProto* salary);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SalaryNotify)
 private:
  inline void set_has_salary();
  inline void clear_has_salary();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionSalaryListProto* salary_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SalaryNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SalaryFetchReq : public ::google::protobuf::Message {
 public:
  Faction_SalaryFetchReq();
  virtual ~Faction_SalaryFetchReq();

  Faction_SalaryFetchReq(const Faction_SalaryFetchReq& from);

  inline Faction_SalaryFetchReq& operator=(const Faction_SalaryFetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SalaryFetchReq& default_instance();

  void Swap(Faction_SalaryFetchReq* other);

  // implements Message ----------------------------------------------

  Faction_SalaryFetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SalaryFetchReq& from);
  void MergeFrom(const Faction_SalaryFetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SalaryFetchReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SalaryFetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SalaryFetchRsp : public ::google::protobuf::Message {
 public:
  Faction_SalaryFetchRsp();
  virtual ~Faction_SalaryFetchRsp();

  Faction_SalaryFetchRsp(const Faction_SalaryFetchRsp& from);

  inline Faction_SalaryFetchRsp& operator=(const Faction_SalaryFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SalaryFetchRsp& default_instance();

  void Swap(Faction_SalaryFetchRsp* other);

  // implements Message ----------------------------------------------

  Faction_SalaryFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SalaryFetchRsp& from);
  void MergeFrom(const Faction_SalaryFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SalaryFetchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SalaryFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_DinnerUpdateRsp : public ::google::protobuf::Message {
 public:
  Faction_DinnerUpdateRsp();
  virtual ~Faction_DinnerUpdateRsp();

  Faction_DinnerUpdateRsp(const Faction_DinnerUpdateRsp& from);

  inline Faction_DinnerUpdateRsp& operator=(const Faction_DinnerUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_DinnerUpdateRsp& default_instance();

  void Swap(Faction_DinnerUpdateRsp* other);

  // implements Message ----------------------------------------------

  Faction_DinnerUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_DinnerUpdateRsp& from);
  void MergeFrom(const Faction_DinnerUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionDinnerProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FactionDinnerProto& info() const;
  inline ::proto_ff::FactionDinnerProto* mutable_info();
  inline ::proto_ff::FactionDinnerProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionDinnerProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_DinnerUpdateRsp)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionDinnerProto* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_DinnerUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_TransInviteListReq : public ::google::protobuf::Message {
 public:
  Faction_TransInviteListReq();
  virtual ~Faction_TransInviteListReq();

  Faction_TransInviteListReq(const Faction_TransInviteListReq& from);

  inline Faction_TransInviteListReq& operator=(const Faction_TransInviteListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_TransInviteListReq& default_instance();

  void Swap(Faction_TransInviteListReq* other);

  // implements Message ----------------------------------------------

  Faction_TransInviteListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_TransInviteListReq& from);
  void MergeFrom(const Faction_TransInviteListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_TransInviteListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_TransInviteListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_TransInviteListRsp : public ::google::protobuf::Message {
 public:
  Faction_TransInviteListRsp();
  virtual ~Faction_TransInviteListRsp();

  Faction_TransInviteListRsp(const Faction_TransInviteListRsp& from);

  inline Faction_TransInviteListRsp& operator=(const Faction_TransInviteListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_TransInviteListRsp& default_instance();

  void Swap(Faction_TransInviteListRsp* other);

  // implements Message ----------------------------------------------

  Faction_TransInviteListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_TransInviteListRsp& from);
  void MergeFrom(const Faction_TransInviteListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionInviteProto invite = 1;
  inline int invite_size() const;
  inline void clear_invite();
  static const int kInviteFieldNumber = 1;
  inline const ::proto_ff::FactionInviteProto& invite(int index) const;
  inline ::proto_ff::FactionInviteProto* mutable_invite(int index);
  inline ::proto_ff::FactionInviteProto* add_invite();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto >&
      invite() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto >*
      mutable_invite();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_TransInviteListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto > invite_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_TransInviteListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_TransAcceptListRsp : public ::google::protobuf::Message {
 public:
  Faction_TransAcceptListRsp();
  virtual ~Faction_TransAcceptListRsp();

  Faction_TransAcceptListRsp(const Faction_TransAcceptListRsp& from);

  inline Faction_TransAcceptListRsp& operator=(const Faction_TransAcceptListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_TransAcceptListRsp& default_instance();

  void Swap(Faction_TransAcceptListRsp* other);

  // implements Message ----------------------------------------------

  Faction_TransAcceptListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_TransAcceptListRsp& from);
  void MergeFrom(const Faction_TransAcceptListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionInviteProto accept = 1;
  inline int accept_size() const;
  inline void clear_accept();
  static const int kAcceptFieldNumber = 1;
  inline const ::proto_ff::FactionInviteProto& accept(int index) const;
  inline ::proto_ff::FactionInviteProto* mutable_accept(int index);
  inline ::proto_ff::FactionInviteProto* add_accept();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto >&
      accept() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto >*
      mutable_accept();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_TransAcceptListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto > accept_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_TransAcceptListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_TransInviteReq : public ::google::protobuf::Message {
 public:
  Faction_TransInviteReq();
  virtual ~Faction_TransInviteReq();

  Faction_TransInviteReq(const Faction_TransInviteReq& from);

  inline Faction_TransInviteReq& operator=(const Faction_TransInviteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_TransInviteReq& default_instance();

  void Swap(Faction_TransInviteReq* other);

  // implements Message ----------------------------------------------

  Faction_TransInviteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_TransInviteReq& from);
  void MergeFrom(const Faction_TransInviteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 invite_cid = 1;
  inline bool has_invite_cid() const;
  inline void clear_invite_cid();
  static const int kInviteCidFieldNumber = 1;
  inline ::google::protobuf::uint64 invite_cid() const;
  inline void set_invite_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_TransInviteReq)
 private:
  inline void set_has_invite_cid();
  inline void clear_has_invite_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 invite_cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_TransInviteReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_TransInviteRsp : public ::google::protobuf::Message {
 public:
  Faction_TransInviteRsp();
  virtual ~Faction_TransInviteRsp();

  Faction_TransInviteRsp(const Faction_TransInviteRsp& from);

  inline Faction_TransInviteRsp& operator=(const Faction_TransInviteRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_TransInviteRsp& default_instance();

  void Swap(Faction_TransInviteRsp* other);

  // implements Message ----------------------------------------------

  Faction_TransInviteRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_TransInviteRsp& from);
  void MergeFrom(const Faction_TransInviteRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional uint64 invite_cid = 2;
  inline bool has_invite_cid() const;
  inline void clear_invite_cid();
  static const int kInviteCidFieldNumber = 2;
  inline ::google::protobuf::uint64 invite_cid() const;
  inline void set_invite_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_TransInviteRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_invite_cid();
  inline void clear_has_invite_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 invite_cid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_TransInviteRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_TransInviteNotify : public ::google::protobuf::Message {
 public:
  Faction_TransInviteNotify();
  virtual ~Faction_TransInviteNotify();

  Faction_TransInviteNotify(const Faction_TransInviteNotify& from);

  inline Faction_TransInviteNotify& operator=(const Faction_TransInviteNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_TransInviteNotify& default_instance();

  void Swap(Faction_TransInviteNotify* other);

  // implements Message ----------------------------------------------

  Faction_TransInviteNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_TransInviteNotify& from);
  void MergeFrom(const Faction_TransInviteNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionInviteProto info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::FactionInviteProto& info() const;
  inline ::proto_ff::FactionInviteProto* mutable_info();
  inline ::proto_ff::FactionInviteProto* release_info();
  inline void set_allocated_info(::proto_ff::FactionInviteProto* info);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_TransInviteNotify)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionInviteProto* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_TransInviteNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_TransDelAcceptNotify : public ::google::protobuf::Message {
 public:
  Faction_TransDelAcceptNotify();
  virtual ~Faction_TransDelAcceptNotify();

  Faction_TransDelAcceptNotify(const Faction_TransDelAcceptNotify& from);

  inline Faction_TransDelAcceptNotify& operator=(const Faction_TransDelAcceptNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_TransDelAcceptNotify& default_instance();

  void Swap(Faction_TransDelAcceptNotify* other);

  // implements Message ----------------------------------------------

  Faction_TransDelAcceptNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_TransDelAcceptNotify& from);
  void MergeFrom(const Faction_TransDelAcceptNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 del_cid = 1;
  inline int del_cid_size() const;
  inline void clear_del_cid();
  static const int kDelCidFieldNumber = 1;
  inline ::google::protobuf::uint64 del_cid(int index) const;
  inline void set_del_cid(int index, ::google::protobuf::uint64 value);
  inline void add_del_cid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      del_cid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_del_cid();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_TransDelAcceptNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > del_cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_TransDelAcceptNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_TransAgreeReq : public ::google::protobuf::Message {
 public:
  Faction_TransAgreeReq();
  virtual ~Faction_TransAgreeReq();

  Faction_TransAgreeReq(const Faction_TransAgreeReq& from);

  inline Faction_TransAgreeReq& operator=(const Faction_TransAgreeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_TransAgreeReq& default_instance();

  void Swap(Faction_TransAgreeReq* other);

  // implements Message ----------------------------------------------

  Faction_TransAgreeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_TransAgreeReq& from);
  void MergeFrom(const Faction_TransAgreeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_TransAgreeReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_TransAgreeReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_TransAgreeRsp : public ::google::protobuf::Message {
 public:
  Faction_TransAgreeRsp();
  virtual ~Faction_TransAgreeRsp();

  Faction_TransAgreeRsp(const Faction_TransAgreeRsp& from);

  inline Faction_TransAgreeRsp& operator=(const Faction_TransAgreeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_TransAgreeRsp& default_instance();

  void Swap(Faction_TransAgreeRsp* other);

  // implements Message ----------------------------------------------

  Faction_TransAgreeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_TransAgreeRsp& from);
  void MergeFrom(const Faction_TransAgreeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_TransAgreeRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_TransAgreeRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SkillInfoReq : public ::google::protobuf::Message {
 public:
  Faction_SkillInfoReq();
  virtual ~Faction_SkillInfoReq();

  Faction_SkillInfoReq(const Faction_SkillInfoReq& from);

  inline Faction_SkillInfoReq& operator=(const Faction_SkillInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SkillInfoReq& default_instance();

  void Swap(Faction_SkillInfoReq* other);

  // implements Message ----------------------------------------------

  Faction_SkillInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SkillInfoReq& from);
  void MergeFrom(const Faction_SkillInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SkillInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SkillInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SkillInfoRsp : public ::google::protobuf::Message {
 public:
  Faction_SkillInfoRsp();
  virtual ~Faction_SkillInfoRsp();

  Faction_SkillInfoRsp(const Faction_SkillInfoRsp& from);

  inline Faction_SkillInfoRsp& operator=(const Faction_SkillInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SkillInfoRsp& default_instance();

  void Swap(Faction_SkillInfoRsp* other);

  // implements Message ----------------------------------------------

  Faction_SkillInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SkillInfoRsp& from);
  void MergeFrom(const Faction_SkillInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionSkillListProto skill = 1;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 1;
  inline const ::proto_ff::FactionSkillListProto& skill() const;
  inline ::proto_ff::FactionSkillListProto* mutable_skill();
  inline ::proto_ff::FactionSkillListProto* release_skill();
  inline void set_allocated_skill(::proto_ff::FactionSkillListProto* skill);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SkillInfoRsp)
 private:
  inline void set_has_skill();
  inline void clear_has_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionSkillListProto* skill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SkillInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SkillUpdateRsp : public ::google::protobuf::Message {
 public:
  Faction_SkillUpdateRsp();
  virtual ~Faction_SkillUpdateRsp();

  Faction_SkillUpdateRsp(const Faction_SkillUpdateRsp& from);

  inline Faction_SkillUpdateRsp& operator=(const Faction_SkillUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SkillUpdateRsp& default_instance();

  void Swap(Faction_SkillUpdateRsp* other);

  // implements Message ----------------------------------------------

  Faction_SkillUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SkillUpdateRsp& from);
  void MergeFrom(const Faction_SkillUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionSkillListProto skill = 1;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 1;
  inline const ::proto_ff::FactionSkillListProto& skill() const;
  inline ::proto_ff::FactionSkillListProto* mutable_skill();
  inline ::proto_ff::FactionSkillListProto* release_skill();
  inline void set_allocated_skill(::proto_ff::FactionSkillListProto* skill);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SkillUpdateRsp)
 private:
  inline void set_has_skill();
  inline void clear_has_skill();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionSkillListProto* skill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SkillUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SkillUpgradeReq : public ::google::protobuf::Message {
 public:
  Faction_SkillUpgradeReq();
  virtual ~Faction_SkillUpgradeReq();

  Faction_SkillUpgradeReq(const Faction_SkillUpgradeReq& from);

  inline Faction_SkillUpgradeReq& operator=(const Faction_SkillUpgradeReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SkillUpgradeReq& default_instance();

  void Swap(Faction_SkillUpgradeReq* other);

  // implements Message ----------------------------------------------

  Faction_SkillUpgradeReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SkillUpgradeReq& from);
  void MergeFrom(const Faction_SkillUpgradeReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SkillUpgradeReq)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SkillUpgradeReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_SkillUpgradeRsp : public ::google::protobuf::Message {
 public:
  Faction_SkillUpgradeRsp();
  virtual ~Faction_SkillUpgradeRsp();

  Faction_SkillUpgradeRsp(const Faction_SkillUpgradeRsp& from);

  inline Faction_SkillUpgradeRsp& operator=(const Faction_SkillUpgradeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_SkillUpgradeRsp& default_instance();

  void Swap(Faction_SkillUpgradeRsp* other);

  // implements Message ----------------------------------------------

  Faction_SkillUpgradeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_SkillUpgradeRsp& from);
  void MergeFrom(const Faction_SkillUpgradeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_SkillUpgradeRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_SkillUpgradeRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AnswerRankListReq : public ::google::protobuf::Message {
 public:
  Faction_AnswerRankListReq();
  virtual ~Faction_AnswerRankListReq();

  Faction_AnswerRankListReq(const Faction_AnswerRankListReq& from);

  inline Faction_AnswerRankListReq& operator=(const Faction_AnswerRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AnswerRankListReq& default_instance();

  void Swap(Faction_AnswerRankListReq* other);

  // implements Message ----------------------------------------------

  Faction_AnswerRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AnswerRankListReq& from);
  void MergeFrom(const Faction_AnswerRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AnswerRankListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AnswerRankListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AnswerRankListRsp : public ::google::protobuf::Message {
 public:
  Faction_AnswerRankListRsp();
  virtual ~Faction_AnswerRankListRsp();

  Faction_AnswerRankListRsp(const Faction_AnswerRankListRsp& from);

  inline Faction_AnswerRankListRsp& operator=(const Faction_AnswerRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AnswerRankListRsp& default_instance();

  void Swap(Faction_AnswerRankListRsp* other);

  // implements Message ----------------------------------------------

  Faction_AnswerRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AnswerRankListRsp& from);
  void MergeFrom(const Faction_AnswerRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionAnswerRankListProto rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::FactionAnswerRankListProto& rank() const;
  inline ::proto_ff::FactionAnswerRankListProto* mutable_rank();
  inline ::proto_ff::FactionAnswerRankListProto* release_rank();
  inline void set_allocated_rank(::proto_ff::FactionAnswerRankListProto* rank);

  // optional uint32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AnswerRankListRsp)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionAnswerRankListProto* rank_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AnswerRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AnswerCurRankRsp : public ::google::protobuf::Message {
 public:
  Faction_AnswerCurRankRsp();
  virtual ~Faction_AnswerCurRankRsp();

  Faction_AnswerCurRankRsp(const Faction_AnswerCurRankRsp& from);

  inline Faction_AnswerCurRankRsp& operator=(const Faction_AnswerCurRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AnswerCurRankRsp& default_instance();

  void Swap(Faction_AnswerCurRankRsp* other);

  // implements Message ----------------------------------------------

  Faction_AnswerCurRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AnswerCurRankRsp& from);
  void MergeFrom(const Faction_AnswerCurRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionAnswerRankListProto rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::FactionAnswerRankListProto& rank() const;
  inline ::proto_ff::FactionAnswerRankListProto* mutable_rank();
  inline ::proto_ff::FactionAnswerRankListProto* release_rank();
  inline void set_allocated_rank(::proto_ff::FactionAnswerRankListProto* rank);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AnswerCurRankRsp)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionAnswerRankListProto* rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AnswerCurRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AnswerStageRsp : public ::google::protobuf::Message {
 public:
  Faction_AnswerStageRsp();
  virtual ~Faction_AnswerStageRsp();

  Faction_AnswerStageRsp(const Faction_AnswerStageRsp& from);

  inline Faction_AnswerStageRsp& operator=(const Faction_AnswerStageRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AnswerStageRsp& default_instance();

  void Swap(Faction_AnswerStageRsp* other);

  // implements Message ----------------------------------------------

  Faction_AnswerStageRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AnswerStageRsp& from);
  void MergeFrom(const Faction_AnswerStageRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 stage = 1;
  inline bool has_stage() const;
  inline void clear_stage();
  static const int kStageFieldNumber = 1;
  inline ::google::protobuf::int32 stage() const;
  inline void set_stage(::google::protobuf::int32 value);

  // required int32 sec = 2;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 2;
  inline ::google::protobuf::int32 sec() const;
  inline void set_sec(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 cid = 6;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 6;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AnswerStageRsp)
 private:
  inline void set_has_stage();
  inline void clear_has_stage();
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 stage_;
  ::google::protobuf::int32 sec_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 id_;
  ::std::string* name_;
  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AnswerStageRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AnswerResultRsp : public ::google::protobuf::Message {
 public:
  Faction_AnswerResultRsp();
  virtual ~Faction_AnswerResultRsp();

  Faction_AnswerResultRsp(const Faction_AnswerResultRsp& from);

  inline Faction_AnswerResultRsp& operator=(const Faction_AnswerResultRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AnswerResultRsp& default_instance();

  void Swap(Faction_AnswerResultRsp* other);

  // implements Message ----------------------------------------------

  Faction_AnswerResultRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AnswerResultRsp& from);
  void MergeFrom(const Faction_AnswerResultRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AnswerResultRsp)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 count_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AnswerResultRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_AnswerFinalRsp : public ::google::protobuf::Message {
 public:
  Faction_AnswerFinalRsp();
  virtual ~Faction_AnswerFinalRsp();

  Faction_AnswerFinalRsp(const Faction_AnswerFinalRsp& from);

  inline Faction_AnswerFinalRsp& operator=(const Faction_AnswerFinalRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_AnswerFinalRsp& default_instance();

  void Swap(Faction_AnswerFinalRsp* other);

  // implements Message ----------------------------------------------

  Faction_AnswerFinalRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_AnswerFinalRsp& from);
  void MergeFrom(const Faction_AnswerFinalRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionAnswerFinalProto final = 1;
  inline int final_size() const;
  inline void clear_final();
  static const int kFinalFieldNumber = 1;
  inline const ::proto_ff::FactionAnswerFinalProto& final(int index) const;
  inline ::proto_ff::FactionAnswerFinalProto* mutable_final(int index);
  inline ::proto_ff::FactionAnswerFinalProto* add_final();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto >&
      final() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto >*
      mutable_final();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_AnswerFinalRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto > final_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_AnswerFinalRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_BeastInfoReq : public ::google::protobuf::Message {
 public:
  Faction_BeastInfoReq();
  virtual ~Faction_BeastInfoReq();

  Faction_BeastInfoReq(const Faction_BeastInfoReq& from);

  inline Faction_BeastInfoReq& operator=(const Faction_BeastInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_BeastInfoReq& default_instance();

  void Swap(Faction_BeastInfoReq* other);

  // implements Message ----------------------------------------------

  Faction_BeastInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_BeastInfoReq& from);
  void MergeFrom(const Faction_BeastInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_BeastInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_BeastInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_BeastInfoRsp : public ::google::protobuf::Message {
 public:
  Faction_BeastInfoRsp();
  virtual ~Faction_BeastInfoRsp();

  Faction_BeastInfoRsp(const Faction_BeastInfoRsp& from);

  inline Faction_BeastInfoRsp& operator=(const Faction_BeastInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_BeastInfoRsp& default_instance();

  void Swap(Faction_BeastInfoRsp* other);

  // implements Message ----------------------------------------------

  Faction_BeastInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_BeastInfoRsp& from);
  void MergeFrom(const Faction_BeastInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionBeastRankListProto rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::FactionBeastRankListProto& rank() const;
  inline ::proto_ff::FactionBeastRankListProto* mutable_rank();
  inline ::proto_ff::FactionBeastRankListProto* release_rank();
  inline void set_allocated_rank(::proto_ff::FactionBeastRankListProto* rank);

  // optional uint32 myrank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyrankFieldNumber = 2;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // optional int64 myharm = 3;
  inline bool has_myharm() const;
  inline void clear_myharm();
  static const int kMyharmFieldNumber = 3;
  inline ::google::protobuf::int64 myharm() const;
  inline void set_myharm(::google::protobuf::int64 value);

  // optional int32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int32 is_open = 5;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 5;
  inline ::google::protobuf::int32 is_open() const;
  inline void set_is_open(::google::protobuf::int32 value);

  // optional uint32 today_count = 6;
  inline bool has_today_count() const;
  inline void clear_today_count();
  static const int kTodayCountFieldNumber = 6;
  inline ::google::protobuf::uint32 today_count() const;
  inline void set_today_count(::google::protobuf::uint32 value);

  // optional uint32 week_count = 7;
  inline bool has_week_count() const;
  inline void clear_week_count();
  static const int kWeekCountFieldNumber = 7;
  inline ::google::protobuf::uint32 week_count() const;
  inline void set_week_count(::google::protobuf::uint32 value);

  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 tribute = 9;
  inline bool has_tribute() const;
  inline void clear_tribute();
  static const int kTributeFieldNumber = 9;
  inline ::google::protobuf::uint32 tribute() const;
  inline void set_tribute(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_BeastInfoRsp)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_myharm();
  inline void clear_has_myharm();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_is_open();
  inline void clear_has_is_open();
  inline void set_has_today_count();
  inline void clear_has_today_count();
  inline void set_has_week_count();
  inline void clear_has_week_count();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_tribute();
  inline void clear_has_tribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionBeastRankListProto* rank_;
  ::google::protobuf::int64 myharm_;
  ::google::protobuf::uint32 myrank_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int32 is_open_;
  ::google::protobuf::uint32 today_count_;
  ::google::protobuf::uint32 week_count_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 tribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_BeastInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_BeastOpenInfoNotify : public ::google::protobuf::Message {
 public:
  Faction_BeastOpenInfoNotify();
  virtual ~Faction_BeastOpenInfoNotify();

  Faction_BeastOpenInfoNotify(const Faction_BeastOpenInfoNotify& from);

  inline Faction_BeastOpenInfoNotify& operator=(const Faction_BeastOpenInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_BeastOpenInfoNotify& default_instance();

  void Swap(Faction_BeastOpenInfoNotify* other);

  // implements Message ----------------------------------------------

  Faction_BeastOpenInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_BeastOpenInfoNotify& from);
  void MergeFrom(const Faction_BeastOpenInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 is_open = 1;
  inline bool has_is_open() const;
  inline void clear_is_open();
  static const int kIsOpenFieldNumber = 1;
  inline ::google::protobuf::int32 is_open() const;
  inline void set_is_open(::google::protobuf::int32 value);

  // optional uint32 today_count = 2;
  inline bool has_today_count() const;
  inline void clear_today_count();
  static const int kTodayCountFieldNumber = 2;
  inline ::google::protobuf::uint32 today_count() const;
  inline void set_today_count(::google::protobuf::uint32 value);

  // optional uint32 week_count = 3;
  inline bool has_week_count() const;
  inline void clear_week_count();
  static const int kWeekCountFieldNumber = 3;
  inline ::google::protobuf::uint32 week_count() const;
  inline void set_week_count(::google::protobuf::uint32 value);

  // optional int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional uint32 tribute = 5;
  inline bool has_tribute() const;
  inline void clear_tribute();
  static const int kTributeFieldNumber = 5;
  inline ::google::protobuf::uint32 tribute() const;
  inline void set_tribute(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_BeastOpenInfoNotify)
 private:
  inline void set_has_is_open();
  inline void clear_has_is_open();
  inline void set_has_today_count();
  inline void clear_has_today_count();
  inline void set_has_week_count();
  inline void clear_has_week_count();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_tribute();
  inline void clear_has_tribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 is_open_;
  ::google::protobuf::uint32 today_count_;
  ::google::protobuf::uint32 week_count_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::uint32 tribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_BeastOpenInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_BeastOpenReq : public ::google::protobuf::Message {
 public:
  Faction_BeastOpenReq();
  virtual ~Faction_BeastOpenReq();

  Faction_BeastOpenReq(const Faction_BeastOpenReq& from);

  inline Faction_BeastOpenReq& operator=(const Faction_BeastOpenReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_BeastOpenReq& default_instance();

  void Swap(Faction_BeastOpenReq* other);

  // implements Message ----------------------------------------------

  Faction_BeastOpenReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_BeastOpenReq& from);
  void MergeFrom(const Faction_BeastOpenReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_BeastOpenReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_BeastOpenReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_BeastOpenRsp : public ::google::protobuf::Message {
 public:
  Faction_BeastOpenRsp();
  virtual ~Faction_BeastOpenRsp();

  Faction_BeastOpenRsp(const Faction_BeastOpenRsp& from);

  inline Faction_BeastOpenRsp& operator=(const Faction_BeastOpenRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_BeastOpenRsp& default_instance();

  void Swap(Faction_BeastOpenRsp* other);

  // implements Message ----------------------------------------------

  Faction_BeastOpenRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_BeastOpenRsp& from);
  void MergeFrom(const Faction_BeastOpenRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_BeastOpenRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_BeastOpenRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_BeastCurHarmRankRsp : public ::google::protobuf::Message {
 public:
  Faction_BeastCurHarmRankRsp();
  virtual ~Faction_BeastCurHarmRankRsp();

  Faction_BeastCurHarmRankRsp(const Faction_BeastCurHarmRankRsp& from);

  inline Faction_BeastCurHarmRankRsp& operator=(const Faction_BeastCurHarmRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_BeastCurHarmRankRsp& default_instance();

  void Swap(Faction_BeastCurHarmRankRsp* other);

  // implements Message ----------------------------------------------

  Faction_BeastCurHarmRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_BeastCurHarmRankRsp& from);
  void MergeFrom(const Faction_BeastCurHarmRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionBeastRankListProto rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::FactionBeastRankListProto& rank() const;
  inline ::proto_ff::FactionBeastRankListProto* mutable_rank();
  inline ::proto_ff::FactionBeastRankListProto* release_rank();
  inline void set_allocated_rank(::proto_ff::FactionBeastRankListProto* rank);

  // optional int64 myharm = 2;
  inline bool has_myharm() const;
  inline void clear_myharm();
  static const int kMyharmFieldNumber = 2;
  inline ::google::protobuf::int64 myharm() const;
  inline void set_myharm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_BeastCurHarmRankRsp)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_myharm();
  inline void clear_has_myharm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionBeastRankListProto* rank_;
  ::google::protobuf::int64 myharm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_BeastCurHarmRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_BeastFinishRsp : public ::google::protobuf::Message {
 public:
  Faction_BeastFinishRsp();
  virtual ~Faction_BeastFinishRsp();

  Faction_BeastFinishRsp(const Faction_BeastFinishRsp& from);

  inline Faction_BeastFinishRsp& operator=(const Faction_BeastFinishRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_BeastFinishRsp& default_instance();

  void Swap(Faction_BeastFinishRsp* other);

  // implements Message ----------------------------------------------

  Faction_BeastFinishRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_BeastFinishRsp& from);
  void MergeFrom(const Faction_BeastFinishRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sec = 1;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 1;
  inline ::google::protobuf::int32 sec() const;
  inline void set_sec(::google::protobuf::int32 value);

  // optional int32 star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional int64 harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // repeated .proto_ff.ComItem reward = 5;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::proto_ff::ComItem& reward(int index) const;
  inline ::proto_ff::ComItem* mutable_reward(int index);
  inline ::proto_ff::ComItem* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
      mutable_reward();

  // repeated .proto_ff.ComItem faction_reward = 6;
  inline int faction_reward_size() const;
  inline void clear_faction_reward();
  static const int kFactionRewardFieldNumber = 6;
  inline const ::proto_ff::ComItem& faction_reward(int index) const;
  inline ::proto_ff::ComItem* mutable_faction_reward(int index);
  inline ::proto_ff::ComItem* add_faction_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
      faction_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
      mutable_faction_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_BeastFinishRsp)
 private:
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 sec_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::int64 harm_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem > reward_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem > faction_reward_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_BeastFinishRsp* default_instance_;
};
// -------------------------------------------------------------------

class CL_FactionRoleUpdateRsp : public ::google::protobuf::Message {
 public:
  CL_FactionRoleUpdateRsp();
  virtual ~CL_FactionRoleUpdateRsp();

  CL_FactionRoleUpdateRsp(const CL_FactionRoleUpdateRsp& from);

  inline CL_FactionRoleUpdateRsp& operator=(const CL_FactionRoleUpdateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CL_FactionRoleUpdateRsp& default_instance();

  void Swap(CL_FactionRoleUpdateRsp* other);

  // implements Message ----------------------------------------------

  CL_FactionRoleUpdateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CL_FactionRoleUpdateRsp& from);
  void MergeFrom(const CL_FactionRoleUpdateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint32 faction_id = 2;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 2;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // required bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 duty = 4;
  inline bool has_duty() const;
  inline void clear_duty();
  static const int kDutyFieldNumber = 4;
  inline ::google::protobuf::int32 duty() const;
  inline void set_duty(::google::protobuf::int32 value);

  // required int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required uint64 leader = 6;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 6;
  inline ::google::protobuf::uint64 leader() const;
  inline void set_leader(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CL_FactionRoleUpdateRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_duty();
  inline void clear_has_duty();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_leader();
  inline void clear_has_leader();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::int32 duty_;
  ::google::protobuf::uint64 leader_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static CL_FactionRoleUpdateRsp* default_instance_;
};
// -------------------------------------------------------------------

class LC_FactionCreate : public ::google::protobuf::Message {
 public:
  LC_FactionCreate();
  virtual ~LC_FactionCreate();

  LC_FactionCreate(const LC_FactionCreate& from);

  inline LC_FactionCreate& operator=(const LC_FactionCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LC_FactionCreate& default_instance();

  void Swap(LC_FactionCreate* other);

  // implements Message ----------------------------------------------

  LC_FactionCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LC_FactionCreate& from);
  void MergeFrom(const LC_FactionCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes notice = 3;
  inline bool has_notice() const;
  inline void clear_notice();
  static const int kNoticeFieldNumber = 3;
  inline const ::std::string& notice() const;
  inline void set_notice(const ::std::string& value);
  inline void set_notice(const char* value);
  inline void set_notice(const void* value, size_t size);
  inline ::std::string* mutable_notice();
  inline ::std::string* release_notice();
  inline void set_allocated_notice(::std::string* notice);

  // @@protoc_insertion_point(class_scope:proto_ff.LC_FactionCreate)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_notice();
  inline void clear_has_notice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::std::string* notice_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LC_FactionCreate* default_instance_;
};
// -------------------------------------------------------------------

class CL_FactionCreateResult : public ::google::protobuf::Message {
 public:
  CL_FactionCreateResult();
  virtual ~CL_FactionCreateResult();

  CL_FactionCreateResult(const CL_FactionCreateResult& from);

  inline CL_FactionCreateResult& operator=(const CL_FactionCreateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CL_FactionCreateResult& default_instance();

  void Swap(CL_FactionCreateResult* other);

  // implements Message ----------------------------------------------

  CL_FactionCreateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CL_FactionCreateResult& from);
  void MergeFrom(const CL_FactionCreateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CL_FactionCreateResult)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static CL_FactionCreateResult* default_instance_;
};
// -------------------------------------------------------------------

class LC_FactionChgName : public ::google::protobuf::Message {
 public:
  LC_FactionChgName();
  virtual ~LC_FactionChgName();

  LC_FactionChgName(const LC_FactionChgName& from);

  inline LC_FactionChgName& operator=(const LC_FactionChgName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LC_FactionChgName& default_instance();

  void Swap(LC_FactionChgName* other);

  // implements Message ----------------------------------------------

  LC_FactionChgName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LC_FactionChgName& from);
  void MergeFrom(const LC_FactionChgName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.LC_FactionChgName)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LC_FactionChgName* default_instance_;
};
// -------------------------------------------------------------------

class CL_FactionChgNameResult : public ::google::protobuf::Message {
 public:
  CL_FactionChgNameResult();
  virtual ~CL_FactionChgNameResult();

  CL_FactionChgNameResult(const CL_FactionChgNameResult& from);

  inline CL_FactionChgNameResult& operator=(const CL_FactionChgNameResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CL_FactionChgNameResult& default_instance();

  void Swap(CL_FactionChgNameResult* other);

  // implements Message ----------------------------------------------

  CL_FactionChgNameResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CL_FactionChgNameResult& from);
  void MergeFrom(const CL_FactionChgNameResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CL_FactionChgNameResult)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static CL_FactionChgNameResult* default_instance_;
};
// -------------------------------------------------------------------

class CL_FactionDismissNotify : public ::google::protobuf::Message {
 public:
  CL_FactionDismissNotify();
  virtual ~CL_FactionDismissNotify();

  CL_FactionDismissNotify(const CL_FactionDismissNotify& from);

  inline CL_FactionDismissNotify& operator=(const CL_FactionDismissNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CL_FactionDismissNotify& default_instance();

  void Swap(CL_FactionDismissNotify* other);

  // implements Message ----------------------------------------------

  CL_FactionDismissNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CL_FactionDismissNotify& from);
  void MergeFrom(const CL_FactionDismissNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CL_FactionDismissNotify)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static CL_FactionDismissNotify* default_instance_;
};
// -------------------------------------------------------------------

class LC_FactionAddAttrReq : public ::google::protobuf::Message {
 public:
  LC_FactionAddAttrReq();
  virtual ~LC_FactionAddAttrReq();

  LC_FactionAddAttrReq(const LC_FactionAddAttrReq& from);

  inline LC_FactionAddAttrReq& operator=(const LC_FactionAddAttrReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LC_FactionAddAttrReq& default_instance();

  void Swap(LC_FactionAddAttrReq* other);

  // implements Message ----------------------------------------------

  LC_FactionAddAttrReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LC_FactionAddAttrReq& from);
  void MergeFrom(const LC_FactionAddAttrReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // optional uint32 exp = 2;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 2;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional int32 tribute = 3;
  inline bool has_tribute() const;
  inline void clear_tribute();
  static const int kTributeFieldNumber = 3;
  inline ::google::protobuf::int32 tribute() const;
  inline void set_tribute(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LC_FactionAddAttrReq)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_tribute();
  inline void clear_has_tribute();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::int32 tribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LC_FactionAddAttrReq* default_instance_;
};
// -------------------------------------------------------------------

class LS_FactionAnswerCount : public ::google::protobuf::Message {
 public:
  LS_FactionAnswerCount();
  virtual ~LS_FactionAnswerCount();

  LS_FactionAnswerCount(const LS_FactionAnswerCount& from);

  inline LS_FactionAnswerCount& operator=(const LS_FactionAnswerCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LS_FactionAnswerCount& default_instance();

  void Swap(LS_FactionAnswerCount* other);

  // implements Message ----------------------------------------------

  LS_FactionAnswerCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LS_FactionAnswerCount& from);
  void MergeFrom(const LS_FactionAnswerCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // required bytes faction_name = 2;
  inline bool has_faction_name() const;
  inline void clear_faction_name();
  static const int kFactionNameFieldNumber = 2;
  inline const ::std::string& faction_name() const;
  inline void set_faction_name(const ::std::string& value);
  inline void set_faction_name(const char* value);
  inline void set_faction_name(const void* value, size_t size);
  inline ::std::string* mutable_faction_name();
  inline ::std::string* release_faction_name();
  inline void set_allocated_faction_name(::std::string* faction_name);

  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LS_FactionAnswerCount)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_faction_name();
  inline void clear_has_faction_name();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* faction_name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LS_FactionAnswerCount* default_instance_;
};
// -------------------------------------------------------------------

class SL_FactionAnswerRank : public ::google::protobuf::Message {
 public:
  SL_FactionAnswerRank();
  virtual ~SL_FactionAnswerRank();

  SL_FactionAnswerRank(const SL_FactionAnswerRank& from);

  inline SL_FactionAnswerRank& operator=(const SL_FactionAnswerRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SL_FactionAnswerRank& default_instance();

  void Swap(SL_FactionAnswerRank* other);

  // implements Message ----------------------------------------------

  SL_FactionAnswerRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SL_FactionAnswerRank& from);
  void MergeFrom(const SL_FactionAnswerRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionAnswerRankListProto rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::FactionAnswerRankListProto& rank() const;
  inline ::proto_ff::FactionAnswerRankListProto* mutable_rank();
  inline ::proto_ff::FactionAnswerRankListProto* release_rank();
  inline void set_allocated_rank(::proto_ff::FactionAnswerRankListProto* rank);

  // @@protoc_insertion_point(class_scope:proto_ff.SL_FactionAnswerRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionAnswerRankListProto* rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static SL_FactionAnswerRank* default_instance_;
};
// -------------------------------------------------------------------

class SL_FactionAnswerCurRankReq : public ::google::protobuf::Message {
 public:
  SL_FactionAnswerCurRankReq();
  virtual ~SL_FactionAnswerCurRankReq();

  SL_FactionAnswerCurRankReq(const SL_FactionAnswerCurRankReq& from);

  inline SL_FactionAnswerCurRankReq& operator=(const SL_FactionAnswerCurRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SL_FactionAnswerCurRankReq& default_instance();

  void Swap(SL_FactionAnswerCurRankReq* other);

  // implements Message ----------------------------------------------

  SL_FactionAnswerCurRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SL_FactionAnswerCurRankReq& from);
  void MergeFrom(const SL_FactionAnswerCurRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SL_FactionAnswerCurRankReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static SL_FactionAnswerCurRankReq* default_instance_;
};
// -------------------------------------------------------------------

class SC_FactionAnswerRankRsp : public ::google::protobuf::Message {
 public:
  SC_FactionAnswerRankRsp();
  virtual ~SC_FactionAnswerRankRsp();

  SC_FactionAnswerRankRsp(const SC_FactionAnswerRankRsp& from);

  inline SC_FactionAnswerRankRsp& operator=(const SC_FactionAnswerRankRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FactionAnswerRankRsp& default_instance();

  void Swap(SC_FactionAnswerRankRsp* other);

  // implements Message ----------------------------------------------

  SC_FactionAnswerRankRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FactionAnswerRankRsp& from);
  void MergeFrom(const SC_FactionAnswerRankRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 factionid = 1;
  inline int factionid_size() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint32 factionid(int index) const;
  inline void set_factionid(int index, ::google::protobuf::uint32 value);
  inline void add_factionid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      factionid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_factionid();

  // repeated uint32 rank = 2;
  inline int rank_size() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank(int index) const;
  inline void set_rank(int index, ::google::protobuf::uint32 value);
  inline void add_rank(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rank() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rank();

  // @@protoc_insertion_point(class_scope:proto_ff.SC_FactionAnswerRankRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > factionid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static SC_FactionAnswerRankRsp* default_instance_;
};
// -------------------------------------------------------------------

class LS_FactionAnswerEndRsp : public ::google::protobuf::Message {
 public:
  LS_FactionAnswerEndRsp();
  virtual ~LS_FactionAnswerEndRsp();

  LS_FactionAnswerEndRsp(const LS_FactionAnswerEndRsp& from);

  inline LS_FactionAnswerEndRsp& operator=(const LS_FactionAnswerEndRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LS_FactionAnswerEndRsp& default_instance();

  void Swap(LS_FactionAnswerEndRsp* other);

  // implements Message ----------------------------------------------

  LS_FactionAnswerEndRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LS_FactionAnswerEndRsp& from);
  void MergeFrom(const LS_FactionAnswerEndRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint32 factionid() const;
  inline void set_factionid(::google::protobuf::uint32 value);

  // required uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // required uint64 endtime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // required uint64 cid = 4;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 4;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint32 count = 5;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 5;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required bytes player_name = 6;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 6;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const void* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  inline void set_allocated_player_name(::std::string* player_name);

  // required int32 sec = 7;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 7;
  inline ::google::protobuf::int32 sec() const;
  inline void set_sec(::google::protobuf::int32 value);

  // required uint32 faction_count = 8;
  inline bool has_faction_count() const;
  inline void clear_faction_count();
  static const int kFactionCountFieldNumber = 8;
  inline ::google::protobuf::uint32 faction_count() const;
  inline void set_faction_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LS_FactionAnswerEndRsp)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_faction_count();
  inline void clear_has_faction_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 factionid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint64 endtime_;
  ::google::protobuf::uint64 cid_;
  ::std::string* player_name_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::int32 sec_;
  ::google::protobuf::uint32 faction_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LS_FactionAnswerEndRsp* default_instance_;
};
// -------------------------------------------------------------------

class LC_FactionBeastFinishRsp : public ::google::protobuf::Message {
 public:
  LC_FactionBeastFinishRsp();
  virtual ~LC_FactionBeastFinishRsp();

  LC_FactionBeastFinishRsp(const LC_FactionBeastFinishRsp& from);

  inline LC_FactionBeastFinishRsp& operator=(const LC_FactionBeastFinishRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LC_FactionBeastFinishRsp& default_instance();

  void Swap(LC_FactionBeastFinishRsp* other);

  // implements Message ----------------------------------------------

  LC_FactionBeastFinishRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LC_FactionBeastFinishRsp& from);
  void MergeFrom(const LC_FactionBeastFinishRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint32 factionid() const;
  inline void set_factionid(::google::protobuf::uint32 value);

  // repeated uint64 cid_lst = 2;
  inline int cid_lst_size() const;
  inline void clear_cid_lst();
  static const int kCidLstFieldNumber = 2;
  inline ::google::protobuf::uint64 cid_lst(int index) const;
  inline void set_cid_lst(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst();

  // repeated int64 harm_lst = 3;
  inline int harm_lst_size() const;
  inline void clear_harm_lst();
  static const int kHarmLstFieldNumber = 3;
  inline ::google::protobuf::int64 harm_lst(int index) const;
  inline void set_harm_lst(int index, ::google::protobuf::int64 value);
  inline void add_harm_lst(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      harm_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_harm_lst();

  // optional int32 star = 4;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 4;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // repeated .proto_ff.ComItemBind reward = 5;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 5;
  inline const ::proto_ff::ComItemBind& reward(int index) const;
  inline ::proto_ff::ComItemBind* mutable_reward(int index);
  inline ::proto_ff::ComItemBind* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.LC_FactionBeastFinishRsp)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_star();
  inline void clear_has_star();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst_;
  ::google::protobuf::uint32 factionid_;
  ::google::protobuf::int32 star_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > harm_lst_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind > reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LC_FactionBeastFinishRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionGuardData : public ::google::protobuf::Message {
 public:
  FactionGuardData();
  virtual ~FactionGuardData();

  FactionGuardData(const FactionGuardData& from);

  inline FactionGuardData& operator=(const FactionGuardData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionGuardData& default_instance();

  void Swap(FactionGuardData* other);

  // implements Message ----------------------------------------------

  FactionGuardData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionGuardData& from);
  void MergeFrom(const FactionGuardData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 acc_person_exp = 1;
  inline bool has_acc_person_exp() const;
  inline void clear_acc_person_exp();
  static const int kAccPersonExpFieldNumber = 1;
  inline ::google::protobuf::uint64 acc_person_exp() const;
  inline void set_acc_person_exp(::google::protobuf::uint64 value);

  // optional uint64 acc_faction_contri = 2;
  inline bool has_acc_faction_contri() const;
  inline void clear_acc_faction_contri();
  static const int kAccFactionContriFieldNumber = 2;
  inline ::google::protobuf::uint64 acc_faction_contri() const;
  inline void set_acc_faction_contri(::google::protobuf::uint64 value);

  // optional uint32 cur_encouragement_gold_count = 3;
  inline bool has_cur_encouragement_gold_count() const;
  inline void clear_cur_encouragement_gold_count();
  static const int kCurEncouragementGoldCountFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_encouragement_gold_count() const;
  inline void set_cur_encouragement_gold_count(::google::protobuf::uint32 value);

  // optional uint32 cur_encouragement_diamond_count = 4;
  inline bool has_cur_encouragement_diamond_count() const;
  inline void clear_cur_encouragement_diamond_count();
  static const int kCurEncouragementDiamondCountFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_encouragement_diamond_count() const;
  inline void set_cur_encouragement_diamond_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionGuardData)
 private:
  inline void set_has_acc_person_exp();
  inline void clear_has_acc_person_exp();
  inline void set_has_acc_faction_contri();
  inline void clear_has_acc_faction_contri();
  inline void set_has_cur_encouragement_gold_count();
  inline void clear_has_cur_encouragement_gold_count();
  inline void set_has_cur_encouragement_diamond_count();
  inline void clear_has_cur_encouragement_diamond_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 acc_person_exp_;
  ::google::protobuf::uint64 acc_faction_contri_;
  ::google::protobuf::uint32 cur_encouragement_gold_count_;
  ::google::protobuf::uint32 cur_encouragement_diamond_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionGuardData* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardSceneInfoReq : public ::google::protobuf::Message {
 public:
  Faction_GuardSceneInfoReq();
  virtual ~Faction_GuardSceneInfoReq();

  Faction_GuardSceneInfoReq(const Faction_GuardSceneInfoReq& from);

  inline Faction_GuardSceneInfoReq& operator=(const Faction_GuardSceneInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardSceneInfoReq& default_instance();

  void Swap(Faction_GuardSceneInfoReq* other);

  // implements Message ----------------------------------------------

  Faction_GuardSceneInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardSceneInfoReq& from);
  void MergeFrom(const Faction_GuardSceneInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardSceneInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardSceneInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardSceneInfoRsp : public ::google::protobuf::Message {
 public:
  Faction_GuardSceneInfoRsp();
  virtual ~Faction_GuardSceneInfoRsp();

  Faction_GuardSceneInfoRsp(const Faction_GuardSceneInfoRsp& from);

  inline Faction_GuardSceneInfoRsp& operator=(const Faction_GuardSceneInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardSceneInfoRsp& default_instance();

  void Swap(Faction_GuardSceneInfoRsp* other);

  // implements Message ----------------------------------------------

  Faction_GuardSceneInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardSceneInfoRsp& from);
  void MergeFrom(const Faction_GuardSceneInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionGuardData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::proto_ff::FactionGuardData& data() const;
  inline ::proto_ff::FactionGuardData* mutable_data();
  inline ::proto_ff::FactionGuardData* release_data();
  inline void set_allocated_data(::proto_ff::FactionGuardData* data);

  // optional uint32 cur_guard_encouragement_gold_count = 2;
  inline bool has_cur_guard_encouragement_gold_count() const;
  inline void clear_cur_guard_encouragement_gold_count();
  static const int kCurGuardEncouragementGoldCountFieldNumber = 2;
  inline ::google::protobuf::uint32 cur_guard_encouragement_gold_count() const;
  inline void set_cur_guard_encouragement_gold_count(::google::protobuf::uint32 value);

  // optional uint32 cur_guard_encouragement_diamond_count = 3;
  inline bool has_cur_guard_encouragement_diamond_count() const;
  inline void clear_cur_guard_encouragement_diamond_count();
  static const int kCurGuardEncouragementDiamondCountFieldNumber = 3;
  inline ::google::protobuf::uint32 cur_guard_encouragement_diamond_count() const;
  inline void set_cur_guard_encouragement_diamond_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardSceneInfoRsp)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_cur_guard_encouragement_gold_count();
  inline void clear_has_cur_guard_encouragement_gold_count();
  inline void set_has_cur_guard_encouragement_diamond_count();
  inline void clear_has_cur_guard_encouragement_diamond_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionGuardData* data_;
  ::google::protobuf::uint32 cur_guard_encouragement_gold_count_;
  ::google::protobuf::uint32 cur_guard_encouragement_diamond_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardSceneInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionGuardRankProto : public ::google::protobuf::Message {
 public:
  FactionGuardRankProto();
  virtual ~FactionGuardRankProto();

  FactionGuardRankProto(const FactionGuardRankProto& from);

  inline FactionGuardRankProto& operator=(const FactionGuardRankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionGuardRankProto& default_instance();

  void Swap(FactionGuardRankProto* other);

  // implements Message ----------------------------------------------

  FactionGuardRankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionGuardRankProto& from);
  void MergeFrom(const FactionGuardRankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int64 harm = 4;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 4;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionGuardRankProto)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_harm();
  inline void clear_has_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int64 harm_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionGuardRankProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionGuardRankListProto : public ::google::protobuf::Message {
 public:
  FactionGuardRankListProto();
  virtual ~FactionGuardRankListProto();

  FactionGuardRankListProto(const FactionGuardRankListProto& from);

  inline FactionGuardRankListProto& operator=(const FactionGuardRankListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionGuardRankListProto& default_instance();

  void Swap(FactionGuardRankListProto* other);

  // implements Message ----------------------------------------------

  FactionGuardRankListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionGuardRankListProto& from);
  void MergeFrom(const FactionGuardRankListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionGuardRankProto lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::proto_ff::FactionGuardRankProto& lst(int index) const;
  inline ::proto_ff::FactionGuardRankProto* mutable_lst(int index);
  inline ::proto_ff::FactionGuardRankProto* add_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardRankProto >&
      lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardRankProto >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionGuardRankListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardRankProto > lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionGuardRankListProto* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardPersonRankInfoReq : public ::google::protobuf::Message {
 public:
  Faction_GuardPersonRankInfoReq();
  virtual ~Faction_GuardPersonRankInfoReq();

  Faction_GuardPersonRankInfoReq(const Faction_GuardPersonRankInfoReq& from);

  inline Faction_GuardPersonRankInfoReq& operator=(const Faction_GuardPersonRankInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardPersonRankInfoReq& default_instance();

  void Swap(Faction_GuardPersonRankInfoReq* other);

  // implements Message ----------------------------------------------

  Faction_GuardPersonRankInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardPersonRankInfoReq& from);
  void MergeFrom(const Faction_GuardPersonRankInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardPersonRankInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardPersonRankInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardPersonRankInfoRsp : public ::google::protobuf::Message {
 public:
  Faction_GuardPersonRankInfoRsp();
  virtual ~Faction_GuardPersonRankInfoRsp();

  Faction_GuardPersonRankInfoRsp(const Faction_GuardPersonRankInfoRsp& from);

  inline Faction_GuardPersonRankInfoRsp& operator=(const Faction_GuardPersonRankInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardPersonRankInfoRsp& default_instance();

  void Swap(Faction_GuardPersonRankInfoRsp* other);

  // implements Message ----------------------------------------------

  Faction_GuardPersonRankInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardPersonRankInfoRsp& from);
  void MergeFrom(const Faction_GuardPersonRankInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionGuardRankListProto rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline const ::proto_ff::FactionGuardRankListProto& rank() const;
  inline ::proto_ff::FactionGuardRankListProto* mutable_rank();
  inline ::proto_ff::FactionGuardRankListProto* release_rank();
  inline void set_allocated_rank(::proto_ff::FactionGuardRankListProto* rank);

  // optional uint32 myrank = 3;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyrankFieldNumber = 3;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // optional int64 myharm = 4;
  inline bool has_myharm() const;
  inline void clear_myharm();
  static const int kMyharmFieldNumber = 4;
  inline ::google::protobuf::int64 myharm() const;
  inline void set_myharm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardPersonRankInfoRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_myharm();
  inline void clear_has_myharm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionGuardRankListProto* rank_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 myrank_;
  ::google::protobuf::int64 myharm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardPersonRankInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionGuardSocialRankProto : public ::google::protobuf::Message {
 public:
  FactionGuardSocialRankProto();
  virtual ~FactionGuardSocialRankProto();

  FactionGuardSocialRankProto(const FactionGuardSocialRankProto& from);

  inline FactionGuardSocialRankProto& operator=(const FactionGuardSocialRankProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionGuardSocialRankProto& default_instance();

  void Swap(FactionGuardSocialRankProto* other);

  // implements Message ----------------------------------------------

  FactionGuardSocialRankProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionGuardSocialRankProto& from);
  void MergeFrom(const FactionGuardSocialRankProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint32 factionid() const;
  inline void set_factionid(::google::protobuf::uint32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint64 count() const;
  inline void set_count(::google::protobuf::uint64 value);

  // optional uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint64 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // optional uint32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional int64 harm = 7;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 7;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionGuardSocialRankProto)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_harm();
  inline void clear_has_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 factionid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint64 count_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::int64 harm_;
  ::google::protobuf::uint32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionGuardSocialRankProto* default_instance_;
};
// -------------------------------------------------------------------

class FactionGuardSocialRankListProto : public ::google::protobuf::Message {
 public:
  FactionGuardSocialRankListProto();
  virtual ~FactionGuardSocialRankListProto();

  FactionGuardSocialRankListProto(const FactionGuardSocialRankListProto& from);

  inline FactionGuardSocialRankListProto& operator=(const FactionGuardSocialRankListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionGuardSocialRankListProto& default_instance();

  void Swap(FactionGuardSocialRankListProto* other);

  // implements Message ----------------------------------------------

  FactionGuardSocialRankListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionGuardSocialRankListProto& from);
  void MergeFrom(const FactionGuardSocialRankListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionGuardSocialRankProto lst = 1;
  inline int lst_size() const;
  inline void clear_lst();
  static const int kLstFieldNumber = 1;
  inline const ::proto_ff::FactionGuardSocialRankProto& lst(int index) const;
  inline ::proto_ff::FactionGuardSocialRankProto* mutable_lst(int index);
  inline ::proto_ff::FactionGuardSocialRankProto* add_lst();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardSocialRankProto >&
      lst() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardSocialRankProto >*
      mutable_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionGuardSocialRankListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardSocialRankProto > lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionGuardSocialRankListProto* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardSocialRankListReq : public ::google::protobuf::Message {
 public:
  Faction_GuardSocialRankListReq();
  virtual ~Faction_GuardSocialRankListReq();

  Faction_GuardSocialRankListReq(const Faction_GuardSocialRankListReq& from);

  inline Faction_GuardSocialRankListReq& operator=(const Faction_GuardSocialRankListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardSocialRankListReq& default_instance();

  void Swap(Faction_GuardSocialRankListReq* other);

  // implements Message ----------------------------------------------

  Faction_GuardSocialRankListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardSocialRankListReq& from);
  void MergeFrom(const Faction_GuardSocialRankListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardSocialRankListReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardSocialRankListReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardSocialRankListRsp : public ::google::protobuf::Message {
 public:
  Faction_GuardSocialRankListRsp();
  virtual ~Faction_GuardSocialRankListRsp();

  Faction_GuardSocialRankListRsp(const Faction_GuardSocialRankListRsp& from);

  inline Faction_GuardSocialRankListRsp& operator=(const Faction_GuardSocialRankListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardSocialRankListRsp& default_instance();

  void Swap(Faction_GuardSocialRankListRsp* other);

  // implements Message ----------------------------------------------

  Faction_GuardSocialRankListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardSocialRankListRsp& from);
  void MergeFrom(const Faction_GuardSocialRankListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.FactionGuardSocialRankListProto rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline const ::proto_ff::FactionGuardSocialRankListProto& rank() const;
  inline ::proto_ff::FactionGuardSocialRankListProto* mutable_rank();
  inline ::proto_ff::FactionGuardSocialRankListProto* release_rank();
  inline void set_allocated_rank(::proto_ff::FactionGuardSocialRankListProto* rank);

  // optional uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardSocialRankListRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionGuardSocialRankListProto* rank_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardSocialRankListRsp* default_instance_;
};
// -------------------------------------------------------------------

class GuardMonInfo : public ::google::protobuf::Message {
 public:
  GuardMonInfo();
  virtual ~GuardMonInfo();

  GuardMonInfo(const GuardMonInfo& from);

  inline GuardMonInfo& operator=(const GuardMonInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuardMonInfo& default_instance();

  void Swap(GuardMonInfo* other);

  // implements Message ----------------------------------------------

  GuardMonInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuardMonInfo& from);
  void MergeFrom(const GuardMonInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 mon_id = 1;
  inline bool has_mon_id() const;
  inline void clear_mon_id();
  static const int kMonIdFieldNumber = 1;
  inline ::google::protobuf::int64 mon_id() const;
  inline void set_mon_id(::google::protobuf::int64 value);

  // optional int64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::int64 cid() const;
  inline void set_cid(::google::protobuf::int64 value);

  // optional int64 hp = 3;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 3;
  inline ::google::protobuf::int64 hp() const;
  inline void set_hp(::google::protobuf::int64 value);

  // optional int64 max_hp = 4;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 4;
  inline ::google::protobuf::int64 max_hp() const;
  inline void set_max_hp(::google::protobuf::int64 value);

  // optional .proto_ff.Vector3PB pos = 5;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 5;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // optional int32 is_target = 6;
  inline bool has_is_target() const;
  inline void clear_is_target();
  static const int kIsTargetFieldNumber = 6;
  inline ::google::protobuf::int32 is_target() const;
  inline void set_is_target(::google::protobuf::int32 value);

  // optional int32 is_battle = 7;
  inline bool has_is_battle() const;
  inline void clear_is_battle();
  static const int kIsBattleFieldNumber = 7;
  inline ::google::protobuf::int32 is_battle() const;
  inline void set_is_battle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GuardMonInfo)
 private:
  inline void set_has_mon_id();
  inline void clear_has_mon_id();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_is_target();
  inline void clear_has_is_target();
  inline void set_has_is_battle();
  inline void clear_has_is_battle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mon_id_;
  ::google::protobuf::int64 cid_;
  ::google::protobuf::int64 hp_;
  ::google::protobuf::int64 max_hp_;
  ::proto_ff::Vector3PB* pos_;
  ::google::protobuf::int32 is_target_;
  ::google::protobuf::int32 is_battle_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static GuardMonInfo* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardMonsterInfo : public ::google::protobuf::Message {
 public:
  Faction_GuardMonsterInfo();
  virtual ~Faction_GuardMonsterInfo();

  Faction_GuardMonsterInfo(const Faction_GuardMonsterInfo& from);

  inline Faction_GuardMonsterInfo& operator=(const Faction_GuardMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardMonsterInfo& default_instance();

  void Swap(Faction_GuardMonsterInfo* other);

  // implements Message ----------------------------------------------

  Faction_GuardMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardMonsterInfo& from);
  void MergeFrom(const Faction_GuardMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GuardMonInfo mons = 1;
  inline int mons_size() const;
  inline void clear_mons();
  static const int kMonsFieldNumber = 1;
  inline const ::proto_ff::GuardMonInfo& mons(int index) const;
  inline ::proto_ff::GuardMonInfo* mutable_mons(int index);
  inline ::proto_ff::GuardMonInfo* add_mons();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardMonInfo >&
      mons() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardMonInfo >*
      mutable_mons();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardMonsterInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardMonInfo > mons_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardMonsterInfoNotify : public ::google::protobuf::Message {
 public:
  Faction_GuardMonsterInfoNotify();
  virtual ~Faction_GuardMonsterInfoNotify();

  Faction_GuardMonsterInfoNotify(const Faction_GuardMonsterInfoNotify& from);

  inline Faction_GuardMonsterInfoNotify& operator=(const Faction_GuardMonsterInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardMonsterInfoNotify& default_instance();

  void Swap(Faction_GuardMonsterInfoNotify* other);

  // implements Message ----------------------------------------------

  Faction_GuardMonsterInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardMonsterInfoNotify& from);
  void MergeFrom(const Faction_GuardMonsterInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.Faction_GuardMonsterInfo mons = 1;
  inline bool has_mons() const;
  inline void clear_mons();
  static const int kMonsFieldNumber = 1;
  inline const ::proto_ff::Faction_GuardMonsterInfo& mons() const;
  inline ::proto_ff::Faction_GuardMonsterInfo* mutable_mons();
  inline ::proto_ff::Faction_GuardMonsterInfo* release_mons();
  inline void set_allocated_mons(::proto_ff::Faction_GuardMonsterInfo* mons);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardMonsterInfoNotify)
 private:
  inline void set_has_mons();
  inline void clear_has_mons();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::Faction_GuardMonsterInfo* mons_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardMonsterInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardWaveReward : public ::google::protobuf::Message {
 public:
  Faction_GuardWaveReward();
  virtual ~Faction_GuardWaveReward();

  Faction_GuardWaveReward(const Faction_GuardWaveReward& from);

  inline Faction_GuardWaveReward& operator=(const Faction_GuardWaveReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardWaveReward& default_instance();

  void Swap(Faction_GuardWaveReward* other);

  // implements Message ----------------------------------------------

  Faction_GuardWaveReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardWaveReward& from);
  void MergeFrom(const Faction_GuardWaveReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 wave = 1;
  inline bool has_wave() const;
  inline void clear_wave();
  static const int kWaveFieldNumber = 1;
  inline ::google::protobuf::int32 wave() const;
  inline void set_wave(::google::protobuf::int32 value);

  // repeated .proto_ff.ComItem reward = 2;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 2;
  inline const ::proto_ff::ComItem& reward(int index) const;
  inline ::proto_ff::ComItem* mutable_reward(int index);
  inline ::proto_ff::ComItem* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardWaveReward)
 private:
  inline void set_has_wave();
  inline void clear_has_wave();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem > reward_;
  ::google::protobuf::int32 wave_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardWaveReward* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardFinishRsp : public ::google::protobuf::Message {
 public:
  Faction_GuardFinishRsp();
  virtual ~Faction_GuardFinishRsp();

  Faction_GuardFinishRsp(const Faction_GuardFinishRsp& from);

  inline Faction_GuardFinishRsp& operator=(const Faction_GuardFinishRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardFinishRsp& default_instance();

  void Swap(Faction_GuardFinishRsp* other);

  // implements Message ----------------------------------------------

  Faction_GuardFinishRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardFinishRsp& from);
  void MergeFrom(const Faction_GuardFinishRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional int32 sec = 2;
  inline bool has_sec() const;
  inline void clear_sec();
  static const int kSecFieldNumber = 2;
  inline ::google::protobuf::int32 sec() const;
  inline void set_sec(::google::protobuf::int32 value);

  // optional int64 harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline ::google::protobuf::int64 harm() const;
  inline void set_harm(::google::protobuf::int64 value);

  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // optional uint64 fation_rank = 5;
  inline bool has_fation_rank() const;
  inline void clear_fation_rank();
  static const int kFationRankFieldNumber = 5;
  inline ::google::protobuf::uint64 fation_rank() const;
  inline void set_fation_rank(::google::protobuf::uint64 value);

  // optional uint32 fation_count = 6;
  inline bool has_fation_count() const;
  inline void clear_fation_count();
  static const int kFationCountFieldNumber = 6;
  inline ::google::protobuf::uint32 fation_count() const;
  inline void set_fation_count(::google::protobuf::uint32 value);

  // repeated .proto_ff.ComItem reward = 8;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 8;
  inline const ::proto_ff::ComItem& reward(int index) const;
  inline ::proto_ff::ComItem* mutable_reward(int index);
  inline ::proto_ff::ComItem* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
      mutable_reward();

  // repeated .proto_ff.ComItem faction_reward = 9;
  inline int faction_reward_size() const;
  inline void clear_faction_reward();
  static const int kFactionRewardFieldNumber = 9;
  inline const ::proto_ff::ComItem& faction_reward(int index) const;
  inline ::proto_ff::ComItem* mutable_faction_reward(int index);
  inline ::proto_ff::ComItem* add_faction_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
      faction_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
      mutable_faction_reward();

  // repeated .proto_ff.Faction_GuardWaveReward wave_reward = 10;
  inline int wave_reward_size() const;
  inline void clear_wave_reward();
  static const int kWaveRewardFieldNumber = 10;
  inline const ::proto_ff::Faction_GuardWaveReward& wave_reward(int index) const;
  inline ::proto_ff::Faction_GuardWaveReward* mutable_wave_reward(int index);
  inline ::proto_ff::Faction_GuardWaveReward* add_wave_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Faction_GuardWaveReward >&
      wave_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Faction_GuardWaveReward >*
      mutable_wave_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardFinishRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_sec();
  inline void clear_has_sec();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_fation_rank();
  inline void clear_has_fation_rank();
  inline void set_has_fation_count();
  inline void clear_has_fation_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 sec_;
  ::google::protobuf::int64 harm_;
  ::google::protobuf::uint64 fation_rank_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint32 fation_count_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem > reward_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem > faction_reward_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::Faction_GuardWaveReward > wave_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardFinishRsp* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardEncouragementReq : public ::google::protobuf::Message {
 public:
  Faction_GuardEncouragementReq();
  virtual ~Faction_GuardEncouragementReq();

  Faction_GuardEncouragementReq(const Faction_GuardEncouragementReq& from);

  inline Faction_GuardEncouragementReq& operator=(const Faction_GuardEncouragementReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardEncouragementReq& default_instance();

  void Swap(Faction_GuardEncouragementReq* other);

  // implements Message ----------------------------------------------

  Faction_GuardEncouragementReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardEncouragementReq& from);
  void MergeFrom(const Faction_GuardEncouragementReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardEncouragementReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardEncouragementReq* default_instance_;
};
// -------------------------------------------------------------------

class Faction_GuardEncouragementRsp : public ::google::protobuf::Message {
 public:
  Faction_GuardEncouragementRsp();
  virtual ~Faction_GuardEncouragementRsp();

  Faction_GuardEncouragementRsp(const Faction_GuardEncouragementRsp& from);

  inline Faction_GuardEncouragementRsp& operator=(const Faction_GuardEncouragementRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Faction_GuardEncouragementRsp& default_instance();

  void Swap(Faction_GuardEncouragementRsp* other);

  // implements Message ----------------------------------------------

  Faction_GuardEncouragementRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Faction_GuardEncouragementRsp& from);
  void MergeFrom(const Faction_GuardEncouragementRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Faction_GuardEncouragementRsp)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_code_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static Faction_GuardEncouragementRsp* default_instance_;
};
// -------------------------------------------------------------------

class LS_FactionGuardCount : public ::google::protobuf::Message {
 public:
  LS_FactionGuardCount();
  virtual ~LS_FactionGuardCount();

  LS_FactionGuardCount(const LS_FactionGuardCount& from);

  inline LS_FactionGuardCount& operator=(const LS_FactionGuardCount& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LS_FactionGuardCount& default_instance();

  void Swap(LS_FactionGuardCount* other);

  // implements Message ----------------------------------------------

  LS_FactionGuardCount* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LS_FactionGuardCount& from);
  void MergeFrom(const LS_FactionGuardCount& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 faction_id = 1;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // required bytes faction_name = 2;
  inline bool has_faction_name() const;
  inline void clear_faction_name();
  static const int kFactionNameFieldNumber = 2;
  inline const ::std::string& faction_name() const;
  inline void set_faction_name(const ::std::string& value);
  inline void set_faction_name(const char* value);
  inline void set_faction_name(const void* value, size_t size);
  inline ::std::string* mutable_faction_name();
  inline ::std::string* release_faction_name();
  inline void set_allocated_faction_name(::std::string* faction_name);

  // required uint32 count = 3;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 3;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);

  // required uint32 zid = 4;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 4;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // required uint64 harm = 5;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 5;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // required uint64 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LS_FactionGuardCount)
 private:
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_faction_name();
  inline void clear_has_faction_name();
  inline void set_has_count();
  inline void clear_has_count();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* faction_name_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint32 count_;
  ::google::protobuf::uint64 harm_;
  ::google::protobuf::uint64 time_;
  ::google::protobuf::uint32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LS_FactionGuardCount* default_instance_;
};
// -------------------------------------------------------------------

class SL_FactionGuardRank : public ::google::protobuf::Message {
 public:
  SL_FactionGuardRank();
  virtual ~SL_FactionGuardRank();

  SL_FactionGuardRank(const SL_FactionGuardRank& from);

  inline SL_FactionGuardRank& operator=(const SL_FactionGuardRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SL_FactionGuardRank& default_instance();

  void Swap(SL_FactionGuardRank* other);

  // implements Message ----------------------------------------------

  SL_FactionGuardRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SL_FactionGuardRank& from);
  void MergeFrom(const SL_FactionGuardRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionGuardSocialRankListProto rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::FactionGuardSocialRankListProto& rank() const;
  inline ::proto_ff::FactionGuardSocialRankListProto* mutable_rank();
  inline ::proto_ff::FactionGuardSocialRankListProto* release_rank();
  inline void set_allocated_rank(::proto_ff::FactionGuardSocialRankListProto* rank);

  // @@protoc_insertion_point(class_scope:proto_ff.SL_FactionGuardRank)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionGuardSocialRankListProto* rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static SL_FactionGuardRank* default_instance_;
};
// -------------------------------------------------------------------

class SL_FactionGuardCurRankReq : public ::google::protobuf::Message {
 public:
  SL_FactionGuardCurRankReq();
  virtual ~SL_FactionGuardCurRankReq();

  SL_FactionGuardCurRankReq(const SL_FactionGuardCurRankReq& from);

  inline SL_FactionGuardCurRankReq& operator=(const SL_FactionGuardCurRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SL_FactionGuardCurRankReq& default_instance();

  void Swap(SL_FactionGuardCurRankReq* other);

  // implements Message ----------------------------------------------

  SL_FactionGuardCurRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SL_FactionGuardCurRankReq& from);
  void MergeFrom(const SL_FactionGuardCurRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.SL_FactionGuardCurRankReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static SL_FactionGuardCurRankReq* default_instance_;
};
// -------------------------------------------------------------------

class SC_FactionGuardRankResultNotify : public ::google::protobuf::Message {
 public:
  SC_FactionGuardRankResultNotify();
  virtual ~SC_FactionGuardRankResultNotify();

  SC_FactionGuardRankResultNotify(const SC_FactionGuardRankResultNotify& from);

  inline SC_FactionGuardRankResultNotify& operator=(const SC_FactionGuardRankResultNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FactionGuardRankResultNotify& default_instance();

  void Swap(SC_FactionGuardRankResultNotify* other);

  // implements Message ----------------------------------------------

  SC_FactionGuardRankResultNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FactionGuardRankResultNotify& from);
  void MergeFrom(const SC_FactionGuardRankResultNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.FactionGuardSocialRankProto rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline const ::proto_ff::FactionGuardSocialRankProto& rank() const;
  inline ::proto_ff::FactionGuardSocialRankProto* mutable_rank();
  inline ::proto_ff::FactionGuardSocialRankProto* release_rank();
  inline void set_allocated_rank(::proto_ff::FactionGuardSocialRankProto* rank);

  // @@protoc_insertion_point(class_scope:proto_ff.SC_FactionGuardRankResultNotify)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::FactionGuardSocialRankProto* rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static SC_FactionGuardRankResultNotify* default_instance_;
};
// -------------------------------------------------------------------

class LS_FactionGuardEndRsp : public ::google::protobuf::Message {
 public:
  LS_FactionGuardEndRsp();
  virtual ~LS_FactionGuardEndRsp();

  LS_FactionGuardEndRsp(const LS_FactionGuardEndRsp& from);

  inline LS_FactionGuardEndRsp& operator=(const LS_FactionGuardEndRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LS_FactionGuardEndRsp& default_instance();

  void Swap(LS_FactionGuardEndRsp* other);

  // implements Message ----------------------------------------------

  LS_FactionGuardEndRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LS_FactionGuardEndRsp& from);
  void MergeFrom(const LS_FactionGuardEndRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint32 factionid() const;
  inline void set_factionid(::google::protobuf::uint32 value);

  // required uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // required uint64 endtime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 3;
  inline ::google::protobuf::uint64 endtime() const;
  inline void set_endtime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LS_FactionGuardEndRsp)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 factionid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint64 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LS_FactionGuardEndRsp* default_instance_;
};
// -------------------------------------------------------------------

class LC_FactionGuardEndRsp : public ::google::protobuf::Message {
 public:
  LC_FactionGuardEndRsp();
  virtual ~LC_FactionGuardEndRsp();

  LC_FactionGuardEndRsp(const LC_FactionGuardEndRsp& from);

  inline LC_FactionGuardEndRsp& operator=(const LC_FactionGuardEndRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LC_FactionGuardEndRsp& default_instance();

  void Swap(LC_FactionGuardEndRsp* other);

  // implements Message ----------------------------------------------

  LC_FactionGuardEndRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LC_FactionGuardEndRsp& from);
  void MergeFrom(const LC_FactionGuardEndRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint32 factionid() const;
  inline void set_factionid(::google::protobuf::uint32 value);

  // repeated uint64 cid_lst = 2;
  inline int cid_lst_size() const;
  inline void clear_cid_lst();
  static const int kCidLstFieldNumber = 2;
  inline ::google::protobuf::uint64 cid_lst(int index) const;
  inline void set_cid_lst(int index, ::google::protobuf::uint64 value);
  inline void add_cid_lst(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      cid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_cid_lst();

  // repeated .proto_ff.ComItemBind reward = 3;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 3;
  inline const ::proto_ff::ComItemBind& reward(int index) const;
  inline ::proto_ff::ComItemBind* mutable_reward(int index);
  inline ::proto_ff::ComItemBind* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.LC_FactionGuardEndRsp)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > cid_lst_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind > reward_;
  ::google::protobuf::uint32 factionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LC_FactionGuardEndRsp* default_instance_;
};
// -------------------------------------------------------------------

class GuardPlayerHarm : public ::google::protobuf::Message {
 public:
  GuardPlayerHarm();
  virtual ~GuardPlayerHarm();

  GuardPlayerHarm(const GuardPlayerHarm& from);

  inline GuardPlayerHarm& operator=(const GuardPlayerHarm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GuardPlayerHarm& default_instance();

  void Swap(GuardPlayerHarm* other);

  // implements Message ----------------------------------------------

  GuardPlayerHarm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GuardPlayerHarm& from);
  void MergeFrom(const GuardPlayerHarm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required uint64 harm = 2;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 2;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GuardPlayerHarm)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_harm();
  inline void clear_has_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint64 harm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static GuardPlayerHarm* default_instance_;
};
// -------------------------------------------------------------------

class LC_FactionGuardPlayerHarm : public ::google::protobuf::Message {
 public:
  LC_FactionGuardPlayerHarm();
  virtual ~LC_FactionGuardPlayerHarm();

  LC_FactionGuardPlayerHarm(const LC_FactionGuardPlayerHarm& from);

  inline LC_FactionGuardPlayerHarm& operator=(const LC_FactionGuardPlayerHarm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LC_FactionGuardPlayerHarm& default_instance();

  void Swap(LC_FactionGuardPlayerHarm* other);

  // implements Message ----------------------------------------------

  LC_FactionGuardPlayerHarm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LC_FactionGuardPlayerHarm& from);
  void MergeFrom(const LC_FactionGuardPlayerHarm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.GuardPlayerHarm players = 1;
  inline int players_size() const;
  inline void clear_players();
  static const int kPlayersFieldNumber = 1;
  inline const ::proto_ff::GuardPlayerHarm& players(int index) const;
  inline ::proto_ff::GuardPlayerHarm* mutable_players(int index);
  inline ::proto_ff::GuardPlayerHarm* add_players();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardPlayerHarm >&
      players() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardPlayerHarm >*
      mutable_players();

  // required uint32 logicid = 2;
  inline bool has_logicid() const;
  inline void clear_logicid();
  static const int kLogicidFieldNumber = 2;
  inline ::google::protobuf::uint32 logicid() const;
  inline void set_logicid(::google::protobuf::uint32 value);

  // required uint32 faction_id = 3;
  inline bool has_faction_id() const;
  inline void clear_faction_id();
  static const int kFactionIdFieldNumber = 3;
  inline ::google::protobuf::uint32 faction_id() const;
  inline void set_faction_id(::google::protobuf::uint32 value);

  // required uint64 scene_id = 4;
  inline bool has_scene_id() const;
  inline void clear_scene_id();
  static const int kSceneIdFieldNumber = 4;
  inline ::google::protobuf::uint64 scene_id() const;
  inline void set_scene_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LC_FactionGuardPlayerHarm)
 private:
  inline void set_has_logicid();
  inline void clear_has_logicid();
  inline void set_has_faction_id();
  inline void clear_has_faction_id();
  inline void set_has_scene_id();
  inline void clear_has_scene_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardPlayerHarm > players_;
  ::google::protobuf::uint32 logicid_;
  ::google::protobuf::uint32 faction_id_;
  ::google::protobuf::uint64 scene_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LC_FactionGuardPlayerHarm* default_instance_;
};
// -------------------------------------------------------------------

class SC_FactionAnswerFinalRsp : public ::google::protobuf::Message {
 public:
  SC_FactionAnswerFinalRsp();
  virtual ~SC_FactionAnswerFinalRsp();

  SC_FactionAnswerFinalRsp(const SC_FactionAnswerFinalRsp& from);

  inline SC_FactionAnswerFinalRsp& operator=(const SC_FactionAnswerFinalRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SC_FactionAnswerFinalRsp& default_instance();

  void Swap(SC_FactionAnswerFinalRsp* other);

  // implements Message ----------------------------------------------

  SC_FactionAnswerFinalRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SC_FactionAnswerFinalRsp& from);
  void MergeFrom(const SC_FactionAnswerFinalRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionAnswerFinalProto final = 1;
  inline int final_size() const;
  inline void clear_final();
  static const int kFinalFieldNumber = 1;
  inline const ::proto_ff::FactionAnswerFinalProto& final(int index) const;
  inline ::proto_ff::FactionAnswerFinalProto* mutable_final(int index);
  inline ::proto_ff::FactionAnswerFinalProto* add_final();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto >&
      final() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto >*
      mutable_final();

  // @@protoc_insertion_point(class_scope:proto_ff.SC_FactionAnswerFinalRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto > final_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static SC_FactionAnswerFinalRsp* default_instance_;
};
// -------------------------------------------------------------------

class CL_FactionAnswerQuestionRsp : public ::google::protobuf::Message {
 public:
  CL_FactionAnswerQuestionRsp();
  virtual ~CL_FactionAnswerQuestionRsp();

  CL_FactionAnswerQuestionRsp(const CL_FactionAnswerQuestionRsp& from);

  inline CL_FactionAnswerQuestionRsp& operator=(const CL_FactionAnswerQuestionRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CL_FactionAnswerQuestionRsp& default_instance();

  void Swap(CL_FactionAnswerQuestionRsp* other);

  // implements Message ----------------------------------------------

  CL_FactionAnswerQuestionRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CL_FactionAnswerQuestionRsp& from);
  void MergeFrom(const CL_FactionAnswerQuestionRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required int32 first = 2;
  inline bool has_first() const;
  inline void clear_first();
  static const int kFirstFieldNumber = 2;
  inline ::google::protobuf::int32 first() const;
  inline void set_first(::google::protobuf::int32 value);

  // required int32 curnum = 3;
  inline bool has_curnum() const;
  inline void clear_curnum();
  static const int kCurnumFieldNumber = 3;
  inline ::google::protobuf::int32 curnum() const;
  inline void set_curnum(::google::protobuf::int32 value);

  // required bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:proto_ff.CL_FactionAnswerQuestionRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_first();
  inline void clear_has_first();
  inline void set_has_curnum();
  inline void clear_has_curnum();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 first_;
  ::google::protobuf::int32 curnum_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static CL_FactionAnswerQuestionRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuRankEntry : public ::google::protobuf::Message {
 public:
  FactionMoyuRankEntry();
  virtual ~FactionMoyuRankEntry();

  FactionMoyuRankEntry(const FactionMoyuRankEntry& from);

  inline FactionMoyuRankEntry& operator=(const FactionMoyuRankEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuRankEntry& default_instance();

  void Swap(FactionMoyuRankEntry* other);

  // implements Message ----------------------------------------------

  FactionMoyuRankEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuRankEntry& from);
  void MergeFrom(const FactionMoyuRankEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 zid = 3;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 3;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional uint64 harm = 4;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 4;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // optional int32 rank = 5;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 5;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuRankEntry)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::uint64 harm_;
  ::google::protobuf::int32 zid_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuRankEntry* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuRankReq : public ::google::protobuf::Message {
 public:
  FactionMoyuRankReq();
  virtual ~FactionMoyuRankReq();

  FactionMoyuRankReq(const FactionMoyuRankReq& from);

  inline FactionMoyuRankReq& operator=(const FactionMoyuRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuRankReq& default_instance();

  void Swap(FactionMoyuRankReq* other);

  // implements Message ----------------------------------------------

  FactionMoyuRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuRankReq& from);
  void MergeFrom(const FactionMoyuRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuRankReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuRankReq* default_instance_;
};
// -------------------------------------------------------------------

class NtFactionMoyuRank : public ::google::protobuf::Message {
 public:
  NtFactionMoyuRank();
  virtual ~NtFactionMoyuRank();

  NtFactionMoyuRank(const NtFactionMoyuRank& from);

  inline NtFactionMoyuRank& operator=(const NtFactionMoyuRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtFactionMoyuRank& default_instance();

  void Swap(NtFactionMoyuRank* other);

  // implements Message ----------------------------------------------

  NtFactionMoyuRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtFactionMoyuRank& from);
  void MergeFrom(const NtFactionMoyuRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .proto_ff.FactionMoyuRankEntry infos = 2;
  inline int infos_size() const;
  inline void clear_infos();
  static const int kInfosFieldNumber = 2;
  inline const ::proto_ff::FactionMoyuRankEntry& infos(int index) const;
  inline ::proto_ff::FactionMoyuRankEntry* mutable_infos(int index);
  inline ::proto_ff::FactionMoyuRankEntry* add_infos();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuRankEntry >&
      infos() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuRankEntry >*
      mutable_infos();

  // optional uint64 harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // optional int32 rank = 4;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 4;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NtFactionMoyuRank)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuRankEntry > infos_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::uint64 harm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static NtFactionMoyuRank* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuRecvReq : public ::google::protobuf::Message {
 public:
  FactionMoyuRecvReq();
  virtual ~FactionMoyuRecvReq();

  FactionMoyuRecvReq(const FactionMoyuRecvReq& from);

  inline FactionMoyuRecvReq& operator=(const FactionMoyuRecvReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuRecvReq& default_instance();

  void Swap(FactionMoyuRecvReq* other);

  // implements Message ----------------------------------------------

  FactionMoyuRecvReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuRecvReq& from);
  void MergeFrom(const FactionMoyuRecvReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 layerid = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayeridFieldNumber = 1;
  inline ::google::protobuf::int32 layerid() const;
  inline void set_layerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuRecvReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 layerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuRecvReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuRecvRsp : public ::google::protobuf::Message {
 public:
  FactionMoyuRecvRsp();
  virtual ~FactionMoyuRecvRsp();

  FactionMoyuRecvRsp(const FactionMoyuRecvRsp& from);

  inline FactionMoyuRecvRsp& operator=(const FactionMoyuRecvRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuRecvRsp& default_instance();

  void Swap(FactionMoyuRecvRsp* other);

  // implements Message ----------------------------------------------

  FactionMoyuRecvRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuRecvRsp& from);
  void MergeFrom(const FactionMoyuRecvRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 layerid = 2;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayeridFieldNumber = 2;
  inline ::google::protobuf::int32 layerid() const;
  inline void set_layerid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuRecvRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_layerid();
  inline void clear_has_layerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 layerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuRecvRsp* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFactionMoyuDup : public ::google::protobuf::Message {
 public:
  NotifyFactionMoyuDup();
  virtual ~NotifyFactionMoyuDup();

  NotifyFactionMoyuDup(const NotifyFactionMoyuDup& from);

  inline NotifyFactionMoyuDup& operator=(const NotifyFactionMoyuDup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFactionMoyuDup& default_instance();

  void Swap(NotifyFactionMoyuDup* other);

  // implements Message ----------------------------------------------

  NotifyFactionMoyuDup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFactionMoyuDup& from);
  void MergeFrom(const NotifyFactionMoyuDup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 target_cid = 1;
  inline bool has_target_cid() const;
  inline void clear_target_cid();
  static const int kTargetCidFieldNumber = 1;
  inline ::google::protobuf::uint64 target_cid() const;
  inline void set_target_cid(::google::protobuf::uint64 value);

  // optional uint64 max_hp = 2;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 2;
  inline ::google::protobuf::uint64 max_hp() const;
  inline void set_max_hp(::google::protobuf::uint64 value);

  // optional uint64 cur_hp = 3;
  inline bool has_cur_hp() const;
  inline void clear_cur_hp();
  static const int kCurHpFieldNumber = 3;
  inline ::google::protobuf::uint64 cur_hp() const;
  inline void set_cur_hp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NotifyFactionMoyuDup)
 private:
  inline void set_has_target_cid();
  inline void clear_has_target_cid();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_cur_hp();
  inline void clear_has_cur_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 target_cid_;
  ::google::protobuf::uint64 max_hp_;
  ::google::protobuf::uint64 cur_hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static NotifyFactionMoyuDup* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuTeam : public ::google::protobuf::Message {
 public:
  FactionMoyuTeam();
  virtual ~FactionMoyuTeam();

  FactionMoyuTeam(const FactionMoyuTeam& from);

  inline FactionMoyuTeam& operator=(const FactionMoyuTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuTeam& default_instance();

  void Swap(FactionMoyuTeam* other);

  // implements Message ----------------------------------------------

  FactionMoyuTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuTeam& from);
  void MergeFrom(const FactionMoyuTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.RolePlayerMiniInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::RolePlayerMiniInfo& info() const;
  inline ::proto_ff::RolePlayerMiniInfo* mutable_info();
  inline ::proto_ff::RolePlayerMiniInfo* release_info();
  inline void set_allocated_info(::proto_ff::RolePlayerMiniInfo* info);

  // optional uint64 harm = 2;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 2;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // optional uint32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::uint32 state() const;
  inline void set_state(::google::protobuf::uint32 value);

  // optional uint64 max_hp = 4;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 4;
  inline ::google::protobuf::uint64 max_hp() const;
  inline void set_max_hp(::google::protobuf::uint64 value);

  // repeated .proto_ff.ItemProtoInfo rewaditem = 5;
  inline int rewaditem_size() const;
  inline void clear_rewaditem();
  static const int kRewaditemFieldNumber = 5;
  inline const ::proto_ff::ItemProtoInfo& rewaditem(int index) const;
  inline ::proto_ff::ItemProtoInfo* mutable_rewaditem(int index);
  inline ::proto_ff::ItemProtoInfo* add_rewaditem();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
      rewaditem() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
      mutable_rewaditem();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuTeam)
 private:
  inline void set_has_info();
  inline void clear_has_info();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RolePlayerMiniInfo* info_;
  ::google::protobuf::uint64 harm_;
  ::google::protobuf::uint64 max_hp_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo > rewaditem_;
  ::google::protobuf::uint32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuTeam* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuEndRsp : public ::google::protobuf::Message {
 public:
  FactionMoyuEndRsp();
  virtual ~FactionMoyuEndRsp();

  FactionMoyuEndRsp(const FactionMoyuEndRsp& from);

  inline FactionMoyuEndRsp& operator=(const FactionMoyuEndRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuEndRsp& default_instance();

  void Swap(FactionMoyuEndRsp* other);

  // implements Message ----------------------------------------------

  FactionMoyuEndRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuEndRsp& from);
  void MergeFrom(const FactionMoyuEndRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 dupid = 1;
  inline bool has_dupid() const;
  inline void clear_dupid();
  static const int kDupidFieldNumber = 1;
  inline ::google::protobuf::uint64 dupid() const;
  inline void set_dupid(::google::protobuf::uint64 value);

  // repeated .proto_ff.FactionMoyuTeam mem = 2;
  inline int mem_size() const;
  inline void clear_mem();
  static const int kMemFieldNumber = 2;
  inline const ::proto_ff::FactionMoyuTeam& mem(int index) const;
  inline ::proto_ff::FactionMoyuTeam* mutable_mem(int index);
  inline ::proto_ff::FactionMoyuTeam* add_mem();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam >&
      mem() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam >*
      mutable_mem();

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuEndRsp)
 private:
  inline void set_has_dupid();
  inline void clear_has_dupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 dupid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam > mem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuEndRsp* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuReq : public ::google::protobuf::Message {
 public:
  FactionMoyuReq();
  virtual ~FactionMoyuReq();

  FactionMoyuReq(const FactionMoyuReq& from);

  inline FactionMoyuReq& operator=(const FactionMoyuReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuReq& default_instance();

  void Swap(FactionMoyuReq* other);

  // implements Message ----------------------------------------------

  FactionMoyuReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuReq& from);
  void MergeFrom(const FactionMoyuReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuReq* default_instance_;
};
// -------------------------------------------------------------------

class NtFactionMoyuHarm : public ::google::protobuf::Message {
 public:
  NtFactionMoyuHarm();
  virtual ~NtFactionMoyuHarm();

  NtFactionMoyuHarm(const NtFactionMoyuHarm& from);

  inline NtFactionMoyuHarm& operator=(const NtFactionMoyuHarm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtFactionMoyuHarm& default_instance();

  void Swap(NtFactionMoyuHarm* other);

  // implements Message ----------------------------------------------

  NtFactionMoyuHarm* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtFactionMoyuHarm& from);
  void MergeFrom(const NtFactionMoyuHarm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.FactionMoyuTeam mem = 1;
  inline int mem_size() const;
  inline void clear_mem();
  static const int kMemFieldNumber = 1;
  inline const ::proto_ff::FactionMoyuTeam& mem(int index) const;
  inline ::proto_ff::FactionMoyuTeam* mutable_mem(int index);
  inline ::proto_ff::FactionMoyuTeam* add_mem();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam >&
      mem() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam >*
      mutable_mem();

  // @@protoc_insertion_point(class_scope:proto_ff.NtFactionMoyuHarm)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam > mem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static NtFactionMoyuHarm* default_instance_;
};
// -------------------------------------------------------------------

class NtFactionMoyuDupKill : public ::google::protobuf::Message {
 public:
  NtFactionMoyuDupKill();
  virtual ~NtFactionMoyuDupKill();

  NtFactionMoyuDupKill(const NtFactionMoyuDupKill& from);

  inline NtFactionMoyuDupKill& operator=(const NtFactionMoyuDupKill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtFactionMoyuDupKill& default_instance();

  void Swap(NtFactionMoyuDupKill* other);

  // implements Message ----------------------------------------------

  NtFactionMoyuDupKill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtFactionMoyuDupKill& from);
  void MergeFrom(const NtFactionMoyuDupKill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 endtime = 1;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 1;
  inline ::google::protobuf::int32 endtime() const;
  inline void set_endtime(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NtFactionMoyuDupKill)
 private:
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static NtFactionMoyuDupKill* default_instance_;
};
// -------------------------------------------------------------------

class NtFactionMoyu : public ::google::protobuf::Message {
 public:
  NtFactionMoyu();
  virtual ~NtFactionMoyu();

  NtFactionMoyu(const NtFactionMoyu& from);

  inline NtFactionMoyu& operator=(const NtFactionMoyu& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NtFactionMoyu& default_instance();

  void Swap(NtFactionMoyu* other);

  // implements Message ----------------------------------------------

  NtFactionMoyu* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NtFactionMoyu& from);
  void MergeFrom(const NtFactionMoyu& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cur_layer = 1;
  inline bool has_cur_layer() const;
  inline void clear_cur_layer();
  static const int kCurLayerFieldNumber = 1;
  inline ::google::protobuf::int32 cur_layer() const;
  inline void set_cur_layer(::google::protobuf::int32 value);

  // optional uint64 cur_hp = 2;
  inline bool has_cur_hp() const;
  inline void clear_cur_hp();
  static const int kCurHpFieldNumber = 2;
  inline ::google::protobuf::uint64 cur_hp() const;
  inline void set_cur_hp(::google::protobuf::uint64 value);

  // optional uint64 max_hp = 3;
  inline bool has_max_hp() const;
  inline void clear_max_hp();
  static const int kMaxHpFieldNumber = 3;
  inline ::google::protobuf::uint64 max_hp() const;
  inline void set_max_hp(::google::protobuf::uint64 value);

  // optional int32 pass_layer = 4;
  inline bool has_pass_layer() const;
  inline void clear_pass_layer();
  static const int kPassLayerFieldNumber = 4;
  inline ::google::protobuf::int32 pass_layer() const;
  inline void set_pass_layer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.NtFactionMoyu)
 private:
  inline void set_has_cur_layer();
  inline void clear_has_cur_layer();
  inline void set_has_cur_hp();
  inline void clear_has_cur_hp();
  inline void set_has_max_hp();
  inline void clear_has_max_hp();
  inline void set_has_pass_layer();
  inline void clear_has_pass_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cur_hp_;
  ::google::protobuf::int32 cur_layer_;
  ::google::protobuf::int32 pass_layer_;
  ::google::protobuf::uint64 max_hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static NtFactionMoyu* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuRewardReq : public ::google::protobuf::Message {
 public:
  FactionMoyuRewardReq();
  virtual ~FactionMoyuRewardReq();

  FactionMoyuRewardReq(const FactionMoyuRewardReq& from);

  inline FactionMoyuRewardReq& operator=(const FactionMoyuRewardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuRewardReq& default_instance();

  void Swap(FactionMoyuRewardReq* other);

  // implements Message ----------------------------------------------

  FactionMoyuRewardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuRewardReq& from);
  void MergeFrom(const FactionMoyuRewardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 factionId = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionIdFieldNumber = 1;
  inline ::google::protobuf::uint64 factionid() const;
  inline void set_factionid(::google::protobuf::uint64 value);

  // optional uint64 boxid = 2;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxidFieldNumber = 2;
  inline ::google::protobuf::uint64 boxid() const;
  inline void set_boxid(::google::protobuf::uint64 value);

  // optional int32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuRewardReq)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_rank();
  inline void clear_has_rank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 factionid_;
  ::google::protobuf::uint64 boxid_;
  ::google::protobuf::int32 rank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuRewardReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuUpdateReq : public ::google::protobuf::Message {
 public:
  FactionMoyuUpdateReq();
  virtual ~FactionMoyuUpdateReq();

  FactionMoyuUpdateReq(const FactionMoyuUpdateReq& from);

  inline FactionMoyuUpdateReq& operator=(const FactionMoyuUpdateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuUpdateReq& default_instance();

  void Swap(FactionMoyuUpdateReq* other);

  // implements Message ----------------------------------------------

  FactionMoyuUpdateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuUpdateReq& from);
  void MergeFrom(const FactionMoyuUpdateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 opt = 2;
  inline bool has_opt() const;
  inline void clear_opt();
  static const int kOptFieldNumber = 2;
  inline ::google::protobuf::int32 opt() const;
  inline void set_opt(::google::protobuf::int32 value);

  // optional uint64 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 zid = 5;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 5;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // optional uint64 harm = 6;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 6;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // optional uint64 harm_time = 7;
  inline bool has_harm_time() const;
  inline void clear_harm_time();
  static const int kHarmTimeFieldNumber = 7;
  inline ::google::protobuf::uint64 harm_time() const;
  inline void set_harm_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuUpdateReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_opt();
  inline void clear_has_opt();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_harm_time();
  inline void clear_has_harm_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 opt_;
  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::google::protobuf::uint64 harm_;
  ::google::protobuf::uint64 harm_time_;
  ::google::protobuf::int32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuUpdateReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuAddHarmReq : public ::google::protobuf::Message {
 public:
  FactionMoyuAddHarmReq();
  virtual ~FactionMoyuAddHarmReq();

  FactionMoyuAddHarmReq(const FactionMoyuAddHarmReq& from);

  inline FactionMoyuAddHarmReq& operator=(const FactionMoyuAddHarmReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuAddHarmReq& default_instance();

  void Swap(FactionMoyuAddHarmReq* other);

  // implements Message ----------------------------------------------

  FactionMoyuAddHarmReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuAddHarmReq& from);
  void MergeFrom(const FactionMoyuAddHarmReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint64 factionid() const;
  inline void set_factionid(::google::protobuf::uint64 value);

  // optional uint64 add_harm = 2;
  inline bool has_add_harm() const;
  inline void clear_add_harm();
  static const int kAddHarmFieldNumber = 2;
  inline ::google::protobuf::uint64 add_harm() const;
  inline void set_add_harm(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuAddHarmReq)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_add_harm();
  inline void clear_has_add_harm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 factionid_;
  ::google::protobuf::uint64 add_harm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuAddHarmReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionSynMoyuReq : public ::google::protobuf::Message {
 public:
  FactionSynMoyuReq();
  virtual ~FactionSynMoyuReq();

  FactionSynMoyuReq(const FactionSynMoyuReq& from);

  inline FactionSynMoyuReq& operator=(const FactionSynMoyuReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionSynMoyuReq& default_instance();

  void Swap(FactionSynMoyuReq* other);

  // implements Message ----------------------------------------------

  FactionSynMoyuReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionSynMoyuReq& from);
  void MergeFrom(const FactionSynMoyuReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint64 factionid() const;
  inline void set_factionid(::google::protobuf::uint64 value);

  // optional int32 cur_layer = 2;
  inline bool has_cur_layer() const;
  inline void clear_cur_layer();
  static const int kCurLayerFieldNumber = 2;
  inline ::google::protobuf::int32 cur_layer() const;
  inline void set_cur_layer(::google::protobuf::int32 value);

  // optional uint64 cur_hp = 3;
  inline bool has_cur_hp() const;
  inline void clear_cur_hp();
  static const int kCurHpFieldNumber = 3;
  inline ::google::protobuf::uint64 cur_hp() const;
  inline void set_cur_hp(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionSynMoyuReq)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_cur_layer();
  inline void clear_has_cur_layer();
  inline void set_has_cur_hp();
  inline void clear_has_cur_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 factionid_;
  ::google::protobuf::uint64 cur_hp_;
  ::google::protobuf::int32 cur_layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionSynMoyuReq* default_instance_;
};
// -------------------------------------------------------------------

class FactionMoyuPassReq : public ::google::protobuf::Message {
 public:
  FactionMoyuPassReq();
  virtual ~FactionMoyuPassReq();

  FactionMoyuPassReq(const FactionMoyuPassReq& from);

  inline FactionMoyuPassReq& operator=(const FactionMoyuPassReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactionMoyuPassReq& default_instance();

  void Swap(FactionMoyuPassReq* other);

  // implements Message ----------------------------------------------

  FactionMoyuPassReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactionMoyuPassReq& from);
  void MergeFrom(const FactionMoyuPassReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint64 factionid() const;
  inline void set_factionid(::google::protobuf::uint64 value);

  // optional uint32 layerid = 2;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayeridFieldNumber = 2;
  inline ::google::protobuf::uint32 layerid() const;
  inline void set_layerid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.FactionMoyuPassReq)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_layerid();
  inline void clear_has_layerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 factionid_;
  ::google::protobuf::uint32 layerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static FactionMoyuPassReq* default_instance_;
};
// -------------------------------------------------------------------

class LCFactionMoyuRankReq : public ::google::protobuf::Message {
 public:
  LCFactionMoyuRankReq();
  virtual ~LCFactionMoyuRankReq();

  LCFactionMoyuRankReq(const LCFactionMoyuRankReq& from);

  inline LCFactionMoyuRankReq& operator=(const LCFactionMoyuRankReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LCFactionMoyuRankReq& default_instance();

  void Swap(LCFactionMoyuRankReq* other);

  // implements Message ----------------------------------------------

  LCFactionMoyuRankReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LCFactionMoyuRankReq& from);
  void MergeFrom(const LCFactionMoyuRankReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 factionid = 1;
  inline bool has_factionid() const;
  inline void clear_factionid();
  static const int kFactionidFieldNumber = 1;
  inline ::google::protobuf::uint64 factionid() const;
  inline void set_factionid(::google::protobuf::uint64 value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 harm = 3;
  inline bool has_harm() const;
  inline void clear_harm();
  static const int kHarmFieldNumber = 3;
  inline ::google::protobuf::uint64 harm() const;
  inline void set_harm(::google::protobuf::uint64 value);

  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 zid = 5;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 5;
  inline ::google::protobuf::int32 zid() const;
  inline void set_zid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.LCFactionMoyuRankReq)
 private:
  inline void set_has_factionid();
  inline void clear_has_factionid();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_harm();
  inline void clear_has_harm();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_zid();
  inline void clear_has_zid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 factionid_;
  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 harm_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 zid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static LCFactionMoyuRankReq* default_instance_;
};
// -------------------------------------------------------------------

class CLFactionMoyuRecvReq : public ::google::protobuf::Message {
 public:
  CLFactionMoyuRecvReq();
  virtual ~CLFactionMoyuRecvReq();

  CLFactionMoyuRecvReq(const CLFactionMoyuRecvReq& from);

  inline CLFactionMoyuRecvReq& operator=(const CLFactionMoyuRecvReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CLFactionMoyuRecvReq& default_instance();

  void Swap(CLFactionMoyuRecvReq* other);

  // implements Message ----------------------------------------------

  CLFactionMoyuRecvReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CLFactionMoyuRecvReq& from);
  void MergeFrom(const CLFactionMoyuRecvReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 layerid = 1;
  inline bool has_layerid() const;
  inline void clear_layerid();
  static const int kLayeridFieldNumber = 1;
  inline ::google::protobuf::int32 layerid() const;
  inline void set_layerid(::google::protobuf::int32 value);

  // optional uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.CLFactionMoyuRecvReq)
 private:
  inline void set_has_layerid();
  inline void clear_has_layerid();
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int32 layerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Faction_2eproto();
  friend void protobuf_AssignDesc_Faction_2eproto();
  friend void protobuf_ShutdownFile_Faction_2eproto();

  void InitAsDefaultInstance();
  static CLFactionMoyuRecvReq* default_instance_;
};
// ===================================================================


// ===================================================================

// FactionListProto

// optional uint32 faction_id = 1;
inline bool FactionListProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionListProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionListProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionListProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionListProto::faction_id() const {
  return faction_id_;
}
inline void FactionListProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool FactionListProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionListProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionListProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionListProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionListProto::name() const {
  return *name_;
}
inline void FactionListProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionListProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionListProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionListProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionListProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionListProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rank = 3;
inline bool FactionListProto::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionListProto::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionListProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionListProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionListProto::rank() const {
  return rank_;
}
inline void FactionListProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 leader_cid = 4;
inline bool FactionListProto::has_leader_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionListProto::set_has_leader_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionListProto::clear_has_leader_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionListProto::clear_leader_cid() {
  leader_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_cid();
}
inline ::google::protobuf::uint64 FactionListProto::leader_cid() const {
  return leader_cid_;
}
inline void FactionListProto::set_leader_cid(::google::protobuf::uint64 value) {
  set_has_leader_cid();
  leader_cid_ = value;
}

// optional bytes leader_name = 5;
inline bool FactionListProto::has_leader_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionListProto::set_has_leader_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionListProto::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionListProto::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& FactionListProto::leader_name() const {
  return *leader_name_;
}
inline void FactionListProto::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionListProto::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionListProto::set_leader_name(const void* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionListProto::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* FactionListProto::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionListProto::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 6;
inline bool FactionListProto::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionListProto::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionListProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionListProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionListProto::level() const {
  return level_;
}
inline void FactionListProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 mem_count = 7;
inline bool FactionListProto::has_mem_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionListProto::set_has_mem_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionListProto::clear_has_mem_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionListProto::clear_mem_count() {
  mem_count_ = 0;
  clear_has_mem_count();
}
inline ::google::protobuf::int32 FactionListProto::mem_count() const {
  return mem_count_;
}
inline void FactionListProto::set_mem_count(::google::protobuf::int32 value) {
  set_has_mem_count();
  mem_count_ = value;
}

// optional uint64 fight = 8;
inline bool FactionListProto::has_fight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionListProto::set_has_fight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionListProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionListProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionListProto::fight() const {
  return fight_;
}
inline void FactionListProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 already_apply = 9;
inline bool FactionListProto::has_already_apply() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionListProto::set_has_already_apply() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionListProto::clear_has_already_apply() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionListProto::clear_already_apply() {
  already_apply_ = 0;
  clear_has_already_apply();
}
inline ::google::protobuf::int32 FactionListProto::already_apply() const {
  return already_apply_;
}
inline void FactionListProto::set_already_apply(::google::protobuf::int32 value) {
  set_has_already_apply();
  already_apply_ = value;
}

// -------------------------------------------------------------------

// FactionProto

// optional uint32 faction_id = 1;
inline bool FactionProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionProto::faction_id() const {
  return faction_id_;
}
inline void FactionProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool FactionProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionProto::name() const {
  return *name_;
}
inline void FactionProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool FactionProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionProto::level() const {
  return level_;
}
inline void FactionProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 rank = 4;
inline bool FactionProto::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionProto::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionProto::rank() const {
  return rank_;
}
inline void FactionProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int32 mem_count = 5;
inline bool FactionProto::has_mem_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionProto::set_has_mem_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionProto::clear_has_mem_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionProto::clear_mem_count() {
  mem_count_ = 0;
  clear_has_mem_count();
}
inline ::google::protobuf::int32 FactionProto::mem_count() const {
  return mem_count_;
}
inline void FactionProto::set_mem_count(::google::protobuf::int32 value) {
  set_has_mem_count();
  mem_count_ = value;
}

// optional uint64 fight = 6;
inline bool FactionProto::has_fight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionProto::set_has_fight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionProto::fight() const {
  return fight_;
}
inline void FactionProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 grade = 7;
inline bool FactionProto::has_grade() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionProto::set_has_grade() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionProto::clear_has_grade() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionProto::clear_grade() {
  grade_ = 0;
  clear_has_grade();
}
inline ::google::protobuf::int32 FactionProto::grade() const {
  return grade_;
}
inline void FactionProto::set_grade(::google::protobuf::int32 value) {
  set_has_grade();
  grade_ = value;
}

// optional uint64 exp = 8;
inline bool FactionProto::has_exp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionProto::set_has_exp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionProto::clear_has_exp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionProto::clear_exp() {
  exp_ = GOOGLE_ULONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::uint64 FactionProto::exp() const {
  return exp_;
}
inline void FactionProto::set_exp(::google::protobuf::uint64 value) {
  set_has_exp();
  exp_ = value;
}

// optional string notice = 9;
inline bool FactionProto::has_notice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionProto::set_has_notice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionProto::clear_has_notice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionProto::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& FactionProto::notice() const {
  return *notice_;
}
inline void FactionProto::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void FactionProto::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void FactionProto::set_notice(const char* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionProto::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* FactionProto::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionProto::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 leader_cid = 10;
inline bool FactionProto::has_leader_cid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FactionProto::set_has_leader_cid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FactionProto::clear_has_leader_cid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FactionProto::clear_leader_cid() {
  leader_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_cid();
}
inline ::google::protobuf::uint64 FactionProto::leader_cid() const {
  return leader_cid_;
}
inline void FactionProto::set_leader_cid(::google::protobuf::uint64 value) {
  set_has_leader_cid();
  leader_cid_ = value;
}

// optional bytes leader_name = 11;
inline bool FactionProto::has_leader_name() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FactionProto::set_has_leader_name() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FactionProto::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FactionProto::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& FactionProto::leader_name() const {
  return *leader_name_;
}
inline void FactionProto::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionProto::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionProto::set_leader_name(const void* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionProto::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* FactionProto::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionProto::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto_ff.RoleFacadeProto facade = 12;
inline bool FactionProto::has_facade() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FactionProto::set_has_facade() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FactionProto::clear_has_facade() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FactionProto::clear_facade() {
  if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
  clear_has_facade();
}
inline const ::proto_ff::RoleFacadeProto& FactionProto::facade() const {
  return facade_ != NULL ? *facade_ : *default_instance_->facade_;
}
inline ::proto_ff::RoleFacadeProto* FactionProto::mutable_facade() {
  set_has_facade();
  if (facade_ == NULL) facade_ = new ::proto_ff::RoleFacadeProto;
  return facade_;
}
inline ::proto_ff::RoleFacadeProto* FactionProto::release_facade() {
  clear_has_facade();
  ::proto_ff::RoleFacadeProto* temp = facade_;
  facade_ = NULL;
  return temp;
}
inline void FactionProto::set_allocated_facade(::proto_ff::RoleFacadeProto* facade) {
  delete facade_;
  facade_ = facade;
  if (facade) {
    set_has_facade();
  } else {
    clear_has_facade();
  }
}

// optional int32 apply_type = 13;
inline bool FactionProto::has_apply_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FactionProto::set_has_apply_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FactionProto::clear_has_apply_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FactionProto::clear_apply_type() {
  apply_type_ = 0;
  clear_has_apply_type();
}
inline ::google::protobuf::int32 FactionProto::apply_type() const {
  return apply_type_;
}
inline void FactionProto::set_apply_type(::google::protobuf::int32 value) {
  set_has_apply_type();
  apply_type_ = value;
}

// optional int32 apply_minlev = 14;
inline bool FactionProto::has_apply_minlev() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void FactionProto::set_has_apply_minlev() {
  _has_bits_[0] |= 0x00002000u;
}
inline void FactionProto::clear_has_apply_minlev() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void FactionProto::clear_apply_minlev() {
  apply_minlev_ = 0;
  clear_has_apply_minlev();
}
inline ::google::protobuf::int32 FactionProto::apply_minlev() const {
  return apply_minlev_;
}
inline void FactionProto::set_apply_minlev(::google::protobuf::int32 value) {
  set_has_apply_minlev();
  apply_minlev_ = value;
}

// optional uint64 apply_fight = 15;
inline bool FactionProto::has_apply_fight() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void FactionProto::set_has_apply_fight() {
  _has_bits_[0] |= 0x00004000u;
}
inline void FactionProto::clear_has_apply_fight() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void FactionProto::clear_apply_fight() {
  apply_fight_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_fight();
}
inline ::google::protobuf::uint64 FactionProto::apply_fight() const {
  return apply_fight_;
}
inline void FactionProto::set_apply_fight(::google::protobuf::uint64 value) {
  set_has_apply_fight();
  apply_fight_ = value;
}

// optional int32 online_num = 16;
inline bool FactionProto::has_online_num() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void FactionProto::set_has_online_num() {
  _has_bits_[0] |= 0x00008000u;
}
inline void FactionProto::clear_has_online_num() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void FactionProto::clear_online_num() {
  online_num_ = 0;
  clear_has_online_num();
}
inline ::google::protobuf::int32 FactionProto::online_num() const {
  return online_num_;
}
inline void FactionProto::set_online_num(::google::protobuf::int32 value) {
  set_has_online_num();
  online_num_ = value;
}

// -------------------------------------------------------------------

// FactionMemProto

// optional uint64 cid = 1;
inline bool FactionMemProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMemProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMemProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMemProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionMemProto::cid() const {
  return cid_;
}
inline void FactionMemProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool FactionMemProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMemProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMemProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMemProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionMemProto::name() const {
  return *name_;
}
inline void FactionMemProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMemProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMemProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionMemProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionMemProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionMemProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prof = 3;
inline bool FactionMemProto::has_prof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMemProto::set_has_prof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMemProto::clear_has_prof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMemProto::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 FactionMemProto::prof() const {
  return prof_;
}
inline void FactionMemProto::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional int32 vip_level = 4;
inline bool FactionMemProto::has_vip_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMemProto::set_has_vip_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMemProto::clear_has_vip_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMemProto::clear_vip_level() {
  vip_level_ = 0;
  clear_has_vip_level();
}
inline ::google::protobuf::int32 FactionMemProto::vip_level() const {
  return vip_level_;
}
inline void FactionMemProto::set_vip_level(::google::protobuf::int32 value) {
  set_has_vip_level();
  vip_level_ = value;
}

// optional int32 level = 5;
inline bool FactionMemProto::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionMemProto::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionMemProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionMemProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionMemProto::level() const {
  return level_;
}
inline void FactionMemProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 duty = 6;
inline bool FactionMemProto::has_duty() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionMemProto::set_has_duty() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionMemProto::clear_has_duty() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionMemProto::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 FactionMemProto::duty() const {
  return duty_;
}
inline void FactionMemProto::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// optional uint64 fight = 7;
inline bool FactionMemProto::has_fight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionMemProto::set_has_fight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionMemProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionMemProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionMemProto::fight() const {
  return fight_;
}
inline void FactionMemProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional uint64 total_contri = 8;
inline bool FactionMemProto::has_total_contri() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionMemProto::set_has_total_contri() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionMemProto::clear_has_total_contri() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionMemProto::clear_total_contri() {
  total_contri_ = GOOGLE_ULONGLONG(0);
  clear_has_total_contri();
}
inline ::google::protobuf::uint64 FactionMemProto::total_contri() const {
  return total_contri_;
}
inline void FactionMemProto::set_total_contri(::google::protobuf::uint64 value) {
  set_has_total_contri();
  total_contri_ = value;
}

// optional int32 is_online = 9;
inline bool FactionMemProto::has_is_online() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionMemProto::set_has_is_online() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionMemProto::clear_has_is_online() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionMemProto::clear_is_online() {
  is_online_ = 0;
  clear_has_is_online();
}
inline ::google::protobuf::int32 FactionMemProto::is_online() const {
  return is_online_;
}
inline void FactionMemProto::set_is_online(::google::protobuf::int32 value) {
  set_has_is_online();
  is_online_ = value;
}

// optional uint64 logout_time = 10;
inline bool FactionMemProto::has_logout_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FactionMemProto::set_has_logout_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FactionMemProto::clear_has_logout_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FactionMemProto::clear_logout_time() {
  logout_time_ = GOOGLE_ULONGLONG(0);
  clear_has_logout_time();
}
inline ::google::protobuf::uint64 FactionMemProto::logout_time() const {
  return logout_time_;
}
inline void FactionMemProto::set_logout_time(::google::protobuf::uint64 value) {
  set_has_logout_time();
  logout_time_ = value;
}

// optional uint64 clan3_id = 11;
inline bool FactionMemProto::has_clan3_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FactionMemProto::set_has_clan3_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FactionMemProto::clear_has_clan3_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FactionMemProto::clear_clan3_id() {
  clan3_id_ = GOOGLE_ULONGLONG(0);
  clear_has_clan3_id();
}
inline ::google::protobuf::uint64 FactionMemProto::clan3_id() const {
  return clan3_id_;
}
inline void FactionMemProto::set_clan3_id(::google::protobuf::uint64 value) {
  set_has_clan3_id();
  clan3_id_ = value;
}

// optional uint64 clan5_id = 12;
inline bool FactionMemProto::has_clan5_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FactionMemProto::set_has_clan5_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FactionMemProto::clear_has_clan5_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FactionMemProto::clear_clan5_id() {
  clan5_id_ = GOOGLE_ULONGLONG(0);
  clear_has_clan5_id();
}
inline ::google::protobuf::uint64 FactionMemProto::clan5_id() const {
  return clan5_id_;
}
inline void FactionMemProto::set_clan5_id(::google::protobuf::uint64 value) {
  set_has_clan5_id();
  clan5_id_ = value;
}

// optional .proto_ff.RoleHeadPicProto head = 13;
inline bool FactionMemProto::has_head() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FactionMemProto::set_has_head() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FactionMemProto::clear_has_head() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FactionMemProto::clear_head() {
  if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
  clear_has_head();
}
inline const ::proto_ff::RoleHeadPicProto& FactionMemProto::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::proto_ff::RoleHeadPicProto* FactionMemProto::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::proto_ff::RoleHeadPicProto;
  return head_;
}
inline ::proto_ff::RoleHeadPicProto* FactionMemProto::release_head() {
  clear_has_head();
  ::proto_ff::RoleHeadPicProto* temp = head_;
  head_ = NULL;
  return temp;
}
inline void FactionMemProto::set_allocated_head(::proto_ff::RoleHeadPicProto* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// FactionMemListProto

// repeated .proto_ff.FactionMemProto mem_lst = 1;
inline int FactionMemListProto::mem_lst_size() const {
  return mem_lst_.size();
}
inline void FactionMemListProto::clear_mem_lst() {
  mem_lst_.Clear();
}
inline const ::proto_ff::FactionMemProto& FactionMemListProto::mem_lst(int index) const {
  return mem_lst_.Get(index);
}
inline ::proto_ff::FactionMemProto* FactionMemListProto::mutable_mem_lst(int index) {
  return mem_lst_.Mutable(index);
}
inline ::proto_ff::FactionMemProto* FactionMemListProto::add_mem_lst() {
  return mem_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto >&
FactionMemListProto::mem_lst() const {
  return mem_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemProto >*
FactionMemListProto::mutable_mem_lst() {
  return &mem_lst_;
}

// -------------------------------------------------------------------

// FactionApplyProto

// optional uint64 cid = 1;
inline bool FactionApplyProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionApplyProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionApplyProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionApplyProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionApplyProto::cid() const {
  return cid_;
}
inline void FactionApplyProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool FactionApplyProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionApplyProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionApplyProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionApplyProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionApplyProto::name() const {
  return *name_;
}
inline void FactionApplyProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionApplyProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionApplyProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionApplyProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionApplyProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionApplyProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool FactionApplyProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionApplyProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionApplyProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionApplyProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionApplyProto::level() const {
  return level_;
}
inline void FactionApplyProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 fight = 4;
inline bool FactionApplyProto::has_fight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionApplyProto::set_has_fight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionApplyProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionApplyProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionApplyProto::fight() const {
  return fight_;
}
inline void FactionApplyProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// FactionApplyListProto

// repeated .proto_ff.FactionApplyProto apply_lst = 1;
inline int FactionApplyListProto::apply_lst_size() const {
  return apply_lst_.size();
}
inline void FactionApplyListProto::clear_apply_lst() {
  apply_lst_.Clear();
}
inline const ::proto_ff::FactionApplyProto& FactionApplyListProto::apply_lst(int index) const {
  return apply_lst_.Get(index);
}
inline ::proto_ff::FactionApplyProto* FactionApplyListProto::mutable_apply_lst(int index) {
  return apply_lst_.Mutable(index);
}
inline ::proto_ff::FactionApplyProto* FactionApplyListProto::add_apply_lst() {
  return apply_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto >&
FactionApplyListProto::apply_lst() const {
  return apply_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionApplyProto >*
FactionApplyListProto::mutable_apply_lst() {
  return &apply_lst_;
}

// -------------------------------------------------------------------

// FactionMemSimpleProto

// optional uint64 cid = 1;
inline bool FactionMemSimpleProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMemSimpleProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMemSimpleProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMemSimpleProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionMemSimpleProto::cid() const {
  return cid_;
}
inline void FactionMemSimpleProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool FactionMemSimpleProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMemSimpleProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMemSimpleProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMemSimpleProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionMemSimpleProto::name() const {
  return *name_;
}
inline void FactionMemSimpleProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMemSimpleProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMemSimpleProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionMemSimpleProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionMemSimpleProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionMemSimpleProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool FactionMemSimpleProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMemSimpleProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMemSimpleProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMemSimpleProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionMemSimpleProto::level() const {
  return level_;
}
inline void FactionMemSimpleProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 duty = 4;
inline bool FactionMemSimpleProto::has_duty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMemSimpleProto::set_has_duty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMemSimpleProto::clear_has_duty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMemSimpleProto::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 FactionMemSimpleProto::duty() const {
  return duty_;
}
inline void FactionMemSimpleProto::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// optional uint64 fight = 5;
inline bool FactionMemSimpleProto::has_fight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionMemSimpleProto::set_has_fight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionMemSimpleProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionMemSimpleProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionMemSimpleProto::fight() const {
  return fight_;
}
inline void FactionMemSimpleProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// FactionMemSimpleListProto

// repeated .proto_ff.FactionMemSimpleProto simple_lst = 1;
inline int FactionMemSimpleListProto::simple_lst_size() const {
  return simple_lst_.size();
}
inline void FactionMemSimpleListProto::clear_simple_lst() {
  simple_lst_.Clear();
}
inline const ::proto_ff::FactionMemSimpleProto& FactionMemSimpleListProto::simple_lst(int index) const {
  return simple_lst_.Get(index);
}
inline ::proto_ff::FactionMemSimpleProto* FactionMemSimpleListProto::mutable_simple_lst(int index) {
  return simple_lst_.Mutable(index);
}
inline ::proto_ff::FactionMemSimpleProto* FactionMemSimpleListProto::add_simple_lst() {
  return simple_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto >&
FactionMemSimpleListProto::simple_lst() const {
  return simple_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMemSimpleProto >*
FactionMemSimpleListProto::mutable_simple_lst() {
  return &simple_lst_;
}

// -------------------------------------------------------------------

// FactionSimpleProto

// optional uint32 faction_id = 1;
inline bool FactionSimpleProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionSimpleProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionSimpleProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionSimpleProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionSimpleProto::faction_id() const {
  return faction_id_;
}
inline void FactionSimpleProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool FactionSimpleProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionSimpleProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionSimpleProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionSimpleProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionSimpleProto::name() const {
  return *name_;
}
inline void FactionSimpleProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionSimpleProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionSimpleProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionSimpleProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionSimpleProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionSimpleProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 rank = 3;
inline bool FactionSimpleProto::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionSimpleProto::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionSimpleProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionSimpleProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionSimpleProto::rank() const {
  return rank_;
}
inline void FactionSimpleProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 leader_cid = 4;
inline bool FactionSimpleProto::has_leader_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionSimpleProto::set_has_leader_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionSimpleProto::clear_has_leader_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionSimpleProto::clear_leader_cid() {
  leader_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_leader_cid();
}
inline ::google::protobuf::uint64 FactionSimpleProto::leader_cid() const {
  return leader_cid_;
}
inline void FactionSimpleProto::set_leader_cid(::google::protobuf::uint64 value) {
  set_has_leader_cid();
  leader_cid_ = value;
}

// optional bytes leader_name = 5;
inline bool FactionSimpleProto::has_leader_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionSimpleProto::set_has_leader_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionSimpleProto::clear_has_leader_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionSimpleProto::clear_leader_name() {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    leader_name_->clear();
  }
  clear_has_leader_name();
}
inline const ::std::string& FactionSimpleProto::leader_name() const {
  return *leader_name_;
}
inline void FactionSimpleProto::set_leader_name(const ::std::string& value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionSimpleProto::set_leader_name(const char* value) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(value);
}
inline void FactionSimpleProto::set_leader_name(const void* value, size_t size) {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  leader_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionSimpleProto::mutable_leader_name() {
  set_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    leader_name_ = new ::std::string;
  }
  return leader_name_;
}
inline ::std::string* FactionSimpleProto::release_leader_name() {
  clear_has_leader_name();
  if (leader_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = leader_name_;
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionSimpleProto::set_allocated_leader_name(::std::string* leader_name) {
  if (leader_name_ != &::google::protobuf::internal::kEmptyString) {
    delete leader_name_;
  }
  if (leader_name) {
    set_has_leader_name();
    leader_name_ = leader_name;
  } else {
    clear_has_leader_name();
    leader_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 6;
inline bool FactionSimpleProto::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionSimpleProto::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionSimpleProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionSimpleProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionSimpleProto::level() const {
  return level_;
}
inline void FactionSimpleProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 mem_count = 7;
inline bool FactionSimpleProto::has_mem_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionSimpleProto::set_has_mem_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionSimpleProto::clear_has_mem_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionSimpleProto::clear_mem_count() {
  mem_count_ = 0;
  clear_has_mem_count();
}
inline ::google::protobuf::int32 FactionSimpleProto::mem_count() const {
  return mem_count_;
}
inline void FactionSimpleProto::set_mem_count(::google::protobuf::int32 value) {
  set_has_mem_count();
  mem_count_ = value;
}

// optional uint64 fight = 8;
inline bool FactionSimpleProto::has_fight() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionSimpleProto::set_has_fight() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionSimpleProto::clear_has_fight() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionSimpleProto::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 FactionSimpleProto::fight() const {
  return fight_;
}
inline void FactionSimpleProto::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 apply_type = 9;
inline bool FactionSimpleProto::has_apply_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionSimpleProto::set_has_apply_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionSimpleProto::clear_has_apply_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionSimpleProto::clear_apply_type() {
  apply_type_ = 0;
  clear_has_apply_type();
}
inline ::google::protobuf::int32 FactionSimpleProto::apply_type() const {
  return apply_type_;
}
inline void FactionSimpleProto::set_apply_type(::google::protobuf::int32 value) {
  set_has_apply_type();
  apply_type_ = value;
}

// optional int32 apply_minlev = 10;
inline bool FactionSimpleProto::has_apply_minlev() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FactionSimpleProto::set_has_apply_minlev() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FactionSimpleProto::clear_has_apply_minlev() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FactionSimpleProto::clear_apply_minlev() {
  apply_minlev_ = 0;
  clear_has_apply_minlev();
}
inline ::google::protobuf::int32 FactionSimpleProto::apply_minlev() const {
  return apply_minlev_;
}
inline void FactionSimpleProto::set_apply_minlev(::google::protobuf::int32 value) {
  set_has_apply_minlev();
  apply_minlev_ = value;
}

// optional uint64 apply_fight = 11;
inline bool FactionSimpleProto::has_apply_fight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FactionSimpleProto::set_has_apply_fight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FactionSimpleProto::clear_has_apply_fight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FactionSimpleProto::clear_apply_fight() {
  apply_fight_ = GOOGLE_ULONGLONG(0);
  clear_has_apply_fight();
}
inline ::google::protobuf::uint64 FactionSimpleProto::apply_fight() const {
  return apply_fight_;
}
inline void FactionSimpleProto::set_apply_fight(::google::protobuf::uint64 value) {
  set_has_apply_fight();
  apply_fight_ = value;
}

// optional .proto_ff.FactionMemSimpleListProto mem = 12;
inline bool FactionSimpleProto::has_mem() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FactionSimpleProto::set_has_mem() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FactionSimpleProto::clear_has_mem() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FactionSimpleProto::clear_mem() {
  if (mem_ != NULL) mem_->::proto_ff::FactionMemSimpleListProto::Clear();
  clear_has_mem();
}
inline const ::proto_ff::FactionMemSimpleListProto& FactionSimpleProto::mem() const {
  return mem_ != NULL ? *mem_ : *default_instance_->mem_;
}
inline ::proto_ff::FactionMemSimpleListProto* FactionSimpleProto::mutable_mem() {
  set_has_mem();
  if (mem_ == NULL) mem_ = new ::proto_ff::FactionMemSimpleListProto;
  return mem_;
}
inline ::proto_ff::FactionMemSimpleListProto* FactionSimpleProto::release_mem() {
  clear_has_mem();
  ::proto_ff::FactionMemSimpleListProto* temp = mem_;
  mem_ = NULL;
  return temp;
}
inline void FactionSimpleProto::set_allocated_mem(::proto_ff::FactionMemSimpleListProto* mem) {
  delete mem_;
  mem_ = mem;
  if (mem) {
    set_has_mem();
  } else {
    clear_has_mem();
  }
}

// -------------------------------------------------------------------

// FactionRecordProto

// optional bytes name = 1;
inline bool FactionRecordProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionRecordProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionRecordProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionRecordProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionRecordProto::name() const {
  return *name_;
}
inline void FactionRecordProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionRecordProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionRecordProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionRecordProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionRecordProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionRecordProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 time = 2;
inline bool FactionRecordProto::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionRecordProto::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionRecordProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionRecordProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FactionRecordProto::time() const {
  return time_;
}
inline void FactionRecordProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional int32 op = 3;
inline bool FactionRecordProto::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionRecordProto::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionRecordProto::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionRecordProto::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 FactionRecordProto::op() const {
  return op_;
}
inline void FactionRecordProto::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// optional int64 param1 = 4;
inline bool FactionRecordProto::has_param1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionRecordProto::set_has_param1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionRecordProto::clear_has_param1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionRecordProto::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 FactionRecordProto::param1() const {
  return param1_;
}
inline void FactionRecordProto::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// -------------------------------------------------------------------

// FactionRecordListProto

// repeated .proto_ff.FactionRecordProto record_lst = 1;
inline int FactionRecordListProto::record_lst_size() const {
  return record_lst_.size();
}
inline void FactionRecordListProto::clear_record_lst() {
  record_lst_.Clear();
}
inline const ::proto_ff::FactionRecordProto& FactionRecordListProto::record_lst(int index) const {
  return record_lst_.Get(index);
}
inline ::proto_ff::FactionRecordProto* FactionRecordListProto::mutable_record_lst(int index) {
  return record_lst_.Mutable(index);
}
inline ::proto_ff::FactionRecordProto* FactionRecordListProto::add_record_lst() {
  return record_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto >&
FactionRecordListProto::record_lst() const {
  return record_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionRecordProto >*
FactionRecordListProto::mutable_record_lst() {
  return &record_lst_;
}

// -------------------------------------------------------------------

// FactionSalaryProto

// optional int32 id = 1;
inline bool FactionSalaryProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionSalaryProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionSalaryProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionSalaryProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FactionSalaryProto::id() const {
  return id_;
}
inline void FactionSalaryProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 cur = 2;
inline bool FactionSalaryProto::has_cur() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionSalaryProto::set_has_cur() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionSalaryProto::clear_has_cur() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionSalaryProto::clear_cur() {
  cur_ = 0;
  clear_has_cur();
}
inline ::google::protobuf::int32 FactionSalaryProto::cur() const {
  return cur_;
}
inline void FactionSalaryProto::set_cur(::google::protobuf::int32 value) {
  set_has_cur();
  cur_ = value;
}

// optional int32 fetch = 3;
inline bool FactionSalaryProto::has_fetch() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionSalaryProto::set_has_fetch() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionSalaryProto::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionSalaryProto::clear_fetch() {
  fetch_ = 0;
  clear_has_fetch();
}
inline ::google::protobuf::int32 FactionSalaryProto::fetch() const {
  return fetch_;
}
inline void FactionSalaryProto::set_fetch(::google::protobuf::int32 value) {
  set_has_fetch();
  fetch_ = value;
}

// -------------------------------------------------------------------

// FactionSalaryListProto

// repeated .proto_ff.FactionSalaryProto info = 1;
inline int FactionSalaryListProto::info_size() const {
  return info_.size();
}
inline void FactionSalaryListProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FactionSalaryProto& FactionSalaryListProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FactionSalaryProto* FactionSalaryListProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FactionSalaryProto* FactionSalaryListProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSalaryProto >&
FactionSalaryListProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSalaryProto >*
FactionSalaryListProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FactionDinnerProto

// optional uint32 trans = 1;
inline bool FactionDinnerProto::has_trans() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionDinnerProto::set_has_trans() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionDinnerProto::clear_has_trans() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionDinnerProto::clear_trans() {
  trans_ = 0u;
  clear_has_trans();
}
inline ::google::protobuf::uint32 FactionDinnerProto::trans() const {
  return trans_;
}
inline void FactionDinnerProto::set_trans(::google::protobuf::uint32 value) {
  set_has_trans();
  trans_ = value;
}

// optional uint32 meat = 2;
inline bool FactionDinnerProto::has_meat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionDinnerProto::set_has_meat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionDinnerProto::clear_has_meat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionDinnerProto::clear_meat() {
  meat_ = 0u;
  clear_has_meat();
}
inline ::google::protobuf::uint32 FactionDinnerProto::meat() const {
  return meat_;
}
inline void FactionDinnerProto::set_meat(::google::protobuf::uint32 value) {
  set_has_meat();
  meat_ = value;
}

// optional uint32 exp = 3;
inline bool FactionDinnerProto::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionDinnerProto::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionDinnerProto::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionDinnerProto::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 FactionDinnerProto::exp() const {
  return exp_;
}
inline void FactionDinnerProto::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 contri = 4;
inline bool FactionDinnerProto::has_contri() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionDinnerProto::set_has_contri() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionDinnerProto::clear_has_contri() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionDinnerProto::clear_contri() {
  contri_ = 0u;
  clear_has_contri();
}
inline ::google::protobuf::uint32 FactionDinnerProto::contri() const {
  return contri_;
}
inline void FactionDinnerProto::set_contri(::google::protobuf::uint32 value) {
  set_has_contri();
  contri_ = value;
}

// -------------------------------------------------------------------

// FactionInviteProto

// optional uint64 cid = 1;
inline bool FactionInviteProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionInviteProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionInviteProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionInviteProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionInviteProto::cid() const {
  return cid_;
}
inline void FactionInviteProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool FactionInviteProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionInviteProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionInviteProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionInviteProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionInviteProto::name() const {
  return *name_;
}
inline void FactionInviteProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionInviteProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionInviteProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionInviteProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionInviteProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionInviteProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 3;
inline bool FactionInviteProto::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionInviteProto::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionInviteProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionInviteProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionInviteProto::level() const {
  return level_;
}
inline void FactionInviteProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 prof = 4;
inline bool FactionInviteProto::has_prof() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionInviteProto::set_has_prof() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionInviteProto::clear_has_prof() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionInviteProto::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 FactionInviteProto::prof() const {
  return prof_;
}
inline void FactionInviteProto::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional .proto_ff.RoleHeadPicProto head = 5;
inline bool FactionInviteProto::has_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionInviteProto::set_has_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionInviteProto::clear_has_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionInviteProto::clear_head() {
  if (head_ != NULL) head_->::proto_ff::RoleHeadPicProto::Clear();
  clear_has_head();
}
inline const ::proto_ff::RoleHeadPicProto& FactionInviteProto::head() const {
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
inline ::proto_ff::RoleHeadPicProto* FactionInviteProto::mutable_head() {
  set_has_head();
  if (head_ == NULL) head_ = new ::proto_ff::RoleHeadPicProto;
  return head_;
}
inline ::proto_ff::RoleHeadPicProto* FactionInviteProto::release_head() {
  clear_has_head();
  ::proto_ff::RoleHeadPicProto* temp = head_;
  head_ = NULL;
  return temp;
}
inline void FactionInviteProto::set_allocated_head(::proto_ff::RoleHeadPicProto* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
}

// -------------------------------------------------------------------

// FactionSkillProto

// optional int32 id = 1;
inline bool FactionSkillProto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionSkillProto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionSkillProto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionSkillProto::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 FactionSkillProto::id() const {
  return id_;
}
inline void FactionSkillProto::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2;
inline bool FactionSkillProto::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionSkillProto::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionSkillProto::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionSkillProto::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 FactionSkillProto::level() const {
  return level_;
}
inline void FactionSkillProto::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// FactionSkillListProto

// repeated .proto_ff.FactionSkillProto info = 1;
inline int FactionSkillListProto::info_size() const {
  return info_.size();
}
inline void FactionSkillListProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::FactionSkillProto& FactionSkillListProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::FactionSkillProto* FactionSkillListProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::FactionSkillProto* FactionSkillListProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSkillProto >&
FactionSkillListProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionSkillProto >*
FactionSkillListProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// FactionAnswerRankProto

// optional int32 rank = 1;
inline bool FactionAnswerRankProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionAnswerRankProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionAnswerRankProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionAnswerRankProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionAnswerRankProto::rank() const {
  return rank_;
}
inline void FactionAnswerRankProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 faction_id = 2;
inline bool FactionAnswerRankProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionAnswerRankProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionAnswerRankProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionAnswerRankProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionAnswerRankProto::faction_id() const {
  return faction_id_;
}
inline void FactionAnswerRankProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 3;
inline bool FactionAnswerRankProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionAnswerRankProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionAnswerRankProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionAnswerRankProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionAnswerRankProto::name() const {
  return *name_;
}
inline void FactionAnswerRankProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionAnswerRankProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionAnswerRankProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionAnswerRankProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionAnswerRankProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionAnswerRankProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 4;
inline bool FactionAnswerRankProto::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionAnswerRankProto::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionAnswerRankProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionAnswerRankProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 FactionAnswerRankProto::zid() const {
  return zid_;
}
inline void FactionAnswerRankProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional int32 count = 5;
inline bool FactionAnswerRankProto::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionAnswerRankProto::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionAnswerRankProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionAnswerRankProto::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 FactionAnswerRankProto::count() const {
  return count_;
}
inline void FactionAnswerRankProto::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// FactionAnswerRankListProto

// repeated .proto_ff.FactionAnswerRankProto lst = 1;
inline int FactionAnswerRankListProto::lst_size() const {
  return lst_.size();
}
inline void FactionAnswerRankListProto::clear_lst() {
  lst_.Clear();
}
inline const ::proto_ff::FactionAnswerRankProto& FactionAnswerRankListProto::lst(int index) const {
  return lst_.Get(index);
}
inline ::proto_ff::FactionAnswerRankProto* FactionAnswerRankListProto::mutable_lst(int index) {
  return lst_.Mutable(index);
}
inline ::proto_ff::FactionAnswerRankProto* FactionAnswerRankListProto::add_lst() {
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerRankProto >&
FactionAnswerRankListProto::lst() const {
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerRankProto >*
FactionAnswerRankListProto::mutable_lst() {
  return &lst_;
}

// -------------------------------------------------------------------

// FactionAnswerFinalProto

// optional int32 rank = 1;
inline bool FactionAnswerFinalProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionAnswerFinalProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionAnswerFinalProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionAnswerFinalProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionAnswerFinalProto::rank() const {
  return rank_;
}
inline void FactionAnswerFinalProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 faction_id = 2;
inline bool FactionAnswerFinalProto::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionAnswerFinalProto::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionAnswerFinalProto::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionAnswerFinalProto::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 FactionAnswerFinalProto::faction_id() const {
  return faction_id_;
}
inline void FactionAnswerFinalProto::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 3;
inline bool FactionAnswerFinalProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionAnswerFinalProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionAnswerFinalProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionAnswerFinalProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionAnswerFinalProto::name() const {
  return *name_;
}
inline void FactionAnswerFinalProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionAnswerFinalProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionAnswerFinalProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionAnswerFinalProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionAnswerFinalProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionAnswerFinalProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 zid = 4;
inline bool FactionAnswerFinalProto::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionAnswerFinalProto::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionAnswerFinalProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionAnswerFinalProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 FactionAnswerFinalProto::zid() const {
  return zid_;
}
inline void FactionAnswerFinalProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 cid = 5;
inline bool FactionAnswerFinalProto::has_cid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionAnswerFinalProto::set_has_cid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionAnswerFinalProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionAnswerFinalProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionAnswerFinalProto::cid() const {
  return cid_;
}
inline void FactionAnswerFinalProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 count = 6;
inline bool FactionAnswerFinalProto::has_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionAnswerFinalProto::set_has_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionAnswerFinalProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionAnswerFinalProto::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 FactionAnswerFinalProto::count() const {
  return count_;
}
inline void FactionAnswerFinalProto::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// optional int32 sec = 7;
inline bool FactionAnswerFinalProto::has_sec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionAnswerFinalProto::set_has_sec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionAnswerFinalProto::clear_has_sec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionAnswerFinalProto::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
inline ::google::protobuf::int32 FactionAnswerFinalProto::sec() const {
  return sec_;
}
inline void FactionAnswerFinalProto::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
}

// optional bytes player_name = 8;
inline bool FactionAnswerFinalProto::has_player_name() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactionAnswerFinalProto::set_has_player_name() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactionAnswerFinalProto::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactionAnswerFinalProto::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& FactionAnswerFinalProto::player_name() const {
  return *player_name_;
}
inline void FactionAnswerFinalProto::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void FactionAnswerFinalProto::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void FactionAnswerFinalProto::set_player_name(const void* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionAnswerFinalProto::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* FactionAnswerFinalProto::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionAnswerFinalProto::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 faction_count = 9;
inline bool FactionAnswerFinalProto::has_faction_count() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FactionAnswerFinalProto::set_has_faction_count() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FactionAnswerFinalProto::clear_has_faction_count() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FactionAnswerFinalProto::clear_faction_count() {
  faction_count_ = 0u;
  clear_has_faction_count();
}
inline ::google::protobuf::uint32 FactionAnswerFinalProto::faction_count() const {
  return faction_count_;
}
inline void FactionAnswerFinalProto::set_faction_count(::google::protobuf::uint32 value) {
  set_has_faction_count();
  faction_count_ = value;
}

// -------------------------------------------------------------------

// FactionBeastRankProto

// optional int32 rank = 1;
inline bool FactionBeastRankProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionBeastRankProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionBeastRankProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionBeastRankProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionBeastRankProto::rank() const {
  return rank_;
}
inline void FactionBeastRankProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 cid = 2;
inline bool FactionBeastRankProto::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionBeastRankProto::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionBeastRankProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionBeastRankProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionBeastRankProto::cid() const {
  return cid_;
}
inline void FactionBeastRankProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 3;
inline bool FactionBeastRankProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionBeastRankProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionBeastRankProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionBeastRankProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionBeastRankProto::name() const {
  return *name_;
}
inline void FactionBeastRankProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionBeastRankProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionBeastRankProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionBeastRankProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionBeastRankProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionBeastRankProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 harm = 4;
inline bool FactionBeastRankProto::has_harm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionBeastRankProto::set_has_harm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionBeastRankProto::clear_has_harm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionBeastRankProto::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 FactionBeastRankProto::harm() const {
  return harm_;
}
inline void FactionBeastRankProto::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// -------------------------------------------------------------------

// FactionBeastRankListProto

// repeated .proto_ff.FactionBeastRankProto lst = 1;
inline int FactionBeastRankListProto::lst_size() const {
  return lst_.size();
}
inline void FactionBeastRankListProto::clear_lst() {
  lst_.Clear();
}
inline const ::proto_ff::FactionBeastRankProto& FactionBeastRankListProto::lst(int index) const {
  return lst_.Get(index);
}
inline ::proto_ff::FactionBeastRankProto* FactionBeastRankListProto::mutable_lst(int index) {
  return lst_.Mutable(index);
}
inline ::proto_ff::FactionBeastRankProto* FactionBeastRankListProto::add_lst() {
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastRankProto >&
FactionBeastRankListProto::lst() const {
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionBeastRankProto >*
FactionBeastRankListProto::mutable_lst() {
  return &lst_;
}

// -------------------------------------------------------------------

// Faction_SyncLoginRsp

// optional .proto_ff.FactionProto info = 1;
inline bool Faction_SyncLoginRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SyncLoginRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SyncLoginRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SyncLoginRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionProto& Faction_SyncLoginRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionProto* Faction_SyncLoginRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionProto;
  return info_;
}
inline ::proto_ff::FactionProto* Faction_SyncLoginRsp::release_info() {
  clear_has_info();
  ::proto_ff::FactionProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_SyncLoginRsp::set_allocated_info(::proto_ff::FactionProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional int32 duty = 2;
inline bool Faction_SyncLoginRsp::has_duty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SyncLoginRsp::set_has_duty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SyncLoginRsp::clear_has_duty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SyncLoginRsp::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 Faction_SyncLoginRsp::duty() const {
  return duty_;
}
inline void Faction_SyncLoginRsp::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// -------------------------------------------------------------------

// Faction_SyncInfoRsp

// optional uint32 faction_id = 1;
inline bool Faction_SyncInfoRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SyncInfoRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SyncInfoRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SyncInfoRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_SyncInfoRsp::faction_id() const {
  return faction_id_;
}
inline void Faction_SyncInfoRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional bytes name = 2;
inline bool Faction_SyncInfoRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SyncInfoRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SyncInfoRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SyncInfoRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_SyncInfoRsp::name() const {
  return *name_;
}
inline void Faction_SyncInfoRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_SyncInfoRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_SyncInfoRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_SyncInfoRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_SyncInfoRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_SyncInfoRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 duty = 3;
inline bool Faction_SyncInfoRsp::has_duty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_SyncInfoRsp::set_has_duty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_SyncInfoRsp::clear_has_duty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_SyncInfoRsp::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 Faction_SyncInfoRsp::duty() const {
  return duty_;
}
inline void Faction_SyncInfoRsp::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// optional int32 level = 4;
inline bool Faction_SyncInfoRsp::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_SyncInfoRsp::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_SyncInfoRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_SyncInfoRsp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Faction_SyncInfoRsp::level() const {
  return level_;
}
inline void Faction_SyncInfoRsp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// Faction_InfoReq

// -------------------------------------------------------------------

// Faction_InfoRsp

// required int32 ret = 1;
inline bool Faction_InfoRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_InfoRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_InfoRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_InfoRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_InfoRsp::ret() const {
  return ret_;
}
inline void Faction_InfoRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionProto info = 2;
inline bool Faction_InfoRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_InfoRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_InfoRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_InfoRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionProto& Faction_InfoRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionProto* Faction_InfoRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionProto;
  return info_;
}
inline ::proto_ff::FactionProto* Faction_InfoRsp::release_info() {
  clear_has_info();
  ::proto_ff::FactionProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_InfoRsp::set_allocated_info(::proto_ff::FactionProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Faction_InfoListReq

// -------------------------------------------------------------------

// Faction_InfoListRsp

// repeated .proto_ff.FactionListProto info_lst = 1;
inline int Faction_InfoListRsp::info_lst_size() const {
  return info_lst_.size();
}
inline void Faction_InfoListRsp::clear_info_lst() {
  info_lst_.Clear();
}
inline const ::proto_ff::FactionListProto& Faction_InfoListRsp::info_lst(int index) const {
  return info_lst_.Get(index);
}
inline ::proto_ff::FactionListProto* Faction_InfoListRsp::mutable_info_lst(int index) {
  return info_lst_.Mutable(index);
}
inline ::proto_ff::FactionListProto* Faction_InfoListRsp::add_info_lst() {
  return info_lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto >&
Faction_InfoListRsp::info_lst() const {
  return info_lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionListProto >*
Faction_InfoListRsp::mutable_info_lst() {
  return &info_lst_;
}

// -------------------------------------------------------------------

// Faction_SimpleReq

// optional uint32 faction_id = 1;
inline bool Faction_SimpleReq::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SimpleReq::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SimpleReq::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SimpleReq::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_SimpleReq::faction_id() const {
  return faction_id_;
}
inline void Faction_SimpleReq::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// Faction_SimpleRsp

// required int32 ret = 1;
inline bool Faction_SimpleRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SimpleRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SimpleRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SimpleRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_SimpleRsp::ret() const {
  return ret_;
}
inline void Faction_SimpleRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionSimpleProto simple = 2;
inline bool Faction_SimpleRsp::has_simple() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SimpleRsp::set_has_simple() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SimpleRsp::clear_has_simple() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SimpleRsp::clear_simple() {
  if (simple_ != NULL) simple_->::proto_ff::FactionSimpleProto::Clear();
  clear_has_simple();
}
inline const ::proto_ff::FactionSimpleProto& Faction_SimpleRsp::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::proto_ff::FactionSimpleProto* Faction_SimpleRsp::mutable_simple() {
  set_has_simple();
  if (simple_ == NULL) simple_ = new ::proto_ff::FactionSimpleProto;
  return simple_;
}
inline ::proto_ff::FactionSimpleProto* Faction_SimpleRsp::release_simple() {
  clear_has_simple();
  ::proto_ff::FactionSimpleProto* temp = simple_;
  simple_ = NULL;
  return temp;
}
inline void Faction_SimpleRsp::set_allocated_simple(::proto_ff::FactionSimpleProto* simple) {
  delete simple_;
  simple_ = simple;
  if (simple) {
    set_has_simple();
  } else {
    clear_has_simple();
  }
}

// -------------------------------------------------------------------

// Faction_MemListReq

// -------------------------------------------------------------------

// Faction_MemListRsp

// required int32 ret = 1;
inline bool Faction_MemListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_MemListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_MemListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_MemListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_MemListRsp::ret() const {
  return ret_;
}
inline void Faction_MemListRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionMemListProto mem_lst = 2;
inline bool Faction_MemListRsp::has_mem_lst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_MemListRsp::set_has_mem_lst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_MemListRsp::clear_has_mem_lst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_MemListRsp::clear_mem_lst() {
  if (mem_lst_ != NULL) mem_lst_->::proto_ff::FactionMemListProto::Clear();
  clear_has_mem_lst();
}
inline const ::proto_ff::FactionMemListProto& Faction_MemListRsp::mem_lst() const {
  return mem_lst_ != NULL ? *mem_lst_ : *default_instance_->mem_lst_;
}
inline ::proto_ff::FactionMemListProto* Faction_MemListRsp::mutable_mem_lst() {
  set_has_mem_lst();
  if (mem_lst_ == NULL) mem_lst_ = new ::proto_ff::FactionMemListProto;
  return mem_lst_;
}
inline ::proto_ff::FactionMemListProto* Faction_MemListRsp::release_mem_lst() {
  clear_has_mem_lst();
  ::proto_ff::FactionMemListProto* temp = mem_lst_;
  mem_lst_ = NULL;
  return temp;
}
inline void Faction_MemListRsp::set_allocated_mem_lst(::proto_ff::FactionMemListProto* mem_lst) {
  delete mem_lst_;
  mem_lst_ = mem_lst;
  if (mem_lst) {
    set_has_mem_lst();
  } else {
    clear_has_mem_lst();
  }
}

// -------------------------------------------------------------------

// Faction_CreateReq

// optional bytes name = 1;
inline bool Faction_CreateReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_CreateReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_CreateReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_CreateReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_CreateReq::name() const {
  return *name_;
}
inline void Faction_CreateReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_CreateReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_CreateReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_CreateReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_CreateReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_CreateReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes notice = 2;
inline bool Faction_CreateReq::has_notice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_CreateReq::set_has_notice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_CreateReq::clear_has_notice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_CreateReq::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& Faction_CreateReq::notice() const {
  return *notice_;
}
inline void Faction_CreateReq::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_CreateReq::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_CreateReq::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_CreateReq::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* Faction_CreateReq::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_CreateReq::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_CreateRsp

// required int32 ret = 1;
inline bool Faction_CreateRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_CreateRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_CreateRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_CreateRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_CreateRsp::ret() const {
  return ret_;
}
inline void Faction_CreateRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionProto info = 2;
inline bool Faction_CreateRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_CreateRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_CreateRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_CreateRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionProto& Faction_CreateRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionProto* Faction_CreateRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionProto;
  return info_;
}
inline ::proto_ff::FactionProto* Faction_CreateRsp::release_info() {
  clear_has_info();
  ::proto_ff::FactionProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_CreateRsp::set_allocated_info(::proto_ff::FactionProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Faction_ApplyListReq

// -------------------------------------------------------------------

// Faction_ApplyListRsp

// required int32 ret = 1;
inline bool Faction_ApplyListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ApplyListRsp::ret() const {
  return ret_;
}
inline void Faction_ApplyListRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionApplyListProto info = 2;
inline bool Faction_ApplyListRsp::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ApplyListRsp::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ApplyListRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ApplyListRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionApplyListProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionApplyListProto& Faction_ApplyListRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionApplyListProto* Faction_ApplyListRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionApplyListProto;
  return info_;
}
inline ::proto_ff::FactionApplyListProto* Faction_ApplyListRsp::release_info() {
  clear_has_info();
  ::proto_ff::FactionApplyListProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_ApplyListRsp::set_allocated_info(::proto_ff::FactionApplyListProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Faction_ApplyJoinReq

// optional uint32 faction_id = 1;
inline bool Faction_ApplyJoinReq::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyJoinReq::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyJoinReq::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyJoinReq::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_ApplyJoinReq::faction_id() const {
  return faction_id_;
}
inline void Faction_ApplyJoinReq::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// Faction_ApplyJoinRsp

// required int32 ret = 1;
inline bool Faction_ApplyJoinRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyJoinRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyJoinRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyJoinRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ApplyJoinRsp::ret() const {
  return ret_;
}
inline void Faction_ApplyJoinRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint32 faction_id = 2;
inline bool Faction_ApplyJoinRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ApplyJoinRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ApplyJoinRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ApplyJoinRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_ApplyJoinRsp::faction_id() const {
  return faction_id_;
}
inline void Faction_ApplyJoinRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// Faction_ApplyOperateReq

// optional int32 op = 1;
inline bool Faction_ApplyOperateReq::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyOperateReq::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyOperateReq::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyOperateReq::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Faction_ApplyOperateReq::op() const {
  return op_;
}
inline void Faction_ApplyOperateReq::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// optional uint64 cid = 2;
inline bool Faction_ApplyOperateReq::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ApplyOperateReq::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ApplyOperateReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ApplyOperateReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_ApplyOperateReq::cid() const {
  return cid_;
}
inline void Faction_ApplyOperateReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Faction_ApplyOperateRsp

// required int32 ret = 1;
inline bool Faction_ApplyOperateRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ApplyOperateRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ApplyOperateRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ApplyOperateRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ApplyOperateRsp::ret() const {
  return ret_;
}
inline void Faction_ApplyOperateRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 op = 2;
inline bool Faction_ApplyOperateRsp::has_op() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ApplyOperateRsp::set_has_op() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ApplyOperateRsp::clear_has_op() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ApplyOperateRsp::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Faction_ApplyOperateRsp::op() const {
  return op_;
}
inline void Faction_ApplyOperateRsp::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// optional uint64 cid = 3;
inline bool Faction_ApplyOperateRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_ApplyOperateRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_ApplyOperateRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_ApplyOperateRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_ApplyOperateRsp::cid() const {
  return cid_;
}
inline void Faction_ApplyOperateRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional .proto_ff.FactionMemListProto mem_lst = 4;
inline bool Faction_ApplyOperateRsp::has_mem_lst() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_ApplyOperateRsp::set_has_mem_lst() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_ApplyOperateRsp::clear_has_mem_lst() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_ApplyOperateRsp::clear_mem_lst() {
  if (mem_lst_ != NULL) mem_lst_->::proto_ff::FactionMemListProto::Clear();
  clear_has_mem_lst();
}
inline const ::proto_ff::FactionMemListProto& Faction_ApplyOperateRsp::mem_lst() const {
  return mem_lst_ != NULL ? *mem_lst_ : *default_instance_->mem_lst_;
}
inline ::proto_ff::FactionMemListProto* Faction_ApplyOperateRsp::mutable_mem_lst() {
  set_has_mem_lst();
  if (mem_lst_ == NULL) mem_lst_ = new ::proto_ff::FactionMemListProto;
  return mem_lst_;
}
inline ::proto_ff::FactionMemListProto* Faction_ApplyOperateRsp::release_mem_lst() {
  clear_has_mem_lst();
  ::proto_ff::FactionMemListProto* temp = mem_lst_;
  mem_lst_ = NULL;
  return temp;
}
inline void Faction_ApplyOperateRsp::set_allocated_mem_lst(::proto_ff::FactionMemListProto* mem_lst) {
  delete mem_lst_;
  mem_lst_ = mem_lst;
  if (mem_lst) {
    set_has_mem_lst();
  } else {
    clear_has_mem_lst();
  }
}

// -------------------------------------------------------------------

// Faction_KickReq

// repeated uint64 cid_lst = 1;
inline int Faction_KickReq::cid_lst_size() const {
  return cid_lst_.size();
}
inline void Faction_KickReq::clear_cid_lst() {
  cid_lst_.Clear();
}
inline ::google::protobuf::uint64 Faction_KickReq::cid_lst(int index) const {
  return cid_lst_.Get(index);
}
inline void Faction_KickReq::set_cid_lst(int index, ::google::protobuf::uint64 value) {
  cid_lst_.Set(index, value);
}
inline void Faction_KickReq::add_cid_lst(::google::protobuf::uint64 value) {
  cid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Faction_KickReq::cid_lst() const {
  return cid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Faction_KickReq::mutable_cid_lst() {
  return &cid_lst_;
}

// -------------------------------------------------------------------

// Faction_KickRsp

// required int32 ret = 1;
inline bool Faction_KickRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_KickRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_KickRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_KickRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_KickRsp::ret() const {
  return ret_;
}
inline void Faction_KickRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated uint64 cid_lst = 2;
inline int Faction_KickRsp::cid_lst_size() const {
  return cid_lst_.size();
}
inline void Faction_KickRsp::clear_cid_lst() {
  cid_lst_.Clear();
}
inline ::google::protobuf::uint64 Faction_KickRsp::cid_lst(int index) const {
  return cid_lst_.Get(index);
}
inline void Faction_KickRsp::set_cid_lst(int index, ::google::protobuf::uint64 value) {
  cid_lst_.Set(index, value);
}
inline void Faction_KickRsp::add_cid_lst(::google::protobuf::uint64 value) {
  cid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Faction_KickRsp::cid_lst() const {
  return cid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Faction_KickRsp::mutable_cid_lst() {
  return &cid_lst_;
}

// -------------------------------------------------------------------

// Faction_QuitReq

// -------------------------------------------------------------------

// Faction_QuitRsp

// required int32 ret = 1;
inline bool Faction_QuitRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_QuitRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_QuitRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_QuitRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_QuitRsp::ret() const {
  return ret_;
}
inline void Faction_QuitRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Faction_AppointReq

// optional uint64 cid = 1;
inline bool Faction_AppointReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_AppointReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_AppointReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_AppointReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_AppointReq::cid() const {
  return cid_;
}
inline void Faction_AppointReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 duty = 2;
inline bool Faction_AppointReq::has_duty() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_AppointReq::set_has_duty() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_AppointReq::clear_has_duty() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_AppointReq::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 Faction_AppointReq::duty() const {
  return duty_;
}
inline void Faction_AppointReq::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// -------------------------------------------------------------------

// Faction_AppointRsp

// required int32 ret = 1;
inline bool Faction_AppointRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_AppointRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_AppointRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_AppointRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_AppointRsp::ret() const {
  return ret_;
}
inline void Faction_AppointRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 cid = 2;
inline bool Faction_AppointRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_AppointRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_AppointRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_AppointRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_AppointRsp::cid() const {
  return cid_;
}
inline void Faction_AppointRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int32 duty = 3;
inline bool Faction_AppointRsp::has_duty() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_AppointRsp::set_has_duty() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_AppointRsp::clear_has_duty() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_AppointRsp::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 Faction_AppointRsp::duty() const {
  return duty_;
}
inline void Faction_AppointRsp::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// optional int32 self_duty = 4;
inline bool Faction_AppointRsp::has_self_duty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_AppointRsp::set_has_self_duty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_AppointRsp::clear_has_self_duty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_AppointRsp::clear_self_duty() {
  self_duty_ = 0;
  clear_has_self_duty();
}
inline ::google::protobuf::int32 Faction_AppointRsp::self_duty() const {
  return self_duty_;
}
inline void Faction_AppointRsp::set_self_duty(::google::protobuf::int32 value) {
  set_has_self_duty();
  self_duty_ = value;
}

// -------------------------------------------------------------------

// Faction_ChgNoticeReq

// optional bytes notice = 1;
inline bool Faction_ChgNoticeReq::has_notice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ChgNoticeReq::set_has_notice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ChgNoticeReq::clear_has_notice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ChgNoticeReq::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& Faction_ChgNoticeReq::notice() const {
  return *notice_;
}
inline void Faction_ChgNoticeReq::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_ChgNoticeReq::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_ChgNoticeReq::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_ChgNoticeReq::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* Faction_ChgNoticeReq::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_ChgNoticeReq::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_ChgNoticeRsp

// required int32 ret = 1;
inline bool Faction_ChgNoticeRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ChgNoticeRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ChgNoticeRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ChgNoticeRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ChgNoticeRsp::ret() const {
  return ret_;
}
inline void Faction_ChgNoticeRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional bytes notice = 2;
inline bool Faction_ChgNoticeRsp::has_notice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ChgNoticeRsp::set_has_notice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ChgNoticeRsp::clear_has_notice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ChgNoticeRsp::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& Faction_ChgNoticeRsp::notice() const {
  return *notice_;
}
inline void Faction_ChgNoticeRsp::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_ChgNoticeRsp::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void Faction_ChgNoticeRsp::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_ChgNoticeRsp::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* Faction_ChgNoticeRsp::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_ChgNoticeRsp::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_SetApplyReq

// optional int32 type = 1;
inline bool Faction_SetApplyReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SetApplyReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SetApplyReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SetApplyReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Faction_SetApplyReq::type() const {
  return type_;
}
inline void Faction_SetApplyReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 level = 2;
inline bool Faction_SetApplyReq::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SetApplyReq::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SetApplyReq::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SetApplyReq::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Faction_SetApplyReq::level() const {
  return level_;
}
inline void Faction_SetApplyReq::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 fight = 3;
inline bool Faction_SetApplyReq::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_SetApplyReq::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_SetApplyReq::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_SetApplyReq::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 Faction_SetApplyReq::fight() const {
  return fight_;
}
inline void Faction_SetApplyReq::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// Faction_SetApplyRsp

// required int32 ret = 1;
inline bool Faction_SetApplyRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SetApplyRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SetApplyRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SetApplyRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_SetApplyRsp::ret() const {
  return ret_;
}
inline void Faction_SetApplyRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 2;
inline bool Faction_SetApplyRsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_SetApplyRsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_SetApplyRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_SetApplyRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Faction_SetApplyRsp::type() const {
  return type_;
}
inline void Faction_SetApplyRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 level = 3;
inline bool Faction_SetApplyRsp::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_SetApplyRsp::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_SetApplyRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_SetApplyRsp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Faction_SetApplyRsp::level() const {
  return level_;
}
inline void Faction_SetApplyRsp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint64 fight = 4;
inline bool Faction_SetApplyRsp::has_fight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_SetApplyRsp::set_has_fight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_SetApplyRsp::clear_has_fight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_SetApplyRsp::clear_fight() {
  fight_ = GOOGLE_ULONGLONG(0);
  clear_has_fight();
}
inline ::google::protobuf::uint64 Faction_SetApplyRsp::fight() const {
  return fight_;
}
inline void Faction_SetApplyRsp::set_fight(::google::protobuf::uint64 value) {
  set_has_fight();
  fight_ = value;
}

// -------------------------------------------------------------------

// Faction_OneKeyApplyReq

// -------------------------------------------------------------------

// Faction_OneKeyApplyRsp

// required int32 ret = 1;
inline bool Faction_OneKeyApplyRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_OneKeyApplyRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_OneKeyApplyRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_OneKeyApplyRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_OneKeyApplyRsp::ret() const {
  return ret_;
}
inline void Faction_OneKeyApplyRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated uint32 id_lst = 2;
inline int Faction_OneKeyApplyRsp::id_lst_size() const {
  return id_lst_.size();
}
inline void Faction_OneKeyApplyRsp::clear_id_lst() {
  id_lst_.Clear();
}
inline ::google::protobuf::uint32 Faction_OneKeyApplyRsp::id_lst(int index) const {
  return id_lst_.Get(index);
}
inline void Faction_OneKeyApplyRsp::set_id_lst(int index, ::google::protobuf::uint32 value) {
  id_lst_.Set(index, value);
}
inline void Faction_OneKeyApplyRsp::add_id_lst(::google::protobuf::uint32 value) {
  id_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Faction_OneKeyApplyRsp::id_lst() const {
  return id_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Faction_OneKeyApplyRsp::mutable_id_lst() {
  return &id_lst_;
}

// -------------------------------------------------------------------

// Faction_ChgNameReq

// optional bytes name = 1;
inline bool Faction_ChgNameReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ChgNameReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ChgNameReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ChgNameReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_ChgNameReq::name() const {
  return *name_;
}
inline void Faction_ChgNameReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_ChgNameReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_ChgNameReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_ChgNameReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_ChgNameReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_ChgNameReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_ChgNameRsp

// required int32 ret = 1;
inline bool Faction_ChgNameRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_ChgNameRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_ChgNameRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_ChgNameRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_ChgNameRsp::ret() const {
  return ret_;
}
inline void Faction_ChgNameRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional bytes name = 2;
inline bool Faction_ChgNameRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_ChgNameRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_ChgNameRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_ChgNameRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_ChgNameRsp::name() const {
  return *name_;
}
inline void Faction_ChgNameRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_ChgNameRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_ChgNameRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_ChgNameRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_ChgNameRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_ChgNameRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_NewApplyNotify

// -------------------------------------------------------------------

// Faction_InviteJoinReq

// optional uint64 cid = 2;
inline bool Faction_InviteJoinReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_InviteJoinReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_InviteJoinReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_InviteJoinReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_InviteJoinReq::cid() const {
  return cid_;
}
inline void Faction_InviteJoinReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Faction_InviteJoinRsp

// required int32 ret = 1;
inline bool Faction_InviteJoinRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_InviteJoinRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_InviteJoinRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_InviteJoinRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_InviteJoinRsp::ret() const {
  return ret_;
}
inline void Faction_InviteJoinRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Faction_IviteJoinNotify

// required uint64 cid = 1;
inline bool Faction_IviteJoinNotify::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_IviteJoinNotify::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_IviteJoinNotify::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_IviteJoinNotify::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_IviteJoinNotify::cid() const {
  return cid_;
}
inline void Faction_IviteJoinNotify::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 2;
inline bool Faction_IviteJoinNotify::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_IviteJoinNotify::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_IviteJoinNotify::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_IviteJoinNotify::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_IviteJoinNotify::name() const {
  return *name_;
}
inline void Faction_IviteJoinNotify::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_IviteJoinNotify::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_IviteJoinNotify::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_IviteJoinNotify::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_IviteJoinNotify::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_IviteJoinNotify::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 faction_id = 3;
inline bool Faction_IviteJoinNotify::has_faction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_IviteJoinNotify::set_has_faction_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_IviteJoinNotify::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_IviteJoinNotify::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 Faction_IviteJoinNotify::faction_id() const {
  return faction_id_;
}
inline void Faction_IviteJoinNotify::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// required bytes faction_name = 4;
inline bool Faction_IviteJoinNotify::has_faction_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_IviteJoinNotify::set_has_faction_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_IviteJoinNotify::clear_has_faction_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_IviteJoinNotify::clear_faction_name() {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    faction_name_->clear();
  }
  clear_has_faction_name();
}
inline const ::std::string& Faction_IviteJoinNotify::faction_name() const {
  return *faction_name_;
}
inline void Faction_IviteJoinNotify::set_faction_name(const ::std::string& value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void Faction_IviteJoinNotify::set_faction_name(const char* value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void Faction_IviteJoinNotify::set_faction_name(const void* value, size_t size) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_IviteJoinNotify::mutable_faction_name() {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  return faction_name_;
}
inline ::std::string* Faction_IviteJoinNotify::release_faction_name() {
  clear_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faction_name_;
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_IviteJoinNotify::set_allocated_faction_name(::std::string* faction_name) {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (faction_name) {
    set_has_faction_name();
    faction_name_ = faction_name;
  } else {
    clear_has_faction_name();
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Faction_RecordListReq

// -------------------------------------------------------------------

// Faction_RecordListRsp

// required int32 ret = 1;
inline bool Faction_RecordListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_RecordListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_RecordListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_RecordListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_RecordListRsp::ret() const {
  return ret_;
}
inline void Faction_RecordListRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionRecordListProto lst = 2;
inline bool Faction_RecordListRsp::has_lst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_RecordListRsp::set_has_lst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_RecordListRsp::clear_has_lst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_RecordListRsp::clear_lst() {
  if (lst_ != NULL) lst_->::proto_ff::FactionRecordListProto::Clear();
  clear_has_lst();
}
inline const ::proto_ff::FactionRecordListProto& Faction_RecordListRsp::lst() const {
  return lst_ != NULL ? *lst_ : *default_instance_->lst_;
}
inline ::proto_ff::FactionRecordListProto* Faction_RecordListRsp::mutable_lst() {
  set_has_lst();
  if (lst_ == NULL) lst_ = new ::proto_ff::FactionRecordListProto;
  return lst_;
}
inline ::proto_ff::FactionRecordListProto* Faction_RecordListRsp::release_lst() {
  clear_has_lst();
  ::proto_ff::FactionRecordListProto* temp = lst_;
  lst_ = NULL;
  return temp;
}
inline void Faction_RecordListRsp::set_allocated_lst(::proto_ff::FactionRecordListProto* lst) {
  delete lst_;
  lst_ = lst;
  if (lst) {
    set_has_lst();
  } else {
    clear_has_lst();
  }
}

// -------------------------------------------------------------------

// Faction_DonateReq

// optional int32 id = 1;
inline bool Faction_DonateReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_DonateReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_DonateReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_DonateReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Faction_DonateReq::id() const {
  return id_;
}
inline void Faction_DonateReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Faction_DonateRsp

// required int32 ret = 1;
inline bool Faction_DonateRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_DonateRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_DonateRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_DonateRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_DonateRsp::ret() const {
  return ret_;
}
inline void Faction_DonateRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Faction_DonateNotify

// required int32 donate = 1;
inline bool Faction_DonateNotify::has_donate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_DonateNotify::set_has_donate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_DonateNotify::clear_has_donate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_DonateNotify::clear_donate() {
  donate_ = 0;
  clear_has_donate();
}
inline ::google::protobuf::int32 Faction_DonateNotify::donate() const {
  return donate_;
}
inline void Faction_DonateNotify::set_donate(::google::protobuf::int32 value) {
  set_has_donate();
  donate_ = value;
}

// -------------------------------------------------------------------

// Faction_SalaryReq

// -------------------------------------------------------------------

// Faction_SalaryRsp

// optional .proto_ff.FactionSalaryListProto salary = 1;
inline bool Faction_SalaryRsp::has_salary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SalaryRsp::set_has_salary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SalaryRsp::clear_has_salary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SalaryRsp::clear_salary() {
  if (salary_ != NULL) salary_->::proto_ff::FactionSalaryListProto::Clear();
  clear_has_salary();
}
inline const ::proto_ff::FactionSalaryListProto& Faction_SalaryRsp::salary() const {
  return salary_ != NULL ? *salary_ : *default_instance_->salary_;
}
inline ::proto_ff::FactionSalaryListProto* Faction_SalaryRsp::mutable_salary() {
  set_has_salary();
  if (salary_ == NULL) salary_ = new ::proto_ff::FactionSalaryListProto;
  return salary_;
}
inline ::proto_ff::FactionSalaryListProto* Faction_SalaryRsp::release_salary() {
  clear_has_salary();
  ::proto_ff::FactionSalaryListProto* temp = salary_;
  salary_ = NULL;
  return temp;
}
inline void Faction_SalaryRsp::set_allocated_salary(::proto_ff::FactionSalaryListProto* salary) {
  delete salary_;
  salary_ = salary;
  if (salary) {
    set_has_salary();
  } else {
    clear_has_salary();
  }
}

// -------------------------------------------------------------------

// Faction_SalaryNotify

// optional .proto_ff.FactionSalaryListProto salary = 1;
inline bool Faction_SalaryNotify::has_salary() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SalaryNotify::set_has_salary() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SalaryNotify::clear_has_salary() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SalaryNotify::clear_salary() {
  if (salary_ != NULL) salary_->::proto_ff::FactionSalaryListProto::Clear();
  clear_has_salary();
}
inline const ::proto_ff::FactionSalaryListProto& Faction_SalaryNotify::salary() const {
  return salary_ != NULL ? *salary_ : *default_instance_->salary_;
}
inline ::proto_ff::FactionSalaryListProto* Faction_SalaryNotify::mutable_salary() {
  set_has_salary();
  if (salary_ == NULL) salary_ = new ::proto_ff::FactionSalaryListProto;
  return salary_;
}
inline ::proto_ff::FactionSalaryListProto* Faction_SalaryNotify::release_salary() {
  clear_has_salary();
  ::proto_ff::FactionSalaryListProto* temp = salary_;
  salary_ = NULL;
  return temp;
}
inline void Faction_SalaryNotify::set_allocated_salary(::proto_ff::FactionSalaryListProto* salary) {
  delete salary_;
  salary_ = salary;
  if (salary) {
    set_has_salary();
  } else {
    clear_has_salary();
  }
}

// -------------------------------------------------------------------

// Faction_SalaryFetchReq

// optional int32 id = 1;
inline bool Faction_SalaryFetchReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SalaryFetchReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SalaryFetchReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SalaryFetchReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Faction_SalaryFetchReq::id() const {
  return id_;
}
inline void Faction_SalaryFetchReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Faction_SalaryFetchRsp

// required int32 ret = 1;
inline bool Faction_SalaryFetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SalaryFetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SalaryFetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SalaryFetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_SalaryFetchRsp::ret() const {
  return ret_;
}
inline void Faction_SalaryFetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Faction_DinnerUpdateRsp

// optional .proto_ff.FactionDinnerProto info = 1;
inline bool Faction_DinnerUpdateRsp::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_DinnerUpdateRsp::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_DinnerUpdateRsp::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_DinnerUpdateRsp::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionDinnerProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionDinnerProto& Faction_DinnerUpdateRsp::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionDinnerProto* Faction_DinnerUpdateRsp::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionDinnerProto;
  return info_;
}
inline ::proto_ff::FactionDinnerProto* Faction_DinnerUpdateRsp::release_info() {
  clear_has_info();
  ::proto_ff::FactionDinnerProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_DinnerUpdateRsp::set_allocated_info(::proto_ff::FactionDinnerProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Faction_TransInviteListReq

// -------------------------------------------------------------------

// Faction_TransInviteListRsp

// repeated .proto_ff.FactionInviteProto invite = 1;
inline int Faction_TransInviteListRsp::invite_size() const {
  return invite_.size();
}
inline void Faction_TransInviteListRsp::clear_invite() {
  invite_.Clear();
}
inline const ::proto_ff::FactionInviteProto& Faction_TransInviteListRsp::invite(int index) const {
  return invite_.Get(index);
}
inline ::proto_ff::FactionInviteProto* Faction_TransInviteListRsp::mutable_invite(int index) {
  return invite_.Mutable(index);
}
inline ::proto_ff::FactionInviteProto* Faction_TransInviteListRsp::add_invite() {
  return invite_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto >&
Faction_TransInviteListRsp::invite() const {
  return invite_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto >*
Faction_TransInviteListRsp::mutable_invite() {
  return &invite_;
}

// -------------------------------------------------------------------

// Faction_TransAcceptListRsp

// repeated .proto_ff.FactionInviteProto accept = 1;
inline int Faction_TransAcceptListRsp::accept_size() const {
  return accept_.size();
}
inline void Faction_TransAcceptListRsp::clear_accept() {
  accept_.Clear();
}
inline const ::proto_ff::FactionInviteProto& Faction_TransAcceptListRsp::accept(int index) const {
  return accept_.Get(index);
}
inline ::proto_ff::FactionInviteProto* Faction_TransAcceptListRsp::mutable_accept(int index) {
  return accept_.Mutable(index);
}
inline ::proto_ff::FactionInviteProto* Faction_TransAcceptListRsp::add_accept() {
  return accept_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto >&
Faction_TransAcceptListRsp::accept() const {
  return accept_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionInviteProto >*
Faction_TransAcceptListRsp::mutable_accept() {
  return &accept_;
}

// -------------------------------------------------------------------

// Faction_TransInviteReq

// optional uint64 invite_cid = 1;
inline bool Faction_TransInviteReq::has_invite_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_TransInviteReq::set_has_invite_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_TransInviteReq::clear_has_invite_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_TransInviteReq::clear_invite_cid() {
  invite_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_cid();
}
inline ::google::protobuf::uint64 Faction_TransInviteReq::invite_cid() const {
  return invite_cid_;
}
inline void Faction_TransInviteReq::set_invite_cid(::google::protobuf::uint64 value) {
  set_has_invite_cid();
  invite_cid_ = value;
}

// -------------------------------------------------------------------

// Faction_TransInviteRsp

// required int32 ret = 1;
inline bool Faction_TransInviteRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_TransInviteRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_TransInviteRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_TransInviteRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_TransInviteRsp::ret() const {
  return ret_;
}
inline void Faction_TransInviteRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional uint64 invite_cid = 2;
inline bool Faction_TransInviteRsp::has_invite_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_TransInviteRsp::set_has_invite_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_TransInviteRsp::clear_has_invite_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_TransInviteRsp::clear_invite_cid() {
  invite_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_invite_cid();
}
inline ::google::protobuf::uint64 Faction_TransInviteRsp::invite_cid() const {
  return invite_cid_;
}
inline void Faction_TransInviteRsp::set_invite_cid(::google::protobuf::uint64 value) {
  set_has_invite_cid();
  invite_cid_ = value;
}

// -------------------------------------------------------------------

// Faction_TransInviteNotify

// optional .proto_ff.FactionInviteProto info = 1;
inline bool Faction_TransInviteNotify::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_TransInviteNotify::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_TransInviteNotify::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_TransInviteNotify::clear_info() {
  if (info_ != NULL) info_->::proto_ff::FactionInviteProto::Clear();
  clear_has_info();
}
inline const ::proto_ff::FactionInviteProto& Faction_TransInviteNotify::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::FactionInviteProto* Faction_TransInviteNotify::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::FactionInviteProto;
  return info_;
}
inline ::proto_ff::FactionInviteProto* Faction_TransInviteNotify::release_info() {
  clear_has_info();
  ::proto_ff::FactionInviteProto* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Faction_TransInviteNotify::set_allocated_info(::proto_ff::FactionInviteProto* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// Faction_TransDelAcceptNotify

// repeated uint64 del_cid = 1;
inline int Faction_TransDelAcceptNotify::del_cid_size() const {
  return del_cid_.size();
}
inline void Faction_TransDelAcceptNotify::clear_del_cid() {
  del_cid_.Clear();
}
inline ::google::protobuf::uint64 Faction_TransDelAcceptNotify::del_cid(int index) const {
  return del_cid_.Get(index);
}
inline void Faction_TransDelAcceptNotify::set_del_cid(int index, ::google::protobuf::uint64 value) {
  del_cid_.Set(index, value);
}
inline void Faction_TransDelAcceptNotify::add_del_cid(::google::protobuf::uint64 value) {
  del_cid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
Faction_TransDelAcceptNotify::del_cid() const {
  return del_cid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
Faction_TransDelAcceptNotify::mutable_del_cid() {
  return &del_cid_;
}

// -------------------------------------------------------------------

// Faction_TransAgreeReq

// optional uint64 cid = 1;
inline bool Faction_TransAgreeReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_TransAgreeReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_TransAgreeReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_TransAgreeReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_TransAgreeReq::cid() const {
  return cid_;
}
inline void Faction_TransAgreeReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Faction_TransAgreeRsp

// required int32 ret = 1;
inline bool Faction_TransAgreeRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_TransAgreeRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_TransAgreeRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_TransAgreeRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_TransAgreeRsp::ret() const {
  return ret_;
}
inline void Faction_TransAgreeRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Faction_SkillInfoReq

// -------------------------------------------------------------------

// Faction_SkillInfoRsp

// optional .proto_ff.FactionSkillListProto skill = 1;
inline bool Faction_SkillInfoRsp::has_skill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SkillInfoRsp::set_has_skill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SkillInfoRsp::clear_has_skill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SkillInfoRsp::clear_skill() {
  if (skill_ != NULL) skill_->::proto_ff::FactionSkillListProto::Clear();
  clear_has_skill();
}
inline const ::proto_ff::FactionSkillListProto& Faction_SkillInfoRsp::skill() const {
  return skill_ != NULL ? *skill_ : *default_instance_->skill_;
}
inline ::proto_ff::FactionSkillListProto* Faction_SkillInfoRsp::mutable_skill() {
  set_has_skill();
  if (skill_ == NULL) skill_ = new ::proto_ff::FactionSkillListProto;
  return skill_;
}
inline ::proto_ff::FactionSkillListProto* Faction_SkillInfoRsp::release_skill() {
  clear_has_skill();
  ::proto_ff::FactionSkillListProto* temp = skill_;
  skill_ = NULL;
  return temp;
}
inline void Faction_SkillInfoRsp::set_allocated_skill(::proto_ff::FactionSkillListProto* skill) {
  delete skill_;
  skill_ = skill;
  if (skill) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
}

// -------------------------------------------------------------------

// Faction_SkillUpdateRsp

// optional .proto_ff.FactionSkillListProto skill = 1;
inline bool Faction_SkillUpdateRsp::has_skill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SkillUpdateRsp::set_has_skill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SkillUpdateRsp::clear_has_skill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SkillUpdateRsp::clear_skill() {
  if (skill_ != NULL) skill_->::proto_ff::FactionSkillListProto::Clear();
  clear_has_skill();
}
inline const ::proto_ff::FactionSkillListProto& Faction_SkillUpdateRsp::skill() const {
  return skill_ != NULL ? *skill_ : *default_instance_->skill_;
}
inline ::proto_ff::FactionSkillListProto* Faction_SkillUpdateRsp::mutable_skill() {
  set_has_skill();
  if (skill_ == NULL) skill_ = new ::proto_ff::FactionSkillListProto;
  return skill_;
}
inline ::proto_ff::FactionSkillListProto* Faction_SkillUpdateRsp::release_skill() {
  clear_has_skill();
  ::proto_ff::FactionSkillListProto* temp = skill_;
  skill_ = NULL;
  return temp;
}
inline void Faction_SkillUpdateRsp::set_allocated_skill(::proto_ff::FactionSkillListProto* skill) {
  delete skill_;
  skill_ = skill;
  if (skill) {
    set_has_skill();
  } else {
    clear_has_skill();
  }
}

// -------------------------------------------------------------------

// Faction_SkillUpgradeReq

// optional int32 id = 1;
inline bool Faction_SkillUpgradeReq::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SkillUpgradeReq::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SkillUpgradeReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SkillUpgradeReq::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Faction_SkillUpgradeReq::id() const {
  return id_;
}
inline void Faction_SkillUpgradeReq::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// Faction_SkillUpgradeRsp

// required int32 ret = 1;
inline bool Faction_SkillUpgradeRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_SkillUpgradeRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_SkillUpgradeRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_SkillUpgradeRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_SkillUpgradeRsp::ret() const {
  return ret_;
}
inline void Faction_SkillUpgradeRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Faction_AnswerRankListReq

// -------------------------------------------------------------------

// Faction_AnswerRankListRsp

// optional .proto_ff.FactionAnswerRankListProto rank = 1;
inline bool Faction_AnswerRankListRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_AnswerRankListRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_AnswerRankListRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_AnswerRankListRsp::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::FactionAnswerRankListProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::FactionAnswerRankListProto& Faction_AnswerRankListRsp::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::FactionAnswerRankListProto* Faction_AnswerRankListRsp::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::FactionAnswerRankListProto;
  return rank_;
}
inline ::proto_ff::FactionAnswerRankListProto* Faction_AnswerRankListRsp::release_rank() {
  clear_has_rank();
  ::proto_ff::FactionAnswerRankListProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void Faction_AnswerRankListRsp::set_allocated_rank(::proto_ff::FactionAnswerRankListProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// optional uint32 count = 2;
inline bool Faction_AnswerRankListRsp::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_AnswerRankListRsp::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_AnswerRankListRsp::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_AnswerRankListRsp::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Faction_AnswerRankListRsp::count() const {
  return count_;
}
inline void Faction_AnswerRankListRsp::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Faction_AnswerCurRankRsp

// optional .proto_ff.FactionAnswerRankListProto rank = 1;
inline bool Faction_AnswerCurRankRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_AnswerCurRankRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_AnswerCurRankRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_AnswerCurRankRsp::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::FactionAnswerRankListProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::FactionAnswerRankListProto& Faction_AnswerCurRankRsp::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::FactionAnswerRankListProto* Faction_AnswerCurRankRsp::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::FactionAnswerRankListProto;
  return rank_;
}
inline ::proto_ff::FactionAnswerRankListProto* Faction_AnswerCurRankRsp::release_rank() {
  clear_has_rank();
  ::proto_ff::FactionAnswerRankListProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void Faction_AnswerCurRankRsp::set_allocated_rank(::proto_ff::FactionAnswerRankListProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// -------------------------------------------------------------------

// Faction_AnswerStageRsp

// required int32 stage = 1;
inline bool Faction_AnswerStageRsp::has_stage() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_AnswerStageRsp::set_has_stage() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_AnswerStageRsp::clear_has_stage() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_AnswerStageRsp::clear_stage() {
  stage_ = 0;
  clear_has_stage();
}
inline ::google::protobuf::int32 Faction_AnswerStageRsp::stage() const {
  return stage_;
}
inline void Faction_AnswerStageRsp::set_stage(::google::protobuf::int32 value) {
  set_has_stage();
  stage_ = value;
}

// required int32 sec = 2;
inline bool Faction_AnswerStageRsp::has_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_AnswerStageRsp::set_has_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_AnswerStageRsp::clear_has_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_AnswerStageRsp::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
inline ::google::protobuf::int32 Faction_AnswerStageRsp::sec() const {
  return sec_;
}
inline void Faction_AnswerStageRsp::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
}

// optional int32 num = 3;
inline bool Faction_AnswerStageRsp::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_AnswerStageRsp::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_AnswerStageRsp::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_AnswerStageRsp::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 Faction_AnswerStageRsp::num() const {
  return num_;
}
inline void Faction_AnswerStageRsp::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 id = 4;
inline bool Faction_AnswerStageRsp::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_AnswerStageRsp::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_AnswerStageRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_AnswerStageRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Faction_AnswerStageRsp::id() const {
  return id_;
}
inline void Faction_AnswerStageRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 5;
inline bool Faction_AnswerStageRsp::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Faction_AnswerStageRsp::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Faction_AnswerStageRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Faction_AnswerStageRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_AnswerStageRsp::name() const {
  return *name_;
}
inline void Faction_AnswerStageRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_AnswerStageRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_AnswerStageRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_AnswerStageRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_AnswerStageRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_AnswerStageRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 cid = 6;
inline bool Faction_AnswerStageRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Faction_AnswerStageRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Faction_AnswerStageRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Faction_AnswerStageRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_AnswerStageRsp::cid() const {
  return cid_;
}
inline void Faction_AnswerStageRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// Faction_AnswerResultRsp

// optional int32 id = 1;
inline bool Faction_AnswerResultRsp::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_AnswerResultRsp::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_AnswerResultRsp::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_AnswerResultRsp::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Faction_AnswerResultRsp::id() const {
  return id_;
}
inline void Faction_AnswerResultRsp::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 cid = 2;
inline bool Faction_AnswerResultRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_AnswerResultRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_AnswerResultRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_AnswerResultRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Faction_AnswerResultRsp::cid() const {
  return cid_;
}
inline void Faction_AnswerResultRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 3;
inline bool Faction_AnswerResultRsp::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_AnswerResultRsp::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_AnswerResultRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_AnswerResultRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Faction_AnswerResultRsp::name() const {
  return *name_;
}
inline void Faction_AnswerResultRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_AnswerResultRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Faction_AnswerResultRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Faction_AnswerResultRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Faction_AnswerResultRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Faction_AnswerResultRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 count = 4;
inline bool Faction_AnswerResultRsp::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_AnswerResultRsp::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_AnswerResultRsp::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_AnswerResultRsp::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 Faction_AnswerResultRsp::count() const {
  return count_;
}
inline void Faction_AnswerResultRsp::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// Faction_AnswerFinalRsp

// repeated .proto_ff.FactionAnswerFinalProto final = 1;
inline int Faction_AnswerFinalRsp::final_size() const {
  return final_.size();
}
inline void Faction_AnswerFinalRsp::clear_final() {
  final_.Clear();
}
inline const ::proto_ff::FactionAnswerFinalProto& Faction_AnswerFinalRsp::final(int index) const {
  return final_.Get(index);
}
inline ::proto_ff::FactionAnswerFinalProto* Faction_AnswerFinalRsp::mutable_final(int index) {
  return final_.Mutable(index);
}
inline ::proto_ff::FactionAnswerFinalProto* Faction_AnswerFinalRsp::add_final() {
  return final_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto >&
Faction_AnswerFinalRsp::final() const {
  return final_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto >*
Faction_AnswerFinalRsp::mutable_final() {
  return &final_;
}

// -------------------------------------------------------------------

// Faction_BeastInfoReq

// -------------------------------------------------------------------

// Faction_BeastInfoRsp

// optional .proto_ff.FactionBeastRankListProto rank = 1;
inline bool Faction_BeastInfoRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_BeastInfoRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_BeastInfoRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_BeastInfoRsp::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::FactionBeastRankListProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::FactionBeastRankListProto& Faction_BeastInfoRsp::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::FactionBeastRankListProto* Faction_BeastInfoRsp::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::FactionBeastRankListProto;
  return rank_;
}
inline ::proto_ff::FactionBeastRankListProto* Faction_BeastInfoRsp::release_rank() {
  clear_has_rank();
  ::proto_ff::FactionBeastRankListProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void Faction_BeastInfoRsp::set_allocated_rank(::proto_ff::FactionBeastRankListProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// optional uint32 myrank = 2;
inline bool Faction_BeastInfoRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_BeastInfoRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_BeastInfoRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_BeastInfoRsp::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 Faction_BeastInfoRsp::myrank() const {
  return myrank_;
}
inline void Faction_BeastInfoRsp::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// optional int64 myharm = 3;
inline bool Faction_BeastInfoRsp::has_myharm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_BeastInfoRsp::set_has_myharm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_BeastInfoRsp::clear_has_myharm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_BeastInfoRsp::clear_myharm() {
  myharm_ = GOOGLE_LONGLONG(0);
  clear_has_myharm();
}
inline ::google::protobuf::int64 Faction_BeastInfoRsp::myharm() const {
  return myharm_;
}
inline void Faction_BeastInfoRsp::set_myharm(::google::protobuf::int64 value) {
  set_has_myharm();
  myharm_ = value;
}

// optional int32 star = 4;
inline bool Faction_BeastInfoRsp::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_BeastInfoRsp::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_BeastInfoRsp::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_BeastInfoRsp::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 Faction_BeastInfoRsp::star() const {
  return star_;
}
inline void Faction_BeastInfoRsp::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int32 is_open = 5;
inline bool Faction_BeastInfoRsp::has_is_open() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Faction_BeastInfoRsp::set_has_is_open() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Faction_BeastInfoRsp::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Faction_BeastInfoRsp::clear_is_open() {
  is_open_ = 0;
  clear_has_is_open();
}
inline ::google::protobuf::int32 Faction_BeastInfoRsp::is_open() const {
  return is_open_;
}
inline void Faction_BeastInfoRsp::set_is_open(::google::protobuf::int32 value) {
  set_has_is_open();
  is_open_ = value;
}

// optional uint32 today_count = 6;
inline bool Faction_BeastInfoRsp::has_today_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Faction_BeastInfoRsp::set_has_today_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Faction_BeastInfoRsp::clear_has_today_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Faction_BeastInfoRsp::clear_today_count() {
  today_count_ = 0u;
  clear_has_today_count();
}
inline ::google::protobuf::uint32 Faction_BeastInfoRsp::today_count() const {
  return today_count_;
}
inline void Faction_BeastInfoRsp::set_today_count(::google::protobuf::uint32 value) {
  set_has_today_count();
  today_count_ = value;
}

// optional uint32 week_count = 7;
inline bool Faction_BeastInfoRsp::has_week_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Faction_BeastInfoRsp::set_has_week_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Faction_BeastInfoRsp::clear_has_week_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Faction_BeastInfoRsp::clear_week_count() {
  week_count_ = 0u;
  clear_has_week_count();
}
inline ::google::protobuf::uint32 Faction_BeastInfoRsp::week_count() const {
  return week_count_;
}
inline void Faction_BeastInfoRsp::set_week_count(::google::protobuf::uint32 value) {
  set_has_week_count();
  week_count_ = value;
}

// optional int32 level = 8;
inline bool Faction_BeastInfoRsp::has_level() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Faction_BeastInfoRsp::set_has_level() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Faction_BeastInfoRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Faction_BeastInfoRsp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Faction_BeastInfoRsp::level() const {
  return level_;
}
inline void Faction_BeastInfoRsp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 tribute = 9;
inline bool Faction_BeastInfoRsp::has_tribute() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Faction_BeastInfoRsp::set_has_tribute() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Faction_BeastInfoRsp::clear_has_tribute() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Faction_BeastInfoRsp::clear_tribute() {
  tribute_ = 0u;
  clear_has_tribute();
}
inline ::google::protobuf::uint32 Faction_BeastInfoRsp::tribute() const {
  return tribute_;
}
inline void Faction_BeastInfoRsp::set_tribute(::google::protobuf::uint32 value) {
  set_has_tribute();
  tribute_ = value;
}

// -------------------------------------------------------------------

// Faction_BeastOpenInfoNotify

// optional int32 is_open = 1;
inline bool Faction_BeastOpenInfoNotify::has_is_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_BeastOpenInfoNotify::set_has_is_open() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_BeastOpenInfoNotify::clear_has_is_open() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_BeastOpenInfoNotify::clear_is_open() {
  is_open_ = 0;
  clear_has_is_open();
}
inline ::google::protobuf::int32 Faction_BeastOpenInfoNotify::is_open() const {
  return is_open_;
}
inline void Faction_BeastOpenInfoNotify::set_is_open(::google::protobuf::int32 value) {
  set_has_is_open();
  is_open_ = value;
}

// optional uint32 today_count = 2;
inline bool Faction_BeastOpenInfoNotify::has_today_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_BeastOpenInfoNotify::set_has_today_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_BeastOpenInfoNotify::clear_has_today_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_BeastOpenInfoNotify::clear_today_count() {
  today_count_ = 0u;
  clear_has_today_count();
}
inline ::google::protobuf::uint32 Faction_BeastOpenInfoNotify::today_count() const {
  return today_count_;
}
inline void Faction_BeastOpenInfoNotify::set_today_count(::google::protobuf::uint32 value) {
  set_has_today_count();
  today_count_ = value;
}

// optional uint32 week_count = 3;
inline bool Faction_BeastOpenInfoNotify::has_week_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_BeastOpenInfoNotify::set_has_week_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_BeastOpenInfoNotify::clear_has_week_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_BeastOpenInfoNotify::clear_week_count() {
  week_count_ = 0u;
  clear_has_week_count();
}
inline ::google::protobuf::uint32 Faction_BeastOpenInfoNotify::week_count() const {
  return week_count_;
}
inline void Faction_BeastOpenInfoNotify::set_week_count(::google::protobuf::uint32 value) {
  set_has_week_count();
  week_count_ = value;
}

// optional int32 level = 4;
inline bool Faction_BeastOpenInfoNotify::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_BeastOpenInfoNotify::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_BeastOpenInfoNotify::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_BeastOpenInfoNotify::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 Faction_BeastOpenInfoNotify::level() const {
  return level_;
}
inline void Faction_BeastOpenInfoNotify::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 tribute = 5;
inline bool Faction_BeastOpenInfoNotify::has_tribute() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Faction_BeastOpenInfoNotify::set_has_tribute() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Faction_BeastOpenInfoNotify::clear_has_tribute() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Faction_BeastOpenInfoNotify::clear_tribute() {
  tribute_ = 0u;
  clear_has_tribute();
}
inline ::google::protobuf::uint32 Faction_BeastOpenInfoNotify::tribute() const {
  return tribute_;
}
inline void Faction_BeastOpenInfoNotify::set_tribute(::google::protobuf::uint32 value) {
  set_has_tribute();
  tribute_ = value;
}

// -------------------------------------------------------------------

// Faction_BeastOpenReq

// -------------------------------------------------------------------

// Faction_BeastOpenRsp

// required int32 ret = 1;
inline bool Faction_BeastOpenRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_BeastOpenRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_BeastOpenRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_BeastOpenRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_BeastOpenRsp::ret() const {
  return ret_;
}
inline void Faction_BeastOpenRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Faction_BeastCurHarmRankRsp

// optional .proto_ff.FactionBeastRankListProto rank = 1;
inline bool Faction_BeastCurHarmRankRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_BeastCurHarmRankRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_BeastCurHarmRankRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_BeastCurHarmRankRsp::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::FactionBeastRankListProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::FactionBeastRankListProto& Faction_BeastCurHarmRankRsp::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::FactionBeastRankListProto* Faction_BeastCurHarmRankRsp::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::FactionBeastRankListProto;
  return rank_;
}
inline ::proto_ff::FactionBeastRankListProto* Faction_BeastCurHarmRankRsp::release_rank() {
  clear_has_rank();
  ::proto_ff::FactionBeastRankListProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void Faction_BeastCurHarmRankRsp::set_allocated_rank(::proto_ff::FactionBeastRankListProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// optional int64 myharm = 2;
inline bool Faction_BeastCurHarmRankRsp::has_myharm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_BeastCurHarmRankRsp::set_has_myharm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_BeastCurHarmRankRsp::clear_has_myharm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_BeastCurHarmRankRsp::clear_myharm() {
  myharm_ = GOOGLE_LONGLONG(0);
  clear_has_myharm();
}
inline ::google::protobuf::int64 Faction_BeastCurHarmRankRsp::myharm() const {
  return myharm_;
}
inline void Faction_BeastCurHarmRankRsp::set_myharm(::google::protobuf::int64 value) {
  set_has_myharm();
  myharm_ = value;
}

// -------------------------------------------------------------------

// Faction_BeastFinishRsp

// optional int32 sec = 1;
inline bool Faction_BeastFinishRsp::has_sec() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_BeastFinishRsp::set_has_sec() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_BeastFinishRsp::clear_has_sec() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_BeastFinishRsp::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
inline ::google::protobuf::int32 Faction_BeastFinishRsp::sec() const {
  return sec_;
}
inline void Faction_BeastFinishRsp::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
}

// optional int32 star = 2;
inline bool Faction_BeastFinishRsp::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_BeastFinishRsp::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_BeastFinishRsp::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_BeastFinishRsp::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 Faction_BeastFinishRsp::star() const {
  return star_;
}
inline void Faction_BeastFinishRsp::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional int64 harm = 3;
inline bool Faction_BeastFinishRsp::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_BeastFinishRsp::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_BeastFinishRsp::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_BeastFinishRsp::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 Faction_BeastFinishRsp::harm() const {
  return harm_;
}
inline void Faction_BeastFinishRsp::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// optional int32 rank = 4;
inline bool Faction_BeastFinishRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_BeastFinishRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_BeastFinishRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_BeastFinishRsp::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 Faction_BeastFinishRsp::rank() const {
  return rank_;
}
inline void Faction_BeastFinishRsp::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// repeated .proto_ff.ComItem reward = 5;
inline int Faction_BeastFinishRsp::reward_size() const {
  return reward_.size();
}
inline void Faction_BeastFinishRsp::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::ComItem& Faction_BeastFinishRsp::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::ComItem* Faction_BeastFinishRsp::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::ComItem* Faction_BeastFinishRsp::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
Faction_BeastFinishRsp::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
Faction_BeastFinishRsp::mutable_reward() {
  return &reward_;
}

// repeated .proto_ff.ComItem faction_reward = 6;
inline int Faction_BeastFinishRsp::faction_reward_size() const {
  return faction_reward_.size();
}
inline void Faction_BeastFinishRsp::clear_faction_reward() {
  faction_reward_.Clear();
}
inline const ::proto_ff::ComItem& Faction_BeastFinishRsp::faction_reward(int index) const {
  return faction_reward_.Get(index);
}
inline ::proto_ff::ComItem* Faction_BeastFinishRsp::mutable_faction_reward(int index) {
  return faction_reward_.Mutable(index);
}
inline ::proto_ff::ComItem* Faction_BeastFinishRsp::add_faction_reward() {
  return faction_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
Faction_BeastFinishRsp::faction_reward() const {
  return faction_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
Faction_BeastFinishRsp::mutable_faction_reward() {
  return &faction_reward_;
}

// -------------------------------------------------------------------

// CL_FactionRoleUpdateRsp

// required uint64 cid = 1;
inline bool CL_FactionRoleUpdateRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CL_FactionRoleUpdateRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CL_FactionRoleUpdateRsp::cid() const {
  return cid_;
}
inline void CL_FactionRoleUpdateRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint32 faction_id = 2;
inline bool CL_FactionRoleUpdateRsp::has_faction_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_faction_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CL_FactionRoleUpdateRsp::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 CL_FactionRoleUpdateRsp::faction_id() const {
  return faction_id_;
}
inline void CL_FactionRoleUpdateRsp::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// required bytes name = 3;
inline bool CL_FactionRoleUpdateRsp::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CL_FactionRoleUpdateRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CL_FactionRoleUpdateRsp::name() const {
  return *name_;
}
inline void CL_FactionRoleUpdateRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CL_FactionRoleUpdateRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CL_FactionRoleUpdateRsp::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CL_FactionRoleUpdateRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CL_FactionRoleUpdateRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CL_FactionRoleUpdateRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 duty = 4;
inline bool CL_FactionRoleUpdateRsp::has_duty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_duty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_duty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CL_FactionRoleUpdateRsp::clear_duty() {
  duty_ = 0;
  clear_has_duty();
}
inline ::google::protobuf::int32 CL_FactionRoleUpdateRsp::duty() const {
  return duty_;
}
inline void CL_FactionRoleUpdateRsp::set_duty(::google::protobuf::int32 value) {
  set_has_duty();
  duty_ = value;
}

// required int32 level = 5;
inline bool CL_FactionRoleUpdateRsp::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CL_FactionRoleUpdateRsp::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CL_FactionRoleUpdateRsp::level() const {
  return level_;
}
inline void CL_FactionRoleUpdateRsp::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required uint64 leader = 6;
inline bool CL_FactionRoleUpdateRsp::has_leader() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CL_FactionRoleUpdateRsp::set_has_leader() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CL_FactionRoleUpdateRsp::clear_has_leader() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CL_FactionRoleUpdateRsp::clear_leader() {
  leader_ = GOOGLE_ULONGLONG(0);
  clear_has_leader();
}
inline ::google::protobuf::uint64 CL_FactionRoleUpdateRsp::leader() const {
  return leader_;
}
inline void CL_FactionRoleUpdateRsp::set_leader(::google::protobuf::uint64 value) {
  set_has_leader();
  leader_ = value;
}

// -------------------------------------------------------------------

// LC_FactionCreate

// required uint64 cid = 1;
inline bool LC_FactionCreate::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LC_FactionCreate::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LC_FactionCreate::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LC_FactionCreate::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 LC_FactionCreate::cid() const {
  return cid_;
}
inline void LC_FactionCreate::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 2;
inline bool LC_FactionCreate::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LC_FactionCreate::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LC_FactionCreate::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LC_FactionCreate::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LC_FactionCreate::name() const {
  return *name_;
}
inline void LC_FactionCreate::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LC_FactionCreate::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LC_FactionCreate::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LC_FactionCreate::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LC_FactionCreate::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LC_FactionCreate::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes notice = 3;
inline bool LC_FactionCreate::has_notice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LC_FactionCreate::set_has_notice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LC_FactionCreate::clear_has_notice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LC_FactionCreate::clear_notice() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    notice_->clear();
  }
  clear_has_notice();
}
inline const ::std::string& LC_FactionCreate::notice() const {
  return *notice_;
}
inline void LC_FactionCreate::set_notice(const ::std::string& value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void LC_FactionCreate::set_notice(const char* value) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(value);
}
inline void LC_FactionCreate::set_notice(const void* value, size_t size) {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  notice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LC_FactionCreate::mutable_notice() {
  set_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    notice_ = new ::std::string;
  }
  return notice_;
}
inline ::std::string* LC_FactionCreate::release_notice() {
  clear_has_notice();
  if (notice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = notice_;
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LC_FactionCreate::set_allocated_notice(::std::string* notice) {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (notice) {
    set_has_notice();
    notice_ = notice;
  } else {
    clear_has_notice();
    notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CL_FactionCreateResult

// required uint64 cid = 1;
inline bool CL_FactionCreateResult::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CL_FactionCreateResult::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CL_FactionCreateResult::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CL_FactionCreateResult::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CL_FactionCreateResult::cid() const {
  return cid_;
}
inline void CL_FactionCreateResult::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// LC_FactionChgName

// required uint64 cid = 1;
inline bool LC_FactionChgName::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LC_FactionChgName::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LC_FactionChgName::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LC_FactionChgName::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 LC_FactionChgName::cid() const {
  return cid_;
}
inline void LC_FactionChgName::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required bytes name = 2;
inline bool LC_FactionChgName::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LC_FactionChgName::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LC_FactionChgName::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LC_FactionChgName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& LC_FactionChgName::name() const {
  return *name_;
}
inline void LC_FactionChgName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LC_FactionChgName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void LC_FactionChgName::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LC_FactionChgName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* LC_FactionChgName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LC_FactionChgName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CL_FactionChgNameResult

// required int32 ret = 1;
inline bool CL_FactionChgNameResult::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CL_FactionChgNameResult::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CL_FactionChgNameResult::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CL_FactionChgNameResult::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 CL_FactionChgNameResult::ret() const {
  return ret_;
}
inline void CL_FactionChgNameResult::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required uint64 cid = 2;
inline bool CL_FactionChgNameResult::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CL_FactionChgNameResult::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CL_FactionChgNameResult::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CL_FactionChgNameResult::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CL_FactionChgNameResult::cid() const {
  return cid_;
}
inline void CL_FactionChgNameResult::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// CL_FactionDismissNotify

// required uint32 faction_id = 1;
inline bool CL_FactionDismissNotify::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CL_FactionDismissNotify::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CL_FactionDismissNotify::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CL_FactionDismissNotify::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 CL_FactionDismissNotify::faction_id() const {
  return faction_id_;
}
inline void CL_FactionDismissNotify::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// -------------------------------------------------------------------

// LC_FactionAddAttrReq

// required uint32 faction_id = 1;
inline bool LC_FactionAddAttrReq::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LC_FactionAddAttrReq::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LC_FactionAddAttrReq::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LC_FactionAddAttrReq::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 LC_FactionAddAttrReq::faction_id() const {
  return faction_id_;
}
inline void LC_FactionAddAttrReq::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// optional uint32 exp = 2;
inline bool LC_FactionAddAttrReq::has_exp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LC_FactionAddAttrReq::set_has_exp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LC_FactionAddAttrReq::clear_has_exp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LC_FactionAddAttrReq::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 LC_FactionAddAttrReq::exp() const {
  return exp_;
}
inline void LC_FactionAddAttrReq::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 tribute = 3;
inline bool LC_FactionAddAttrReq::has_tribute() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LC_FactionAddAttrReq::set_has_tribute() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LC_FactionAddAttrReq::clear_has_tribute() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LC_FactionAddAttrReq::clear_tribute() {
  tribute_ = 0;
  clear_has_tribute();
}
inline ::google::protobuf::int32 LC_FactionAddAttrReq::tribute() const {
  return tribute_;
}
inline void LC_FactionAddAttrReq::set_tribute(::google::protobuf::int32 value) {
  set_has_tribute();
  tribute_ = value;
}

// -------------------------------------------------------------------

// LS_FactionAnswerCount

// required uint32 faction_id = 1;
inline bool LS_FactionAnswerCount::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LS_FactionAnswerCount::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LS_FactionAnswerCount::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LS_FactionAnswerCount::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 LS_FactionAnswerCount::faction_id() const {
  return faction_id_;
}
inline void LS_FactionAnswerCount::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// required bytes faction_name = 2;
inline bool LS_FactionAnswerCount::has_faction_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LS_FactionAnswerCount::set_has_faction_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LS_FactionAnswerCount::clear_has_faction_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LS_FactionAnswerCount::clear_faction_name() {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    faction_name_->clear();
  }
  clear_has_faction_name();
}
inline const ::std::string& LS_FactionAnswerCount::faction_name() const {
  return *faction_name_;
}
inline void LS_FactionAnswerCount::set_faction_name(const ::std::string& value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void LS_FactionAnswerCount::set_faction_name(const char* value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void LS_FactionAnswerCount::set_faction_name(const void* value, size_t size) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LS_FactionAnswerCount::mutable_faction_name() {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  return faction_name_;
}
inline ::std::string* LS_FactionAnswerCount::release_faction_name() {
  clear_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faction_name_;
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LS_FactionAnswerCount::set_allocated_faction_name(::std::string* faction_name) {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (faction_name) {
    set_has_faction_name();
    faction_name_ = faction_name;
  } else {
    clear_has_faction_name();
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 count = 3;
inline bool LS_FactionAnswerCount::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LS_FactionAnswerCount::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LS_FactionAnswerCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LS_FactionAnswerCount::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 LS_FactionAnswerCount::count() const {
  return count_;
}
inline void LS_FactionAnswerCount::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required uint32 zid = 4;
inline bool LS_FactionAnswerCount::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LS_FactionAnswerCount::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LS_FactionAnswerCount::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LS_FactionAnswerCount::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 LS_FactionAnswerCount::zid() const {
  return zid_;
}
inline void LS_FactionAnswerCount::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// SL_FactionAnswerRank

// optional .proto_ff.FactionAnswerRankListProto rank = 1;
inline bool SL_FactionAnswerRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SL_FactionAnswerRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SL_FactionAnswerRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SL_FactionAnswerRank::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::FactionAnswerRankListProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::FactionAnswerRankListProto& SL_FactionAnswerRank::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::FactionAnswerRankListProto* SL_FactionAnswerRank::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::FactionAnswerRankListProto;
  return rank_;
}
inline ::proto_ff::FactionAnswerRankListProto* SL_FactionAnswerRank::release_rank() {
  clear_has_rank();
  ::proto_ff::FactionAnswerRankListProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void SL_FactionAnswerRank::set_allocated_rank(::proto_ff::FactionAnswerRankListProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// -------------------------------------------------------------------

// SL_FactionAnswerCurRankReq

// required uint64 cid = 1;
inline bool SL_FactionAnswerCurRankReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SL_FactionAnswerCurRankReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SL_FactionAnswerCurRankReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SL_FactionAnswerCurRankReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 SL_FactionAnswerCurRankReq::cid() const {
  return cid_;
}
inline void SL_FactionAnswerCurRankReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// SC_FactionAnswerRankRsp

// repeated uint32 factionid = 1;
inline int SC_FactionAnswerRankRsp::factionid_size() const {
  return factionid_.size();
}
inline void SC_FactionAnswerRankRsp::clear_factionid() {
  factionid_.Clear();
}
inline ::google::protobuf::uint32 SC_FactionAnswerRankRsp::factionid(int index) const {
  return factionid_.Get(index);
}
inline void SC_FactionAnswerRankRsp::set_factionid(int index, ::google::protobuf::uint32 value) {
  factionid_.Set(index, value);
}
inline void SC_FactionAnswerRankRsp::add_factionid(::google::protobuf::uint32 value) {
  factionid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SC_FactionAnswerRankRsp::factionid() const {
  return factionid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SC_FactionAnswerRankRsp::mutable_factionid() {
  return &factionid_;
}

// repeated uint32 rank = 2;
inline int SC_FactionAnswerRankRsp::rank_size() const {
  return rank_.size();
}
inline void SC_FactionAnswerRankRsp::clear_rank() {
  rank_.Clear();
}
inline ::google::protobuf::uint32 SC_FactionAnswerRankRsp::rank(int index) const {
  return rank_.Get(index);
}
inline void SC_FactionAnswerRankRsp::set_rank(int index, ::google::protobuf::uint32 value) {
  rank_.Set(index, value);
}
inline void SC_FactionAnswerRankRsp::add_rank(::google::protobuf::uint32 value) {
  rank_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
SC_FactionAnswerRankRsp::rank() const {
  return rank_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
SC_FactionAnswerRankRsp::mutable_rank() {
  return &rank_;
}

// -------------------------------------------------------------------

// LS_FactionAnswerEndRsp

// required uint32 factionid = 1;
inline bool LS_FactionAnswerEndRsp::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LS_FactionAnswerEndRsp::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LS_FactionAnswerEndRsp::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LS_FactionAnswerEndRsp::clear_factionid() {
  factionid_ = 0u;
  clear_has_factionid();
}
inline ::google::protobuf::uint32 LS_FactionAnswerEndRsp::factionid() const {
  return factionid_;
}
inline void LS_FactionAnswerEndRsp::set_factionid(::google::protobuf::uint32 value) {
  set_has_factionid();
  factionid_ = value;
}

// required uint32 zid = 2;
inline bool LS_FactionAnswerEndRsp::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LS_FactionAnswerEndRsp::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LS_FactionAnswerEndRsp::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LS_FactionAnswerEndRsp::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 LS_FactionAnswerEndRsp::zid() const {
  return zid_;
}
inline void LS_FactionAnswerEndRsp::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// required uint64 endtime = 3;
inline bool LS_FactionAnswerEndRsp::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LS_FactionAnswerEndRsp::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LS_FactionAnswerEndRsp::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LS_FactionAnswerEndRsp::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 LS_FactionAnswerEndRsp::endtime() const {
  return endtime_;
}
inline void LS_FactionAnswerEndRsp::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
}

// required uint64 cid = 4;
inline bool LS_FactionAnswerEndRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LS_FactionAnswerEndRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LS_FactionAnswerEndRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LS_FactionAnswerEndRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 LS_FactionAnswerEndRsp::cid() const {
  return cid_;
}
inline void LS_FactionAnswerEndRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint32 count = 5;
inline bool LS_FactionAnswerEndRsp::has_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LS_FactionAnswerEndRsp::set_has_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LS_FactionAnswerEndRsp::clear_has_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LS_FactionAnswerEndRsp::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 LS_FactionAnswerEndRsp::count() const {
  return count_;
}
inline void LS_FactionAnswerEndRsp::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required bytes player_name = 6;
inline bool LS_FactionAnswerEndRsp::has_player_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LS_FactionAnswerEndRsp::set_has_player_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LS_FactionAnswerEndRsp::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LS_FactionAnswerEndRsp::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& LS_FactionAnswerEndRsp::player_name() const {
  return *player_name_;
}
inline void LS_FactionAnswerEndRsp::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void LS_FactionAnswerEndRsp::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void LS_FactionAnswerEndRsp::set_player_name(const void* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LS_FactionAnswerEndRsp::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* LS_FactionAnswerEndRsp::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LS_FactionAnswerEndRsp::set_allocated_player_name(::std::string* player_name) {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (player_name) {
    set_has_player_name();
    player_name_ = player_name;
  } else {
    clear_has_player_name();
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 sec = 7;
inline bool LS_FactionAnswerEndRsp::has_sec() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LS_FactionAnswerEndRsp::set_has_sec() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LS_FactionAnswerEndRsp::clear_has_sec() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LS_FactionAnswerEndRsp::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
inline ::google::protobuf::int32 LS_FactionAnswerEndRsp::sec() const {
  return sec_;
}
inline void LS_FactionAnswerEndRsp::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
}

// required uint32 faction_count = 8;
inline bool LS_FactionAnswerEndRsp::has_faction_count() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LS_FactionAnswerEndRsp::set_has_faction_count() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LS_FactionAnswerEndRsp::clear_has_faction_count() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LS_FactionAnswerEndRsp::clear_faction_count() {
  faction_count_ = 0u;
  clear_has_faction_count();
}
inline ::google::protobuf::uint32 LS_FactionAnswerEndRsp::faction_count() const {
  return faction_count_;
}
inline void LS_FactionAnswerEndRsp::set_faction_count(::google::protobuf::uint32 value) {
  set_has_faction_count();
  faction_count_ = value;
}

// -------------------------------------------------------------------

// LC_FactionBeastFinishRsp

// required uint32 factionid = 1;
inline bool LC_FactionBeastFinishRsp::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LC_FactionBeastFinishRsp::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LC_FactionBeastFinishRsp::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LC_FactionBeastFinishRsp::clear_factionid() {
  factionid_ = 0u;
  clear_has_factionid();
}
inline ::google::protobuf::uint32 LC_FactionBeastFinishRsp::factionid() const {
  return factionid_;
}
inline void LC_FactionBeastFinishRsp::set_factionid(::google::protobuf::uint32 value) {
  set_has_factionid();
  factionid_ = value;
}

// repeated uint64 cid_lst = 2;
inline int LC_FactionBeastFinishRsp::cid_lst_size() const {
  return cid_lst_.size();
}
inline void LC_FactionBeastFinishRsp::clear_cid_lst() {
  cid_lst_.Clear();
}
inline ::google::protobuf::uint64 LC_FactionBeastFinishRsp::cid_lst(int index) const {
  return cid_lst_.Get(index);
}
inline void LC_FactionBeastFinishRsp::set_cid_lst(int index, ::google::protobuf::uint64 value) {
  cid_lst_.Set(index, value);
}
inline void LC_FactionBeastFinishRsp::add_cid_lst(::google::protobuf::uint64 value) {
  cid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LC_FactionBeastFinishRsp::cid_lst() const {
  return cid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LC_FactionBeastFinishRsp::mutable_cid_lst() {
  return &cid_lst_;
}

// repeated int64 harm_lst = 3;
inline int LC_FactionBeastFinishRsp::harm_lst_size() const {
  return harm_lst_.size();
}
inline void LC_FactionBeastFinishRsp::clear_harm_lst() {
  harm_lst_.Clear();
}
inline ::google::protobuf::int64 LC_FactionBeastFinishRsp::harm_lst(int index) const {
  return harm_lst_.Get(index);
}
inline void LC_FactionBeastFinishRsp::set_harm_lst(int index, ::google::protobuf::int64 value) {
  harm_lst_.Set(index, value);
}
inline void LC_FactionBeastFinishRsp::add_harm_lst(::google::protobuf::int64 value) {
  harm_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
LC_FactionBeastFinishRsp::harm_lst() const {
  return harm_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
LC_FactionBeastFinishRsp::mutable_harm_lst() {
  return &harm_lst_;
}

// optional int32 star = 4;
inline bool LC_FactionBeastFinishRsp::has_star() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LC_FactionBeastFinishRsp::set_has_star() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LC_FactionBeastFinishRsp::clear_has_star() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LC_FactionBeastFinishRsp::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 LC_FactionBeastFinishRsp::star() const {
  return star_;
}
inline void LC_FactionBeastFinishRsp::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// repeated .proto_ff.ComItemBind reward = 5;
inline int LC_FactionBeastFinishRsp::reward_size() const {
  return reward_.size();
}
inline void LC_FactionBeastFinishRsp::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::ComItemBind& LC_FactionBeastFinishRsp::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::ComItemBind* LC_FactionBeastFinishRsp::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::ComItemBind* LC_FactionBeastFinishRsp::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind >&
LC_FactionBeastFinishRsp::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind >*
LC_FactionBeastFinishRsp::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// FactionGuardData

// optional uint64 acc_person_exp = 1;
inline bool FactionGuardData::has_acc_person_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionGuardData::set_has_acc_person_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionGuardData::clear_has_acc_person_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionGuardData::clear_acc_person_exp() {
  acc_person_exp_ = GOOGLE_ULONGLONG(0);
  clear_has_acc_person_exp();
}
inline ::google::protobuf::uint64 FactionGuardData::acc_person_exp() const {
  return acc_person_exp_;
}
inline void FactionGuardData::set_acc_person_exp(::google::protobuf::uint64 value) {
  set_has_acc_person_exp();
  acc_person_exp_ = value;
}

// optional uint64 acc_faction_contri = 2;
inline bool FactionGuardData::has_acc_faction_contri() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionGuardData::set_has_acc_faction_contri() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionGuardData::clear_has_acc_faction_contri() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionGuardData::clear_acc_faction_contri() {
  acc_faction_contri_ = GOOGLE_ULONGLONG(0);
  clear_has_acc_faction_contri();
}
inline ::google::protobuf::uint64 FactionGuardData::acc_faction_contri() const {
  return acc_faction_contri_;
}
inline void FactionGuardData::set_acc_faction_contri(::google::protobuf::uint64 value) {
  set_has_acc_faction_contri();
  acc_faction_contri_ = value;
}

// optional uint32 cur_encouragement_gold_count = 3;
inline bool FactionGuardData::has_cur_encouragement_gold_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionGuardData::set_has_cur_encouragement_gold_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionGuardData::clear_has_cur_encouragement_gold_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionGuardData::clear_cur_encouragement_gold_count() {
  cur_encouragement_gold_count_ = 0u;
  clear_has_cur_encouragement_gold_count();
}
inline ::google::protobuf::uint32 FactionGuardData::cur_encouragement_gold_count() const {
  return cur_encouragement_gold_count_;
}
inline void FactionGuardData::set_cur_encouragement_gold_count(::google::protobuf::uint32 value) {
  set_has_cur_encouragement_gold_count();
  cur_encouragement_gold_count_ = value;
}

// optional uint32 cur_encouragement_diamond_count = 4;
inline bool FactionGuardData::has_cur_encouragement_diamond_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionGuardData::set_has_cur_encouragement_diamond_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionGuardData::clear_has_cur_encouragement_diamond_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionGuardData::clear_cur_encouragement_diamond_count() {
  cur_encouragement_diamond_count_ = 0u;
  clear_has_cur_encouragement_diamond_count();
}
inline ::google::protobuf::uint32 FactionGuardData::cur_encouragement_diamond_count() const {
  return cur_encouragement_diamond_count_;
}
inline void FactionGuardData::set_cur_encouragement_diamond_count(::google::protobuf::uint32 value) {
  set_has_cur_encouragement_diamond_count();
  cur_encouragement_diamond_count_ = value;
}

// -------------------------------------------------------------------

// Faction_GuardSceneInfoReq

// -------------------------------------------------------------------

// Faction_GuardSceneInfoRsp

// optional .proto_ff.FactionGuardData data = 1;
inline bool Faction_GuardSceneInfoRsp::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_GuardSceneInfoRsp::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_GuardSceneInfoRsp::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_GuardSceneInfoRsp::clear_data() {
  if (data_ != NULL) data_->::proto_ff::FactionGuardData::Clear();
  clear_has_data();
}
inline const ::proto_ff::FactionGuardData& Faction_GuardSceneInfoRsp::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::proto_ff::FactionGuardData* Faction_GuardSceneInfoRsp::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::proto_ff::FactionGuardData;
  return data_;
}
inline ::proto_ff::FactionGuardData* Faction_GuardSceneInfoRsp::release_data() {
  clear_has_data();
  ::proto_ff::FactionGuardData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void Faction_GuardSceneInfoRsp::set_allocated_data(::proto_ff::FactionGuardData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// optional uint32 cur_guard_encouragement_gold_count = 2;
inline bool Faction_GuardSceneInfoRsp::has_cur_guard_encouragement_gold_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_GuardSceneInfoRsp::set_has_cur_guard_encouragement_gold_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_GuardSceneInfoRsp::clear_has_cur_guard_encouragement_gold_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_GuardSceneInfoRsp::clear_cur_guard_encouragement_gold_count() {
  cur_guard_encouragement_gold_count_ = 0u;
  clear_has_cur_guard_encouragement_gold_count();
}
inline ::google::protobuf::uint32 Faction_GuardSceneInfoRsp::cur_guard_encouragement_gold_count() const {
  return cur_guard_encouragement_gold_count_;
}
inline void Faction_GuardSceneInfoRsp::set_cur_guard_encouragement_gold_count(::google::protobuf::uint32 value) {
  set_has_cur_guard_encouragement_gold_count();
  cur_guard_encouragement_gold_count_ = value;
}

// optional uint32 cur_guard_encouragement_diamond_count = 3;
inline bool Faction_GuardSceneInfoRsp::has_cur_guard_encouragement_diamond_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_GuardSceneInfoRsp::set_has_cur_guard_encouragement_diamond_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_GuardSceneInfoRsp::clear_has_cur_guard_encouragement_diamond_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_GuardSceneInfoRsp::clear_cur_guard_encouragement_diamond_count() {
  cur_guard_encouragement_diamond_count_ = 0u;
  clear_has_cur_guard_encouragement_diamond_count();
}
inline ::google::protobuf::uint32 Faction_GuardSceneInfoRsp::cur_guard_encouragement_diamond_count() const {
  return cur_guard_encouragement_diamond_count_;
}
inline void Faction_GuardSceneInfoRsp::set_cur_guard_encouragement_diamond_count(::google::protobuf::uint32 value) {
  set_has_cur_guard_encouragement_diamond_count();
  cur_guard_encouragement_diamond_count_ = value;
}

// -------------------------------------------------------------------

// FactionGuardRankProto

// optional int32 rank = 1;
inline bool FactionGuardRankProto::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionGuardRankProto::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionGuardRankProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionGuardRankProto::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionGuardRankProto::rank() const {
  return rank_;
}
inline void FactionGuardRankProto::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 cid = 2;
inline bool FactionGuardRankProto::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionGuardRankProto::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionGuardRankProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionGuardRankProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 FactionGuardRankProto::cid() const {
  return cid_;
}
inline void FactionGuardRankProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 3;
inline bool FactionGuardRankProto::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionGuardRankProto::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionGuardRankProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionGuardRankProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionGuardRankProto::name() const {
  return *name_;
}
inline void FactionGuardRankProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionGuardRankProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionGuardRankProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionGuardRankProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionGuardRankProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionGuardRankProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 harm = 4;
inline bool FactionGuardRankProto::has_harm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionGuardRankProto::set_has_harm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionGuardRankProto::clear_has_harm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionGuardRankProto::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 FactionGuardRankProto::harm() const {
  return harm_;
}
inline void FactionGuardRankProto::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// -------------------------------------------------------------------

// FactionGuardRankListProto

// repeated .proto_ff.FactionGuardRankProto lst = 1;
inline int FactionGuardRankListProto::lst_size() const {
  return lst_.size();
}
inline void FactionGuardRankListProto::clear_lst() {
  lst_.Clear();
}
inline const ::proto_ff::FactionGuardRankProto& FactionGuardRankListProto::lst(int index) const {
  return lst_.Get(index);
}
inline ::proto_ff::FactionGuardRankProto* FactionGuardRankListProto::mutable_lst(int index) {
  return lst_.Mutable(index);
}
inline ::proto_ff::FactionGuardRankProto* FactionGuardRankListProto::add_lst() {
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardRankProto >&
FactionGuardRankListProto::lst() const {
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardRankProto >*
FactionGuardRankListProto::mutable_lst() {
  return &lst_;
}

// -------------------------------------------------------------------

// Faction_GuardPersonRankInfoReq

// -------------------------------------------------------------------

// Faction_GuardPersonRankInfoRsp

// optional int32 ret = 1;
inline bool Faction_GuardPersonRankInfoRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_GuardPersonRankInfoRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_GuardPersonRankInfoRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_GuardPersonRankInfoRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_GuardPersonRankInfoRsp::ret() const {
  return ret_;
}
inline void Faction_GuardPersonRankInfoRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionGuardRankListProto rank = 2;
inline bool Faction_GuardPersonRankInfoRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_GuardPersonRankInfoRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_GuardPersonRankInfoRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_GuardPersonRankInfoRsp::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::FactionGuardRankListProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::FactionGuardRankListProto& Faction_GuardPersonRankInfoRsp::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::FactionGuardRankListProto* Faction_GuardPersonRankInfoRsp::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::FactionGuardRankListProto;
  return rank_;
}
inline ::proto_ff::FactionGuardRankListProto* Faction_GuardPersonRankInfoRsp::release_rank() {
  clear_has_rank();
  ::proto_ff::FactionGuardRankListProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void Faction_GuardPersonRankInfoRsp::set_allocated_rank(::proto_ff::FactionGuardRankListProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// optional uint32 myrank = 3;
inline bool Faction_GuardPersonRankInfoRsp::has_myrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_GuardPersonRankInfoRsp::set_has_myrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_GuardPersonRankInfoRsp::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_GuardPersonRankInfoRsp::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 Faction_GuardPersonRankInfoRsp::myrank() const {
  return myrank_;
}
inline void Faction_GuardPersonRankInfoRsp::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// optional int64 myharm = 4;
inline bool Faction_GuardPersonRankInfoRsp::has_myharm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_GuardPersonRankInfoRsp::set_has_myharm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_GuardPersonRankInfoRsp::clear_has_myharm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_GuardPersonRankInfoRsp::clear_myharm() {
  myharm_ = GOOGLE_LONGLONG(0);
  clear_has_myharm();
}
inline ::google::protobuf::int64 Faction_GuardPersonRankInfoRsp::myharm() const {
  return myharm_;
}
inline void Faction_GuardPersonRankInfoRsp::set_myharm(::google::protobuf::int64 value) {
  set_has_myharm();
  myharm_ = value;
}

// -------------------------------------------------------------------

// FactionGuardSocialRankProto

// optional uint32 factionid = 1;
inline bool FactionGuardSocialRankProto::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionGuardSocialRankProto::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionGuardSocialRankProto::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionGuardSocialRankProto::clear_factionid() {
  factionid_ = 0u;
  clear_has_factionid();
}
inline ::google::protobuf::uint32 FactionGuardSocialRankProto::factionid() const {
  return factionid_;
}
inline void FactionGuardSocialRankProto::set_factionid(::google::protobuf::uint32 value) {
  set_has_factionid();
  factionid_ = value;
}

// optional bytes name = 2;
inline bool FactionGuardSocialRankProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionGuardSocialRankProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionGuardSocialRankProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionGuardSocialRankProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionGuardSocialRankProto::name() const {
  return *name_;
}
inline void FactionGuardSocialRankProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionGuardSocialRankProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionGuardSocialRankProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionGuardSocialRankProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionGuardSocialRankProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionGuardSocialRankProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 count = 3;
inline bool FactionGuardSocialRankProto::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionGuardSocialRankProto::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionGuardSocialRankProto::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionGuardSocialRankProto::clear_count() {
  count_ = GOOGLE_ULONGLONG(0);
  clear_has_count();
}
inline ::google::protobuf::uint64 FactionGuardSocialRankProto::count() const {
  return count_;
}
inline void FactionGuardSocialRankProto::set_count(::google::protobuf::uint64 value) {
  set_has_count();
  count_ = value;
}

// optional uint32 zid = 4;
inline bool FactionGuardSocialRankProto::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionGuardSocialRankProto::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionGuardSocialRankProto::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionGuardSocialRankProto::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 FactionGuardSocialRankProto::zid() const {
  return zid_;
}
inline void FactionGuardSocialRankProto::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 time = 5;
inline bool FactionGuardSocialRankProto::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionGuardSocialRankProto::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionGuardSocialRankProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionGuardSocialRankProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 FactionGuardSocialRankProto::time() const {
  return time_;
}
inline void FactionGuardSocialRankProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 rank = 6;
inline bool FactionGuardSocialRankProto::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionGuardSocialRankProto::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionGuardSocialRankProto::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionGuardSocialRankProto::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 FactionGuardSocialRankProto::rank() const {
  return rank_;
}
inline void FactionGuardSocialRankProto::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional int64 harm = 7;
inline bool FactionGuardSocialRankProto::has_harm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionGuardSocialRankProto::set_has_harm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionGuardSocialRankProto::clear_has_harm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionGuardSocialRankProto::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 FactionGuardSocialRankProto::harm() const {
  return harm_;
}
inline void FactionGuardSocialRankProto::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// -------------------------------------------------------------------

// FactionGuardSocialRankListProto

// repeated .proto_ff.FactionGuardSocialRankProto lst = 1;
inline int FactionGuardSocialRankListProto::lst_size() const {
  return lst_.size();
}
inline void FactionGuardSocialRankListProto::clear_lst() {
  lst_.Clear();
}
inline const ::proto_ff::FactionGuardSocialRankProto& FactionGuardSocialRankListProto::lst(int index) const {
  return lst_.Get(index);
}
inline ::proto_ff::FactionGuardSocialRankProto* FactionGuardSocialRankListProto::mutable_lst(int index) {
  return lst_.Mutable(index);
}
inline ::proto_ff::FactionGuardSocialRankProto* FactionGuardSocialRankListProto::add_lst() {
  return lst_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardSocialRankProto >&
FactionGuardSocialRankListProto::lst() const {
  return lst_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionGuardSocialRankProto >*
FactionGuardSocialRankListProto::mutable_lst() {
  return &lst_;
}

// -------------------------------------------------------------------

// Faction_GuardSocialRankListReq

// -------------------------------------------------------------------

// Faction_GuardSocialRankListRsp

// optional int32 ret = 1;
inline bool Faction_GuardSocialRankListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_GuardSocialRankListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_GuardSocialRankListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_GuardSocialRankListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Faction_GuardSocialRankListRsp::ret() const {
  return ret_;
}
inline void Faction_GuardSocialRankListRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.FactionGuardSocialRankListProto rank = 2;
inline bool Faction_GuardSocialRankListRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_GuardSocialRankListRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_GuardSocialRankListRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_GuardSocialRankListRsp::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::FactionGuardSocialRankListProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::FactionGuardSocialRankListProto& Faction_GuardSocialRankListRsp::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::FactionGuardSocialRankListProto* Faction_GuardSocialRankListRsp::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::FactionGuardSocialRankListProto;
  return rank_;
}
inline ::proto_ff::FactionGuardSocialRankListProto* Faction_GuardSocialRankListRsp::release_rank() {
  clear_has_rank();
  ::proto_ff::FactionGuardSocialRankListProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void Faction_GuardSocialRankListRsp::set_allocated_rank(::proto_ff::FactionGuardSocialRankListProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// optional uint32 count = 3;
inline bool Faction_GuardSocialRankListRsp::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_GuardSocialRankListRsp::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_GuardSocialRankListRsp::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_GuardSocialRankListRsp::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 Faction_GuardSocialRankListRsp::count() const {
  return count_;
}
inline void Faction_GuardSocialRankListRsp::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// GuardMonInfo

// optional int64 mon_id = 1;
inline bool GuardMonInfo::has_mon_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuardMonInfo::set_has_mon_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuardMonInfo::clear_has_mon_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuardMonInfo::clear_mon_id() {
  mon_id_ = GOOGLE_LONGLONG(0);
  clear_has_mon_id();
}
inline ::google::protobuf::int64 GuardMonInfo::mon_id() const {
  return mon_id_;
}
inline void GuardMonInfo::set_mon_id(::google::protobuf::int64 value) {
  set_has_mon_id();
  mon_id_ = value;
}

// optional int64 cid = 2;
inline bool GuardMonInfo::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuardMonInfo::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuardMonInfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuardMonInfo::clear_cid() {
  cid_ = GOOGLE_LONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::int64 GuardMonInfo::cid() const {
  return cid_;
}
inline void GuardMonInfo::set_cid(::google::protobuf::int64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int64 hp = 3;
inline bool GuardMonInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GuardMonInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GuardMonInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GuardMonInfo::clear_hp() {
  hp_ = GOOGLE_LONGLONG(0);
  clear_has_hp();
}
inline ::google::protobuf::int64 GuardMonInfo::hp() const {
  return hp_;
}
inline void GuardMonInfo::set_hp(::google::protobuf::int64 value) {
  set_has_hp();
  hp_ = value;
}

// optional int64 max_hp = 4;
inline bool GuardMonInfo::has_max_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GuardMonInfo::set_has_max_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GuardMonInfo::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GuardMonInfo::clear_max_hp() {
  max_hp_ = GOOGLE_LONGLONG(0);
  clear_has_max_hp();
}
inline ::google::protobuf::int64 GuardMonInfo::max_hp() const {
  return max_hp_;
}
inline void GuardMonInfo::set_max_hp(::google::protobuf::int64 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional .proto_ff.Vector3PB pos = 5;
inline bool GuardMonInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GuardMonInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GuardMonInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GuardMonInfo::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& GuardMonInfo::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* GuardMonInfo::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* GuardMonInfo::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void GuardMonInfo::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// optional int32 is_target = 6;
inline bool GuardMonInfo::has_is_target() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GuardMonInfo::set_has_is_target() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GuardMonInfo::clear_has_is_target() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GuardMonInfo::clear_is_target() {
  is_target_ = 0;
  clear_has_is_target();
}
inline ::google::protobuf::int32 GuardMonInfo::is_target() const {
  return is_target_;
}
inline void GuardMonInfo::set_is_target(::google::protobuf::int32 value) {
  set_has_is_target();
  is_target_ = value;
}

// optional int32 is_battle = 7;
inline bool GuardMonInfo::has_is_battle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GuardMonInfo::set_has_is_battle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GuardMonInfo::clear_has_is_battle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GuardMonInfo::clear_is_battle() {
  is_battle_ = 0;
  clear_has_is_battle();
}
inline ::google::protobuf::int32 GuardMonInfo::is_battle() const {
  return is_battle_;
}
inline void GuardMonInfo::set_is_battle(::google::protobuf::int32 value) {
  set_has_is_battle();
  is_battle_ = value;
}

// -------------------------------------------------------------------

// Faction_GuardMonsterInfo

// repeated .proto_ff.GuardMonInfo mons = 1;
inline int Faction_GuardMonsterInfo::mons_size() const {
  return mons_.size();
}
inline void Faction_GuardMonsterInfo::clear_mons() {
  mons_.Clear();
}
inline const ::proto_ff::GuardMonInfo& Faction_GuardMonsterInfo::mons(int index) const {
  return mons_.Get(index);
}
inline ::proto_ff::GuardMonInfo* Faction_GuardMonsterInfo::mutable_mons(int index) {
  return mons_.Mutable(index);
}
inline ::proto_ff::GuardMonInfo* Faction_GuardMonsterInfo::add_mons() {
  return mons_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardMonInfo >&
Faction_GuardMonsterInfo::mons() const {
  return mons_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardMonInfo >*
Faction_GuardMonsterInfo::mutable_mons() {
  return &mons_;
}

// -------------------------------------------------------------------

// Faction_GuardMonsterInfoNotify

// optional .proto_ff.Faction_GuardMonsterInfo mons = 1;
inline bool Faction_GuardMonsterInfoNotify::has_mons() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_GuardMonsterInfoNotify::set_has_mons() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_GuardMonsterInfoNotify::clear_has_mons() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_GuardMonsterInfoNotify::clear_mons() {
  if (mons_ != NULL) mons_->::proto_ff::Faction_GuardMonsterInfo::Clear();
  clear_has_mons();
}
inline const ::proto_ff::Faction_GuardMonsterInfo& Faction_GuardMonsterInfoNotify::mons() const {
  return mons_ != NULL ? *mons_ : *default_instance_->mons_;
}
inline ::proto_ff::Faction_GuardMonsterInfo* Faction_GuardMonsterInfoNotify::mutable_mons() {
  set_has_mons();
  if (mons_ == NULL) mons_ = new ::proto_ff::Faction_GuardMonsterInfo;
  return mons_;
}
inline ::proto_ff::Faction_GuardMonsterInfo* Faction_GuardMonsterInfoNotify::release_mons() {
  clear_has_mons();
  ::proto_ff::Faction_GuardMonsterInfo* temp = mons_;
  mons_ = NULL;
  return temp;
}
inline void Faction_GuardMonsterInfoNotify::set_allocated_mons(::proto_ff::Faction_GuardMonsterInfo* mons) {
  delete mons_;
  mons_ = mons;
  if (mons) {
    set_has_mons();
  } else {
    clear_has_mons();
  }
}

// optional int32 type = 2;
inline bool Faction_GuardMonsterInfoNotify::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_GuardMonsterInfoNotify::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_GuardMonsterInfoNotify::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_GuardMonsterInfoNotify::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Faction_GuardMonsterInfoNotify::type() const {
  return type_;
}
inline void Faction_GuardMonsterInfoNotify::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Faction_GuardWaveReward

// optional int32 wave = 1;
inline bool Faction_GuardWaveReward::has_wave() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_GuardWaveReward::set_has_wave() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_GuardWaveReward::clear_has_wave() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_GuardWaveReward::clear_wave() {
  wave_ = 0;
  clear_has_wave();
}
inline ::google::protobuf::int32 Faction_GuardWaveReward::wave() const {
  return wave_;
}
inline void Faction_GuardWaveReward::set_wave(::google::protobuf::int32 value) {
  set_has_wave();
  wave_ = value;
}

// repeated .proto_ff.ComItem reward = 2;
inline int Faction_GuardWaveReward::reward_size() const {
  return reward_.size();
}
inline void Faction_GuardWaveReward::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::ComItem& Faction_GuardWaveReward::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::ComItem* Faction_GuardWaveReward::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::ComItem* Faction_GuardWaveReward::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
Faction_GuardWaveReward::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
Faction_GuardWaveReward::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// Faction_GuardFinishRsp

// optional int32 result = 1;
inline bool Faction_GuardFinishRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_GuardFinishRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_GuardFinishRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_GuardFinishRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 Faction_GuardFinishRsp::result() const {
  return result_;
}
inline void Faction_GuardFinishRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional int32 sec = 2;
inline bool Faction_GuardFinishRsp::has_sec() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_GuardFinishRsp::set_has_sec() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_GuardFinishRsp::clear_has_sec() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_GuardFinishRsp::clear_sec() {
  sec_ = 0;
  clear_has_sec();
}
inline ::google::protobuf::int32 Faction_GuardFinishRsp::sec() const {
  return sec_;
}
inline void Faction_GuardFinishRsp::set_sec(::google::protobuf::int32 value) {
  set_has_sec();
  sec_ = value;
}

// optional int64 harm = 3;
inline bool Faction_GuardFinishRsp::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Faction_GuardFinishRsp::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Faction_GuardFinishRsp::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Faction_GuardFinishRsp::clear_harm() {
  harm_ = GOOGLE_LONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::int64 Faction_GuardFinishRsp::harm() const {
  return harm_;
}
inline void Faction_GuardFinishRsp::set_harm(::google::protobuf::int64 value) {
  set_has_harm();
  harm_ = value;
}

// optional int32 rank = 4;
inline bool Faction_GuardFinishRsp::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Faction_GuardFinishRsp::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Faction_GuardFinishRsp::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Faction_GuardFinishRsp::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 Faction_GuardFinishRsp::rank() const {
  return rank_;
}
inline void Faction_GuardFinishRsp::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint64 fation_rank = 5;
inline bool Faction_GuardFinishRsp::has_fation_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Faction_GuardFinishRsp::set_has_fation_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Faction_GuardFinishRsp::clear_has_fation_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Faction_GuardFinishRsp::clear_fation_rank() {
  fation_rank_ = GOOGLE_ULONGLONG(0);
  clear_has_fation_rank();
}
inline ::google::protobuf::uint64 Faction_GuardFinishRsp::fation_rank() const {
  return fation_rank_;
}
inline void Faction_GuardFinishRsp::set_fation_rank(::google::protobuf::uint64 value) {
  set_has_fation_rank();
  fation_rank_ = value;
}

// optional uint32 fation_count = 6;
inline bool Faction_GuardFinishRsp::has_fation_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Faction_GuardFinishRsp::set_has_fation_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Faction_GuardFinishRsp::clear_has_fation_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Faction_GuardFinishRsp::clear_fation_count() {
  fation_count_ = 0u;
  clear_has_fation_count();
}
inline ::google::protobuf::uint32 Faction_GuardFinishRsp::fation_count() const {
  return fation_count_;
}
inline void Faction_GuardFinishRsp::set_fation_count(::google::protobuf::uint32 value) {
  set_has_fation_count();
  fation_count_ = value;
}

// repeated .proto_ff.ComItem reward = 8;
inline int Faction_GuardFinishRsp::reward_size() const {
  return reward_.size();
}
inline void Faction_GuardFinishRsp::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::ComItem& Faction_GuardFinishRsp::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::ComItem* Faction_GuardFinishRsp::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::ComItem* Faction_GuardFinishRsp::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
Faction_GuardFinishRsp::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
Faction_GuardFinishRsp::mutable_reward() {
  return &reward_;
}

// repeated .proto_ff.ComItem faction_reward = 9;
inline int Faction_GuardFinishRsp::faction_reward_size() const {
  return faction_reward_.size();
}
inline void Faction_GuardFinishRsp::clear_faction_reward() {
  faction_reward_.Clear();
}
inline const ::proto_ff::ComItem& Faction_GuardFinishRsp::faction_reward(int index) const {
  return faction_reward_.Get(index);
}
inline ::proto_ff::ComItem* Faction_GuardFinishRsp::mutable_faction_reward(int index) {
  return faction_reward_.Mutable(index);
}
inline ::proto_ff::ComItem* Faction_GuardFinishRsp::add_faction_reward() {
  return faction_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >&
Faction_GuardFinishRsp::faction_reward() const {
  return faction_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItem >*
Faction_GuardFinishRsp::mutable_faction_reward() {
  return &faction_reward_;
}

// repeated .proto_ff.Faction_GuardWaveReward wave_reward = 10;
inline int Faction_GuardFinishRsp::wave_reward_size() const {
  return wave_reward_.size();
}
inline void Faction_GuardFinishRsp::clear_wave_reward() {
  wave_reward_.Clear();
}
inline const ::proto_ff::Faction_GuardWaveReward& Faction_GuardFinishRsp::wave_reward(int index) const {
  return wave_reward_.Get(index);
}
inline ::proto_ff::Faction_GuardWaveReward* Faction_GuardFinishRsp::mutable_wave_reward(int index) {
  return wave_reward_.Mutable(index);
}
inline ::proto_ff::Faction_GuardWaveReward* Faction_GuardFinishRsp::add_wave_reward() {
  return wave_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::Faction_GuardWaveReward >&
Faction_GuardFinishRsp::wave_reward() const {
  return wave_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::Faction_GuardWaveReward >*
Faction_GuardFinishRsp::mutable_wave_reward() {
  return &wave_reward_;
}

// -------------------------------------------------------------------

// Faction_GuardEncouragementReq

// optional int32 type = 1;
inline bool Faction_GuardEncouragementReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_GuardEncouragementReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_GuardEncouragementReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_GuardEncouragementReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Faction_GuardEncouragementReq::type() const {
  return type_;
}
inline void Faction_GuardEncouragementReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Faction_GuardEncouragementRsp

// optional int32 ret_code = 1;
inline bool Faction_GuardEncouragementRsp::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Faction_GuardEncouragementRsp::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Faction_GuardEncouragementRsp::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Faction_GuardEncouragementRsp::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 Faction_GuardEncouragementRsp::ret_code() const {
  return ret_code_;
}
inline void Faction_GuardEncouragementRsp::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional int32 type = 2;
inline bool Faction_GuardEncouragementRsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Faction_GuardEncouragementRsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Faction_GuardEncouragementRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Faction_GuardEncouragementRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Faction_GuardEncouragementRsp::type() const {
  return type_;
}
inline void Faction_GuardEncouragementRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// LS_FactionGuardCount

// required uint32 faction_id = 1;
inline bool LS_FactionGuardCount::has_faction_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LS_FactionGuardCount::set_has_faction_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LS_FactionGuardCount::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LS_FactionGuardCount::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 LS_FactionGuardCount::faction_id() const {
  return faction_id_;
}
inline void LS_FactionGuardCount::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// required bytes faction_name = 2;
inline bool LS_FactionGuardCount::has_faction_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LS_FactionGuardCount::set_has_faction_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LS_FactionGuardCount::clear_has_faction_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LS_FactionGuardCount::clear_faction_name() {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    faction_name_->clear();
  }
  clear_has_faction_name();
}
inline const ::std::string& LS_FactionGuardCount::faction_name() const {
  return *faction_name_;
}
inline void LS_FactionGuardCount::set_faction_name(const ::std::string& value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void LS_FactionGuardCount::set_faction_name(const char* value) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(value);
}
inline void LS_FactionGuardCount::set_faction_name(const void* value, size_t size) {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  faction_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LS_FactionGuardCount::mutable_faction_name() {
  set_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    faction_name_ = new ::std::string;
  }
  return faction_name_;
}
inline ::std::string* LS_FactionGuardCount::release_faction_name() {
  clear_has_faction_name();
  if (faction_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = faction_name_;
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LS_FactionGuardCount::set_allocated_faction_name(::std::string* faction_name) {
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (faction_name) {
    set_has_faction_name();
    faction_name_ = faction_name;
  } else {
    clear_has_faction_name();
    faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 count = 3;
inline bool LS_FactionGuardCount::has_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LS_FactionGuardCount::set_has_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LS_FactionGuardCount::clear_has_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LS_FactionGuardCount::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 LS_FactionGuardCount::count() const {
  return count_;
}
inline void LS_FactionGuardCount::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
}

// required uint32 zid = 4;
inline bool LS_FactionGuardCount::has_zid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LS_FactionGuardCount::set_has_zid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LS_FactionGuardCount::clear_has_zid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LS_FactionGuardCount::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 LS_FactionGuardCount::zid() const {
  return zid_;
}
inline void LS_FactionGuardCount::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// required uint64 harm = 5;
inline bool LS_FactionGuardCount::has_harm() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LS_FactionGuardCount::set_has_harm() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LS_FactionGuardCount::clear_has_harm() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LS_FactionGuardCount::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 LS_FactionGuardCount::harm() const {
  return harm_;
}
inline void LS_FactionGuardCount::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// required uint64 time = 6;
inline bool LS_FactionGuardCount::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LS_FactionGuardCount::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LS_FactionGuardCount::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LS_FactionGuardCount::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 LS_FactionGuardCount::time() const {
  return time_;
}
inline void LS_FactionGuardCount::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// SL_FactionGuardRank

// optional .proto_ff.FactionGuardSocialRankListProto rank = 1;
inline bool SL_FactionGuardRank::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SL_FactionGuardRank::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SL_FactionGuardRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SL_FactionGuardRank::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::FactionGuardSocialRankListProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::FactionGuardSocialRankListProto& SL_FactionGuardRank::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::FactionGuardSocialRankListProto* SL_FactionGuardRank::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::FactionGuardSocialRankListProto;
  return rank_;
}
inline ::proto_ff::FactionGuardSocialRankListProto* SL_FactionGuardRank::release_rank() {
  clear_has_rank();
  ::proto_ff::FactionGuardSocialRankListProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void SL_FactionGuardRank::set_allocated_rank(::proto_ff::FactionGuardSocialRankListProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// -------------------------------------------------------------------

// SL_FactionGuardCurRankReq

// required uint64 cid = 1;
inline bool SL_FactionGuardCurRankReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SL_FactionGuardCurRankReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SL_FactionGuardCurRankReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SL_FactionGuardCurRankReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 SL_FactionGuardCurRankReq::cid() const {
  return cid_;
}
inline void SL_FactionGuardCurRankReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// -------------------------------------------------------------------

// SC_FactionGuardRankResultNotify

// optional .proto_ff.FactionGuardSocialRankProto rank = 1;
inline bool SC_FactionGuardRankResultNotify::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SC_FactionGuardRankResultNotify::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SC_FactionGuardRankResultNotify::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SC_FactionGuardRankResultNotify::clear_rank() {
  if (rank_ != NULL) rank_->::proto_ff::FactionGuardSocialRankProto::Clear();
  clear_has_rank();
}
inline const ::proto_ff::FactionGuardSocialRankProto& SC_FactionGuardRankResultNotify::rank() const {
  return rank_ != NULL ? *rank_ : *default_instance_->rank_;
}
inline ::proto_ff::FactionGuardSocialRankProto* SC_FactionGuardRankResultNotify::mutable_rank() {
  set_has_rank();
  if (rank_ == NULL) rank_ = new ::proto_ff::FactionGuardSocialRankProto;
  return rank_;
}
inline ::proto_ff::FactionGuardSocialRankProto* SC_FactionGuardRankResultNotify::release_rank() {
  clear_has_rank();
  ::proto_ff::FactionGuardSocialRankProto* temp = rank_;
  rank_ = NULL;
  return temp;
}
inline void SC_FactionGuardRankResultNotify::set_allocated_rank(::proto_ff::FactionGuardSocialRankProto* rank) {
  delete rank_;
  rank_ = rank;
  if (rank) {
    set_has_rank();
  } else {
    clear_has_rank();
  }
}

// -------------------------------------------------------------------

// LS_FactionGuardEndRsp

// required uint32 factionid = 1;
inline bool LS_FactionGuardEndRsp::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LS_FactionGuardEndRsp::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LS_FactionGuardEndRsp::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LS_FactionGuardEndRsp::clear_factionid() {
  factionid_ = 0u;
  clear_has_factionid();
}
inline ::google::protobuf::uint32 LS_FactionGuardEndRsp::factionid() const {
  return factionid_;
}
inline void LS_FactionGuardEndRsp::set_factionid(::google::protobuf::uint32 value) {
  set_has_factionid();
  factionid_ = value;
}

// required uint32 zid = 2;
inline bool LS_FactionGuardEndRsp::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LS_FactionGuardEndRsp::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LS_FactionGuardEndRsp::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LS_FactionGuardEndRsp::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 LS_FactionGuardEndRsp::zid() const {
  return zid_;
}
inline void LS_FactionGuardEndRsp::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// required uint64 endtime = 3;
inline bool LS_FactionGuardEndRsp::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LS_FactionGuardEndRsp::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LS_FactionGuardEndRsp::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LS_FactionGuardEndRsp::clear_endtime() {
  endtime_ = GOOGLE_ULONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::uint64 LS_FactionGuardEndRsp::endtime() const {
  return endtime_;
}
inline void LS_FactionGuardEndRsp::set_endtime(::google::protobuf::uint64 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// LC_FactionGuardEndRsp

// required uint32 factionid = 1;
inline bool LC_FactionGuardEndRsp::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LC_FactionGuardEndRsp::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LC_FactionGuardEndRsp::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LC_FactionGuardEndRsp::clear_factionid() {
  factionid_ = 0u;
  clear_has_factionid();
}
inline ::google::protobuf::uint32 LC_FactionGuardEndRsp::factionid() const {
  return factionid_;
}
inline void LC_FactionGuardEndRsp::set_factionid(::google::protobuf::uint32 value) {
  set_has_factionid();
  factionid_ = value;
}

// repeated uint64 cid_lst = 2;
inline int LC_FactionGuardEndRsp::cid_lst_size() const {
  return cid_lst_.size();
}
inline void LC_FactionGuardEndRsp::clear_cid_lst() {
  cid_lst_.Clear();
}
inline ::google::protobuf::uint64 LC_FactionGuardEndRsp::cid_lst(int index) const {
  return cid_lst_.Get(index);
}
inline void LC_FactionGuardEndRsp::set_cid_lst(int index, ::google::protobuf::uint64 value) {
  cid_lst_.Set(index, value);
}
inline void LC_FactionGuardEndRsp::add_cid_lst(::google::protobuf::uint64 value) {
  cid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
LC_FactionGuardEndRsp::cid_lst() const {
  return cid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
LC_FactionGuardEndRsp::mutable_cid_lst() {
  return &cid_lst_;
}

// repeated .proto_ff.ComItemBind reward = 3;
inline int LC_FactionGuardEndRsp::reward_size() const {
  return reward_.size();
}
inline void LC_FactionGuardEndRsp::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::ComItemBind& LC_FactionGuardEndRsp::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::ComItemBind* LC_FactionGuardEndRsp::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::ComItemBind* LC_FactionGuardEndRsp::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind >&
LC_FactionGuardEndRsp::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComItemBind >*
LC_FactionGuardEndRsp::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// GuardPlayerHarm

// required uint64 cid = 1;
inline bool GuardPlayerHarm::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GuardPlayerHarm::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GuardPlayerHarm::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GuardPlayerHarm::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 GuardPlayerHarm::cid() const {
  return cid_;
}
inline void GuardPlayerHarm::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required uint64 harm = 2;
inline bool GuardPlayerHarm::has_harm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GuardPlayerHarm::set_has_harm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GuardPlayerHarm::clear_has_harm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GuardPlayerHarm::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 GuardPlayerHarm::harm() const {
  return harm_;
}
inline void GuardPlayerHarm::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// -------------------------------------------------------------------

// LC_FactionGuardPlayerHarm

// repeated .proto_ff.GuardPlayerHarm players = 1;
inline int LC_FactionGuardPlayerHarm::players_size() const {
  return players_.size();
}
inline void LC_FactionGuardPlayerHarm::clear_players() {
  players_.Clear();
}
inline const ::proto_ff::GuardPlayerHarm& LC_FactionGuardPlayerHarm::players(int index) const {
  return players_.Get(index);
}
inline ::proto_ff::GuardPlayerHarm* LC_FactionGuardPlayerHarm::mutable_players(int index) {
  return players_.Mutable(index);
}
inline ::proto_ff::GuardPlayerHarm* LC_FactionGuardPlayerHarm::add_players() {
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardPlayerHarm >&
LC_FactionGuardPlayerHarm::players() const {
  return players_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::GuardPlayerHarm >*
LC_FactionGuardPlayerHarm::mutable_players() {
  return &players_;
}

// required uint32 logicid = 2;
inline bool LC_FactionGuardPlayerHarm::has_logicid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LC_FactionGuardPlayerHarm::set_has_logicid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LC_FactionGuardPlayerHarm::clear_has_logicid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LC_FactionGuardPlayerHarm::clear_logicid() {
  logicid_ = 0u;
  clear_has_logicid();
}
inline ::google::protobuf::uint32 LC_FactionGuardPlayerHarm::logicid() const {
  return logicid_;
}
inline void LC_FactionGuardPlayerHarm::set_logicid(::google::protobuf::uint32 value) {
  set_has_logicid();
  logicid_ = value;
}

// required uint32 faction_id = 3;
inline bool LC_FactionGuardPlayerHarm::has_faction_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LC_FactionGuardPlayerHarm::set_has_faction_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LC_FactionGuardPlayerHarm::clear_has_faction_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LC_FactionGuardPlayerHarm::clear_faction_id() {
  faction_id_ = 0u;
  clear_has_faction_id();
}
inline ::google::protobuf::uint32 LC_FactionGuardPlayerHarm::faction_id() const {
  return faction_id_;
}
inline void LC_FactionGuardPlayerHarm::set_faction_id(::google::protobuf::uint32 value) {
  set_has_faction_id();
  faction_id_ = value;
}

// required uint64 scene_id = 4;
inline bool LC_FactionGuardPlayerHarm::has_scene_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LC_FactionGuardPlayerHarm::set_has_scene_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LC_FactionGuardPlayerHarm::clear_has_scene_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LC_FactionGuardPlayerHarm::clear_scene_id() {
  scene_id_ = GOOGLE_ULONGLONG(0);
  clear_has_scene_id();
}
inline ::google::protobuf::uint64 LC_FactionGuardPlayerHarm::scene_id() const {
  return scene_id_;
}
inline void LC_FactionGuardPlayerHarm::set_scene_id(::google::protobuf::uint64 value) {
  set_has_scene_id();
  scene_id_ = value;
}

// -------------------------------------------------------------------

// SC_FactionAnswerFinalRsp

// repeated .proto_ff.FactionAnswerFinalProto final = 1;
inline int SC_FactionAnswerFinalRsp::final_size() const {
  return final_.size();
}
inline void SC_FactionAnswerFinalRsp::clear_final() {
  final_.Clear();
}
inline const ::proto_ff::FactionAnswerFinalProto& SC_FactionAnswerFinalRsp::final(int index) const {
  return final_.Get(index);
}
inline ::proto_ff::FactionAnswerFinalProto* SC_FactionAnswerFinalRsp::mutable_final(int index) {
  return final_.Mutable(index);
}
inline ::proto_ff::FactionAnswerFinalProto* SC_FactionAnswerFinalRsp::add_final() {
  return final_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto >&
SC_FactionAnswerFinalRsp::final() const {
  return final_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionAnswerFinalProto >*
SC_FactionAnswerFinalRsp::mutable_final() {
  return &final_;
}

// -------------------------------------------------------------------

// CL_FactionAnswerQuestionRsp

// required uint64 cid = 1;
inline bool CL_FactionAnswerQuestionRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CL_FactionAnswerQuestionRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CL_FactionAnswerQuestionRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CL_FactionAnswerQuestionRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CL_FactionAnswerQuestionRsp::cid() const {
  return cid_;
}
inline void CL_FactionAnswerQuestionRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required int32 first = 2;
inline bool CL_FactionAnswerQuestionRsp::has_first() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CL_FactionAnswerQuestionRsp::set_has_first() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CL_FactionAnswerQuestionRsp::clear_has_first() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CL_FactionAnswerQuestionRsp::clear_first() {
  first_ = 0;
  clear_has_first();
}
inline ::google::protobuf::int32 CL_FactionAnswerQuestionRsp::first() const {
  return first_;
}
inline void CL_FactionAnswerQuestionRsp::set_first(::google::protobuf::int32 value) {
  set_has_first();
  first_ = value;
}

// required int32 curnum = 3;
inline bool CL_FactionAnswerQuestionRsp::has_curnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CL_FactionAnswerQuestionRsp::set_has_curnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CL_FactionAnswerQuestionRsp::clear_has_curnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CL_FactionAnswerQuestionRsp::clear_curnum() {
  curnum_ = 0;
  clear_has_curnum();
}
inline ::google::protobuf::int32 CL_FactionAnswerQuestionRsp::curnum() const {
  return curnum_;
}
inline void CL_FactionAnswerQuestionRsp::set_curnum(::google::protobuf::int32 value) {
  set_has_curnum();
  curnum_ = value;
}

// required bytes content = 4;
inline bool CL_FactionAnswerQuestionRsp::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CL_FactionAnswerQuestionRsp::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CL_FactionAnswerQuestionRsp::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CL_FactionAnswerQuestionRsp::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CL_FactionAnswerQuestionRsp::content() const {
  return *content_;
}
inline void CL_FactionAnswerQuestionRsp::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CL_FactionAnswerQuestionRsp::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CL_FactionAnswerQuestionRsp::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CL_FactionAnswerQuestionRsp::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* CL_FactionAnswerQuestionRsp::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CL_FactionAnswerQuestionRsp::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FactionMoyuRankEntry

// optional uint64 id = 1;
inline bool FactionMoyuRankEntry::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuRankEntry::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuRankEntry::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuRankEntry::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 FactionMoyuRankEntry::id() const {
  return id_;
}
inline void FactionMoyuRankEntry::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 2;
inline bool FactionMoyuRankEntry::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMoyuRankEntry::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMoyuRankEntry::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMoyuRankEntry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionMoyuRankEntry::name() const {
  return *name_;
}
inline void FactionMoyuRankEntry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMoyuRankEntry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMoyuRankEntry::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionMoyuRankEntry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionMoyuRankEntry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionMoyuRankEntry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 zid = 3;
inline bool FactionMoyuRankEntry::has_zid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMoyuRankEntry::set_has_zid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMoyuRankEntry::clear_has_zid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMoyuRankEntry::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 FactionMoyuRankEntry::zid() const {
  return zid_;
}
inline void FactionMoyuRankEntry::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 harm = 4;
inline bool FactionMoyuRankEntry::has_harm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMoyuRankEntry::set_has_harm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMoyuRankEntry::clear_has_harm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMoyuRankEntry::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 FactionMoyuRankEntry::harm() const {
  return harm_;
}
inline void FactionMoyuRankEntry::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// optional int32 rank = 5;
inline bool FactionMoyuRankEntry::has_rank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionMoyuRankEntry::set_has_rank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionMoyuRankEntry::clear_has_rank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionMoyuRankEntry::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionMoyuRankEntry::rank() const {
  return rank_;
}
inline void FactionMoyuRankEntry::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// FactionMoyuRankReq

// optional int32 type = 1;
inline bool FactionMoyuRankReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuRankReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuRankReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuRankReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FactionMoyuRankReq::type() const {
  return type_;
}
inline void FactionMoyuRankReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// NtFactionMoyuRank

// optional int32 type = 1;
inline bool NtFactionMoyuRank::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtFactionMoyuRank::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtFactionMoyuRank::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtFactionMoyuRank::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 NtFactionMoyuRank::type() const {
  return type_;
}
inline void NtFactionMoyuRank::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .proto_ff.FactionMoyuRankEntry infos = 2;
inline int NtFactionMoyuRank::infos_size() const {
  return infos_.size();
}
inline void NtFactionMoyuRank::clear_infos() {
  infos_.Clear();
}
inline const ::proto_ff::FactionMoyuRankEntry& NtFactionMoyuRank::infos(int index) const {
  return infos_.Get(index);
}
inline ::proto_ff::FactionMoyuRankEntry* NtFactionMoyuRank::mutable_infos(int index) {
  return infos_.Mutable(index);
}
inline ::proto_ff::FactionMoyuRankEntry* NtFactionMoyuRank::add_infos() {
  return infos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuRankEntry >&
NtFactionMoyuRank::infos() const {
  return infos_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuRankEntry >*
NtFactionMoyuRank::mutable_infos() {
  return &infos_;
}

// optional uint64 harm = 3;
inline bool NtFactionMoyuRank::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtFactionMoyuRank::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtFactionMoyuRank::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtFactionMoyuRank::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 NtFactionMoyuRank::harm() const {
  return harm_;
}
inline void NtFactionMoyuRank::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// optional int32 rank = 4;
inline bool NtFactionMoyuRank::has_rank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtFactionMoyuRank::set_has_rank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtFactionMoyuRank::clear_has_rank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtFactionMoyuRank::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 NtFactionMoyuRank::rank() const {
  return rank_;
}
inline void NtFactionMoyuRank::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// FactionMoyuRecvReq

// optional int32 layerid = 1;
inline bool FactionMoyuRecvReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuRecvReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuRecvReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuRecvReq::clear_layerid() {
  layerid_ = 0;
  clear_has_layerid();
}
inline ::google::protobuf::int32 FactionMoyuRecvReq::layerid() const {
  return layerid_;
}
inline void FactionMoyuRecvReq::set_layerid(::google::protobuf::int32 value) {
  set_has_layerid();
  layerid_ = value;
}

// -------------------------------------------------------------------

// FactionMoyuRecvRsp

// optional int32 ret = 1;
inline bool FactionMoyuRecvRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuRecvRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuRecvRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuRecvRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 FactionMoyuRecvRsp::ret() const {
  return ret_;
}
inline void FactionMoyuRecvRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 layerid = 2;
inline bool FactionMoyuRecvRsp::has_layerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMoyuRecvRsp::set_has_layerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMoyuRecvRsp::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMoyuRecvRsp::clear_layerid() {
  layerid_ = 0;
  clear_has_layerid();
}
inline ::google::protobuf::int32 FactionMoyuRecvRsp::layerid() const {
  return layerid_;
}
inline void FactionMoyuRecvRsp::set_layerid(::google::protobuf::int32 value) {
  set_has_layerid();
  layerid_ = value;
}

// -------------------------------------------------------------------

// NotifyFactionMoyuDup

// optional uint64 target_cid = 1;
inline bool NotifyFactionMoyuDup::has_target_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFactionMoyuDup::set_has_target_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFactionMoyuDup::clear_has_target_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFactionMoyuDup::clear_target_cid() {
  target_cid_ = GOOGLE_ULONGLONG(0);
  clear_has_target_cid();
}
inline ::google::protobuf::uint64 NotifyFactionMoyuDup::target_cid() const {
  return target_cid_;
}
inline void NotifyFactionMoyuDup::set_target_cid(::google::protobuf::uint64 value) {
  set_has_target_cid();
  target_cid_ = value;
}

// optional uint64 max_hp = 2;
inline bool NotifyFactionMoyuDup::has_max_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyFactionMoyuDup::set_has_max_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyFactionMoyuDup::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyFactionMoyuDup::clear_max_hp() {
  max_hp_ = GOOGLE_ULONGLONG(0);
  clear_has_max_hp();
}
inline ::google::protobuf::uint64 NotifyFactionMoyuDup::max_hp() const {
  return max_hp_;
}
inline void NotifyFactionMoyuDup::set_max_hp(::google::protobuf::uint64 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional uint64 cur_hp = 3;
inline bool NotifyFactionMoyuDup::has_cur_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyFactionMoyuDup::set_has_cur_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyFactionMoyuDup::clear_has_cur_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyFactionMoyuDup::clear_cur_hp() {
  cur_hp_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_hp();
}
inline ::google::protobuf::uint64 NotifyFactionMoyuDup::cur_hp() const {
  return cur_hp_;
}
inline void NotifyFactionMoyuDup::set_cur_hp(::google::protobuf::uint64 value) {
  set_has_cur_hp();
  cur_hp_ = value;
}

// -------------------------------------------------------------------

// FactionMoyuTeam

// optional .proto_ff.RolePlayerMiniInfo info = 1;
inline bool FactionMoyuTeam::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuTeam::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuTeam::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuTeam::clear_info() {
  if (info_ != NULL) info_->::proto_ff::RolePlayerMiniInfo::Clear();
  clear_has_info();
}
inline const ::proto_ff::RolePlayerMiniInfo& FactionMoyuTeam::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::proto_ff::RolePlayerMiniInfo* FactionMoyuTeam::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::proto_ff::RolePlayerMiniInfo;
  return info_;
}
inline ::proto_ff::RolePlayerMiniInfo* FactionMoyuTeam::release_info() {
  clear_has_info();
  ::proto_ff::RolePlayerMiniInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void FactionMoyuTeam::set_allocated_info(::proto_ff::RolePlayerMiniInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// optional uint64 harm = 2;
inline bool FactionMoyuTeam::has_harm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMoyuTeam::set_has_harm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMoyuTeam::clear_has_harm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMoyuTeam::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 FactionMoyuTeam::harm() const {
  return harm_;
}
inline void FactionMoyuTeam::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// optional uint32 state = 3;
inline bool FactionMoyuTeam::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMoyuTeam::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMoyuTeam::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMoyuTeam::clear_state() {
  state_ = 0u;
  clear_has_state();
}
inline ::google::protobuf::uint32 FactionMoyuTeam::state() const {
  return state_;
}
inline void FactionMoyuTeam::set_state(::google::protobuf::uint32 value) {
  set_has_state();
  state_ = value;
}

// optional uint64 max_hp = 4;
inline bool FactionMoyuTeam::has_max_hp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMoyuTeam::set_has_max_hp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMoyuTeam::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMoyuTeam::clear_max_hp() {
  max_hp_ = GOOGLE_ULONGLONG(0);
  clear_has_max_hp();
}
inline ::google::protobuf::uint64 FactionMoyuTeam::max_hp() const {
  return max_hp_;
}
inline void FactionMoyuTeam::set_max_hp(::google::protobuf::uint64 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// repeated .proto_ff.ItemProtoInfo rewaditem = 5;
inline int FactionMoyuTeam::rewaditem_size() const {
  return rewaditem_.size();
}
inline void FactionMoyuTeam::clear_rewaditem() {
  rewaditem_.Clear();
}
inline const ::proto_ff::ItemProtoInfo& FactionMoyuTeam::rewaditem(int index) const {
  return rewaditem_.Get(index);
}
inline ::proto_ff::ItemProtoInfo* FactionMoyuTeam::mutable_rewaditem(int index) {
  return rewaditem_.Mutable(index);
}
inline ::proto_ff::ItemProtoInfo* FactionMoyuTeam::add_rewaditem() {
  return rewaditem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >&
FactionMoyuTeam::rewaditem() const {
  return rewaditem_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ItemProtoInfo >*
FactionMoyuTeam::mutable_rewaditem() {
  return &rewaditem_;
}

// -------------------------------------------------------------------

// FactionMoyuEndRsp

// optional uint64 dupid = 1;
inline bool FactionMoyuEndRsp::has_dupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuEndRsp::set_has_dupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuEndRsp::clear_has_dupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuEndRsp::clear_dupid() {
  dupid_ = GOOGLE_ULONGLONG(0);
  clear_has_dupid();
}
inline ::google::protobuf::uint64 FactionMoyuEndRsp::dupid() const {
  return dupid_;
}
inline void FactionMoyuEndRsp::set_dupid(::google::protobuf::uint64 value) {
  set_has_dupid();
  dupid_ = value;
}

// repeated .proto_ff.FactionMoyuTeam mem = 2;
inline int FactionMoyuEndRsp::mem_size() const {
  return mem_.size();
}
inline void FactionMoyuEndRsp::clear_mem() {
  mem_.Clear();
}
inline const ::proto_ff::FactionMoyuTeam& FactionMoyuEndRsp::mem(int index) const {
  return mem_.Get(index);
}
inline ::proto_ff::FactionMoyuTeam* FactionMoyuEndRsp::mutable_mem(int index) {
  return mem_.Mutable(index);
}
inline ::proto_ff::FactionMoyuTeam* FactionMoyuEndRsp::add_mem() {
  return mem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam >&
FactionMoyuEndRsp::mem() const {
  return mem_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam >*
FactionMoyuEndRsp::mutable_mem() {
  return &mem_;
}

// -------------------------------------------------------------------

// FactionMoyuReq

// -------------------------------------------------------------------

// NtFactionMoyuHarm

// repeated .proto_ff.FactionMoyuTeam mem = 1;
inline int NtFactionMoyuHarm::mem_size() const {
  return mem_.size();
}
inline void NtFactionMoyuHarm::clear_mem() {
  mem_.Clear();
}
inline const ::proto_ff::FactionMoyuTeam& NtFactionMoyuHarm::mem(int index) const {
  return mem_.Get(index);
}
inline ::proto_ff::FactionMoyuTeam* NtFactionMoyuHarm::mutable_mem(int index) {
  return mem_.Mutable(index);
}
inline ::proto_ff::FactionMoyuTeam* NtFactionMoyuHarm::add_mem() {
  return mem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam >&
NtFactionMoyuHarm::mem() const {
  return mem_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::FactionMoyuTeam >*
NtFactionMoyuHarm::mutable_mem() {
  return &mem_;
}

// -------------------------------------------------------------------

// NtFactionMoyuDupKill

// optional int32 endtime = 1;
inline bool NtFactionMoyuDupKill::has_endtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtFactionMoyuDupKill::set_has_endtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtFactionMoyuDupKill::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtFactionMoyuDupKill::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
inline ::google::protobuf::int32 NtFactionMoyuDupKill::endtime() const {
  return endtime_;
}
inline void NtFactionMoyuDupKill::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// NtFactionMoyu

// optional int32 cur_layer = 1;
inline bool NtFactionMoyu::has_cur_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NtFactionMoyu::set_has_cur_layer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NtFactionMoyu::clear_has_cur_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NtFactionMoyu::clear_cur_layer() {
  cur_layer_ = 0;
  clear_has_cur_layer();
}
inline ::google::protobuf::int32 NtFactionMoyu::cur_layer() const {
  return cur_layer_;
}
inline void NtFactionMoyu::set_cur_layer(::google::protobuf::int32 value) {
  set_has_cur_layer();
  cur_layer_ = value;
}

// optional uint64 cur_hp = 2;
inline bool NtFactionMoyu::has_cur_hp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NtFactionMoyu::set_has_cur_hp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NtFactionMoyu::clear_has_cur_hp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NtFactionMoyu::clear_cur_hp() {
  cur_hp_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_hp();
}
inline ::google::protobuf::uint64 NtFactionMoyu::cur_hp() const {
  return cur_hp_;
}
inline void NtFactionMoyu::set_cur_hp(::google::protobuf::uint64 value) {
  set_has_cur_hp();
  cur_hp_ = value;
}

// optional uint64 max_hp = 3;
inline bool NtFactionMoyu::has_max_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NtFactionMoyu::set_has_max_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NtFactionMoyu::clear_has_max_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NtFactionMoyu::clear_max_hp() {
  max_hp_ = GOOGLE_ULONGLONG(0);
  clear_has_max_hp();
}
inline ::google::protobuf::uint64 NtFactionMoyu::max_hp() const {
  return max_hp_;
}
inline void NtFactionMoyu::set_max_hp(::google::protobuf::uint64 value) {
  set_has_max_hp();
  max_hp_ = value;
}

// optional int32 pass_layer = 4;
inline bool NtFactionMoyu::has_pass_layer() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NtFactionMoyu::set_has_pass_layer() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NtFactionMoyu::clear_has_pass_layer() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NtFactionMoyu::clear_pass_layer() {
  pass_layer_ = 0;
  clear_has_pass_layer();
}
inline ::google::protobuf::int32 NtFactionMoyu::pass_layer() const {
  return pass_layer_;
}
inline void NtFactionMoyu::set_pass_layer(::google::protobuf::int32 value) {
  set_has_pass_layer();
  pass_layer_ = value;
}

// -------------------------------------------------------------------

// FactionMoyuRewardReq

// optional uint64 factionId = 1;
inline bool FactionMoyuRewardReq::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuRewardReq::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuRewardReq::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuRewardReq::clear_factionid() {
  factionid_ = GOOGLE_ULONGLONG(0);
  clear_has_factionid();
}
inline ::google::protobuf::uint64 FactionMoyuRewardReq::factionid() const {
  return factionid_;
}
inline void FactionMoyuRewardReq::set_factionid(::google::protobuf::uint64 value) {
  set_has_factionid();
  factionid_ = value;
}

// optional uint64 boxid = 2;
inline bool FactionMoyuRewardReq::has_boxid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMoyuRewardReq::set_has_boxid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMoyuRewardReq::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMoyuRewardReq::clear_boxid() {
  boxid_ = GOOGLE_ULONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::uint64 FactionMoyuRewardReq::boxid() const {
  return boxid_;
}
inline void FactionMoyuRewardReq::set_boxid(::google::protobuf::uint64 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int32 rank = 3;
inline bool FactionMoyuRewardReq::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMoyuRewardReq::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMoyuRewardReq::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMoyuRewardReq::clear_rank() {
  rank_ = 0;
  clear_has_rank();
}
inline ::google::protobuf::int32 FactionMoyuRewardReq::rank() const {
  return rank_;
}
inline void FactionMoyuRewardReq::set_rank(::google::protobuf::int32 value) {
  set_has_rank();
  rank_ = value;
}

// -------------------------------------------------------------------

// FactionMoyuUpdateReq

// optional int32 type = 1;
inline bool FactionMoyuUpdateReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuUpdateReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuUpdateReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuUpdateReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 FactionMoyuUpdateReq::type() const {
  return type_;
}
inline void FactionMoyuUpdateReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 opt = 2;
inline bool FactionMoyuUpdateReq::has_opt() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMoyuUpdateReq::set_has_opt() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMoyuUpdateReq::clear_has_opt() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMoyuUpdateReq::clear_opt() {
  opt_ = 0;
  clear_has_opt();
}
inline ::google::protobuf::int32 FactionMoyuUpdateReq::opt() const {
  return opt_;
}
inline void FactionMoyuUpdateReq::set_opt(::google::protobuf::int32 value) {
  set_has_opt();
  opt_ = value;
}

// optional uint64 id = 3;
inline bool FactionMoyuUpdateReq::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionMoyuUpdateReq::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionMoyuUpdateReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionMoyuUpdateReq::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 FactionMoyuUpdateReq::id() const {
  return id_;
}
inline void FactionMoyuUpdateReq::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional bytes name = 4;
inline bool FactionMoyuUpdateReq::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactionMoyuUpdateReq::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactionMoyuUpdateReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactionMoyuUpdateReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& FactionMoyuUpdateReq::name() const {
  return *name_;
}
inline void FactionMoyuUpdateReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMoyuUpdateReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void FactionMoyuUpdateReq::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactionMoyuUpdateReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* FactionMoyuUpdateReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactionMoyuUpdateReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 zid = 5;
inline bool FactionMoyuUpdateReq::has_zid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactionMoyuUpdateReq::set_has_zid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactionMoyuUpdateReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactionMoyuUpdateReq::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 FactionMoyuUpdateReq::zid() const {
  return zid_;
}
inline void FactionMoyuUpdateReq::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint64 harm = 6;
inline bool FactionMoyuUpdateReq::has_harm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactionMoyuUpdateReq::set_has_harm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactionMoyuUpdateReq::clear_has_harm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactionMoyuUpdateReq::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 FactionMoyuUpdateReq::harm() const {
  return harm_;
}
inline void FactionMoyuUpdateReq::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// optional uint64 harm_time = 7;
inline bool FactionMoyuUpdateReq::has_harm_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactionMoyuUpdateReq::set_has_harm_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactionMoyuUpdateReq::clear_has_harm_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactionMoyuUpdateReq::clear_harm_time() {
  harm_time_ = GOOGLE_ULONGLONG(0);
  clear_has_harm_time();
}
inline ::google::protobuf::uint64 FactionMoyuUpdateReq::harm_time() const {
  return harm_time_;
}
inline void FactionMoyuUpdateReq::set_harm_time(::google::protobuf::uint64 value) {
  set_has_harm_time();
  harm_time_ = value;
}

// -------------------------------------------------------------------

// FactionMoyuAddHarmReq

// optional uint64 factionid = 1;
inline bool FactionMoyuAddHarmReq::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuAddHarmReq::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuAddHarmReq::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuAddHarmReq::clear_factionid() {
  factionid_ = GOOGLE_ULONGLONG(0);
  clear_has_factionid();
}
inline ::google::protobuf::uint64 FactionMoyuAddHarmReq::factionid() const {
  return factionid_;
}
inline void FactionMoyuAddHarmReq::set_factionid(::google::protobuf::uint64 value) {
  set_has_factionid();
  factionid_ = value;
}

// optional uint64 add_harm = 2;
inline bool FactionMoyuAddHarmReq::has_add_harm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMoyuAddHarmReq::set_has_add_harm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMoyuAddHarmReq::clear_has_add_harm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMoyuAddHarmReq::clear_add_harm() {
  add_harm_ = GOOGLE_ULONGLONG(0);
  clear_has_add_harm();
}
inline ::google::protobuf::uint64 FactionMoyuAddHarmReq::add_harm() const {
  return add_harm_;
}
inline void FactionMoyuAddHarmReq::set_add_harm(::google::protobuf::uint64 value) {
  set_has_add_harm();
  add_harm_ = value;
}

// -------------------------------------------------------------------

// FactionSynMoyuReq

// optional uint64 factionid = 1;
inline bool FactionSynMoyuReq::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionSynMoyuReq::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionSynMoyuReq::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionSynMoyuReq::clear_factionid() {
  factionid_ = GOOGLE_ULONGLONG(0);
  clear_has_factionid();
}
inline ::google::protobuf::uint64 FactionSynMoyuReq::factionid() const {
  return factionid_;
}
inline void FactionSynMoyuReq::set_factionid(::google::protobuf::uint64 value) {
  set_has_factionid();
  factionid_ = value;
}

// optional int32 cur_layer = 2;
inline bool FactionSynMoyuReq::has_cur_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionSynMoyuReq::set_has_cur_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionSynMoyuReq::clear_has_cur_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionSynMoyuReq::clear_cur_layer() {
  cur_layer_ = 0;
  clear_has_cur_layer();
}
inline ::google::protobuf::int32 FactionSynMoyuReq::cur_layer() const {
  return cur_layer_;
}
inline void FactionSynMoyuReq::set_cur_layer(::google::protobuf::int32 value) {
  set_has_cur_layer();
  cur_layer_ = value;
}

// optional uint64 cur_hp = 3;
inline bool FactionSynMoyuReq::has_cur_hp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactionSynMoyuReq::set_has_cur_hp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactionSynMoyuReq::clear_has_cur_hp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactionSynMoyuReq::clear_cur_hp() {
  cur_hp_ = GOOGLE_ULONGLONG(0);
  clear_has_cur_hp();
}
inline ::google::protobuf::uint64 FactionSynMoyuReq::cur_hp() const {
  return cur_hp_;
}
inline void FactionSynMoyuReq::set_cur_hp(::google::protobuf::uint64 value) {
  set_has_cur_hp();
  cur_hp_ = value;
}

// -------------------------------------------------------------------

// FactionMoyuPassReq

// optional uint64 factionid = 1;
inline bool FactionMoyuPassReq::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactionMoyuPassReq::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactionMoyuPassReq::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactionMoyuPassReq::clear_factionid() {
  factionid_ = GOOGLE_ULONGLONG(0);
  clear_has_factionid();
}
inline ::google::protobuf::uint64 FactionMoyuPassReq::factionid() const {
  return factionid_;
}
inline void FactionMoyuPassReq::set_factionid(::google::protobuf::uint64 value) {
  set_has_factionid();
  factionid_ = value;
}

// optional uint32 layerid = 2;
inline bool FactionMoyuPassReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactionMoyuPassReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactionMoyuPassReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactionMoyuPassReq::clear_layerid() {
  layerid_ = 0u;
  clear_has_layerid();
}
inline ::google::protobuf::uint32 FactionMoyuPassReq::layerid() const {
  return layerid_;
}
inline void FactionMoyuPassReq::set_layerid(::google::protobuf::uint32 value) {
  set_has_layerid();
  layerid_ = value;
}

// -------------------------------------------------------------------

// LCFactionMoyuRankReq

// optional uint64 factionid = 1;
inline bool LCFactionMoyuRankReq::has_factionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LCFactionMoyuRankReq::set_has_factionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LCFactionMoyuRankReq::clear_has_factionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LCFactionMoyuRankReq::clear_factionid() {
  factionid_ = GOOGLE_ULONGLONG(0);
  clear_has_factionid();
}
inline ::google::protobuf::uint64 LCFactionMoyuRankReq::factionid() const {
  return factionid_;
}
inline void LCFactionMoyuRankReq::set_factionid(::google::protobuf::uint64 value) {
  set_has_factionid();
  factionid_ = value;
}

// optional uint64 id = 2;
inline bool LCFactionMoyuRankReq::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LCFactionMoyuRankReq::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LCFactionMoyuRankReq::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LCFactionMoyuRankReq::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 LCFactionMoyuRankReq::id() const {
  return id_;
}
inline void LCFactionMoyuRankReq::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 harm = 3;
inline bool LCFactionMoyuRankReq::has_harm() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LCFactionMoyuRankReq::set_has_harm() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LCFactionMoyuRankReq::clear_has_harm() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LCFactionMoyuRankReq::clear_harm() {
  harm_ = GOOGLE_ULONGLONG(0);
  clear_has_harm();
}
inline ::google::protobuf::uint64 LCFactionMoyuRankReq::harm() const {
  return harm_;
}
inline void LCFactionMoyuRankReq::set_harm(::google::protobuf::uint64 value) {
  set_has_harm();
  harm_ = value;
}

// optional int32 type = 4;
inline bool LCFactionMoyuRankReq::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LCFactionMoyuRankReq::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LCFactionMoyuRankReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LCFactionMoyuRankReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 LCFactionMoyuRankReq::type() const {
  return type_;
}
inline void LCFactionMoyuRankReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 zid = 5;
inline bool LCFactionMoyuRankReq::has_zid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LCFactionMoyuRankReq::set_has_zid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LCFactionMoyuRankReq::clear_has_zid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LCFactionMoyuRankReq::clear_zid() {
  zid_ = 0;
  clear_has_zid();
}
inline ::google::protobuf::int32 LCFactionMoyuRankReq::zid() const {
  return zid_;
}
inline void LCFactionMoyuRankReq::set_zid(::google::protobuf::int32 value) {
  set_has_zid();
  zid_ = value;
}

// -------------------------------------------------------------------

// CLFactionMoyuRecvReq

// optional int32 layerid = 1;
inline bool CLFactionMoyuRecvReq::has_layerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CLFactionMoyuRecvReq::set_has_layerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CLFactionMoyuRecvReq::clear_has_layerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CLFactionMoyuRecvReq::clear_layerid() {
  layerid_ = 0;
  clear_has_layerid();
}
inline ::google::protobuf::int32 CLFactionMoyuRecvReq::layerid() const {
  return layerid_;
}
inline void CLFactionMoyuRecvReq::set_layerid(::google::protobuf::int32 value) {
  set_has_layerid();
  layerid_ = value;
}

// optional uint64 cid = 2;
inline bool CLFactionMoyuRecvReq::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CLFactionMoyuRecvReq::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CLFactionMoyuRecvReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CLFactionMoyuRecvReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 CLFactionMoyuRecvReq::cid() const {
  return cid_;
}
inline void CLFactionMoyuRecvReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Faction_2eproto__INCLUDED
