// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dragon.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Dragon.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* ShadowProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShadowProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaloProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaloProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_InfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_InfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_InfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_InfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_UpgradeReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_UpgradeReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_UpgradeRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_UpgradeRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_UseFragReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_UseFragReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_UseFragRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_UseFragRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_StarReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_StarReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_StarRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_StarRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_FatansyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_FatansyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_FatansyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_FatansyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_ShadowInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_ShadowInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Dragon_HaloInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Dragon_HaloInfoRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Dragon_2eproto() {
  protobuf_AddDesc_Dragon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Dragon.proto");
  GOOGLE_CHECK(file != NULL);
  ShadowProto_descriptor_ = file->message_type(0);
  static const int ShadowProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowProto, lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowProto, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowProto, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowProto, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowProto, frag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowProto, curstar_),
  };
  ShadowProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShadowProto_descriptor_,
      ShadowProto::default_instance_,
      ShadowProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShadowProto));
  HaloProto_descriptor_ = file->message_type(1);
  static const int HaloProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloProto, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloProto, curid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloProto, curstar_),
  };
  HaloProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaloProto_descriptor_,
      HaloProto::default_instance_,
      HaloProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaloProto));
  Dragon_InfoReq_descriptor_ = file->message_type(2);
  static const int Dragon_InfoReq_offsets_[1] = {
  };
  Dragon_InfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_InfoReq_descriptor_,
      Dragon_InfoReq::default_instance_,
      Dragon_InfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_InfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_InfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_InfoReq));
  Dragon_InfoRsp_descriptor_ = file->message_type(3);
  static const int Dragon_InfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_InfoRsp, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_InfoRsp, halo_),
  };
  Dragon_InfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_InfoRsp_descriptor_,
      Dragon_InfoRsp::default_instance_,
      Dragon_InfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_InfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_InfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_InfoRsp));
  Dragon_UpgradeReq_descriptor_ = file->message_type(4);
  static const int Dragon_UpgradeReq_offsets_[1] = {
  };
  Dragon_UpgradeReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_UpgradeReq_descriptor_,
      Dragon_UpgradeReq::default_instance_,
      Dragon_UpgradeReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UpgradeReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UpgradeReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_UpgradeReq));
  Dragon_UpgradeRsp_descriptor_ = file->message_type(5);
  static const int Dragon_UpgradeRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UpgradeRsp, ret_),
  };
  Dragon_UpgradeRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_UpgradeRsp_descriptor_,
      Dragon_UpgradeRsp::default_instance_,
      Dragon_UpgradeRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UpgradeRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UpgradeRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_UpgradeRsp));
  Dragon_UseFragReq_descriptor_ = file->message_type(6);
  static const int Dragon_UseFragReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UseFragReq, fragid_),
  };
  Dragon_UseFragReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_UseFragReq_descriptor_,
      Dragon_UseFragReq::default_instance_,
      Dragon_UseFragReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UseFragReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UseFragReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_UseFragReq));
  Dragon_UseFragRsp_descriptor_ = file->message_type(7);
  static const int Dragon_UseFragRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UseFragRsp, ret_),
  };
  Dragon_UseFragRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_UseFragRsp_descriptor_,
      Dragon_UseFragRsp::default_instance_,
      Dragon_UseFragRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UseFragRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_UseFragRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_UseFragRsp));
  Dragon_StarReq_descriptor_ = file->message_type(8);
  static const int Dragon_StarReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_StarReq, id_),
  };
  Dragon_StarReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_StarReq_descriptor_,
      Dragon_StarReq::default_instance_,
      Dragon_StarReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_StarReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_StarReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_StarReq));
  Dragon_StarRsp_descriptor_ = file->message_type(9);
  static const int Dragon_StarRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_StarRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_StarRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_StarRsp, star_),
  };
  Dragon_StarRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_StarRsp_descriptor_,
      Dragon_StarRsp::default_instance_,
      Dragon_StarRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_StarRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_StarRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_StarRsp));
  Dragon_FatansyReq_descriptor_ = file->message_type(10);
  static const int Dragon_FatansyReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_FatansyReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_FatansyReq, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_FatansyReq, undress_),
  };
  Dragon_FatansyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_FatansyReq_descriptor_,
      Dragon_FatansyReq::default_instance_,
      Dragon_FatansyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_FatansyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_FatansyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_FatansyReq));
  Dragon_FatansyRsp_descriptor_ = file->message_type(11);
  static const int Dragon_FatansyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_FatansyRsp, ret_),
  };
  Dragon_FatansyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_FatansyRsp_descriptor_,
      Dragon_FatansyRsp::default_instance_,
      Dragon_FatansyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_FatansyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_FatansyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_FatansyRsp));
  Dragon_ShadowInfoRsp_descriptor_ = file->message_type(12);
  static const int Dragon_ShadowInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_ShadowInfoRsp, shadow_),
  };
  Dragon_ShadowInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_ShadowInfoRsp_descriptor_,
      Dragon_ShadowInfoRsp::default_instance_,
      Dragon_ShadowInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_ShadowInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_ShadowInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_ShadowInfoRsp));
  Dragon_HaloInfoRsp_descriptor_ = file->message_type(13);
  static const int Dragon_HaloInfoRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_HaloInfoRsp, halo_),
  };
  Dragon_HaloInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Dragon_HaloInfoRsp_descriptor_,
      Dragon_HaloInfoRsp::default_instance_,
      Dragon_HaloInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_HaloInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Dragon_HaloInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Dragon_HaloInfoRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Dragon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShadowProto_descriptor_, &ShadowProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaloProto_descriptor_, &HaloProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_InfoReq_descriptor_, &Dragon_InfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_InfoRsp_descriptor_, &Dragon_InfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_UpgradeReq_descriptor_, &Dragon_UpgradeReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_UpgradeRsp_descriptor_, &Dragon_UpgradeRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_UseFragReq_descriptor_, &Dragon_UseFragReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_UseFragRsp_descriptor_, &Dragon_UseFragRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_StarReq_descriptor_, &Dragon_StarReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_StarRsp_descriptor_, &Dragon_StarRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_FatansyReq_descriptor_, &Dragon_FatansyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_FatansyRsp_descriptor_, &Dragon_FatansyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_ShadowInfoRsp_descriptor_, &Dragon_ShadowInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Dragon_HaloInfoRsp_descriptor_, &Dragon_HaloInfoRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Dragon_2eproto() {
  delete ShadowProto::default_instance_;
  delete ShadowProto_reflection_;
  delete HaloProto::default_instance_;
  delete HaloProto_reflection_;
  delete Dragon_InfoReq::default_instance_;
  delete Dragon_InfoReq_reflection_;
  delete Dragon_InfoRsp::default_instance_;
  delete Dragon_InfoRsp_reflection_;
  delete Dragon_UpgradeReq::default_instance_;
  delete Dragon_UpgradeReq_reflection_;
  delete Dragon_UpgradeRsp::default_instance_;
  delete Dragon_UpgradeRsp_reflection_;
  delete Dragon_UseFragReq::default_instance_;
  delete Dragon_UseFragReq_reflection_;
  delete Dragon_UseFragRsp::default_instance_;
  delete Dragon_UseFragRsp_reflection_;
  delete Dragon_StarReq::default_instance_;
  delete Dragon_StarReq_reflection_;
  delete Dragon_StarRsp::default_instance_;
  delete Dragon_StarRsp_reflection_;
  delete Dragon_FatansyReq::default_instance_;
  delete Dragon_FatansyReq_reflection_;
  delete Dragon_FatansyRsp::default_instance_;
  delete Dragon_FatansyRsp_reflection_;
  delete Dragon_ShadowInfoRsp::default_instance_;
  delete Dragon_ShadowInfoRsp_reflection_;
  delete Dragon_HaloInfoRsp::default_instance_;
  delete Dragon_HaloInfoRsp_reflection_;
}

void protobuf_AddDesc_Dragon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014Dragon.proto\022\010proto_ff\032\tCom.proto\032\017Com"
    "Define.proto\"v\n\013ShadowProto\022\013\n\003lev\030\001 \001(\005"
    "\022\013\n\003exp\030\002 \001(\005\022\014\n\004star\030\003 \001(\005\022\r\n\005lucky\030\004 \001"
    "(\005\022\037\n\004frag\030\005 \003(\0132\021.proto_ff.ComPair\022\017\n\007c"
    "urstar\030\006 \001(\005\"L\n\tHaloProto\022\037\n\004info\030\001 \003(\0132"
    "\021.proto_ff.ComPair\022\r\n\005curid\030\002 \001(\005\022\017\n\007cur"
    "star\030\003 \001(\005\"\020\n\016Dragon_InfoReq\"Z\n\016Dragon_I"
    "nfoRsp\022%\n\006shadow\030\001 \001(\0132\025.proto_ff.Shadow"
    "Proto\022!\n\004halo\030\002 \001(\0132\023.proto_ff.HaloProto"
    "\"\023\n\021Dragon_UpgradeReq\" \n\021Dragon_UpgradeR"
    "sp\022\013\n\003ret\030\001 \002(\005\"#\n\021Dragon_UseFragReq\022\016\n\006"
    "fragid\030\001 \001(\003\" \n\021Dragon_UseFragRsp\022\013\n\003ret"
    "\030\001 \002(\005\"\034\n\016Dragon_StarReq\022\n\n\002id\030\001 \001(\005\"7\n\016"
    "Dragon_StarRsp\022\013\n\003ret\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\022"
    "\014\n\004star\030\003 \001(\005\">\n\021Dragon_FatansyReq\022\n\n\002id"
    "\030\001 \001(\005\022\014\n\004star\030\002 \001(\005\022\017\n\007undress\030\003 \001(\005\" \n"
    "\021Dragon_FatansyRsp\022\013\n\003ret\030\001 \002(\005\"=\n\024Drago"
    "n_ShadowInfoRsp\022%\n\006shadow\030\001 \001(\0132\025.proto_"
    "ff.ShadowProto\"7\n\022Dragon_HaloInfoRsp\022!\n\004"
    "halo\030\001 \001(\0132\023.proto_ff.HaloProto", 791);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Dragon.proto", &protobuf_RegisterTypes);
  ShadowProto::default_instance_ = new ShadowProto();
  HaloProto::default_instance_ = new HaloProto();
  Dragon_InfoReq::default_instance_ = new Dragon_InfoReq();
  Dragon_InfoRsp::default_instance_ = new Dragon_InfoRsp();
  Dragon_UpgradeReq::default_instance_ = new Dragon_UpgradeReq();
  Dragon_UpgradeRsp::default_instance_ = new Dragon_UpgradeRsp();
  Dragon_UseFragReq::default_instance_ = new Dragon_UseFragReq();
  Dragon_UseFragRsp::default_instance_ = new Dragon_UseFragRsp();
  Dragon_StarReq::default_instance_ = new Dragon_StarReq();
  Dragon_StarRsp::default_instance_ = new Dragon_StarRsp();
  Dragon_FatansyReq::default_instance_ = new Dragon_FatansyReq();
  Dragon_FatansyRsp::default_instance_ = new Dragon_FatansyRsp();
  Dragon_ShadowInfoRsp::default_instance_ = new Dragon_ShadowInfoRsp();
  Dragon_HaloInfoRsp::default_instance_ = new Dragon_HaloInfoRsp();
  ShadowProto::default_instance_->InitAsDefaultInstance();
  HaloProto::default_instance_->InitAsDefaultInstance();
  Dragon_InfoReq::default_instance_->InitAsDefaultInstance();
  Dragon_InfoRsp::default_instance_->InitAsDefaultInstance();
  Dragon_UpgradeReq::default_instance_->InitAsDefaultInstance();
  Dragon_UpgradeRsp::default_instance_->InitAsDefaultInstance();
  Dragon_UseFragReq::default_instance_->InitAsDefaultInstance();
  Dragon_UseFragRsp::default_instance_->InitAsDefaultInstance();
  Dragon_StarReq::default_instance_->InitAsDefaultInstance();
  Dragon_StarRsp::default_instance_->InitAsDefaultInstance();
  Dragon_FatansyReq::default_instance_->InitAsDefaultInstance();
  Dragon_FatansyRsp::default_instance_->InitAsDefaultInstance();
  Dragon_ShadowInfoRsp::default_instance_->InitAsDefaultInstance();
  Dragon_HaloInfoRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Dragon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Dragon_2eproto {
  StaticDescriptorInitializer_Dragon_2eproto() {
    protobuf_AddDesc_Dragon_2eproto();
  }
} static_descriptor_initializer_Dragon_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShadowProto::kLevFieldNumber;
const int ShadowProto::kExpFieldNumber;
const int ShadowProto::kStarFieldNumber;
const int ShadowProto::kLuckyFieldNumber;
const int ShadowProto::kFragFieldNumber;
const int ShadowProto::kCurstarFieldNumber;
#endif  // !_MSC_VER

ShadowProto::ShadowProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShadowProto::InitAsDefaultInstance() {
}

ShadowProto::ShadowProto(const ShadowProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShadowProto::SharedCtor() {
  _cached_size_ = 0;
  lev_ = 0;
  exp_ = 0;
  star_ = 0;
  lucky_ = 0;
  curstar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShadowProto::~ShadowProto() {
  SharedDtor();
}

void ShadowProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShadowProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShadowProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShadowProto_descriptor_;
}

const ShadowProto& ShadowProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

ShadowProto* ShadowProto::default_instance_ = NULL;

ShadowProto* ShadowProto::New() const {
  return new ShadowProto;
}

void ShadowProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lev_ = 0;
    exp_ = 0;
    star_ = 0;
    lucky_ = 0;
    curstar_ = 0;
  }
  frag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShadowProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_)));
          set_has_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lucky;
        break;
      }

      // optional int32 lucky = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_frag;
        break;
      }

      // repeated .proto_ff.ComPair frag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_frag;
        if (input->ExpectTag(48)) goto parse_curstar;
        break;
      }

      // optional int32 curstar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curstar_)));
          set_has_curstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShadowProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lev = 1;
  if (has_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lev(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 lucky = 4;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lucky(), output);
  }

  // repeated .proto_ff.ComPair frag = 5;
  for (int i = 0; i < this->frag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->frag(i), output);
  }

  // optional int32 curstar = 6;
  if (has_curstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->curstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShadowProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lev = 1;
  if (has_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lev(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 lucky = 4;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lucky(), target);
  }

  // repeated .proto_ff.ComPair frag = 5;
  for (int i = 0; i < this->frag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->frag(i), target);
  }

  // optional int32 curstar = 6;
  if (has_curstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->curstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShadowProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lev = 1;
    if (has_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 lucky = 4;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky());
    }

    // optional int32 curstar = 6;
    if (has_curstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curstar());
    }

  }
  // repeated .proto_ff.ComPair frag = 5;
  total_size += 1 * this->frag_size();
  for (int i = 0; i < this->frag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShadowProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShadowProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShadowProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShadowProto::MergeFrom(const ShadowProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  frag_.MergeFrom(from.frag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lev()) {
      set_lev(from.lev());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_curstar()) {
      set_curstar(from.curstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShadowProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShadowProto::CopyFrom(const ShadowProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShadowProto::IsInitialized() const {

  return true;
}

void ShadowProto::Swap(ShadowProto* other) {
  if (other != this) {
    std::swap(lev_, other->lev_);
    std::swap(exp_, other->exp_);
    std::swap(star_, other->star_);
    std::swap(lucky_, other->lucky_);
    frag_.Swap(&other->frag_);
    std::swap(curstar_, other->curstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShadowProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShadowProto_descriptor_;
  metadata.reflection = ShadowProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HaloProto::kInfoFieldNumber;
const int HaloProto::kCuridFieldNumber;
const int HaloProto::kCurstarFieldNumber;
#endif  // !_MSC_VER

HaloProto::HaloProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaloProto::InitAsDefaultInstance() {
}

HaloProto::HaloProto(const HaloProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaloProto::SharedCtor() {
  _cached_size_ = 0;
  curid_ = 0;
  curstar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaloProto::~HaloProto() {
  SharedDtor();
}

void HaloProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaloProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaloProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaloProto_descriptor_;
}

const HaloProto& HaloProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

HaloProto* HaloProto::default_instance_ = NULL;

HaloProto* HaloProto::New() const {
  return new HaloProto;
}

void HaloProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    curid_ = 0;
    curstar_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaloProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_curid;
        break;
      }

      // optional int32 curid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curid_)));
          set_has_curid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curstar;
        break;
      }

      // optional int32 curstar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curstar_)));
          set_has_curstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaloProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional int32 curid = 2;
  if (has_curid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curid(), output);
  }

  // optional int32 curstar = 3;
  if (has_curstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaloProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional int32 curid = 2;
  if (has_curid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curid(), target);
  }

  // optional int32 curstar = 3;
  if (has_curstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaloProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 curid = 2;
    if (has_curid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curid());
    }

    // optional int32 curstar = 3;
    if (has_curstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curstar());
    }

  }
  // repeated .proto_ff.ComPair info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaloProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaloProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaloProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaloProto::MergeFrom(const HaloProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curid()) {
      set_curid(from.curid());
    }
    if (from.has_curstar()) {
      set_curstar(from.curstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaloProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaloProto::CopyFrom(const HaloProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaloProto::IsInitialized() const {

  return true;
}

void HaloProto::Swap(HaloProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(curid_, other->curid_);
    std::swap(curstar_, other->curstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaloProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaloProto_descriptor_;
  metadata.reflection = HaloProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Dragon_InfoReq::Dragon_InfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_InfoReq::InitAsDefaultInstance() {
}

Dragon_InfoReq::Dragon_InfoReq(const Dragon_InfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_InfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_InfoReq::~Dragon_InfoReq() {
  SharedDtor();
}

void Dragon_InfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dragon_InfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_InfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_InfoReq_descriptor_;
}

const Dragon_InfoReq& Dragon_InfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_InfoReq* Dragon_InfoReq::default_instance_ = NULL;

Dragon_InfoReq* Dragon_InfoReq::New() const {
  return new Dragon_InfoReq;
}

void Dragon_InfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_InfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Dragon_InfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_InfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_InfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_InfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_InfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_InfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_InfoReq::MergeFrom(const Dragon_InfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_InfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_InfoReq::CopyFrom(const Dragon_InfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_InfoReq::IsInitialized() const {

  return true;
}

void Dragon_InfoReq::Swap(Dragon_InfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_InfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_InfoReq_descriptor_;
  metadata.reflection = Dragon_InfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_InfoRsp::kShadowFieldNumber;
const int Dragon_InfoRsp::kHaloFieldNumber;
#endif  // !_MSC_VER

Dragon_InfoRsp::Dragon_InfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_InfoRsp::InitAsDefaultInstance() {
  shadow_ = const_cast< ::proto_ff::ShadowProto*>(&::proto_ff::ShadowProto::default_instance());
  halo_ = const_cast< ::proto_ff::HaloProto*>(&::proto_ff::HaloProto::default_instance());
}

Dragon_InfoRsp::Dragon_InfoRsp(const Dragon_InfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_InfoRsp::SharedCtor() {
  _cached_size_ = 0;
  shadow_ = NULL;
  halo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_InfoRsp::~Dragon_InfoRsp() {
  SharedDtor();
}

void Dragon_InfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete shadow_;
    delete halo_;
  }
}

void Dragon_InfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_InfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_InfoRsp_descriptor_;
}

const Dragon_InfoRsp& Dragon_InfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_InfoRsp* Dragon_InfoRsp::default_instance_ = NULL;

Dragon_InfoRsp* Dragon_InfoRsp::New() const {
  return new Dragon_InfoRsp;
}

void Dragon_InfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shadow()) {
      if (shadow_ != NULL) shadow_->::proto_ff::ShadowProto::Clear();
    }
    if (has_halo()) {
      if (halo_ != NULL) halo_->::proto_ff::HaloProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_InfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ShadowProto shadow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_halo;
        break;
      }

      // optional .proto_ff.HaloProto halo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_halo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_halo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_InfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ShadowProto shadow = 1;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shadow(), output);
  }

  // optional .proto_ff.HaloProto halo = 2;
  if (has_halo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->halo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_InfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ShadowProto shadow = 1;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shadow(), target);
  }

  // optional .proto_ff.HaloProto halo = 2;
  if (has_halo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->halo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_InfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ShadowProto shadow = 1;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow());
    }

    // optional .proto_ff.HaloProto halo = 2;
    if (has_halo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->halo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_InfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_InfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_InfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_InfoRsp::MergeFrom(const Dragon_InfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shadow()) {
      mutable_shadow()->::proto_ff::ShadowProto::MergeFrom(from.shadow());
    }
    if (from.has_halo()) {
      mutable_halo()->::proto_ff::HaloProto::MergeFrom(from.halo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_InfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_InfoRsp::CopyFrom(const Dragon_InfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_InfoRsp::IsInitialized() const {

  return true;
}

void Dragon_InfoRsp::Swap(Dragon_InfoRsp* other) {
  if (other != this) {
    std::swap(shadow_, other->shadow_);
    std::swap(halo_, other->halo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_InfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_InfoRsp_descriptor_;
  metadata.reflection = Dragon_InfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Dragon_UpgradeReq::Dragon_UpgradeReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_UpgradeReq::InitAsDefaultInstance() {
}

Dragon_UpgradeReq::Dragon_UpgradeReq(const Dragon_UpgradeReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_UpgradeReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_UpgradeReq::~Dragon_UpgradeReq() {
  SharedDtor();
}

void Dragon_UpgradeReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dragon_UpgradeReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_UpgradeReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_UpgradeReq_descriptor_;
}

const Dragon_UpgradeReq& Dragon_UpgradeReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_UpgradeReq* Dragon_UpgradeReq::default_instance_ = NULL;

Dragon_UpgradeReq* Dragon_UpgradeReq::New() const {
  return new Dragon_UpgradeReq;
}

void Dragon_UpgradeReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_UpgradeReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Dragon_UpgradeReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_UpgradeReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_UpgradeReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_UpgradeReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_UpgradeReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_UpgradeReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_UpgradeReq::MergeFrom(const Dragon_UpgradeReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_UpgradeReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_UpgradeReq::CopyFrom(const Dragon_UpgradeReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_UpgradeReq::IsInitialized() const {

  return true;
}

void Dragon_UpgradeReq::Swap(Dragon_UpgradeReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_UpgradeReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_UpgradeReq_descriptor_;
  metadata.reflection = Dragon_UpgradeReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_UpgradeRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Dragon_UpgradeRsp::Dragon_UpgradeRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_UpgradeRsp::InitAsDefaultInstance() {
}

Dragon_UpgradeRsp::Dragon_UpgradeRsp(const Dragon_UpgradeRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_UpgradeRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_UpgradeRsp::~Dragon_UpgradeRsp() {
  SharedDtor();
}

void Dragon_UpgradeRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dragon_UpgradeRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_UpgradeRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_UpgradeRsp_descriptor_;
}

const Dragon_UpgradeRsp& Dragon_UpgradeRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_UpgradeRsp* Dragon_UpgradeRsp::default_instance_ = NULL;

Dragon_UpgradeRsp* Dragon_UpgradeRsp::New() const {
  return new Dragon_UpgradeRsp;
}

void Dragon_UpgradeRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_UpgradeRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_UpgradeRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_UpgradeRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_UpgradeRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_UpgradeRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_UpgradeRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_UpgradeRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_UpgradeRsp::MergeFrom(const Dragon_UpgradeRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_UpgradeRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_UpgradeRsp::CopyFrom(const Dragon_UpgradeRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_UpgradeRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dragon_UpgradeRsp::Swap(Dragon_UpgradeRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_UpgradeRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_UpgradeRsp_descriptor_;
  metadata.reflection = Dragon_UpgradeRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_UseFragReq::kFragidFieldNumber;
#endif  // !_MSC_VER

Dragon_UseFragReq::Dragon_UseFragReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_UseFragReq::InitAsDefaultInstance() {
}

Dragon_UseFragReq::Dragon_UseFragReq(const Dragon_UseFragReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_UseFragReq::SharedCtor() {
  _cached_size_ = 0;
  fragid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_UseFragReq::~Dragon_UseFragReq() {
  SharedDtor();
}

void Dragon_UseFragReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dragon_UseFragReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_UseFragReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_UseFragReq_descriptor_;
}

const Dragon_UseFragReq& Dragon_UseFragReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_UseFragReq* Dragon_UseFragReq::default_instance_ = NULL;

Dragon_UseFragReq* Dragon_UseFragReq::New() const {
  return new Dragon_UseFragReq;
}

void Dragon_UseFragReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_UseFragReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 fragid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fragid_)));
          set_has_fragid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_UseFragReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 fragid = 1;
  if (has_fragid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->fragid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_UseFragReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 fragid = 1;
  if (has_fragid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->fragid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_UseFragReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 fragid = 1;
    if (has_fragid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fragid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_UseFragReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_UseFragReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_UseFragReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_UseFragReq::MergeFrom(const Dragon_UseFragReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragid()) {
      set_fragid(from.fragid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_UseFragReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_UseFragReq::CopyFrom(const Dragon_UseFragReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_UseFragReq::IsInitialized() const {

  return true;
}

void Dragon_UseFragReq::Swap(Dragon_UseFragReq* other) {
  if (other != this) {
    std::swap(fragid_, other->fragid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_UseFragReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_UseFragReq_descriptor_;
  metadata.reflection = Dragon_UseFragReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_UseFragRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Dragon_UseFragRsp::Dragon_UseFragRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_UseFragRsp::InitAsDefaultInstance() {
}

Dragon_UseFragRsp::Dragon_UseFragRsp(const Dragon_UseFragRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_UseFragRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_UseFragRsp::~Dragon_UseFragRsp() {
  SharedDtor();
}

void Dragon_UseFragRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dragon_UseFragRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_UseFragRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_UseFragRsp_descriptor_;
}

const Dragon_UseFragRsp& Dragon_UseFragRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_UseFragRsp* Dragon_UseFragRsp::default_instance_ = NULL;

Dragon_UseFragRsp* Dragon_UseFragRsp::New() const {
  return new Dragon_UseFragRsp;
}

void Dragon_UseFragRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_UseFragRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_UseFragRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_UseFragRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_UseFragRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_UseFragRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_UseFragRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_UseFragRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_UseFragRsp::MergeFrom(const Dragon_UseFragRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_UseFragRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_UseFragRsp::CopyFrom(const Dragon_UseFragRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_UseFragRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dragon_UseFragRsp::Swap(Dragon_UseFragRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_UseFragRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_UseFragRsp_descriptor_;
  metadata.reflection = Dragon_UseFragRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_StarReq::kIdFieldNumber;
#endif  // !_MSC_VER

Dragon_StarReq::Dragon_StarReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_StarReq::InitAsDefaultInstance() {
}

Dragon_StarReq::Dragon_StarReq(const Dragon_StarReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_StarReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_StarReq::~Dragon_StarReq() {
  SharedDtor();
}

void Dragon_StarReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dragon_StarReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_StarReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_StarReq_descriptor_;
}

const Dragon_StarReq& Dragon_StarReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_StarReq* Dragon_StarReq::default_instance_ = NULL;

Dragon_StarReq* Dragon_StarReq::New() const {
  return new Dragon_StarReq;
}

void Dragon_StarReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_StarReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_StarReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_StarReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_StarReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_StarReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_StarReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_StarReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_StarReq::MergeFrom(const Dragon_StarReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_StarReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_StarReq::CopyFrom(const Dragon_StarReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_StarReq::IsInitialized() const {

  return true;
}

void Dragon_StarReq::Swap(Dragon_StarReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_StarReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_StarReq_descriptor_;
  metadata.reflection = Dragon_StarReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_StarRsp::kRetFieldNumber;
const int Dragon_StarRsp::kIdFieldNumber;
const int Dragon_StarRsp::kStarFieldNumber;
#endif  // !_MSC_VER

Dragon_StarRsp::Dragon_StarRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_StarRsp::InitAsDefaultInstance() {
}

Dragon_StarRsp::Dragon_StarRsp(const Dragon_StarRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_StarRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_StarRsp::~Dragon_StarRsp() {
  SharedDtor();
}

void Dragon_StarRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dragon_StarRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_StarRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_StarRsp_descriptor_;
}

const Dragon_StarRsp& Dragon_StarRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_StarRsp* Dragon_StarRsp::default_instance_ = NULL;

Dragon_StarRsp* Dragon_StarRsp::New() const {
  return new Dragon_StarRsp;
}

void Dragon_StarRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_StarRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_StarRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_StarRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_StarRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_StarRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_StarRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_StarRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_StarRsp::MergeFrom(const Dragon_StarRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_StarRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_StarRsp::CopyFrom(const Dragon_StarRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_StarRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dragon_StarRsp::Swap(Dragon_StarRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_StarRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_StarRsp_descriptor_;
  metadata.reflection = Dragon_StarRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_FatansyReq::kIdFieldNumber;
const int Dragon_FatansyReq::kStarFieldNumber;
const int Dragon_FatansyReq::kUndressFieldNumber;
#endif  // !_MSC_VER

Dragon_FatansyReq::Dragon_FatansyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_FatansyReq::InitAsDefaultInstance() {
}

Dragon_FatansyReq::Dragon_FatansyReq(const Dragon_FatansyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_FatansyReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  star_ = 0;
  undress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_FatansyReq::~Dragon_FatansyReq() {
  SharedDtor();
}

void Dragon_FatansyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dragon_FatansyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_FatansyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_FatansyReq_descriptor_;
}

const Dragon_FatansyReq& Dragon_FatansyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_FatansyReq* Dragon_FatansyReq::default_instance_ = NULL;

Dragon_FatansyReq* Dragon_FatansyReq::New() const {
  return new Dragon_FatansyReq;
}

void Dragon_FatansyReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    star_ = 0;
    undress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_FatansyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_undress;
        break;
      }

      // optional int32 undress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_undress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &undress_)));
          set_has_undress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_FatansyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  // optional int32 undress = 3;
  if (has_undress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->undress(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_FatansyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  // optional int32 undress = 3;
  if (has_undress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->undress(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_FatansyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 undress = 3;
    if (has_undress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->undress());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_FatansyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_FatansyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_FatansyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_FatansyReq::MergeFrom(const Dragon_FatansyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_undress()) {
      set_undress(from.undress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_FatansyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_FatansyReq::CopyFrom(const Dragon_FatansyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_FatansyReq::IsInitialized() const {

  return true;
}

void Dragon_FatansyReq::Swap(Dragon_FatansyReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(star_, other->star_);
    std::swap(undress_, other->undress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_FatansyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_FatansyReq_descriptor_;
  metadata.reflection = Dragon_FatansyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_FatansyRsp::kRetFieldNumber;
#endif  // !_MSC_VER

Dragon_FatansyRsp::Dragon_FatansyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_FatansyRsp::InitAsDefaultInstance() {
}

Dragon_FatansyRsp::Dragon_FatansyRsp(const Dragon_FatansyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_FatansyRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_FatansyRsp::~Dragon_FatansyRsp() {
  SharedDtor();
}

void Dragon_FatansyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Dragon_FatansyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_FatansyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_FatansyRsp_descriptor_;
}

const Dragon_FatansyRsp& Dragon_FatansyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_FatansyRsp* Dragon_FatansyRsp::default_instance_ = NULL;

Dragon_FatansyRsp* Dragon_FatansyRsp::New() const {
  return new Dragon_FatansyRsp;
}

void Dragon_FatansyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_FatansyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_FatansyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_FatansyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_FatansyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_FatansyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_FatansyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_FatansyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_FatansyRsp::MergeFrom(const Dragon_FatansyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_FatansyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_FatansyRsp::CopyFrom(const Dragon_FatansyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_FatansyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Dragon_FatansyRsp::Swap(Dragon_FatansyRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_FatansyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_FatansyRsp_descriptor_;
  metadata.reflection = Dragon_FatansyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_ShadowInfoRsp::kShadowFieldNumber;
#endif  // !_MSC_VER

Dragon_ShadowInfoRsp::Dragon_ShadowInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_ShadowInfoRsp::InitAsDefaultInstance() {
  shadow_ = const_cast< ::proto_ff::ShadowProto*>(&::proto_ff::ShadowProto::default_instance());
}

Dragon_ShadowInfoRsp::Dragon_ShadowInfoRsp(const Dragon_ShadowInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_ShadowInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  shadow_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_ShadowInfoRsp::~Dragon_ShadowInfoRsp() {
  SharedDtor();
}

void Dragon_ShadowInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete shadow_;
  }
}

void Dragon_ShadowInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_ShadowInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_ShadowInfoRsp_descriptor_;
}

const Dragon_ShadowInfoRsp& Dragon_ShadowInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_ShadowInfoRsp* Dragon_ShadowInfoRsp::default_instance_ = NULL;

Dragon_ShadowInfoRsp* Dragon_ShadowInfoRsp::New() const {
  return new Dragon_ShadowInfoRsp;
}

void Dragon_ShadowInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shadow()) {
      if (shadow_ != NULL) shadow_->::proto_ff::ShadowProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_ShadowInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ShadowProto shadow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_ShadowInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ShadowProto shadow = 1;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shadow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_ShadowInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ShadowProto shadow = 1;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shadow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_ShadowInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ShadowProto shadow = 1;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_ShadowInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_ShadowInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_ShadowInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_ShadowInfoRsp::MergeFrom(const Dragon_ShadowInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shadow()) {
      mutable_shadow()->::proto_ff::ShadowProto::MergeFrom(from.shadow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_ShadowInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_ShadowInfoRsp::CopyFrom(const Dragon_ShadowInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_ShadowInfoRsp::IsInitialized() const {

  return true;
}

void Dragon_ShadowInfoRsp::Swap(Dragon_ShadowInfoRsp* other) {
  if (other != this) {
    std::swap(shadow_, other->shadow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_ShadowInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_ShadowInfoRsp_descriptor_;
  metadata.reflection = Dragon_ShadowInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Dragon_HaloInfoRsp::kHaloFieldNumber;
#endif  // !_MSC_VER

Dragon_HaloInfoRsp::Dragon_HaloInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Dragon_HaloInfoRsp::InitAsDefaultInstance() {
  halo_ = const_cast< ::proto_ff::HaloProto*>(&::proto_ff::HaloProto::default_instance());
}

Dragon_HaloInfoRsp::Dragon_HaloInfoRsp(const Dragon_HaloInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Dragon_HaloInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  halo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Dragon_HaloInfoRsp::~Dragon_HaloInfoRsp() {
  SharedDtor();
}

void Dragon_HaloInfoRsp::SharedDtor() {
  if (this != default_instance_) {
    delete halo_;
  }
}

void Dragon_HaloInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Dragon_HaloInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Dragon_HaloInfoRsp_descriptor_;
}

const Dragon_HaloInfoRsp& Dragon_HaloInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Dragon_2eproto();
  return *default_instance_;
}

Dragon_HaloInfoRsp* Dragon_HaloInfoRsp::default_instance_ = NULL;

Dragon_HaloInfoRsp* Dragon_HaloInfoRsp::New() const {
  return new Dragon_HaloInfoRsp;
}

void Dragon_HaloInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_halo()) {
      if (halo_ != NULL) halo_->::proto_ff::HaloProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Dragon_HaloInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.HaloProto halo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_halo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Dragon_HaloInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.HaloProto halo = 1;
  if (has_halo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->halo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Dragon_HaloInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.HaloProto halo = 1;
  if (has_halo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->halo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Dragon_HaloInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.HaloProto halo = 1;
    if (has_halo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->halo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dragon_HaloInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Dragon_HaloInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Dragon_HaloInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Dragon_HaloInfoRsp::MergeFrom(const Dragon_HaloInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_halo()) {
      mutable_halo()->::proto_ff::HaloProto::MergeFrom(from.halo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Dragon_HaloInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dragon_HaloInfoRsp::CopyFrom(const Dragon_HaloInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dragon_HaloInfoRsp::IsInitialized() const {

  return true;
}

void Dragon_HaloInfoRsp::Swap(Dragon_HaloInfoRsp* other) {
  if (other != this) {
    std::swap(halo_, other->halo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Dragon_HaloInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Dragon_HaloInfoRsp_descriptor_;
  metadata.reflection = Dragon_HaloInfoRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
