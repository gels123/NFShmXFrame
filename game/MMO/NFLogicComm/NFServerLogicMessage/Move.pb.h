// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Move.proto

#ifndef PROTOBUF_Move_2eproto__INCLUDED
#define PROTOBUF_Move_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Com.pb.h"
#include "ComDefine.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Move_2eproto();
void protobuf_AssignDesc_Move_2eproto();
void protobuf_ShutdownFile_Move_2eproto();

class MoveReq;
class MoveBroadRsp;
class MoveTeleportReq;
class MoveTeleportResultRsp;
class MoveTeleportRsp;

enum MoveTeleportRsp_Type {
  MoveTeleportRsp_Type_common = 1,
  MoveTeleportRsp_Type_skill = 2,
  MoveTeleportRsp_Type_dup = 3,
  MoveTeleportRsp_Type_relive = 4,
  MoveTeleportRsp_Type_trans = 5,
  MoveTeleportRsp_Type_task = 6
};
bool MoveTeleportRsp_Type_IsValid(int value);
const MoveTeleportRsp_Type MoveTeleportRsp_Type_Type_MIN = MoveTeleportRsp_Type_common;
const MoveTeleportRsp_Type MoveTeleportRsp_Type_Type_MAX = MoveTeleportRsp_Type_task;
const int MoveTeleportRsp_Type_Type_ARRAYSIZE = MoveTeleportRsp_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MoveTeleportRsp_Type_descriptor();
inline const ::std::string& MoveTeleportRsp_Type_Name(MoveTeleportRsp_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MoveTeleportRsp_Type_descriptor(), value);
}
inline bool MoveTeleportRsp_Type_Parse(
    const ::std::string& name, MoveTeleportRsp_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MoveTeleportRsp_Type>(
    MoveTeleportRsp_Type_descriptor(), name, value);
}
// ===================================================================

class MoveReq : public ::google::protobuf::Message {
 public:
  MoveReq();
  virtual ~MoveReq();

  MoveReq(const MoveReq& from);

  inline MoveReq& operator=(const MoveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveReq& default_instance();

  void Swap(MoveReq* other);

  // implements Message ----------------------------------------------

  MoveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveReq& from);
  void MergeFrom(const MoveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .proto_ff.Vector3PB pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // required .proto_ff.Vector2PB speed = 2;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 2;
  inline const ::proto_ff::Vector2PB& speed() const;
  inline ::proto_ff::Vector2PB* mutable_speed();
  inline ::proto_ff::Vector2PB* release_speed();
  inline void set_allocated_speed(::proto_ff::Vector2PB* speed);

  // required .proto_ff.Vector2PB dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline const ::proto_ff::Vector2PB& dir() const;
  inline ::proto_ff::Vector2PB* mutable_dir();
  inline ::proto_ff::Vector2PB* release_dir();
  inline void set_allocated_dir(::proto_ff::Vector2PB* dir);

  // optional int32 move_type = 4;
  inline bool has_move_type() const;
  inline void clear_move_type();
  static const int kMoveTypeFieldNumber = 4;
  inline ::google::protobuf::int32 move_type() const;
  inline void set_move_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MoveReq)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_move_type();
  inline void clear_has_move_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::Vector3PB* pos_;
  ::proto_ff::Vector2PB* speed_;
  ::proto_ff::Vector2PB* dir_;
  ::google::protobuf::int32 move_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Move_2eproto();
  friend void protobuf_AssignDesc_Move_2eproto();
  friend void protobuf_ShutdownFile_Move_2eproto();

  void InitAsDefaultInstance();
  static MoveReq* default_instance_;
};
// -------------------------------------------------------------------

class MoveBroadRsp : public ::google::protobuf::Message {
 public:
  MoveBroadRsp();
  virtual ~MoveBroadRsp();

  MoveBroadRsp(const MoveBroadRsp& from);

  inline MoveBroadRsp& operator=(const MoveBroadRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveBroadRsp& default_instance();

  void Swap(MoveBroadRsp* other);

  // implements Message ----------------------------------------------

  MoveBroadRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveBroadRsp& from);
  void MergeFrom(const MoveBroadRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required .proto_ff.Vector3PB pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // required .proto_ff.Vector2PB speed = 3;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 3;
  inline const ::proto_ff::Vector2PB& speed() const;
  inline ::proto_ff::Vector2PB* mutable_speed();
  inline ::proto_ff::Vector2PB* release_speed();
  inline void set_allocated_speed(::proto_ff::Vector2PB* speed);

  // required .proto_ff.Vector2PB dir = 4;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 4;
  inline const ::proto_ff::Vector2PB& dir() const;
  inline ::proto_ff::Vector2PB* mutable_dir();
  inline ::proto_ff::Vector2PB* release_dir();
  inline void set_allocated_dir(::proto_ff::Vector2PB* dir);

  // @@protoc_insertion_point(class_scope:proto_ff.MoveBroadRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::proto_ff::Vector3PB* pos_;
  ::proto_ff::Vector2PB* speed_;
  ::proto_ff::Vector2PB* dir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Move_2eproto();
  friend void protobuf_AssignDesc_Move_2eproto();
  friend void protobuf_ShutdownFile_Move_2eproto();

  void InitAsDefaultInstance();
  static MoveBroadRsp* default_instance_;
};
// -------------------------------------------------------------------

class MoveTeleportReq : public ::google::protobuf::Message {
 public:
  MoveTeleportReq();
  virtual ~MoveTeleportReq();

  MoveTeleportReq(const MoveTeleportReq& from);

  inline MoveTeleportReq& operator=(const MoveTeleportReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveTeleportReq& default_instance();

  void Swap(MoveTeleportReq* other);

  // implements Message ----------------------------------------------

  MoveTeleportReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveTeleportReq& from);
  void MergeFrom(const MoveTeleportReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 param1 = 2;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 2;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // optional int64 param2 = 3;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 3;
  inline ::google::protobuf::int64 param2() const;
  inline void set_param2(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MoveTeleportReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 param1_;
  ::google::protobuf::int64 param2_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Move_2eproto();
  friend void protobuf_AssignDesc_Move_2eproto();
  friend void protobuf_ShutdownFile_Move_2eproto();

  void InitAsDefaultInstance();
  static MoveTeleportReq* default_instance_;
};
// -------------------------------------------------------------------

class MoveTeleportResultRsp : public ::google::protobuf::Message {
 public:
  MoveTeleportResultRsp();
  virtual ~MoveTeleportResultRsp();

  MoveTeleportResultRsp(const MoveTeleportResultRsp& from);

  inline MoveTeleportResultRsp& operator=(const MoveTeleportResultRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveTeleportResultRsp& default_instance();

  void Swap(MoveTeleportResultRsp* other);

  // implements Message ----------------------------------------------

  MoveTeleportResultRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveTeleportResultRsp& from);
  void MergeFrom(const MoveTeleportResultRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 param1 = 3;
  inline bool has_param1() const;
  inline void clear_param1();
  static const int kParam1FieldNumber = 3;
  inline ::google::protobuf::int64 param1() const;
  inline void set_param1(::google::protobuf::int64 value);

  // optional int64 param2 = 4;
  inline bool has_param2() const;
  inline void clear_param2();
  static const int kParam2FieldNumber = 4;
  inline ::google::protobuf::int64 param2() const;
  inline void set_param2(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.MoveTeleportResultRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_param1();
  inline void clear_has_param1();
  inline void set_has_param2();
  inline void clear_has_param2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int64 param1_;
  ::google::protobuf::int64 param2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Move_2eproto();
  friend void protobuf_AssignDesc_Move_2eproto();
  friend void protobuf_ShutdownFile_Move_2eproto();

  void InitAsDefaultInstance();
  static MoveTeleportResultRsp* default_instance_;
};
// -------------------------------------------------------------------

class MoveTeleportRsp : public ::google::protobuf::Message {
 public:
  MoveTeleportRsp();
  virtual ~MoveTeleportRsp();

  MoveTeleportRsp(const MoveTeleportRsp& from);

  inline MoveTeleportRsp& operator=(const MoveTeleportRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveTeleportRsp& default_instance();

  void Swap(MoveTeleportRsp* other);

  // implements Message ----------------------------------------------

  MoveTeleportRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MoveTeleportRsp& from);
  void MergeFrom(const MoveTeleportRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MoveTeleportRsp_Type Type;
  static const Type common = MoveTeleportRsp_Type_common;
  static const Type skill = MoveTeleportRsp_Type_skill;
  static const Type dup = MoveTeleportRsp_Type_dup;
  static const Type relive = MoveTeleportRsp_Type_relive;
  static const Type trans = MoveTeleportRsp_Type_trans;
  static const Type task = MoveTeleportRsp_Type_task;
  static inline bool Type_IsValid(int value) {
    return MoveTeleportRsp_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MoveTeleportRsp_Type_Type_MIN;
  static const Type Type_MAX =
    MoveTeleportRsp_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MoveTeleportRsp_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MoveTeleportRsp_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MoveTeleportRsp_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MoveTeleportRsp_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required uint64 cid = 2;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 2;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // required .proto_ff.Vector3PB pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline const ::proto_ff::Vector3PB& pos() const;
  inline ::proto_ff::Vector3PB* mutable_pos();
  inline ::proto_ff::Vector3PB* release_pos();
  inline void set_allocated_pos(::proto_ff::Vector3PB* pos);

  // @@protoc_insertion_point(class_scope:proto_ff.MoveTeleportRsp)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::proto_ff::Vector3PB* pos_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Move_2eproto();
  friend void protobuf_AssignDesc_Move_2eproto();
  friend void protobuf_ShutdownFile_Move_2eproto();

  void InitAsDefaultInstance();
  static MoveTeleportRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// MoveReq

// required .proto_ff.Vector3PB pos = 1;
inline bool MoveReq::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveReq::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveReq::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveReq::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& MoveReq::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* MoveReq::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* MoveReq::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void MoveReq::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required .proto_ff.Vector2PB speed = 2;
inline bool MoveReq::has_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveReq::set_has_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveReq::clear_has_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveReq::clear_speed() {
  if (speed_ != NULL) speed_->::proto_ff::Vector2PB::Clear();
  clear_has_speed();
}
inline const ::proto_ff::Vector2PB& MoveReq::speed() const {
  return speed_ != NULL ? *speed_ : *default_instance_->speed_;
}
inline ::proto_ff::Vector2PB* MoveReq::mutable_speed() {
  set_has_speed();
  if (speed_ == NULL) speed_ = new ::proto_ff::Vector2PB;
  return speed_;
}
inline ::proto_ff::Vector2PB* MoveReq::release_speed() {
  clear_has_speed();
  ::proto_ff::Vector2PB* temp = speed_;
  speed_ = NULL;
  return temp;
}
inline void MoveReq::set_allocated_speed(::proto_ff::Vector2PB* speed) {
  delete speed_;
  speed_ = speed;
  if (speed) {
    set_has_speed();
  } else {
    clear_has_speed();
  }
}

// required .proto_ff.Vector2PB dir = 3;
inline bool MoveReq::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveReq::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveReq::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveReq::clear_dir() {
  if (dir_ != NULL) dir_->::proto_ff::Vector2PB::Clear();
  clear_has_dir();
}
inline const ::proto_ff::Vector2PB& MoveReq::dir() const {
  return dir_ != NULL ? *dir_ : *default_instance_->dir_;
}
inline ::proto_ff::Vector2PB* MoveReq::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) dir_ = new ::proto_ff::Vector2PB;
  return dir_;
}
inline ::proto_ff::Vector2PB* MoveReq::release_dir() {
  clear_has_dir();
  ::proto_ff::Vector2PB* temp = dir_;
  dir_ = NULL;
  return temp;
}
inline void MoveReq::set_allocated_dir(::proto_ff::Vector2PB* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
}

// optional int32 move_type = 4;
inline bool MoveReq::has_move_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoveReq::set_has_move_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoveReq::clear_has_move_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoveReq::clear_move_type() {
  move_type_ = 0;
  clear_has_move_type();
}
inline ::google::protobuf::int32 MoveReq::move_type() const {
  return move_type_;
}
inline void MoveReq::set_move_type(::google::protobuf::int32 value) {
  set_has_move_type();
  move_type_ = value;
}

// -------------------------------------------------------------------

// MoveBroadRsp

// required uint64 cid = 1;
inline bool MoveBroadRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveBroadRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveBroadRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveBroadRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 MoveBroadRsp::cid() const {
  return cid_;
}
inline void MoveBroadRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required .proto_ff.Vector3PB pos = 2;
inline bool MoveBroadRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveBroadRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveBroadRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveBroadRsp::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& MoveBroadRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* MoveBroadRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* MoveBroadRsp::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void MoveBroadRsp::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}

// required .proto_ff.Vector2PB speed = 3;
inline bool MoveBroadRsp::has_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveBroadRsp::set_has_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveBroadRsp::clear_has_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveBroadRsp::clear_speed() {
  if (speed_ != NULL) speed_->::proto_ff::Vector2PB::Clear();
  clear_has_speed();
}
inline const ::proto_ff::Vector2PB& MoveBroadRsp::speed() const {
  return speed_ != NULL ? *speed_ : *default_instance_->speed_;
}
inline ::proto_ff::Vector2PB* MoveBroadRsp::mutable_speed() {
  set_has_speed();
  if (speed_ == NULL) speed_ = new ::proto_ff::Vector2PB;
  return speed_;
}
inline ::proto_ff::Vector2PB* MoveBroadRsp::release_speed() {
  clear_has_speed();
  ::proto_ff::Vector2PB* temp = speed_;
  speed_ = NULL;
  return temp;
}
inline void MoveBroadRsp::set_allocated_speed(::proto_ff::Vector2PB* speed) {
  delete speed_;
  speed_ = speed;
  if (speed) {
    set_has_speed();
  } else {
    clear_has_speed();
  }
}

// required .proto_ff.Vector2PB dir = 4;
inline bool MoveBroadRsp::has_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoveBroadRsp::set_has_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoveBroadRsp::clear_has_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoveBroadRsp::clear_dir() {
  if (dir_ != NULL) dir_->::proto_ff::Vector2PB::Clear();
  clear_has_dir();
}
inline const ::proto_ff::Vector2PB& MoveBroadRsp::dir() const {
  return dir_ != NULL ? *dir_ : *default_instance_->dir_;
}
inline ::proto_ff::Vector2PB* MoveBroadRsp::mutable_dir() {
  set_has_dir();
  if (dir_ == NULL) dir_ = new ::proto_ff::Vector2PB;
  return dir_;
}
inline ::proto_ff::Vector2PB* MoveBroadRsp::release_dir() {
  clear_has_dir();
  ::proto_ff::Vector2PB* temp = dir_;
  dir_ = NULL;
  return temp;
}
inline void MoveBroadRsp::set_allocated_dir(::proto_ff::Vector2PB* dir) {
  delete dir_;
  dir_ = dir;
  if (dir) {
    set_has_dir();
  } else {
    clear_has_dir();
  }
}

// -------------------------------------------------------------------

// MoveTeleportReq

// required int32 type = 1;
inline bool MoveTeleportReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveTeleportReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveTeleportReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveTeleportReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MoveTeleportReq::type() const {
  return type_;
}
inline void MoveTeleportReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 param1 = 2;
inline bool MoveTeleportReq::has_param1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveTeleportReq::set_has_param1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveTeleportReq::clear_has_param1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveTeleportReq::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 MoveTeleportReq::param1() const {
  return param1_;
}
inline void MoveTeleportReq::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// optional int64 param2 = 3;
inline bool MoveTeleportReq::has_param2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveTeleportReq::set_has_param2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveTeleportReq::clear_has_param2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveTeleportReq::clear_param2() {
  param2_ = GOOGLE_LONGLONG(0);
  clear_has_param2();
}
inline ::google::protobuf::int64 MoveTeleportReq::param2() const {
  return param2_;
}
inline void MoveTeleportReq::set_param2(::google::protobuf::int64 value) {
  set_has_param2();
  param2_ = value;
}

// -------------------------------------------------------------------

// MoveTeleportResultRsp

// required int32 ret = 1;
inline bool MoveTeleportResultRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveTeleportResultRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveTeleportResultRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveTeleportResultRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 MoveTeleportResultRsp::ret() const {
  return ret_;
}
inline void MoveTeleportResultRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 2;
inline bool MoveTeleportResultRsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveTeleportResultRsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveTeleportResultRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveTeleportResultRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MoveTeleportResultRsp::type() const {
  return type_;
}
inline void MoveTeleportResultRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 param1 = 3;
inline bool MoveTeleportResultRsp::has_param1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveTeleportResultRsp::set_has_param1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveTeleportResultRsp::clear_has_param1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveTeleportResultRsp::clear_param1() {
  param1_ = GOOGLE_LONGLONG(0);
  clear_has_param1();
}
inline ::google::protobuf::int64 MoveTeleportResultRsp::param1() const {
  return param1_;
}
inline void MoveTeleportResultRsp::set_param1(::google::protobuf::int64 value) {
  set_has_param1();
  param1_ = value;
}

// optional int64 param2 = 4;
inline bool MoveTeleportResultRsp::has_param2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoveTeleportResultRsp::set_has_param2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoveTeleportResultRsp::clear_has_param2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoveTeleportResultRsp::clear_param2() {
  param2_ = GOOGLE_LONGLONG(0);
  clear_has_param2();
}
inline ::google::protobuf::int64 MoveTeleportResultRsp::param2() const {
  return param2_;
}
inline void MoveTeleportResultRsp::set_param2(::google::protobuf::int64 value) {
  set_has_param2();
  param2_ = value;
}

// -------------------------------------------------------------------

// MoveTeleportRsp

// required int32 type = 1;
inline bool MoveTeleportRsp::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveTeleportRsp::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveTeleportRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveTeleportRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MoveTeleportRsp::type() const {
  return type_;
}
inline void MoveTeleportRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required uint64 cid = 2;
inline bool MoveTeleportRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveTeleportRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveTeleportRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveTeleportRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 MoveTeleportRsp::cid() const {
  return cid_;
}
inline void MoveTeleportRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// required .proto_ff.Vector3PB pos = 3;
inline bool MoveTeleportRsp::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveTeleportRsp::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveTeleportRsp::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveTeleportRsp::clear_pos() {
  if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
  clear_has_pos();
}
inline const ::proto_ff::Vector3PB& MoveTeleportRsp::pos() const {
  return pos_ != NULL ? *pos_ : *default_instance_->pos_;
}
inline ::proto_ff::Vector3PB* MoveTeleportRsp::mutable_pos() {
  set_has_pos();
  if (pos_ == NULL) pos_ = new ::proto_ff::Vector3PB;
  return pos_;
}
inline ::proto_ff::Vector3PB* MoveTeleportRsp::release_pos() {
  clear_has_pos();
  ::proto_ff::Vector3PB* temp = pos_;
  pos_ = NULL;
  return temp;
}
inline void MoveTeleportRsp::set_allocated_pos(::proto_ff::Vector3PB* pos) {
  delete pos_;
  pos_ = pos;
  if (pos) {
    set_has_pos();
  } else {
    clear_has_pos();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_ff::MoveTeleportRsp_Type>() {
  return ::proto_ff::MoveTeleportRsp_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Move_2eproto__INCLUDED
