// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Xiuzhenroad.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Xiuzhenroad.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_XiuzhenroadTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XiuzhenroadTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XiuzhenroadTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XiuzhenroadTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XiuzhenroadBonuspointsTotalitemsDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XiuzhenroadBonuspointsTotalitemsDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XiuzhenroadBonuspoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XiuzhenroadBonuspoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XiuzhenroadBonuspoints_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XiuzhenroadBonuspoints_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XiuzhenroadSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XiuzhenroadSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XiuzhenroadSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XiuzhenroadSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_XiuzhenroadClassify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_XiuzhenroadClassify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_XiuzhenroadClassify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_XiuzhenroadClassify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fXiuzhenroad_2eproto() {
  protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Xiuzhenroad.proto");
  GOOGLE_CHECK(file != NULL);
  E_XiuzhenroadTask_descriptor_ = file->message_type(0);
  static const int E_XiuzhenroadTask_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_reachprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_reward_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_linkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, m_param_),
  };
  E_XiuzhenroadTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XiuzhenroadTask_descriptor_,
      E_XiuzhenroadTask::default_instance_,
      E_XiuzhenroadTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XiuzhenroadTask));
  Sheet_XiuzhenroadTask_descriptor_ = file->message_type(1);
  static const int Sheet_XiuzhenroadTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadTask, e_xiuzhenroadtask_list_),
  };
  Sheet_XiuzhenroadTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XiuzhenroadTask_descriptor_,
      Sheet_XiuzhenroadTask::default_instance_,
      Sheet_XiuzhenroadTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XiuzhenroadTask));
  E_XiuzhenroadBonuspointsTotalitemsDesc_descriptor_ = file->message_type(2);
  static const int E_XiuzhenroadBonuspointsTotalitemsDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadBonuspointsTotalitemsDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadBonuspointsTotalitemsDesc, m_id_),
  };
  E_XiuzhenroadBonuspointsTotalitemsDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XiuzhenroadBonuspointsTotalitemsDesc_descriptor_,
      E_XiuzhenroadBonuspointsTotalitemsDesc::default_instance_,
      E_XiuzhenroadBonuspointsTotalitemsDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadBonuspointsTotalitemsDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadBonuspointsTotalitemsDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XiuzhenroadBonuspointsTotalitemsDesc));
  E_XiuzhenroadBonuspoints_descriptor_ = file->message_type(3);
  static const int E_XiuzhenroadBonuspoints_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadBonuspoints, m_totalrewardsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadBonuspoints, m_achievedpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadBonuspoints, m_totalitems_),
  };
  E_XiuzhenroadBonuspoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XiuzhenroadBonuspoints_descriptor_,
      E_XiuzhenroadBonuspoints::default_instance_,
      E_XiuzhenroadBonuspoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadBonuspoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadBonuspoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XiuzhenroadBonuspoints));
  Sheet_XiuzhenroadBonuspoints_descriptor_ = file->message_type(4);
  static const int Sheet_XiuzhenroadBonuspoints_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadBonuspoints, e_xiuzhenroadbonuspoints_list_),
  };
  Sheet_XiuzhenroadBonuspoints_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XiuzhenroadBonuspoints_descriptor_,
      Sheet_XiuzhenroadBonuspoints::default_instance_,
      Sheet_XiuzhenroadBonuspoints_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadBonuspoints, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadBonuspoints, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XiuzhenroadBonuspoints));
  E_XiuzhenroadSkill_descriptor_ = file->message_type(5);
  static const int E_XiuzhenroadSkill_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadSkill, m_activityskills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadSkill, m_skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadSkill, m_itenmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadSkill, m_attribute_),
  };
  E_XiuzhenroadSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XiuzhenroadSkill_descriptor_,
      E_XiuzhenroadSkill::default_instance_,
      E_XiuzhenroadSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XiuzhenroadSkill));
  Sheet_XiuzhenroadSkill_descriptor_ = file->message_type(6);
  static const int Sheet_XiuzhenroadSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadSkill, e_xiuzhenroadskill_list_),
  };
  Sheet_XiuzhenroadSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XiuzhenroadSkill_descriptor_,
      Sheet_XiuzhenroadSkill::default_instance_,
      Sheet_XiuzhenroadSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XiuzhenroadSkill));
  E_XiuzhenroadClassify_descriptor_ = file->message_type(7);
  static const int E_XiuzhenroadClassify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadClassify, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadClassify, m_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadClassify, m_giftid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadClassify, m_rechargeid_),
  };
  E_XiuzhenroadClassify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_XiuzhenroadClassify_descriptor_,
      E_XiuzhenroadClassify::default_instance_,
      E_XiuzhenroadClassify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadClassify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_XiuzhenroadClassify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_XiuzhenroadClassify));
  Sheet_XiuzhenroadClassify_descriptor_ = file->message_type(8);
  static const int Sheet_XiuzhenroadClassify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadClassify, e_xiuzhenroadclassify_list_),
  };
  Sheet_XiuzhenroadClassify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_XiuzhenroadClassify_descriptor_,
      Sheet_XiuzhenroadClassify::default_instance_,
      Sheet_XiuzhenroadClassify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadClassify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_XiuzhenroadClassify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_XiuzhenroadClassify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fXiuzhenroad_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XiuzhenroadTask_descriptor_, &E_XiuzhenroadTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XiuzhenroadTask_descriptor_, &Sheet_XiuzhenroadTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XiuzhenroadBonuspointsTotalitemsDesc_descriptor_, &E_XiuzhenroadBonuspointsTotalitemsDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XiuzhenroadBonuspoints_descriptor_, &E_XiuzhenroadBonuspoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XiuzhenroadBonuspoints_descriptor_, &Sheet_XiuzhenroadBonuspoints::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XiuzhenroadSkill_descriptor_, &E_XiuzhenroadSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XiuzhenroadSkill_descriptor_, &Sheet_XiuzhenroadSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_XiuzhenroadClassify_descriptor_, &E_XiuzhenroadClassify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_XiuzhenroadClassify_descriptor_, &Sheet_XiuzhenroadClassify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fXiuzhenroad_2eproto() {
  delete E_XiuzhenroadTask::default_instance_;
  delete E_XiuzhenroadTask_reflection_;
  delete Sheet_XiuzhenroadTask::default_instance_;
  delete Sheet_XiuzhenroadTask_reflection_;
  delete E_XiuzhenroadBonuspointsTotalitemsDesc::default_instance_;
  delete E_XiuzhenroadBonuspointsTotalitemsDesc_reflection_;
  delete E_XiuzhenroadBonuspoints::default_instance_;
  delete E_XiuzhenroadBonuspoints_reflection_;
  delete Sheet_XiuzhenroadBonuspoints::default_instance_;
  delete Sheet_XiuzhenroadBonuspoints_reflection_;
  delete E_XiuzhenroadSkill::default_instance_;
  delete E_XiuzhenroadSkill_reflection_;
  delete Sheet_XiuzhenroadSkill::default_instance_;
  delete Sheet_XiuzhenroadSkill_reflection_;
  delete E_XiuzhenroadClassify::default_instance_;
  delete E_XiuzhenroadClassify_reflection_;
  delete Sheet_XiuzhenroadClassify::default_instance_;
  delete Sheet_XiuzhenroadClassify_reflection_;
}

void protobuf_AddDesc_E_5fXiuzhenroad_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023E_Xiuzhenroad.proto\022\010proto_ff\032\025yd_fiel"
    "doptions.proto\"\221\003\n\021E_XiuzhenroadTask\022\036\n\010"
    "m_taskid\030\001 \001(\003B\014\302\377\024\010\344\273\273\345\212\241ID\022$\n\nm_taskty"
    "pe\030\002 \001(\005B\020\302\377\024\014\344\273\273\345\212\241\347\261\273\345\236\213\022%\n\013m_eventtyp"
    "e\030\003 \001(\005B\020\302\377\024\014\344\272\213\344\273\266\347\261\273\345\236\213\022#\n\014m_reachpric"
    "e\030\004 \001(\005B\r\302\377\024\t\350\276\276\346\210\220\345\200\274\022\"\n\010m_reward\030\005 \001(\005"
    "B\020\302\377\024\014\345\245\226\345\212\261\347\211\251\345\223\201\022.\n\016m_reward_value\030\006 \001"
    "(\005B\026\302\377\024\022\345\245\226\345\212\261\347\211\251\345\223\201\346\225\260\351\207\217\022 \n\007m_boxid\030\007 "
    "\001(\005B\017\302\377\024\013box\347\244\274\345\214\205ID\022\'\n\nm_integral\030\010 \001(\005"
    "B\023\302\377\024\017\345\245\226\345\212\261\347\232\204\347\247\257\345\210\206\022\036\n\010m_linkid\030\t \001(\005B"
    "\014\302\377\024\010\350\267\263\350\275\254ID\022+\n\007m_param\030\n \003(\005B\032\302\377\024\022\344\272\213\344"
    "\273\266\345\256\214\346\210\220\345\217\202\346\225\260\210\301\024\002\"[\n\025Sheet_XiuzhenroadT"
    "ask\022B\n\026E_XiuzhenroadTask_List\030\001 \003(\0132\033.pr"
    "oto_ff.E_XiuzhenroadTaskB\005\210\301\024\200\001\"[\n&E_Xiu"
    "zhenroadBonuspointsTotalitemsDesc\022\033\n\007m_v"
    "alue\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\005B\006\302\377"
    "\024\002ID\"\323\001\n\030E_XiuzhenroadBonuspoints\022-\n\020m_t"
    "otalrewardsid\030\001 \001(\005B\023\302\377\024\017\346\200\273\347\247\257\345\210\206\345\245\226\345\212\261"
    "\022*\n\020m_achievedpoints\030\002 \001(\005B\020\302\377\024\014\350\276\276\346\210\220\347\202"
    "\271\346\225\260\022\\\n\014m_totalitems\030\003 \003(\01320.proto_ff.E_"
    "XiuzhenroadBonuspointsTotalitemsDescB\024\302\377"
    "\024\014\345\245\226\345\212\261\347\211\251\345\223\201\210\301\024\002\"o\n\034Sheet_XiuzhenroadB"
    "onuspoints\022O\n\035E_XiuzhenroadBonuspoints_L"
    "ist\030\001 \003(\0132\".proto_ff.E_XiuzhenroadBonusp"
    "ointsB\004\210\301\024 \"\273\001\n\022E_XiuzhenroadSkill\0220\n\020m_"
    "activityskills\030\001 \001(\005B\026\302\377\024\022\346\264\273\345\212\250\345\210\206\347\261\273\346\212"
    "\200\350\203\275\022\037\n\tm_skillid\030\002 \001(\005B\014\302\377\024\010\346\212\200\350\203\275ID\022%\n"
    "\tm_itenmid\030\003 \001(\005B\022\302\377\024\016\345\261\236\346\200\247\351\201\223\345\205\267ID\022+\n\013"
    "m_attribute\030\004 \001(\005B\026\302\377\024\022\351\201\223\345\205\267\345\242\236\345\212\240\345\261\236\346\200"
    "\247\"]\n\026Sheet_XiuzhenroadSkill\022C\n\027E_Xiuzhen"
    "roadSkill_List\030\001 \003(\0132\034.proto_ff.E_Xiuzhe"
    "nroadSkillB\004\210\301\024 \"\260\001\n\025E_XiuzhenroadClassi"
    "fy\022$\n\010m_typeid\030\001 \001(\005B\022\302\377\024\016\344\273\273\345\212\241\347\261\273\345\236\213ID"
    "\022$\n\006m_gift\030\002 \001(\tB\024\302\377\024\014\347\244\274\345\214\205\345\220\215\347\247\260\220\301\024@\022\036"
    "\n\010m_giftid\030\003 \001(\005B\014\302\377\024\010\347\244\274\345\214\205ID\022+\n\014m_rech"
    "argeid\030\004 \001(\005B\025\302\377\024\021\347\244\274\345\214\205\350\256\241\350\264\271\347\202\271ID\"f\n\031S"
    "heet_XiuzhenroadClassify\022I\n\032E_Xiuzhenroa"
    "dClassify_List\030\001 \003(\0132\037.proto_ff.E_Xiuzhe"
    "nroadClassifyB\004\210\301\024\020", 1539);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Xiuzhenroad.proto", &protobuf_RegisterTypes);
  E_XiuzhenroadTask::default_instance_ = new E_XiuzhenroadTask();
  Sheet_XiuzhenroadTask::default_instance_ = new Sheet_XiuzhenroadTask();
  E_XiuzhenroadBonuspointsTotalitemsDesc::default_instance_ = new E_XiuzhenroadBonuspointsTotalitemsDesc();
  E_XiuzhenroadBonuspoints::default_instance_ = new E_XiuzhenroadBonuspoints();
  Sheet_XiuzhenroadBonuspoints::default_instance_ = new Sheet_XiuzhenroadBonuspoints();
  E_XiuzhenroadSkill::default_instance_ = new E_XiuzhenroadSkill();
  Sheet_XiuzhenroadSkill::default_instance_ = new Sheet_XiuzhenroadSkill();
  E_XiuzhenroadClassify::default_instance_ = new E_XiuzhenroadClassify();
  Sheet_XiuzhenroadClassify::default_instance_ = new Sheet_XiuzhenroadClassify();
  E_XiuzhenroadTask::default_instance_->InitAsDefaultInstance();
  Sheet_XiuzhenroadTask::default_instance_->InitAsDefaultInstance();
  E_XiuzhenroadBonuspointsTotalitemsDesc::default_instance_->InitAsDefaultInstance();
  E_XiuzhenroadBonuspoints::default_instance_->InitAsDefaultInstance();
  Sheet_XiuzhenroadBonuspoints::default_instance_->InitAsDefaultInstance();
  E_XiuzhenroadSkill::default_instance_->InitAsDefaultInstance();
  Sheet_XiuzhenroadSkill::default_instance_->InitAsDefaultInstance();
  E_XiuzhenroadClassify::default_instance_->InitAsDefaultInstance();
  Sheet_XiuzhenroadClassify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fXiuzhenroad_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fXiuzhenroad_2eproto {
  StaticDescriptorInitializer_E_5fXiuzhenroad_2eproto() {
    protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  }
} static_descriptor_initializer_E_5fXiuzhenroad_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_XiuzhenroadTask::kMTaskidFieldNumber;
const int E_XiuzhenroadTask::kMTasktypeFieldNumber;
const int E_XiuzhenroadTask::kMEventtypeFieldNumber;
const int E_XiuzhenroadTask::kMReachpriceFieldNumber;
const int E_XiuzhenroadTask::kMRewardFieldNumber;
const int E_XiuzhenroadTask::kMRewardValueFieldNumber;
const int E_XiuzhenroadTask::kMBoxidFieldNumber;
const int E_XiuzhenroadTask::kMIntegralFieldNumber;
const int E_XiuzhenroadTask::kMLinkidFieldNumber;
const int E_XiuzhenroadTask::kMParamFieldNumber;
#endif  // !_MSC_VER

E_XiuzhenroadTask::E_XiuzhenroadTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XiuzhenroadTask::InitAsDefaultInstance() {
}

E_XiuzhenroadTask::E_XiuzhenroadTask(const E_XiuzhenroadTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XiuzhenroadTask::SharedCtor() {
  _cached_size_ = 0;
  m_taskid_ = GOOGLE_LONGLONG(0);
  m_tasktype_ = 0;
  m_eventtype_ = 0;
  m_reachprice_ = 0;
  m_reward_ = 0;
  m_reward_value_ = 0;
  m_boxid_ = 0;
  m_integral_ = 0;
  m_linkid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XiuzhenroadTask::~E_XiuzhenroadTask() {
  SharedDtor();
}

void E_XiuzhenroadTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XiuzhenroadTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XiuzhenroadTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XiuzhenroadTask_descriptor_;
}

const E_XiuzhenroadTask& E_XiuzhenroadTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  return *default_instance_;
}

E_XiuzhenroadTask* E_XiuzhenroadTask::default_instance_ = NULL;

E_XiuzhenroadTask* E_XiuzhenroadTask::New() const {
  return new E_XiuzhenroadTask;
}

void E_XiuzhenroadTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_taskid_ = GOOGLE_LONGLONG(0);
    m_tasktype_ = 0;
    m_eventtype_ = 0;
    m_reachprice_ = 0;
    m_reward_ = 0;
    m_reward_value_ = 0;
    m_boxid_ = 0;
    m_integral_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_linkid_ = 0;
  }
  m_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XiuzhenroadTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_taskid_)));
          set_has_m_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_tasktype;
        break;
      }

      // optional int32 m_tasktype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_tasktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_tasktype_)));
          set_has_m_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_eventtype;
        break;
      }

      // optional int32 m_eventtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_eventtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_eventtype_)));
          set_has_m_eventtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_reachprice;
        break;
      }

      // optional int32 m_reachprice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reachprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reachprice_)));
          set_has_m_reachprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_reward;
        break;
      }

      // optional int32 m_reward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_)));
          set_has_m_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_reward_value;
        break;
      }

      // optional int32 m_reward_value = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_reward_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_reward_value_)));
          set_has_m_reward_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_boxid;
        break;
      }

      // optional int32 m_boxid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_boxid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_boxid_)));
          set_has_m_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_integral;
        break;
      }

      // optional int32 m_integral = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_integral_)));
          set_has_m_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_linkid;
        break;
      }

      // optional int32 m_linkid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_linkid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_linkid_)));
          set_has_m_linkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_param;
        break;
      }

      // repeated int32 m_param = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_m_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XiuzhenroadTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_taskid = 1;
  if (has_m_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_taskid(), output);
  }

  // optional int32 m_tasktype = 2;
  if (has_m_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_tasktype(), output);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_eventtype(), output);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_reachprice(), output);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_reward(), output);
  }

  // optional int32 m_reward_value = 6;
  if (has_m_reward_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_reward_value(), output);
  }

  // optional int32 m_boxid = 7;
  if (has_m_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_boxid(), output);
  }

  // optional int32 m_integral = 8;
  if (has_m_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_integral(), output);
  }

  // optional int32 m_linkid = 9;
  if (has_m_linkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_linkid(), output);
  }

  // repeated int32 m_param = 10;
  for (int i = 0; i < this->m_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->m_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XiuzhenroadTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_taskid = 1;
  if (has_m_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_taskid(), target);
  }

  // optional int32 m_tasktype = 2;
  if (has_m_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_tasktype(), target);
  }

  // optional int32 m_eventtype = 3;
  if (has_m_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_eventtype(), target);
  }

  // optional int32 m_reachprice = 4;
  if (has_m_reachprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_reachprice(), target);
  }

  // optional int32 m_reward = 5;
  if (has_m_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_reward(), target);
  }

  // optional int32 m_reward_value = 6;
  if (has_m_reward_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_reward_value(), target);
  }

  // optional int32 m_boxid = 7;
  if (has_m_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_boxid(), target);
  }

  // optional int32 m_integral = 8;
  if (has_m_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_integral(), target);
  }

  // optional int32 m_linkid = 9;
  if (has_m_linkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_linkid(), target);
  }

  // repeated int32 m_param = 10;
  for (int i = 0; i < this->m_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->m_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XiuzhenroadTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_taskid = 1;
    if (has_m_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_taskid());
    }

    // optional int32 m_tasktype = 2;
    if (has_m_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_tasktype());
    }

    // optional int32 m_eventtype = 3;
    if (has_m_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_eventtype());
    }

    // optional int32 m_reachprice = 4;
    if (has_m_reachprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reachprice());
    }

    // optional int32 m_reward = 5;
    if (has_m_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward());
    }

    // optional int32 m_reward_value = 6;
    if (has_m_reward_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_reward_value());
    }

    // optional int32 m_boxid = 7;
    if (has_m_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_boxid());
    }

    // optional int32 m_integral = 8;
    if (has_m_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_integral());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_linkid = 9;
    if (has_m_linkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_linkid());
    }

  }
  // repeated int32 m_param = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_param(i));
    }
    total_size += 1 * this->m_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XiuzhenroadTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XiuzhenroadTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XiuzhenroadTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XiuzhenroadTask::MergeFrom(const E_XiuzhenroadTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_param_.MergeFrom(from.m_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_taskid()) {
      set_m_taskid(from.m_taskid());
    }
    if (from.has_m_tasktype()) {
      set_m_tasktype(from.m_tasktype());
    }
    if (from.has_m_eventtype()) {
      set_m_eventtype(from.m_eventtype());
    }
    if (from.has_m_reachprice()) {
      set_m_reachprice(from.m_reachprice());
    }
    if (from.has_m_reward()) {
      set_m_reward(from.m_reward());
    }
    if (from.has_m_reward_value()) {
      set_m_reward_value(from.m_reward_value());
    }
    if (from.has_m_boxid()) {
      set_m_boxid(from.m_boxid());
    }
    if (from.has_m_integral()) {
      set_m_integral(from.m_integral());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_linkid()) {
      set_m_linkid(from.m_linkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XiuzhenroadTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XiuzhenroadTask::CopyFrom(const E_XiuzhenroadTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XiuzhenroadTask::IsInitialized() const {

  return true;
}

void E_XiuzhenroadTask::Swap(E_XiuzhenroadTask* other) {
  if (other != this) {
    std::swap(m_taskid_, other->m_taskid_);
    std::swap(m_tasktype_, other->m_tasktype_);
    std::swap(m_eventtype_, other->m_eventtype_);
    std::swap(m_reachprice_, other->m_reachprice_);
    std::swap(m_reward_, other->m_reward_);
    std::swap(m_reward_value_, other->m_reward_value_);
    std::swap(m_boxid_, other->m_boxid_);
    std::swap(m_integral_, other->m_integral_);
    std::swap(m_linkid_, other->m_linkid_);
    m_param_.Swap(&other->m_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XiuzhenroadTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XiuzhenroadTask_descriptor_;
  metadata.reflection = E_XiuzhenroadTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XiuzhenroadTask::kEXiuzhenroadTaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_XiuzhenroadTask::Sheet_XiuzhenroadTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XiuzhenroadTask::InitAsDefaultInstance() {
}

Sheet_XiuzhenroadTask::Sheet_XiuzhenroadTask(const Sheet_XiuzhenroadTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XiuzhenroadTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XiuzhenroadTask::~Sheet_XiuzhenroadTask() {
  SharedDtor();
}

void Sheet_XiuzhenroadTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XiuzhenroadTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XiuzhenroadTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XiuzhenroadTask_descriptor_;
}

const Sheet_XiuzhenroadTask& Sheet_XiuzhenroadTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  return *default_instance_;
}

Sheet_XiuzhenroadTask* Sheet_XiuzhenroadTask::default_instance_ = NULL;

Sheet_XiuzhenroadTask* Sheet_XiuzhenroadTask::New() const {
  return new Sheet_XiuzhenroadTask;
}

void Sheet_XiuzhenroadTask::Clear() {
  e_xiuzhenroadtask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XiuzhenroadTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XiuzhenroadTask E_XiuzhenroadTask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XiuzhenroadTask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xiuzhenroadtask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XiuzhenroadTask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XiuzhenroadTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XiuzhenroadTask E_XiuzhenroadTask_List = 1;
  for (int i = 0; i < this->e_xiuzhenroadtask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xiuzhenroadtask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XiuzhenroadTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XiuzhenroadTask E_XiuzhenroadTask_List = 1;
  for (int i = 0; i < this->e_xiuzhenroadtask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xiuzhenroadtask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XiuzhenroadTask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XiuzhenroadTask E_XiuzhenroadTask_List = 1;
  total_size += 1 * this->e_xiuzhenroadtask_list_size();
  for (int i = 0; i < this->e_xiuzhenroadtask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xiuzhenroadtask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XiuzhenroadTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XiuzhenroadTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XiuzhenroadTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XiuzhenroadTask::MergeFrom(const Sheet_XiuzhenroadTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xiuzhenroadtask_list_.MergeFrom(from.e_xiuzhenroadtask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XiuzhenroadTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XiuzhenroadTask::CopyFrom(const Sheet_XiuzhenroadTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XiuzhenroadTask::IsInitialized() const {

  return true;
}

void Sheet_XiuzhenroadTask::Swap(Sheet_XiuzhenroadTask* other) {
  if (other != this) {
    e_xiuzhenroadtask_list_.Swap(&other->e_xiuzhenroadtask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XiuzhenroadTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XiuzhenroadTask_descriptor_;
  metadata.reflection = Sheet_XiuzhenroadTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XiuzhenroadBonuspointsTotalitemsDesc::kMValueFieldNumber;
const int E_XiuzhenroadBonuspointsTotalitemsDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_XiuzhenroadBonuspointsTotalitemsDesc::E_XiuzhenroadBonuspointsTotalitemsDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::InitAsDefaultInstance() {
}

E_XiuzhenroadBonuspointsTotalitemsDesc::E_XiuzhenroadBonuspointsTotalitemsDesc(const E_XiuzhenroadBonuspointsTotalitemsDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XiuzhenroadBonuspointsTotalitemsDesc::~E_XiuzhenroadBonuspointsTotalitemsDesc() {
  SharedDtor();
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XiuzhenroadBonuspointsTotalitemsDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XiuzhenroadBonuspointsTotalitemsDesc_descriptor_;
}

const E_XiuzhenroadBonuspointsTotalitemsDesc& E_XiuzhenroadBonuspointsTotalitemsDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  return *default_instance_;
}

E_XiuzhenroadBonuspointsTotalitemsDesc* E_XiuzhenroadBonuspointsTotalitemsDesc::default_instance_ = NULL;

E_XiuzhenroadBonuspointsTotalitemsDesc* E_XiuzhenroadBonuspointsTotalitemsDesc::New() const {
  return new E_XiuzhenroadBonuspointsTotalitemsDesc;
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XiuzhenroadBonuspointsTotalitemsDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XiuzhenroadBonuspointsTotalitemsDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XiuzhenroadBonuspointsTotalitemsDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XiuzhenroadBonuspointsTotalitemsDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XiuzhenroadBonuspointsTotalitemsDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::MergeFrom(const E_XiuzhenroadBonuspointsTotalitemsDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::CopyFrom(const E_XiuzhenroadBonuspointsTotalitemsDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XiuzhenroadBonuspointsTotalitemsDesc::IsInitialized() const {

  return true;
}

void E_XiuzhenroadBonuspointsTotalitemsDesc::Swap(E_XiuzhenroadBonuspointsTotalitemsDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XiuzhenroadBonuspointsTotalitemsDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XiuzhenroadBonuspointsTotalitemsDesc_descriptor_;
  metadata.reflection = E_XiuzhenroadBonuspointsTotalitemsDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XiuzhenroadBonuspoints::kMTotalrewardsidFieldNumber;
const int E_XiuzhenroadBonuspoints::kMAchievedpointsFieldNumber;
const int E_XiuzhenroadBonuspoints::kMTotalitemsFieldNumber;
#endif  // !_MSC_VER

E_XiuzhenroadBonuspoints::E_XiuzhenroadBonuspoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XiuzhenroadBonuspoints::InitAsDefaultInstance() {
}

E_XiuzhenroadBonuspoints::E_XiuzhenroadBonuspoints(const E_XiuzhenroadBonuspoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XiuzhenroadBonuspoints::SharedCtor() {
  _cached_size_ = 0;
  m_totalrewardsid_ = 0;
  m_achievedpoints_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XiuzhenroadBonuspoints::~E_XiuzhenroadBonuspoints() {
  SharedDtor();
}

void E_XiuzhenroadBonuspoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XiuzhenroadBonuspoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XiuzhenroadBonuspoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XiuzhenroadBonuspoints_descriptor_;
}

const E_XiuzhenroadBonuspoints& E_XiuzhenroadBonuspoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  return *default_instance_;
}

E_XiuzhenroadBonuspoints* E_XiuzhenroadBonuspoints::default_instance_ = NULL;

E_XiuzhenroadBonuspoints* E_XiuzhenroadBonuspoints::New() const {
  return new E_XiuzhenroadBonuspoints;
}

void E_XiuzhenroadBonuspoints::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_totalrewardsid_ = 0;
    m_achievedpoints_ = 0;
  }
  m_totalitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XiuzhenroadBonuspoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_totalrewardsid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalrewardsid_)));
          set_has_m_totalrewardsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_achievedpoints;
        break;
      }

      // optional int32 m_achievedpoints = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_achievedpoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_achievedpoints_)));
          set_has_m_achievedpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_totalitems;
        break;
      }

      // repeated .proto_ff.E_XiuzhenroadBonuspointsTotalitemsDesc m_totalitems = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_totalitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_totalitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_totalitems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XiuzhenroadBonuspoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_totalrewardsid = 1;
  if (has_m_totalrewardsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_totalrewardsid(), output);
  }

  // optional int32 m_achievedpoints = 2;
  if (has_m_achievedpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_achievedpoints(), output);
  }

  // repeated .proto_ff.E_XiuzhenroadBonuspointsTotalitemsDesc m_totalitems = 3;
  for (int i = 0; i < this->m_totalitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_totalitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XiuzhenroadBonuspoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_totalrewardsid = 1;
  if (has_m_totalrewardsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_totalrewardsid(), target);
  }

  // optional int32 m_achievedpoints = 2;
  if (has_m_achievedpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_achievedpoints(), target);
  }

  // repeated .proto_ff.E_XiuzhenroadBonuspointsTotalitemsDesc m_totalitems = 3;
  for (int i = 0; i < this->m_totalitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_totalitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XiuzhenroadBonuspoints::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_totalrewardsid = 1;
    if (has_m_totalrewardsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalrewardsid());
    }

    // optional int32 m_achievedpoints = 2;
    if (has_m_achievedpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_achievedpoints());
    }

  }
  // repeated .proto_ff.E_XiuzhenroadBonuspointsTotalitemsDesc m_totalitems = 3;
  total_size += 1 * this->m_totalitems_size();
  for (int i = 0; i < this->m_totalitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_totalitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XiuzhenroadBonuspoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XiuzhenroadBonuspoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XiuzhenroadBonuspoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XiuzhenroadBonuspoints::MergeFrom(const E_XiuzhenroadBonuspoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_totalitems_.MergeFrom(from.m_totalitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_totalrewardsid()) {
      set_m_totalrewardsid(from.m_totalrewardsid());
    }
    if (from.has_m_achievedpoints()) {
      set_m_achievedpoints(from.m_achievedpoints());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XiuzhenroadBonuspoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XiuzhenroadBonuspoints::CopyFrom(const E_XiuzhenroadBonuspoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XiuzhenroadBonuspoints::IsInitialized() const {

  return true;
}

void E_XiuzhenroadBonuspoints::Swap(E_XiuzhenroadBonuspoints* other) {
  if (other != this) {
    std::swap(m_totalrewardsid_, other->m_totalrewardsid_);
    std::swap(m_achievedpoints_, other->m_achievedpoints_);
    m_totalitems_.Swap(&other->m_totalitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XiuzhenroadBonuspoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XiuzhenroadBonuspoints_descriptor_;
  metadata.reflection = E_XiuzhenroadBonuspoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XiuzhenroadBonuspoints::kEXiuzhenroadBonuspointsListFieldNumber;
#endif  // !_MSC_VER

Sheet_XiuzhenroadBonuspoints::Sheet_XiuzhenroadBonuspoints()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XiuzhenroadBonuspoints::InitAsDefaultInstance() {
}

Sheet_XiuzhenroadBonuspoints::Sheet_XiuzhenroadBonuspoints(const Sheet_XiuzhenroadBonuspoints& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XiuzhenroadBonuspoints::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XiuzhenroadBonuspoints::~Sheet_XiuzhenroadBonuspoints() {
  SharedDtor();
}

void Sheet_XiuzhenroadBonuspoints::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XiuzhenroadBonuspoints::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XiuzhenroadBonuspoints::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XiuzhenroadBonuspoints_descriptor_;
}

const Sheet_XiuzhenroadBonuspoints& Sheet_XiuzhenroadBonuspoints::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  return *default_instance_;
}

Sheet_XiuzhenroadBonuspoints* Sheet_XiuzhenroadBonuspoints::default_instance_ = NULL;

Sheet_XiuzhenroadBonuspoints* Sheet_XiuzhenroadBonuspoints::New() const {
  return new Sheet_XiuzhenroadBonuspoints;
}

void Sheet_XiuzhenroadBonuspoints::Clear() {
  e_xiuzhenroadbonuspoints_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XiuzhenroadBonuspoints::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XiuzhenroadBonuspoints E_XiuzhenroadBonuspoints_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XiuzhenroadBonuspoints_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xiuzhenroadbonuspoints_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XiuzhenroadBonuspoints_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XiuzhenroadBonuspoints::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XiuzhenroadBonuspoints E_XiuzhenroadBonuspoints_List = 1;
  for (int i = 0; i < this->e_xiuzhenroadbonuspoints_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xiuzhenroadbonuspoints_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XiuzhenroadBonuspoints::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XiuzhenroadBonuspoints E_XiuzhenroadBonuspoints_List = 1;
  for (int i = 0; i < this->e_xiuzhenroadbonuspoints_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xiuzhenroadbonuspoints_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XiuzhenroadBonuspoints::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XiuzhenroadBonuspoints E_XiuzhenroadBonuspoints_List = 1;
  total_size += 1 * this->e_xiuzhenroadbonuspoints_list_size();
  for (int i = 0; i < this->e_xiuzhenroadbonuspoints_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xiuzhenroadbonuspoints_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XiuzhenroadBonuspoints::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XiuzhenroadBonuspoints* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XiuzhenroadBonuspoints*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XiuzhenroadBonuspoints::MergeFrom(const Sheet_XiuzhenroadBonuspoints& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xiuzhenroadbonuspoints_list_.MergeFrom(from.e_xiuzhenroadbonuspoints_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XiuzhenroadBonuspoints::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XiuzhenroadBonuspoints::CopyFrom(const Sheet_XiuzhenroadBonuspoints& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XiuzhenroadBonuspoints::IsInitialized() const {

  return true;
}

void Sheet_XiuzhenroadBonuspoints::Swap(Sheet_XiuzhenroadBonuspoints* other) {
  if (other != this) {
    e_xiuzhenroadbonuspoints_list_.Swap(&other->e_xiuzhenroadbonuspoints_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XiuzhenroadBonuspoints::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XiuzhenroadBonuspoints_descriptor_;
  metadata.reflection = Sheet_XiuzhenroadBonuspoints_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XiuzhenroadSkill::kMActivityskillsFieldNumber;
const int E_XiuzhenroadSkill::kMSkillidFieldNumber;
const int E_XiuzhenroadSkill::kMItenmidFieldNumber;
const int E_XiuzhenroadSkill::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_XiuzhenroadSkill::E_XiuzhenroadSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XiuzhenroadSkill::InitAsDefaultInstance() {
}

E_XiuzhenroadSkill::E_XiuzhenroadSkill(const E_XiuzhenroadSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XiuzhenroadSkill::SharedCtor() {
  _cached_size_ = 0;
  m_activityskills_ = 0;
  m_skillid_ = 0;
  m_itenmid_ = 0;
  m_attribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XiuzhenroadSkill::~E_XiuzhenroadSkill() {
  SharedDtor();
}

void E_XiuzhenroadSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_XiuzhenroadSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XiuzhenroadSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XiuzhenroadSkill_descriptor_;
}

const E_XiuzhenroadSkill& E_XiuzhenroadSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  return *default_instance_;
}

E_XiuzhenroadSkill* E_XiuzhenroadSkill::default_instance_ = NULL;

E_XiuzhenroadSkill* E_XiuzhenroadSkill::New() const {
  return new E_XiuzhenroadSkill;
}

void E_XiuzhenroadSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_activityskills_ = 0;
    m_skillid_ = 0;
    m_itenmid_ = 0;
    m_attribute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XiuzhenroadSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_activityskills = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activityskills_)));
          set_has_m_activityskills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_skillid;
        break;
      }

      // optional int32 m_skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_skillid_)));
          set_has_m_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itenmid;
        break;
      }

      // optional int32 m_itenmid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itenmid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itenmid_)));
          set_has_m_itenmid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_attribute;
        break;
      }

      // optional int32 m_attribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_attribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_attribute_)));
          set_has_m_attribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XiuzhenroadSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_activityskills = 1;
  if (has_m_activityskills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_activityskills(), output);
  }

  // optional int32 m_skillid = 2;
  if (has_m_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_skillid(), output);
  }

  // optional int32 m_itenmid = 3;
  if (has_m_itenmid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_itenmid(), output);
  }

  // optional int32 m_attribute = 4;
  if (has_m_attribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_attribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XiuzhenroadSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_activityskills = 1;
  if (has_m_activityskills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_activityskills(), target);
  }

  // optional int32 m_skillid = 2;
  if (has_m_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_skillid(), target);
  }

  // optional int32 m_itenmid = 3;
  if (has_m_itenmid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_itenmid(), target);
  }

  // optional int32 m_attribute = 4;
  if (has_m_attribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_attribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XiuzhenroadSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_activityskills = 1;
    if (has_m_activityskills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activityskills());
    }

    // optional int32 m_skillid = 2;
    if (has_m_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_skillid());
    }

    // optional int32 m_itenmid = 3;
    if (has_m_itenmid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itenmid());
    }

    // optional int32 m_attribute = 4;
    if (has_m_attribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_attribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XiuzhenroadSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XiuzhenroadSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XiuzhenroadSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XiuzhenroadSkill::MergeFrom(const E_XiuzhenroadSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_activityskills()) {
      set_m_activityskills(from.m_activityskills());
    }
    if (from.has_m_skillid()) {
      set_m_skillid(from.m_skillid());
    }
    if (from.has_m_itenmid()) {
      set_m_itenmid(from.m_itenmid());
    }
    if (from.has_m_attribute()) {
      set_m_attribute(from.m_attribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XiuzhenroadSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XiuzhenroadSkill::CopyFrom(const E_XiuzhenroadSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XiuzhenroadSkill::IsInitialized() const {

  return true;
}

void E_XiuzhenroadSkill::Swap(E_XiuzhenroadSkill* other) {
  if (other != this) {
    std::swap(m_activityskills_, other->m_activityskills_);
    std::swap(m_skillid_, other->m_skillid_);
    std::swap(m_itenmid_, other->m_itenmid_);
    std::swap(m_attribute_, other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XiuzhenroadSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XiuzhenroadSkill_descriptor_;
  metadata.reflection = E_XiuzhenroadSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XiuzhenroadSkill::kEXiuzhenroadSkillListFieldNumber;
#endif  // !_MSC_VER

Sheet_XiuzhenroadSkill::Sheet_XiuzhenroadSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XiuzhenroadSkill::InitAsDefaultInstance() {
}

Sheet_XiuzhenroadSkill::Sheet_XiuzhenroadSkill(const Sheet_XiuzhenroadSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XiuzhenroadSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XiuzhenroadSkill::~Sheet_XiuzhenroadSkill() {
  SharedDtor();
}

void Sheet_XiuzhenroadSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XiuzhenroadSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XiuzhenroadSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XiuzhenroadSkill_descriptor_;
}

const Sheet_XiuzhenroadSkill& Sheet_XiuzhenroadSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  return *default_instance_;
}

Sheet_XiuzhenroadSkill* Sheet_XiuzhenroadSkill::default_instance_ = NULL;

Sheet_XiuzhenroadSkill* Sheet_XiuzhenroadSkill::New() const {
  return new Sheet_XiuzhenroadSkill;
}

void Sheet_XiuzhenroadSkill::Clear() {
  e_xiuzhenroadskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XiuzhenroadSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XiuzhenroadSkill E_XiuzhenroadSkill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XiuzhenroadSkill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xiuzhenroadskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XiuzhenroadSkill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XiuzhenroadSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XiuzhenroadSkill E_XiuzhenroadSkill_List = 1;
  for (int i = 0; i < this->e_xiuzhenroadskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xiuzhenroadskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XiuzhenroadSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XiuzhenroadSkill E_XiuzhenroadSkill_List = 1;
  for (int i = 0; i < this->e_xiuzhenroadskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xiuzhenroadskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XiuzhenroadSkill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XiuzhenroadSkill E_XiuzhenroadSkill_List = 1;
  total_size += 1 * this->e_xiuzhenroadskill_list_size();
  for (int i = 0; i < this->e_xiuzhenroadskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xiuzhenroadskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XiuzhenroadSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XiuzhenroadSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XiuzhenroadSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XiuzhenroadSkill::MergeFrom(const Sheet_XiuzhenroadSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xiuzhenroadskill_list_.MergeFrom(from.e_xiuzhenroadskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XiuzhenroadSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XiuzhenroadSkill::CopyFrom(const Sheet_XiuzhenroadSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XiuzhenroadSkill::IsInitialized() const {

  return true;
}

void Sheet_XiuzhenroadSkill::Swap(Sheet_XiuzhenroadSkill* other) {
  if (other != this) {
    e_xiuzhenroadskill_list_.Swap(&other->e_xiuzhenroadskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XiuzhenroadSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XiuzhenroadSkill_descriptor_;
  metadata.reflection = Sheet_XiuzhenroadSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_XiuzhenroadClassify::kMTypeidFieldNumber;
const int E_XiuzhenroadClassify::kMGiftFieldNumber;
const int E_XiuzhenroadClassify::kMGiftidFieldNumber;
const int E_XiuzhenroadClassify::kMRechargeidFieldNumber;
#endif  // !_MSC_VER

E_XiuzhenroadClassify::E_XiuzhenroadClassify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_XiuzhenroadClassify::InitAsDefaultInstance() {
}

E_XiuzhenroadClassify::E_XiuzhenroadClassify(const E_XiuzhenroadClassify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_XiuzhenroadClassify::SharedCtor() {
  _cached_size_ = 0;
  m_typeid_ = 0;
  m_gift_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_giftid_ = 0;
  m_rechargeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_XiuzhenroadClassify::~E_XiuzhenroadClassify() {
  SharedDtor();
}

void E_XiuzhenroadClassify::SharedDtor() {
  if (m_gift_ != &::google::protobuf::internal::kEmptyString) {
    delete m_gift_;
  }
  if (this != default_instance_) {
  }
}

void E_XiuzhenroadClassify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_XiuzhenroadClassify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_XiuzhenroadClassify_descriptor_;
}

const E_XiuzhenroadClassify& E_XiuzhenroadClassify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  return *default_instance_;
}

E_XiuzhenroadClassify* E_XiuzhenroadClassify::default_instance_ = NULL;

E_XiuzhenroadClassify* E_XiuzhenroadClassify::New() const {
  return new E_XiuzhenroadClassify;
}

void E_XiuzhenroadClassify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_typeid_ = 0;
    if (has_m_gift()) {
      if (m_gift_ != &::google::protobuf::internal::kEmptyString) {
        m_gift_->clear();
      }
    }
    m_giftid_ = 0;
    m_rechargeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_XiuzhenroadClassify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_typeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typeid_)));
          set_has_m_typeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_gift;
        break;
      }

      // optional string m_gift = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_gift()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_gift().data(), this->m_gift().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_giftid;
        break;
      }

      // optional int32 m_giftid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_giftid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_giftid_)));
          set_has_m_giftid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_rechargeid;
        break;
      }

      // optional int32 m_rechargeid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechargeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechargeid_)));
          set_has_m_rechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_XiuzhenroadClassify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_typeid = 1;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_typeid(), output);
  }

  // optional string m_gift = 2;
  if (has_m_gift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gift().data(), this->m_gift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_gift(), output);
  }

  // optional int32 m_giftid = 3;
  if (has_m_giftid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_giftid(), output);
  }

  // optional int32 m_rechargeid = 4;
  if (has_m_rechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_rechargeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_XiuzhenroadClassify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_typeid = 1;
  if (has_m_typeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_typeid(), target);
  }

  // optional string m_gift = 2;
  if (has_m_gift()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_gift().data(), this->m_gift().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_gift(), target);
  }

  // optional int32 m_giftid = 3;
  if (has_m_giftid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_giftid(), target);
  }

  // optional int32 m_rechargeid = 4;
  if (has_m_rechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_rechargeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_XiuzhenroadClassify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_typeid = 1;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typeid());
    }

    // optional string m_gift = 2;
    if (has_m_gift()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_gift());
    }

    // optional int32 m_giftid = 3;
    if (has_m_giftid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_giftid());
    }

    // optional int32 m_rechargeid = 4;
    if (has_m_rechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechargeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_XiuzhenroadClassify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_XiuzhenroadClassify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_XiuzhenroadClassify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_XiuzhenroadClassify::MergeFrom(const E_XiuzhenroadClassify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_gift()) {
      set_m_gift(from.m_gift());
    }
    if (from.has_m_giftid()) {
      set_m_giftid(from.m_giftid());
    }
    if (from.has_m_rechargeid()) {
      set_m_rechargeid(from.m_rechargeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_XiuzhenroadClassify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_XiuzhenroadClassify::CopyFrom(const E_XiuzhenroadClassify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_XiuzhenroadClassify::IsInitialized() const {

  return true;
}

void E_XiuzhenroadClassify::Swap(E_XiuzhenroadClassify* other) {
  if (other != this) {
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_gift_, other->m_gift_);
    std::swap(m_giftid_, other->m_giftid_);
    std::swap(m_rechargeid_, other->m_rechargeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_XiuzhenroadClassify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_XiuzhenroadClassify_descriptor_;
  metadata.reflection = E_XiuzhenroadClassify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_XiuzhenroadClassify::kEXiuzhenroadClassifyListFieldNumber;
#endif  // !_MSC_VER

Sheet_XiuzhenroadClassify::Sheet_XiuzhenroadClassify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_XiuzhenroadClassify::InitAsDefaultInstance() {
}

Sheet_XiuzhenroadClassify::Sheet_XiuzhenroadClassify(const Sheet_XiuzhenroadClassify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_XiuzhenroadClassify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_XiuzhenroadClassify::~Sheet_XiuzhenroadClassify() {
  SharedDtor();
}

void Sheet_XiuzhenroadClassify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_XiuzhenroadClassify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_XiuzhenroadClassify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_XiuzhenroadClassify_descriptor_;
}

const Sheet_XiuzhenroadClassify& Sheet_XiuzhenroadClassify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fXiuzhenroad_2eproto();
  return *default_instance_;
}

Sheet_XiuzhenroadClassify* Sheet_XiuzhenroadClassify::default_instance_ = NULL;

Sheet_XiuzhenroadClassify* Sheet_XiuzhenroadClassify::New() const {
  return new Sheet_XiuzhenroadClassify;
}

void Sheet_XiuzhenroadClassify::Clear() {
  e_xiuzhenroadclassify_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_XiuzhenroadClassify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_XiuzhenroadClassify E_XiuzhenroadClassify_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_XiuzhenroadClassify_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_xiuzhenroadclassify_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_XiuzhenroadClassify_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_XiuzhenroadClassify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_XiuzhenroadClassify E_XiuzhenroadClassify_List = 1;
  for (int i = 0; i < this->e_xiuzhenroadclassify_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_xiuzhenroadclassify_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_XiuzhenroadClassify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_XiuzhenroadClassify E_XiuzhenroadClassify_List = 1;
  for (int i = 0; i < this->e_xiuzhenroadclassify_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_xiuzhenroadclassify_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_XiuzhenroadClassify::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_XiuzhenroadClassify E_XiuzhenroadClassify_List = 1;
  total_size += 1 * this->e_xiuzhenroadclassify_list_size();
  for (int i = 0; i < this->e_xiuzhenroadclassify_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_xiuzhenroadclassify_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_XiuzhenroadClassify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_XiuzhenroadClassify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_XiuzhenroadClassify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_XiuzhenroadClassify::MergeFrom(const Sheet_XiuzhenroadClassify& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_xiuzhenroadclassify_list_.MergeFrom(from.e_xiuzhenroadclassify_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_XiuzhenroadClassify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_XiuzhenroadClassify::CopyFrom(const Sheet_XiuzhenroadClassify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_XiuzhenroadClassify::IsInitialized() const {

  return true;
}

void Sheet_XiuzhenroadClassify::Swap(Sheet_XiuzhenroadClassify* other) {
  if (other != this) {
    e_xiuzhenroadclassify_list_.Swap(&other->e_xiuzhenroadclassify_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_XiuzhenroadClassify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_XiuzhenroadClassify_descriptor_;
  metadata.reflection = Sheet_XiuzhenroadClassify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
