// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ranking.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ranking.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* rankingranking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rankingranking_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rankingranking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rankingranking_reflection_ = NULL;
const ::google::protobuf::Descriptor* rankingdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rankingdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rankingdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rankingdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* rankingpkcons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rankingpkcons_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rankingpkcons_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rankingpkcons_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ranking_2eproto() {
  protobuf_AddDesc_ranking_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ranking.proto");
  GOOGLE_CHECK(file != NULL);
  rankingranking_descriptor_ = file->message_type(0);
  static const int rankingranking_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingranking, rankingid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingranking, rankingname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingranking, save_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingranking, capacity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingranking, showsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingranking, rankmodule_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingranking, dateid_),
  };
  rankingranking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rankingranking_descriptor_,
      rankingranking::default_instance_,
      rankingranking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingranking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingranking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rankingranking));
  Sheet_rankingranking_descriptor_ = file->message_type(1);
  static const int Sheet_rankingranking_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rankingranking, rankingranking_list_),
  };
  Sheet_rankingranking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rankingranking_descriptor_,
      Sheet_rankingranking::default_instance_,
      Sheet_rankingranking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rankingranking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rankingranking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rankingranking));
  rankingdate_descriptor_ = file->message_type(2);
  static const int rankingdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingdate, dateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingdate, datename_),
  };
  rankingdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rankingdate_descriptor_,
      rankingdate::default_instance_,
      rankingdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rankingdate));
  Sheet_rankingdate_descriptor_ = file->message_type(3);
  static const int Sheet_rankingdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rankingdate, rankingdate_list_),
  };
  Sheet_rankingdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rankingdate_descriptor_,
      Sheet_rankingdate::default_instance_,
      Sheet_rankingdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rankingdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rankingdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rankingdate));
  rankingpkcons_descriptor_ = file->message_type(4);
  static const int rankingpkcons_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingpkcons, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingpkcons, valuedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingpkcons, stringdata_),
  };
  rankingpkcons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rankingpkcons_descriptor_,
      rankingpkcons::default_instance_,
      rankingpkcons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingpkcons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rankingpkcons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rankingpkcons));
  Sheet_rankingpkcons_descriptor_ = file->message_type(5);
  static const int Sheet_rankingpkcons_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rankingpkcons, rankingpkcons_list_),
  };
  Sheet_rankingpkcons_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rankingpkcons_descriptor_,
      Sheet_rankingpkcons::default_instance_,
      Sheet_rankingpkcons_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rankingpkcons, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rankingpkcons, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rankingpkcons));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ranking_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rankingranking_descriptor_, &rankingranking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rankingranking_descriptor_, &Sheet_rankingranking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rankingdate_descriptor_, &rankingdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rankingdate_descriptor_, &Sheet_rankingdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rankingpkcons_descriptor_, &rankingpkcons::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rankingpkcons_descriptor_, &Sheet_rankingpkcons::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ranking_2eproto() {
  delete rankingranking::default_instance_;
  delete rankingranking_reflection_;
  delete Sheet_rankingranking::default_instance_;
  delete Sheet_rankingranking_reflection_;
  delete rankingdate::default_instance_;
  delete rankingdate_reflection_;
  delete Sheet_rankingdate::default_instance_;
  delete Sheet_rankingdate_reflection_;
  delete rankingpkcons::default_instance_;
  delete rankingpkcons_reflection_;
  delete Sheet_rankingpkcons::default_instance_;
  delete Sheet_rankingpkcons_reflection_;
}

void protobuf_AddDesc_ranking_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rranking.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\"\241\002\n\016rankingranking\022\"\n\trankingID"
    "\030\001 \001(\005B\017\302\377\024\013\346\216\222\350\241\214\346\246\234ID\022)\n\013rankingName\030\002"
    " \001(\tB\024\302\377\024\014\346\216\222\350\241\214\345\220\215\347\247\260\220\301\024 \022\036\n\004save\030\003 \001(\005"
    "B\020\302\377\024\014\346\230\257\345\220\246\344\277\235\345\255\230\022+\n\010capacity\030\004 \001(\005B\031\302\377"
    "\024\025\345\256\236\351\231\205\346\216\222\345\244\232\345\260\221\345\205\203\347\264\240\022+\n\010showSize\030\005 \001("
    "\005B\031\302\377\024\025\346\230\276\347\244\272\345\244\232\345\260\221\344\270\252\345\205\203\347\264\240\022$\n\nrankModu"
    "le\030\006 \001(\005B\020\302\377\024\014\346\216\222\350\241\214\347\261\273\345\236\213\022 \n\006dateID\030\007 \003"
    "(\005B\020\302\377\024\014\346\216\222\350\241\214\346\225\260\346\215\256\"T\n\024Sheet_rankingran"
    "king\022<\n\023rankingranking_List\030\001 \003(\0132\030.prot"
    "o_ff.rankingrankingB\005\210\301\024\240\001\"S\n\013rankingdat"
    "e\022\034\n\006dateID\030\001 \001(\005B\014\302\377\024\010\346\225\260\346\215\256ID\022&\n\010dateN"
    "ame\030\002 \001(\tB\024\302\377\024\014\346\225\260\346\215\256\345\220\215\347\247\260\220\301\024 \"K\n\021Sheet"
    "_rankingdate\0226\n\020rankingdate_List\030\001 \003(\0132\025"
    ".proto_ff.rankingdateB\005\210\301\024\237\001\"s\n\rrankingp"
    "kcons\022\026\n\002ID\030\001 \001(\005B\n\302\377\024\006\347\274\226\345\217\267\022 \n\tvalueda"
    "ta\030\002 \001(\005B\r\302\377\024\t\345\200\274\346\225\260\346\215\256\022(\n\nstringdata\030\003 "
    "\001(\tB\024\302\377\024\014\346\226\207\346\234\254\346\225\260\346\215\256\220\301\024 \"P\n\023Sheet_ranki"
    "ngpkcons\0229\n\022rankingpkcons_List\030\001 \003(\0132\027.p"
    "roto_ff.rankingpkconsB\004\210\301\024k", 787);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ranking.proto", &protobuf_RegisterTypes);
  rankingranking::default_instance_ = new rankingranking();
  Sheet_rankingranking::default_instance_ = new Sheet_rankingranking();
  rankingdate::default_instance_ = new rankingdate();
  Sheet_rankingdate::default_instance_ = new Sheet_rankingdate();
  rankingpkcons::default_instance_ = new rankingpkcons();
  Sheet_rankingpkcons::default_instance_ = new Sheet_rankingpkcons();
  rankingranking::default_instance_->InitAsDefaultInstance();
  Sheet_rankingranking::default_instance_->InitAsDefaultInstance();
  rankingdate::default_instance_->InitAsDefaultInstance();
  Sheet_rankingdate::default_instance_->InitAsDefaultInstance();
  rankingpkcons::default_instance_->InitAsDefaultInstance();
  Sheet_rankingpkcons::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ranking_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ranking_2eproto {
  StaticDescriptorInitializer_ranking_2eproto() {
    protobuf_AddDesc_ranking_2eproto();
  }
} static_descriptor_initializer_ranking_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rankingranking::kRankingIDFieldNumber;
const int rankingranking::kRankingNameFieldNumber;
const int rankingranking::kSaveFieldNumber;
const int rankingranking::kCapacityFieldNumber;
const int rankingranking::kShowSizeFieldNumber;
const int rankingranking::kRankModuleFieldNumber;
const int rankingranking::kDateIDFieldNumber;
#endif  // !_MSC_VER

rankingranking::rankingranking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rankingranking::InitAsDefaultInstance() {
}

rankingranking::rankingranking(const rankingranking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rankingranking::SharedCtor() {
  _cached_size_ = 0;
  rankingid_ = 0;
  rankingname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  save_ = 0;
  capacity_ = 0;
  showsize_ = 0;
  rankmodule_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rankingranking::~rankingranking() {
  SharedDtor();
}

void rankingranking::SharedDtor() {
  if (rankingname_ != &::google::protobuf::internal::kEmptyString) {
    delete rankingname_;
  }
  if (this != default_instance_) {
  }
}

void rankingranking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rankingranking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rankingranking_descriptor_;
}

const rankingranking& rankingranking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ranking_2eproto();
  return *default_instance_;
}

rankingranking* rankingranking::default_instance_ = NULL;

rankingranking* rankingranking::New() const {
  return new rankingranking;
}

void rankingranking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rankingid_ = 0;
    if (has_rankingname()) {
      if (rankingname_ != &::google::protobuf::internal::kEmptyString) {
        rankingname_->clear();
      }
    }
    save_ = 0;
    capacity_ = 0;
    showsize_ = 0;
    rankmodule_ = 0;
  }
  dateid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rankingranking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rankingID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankingid_)));
          set_has_rankingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rankingName;
        break;
      }

      // optional string rankingName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankingName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rankingname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rankingname().data(), this->rankingname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_save;
        break;
      }

      // optional int32 save = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_save:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &save_)));
          set_has_save();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_capacity;
        break;
      }

      // optional int32 capacity = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_capacity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &capacity_)));
          set_has_capacity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_showSize;
        break;
      }

      // optional int32 showSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_showSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &showsize_)));
          set_has_showsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rankModule;
        break;
      }

      // optional int32 rankModule = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankModule:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rankmodule_)));
          set_has_rankmodule();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dateID;
        break;
      }

      // repeated int32 dateID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_dateid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dateid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_dateID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rankingranking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rankingID = 1;
  if (has_rankingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rankingid(), output);
  }

  // optional string rankingName = 2;
  if (has_rankingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rankingname().data(), this->rankingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->rankingname(), output);
  }

  // optional int32 save = 3;
  if (has_save()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->save(), output);
  }

  // optional int32 capacity = 4;
  if (has_capacity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->capacity(), output);
  }

  // optional int32 showSize = 5;
  if (has_showsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->showsize(), output);
  }

  // optional int32 rankModule = 6;
  if (has_rankmodule()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rankmodule(), output);
  }

  // repeated int32 dateID = 7;
  for (int i = 0; i < this->dateid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->dateid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rankingranking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rankingID = 1;
  if (has_rankingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rankingid(), target);
  }

  // optional string rankingName = 2;
  if (has_rankingname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rankingname().data(), this->rankingname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->rankingname(), target);
  }

  // optional int32 save = 3;
  if (has_save()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->save(), target);
  }

  // optional int32 capacity = 4;
  if (has_capacity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->capacity(), target);
  }

  // optional int32 showSize = 5;
  if (has_showsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->showsize(), target);
  }

  // optional int32 rankModule = 6;
  if (has_rankmodule()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rankmodule(), target);
  }

  // repeated int32 dateID = 7;
  for (int i = 0; i < this->dateid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->dateid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rankingranking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rankingID = 1;
    if (has_rankingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankingid());
    }

    // optional string rankingName = 2;
    if (has_rankingname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rankingname());
    }

    // optional int32 save = 3;
    if (has_save()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->save());
    }

    // optional int32 capacity = 4;
    if (has_capacity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->capacity());
    }

    // optional int32 showSize = 5;
    if (has_showsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->showsize());
    }

    // optional int32 rankModule = 6;
    if (has_rankmodule()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rankmodule());
    }

  }
  // repeated int32 dateID = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->dateid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dateid(i));
    }
    total_size += 1 * this->dateid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rankingranking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rankingranking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rankingranking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rankingranking::MergeFrom(const rankingranking& from) {
  GOOGLE_CHECK_NE(&from, this);
  dateid_.MergeFrom(from.dateid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rankingid()) {
      set_rankingid(from.rankingid());
    }
    if (from.has_rankingname()) {
      set_rankingname(from.rankingname());
    }
    if (from.has_save()) {
      set_save(from.save());
    }
    if (from.has_capacity()) {
      set_capacity(from.capacity());
    }
    if (from.has_showsize()) {
      set_showsize(from.showsize());
    }
    if (from.has_rankmodule()) {
      set_rankmodule(from.rankmodule());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rankingranking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rankingranking::CopyFrom(const rankingranking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rankingranking::IsInitialized() const {

  return true;
}

void rankingranking::Swap(rankingranking* other) {
  if (other != this) {
    std::swap(rankingid_, other->rankingid_);
    std::swap(rankingname_, other->rankingname_);
    std::swap(save_, other->save_);
    std::swap(capacity_, other->capacity_);
    std::swap(showsize_, other->showsize_);
    std::swap(rankmodule_, other->rankmodule_);
    dateid_.Swap(&other->dateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rankingranking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rankingranking_descriptor_;
  metadata.reflection = rankingranking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rankingranking::kRankingrankingListFieldNumber;
#endif  // !_MSC_VER

Sheet_rankingranking::Sheet_rankingranking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rankingranking::InitAsDefaultInstance() {
}

Sheet_rankingranking::Sheet_rankingranking(const Sheet_rankingranking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rankingranking::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rankingranking::~Sheet_rankingranking() {
  SharedDtor();
}

void Sheet_rankingranking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rankingranking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rankingranking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rankingranking_descriptor_;
}

const Sheet_rankingranking& Sheet_rankingranking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ranking_2eproto();
  return *default_instance_;
}

Sheet_rankingranking* Sheet_rankingranking::default_instance_ = NULL;

Sheet_rankingranking* Sheet_rankingranking::New() const {
  return new Sheet_rankingranking;
}

void Sheet_rankingranking::Clear() {
  rankingranking_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rankingranking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rankingranking rankingranking_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankingranking_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankingranking_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankingranking_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rankingranking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rankingranking rankingranking_List = 1;
  for (int i = 0; i < this->rankingranking_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankingranking_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rankingranking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rankingranking rankingranking_List = 1;
  for (int i = 0; i < this->rankingranking_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankingranking_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rankingranking::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rankingranking rankingranking_List = 1;
  total_size += 1 * this->rankingranking_list_size();
  for (int i = 0; i < this->rankingranking_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankingranking_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rankingranking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rankingranking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rankingranking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rankingranking::MergeFrom(const Sheet_rankingranking& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankingranking_list_.MergeFrom(from.rankingranking_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rankingranking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rankingranking::CopyFrom(const Sheet_rankingranking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rankingranking::IsInitialized() const {

  return true;
}

void Sheet_rankingranking::Swap(Sheet_rankingranking* other) {
  if (other != this) {
    rankingranking_list_.Swap(&other->rankingranking_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rankingranking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rankingranking_descriptor_;
  metadata.reflection = Sheet_rankingranking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rankingdate::kDateIDFieldNumber;
const int rankingdate::kDateNameFieldNumber;
#endif  // !_MSC_VER

rankingdate::rankingdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rankingdate::InitAsDefaultInstance() {
}

rankingdate::rankingdate(const rankingdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rankingdate::SharedCtor() {
  _cached_size_ = 0;
  dateid_ = 0;
  datename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rankingdate::~rankingdate() {
  SharedDtor();
}

void rankingdate::SharedDtor() {
  if (datename_ != &::google::protobuf::internal::kEmptyString) {
    delete datename_;
  }
  if (this != default_instance_) {
  }
}

void rankingdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rankingdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rankingdate_descriptor_;
}

const rankingdate& rankingdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ranking_2eproto();
  return *default_instance_;
}

rankingdate* rankingdate::default_instance_ = NULL;

rankingdate* rankingdate::New() const {
  return new rankingdate;
}

void rankingdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dateid_ = 0;
    if (has_datename()) {
      if (datename_ != &::google::protobuf::internal::kEmptyString) {
        datename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rankingdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dateID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dateid_)));
          set_has_dateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dateName;
        break;
      }

      // optional string dateName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datename().data(), this->datename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rankingdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dateID = 1;
  if (has_dateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dateid(), output);
  }

  // optional string dateName = 2;
  if (has_datename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datename().data(), this->datename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->datename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rankingdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dateID = 1;
  if (has_dateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dateid(), target);
  }

  // optional string dateName = 2;
  if (has_datename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datename().data(), this->datename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->datename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rankingdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dateID = 1;
    if (has_dateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dateid());
    }

    // optional string dateName = 2;
    if (has_datename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rankingdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rankingdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rankingdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rankingdate::MergeFrom(const rankingdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dateid()) {
      set_dateid(from.dateid());
    }
    if (from.has_datename()) {
      set_datename(from.datename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rankingdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rankingdate::CopyFrom(const rankingdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rankingdate::IsInitialized() const {

  return true;
}

void rankingdate::Swap(rankingdate* other) {
  if (other != this) {
    std::swap(dateid_, other->dateid_);
    std::swap(datename_, other->datename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rankingdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rankingdate_descriptor_;
  metadata.reflection = rankingdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rankingdate::kRankingdateListFieldNumber;
#endif  // !_MSC_VER

Sheet_rankingdate::Sheet_rankingdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rankingdate::InitAsDefaultInstance() {
}

Sheet_rankingdate::Sheet_rankingdate(const Sheet_rankingdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rankingdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rankingdate::~Sheet_rankingdate() {
  SharedDtor();
}

void Sheet_rankingdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rankingdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rankingdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rankingdate_descriptor_;
}

const Sheet_rankingdate& Sheet_rankingdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ranking_2eproto();
  return *default_instance_;
}

Sheet_rankingdate* Sheet_rankingdate::default_instance_ = NULL;

Sheet_rankingdate* Sheet_rankingdate::New() const {
  return new Sheet_rankingdate;
}

void Sheet_rankingdate::Clear() {
  rankingdate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rankingdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rankingdate rankingdate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankingdate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankingdate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankingdate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rankingdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rankingdate rankingdate_List = 1;
  for (int i = 0; i < this->rankingdate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankingdate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rankingdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rankingdate rankingdate_List = 1;
  for (int i = 0; i < this->rankingdate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankingdate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rankingdate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rankingdate rankingdate_List = 1;
  total_size += 1 * this->rankingdate_list_size();
  for (int i = 0; i < this->rankingdate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankingdate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rankingdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rankingdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rankingdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rankingdate::MergeFrom(const Sheet_rankingdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankingdate_list_.MergeFrom(from.rankingdate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rankingdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rankingdate::CopyFrom(const Sheet_rankingdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rankingdate::IsInitialized() const {

  return true;
}

void Sheet_rankingdate::Swap(Sheet_rankingdate* other) {
  if (other != this) {
    rankingdate_list_.Swap(&other->rankingdate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rankingdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rankingdate_descriptor_;
  metadata.reflection = Sheet_rankingdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rankingpkcons::kIDFieldNumber;
const int rankingpkcons::kValuedataFieldNumber;
const int rankingpkcons::kStringdataFieldNumber;
#endif  // !_MSC_VER

rankingpkcons::rankingpkcons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rankingpkcons::InitAsDefaultInstance() {
}

rankingpkcons::rankingpkcons(const rankingpkcons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rankingpkcons::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  valuedata_ = 0;
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rankingpkcons::~rankingpkcons() {
  SharedDtor();
}

void rankingpkcons::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void rankingpkcons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rankingpkcons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rankingpkcons_descriptor_;
}

const rankingpkcons& rankingpkcons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ranking_2eproto();
  return *default_instance_;
}

rankingpkcons* rankingpkcons::default_instance_ = NULL;

rankingpkcons* rankingpkcons::New() const {
  return new rankingpkcons;
}

void rankingpkcons::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    valuedata_ = 0;
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rankingpkcons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_valuedata;
        break;
      }

      // optional int32 valuedata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valuedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuedata_)));
          set_has_valuedata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rankingpkcons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 valuedata = 2;
  if (has_valuedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->valuedata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rankingpkcons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 valuedata = 2;
  if (has_valuedata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->valuedata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rankingpkcons::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 valuedata = 2;
    if (has_valuedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuedata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rankingpkcons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rankingpkcons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rankingpkcons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rankingpkcons::MergeFrom(const rankingpkcons& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_valuedata()) {
      set_valuedata(from.valuedata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rankingpkcons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rankingpkcons::CopyFrom(const rankingpkcons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rankingpkcons::IsInitialized() const {

  return true;
}

void rankingpkcons::Swap(rankingpkcons* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(valuedata_, other->valuedata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rankingpkcons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rankingpkcons_descriptor_;
  metadata.reflection = rankingpkcons_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rankingpkcons::kRankingpkconsListFieldNumber;
#endif  // !_MSC_VER

Sheet_rankingpkcons::Sheet_rankingpkcons()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rankingpkcons::InitAsDefaultInstance() {
}

Sheet_rankingpkcons::Sheet_rankingpkcons(const Sheet_rankingpkcons& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rankingpkcons::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rankingpkcons::~Sheet_rankingpkcons() {
  SharedDtor();
}

void Sheet_rankingpkcons::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rankingpkcons::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rankingpkcons::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rankingpkcons_descriptor_;
}

const Sheet_rankingpkcons& Sheet_rankingpkcons::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ranking_2eproto();
  return *default_instance_;
}

Sheet_rankingpkcons* Sheet_rankingpkcons::default_instance_ = NULL;

Sheet_rankingpkcons* Sheet_rankingpkcons::New() const {
  return new Sheet_rankingpkcons;
}

void Sheet_rankingpkcons::Clear() {
  rankingpkcons_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rankingpkcons::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rankingpkcons rankingpkcons_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankingpkcons_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rankingpkcons_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rankingpkcons_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rankingpkcons::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rankingpkcons rankingpkcons_List = 1;
  for (int i = 0; i < this->rankingpkcons_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rankingpkcons_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rankingpkcons::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rankingpkcons rankingpkcons_List = 1;
  for (int i = 0; i < this->rankingpkcons_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rankingpkcons_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rankingpkcons::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rankingpkcons rankingpkcons_List = 1;
  total_size += 1 * this->rankingpkcons_list_size();
  for (int i = 0; i < this->rankingpkcons_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rankingpkcons_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rankingpkcons::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rankingpkcons* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rankingpkcons*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rankingpkcons::MergeFrom(const Sheet_rankingpkcons& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankingpkcons_list_.MergeFrom(from.rankingpkcons_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rankingpkcons::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rankingpkcons::CopyFrom(const Sheet_rankingpkcons& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rankingpkcons::IsInitialized() const {

  return true;
}

void Sheet_rankingpkcons::Swap(Sheet_rankingpkcons* other) {
  if (other != this) {
    rankingpkcons_list_.Swap(&other->rankingpkcons_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rankingpkcons::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rankingpkcons_descriptor_;
  metadata.reflection = Sheet_rankingpkcons_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
