// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: link.proto

#ifndef PROTOBUF_link_2eproto__INCLUDED
#define PROTOBUF_link_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_link_2eproto();
void protobuf_AssignDesc_link_2eproto();
void protobuf_ShutdownFile_link_2eproto();

class linklink;
class Sheet_linklink;

// ===================================================================

class linklink : public ::google::protobuf::Message {
 public:
  linklink();
  virtual ~linklink();

  linklink(const linklink& from);

  inline linklink& operator=(const linklink& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const linklink& default_instance();

  void Swap(linklink* other);

  // implements Message ----------------------------------------------

  linklink* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const linklink& from);
  void MergeFrom(const linklink& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string icon = 2;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 2;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // optional string dbArgs = 3;
  inline bool has_dbargs() const;
  inline void clear_dbargs();
  static const int kDbArgsFieldNumber = 3;
  inline const ::std::string& dbargs() const;
  inline void set_dbargs(const ::std::string& value);
  inline void set_dbargs(const char* value);
  inline void set_dbargs(const char* value, size_t size);
  inline ::std::string* mutable_dbargs();
  inline ::std::string* release_dbargs();
  inline void set_allocated_dbargs(::std::string* dbargs);

  // optional string argsm = 4;
  inline bool has_argsm() const;
  inline void clear_argsm();
  static const int kArgsmFieldNumber = 4;
  inline const ::std::string& argsm() const;
  inline void set_argsm(const ::std::string& value);
  inline void set_argsm(const char* value);
  inline void set_argsm(const char* value, size_t size);
  inline ::std::string* mutable_argsm();
  inline ::std::string* release_argsm();
  inline void set_allocated_argsm(::std::string* argsm);

  // optional int32 functionUnlock = 5;
  inline bool has_functionunlock() const;
  inline void clear_functionunlock();
  static const int kFunctionUnlockFieldNumber = 5;
  inline ::google::protobuf::int32 functionunlock() const;
  inline void set_functionunlock(::google::protobuf::int32 value);

  // optional string linkNpc = 6;
  inline bool has_linknpc() const;
  inline void clear_linknpc();
  static const int kLinkNpcFieldNumber = 6;
  inline const ::std::string& linknpc() const;
  inline void set_linknpc(const ::std::string& value);
  inline void set_linknpc(const char* value);
  inline void set_linknpc(const char* value, size_t size);
  inline ::std::string* mutable_linknpc();
  inline ::std::string* release_linknpc();
  inline void set_allocated_linknpc(::std::string* linknpc);

  // @@protoc_insertion_point(class_scope:proto_ff.linklink)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_dbargs();
  inline void clear_has_dbargs();
  inline void set_has_argsm();
  inline void clear_has_argsm();
  inline void set_has_functionunlock();
  inline void clear_has_functionunlock();
  inline void set_has_linknpc();
  inline void clear_has_linknpc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* icon_;
  ::std::string* dbargs_;
  ::std::string* argsm_;
  ::std::string* linknpc_;
  ::google::protobuf::int32 functionunlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_link_2eproto();
  friend void protobuf_AssignDesc_link_2eproto();
  friend void protobuf_ShutdownFile_link_2eproto();

  void InitAsDefaultInstance();
  static linklink* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_linklink : public ::google::protobuf::Message {
 public:
  Sheet_linklink();
  virtual ~Sheet_linklink();

  Sheet_linklink(const Sheet_linklink& from);

  inline Sheet_linklink& operator=(const Sheet_linklink& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_linklink& default_instance();

  void Swap(Sheet_linklink* other);

  // implements Message ----------------------------------------------

  Sheet_linklink* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_linklink& from);
  void MergeFrom(const Sheet_linklink& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.linklink linklink_List = 1;
  inline int linklink_list_size() const;
  inline void clear_linklink_list();
  static const int kLinklinkListFieldNumber = 1;
  inline const ::proto_ff::linklink& linklink_list(int index) const;
  inline ::proto_ff::linklink* mutable_linklink_list(int index);
  inline ::proto_ff::linklink* add_linklink_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::linklink >&
      linklink_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::linklink >*
      mutable_linklink_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_linklink)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::linklink > linklink_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_link_2eproto();
  friend void protobuf_AssignDesc_link_2eproto();
  friend void protobuf_ShutdownFile_link_2eproto();

  void InitAsDefaultInstance();
  static Sheet_linklink* default_instance_;
};
// ===================================================================


// ===================================================================

// linklink

// optional int64 id = 1;
inline bool linklink::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void linklink::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void linklink::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void linklink::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 linklink::id() const {
  return id_;
}
inline void linklink::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string icon = 2;
inline bool linklink::has_icon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void linklink::set_has_icon() {
  _has_bits_[0] |= 0x00000002u;
}
inline void linklink::clear_has_icon() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void linklink::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& linklink::icon() const {
  return *icon_;
}
inline void linklink::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void linklink::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void linklink::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* linklink::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* linklink::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void linklink::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string dbArgs = 3;
inline bool linklink::has_dbargs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void linklink::set_has_dbargs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void linklink::clear_has_dbargs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void linklink::clear_dbargs() {
  if (dbargs_ != &::google::protobuf::internal::kEmptyString) {
    dbargs_->clear();
  }
  clear_has_dbargs();
}
inline const ::std::string& linklink::dbargs() const {
  return *dbargs_;
}
inline void linklink::set_dbargs(const ::std::string& value) {
  set_has_dbargs();
  if (dbargs_ == &::google::protobuf::internal::kEmptyString) {
    dbargs_ = new ::std::string;
  }
  dbargs_->assign(value);
}
inline void linklink::set_dbargs(const char* value) {
  set_has_dbargs();
  if (dbargs_ == &::google::protobuf::internal::kEmptyString) {
    dbargs_ = new ::std::string;
  }
  dbargs_->assign(value);
}
inline void linklink::set_dbargs(const char* value, size_t size) {
  set_has_dbargs();
  if (dbargs_ == &::google::protobuf::internal::kEmptyString) {
    dbargs_ = new ::std::string;
  }
  dbargs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* linklink::mutable_dbargs() {
  set_has_dbargs();
  if (dbargs_ == &::google::protobuf::internal::kEmptyString) {
    dbargs_ = new ::std::string;
  }
  return dbargs_;
}
inline ::std::string* linklink::release_dbargs() {
  clear_has_dbargs();
  if (dbargs_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dbargs_;
    dbargs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void linklink::set_allocated_dbargs(::std::string* dbargs) {
  if (dbargs_ != &::google::protobuf::internal::kEmptyString) {
    delete dbargs_;
  }
  if (dbargs) {
    set_has_dbargs();
    dbargs_ = dbargs;
  } else {
    clear_has_dbargs();
    dbargs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string argsm = 4;
inline bool linklink::has_argsm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void linklink::set_has_argsm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void linklink::clear_has_argsm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void linklink::clear_argsm() {
  if (argsm_ != &::google::protobuf::internal::kEmptyString) {
    argsm_->clear();
  }
  clear_has_argsm();
}
inline const ::std::string& linklink::argsm() const {
  return *argsm_;
}
inline void linklink::set_argsm(const ::std::string& value) {
  set_has_argsm();
  if (argsm_ == &::google::protobuf::internal::kEmptyString) {
    argsm_ = new ::std::string;
  }
  argsm_->assign(value);
}
inline void linklink::set_argsm(const char* value) {
  set_has_argsm();
  if (argsm_ == &::google::protobuf::internal::kEmptyString) {
    argsm_ = new ::std::string;
  }
  argsm_->assign(value);
}
inline void linklink::set_argsm(const char* value, size_t size) {
  set_has_argsm();
  if (argsm_ == &::google::protobuf::internal::kEmptyString) {
    argsm_ = new ::std::string;
  }
  argsm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* linklink::mutable_argsm() {
  set_has_argsm();
  if (argsm_ == &::google::protobuf::internal::kEmptyString) {
    argsm_ = new ::std::string;
  }
  return argsm_;
}
inline ::std::string* linklink::release_argsm() {
  clear_has_argsm();
  if (argsm_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = argsm_;
    argsm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void linklink::set_allocated_argsm(::std::string* argsm) {
  if (argsm_ != &::google::protobuf::internal::kEmptyString) {
    delete argsm_;
  }
  if (argsm) {
    set_has_argsm();
    argsm_ = argsm;
  } else {
    clear_has_argsm();
    argsm_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 functionUnlock = 5;
inline bool linklink::has_functionunlock() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void linklink::set_has_functionunlock() {
  _has_bits_[0] |= 0x00000010u;
}
inline void linklink::clear_has_functionunlock() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void linklink::clear_functionunlock() {
  functionunlock_ = 0;
  clear_has_functionunlock();
}
inline ::google::protobuf::int32 linklink::functionunlock() const {
  return functionunlock_;
}
inline void linklink::set_functionunlock(::google::protobuf::int32 value) {
  set_has_functionunlock();
  functionunlock_ = value;
}

// optional string linkNpc = 6;
inline bool linklink::has_linknpc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void linklink::set_has_linknpc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void linklink::clear_has_linknpc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void linklink::clear_linknpc() {
  if (linknpc_ != &::google::protobuf::internal::kEmptyString) {
    linknpc_->clear();
  }
  clear_has_linknpc();
}
inline const ::std::string& linklink::linknpc() const {
  return *linknpc_;
}
inline void linklink::set_linknpc(const ::std::string& value) {
  set_has_linknpc();
  if (linknpc_ == &::google::protobuf::internal::kEmptyString) {
    linknpc_ = new ::std::string;
  }
  linknpc_->assign(value);
}
inline void linklink::set_linknpc(const char* value) {
  set_has_linknpc();
  if (linknpc_ == &::google::protobuf::internal::kEmptyString) {
    linknpc_ = new ::std::string;
  }
  linknpc_->assign(value);
}
inline void linklink::set_linknpc(const char* value, size_t size) {
  set_has_linknpc();
  if (linknpc_ == &::google::protobuf::internal::kEmptyString) {
    linknpc_ = new ::std::string;
  }
  linknpc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* linklink::mutable_linknpc() {
  set_has_linknpc();
  if (linknpc_ == &::google::protobuf::internal::kEmptyString) {
    linknpc_ = new ::std::string;
  }
  return linknpc_;
}
inline ::std::string* linklink::release_linknpc() {
  clear_has_linknpc();
  if (linknpc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = linknpc_;
    linknpc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void linklink::set_allocated_linknpc(::std::string* linknpc) {
  if (linknpc_ != &::google::protobuf::internal::kEmptyString) {
    delete linknpc_;
  }
  if (linknpc) {
    set_has_linknpc();
    linknpc_ = linknpc;
  } else {
    clear_has_linknpc();
    linknpc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_linklink

// repeated .proto_ff.linklink linklink_List = 1;
inline int Sheet_linklink::linklink_list_size() const {
  return linklink_list_.size();
}
inline void Sheet_linklink::clear_linklink_list() {
  linklink_list_.Clear();
}
inline const ::proto_ff::linklink& Sheet_linklink::linklink_list(int index) const {
  return linklink_list_.Get(index);
}
inline ::proto_ff::linklink* Sheet_linklink::mutable_linklink_list(int index) {
  return linklink_list_.Mutable(index);
}
inline ::proto_ff::linklink* Sheet_linklink::add_linklink_list() {
  return linklink_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::linklink >&
Sheet_linklink::linklink_list() const {
  return linklink_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::linklink >*
Sheet_linklink::mutable_linklink_list() {
  return &linklink_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_link_2eproto__INCLUDED
