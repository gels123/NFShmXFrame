// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Godevil.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Godevil.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_GodevilPreposetask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilPreposetask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilPreposetask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilPreposetask_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilGodevillvAttributeDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilGodevillvAttributeDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilGodevillv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilGodevillv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilGodevillv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilGodevillv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilGodevilprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilGodevilprivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilGodevilprivilege_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilGodevilprivilege_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilStrongStDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilStrongStDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilStrong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilStrong_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilStrong_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilStrong_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilStrongexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilStrongexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilStrongexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilStrongexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilAdvancelvAdDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilAdvancelvAdDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilAdvancelv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilAdvancelv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilAdvancelv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilAdvancelv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilAdvanceexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilAdvanceexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilAdvanceexp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilAdvanceexp_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilQualitylvItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilQualitylvItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilQualitylv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilQualitylv_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilQualitylv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilQualitylv_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilPositionunlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilPositionunlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilPositionunlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilPositionunlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilBlacksmithItemDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilBlacksmithItemDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilBlacksmithSkillDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilBlacksmithSkillDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilBlacksmith_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilBlacksmith_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilBlacksmith_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilBlacksmith_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilGodevilskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilGodevilskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilGodevilskill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilGodevilskill_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_GodevilPrefixname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_GodevilPrefixname_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_GodevilPrefixname_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_GodevilPrefixname_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fGodevil_2eproto() {
  protobuf_AddDesc_E_5fGodevil_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Godevil.proto");
  GOOGLE_CHECK(file != NULL);
  E_GodevilPreposetask_descriptor_ = file->message_type(0);
  static const int E_GodevilPreposetask_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_modeltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_starttask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_endtask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_condition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, m_rewardid_),
  };
  E_GodevilPreposetask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilPreposetask_descriptor_,
      E_GodevilPreposetask::default_instance_,
      E_GodevilPreposetask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPreposetask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilPreposetask));
  Sheet_GodevilPreposetask_descriptor_ = file->message_type(1);
  static const int Sheet_GodevilPreposetask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPreposetask, e_godevilpreposetask_list_),
  };
  Sheet_GodevilPreposetask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilPreposetask_descriptor_,
      Sheet_GodevilPreposetask::default_instance_,
      Sheet_GodevilPreposetask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPreposetask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPreposetask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilPreposetask));
  E_GodevilGodevillvAttributeDesc_descriptor_ = file->message_type(2);
  static const int E_GodevilGodevillvAttributeDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillvAttributeDesc, m_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillvAttributeDesc, m_type_),
  };
  E_GodevilGodevillvAttributeDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilGodevillvAttributeDesc_descriptor_,
      E_GodevilGodevillvAttributeDesc::default_instance_,
      E_GodevilGodevillvAttributeDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillvAttributeDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillvAttributeDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilGodevillvAttributeDesc));
  E_GodevilGodevillv_descriptor_ = file->message_type(3);
  static const int E_GodevilGodevillv_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_explimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, m_attribute_),
  };
  E_GodevilGodevillv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilGodevillv_descriptor_,
      E_GodevilGodevillv::default_instance_,
      E_GodevilGodevillv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevillv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilGodevillv));
  Sheet_GodevilGodevillv_descriptor_ = file->message_type(4);
  static const int Sheet_GodevilGodevillv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevillv, e_godevilgodevillv_list_),
  };
  Sheet_GodevilGodevillv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilGodevillv_descriptor_,
      Sheet_GodevilGodevillv::default_instance_,
      Sheet_GodevilGodevillv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevillv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevillv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilGodevillv));
  E_GodevilGodevilprivilege_descriptor_ = file->message_type(5);
  static const int E_GodevilGodevilprivilege_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_oldprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_newprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_rechargid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_functiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_equipmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, m_itemid_),
  };
  E_GodevilGodevilprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilGodevilprivilege_descriptor_,
      E_GodevilGodevilprivilege::default_instance_,
      E_GodevilGodevilprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilGodevilprivilege));
  Sheet_GodevilGodevilprivilege_descriptor_ = file->message_type(6);
  static const int Sheet_GodevilGodevilprivilege_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevilprivilege, e_godevilgodevilprivilege_list_),
  };
  Sheet_GodevilGodevilprivilege_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilGodevilprivilege_descriptor_,
      Sheet_GodevilGodevilprivilege::default_instance_,
      Sheet_GodevilGodevilprivilege_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevilprivilege, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevilprivilege, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilGodevilprivilege));
  E_GodevilStrongStDesc_descriptor_ = file->message_type(7);
  static const int E_GodevilStrongStDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongStDesc, m_typeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongStDesc, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongStDesc, m_position_),
  };
  E_GodevilStrongStDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilStrongStDesc_descriptor_,
      E_GodevilStrongStDesc::default_instance_,
      E_GodevilStrongStDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongStDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongStDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilStrongStDesc));
  E_GodevilStrong_descriptor_ = file->message_type(8);
  static const int E_GodevilStrong_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrong, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrong, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrong, m_type_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrong, m_godevillv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrong, m_st_),
  };
  E_GodevilStrong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilStrong_descriptor_,
      E_GodevilStrong::default_instance_,
      E_GodevilStrong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilStrong));
  Sheet_GodevilStrong_descriptor_ = file->message_type(9);
  static const int Sheet_GodevilStrong_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilStrong, e_godevilstrong_list_),
  };
  Sheet_GodevilStrong_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilStrong_descriptor_,
      Sheet_GodevilStrong::default_instance_,
      Sheet_GodevilStrong_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilStrong, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilStrong, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilStrong));
  E_GodevilStrongexp_descriptor_ = file->message_type(10);
  static const int E_GodevilStrongexp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongexp, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongexp, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongexp, m_parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongexp, m_strongexp_),
  };
  E_GodevilStrongexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilStrongexp_descriptor_,
      E_GodevilStrongexp::default_instance_,
      E_GodevilStrongexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilStrongexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilStrongexp));
  Sheet_GodevilStrongexp_descriptor_ = file->message_type(11);
  static const int Sheet_GodevilStrongexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilStrongexp, e_godevilstrongexp_list_),
  };
  Sheet_GodevilStrongexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilStrongexp_descriptor_,
      Sheet_GodevilStrongexp::default_instance_,
      Sheet_GodevilStrongexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilStrongexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilStrongexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilStrongexp));
  E_GodevilAdvancelvAdDesc_descriptor_ = file->message_type(12);
  static const int E_GodevilAdvancelvAdDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvancelvAdDesc, m_godevillv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvancelvAdDesc, m_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvancelvAdDesc, m_position_),
  };
  E_GodevilAdvancelvAdDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilAdvancelvAdDesc_descriptor_,
      E_GodevilAdvancelvAdDesc::default_instance_,
      E_GodevilAdvancelvAdDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvancelvAdDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvancelvAdDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilAdvancelvAdDesc));
  E_GodevilAdvancelv_descriptor_ = file->message_type(13);
  static const int E_GodevilAdvancelv_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvancelv, m_wearlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvancelv, m_ad_),
  };
  E_GodevilAdvancelv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilAdvancelv_descriptor_,
      E_GodevilAdvancelv::default_instance_,
      E_GodevilAdvancelv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvancelv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvancelv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilAdvancelv));
  Sheet_GodevilAdvancelv_descriptor_ = file->message_type(14);
  static const int Sheet_GodevilAdvancelv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilAdvancelv, e_godeviladvancelv_list_),
  };
  Sheet_GodevilAdvancelv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilAdvancelv_descriptor_,
      Sheet_GodevilAdvancelv::default_instance_,
      Sheet_GodevilAdvancelv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilAdvancelv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilAdvancelv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilAdvancelv));
  E_GodevilAdvanceexp_descriptor_ = file->message_type(15);
  static const int E_GodevilAdvanceexp_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_wearlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_lvparama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_goldparama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_silverparama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_quality6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_quality7_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_quality8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_quality9_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, m_quality10_),
  };
  E_GodevilAdvanceexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilAdvanceexp_descriptor_,
      E_GodevilAdvanceexp::default_instance_,
      E_GodevilAdvanceexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilAdvanceexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilAdvanceexp));
  Sheet_GodevilAdvanceexp_descriptor_ = file->message_type(16);
  static const int Sheet_GodevilAdvanceexp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilAdvanceexp, e_godeviladvanceexp_list_),
  };
  Sheet_GodevilAdvanceexp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilAdvanceexp_descriptor_,
      Sheet_GodevilAdvanceexp::default_instance_,
      Sheet_GodevilAdvanceexp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilAdvanceexp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilAdvanceexp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilAdvanceexp));
  E_GodevilQualitylvItemDesc_descriptor_ = file->message_type(17);
  static const int E_GodevilQualitylvItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylvItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylvItemDesc, m_id_),
  };
  E_GodevilQualitylvItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilQualitylvItemDesc_descriptor_,
      E_GodevilQualitylvItemDesc::default_instance_,
      E_GodevilQualitylvItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylvItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylvItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilQualitylvItemDesc));
  E_GodevilQualitylv_descriptor_ = file->message_type(18);
  static const int E_GodevilQualitylv_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, m_wearlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, m_percent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, m_costwuxiongitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, m_costnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, m_item_),
  };
  E_GodevilQualitylv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilQualitylv_descriptor_,
      E_GodevilQualitylv::default_instance_,
      E_GodevilQualitylv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilQualitylv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilQualitylv));
  Sheet_GodevilQualitylv_descriptor_ = file->message_type(19);
  static const int Sheet_GodevilQualitylv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilQualitylv, e_godevilqualitylv_list_),
  };
  Sheet_GodevilQualitylv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilQualitylv_descriptor_,
      Sheet_GodevilQualitylv::default_instance_,
      Sheet_GodevilQualitylv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilQualitylv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilQualitylv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilQualitylv));
  E_GodevilPositionunlock_descriptor_ = file->message_type(20);
  static const int E_GodevilPositionunlock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPositionunlock, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPositionunlock, m_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPositionunlock, m_godevillv_),
  };
  E_GodevilPositionunlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilPositionunlock_descriptor_,
      E_GodevilPositionunlock::default_instance_,
      E_GodevilPositionunlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPositionunlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPositionunlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilPositionunlock));
  Sheet_GodevilPositionunlock_descriptor_ = file->message_type(21);
  static const int Sheet_GodevilPositionunlock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPositionunlock, e_godevilpositionunlock_list_),
  };
  Sheet_GodevilPositionunlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilPositionunlock_descriptor_,
      Sheet_GodevilPositionunlock::default_instance_,
      Sheet_GodevilPositionunlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPositionunlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPositionunlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilPositionunlock));
  E_GodevilBlacksmithItemDesc_descriptor_ = file->message_type(22);
  static const int E_GodevilBlacksmithItemDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmithItemDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmithItemDesc, m_id_),
  };
  E_GodevilBlacksmithItemDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilBlacksmithItemDesc_descriptor_,
      E_GodevilBlacksmithItemDesc::default_instance_,
      E_GodevilBlacksmithItemDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmithItemDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmithItemDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilBlacksmithItemDesc));
  E_GodevilBlacksmithSkillDesc_descriptor_ = file->message_type(23);
  static const int E_GodevilBlacksmithSkillDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmithSkillDesc, m_probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmithSkillDesc, m_id_),
  };
  E_GodevilBlacksmithSkillDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilBlacksmithSkillDesc_descriptor_,
      E_GodevilBlacksmithSkillDesc::default_instance_,
      E_GodevilBlacksmithSkillDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmithSkillDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmithSkillDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilBlacksmithSkillDesc));
  E_GodevilBlacksmith_descriptor_ = file->message_type(24);
  static const int E_GodevilBlacksmith_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_probability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_godpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_starsprobability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_silver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_paperid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_papernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_substituteitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_godevilskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_skillset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, m_skill_),
  };
  E_GodevilBlacksmith_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilBlacksmith_descriptor_,
      E_GodevilBlacksmith::default_instance_,
      E_GodevilBlacksmith_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilBlacksmith, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilBlacksmith));
  Sheet_GodevilBlacksmith_descriptor_ = file->message_type(25);
  static const int Sheet_GodevilBlacksmith_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilBlacksmith, e_godevilblacksmith_list_),
  };
  Sheet_GodevilBlacksmith_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilBlacksmith_descriptor_,
      Sheet_GodevilBlacksmith::default_instance_,
      Sheet_GodevilBlacksmith_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilBlacksmith, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilBlacksmith, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilBlacksmith));
  E_GodevilGodevilskill_descriptor_ = file->message_type(26);
  static const int E_GodevilGodevilskill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilskill, m_godevilskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilskill, m_goldstars_),
  };
  E_GodevilGodevilskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilGodevilskill_descriptor_,
      E_GodevilGodevilskill::default_instance_,
      E_GodevilGodevilskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilGodevilskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilGodevilskill));
  Sheet_GodevilGodevilskill_descriptor_ = file->message_type(27);
  static const int Sheet_GodevilGodevilskill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevilskill, e_godevilgodevilskill_list_),
  };
  Sheet_GodevilGodevilskill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilGodevilskill_descriptor_,
      Sheet_GodevilGodevilskill::default_instance_,
      Sheet_GodevilGodevilskill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevilskill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilGodevilskill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilGodevilskill));
  E_GodevilPrefixname_descriptor_ = file->message_type(28);
  static const int E_GodevilPrefixname_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPrefixname, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPrefixname, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPrefixname, m_number_),
  };
  E_GodevilPrefixname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_GodevilPrefixname_descriptor_,
      E_GodevilPrefixname::default_instance_,
      E_GodevilPrefixname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPrefixname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_GodevilPrefixname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_GodevilPrefixname));
  Sheet_GodevilPrefixname_descriptor_ = file->message_type(29);
  static const int Sheet_GodevilPrefixname_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPrefixname, e_godevilprefixname_list_),
  };
  Sheet_GodevilPrefixname_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_GodevilPrefixname_descriptor_,
      Sheet_GodevilPrefixname::default_instance_,
      Sheet_GodevilPrefixname_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPrefixname, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_GodevilPrefixname, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_GodevilPrefixname));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fGodevil_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilPreposetask_descriptor_, &E_GodevilPreposetask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilPreposetask_descriptor_, &Sheet_GodevilPreposetask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilGodevillvAttributeDesc_descriptor_, &E_GodevilGodevillvAttributeDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilGodevillv_descriptor_, &E_GodevilGodevillv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilGodevillv_descriptor_, &Sheet_GodevilGodevillv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilGodevilprivilege_descriptor_, &E_GodevilGodevilprivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilGodevilprivilege_descriptor_, &Sheet_GodevilGodevilprivilege::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilStrongStDesc_descriptor_, &E_GodevilStrongStDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilStrong_descriptor_, &E_GodevilStrong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilStrong_descriptor_, &Sheet_GodevilStrong::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilStrongexp_descriptor_, &E_GodevilStrongexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilStrongexp_descriptor_, &Sheet_GodevilStrongexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilAdvancelvAdDesc_descriptor_, &E_GodevilAdvancelvAdDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilAdvancelv_descriptor_, &E_GodevilAdvancelv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilAdvancelv_descriptor_, &Sheet_GodevilAdvancelv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilAdvanceexp_descriptor_, &E_GodevilAdvanceexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilAdvanceexp_descriptor_, &Sheet_GodevilAdvanceexp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilQualitylvItemDesc_descriptor_, &E_GodevilQualitylvItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilQualitylv_descriptor_, &E_GodevilQualitylv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilQualitylv_descriptor_, &Sheet_GodevilQualitylv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilPositionunlock_descriptor_, &E_GodevilPositionunlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilPositionunlock_descriptor_, &Sheet_GodevilPositionunlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilBlacksmithItemDesc_descriptor_, &E_GodevilBlacksmithItemDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilBlacksmithSkillDesc_descriptor_, &E_GodevilBlacksmithSkillDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilBlacksmith_descriptor_, &E_GodevilBlacksmith::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilBlacksmith_descriptor_, &Sheet_GodevilBlacksmith::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilGodevilskill_descriptor_, &E_GodevilGodevilskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilGodevilskill_descriptor_, &Sheet_GodevilGodevilskill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_GodevilPrefixname_descriptor_, &E_GodevilPrefixname::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_GodevilPrefixname_descriptor_, &Sheet_GodevilPrefixname::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fGodevil_2eproto() {
  delete E_GodevilPreposetask::default_instance_;
  delete E_GodevilPreposetask_reflection_;
  delete Sheet_GodevilPreposetask::default_instance_;
  delete Sheet_GodevilPreposetask_reflection_;
  delete E_GodevilGodevillvAttributeDesc::default_instance_;
  delete E_GodevilGodevillvAttributeDesc_reflection_;
  delete E_GodevilGodevillv::default_instance_;
  delete E_GodevilGodevillv_reflection_;
  delete Sheet_GodevilGodevillv::default_instance_;
  delete Sheet_GodevilGodevillv_reflection_;
  delete E_GodevilGodevilprivilege::default_instance_;
  delete E_GodevilGodevilprivilege_reflection_;
  delete Sheet_GodevilGodevilprivilege::default_instance_;
  delete Sheet_GodevilGodevilprivilege_reflection_;
  delete E_GodevilStrongStDesc::default_instance_;
  delete E_GodevilStrongStDesc_reflection_;
  delete E_GodevilStrong::default_instance_;
  delete E_GodevilStrong_reflection_;
  delete Sheet_GodevilStrong::default_instance_;
  delete Sheet_GodevilStrong_reflection_;
  delete E_GodevilStrongexp::default_instance_;
  delete E_GodevilStrongexp_reflection_;
  delete Sheet_GodevilStrongexp::default_instance_;
  delete Sheet_GodevilStrongexp_reflection_;
  delete E_GodevilAdvancelvAdDesc::default_instance_;
  delete E_GodevilAdvancelvAdDesc_reflection_;
  delete E_GodevilAdvancelv::default_instance_;
  delete E_GodevilAdvancelv_reflection_;
  delete Sheet_GodevilAdvancelv::default_instance_;
  delete Sheet_GodevilAdvancelv_reflection_;
  delete E_GodevilAdvanceexp::default_instance_;
  delete E_GodevilAdvanceexp_reflection_;
  delete Sheet_GodevilAdvanceexp::default_instance_;
  delete Sheet_GodevilAdvanceexp_reflection_;
  delete E_GodevilQualitylvItemDesc::default_instance_;
  delete E_GodevilQualitylvItemDesc_reflection_;
  delete E_GodevilQualitylv::default_instance_;
  delete E_GodevilQualitylv_reflection_;
  delete Sheet_GodevilQualitylv::default_instance_;
  delete Sheet_GodevilQualitylv_reflection_;
  delete E_GodevilPositionunlock::default_instance_;
  delete E_GodevilPositionunlock_reflection_;
  delete Sheet_GodevilPositionunlock::default_instance_;
  delete Sheet_GodevilPositionunlock_reflection_;
  delete E_GodevilBlacksmithItemDesc::default_instance_;
  delete E_GodevilBlacksmithItemDesc_reflection_;
  delete E_GodevilBlacksmithSkillDesc::default_instance_;
  delete E_GodevilBlacksmithSkillDesc_reflection_;
  delete E_GodevilBlacksmith::default_instance_;
  delete E_GodevilBlacksmith_reflection_;
  delete Sheet_GodevilBlacksmith::default_instance_;
  delete Sheet_GodevilBlacksmith_reflection_;
  delete E_GodevilGodevilskill::default_instance_;
  delete E_GodevilGodevilskill_reflection_;
  delete Sheet_GodevilGodevilskill::default_instance_;
  delete Sheet_GodevilGodevilskill_reflection_;
  delete E_GodevilPrefixname::default_instance_;
  delete E_GodevilPrefixname_reflection_;
  delete Sheet_GodevilPrefixname::default_instance_;
  delete Sheet_GodevilPrefixname_reflection_;
}

void protobuf_AddDesc_E_5fGodevil_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017E_Godevil.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\242\002\n\024E_GodevilPreposetask\022\032\n\004m"
    "_id\030\001 \001(\005B\014\302\377\024\010\345\272\217\345\217\267ID\022\032\n\006m_type\030\002 \001(\005B"
    "\n\302\377\024\006\347\261\273\345\236\213\022%\n\013m_modeltype\030\003 \001(\005B\020\302\377\024\014\346\211"
    "\200\345\261\236\351\230\266\346\256\265\022!\n\013m_starttask\030\004 \001(\005B\014\302\377\024\010\344\273\273"
    "\345\212\241ID\022%\n\tm_endtask\030\005 \001(\005B\022\302\377\024\016\347\273\223\346\235\237\344\273\273\345"
    "\212\241ID\022\037\n\013m_condition\030\006 \001(\005B\n\302\377\024\006\346\235\241\344\273\266\022\036\n"
    "\007m_value\030\007 \001(\005B\r\302\377\024\t\346\235\241\344\273\266\345\200\274\022 \n\nm_rewar"
    "did\030\010 \001(\005B\014\302\377\024\010\345\245\226\345\212\261ID\"c\n\030Sheet_Godevil"
    "Preposetask\022G\n\031E_GodevilPreposetask_List"
    "\030\001 \003(\0132\036.proto_ff.E_GodevilPreposetaskB\004"
    "\210\301\024\020\"S\n\037E_GodevilGodevillvAttributeDesc\022"
    "\030\n\007m_value\030\001 \001(\005B\007\302\377\024\003\345\200\274\022\026\n\006m_type\030\002 \001("
    "\005B\006\302\377\024\002ID\"\220\002\n\022E_GodevilGodevillv\022\030\n\004m_id"
    "\030\001 \001(\003B\n\302\377\024\006\347\255\211\347\272\247\022\037\n\005m_exp\030\002 \001(\003B\020\302\377\024\014\344"
    "\270\213\347\272\247\347\273\217\351\252\214\022$\n\nm_explimit\030\003 \001(\003B\020\302\377\024\014\347\273\217"
    "\351\252\214\344\270\212\351\231\220\022\"\n\010m_itemid\030\004 \001(\005B\020\302\377\024\014\347\252\201\347\240\264\346"
    "\235\220\346\226\231\022\037\n\005m_num\030\005 \001(\005B\020\302\377\024\014\346\235\220\346\226\231\346\225\260\351\207\217\022T"
    "\n\013m_attribute\030\006 \003(\0132).proto_ff.E_Godevil"
    "GodevillvAttributeDescB\024\302\377\024\014\345\237\272\347\241\200\345\261\236\346\200\247"
    "\210\301\024\007\"^\n\026Sheet_GodevilGodevillv\022D\n\027E_Gode"
    "vilGodevillv_List\030\001 \003(\0132\034.proto_ff.E_God"
    "evilGodevillvB\005\210\301\024\200\020\"\202\003\n\031E_GodevilGodevi"
    "lprivilege\022\024\n\004m_id\030\001 \001(\003B\006\302\377\024\002id\022!\n\nm_ol"
    "dprice\030\002 \001(\005B\r\302\377\024\t\345\216\237\344\273\267\345\205\203\022\036\n\nm_newpric"
    "e\030\003 \001(\005B\n\302\377\024\006\347\216\260\344\273\267\022\"\n\013m_rechargid\030\004 \001(\005"
    "B\r\302\377\024\t\350\256\241\350\264\271\347\202\271\022 \n\006m_type\030\005 \001(\005B\020\302\377\024\014\347\211\271"
    "\346\235\203\347\261\273\345\236\213\022\036\n\004m_lv\030\006 \001(\005B\020\302\377\024\014\347\211\271\346\235\203\347\255\211\347\272"
    "\247\022(\n\016m_functiontype\030\007 \001(\005B\020\302\377\024\014\345\212\237\350\203\275\347\261\273"
    "\345\236\213\022\034\n\010m_parama\030\010 \001(\005B\n\302\377\024\006\345\217\202\346\225\260\022/\n\rm_e"
    "quipmentid\030\t \001(\005B\030\302\377\024\024\350\216\267\345\217\226\350\243\205\345\244\207\351\201\223\345\205\267"
    "ID\022-\n\010m_itemid\030\n \001(\005B\033\302\377\024\027\350\265\240\351\200\201\347\232\204\350\243\205\345\244"
    "\207\351\201\223\345\205\267ID\"r\n\035Sheet_GodevilGodevilprivile"
    "ge\022Q\n\036E_GodevilGodevilprivilege_List\030\001 \003"
    "(\0132#.proto_ff.E_GodevilGodevilprivilegeB"
    "\004\210\301\024 \"\214\001\n\025E_GodevilStrongStDesc\022,\n\010m_typ"
    "eid\030\001 \001(\tB\032\302\377\024\022\346\217\220\345\215\207\345\261\236\346\200\247\347\261\273\345\236\213\220\301\024@\022!\n"
    "\tm_quality\030\002 \001(\tB\016\302\377\024\006\345\223\201\350\264\250\220\301\024@\022\"\n\nm_po"
    "sition\030\003 \001(\tB\016\302\377\024\006\351\203\250\344\275\215\220\301\024@\"\347\001\n\017E_Godev"
    "ilStrong\022\036\n\004m_lv\030\001 \001(\005B\020\302\377\024\014\345\274\272\345\214\226\347\255\211\347\272\247"
    "\022\034\n\005m_exp\030\002 \001(\005B\r\302\377\024\t\347\273\217\351\252\214\345\200\274\022*\n\nm_type"
    "_num\030\003 \001(\005B\026\302\377\024\022\345\261\236\346\200\247\346\217\220\345\215\207\347\263\273\346\225\260\022+\n\013m_"
    "godevillv\030\004 \001(\005B\026\302\377\024\022\351\234\200\346\261\202\347\245\236\351\255\224\347\255\211\347\272\247\022"
    "=\n\004m_st\030\005 \003(\0132\037.proto_ff.E_GodevilStrong"
    "StDescB\016\302\377\024\006\350\243\205\345\244\207\210\301\024\005\"U\n\023Sheet_GodevilS"
    "trong\022>\n\024E_GodevilStrong_List\030\001 \003(\0132\031.pr"
    "oto_ff.E_GodevilStrongB\005\210\301\024\200\010\"\213\001\n\022E_Gode"
    "vilStrongexp\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006m_"
    "type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022\037\n\010m_parama\030\003 \001(\005"
    "B\r\302\377\024\t\345\275\261\345\223\215\345\200\274\022\"\n\013m_strongexp\030\004 \001(\005B\r\302\377"
    "\024\t\347\273\217\351\252\214\345\200\274\"]\n\026Sheet_GodevilStrongexp\022C\n"
    "\027E_GodevilStrongexp_List\030\001 \003(\0132\034.proto_f"
    "f.E_GodevilStrongexpB\004\210\301\024\010\"\211\001\n\030E_Godevil"
    "AdvancelvAdDesc\022+\n\013m_godevillv\030\001 \001(\005B\026\302\377"
    "\024\022\351\234\200\346\261\202\347\245\236\351\255\224\347\255\211\347\272\247\022\"\n\005m_exp\030\002 \001(\005B\023\302\377\024"
    "\017\344\270\213\347\272\247\347\273\217\351\252\214\345\200\274\022\034\n\nm_position\030\003 \001(\tB\010\302\377"
    "\024\000\220\301\024@\"z\n\022E_GodevilAdvancelv\022\"\n\010m_wearlv"
    "\030\001 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\351\230\266\022@\n\004m_ad\030\002 \003(\0132\""
    ".proto_ff.E_GodevilAdvancelvAdDescB\016\302\377\024\006"
    "\351\203\250\344\275\215\210\301\024\002\"]\n\026Sheet_GodevilAdvancelv\022C\n\027"
    "E_GodevilAdvancelv_List\030\001 \003(\0132\034.proto_ff"
    ".E_GodevilAdvancelvB\004\210\301\024\020\"\260\003\n\023E_GodevilA"
    "dvanceexp\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\"\n\010m_wea"
    "rlv\030\002 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\351\230\266\022\"\n\nm_positio"
    "n\030\003 \001(\tB\016\302\377\024\006\351\203\250\344\275\215\220\301\024@\022$\n\nm_lvparama\030\004 "
    "\001(\005B\020\302\377\024\014\351\230\266\346\225\260\347\263\273\346\225\260\022&\n\014m_goldparama\030\005 "
    "\001(\005B\020\302\377\024\014\351\273\204\346\230\237\347\263\273\346\225\260\022(\n\016m_silverparama\030"
    "\006 \001(\005B\020\302\377\024\014\347\231\275\346\230\237\347\263\273\346\225\260\022$\n\nm_quality6\030\007 "
    "\001(\005B\020\302\377\024\014\347\272\242\345\223\201\347\263\273\346\225\260\022$\n\nm_quality7\030\010 \001("
    "\005B\020\302\377\024\014\347\262\211\345\223\201\347\263\273\346\225\260\022$\n\nm_quality8\030\t \001(\005B"
    "\020\302\377\024\014\345\275\251\345\223\201\347\263\273\346\225\260\022\'\n\nm_quality9\030\n \001(\005B\023\302"
    "\377\024\017\346\232\227\351\207\221\345\223\201\347\263\273\346\225\260\022(\n\013m_quality10\030\013 \001(\005B"
    "\023\302\377\024\017\347\245\236\350\257\235\345\223\201\347\263\273\346\225\260\"`\n\027Sheet_GodevilAdv"
    "anceexp\022E\n\030E_GodevilAdvanceexp_List\030\001 \003("
    "\0132\035.proto_ff.E_GodevilAdvanceexpB\004\210\301\024 \"M"
    "\n\032E_GodevilQualitylvItemDesc\022\031\n\005m_num\030\001 "
    "\001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002ID\"\340\002"
    "\n\022E_GodevilQualitylv\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002"
    "id\022\035\n\tm_quality\030\002 \001(\005B\n\302\377\024\006\345\223\201\350\264\250\022(\n\010m_w"
    "earlv\030\003 \001(\005B\026\302\377\024\022\351\234\200\346\261\202\350\243\205\345\244\207\351\230\266\346\225\260\022&\n\tm"
    "_percent\030\004 \001(\005B\023\302\377\024\017\344\270\213\347\272\247\346\210\220\345\212\237\347\216\207\022\"\n\nm"
    "_position\030\005 \001(\tB\016\302\377\024\006\351\203\250\344\275\215\220\301\024@\0227\n\021m_cos"
    "twuxiongitem\030\006 \001(\005B\034\302\377\024\030\346\266\210\350\200\227\347\245\236\345\223\201\346\202\237\346"
    "\200\247\351\201\223\345\205\267\022 \n\014m_costnumber\030\007 \001(\005B\n\302\377\024\006\346\225\260\351"
    "\207\217\022D\n\006m_item\030\010 \003(\0132$.proto_ff.E_GodevilQ"
    "ualitylvItemDescB\016\302\377\024\006\346\235\220\346\226\231\210\301\024\003\"]\n\026Shee"
    "t_GodevilQualitylv\022C\n\027E_GodevilQualitylv"
    "_List\030\001 \003(\0132\034.proto_ff.E_GodevilQualityl"
    "vB\004\210\301\024\020\"\203\001\n\027E_GodevilPositionunlock\022 \n\nm"
    "_position\030\001 \001(\005B\014\302\377\024\010\351\203\250\344\275\215id\022\037\n\005m_day\030\002"
    " \001(\005B\020\302\377\024\014\350\247\243\351\224\201\345\244\251\346\225\260\022%\n\013m_godevillv\030\003 "
    "\001(\005B\020\302\377\024\014\347\245\236\351\255\224\347\255\211\347\272\247\"l\n\033Sheet_GodevilPo"
    "sitionunlock\022M\n\034E_GodevilPositionunlock_"
    "List\030\001 \003(\0132!.proto_ff.E_GodevilPositionu"
    "nlockB\004\210\301\024\020\"N\n\033E_GodevilBlacksmithItemDe"
    "sc\022\031\n\005m_num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 "
    "\001(\005B\006\302\377\024\002id\"W\n\034E_GodevilBlacksmithSkillD"
    "esc\022!\n\rm_probability\030\001 \001(\005B\n\302\377\024\006\346\246\202\347\216\207\022\024"
    "\n\004m_id\030\002 \001(\005B\006\302\377\024\002ID\"\376\005\n\023E_GodevilBlacks"
    "mith\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\346\211\223\351\200\240id\022 \n\006m_ty"
    "pe\030\002 \001(\005B\020\302\377\024\014\346\211\223\351\200\240\347\261\273\345\236\213\022$\n\nm_position"
    "\030\003 \001(\005B\020\302\377\024\014\350\243\205\345\244\207\351\203\250\344\275\215\022#\n\tm_quality\030\004 "
    "\001(\005B\020\302\377\024\014\350\243\205\345\244\207\345\223\201\350\264\250\022\'\n\rm_probability\030\005"
    " \001(\005B\020\302\377\024\014\345\207\272\347\216\260\346\246\202\347\216\207\022(\n\nm_godpoint\030\006 \001"
    "(\tB\024\302\377\024\014\346\202\237\346\200\247\351\232\217\346\234\272\220\301\024@\0226\n\022m_starsproba"
    "bility\030\007 \001(\tB\032\302\377\024\022\350\257\215\346\235\241\346\225\260\345\222\214\346\246\202\347\216\207\220\301\024@"
    "\022 \n\006m_gold\030\010 \001(\005B\020\302\377\024\014\351\273\204\346\230\237\346\246\202\347\216\207\022\"\n\010m_"
    "silver\030\t \001(\005B\020\302\377\024\014\347\231\275\346\230\237\346\246\202\347\216\207\022\037\n\tm_pape"
    "rid\030\n \001(\005B\014\302\377\024\010\345\233\276\347\272\270ID\022$\n\nm_papernum\030\013 "
    "\001(\005B\020\302\377\024\014\345\233\276\347\272\270\346\225\260\351\207\217\022*\n\020m_substituteite"
    "m\030\014 \001(\005B\020\302\377\024\014\347\274\272\347\234\201\351\201\223\345\205\267\022(\n\010m_number\030\r "
    "\001(\005B\026\302\377\024\022\347\274\272\347\234\201\351\201\223\345\205\267\346\225\260\351\207\217\022*\n\016m_godevil"
    "skill\030\016 \001(\005B\022\302\377\024\016\347\245\236\351\255\224\346\212\200\350\203\275ID\022.\n\nm_ski"
    "llset\030\017 \001(\tB\032\302\377\024\022\350\242\253\345\212\250\346\212\200\350\203\275\346\246\202\347\216\207\220\301\024@\022"
    "E\n\006m_item\030\020 \003(\0132%.proto_ff.E_GodevilBlac"
    "ksmithItemDescB\016\302\377\024\006\351\201\223\345\205\267\210\301\024\003\022M\n\007m_skil"
    "l\030\021 \003(\0132&.proto_ff.E_GodevilBlacksmithSk"
    "illDescB\024\302\377\024\014\350\242\253\345\212\250\346\212\200\350\203\275\210\301\024\014\"`\n\027Sheet_G"
    "odevilBlacksmith\022E\n\030E_GodevilBlacksmith_"
    "List\030\001 \003(\0132\035.proto_ff.E_GodevilBlacksmit"
    "hB\004\210\301\024 \"j\n\025E_GodevilGodevilskill\022*\n\016m_go"
    "devilskill\030\001 \001(\005B\022\302\377\024\016\347\245\236\351\255\224\346\212\200\350\203\275ID\022%\n\013"
    "m_goldstars\030\002 \001(\005B\020\302\377\024\014\351\207\221\346\230\237\346\230\237\346\225\260\"f\n\031S"
    "heet_GodevilGodevilskill\022I\n\032E_GodevilGod"
    "evilskill_List\030\001 \003(\0132\037.proto_ff.E_Godevi"
    "lGodevilskillB\004\210\301\024\002\"w\n\023E_GodevilPrefixna"
    "me\022\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\350\257\215\347\274\200id\022 \n\006m_type"
    "\030\002 \001(\005B\020\302\377\024\014\350\257\215\347\274\200\347\261\273\345\236\213\022\"\n\010m_number\030\003 \001"
    "(\005B\020\302\377\024\014\350\257\215\347\274\200\346\225\260\351\207\217\"`\n\027Sheet_GodevilPre"
    "fixname\022E\n\030E_GodevilPrefixname_List\030\001 \003("
    "\0132\035.proto_ff.E_GodevilPrefixnameB\004\210\301\024\020", 5238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Godevil.proto", &protobuf_RegisterTypes);
  E_GodevilPreposetask::default_instance_ = new E_GodevilPreposetask();
  Sheet_GodevilPreposetask::default_instance_ = new Sheet_GodevilPreposetask();
  E_GodevilGodevillvAttributeDesc::default_instance_ = new E_GodevilGodevillvAttributeDesc();
  E_GodevilGodevillv::default_instance_ = new E_GodevilGodevillv();
  Sheet_GodevilGodevillv::default_instance_ = new Sheet_GodevilGodevillv();
  E_GodevilGodevilprivilege::default_instance_ = new E_GodevilGodevilprivilege();
  Sheet_GodevilGodevilprivilege::default_instance_ = new Sheet_GodevilGodevilprivilege();
  E_GodevilStrongStDesc::default_instance_ = new E_GodevilStrongStDesc();
  E_GodevilStrong::default_instance_ = new E_GodevilStrong();
  Sheet_GodevilStrong::default_instance_ = new Sheet_GodevilStrong();
  E_GodevilStrongexp::default_instance_ = new E_GodevilStrongexp();
  Sheet_GodevilStrongexp::default_instance_ = new Sheet_GodevilStrongexp();
  E_GodevilAdvancelvAdDesc::default_instance_ = new E_GodevilAdvancelvAdDesc();
  E_GodevilAdvancelv::default_instance_ = new E_GodevilAdvancelv();
  Sheet_GodevilAdvancelv::default_instance_ = new Sheet_GodevilAdvancelv();
  E_GodevilAdvanceexp::default_instance_ = new E_GodevilAdvanceexp();
  Sheet_GodevilAdvanceexp::default_instance_ = new Sheet_GodevilAdvanceexp();
  E_GodevilQualitylvItemDesc::default_instance_ = new E_GodevilQualitylvItemDesc();
  E_GodevilQualitylv::default_instance_ = new E_GodevilQualitylv();
  Sheet_GodevilQualitylv::default_instance_ = new Sheet_GodevilQualitylv();
  E_GodevilPositionunlock::default_instance_ = new E_GodevilPositionunlock();
  Sheet_GodevilPositionunlock::default_instance_ = new Sheet_GodevilPositionunlock();
  E_GodevilBlacksmithItemDesc::default_instance_ = new E_GodevilBlacksmithItemDesc();
  E_GodevilBlacksmithSkillDesc::default_instance_ = new E_GodevilBlacksmithSkillDesc();
  E_GodevilBlacksmith::default_instance_ = new E_GodevilBlacksmith();
  Sheet_GodevilBlacksmith::default_instance_ = new Sheet_GodevilBlacksmith();
  E_GodevilGodevilskill::default_instance_ = new E_GodevilGodevilskill();
  Sheet_GodevilGodevilskill::default_instance_ = new Sheet_GodevilGodevilskill();
  E_GodevilPrefixname::default_instance_ = new E_GodevilPrefixname();
  Sheet_GodevilPrefixname::default_instance_ = new Sheet_GodevilPrefixname();
  E_GodevilPreposetask::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilPreposetask::default_instance_->InitAsDefaultInstance();
  E_GodevilGodevillvAttributeDesc::default_instance_->InitAsDefaultInstance();
  E_GodevilGodevillv::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilGodevillv::default_instance_->InitAsDefaultInstance();
  E_GodevilGodevilprivilege::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilGodevilprivilege::default_instance_->InitAsDefaultInstance();
  E_GodevilStrongStDesc::default_instance_->InitAsDefaultInstance();
  E_GodevilStrong::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilStrong::default_instance_->InitAsDefaultInstance();
  E_GodevilStrongexp::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilStrongexp::default_instance_->InitAsDefaultInstance();
  E_GodevilAdvancelvAdDesc::default_instance_->InitAsDefaultInstance();
  E_GodevilAdvancelv::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilAdvancelv::default_instance_->InitAsDefaultInstance();
  E_GodevilAdvanceexp::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilAdvanceexp::default_instance_->InitAsDefaultInstance();
  E_GodevilQualitylvItemDesc::default_instance_->InitAsDefaultInstance();
  E_GodevilQualitylv::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilQualitylv::default_instance_->InitAsDefaultInstance();
  E_GodevilPositionunlock::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilPositionunlock::default_instance_->InitAsDefaultInstance();
  E_GodevilBlacksmithItemDesc::default_instance_->InitAsDefaultInstance();
  E_GodevilBlacksmithSkillDesc::default_instance_->InitAsDefaultInstance();
  E_GodevilBlacksmith::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilBlacksmith::default_instance_->InitAsDefaultInstance();
  E_GodevilGodevilskill::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilGodevilskill::default_instance_->InitAsDefaultInstance();
  E_GodevilPrefixname::default_instance_->InitAsDefaultInstance();
  Sheet_GodevilPrefixname::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fGodevil_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fGodevil_2eproto {
  StaticDescriptorInitializer_E_5fGodevil_2eproto() {
    protobuf_AddDesc_E_5fGodevil_2eproto();
  }
} static_descriptor_initializer_E_5fGodevil_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_GodevilPreposetask::kMIdFieldNumber;
const int E_GodevilPreposetask::kMTypeFieldNumber;
const int E_GodevilPreposetask::kMModeltypeFieldNumber;
const int E_GodevilPreposetask::kMStarttaskFieldNumber;
const int E_GodevilPreposetask::kMEndtaskFieldNumber;
const int E_GodevilPreposetask::kMConditionFieldNumber;
const int E_GodevilPreposetask::kMValueFieldNumber;
const int E_GodevilPreposetask::kMRewardidFieldNumber;
#endif  // !_MSC_VER

E_GodevilPreposetask::E_GodevilPreposetask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilPreposetask::InitAsDefaultInstance() {
}

E_GodevilPreposetask::E_GodevilPreposetask(const E_GodevilPreposetask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilPreposetask::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_modeltype_ = 0;
  m_starttask_ = 0;
  m_endtask_ = 0;
  m_condition_ = 0;
  m_value_ = 0;
  m_rewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilPreposetask::~E_GodevilPreposetask() {
  SharedDtor();
}

void E_GodevilPreposetask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilPreposetask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilPreposetask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilPreposetask_descriptor_;
}

const E_GodevilPreposetask& E_GodevilPreposetask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilPreposetask* E_GodevilPreposetask::default_instance_ = NULL;

E_GodevilPreposetask* E_GodevilPreposetask::New() const {
  return new E_GodevilPreposetask;
}

void E_GodevilPreposetask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_modeltype_ = 0;
    m_starttask_ = 0;
    m_endtask_ = 0;
    m_condition_ = 0;
    m_value_ = 0;
    m_rewardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilPreposetask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_modeltype;
        break;
      }

      // optional int32 m_modeltype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_modeltype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_modeltype_)));
          set_has_m_modeltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_starttask;
        break;
      }

      // optional int32 m_starttask = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_starttask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_starttask_)));
          set_has_m_starttask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_endtask;
        break;
      }

      // optional int32 m_endtask = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_endtask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_endtask_)));
          set_has_m_endtask();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_condition;
        break;
      }

      // optional int32 m_condition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_condition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_condition_)));
          set_has_m_condition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_value;
        break;
      }

      // optional int32 m_value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_rewardid;
        break;
      }

      // optional int32 m_rewardid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewardid_)));
          set_has_m_rewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilPreposetask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_modeltype = 3;
  if (has_m_modeltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_modeltype(), output);
  }

  // optional int32 m_starttask = 4;
  if (has_m_starttask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_starttask(), output);
  }

  // optional int32 m_endtask = 5;
  if (has_m_endtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_endtask(), output);
  }

  // optional int32 m_condition = 6;
  if (has_m_condition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_condition(), output);
  }

  // optional int32 m_value = 7;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_value(), output);
  }

  // optional int32 m_rewardid = 8;
  if (has_m_rewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_rewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilPreposetask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_modeltype = 3;
  if (has_m_modeltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_modeltype(), target);
  }

  // optional int32 m_starttask = 4;
  if (has_m_starttask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_starttask(), target);
  }

  // optional int32 m_endtask = 5;
  if (has_m_endtask()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_endtask(), target);
  }

  // optional int32 m_condition = 6;
  if (has_m_condition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_condition(), target);
  }

  // optional int32 m_value = 7;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_value(), target);
  }

  // optional int32 m_rewardid = 8;
  if (has_m_rewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_rewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilPreposetask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_modeltype = 3;
    if (has_m_modeltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_modeltype());
    }

    // optional int32 m_starttask = 4;
    if (has_m_starttask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_starttask());
    }

    // optional int32 m_endtask = 5;
    if (has_m_endtask()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_endtask());
    }

    // optional int32 m_condition = 6;
    if (has_m_condition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_condition());
    }

    // optional int32 m_value = 7;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_rewardid = 8;
    if (has_m_rewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilPreposetask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilPreposetask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilPreposetask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilPreposetask::MergeFrom(const E_GodevilPreposetask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_modeltype()) {
      set_m_modeltype(from.m_modeltype());
    }
    if (from.has_m_starttask()) {
      set_m_starttask(from.m_starttask());
    }
    if (from.has_m_endtask()) {
      set_m_endtask(from.m_endtask());
    }
    if (from.has_m_condition()) {
      set_m_condition(from.m_condition());
    }
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_rewardid()) {
      set_m_rewardid(from.m_rewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilPreposetask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilPreposetask::CopyFrom(const E_GodevilPreposetask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilPreposetask::IsInitialized() const {

  return true;
}

void E_GodevilPreposetask::Swap(E_GodevilPreposetask* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_modeltype_, other->m_modeltype_);
    std::swap(m_starttask_, other->m_starttask_);
    std::swap(m_endtask_, other->m_endtask_);
    std::swap(m_condition_, other->m_condition_);
    std::swap(m_value_, other->m_value_);
    std::swap(m_rewardid_, other->m_rewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilPreposetask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilPreposetask_descriptor_;
  metadata.reflection = E_GodevilPreposetask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilPreposetask::kEGodevilPreposetaskListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilPreposetask::Sheet_GodevilPreposetask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilPreposetask::InitAsDefaultInstance() {
}

Sheet_GodevilPreposetask::Sheet_GodevilPreposetask(const Sheet_GodevilPreposetask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilPreposetask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilPreposetask::~Sheet_GodevilPreposetask() {
  SharedDtor();
}

void Sheet_GodevilPreposetask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilPreposetask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilPreposetask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilPreposetask_descriptor_;
}

const Sheet_GodevilPreposetask& Sheet_GodevilPreposetask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilPreposetask* Sheet_GodevilPreposetask::default_instance_ = NULL;

Sheet_GodevilPreposetask* Sheet_GodevilPreposetask::New() const {
  return new Sheet_GodevilPreposetask;
}

void Sheet_GodevilPreposetask::Clear() {
  e_godevilpreposetask_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilPreposetask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilPreposetask E_GodevilPreposetask_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilPreposetask_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilpreposetask_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilPreposetask_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilPreposetask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilPreposetask E_GodevilPreposetask_List = 1;
  for (int i = 0; i < this->e_godevilpreposetask_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilpreposetask_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilPreposetask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilPreposetask E_GodevilPreposetask_List = 1;
  for (int i = 0; i < this->e_godevilpreposetask_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilpreposetask_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilPreposetask::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilPreposetask E_GodevilPreposetask_List = 1;
  total_size += 1 * this->e_godevilpreposetask_list_size();
  for (int i = 0; i < this->e_godevilpreposetask_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilpreposetask_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilPreposetask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilPreposetask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilPreposetask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilPreposetask::MergeFrom(const Sheet_GodevilPreposetask& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilpreposetask_list_.MergeFrom(from.e_godevilpreposetask_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilPreposetask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilPreposetask::CopyFrom(const Sheet_GodevilPreposetask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilPreposetask::IsInitialized() const {

  return true;
}

void Sheet_GodevilPreposetask::Swap(Sheet_GodevilPreposetask* other) {
  if (other != this) {
    e_godevilpreposetask_list_.Swap(&other->e_godevilpreposetask_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilPreposetask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilPreposetask_descriptor_;
  metadata.reflection = Sheet_GodevilPreposetask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilGodevillvAttributeDesc::kMValueFieldNumber;
const int E_GodevilGodevillvAttributeDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_GodevilGodevillvAttributeDesc::E_GodevilGodevillvAttributeDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilGodevillvAttributeDesc::InitAsDefaultInstance() {
}

E_GodevilGodevillvAttributeDesc::E_GodevilGodevillvAttributeDesc(const E_GodevilGodevillvAttributeDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilGodevillvAttributeDesc::SharedCtor() {
  _cached_size_ = 0;
  m_value_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilGodevillvAttributeDesc::~E_GodevilGodevillvAttributeDesc() {
  SharedDtor();
}

void E_GodevilGodevillvAttributeDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilGodevillvAttributeDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilGodevillvAttributeDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilGodevillvAttributeDesc_descriptor_;
}

const E_GodevilGodevillvAttributeDesc& E_GodevilGodevillvAttributeDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilGodevillvAttributeDesc* E_GodevilGodevillvAttributeDesc::default_instance_ = NULL;

E_GodevilGodevillvAttributeDesc* E_GodevilGodevillvAttributeDesc::New() const {
  return new E_GodevilGodevillvAttributeDesc;
}

void E_GodevilGodevillvAttributeDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_value_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilGodevillvAttributeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_value_)));
          set_has_m_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilGodevillvAttributeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_value(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilGodevillvAttributeDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_value = 1;
  if (has_m_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_value(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilGodevillvAttributeDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_value = 1;
    if (has_m_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_value());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilGodevillvAttributeDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilGodevillvAttributeDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilGodevillvAttributeDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilGodevillvAttributeDesc::MergeFrom(const E_GodevilGodevillvAttributeDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_value()) {
      set_m_value(from.m_value());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilGodevillvAttributeDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilGodevillvAttributeDesc::CopyFrom(const E_GodevilGodevillvAttributeDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilGodevillvAttributeDesc::IsInitialized() const {

  return true;
}

void E_GodevilGodevillvAttributeDesc::Swap(E_GodevilGodevillvAttributeDesc* other) {
  if (other != this) {
    std::swap(m_value_, other->m_value_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilGodevillvAttributeDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilGodevillvAttributeDesc_descriptor_;
  metadata.reflection = E_GodevilGodevillvAttributeDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilGodevillv::kMIdFieldNumber;
const int E_GodevilGodevillv::kMExpFieldNumber;
const int E_GodevilGodevillv::kMExplimitFieldNumber;
const int E_GodevilGodevillv::kMItemidFieldNumber;
const int E_GodevilGodevillv::kMNumFieldNumber;
const int E_GodevilGodevillv::kMAttributeFieldNumber;
#endif  // !_MSC_VER

E_GodevilGodevillv::E_GodevilGodevillv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilGodevillv::InitAsDefaultInstance() {
}

E_GodevilGodevillv::E_GodevilGodevillv(const E_GodevilGodevillv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilGodevillv::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_exp_ = GOOGLE_LONGLONG(0);
  m_explimit_ = GOOGLE_LONGLONG(0);
  m_itemid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilGodevillv::~E_GodevilGodevillv() {
  SharedDtor();
}

void E_GodevilGodevillv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilGodevillv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilGodevillv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilGodevillv_descriptor_;
}

const E_GodevilGodevillv& E_GodevilGodevillv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilGodevillv* E_GodevilGodevillv::default_instance_ = NULL;

E_GodevilGodevillv* E_GodevilGodevillv::New() const {
  return new E_GodevilGodevillv;
}

void E_GodevilGodevillv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_exp_ = GOOGLE_LONGLONG(0);
    m_explimit_ = GOOGLE_LONGLONG(0);
    m_itemid_ = 0;
    m_num_ = 0;
  }
  m_attribute_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilGodevillv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int64 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_explimit;
        break;
      }

      // optional int64 m_explimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_explimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_explimit_)));
          set_has_m_explimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        break;
      }

      // repeated .proto_ff.E_GodevilGodevillvAttributeDesc m_attribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_attribute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_attribute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_attribute;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilGodevillv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->m_exp(), output);
  }

  // optional int64 m_explimit = 3;
  if (has_m_explimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_explimit(), output);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_itemid(), output);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_num(), output);
  }

  // repeated .proto_ff.E_GodevilGodevillvAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_attribute(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilGodevillv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int64 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->m_exp(), target);
  }

  // optional int64 m_explimit = 3;
  if (has_m_explimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_explimit(), target);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_itemid(), target);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_num(), target);
  }

  // repeated .proto_ff.E_GodevilGodevillvAttributeDesc m_attribute = 6;
  for (int i = 0; i < this->m_attribute_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_attribute(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilGodevillv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int64 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_exp());
    }

    // optional int64 m_explimit = 3;
    if (has_m_explimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_explimit());
    }

    // optional int32 m_itemid = 4;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_num = 5;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  // repeated .proto_ff.E_GodevilGodevillvAttributeDesc m_attribute = 6;
  total_size += 1 * this->m_attribute_size();
  for (int i = 0; i < this->m_attribute_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_attribute(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilGodevillv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilGodevillv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilGodevillv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilGodevillv::MergeFrom(const E_GodevilGodevillv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_attribute_.MergeFrom(from.m_attribute_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_explimit()) {
      set_m_explimit(from.m_explimit());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilGodevillv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilGodevillv::CopyFrom(const E_GodevilGodevillv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilGodevillv::IsInitialized() const {

  return true;
}

void E_GodevilGodevillv::Swap(E_GodevilGodevillv* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_explimit_, other->m_explimit_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    m_attribute_.Swap(&other->m_attribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilGodevillv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilGodevillv_descriptor_;
  metadata.reflection = E_GodevilGodevillv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilGodevillv::kEGodevilGodevillvListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilGodevillv::Sheet_GodevilGodevillv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilGodevillv::InitAsDefaultInstance() {
}

Sheet_GodevilGodevillv::Sheet_GodevilGodevillv(const Sheet_GodevilGodevillv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilGodevillv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilGodevillv::~Sheet_GodevilGodevillv() {
  SharedDtor();
}

void Sheet_GodevilGodevillv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilGodevillv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilGodevillv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilGodevillv_descriptor_;
}

const Sheet_GodevilGodevillv& Sheet_GodevilGodevillv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilGodevillv* Sheet_GodevilGodevillv::default_instance_ = NULL;

Sheet_GodevilGodevillv* Sheet_GodevilGodevillv::New() const {
  return new Sheet_GodevilGodevillv;
}

void Sheet_GodevilGodevillv::Clear() {
  e_godevilgodevillv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilGodevillv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilGodevillv E_GodevilGodevillv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilGodevillv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilgodevillv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilGodevillv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilGodevillv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilGodevillv E_GodevilGodevillv_List = 1;
  for (int i = 0; i < this->e_godevilgodevillv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilgodevillv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilGodevillv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilGodevillv E_GodevilGodevillv_List = 1;
  for (int i = 0; i < this->e_godevilgodevillv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilgodevillv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilGodevillv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilGodevillv E_GodevilGodevillv_List = 1;
  total_size += 1 * this->e_godevilgodevillv_list_size();
  for (int i = 0; i < this->e_godevilgodevillv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilgodevillv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilGodevillv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilGodevillv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilGodevillv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilGodevillv::MergeFrom(const Sheet_GodevilGodevillv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilgodevillv_list_.MergeFrom(from.e_godevilgodevillv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilGodevillv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilGodevillv::CopyFrom(const Sheet_GodevilGodevillv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilGodevillv::IsInitialized() const {

  return true;
}

void Sheet_GodevilGodevillv::Swap(Sheet_GodevilGodevillv* other) {
  if (other != this) {
    e_godevilgodevillv_list_.Swap(&other->e_godevilgodevillv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilGodevillv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilGodevillv_descriptor_;
  metadata.reflection = Sheet_GodevilGodevillv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilGodevilprivilege::kMIdFieldNumber;
const int E_GodevilGodevilprivilege::kMOldpriceFieldNumber;
const int E_GodevilGodevilprivilege::kMNewpriceFieldNumber;
const int E_GodevilGodevilprivilege::kMRechargidFieldNumber;
const int E_GodevilGodevilprivilege::kMTypeFieldNumber;
const int E_GodevilGodevilprivilege::kMLvFieldNumber;
const int E_GodevilGodevilprivilege::kMFunctiontypeFieldNumber;
const int E_GodevilGodevilprivilege::kMParamaFieldNumber;
const int E_GodevilGodevilprivilege::kMEquipmentidFieldNumber;
const int E_GodevilGodevilprivilege::kMItemidFieldNumber;
#endif  // !_MSC_VER

E_GodevilGodevilprivilege::E_GodevilGodevilprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilGodevilprivilege::InitAsDefaultInstance() {
}

E_GodevilGodevilprivilege::E_GodevilGodevilprivilege(const E_GodevilGodevilprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilGodevilprivilege::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_LONGLONG(0);
  m_oldprice_ = 0;
  m_newprice_ = 0;
  m_rechargid_ = 0;
  m_type_ = 0;
  m_lv_ = 0;
  m_functiontype_ = 0;
  m_parama_ = 0;
  m_equipmentid_ = 0;
  m_itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilGodevilprivilege::~E_GodevilGodevilprivilege() {
  SharedDtor();
}

void E_GodevilGodevilprivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilGodevilprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilGodevilprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilGodevilprivilege_descriptor_;
}

const E_GodevilGodevilprivilege& E_GodevilGodevilprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilGodevilprivilege* E_GodevilGodevilprivilege::default_instance_ = NULL;

E_GodevilGodevilprivilege* E_GodevilGodevilprivilege::New() const {
  return new E_GodevilGodevilprivilege;
}

void E_GodevilGodevilprivilege::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_LONGLONG(0);
    m_oldprice_ = 0;
    m_newprice_ = 0;
    m_rechargid_ = 0;
    m_type_ = 0;
    m_lv_ = 0;
    m_functiontype_ = 0;
    m_parama_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_equipmentid_ = 0;
    m_itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilGodevilprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_oldprice;
        break;
      }

      // optional int32 m_oldprice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_oldprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_oldprice_)));
          set_has_m_oldprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_newprice;
        break;
      }

      // optional int32 m_newprice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_newprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_newprice_)));
          set_has_m_newprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_rechargid;
        break;
      }

      // optional int32 m_rechargid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rechargid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rechargid_)));
          set_has_m_rechargid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_lv;
        break;
      }

      // optional int32 m_lv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_functiontype;
        break;
      }

      // optional int32 m_functiontype = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functiontype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functiontype_)));
          set_has_m_functiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_parama;
        break;
      }

      // optional int32 m_parama = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_parama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_parama_)));
          set_has_m_parama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_equipmentid;
        break;
      }

      // optional int32 m_equipmentid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_equipmentid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_equipmentid_)));
          set_has_m_equipmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilGodevilprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_id(), output);
  }

  // optional int32 m_oldprice = 2;
  if (has_m_oldprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_oldprice(), output);
  }

  // optional int32 m_newprice = 3;
  if (has_m_newprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_newprice(), output);
  }

  // optional int32 m_rechargid = 4;
  if (has_m_rechargid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_rechargid(), output);
  }

  // optional int32 m_type = 5;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_type(), output);
  }

  // optional int32 m_lv = 6;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_lv(), output);
  }

  // optional int32 m_functiontype = 7;
  if (has_m_functiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_functiontype(), output);
  }

  // optional int32 m_parama = 8;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_parama(), output);
  }

  // optional int32 m_equipmentid = 9;
  if (has_m_equipmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_equipmentid(), output);
  }

  // optional int32 m_itemid = 10;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilGodevilprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_id(), target);
  }

  // optional int32 m_oldprice = 2;
  if (has_m_oldprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_oldprice(), target);
  }

  // optional int32 m_newprice = 3;
  if (has_m_newprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_newprice(), target);
  }

  // optional int32 m_rechargid = 4;
  if (has_m_rechargid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_rechargid(), target);
  }

  // optional int32 m_type = 5;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_type(), target);
  }

  // optional int32 m_lv = 6;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_lv(), target);
  }

  // optional int32 m_functiontype = 7;
  if (has_m_functiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_functiontype(), target);
  }

  // optional int32 m_parama = 8;
  if (has_m_parama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_parama(), target);
  }

  // optional int32 m_equipmentid = 9;
  if (has_m_equipmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_equipmentid(), target);
  }

  // optional int32 m_itemid = 10;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilGodevilprivilege::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_id());
    }

    // optional int32 m_oldprice = 2;
    if (has_m_oldprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_oldprice());
    }

    // optional int32 m_newprice = 3;
    if (has_m_newprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_newprice());
    }

    // optional int32 m_rechargid = 4;
    if (has_m_rechargid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rechargid());
    }

    // optional int32 m_type = 5;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_lv = 6;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_functiontype = 7;
    if (has_m_functiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functiontype());
    }

    // optional int32 m_parama = 8;
    if (has_m_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_parama());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_equipmentid = 9;
    if (has_m_equipmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_equipmentid());
    }

    // optional int32 m_itemid = 10;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilGodevilprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilGodevilprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilGodevilprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilGodevilprivilege::MergeFrom(const E_GodevilGodevilprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_oldprice()) {
      set_m_oldprice(from.m_oldprice());
    }
    if (from.has_m_newprice()) {
      set_m_newprice(from.m_newprice());
    }
    if (from.has_m_rechargid()) {
      set_m_rechargid(from.m_rechargid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_functiontype()) {
      set_m_functiontype(from.m_functiontype());
    }
    if (from.has_m_parama()) {
      set_m_parama(from.m_parama());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_equipmentid()) {
      set_m_equipmentid(from.m_equipmentid());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilGodevilprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilGodevilprivilege::CopyFrom(const E_GodevilGodevilprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilGodevilprivilege::IsInitialized() const {

  return true;
}

void E_GodevilGodevilprivilege::Swap(E_GodevilGodevilprivilege* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_oldprice_, other->m_oldprice_);
    std::swap(m_newprice_, other->m_newprice_);
    std::swap(m_rechargid_, other->m_rechargid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_functiontype_, other->m_functiontype_);
    std::swap(m_parama_, other->m_parama_);
    std::swap(m_equipmentid_, other->m_equipmentid_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilGodevilprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilGodevilprivilege_descriptor_;
  metadata.reflection = E_GodevilGodevilprivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilGodevilprivilege::kEGodevilGodevilprivilegeListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilGodevilprivilege::Sheet_GodevilGodevilprivilege()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilGodevilprivilege::InitAsDefaultInstance() {
}

Sheet_GodevilGodevilprivilege::Sheet_GodevilGodevilprivilege(const Sheet_GodevilGodevilprivilege& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilGodevilprivilege::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilGodevilprivilege::~Sheet_GodevilGodevilprivilege() {
  SharedDtor();
}

void Sheet_GodevilGodevilprivilege::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilGodevilprivilege::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilGodevilprivilege::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilGodevilprivilege_descriptor_;
}

const Sheet_GodevilGodevilprivilege& Sheet_GodevilGodevilprivilege::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilGodevilprivilege* Sheet_GodevilGodevilprivilege::default_instance_ = NULL;

Sheet_GodevilGodevilprivilege* Sheet_GodevilGodevilprivilege::New() const {
  return new Sheet_GodevilGodevilprivilege;
}

void Sheet_GodevilGodevilprivilege::Clear() {
  e_godevilgodevilprivilege_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilGodevilprivilege::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilGodevilprivilege E_GodevilGodevilprivilege_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilGodevilprivilege_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilgodevilprivilege_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilGodevilprivilege_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilGodevilprivilege::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilGodevilprivilege E_GodevilGodevilprivilege_List = 1;
  for (int i = 0; i < this->e_godevilgodevilprivilege_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilgodevilprivilege_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilGodevilprivilege::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilGodevilprivilege E_GodevilGodevilprivilege_List = 1;
  for (int i = 0; i < this->e_godevilgodevilprivilege_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilgodevilprivilege_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilGodevilprivilege::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilGodevilprivilege E_GodevilGodevilprivilege_List = 1;
  total_size += 1 * this->e_godevilgodevilprivilege_list_size();
  for (int i = 0; i < this->e_godevilgodevilprivilege_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilgodevilprivilege_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilGodevilprivilege::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilGodevilprivilege* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilGodevilprivilege*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilGodevilprivilege::MergeFrom(const Sheet_GodevilGodevilprivilege& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilgodevilprivilege_list_.MergeFrom(from.e_godevilgodevilprivilege_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilGodevilprivilege::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilGodevilprivilege::CopyFrom(const Sheet_GodevilGodevilprivilege& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilGodevilprivilege::IsInitialized() const {

  return true;
}

void Sheet_GodevilGodevilprivilege::Swap(Sheet_GodevilGodevilprivilege* other) {
  if (other != this) {
    e_godevilgodevilprivilege_list_.Swap(&other->e_godevilgodevilprivilege_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilGodevilprivilege::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilGodevilprivilege_descriptor_;
  metadata.reflection = Sheet_GodevilGodevilprivilege_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilStrongStDesc::kMTypeidFieldNumber;
const int E_GodevilStrongStDesc::kMQualityFieldNumber;
const int E_GodevilStrongStDesc::kMPositionFieldNumber;
#endif  // !_MSC_VER

E_GodevilStrongStDesc::E_GodevilStrongStDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilStrongStDesc::InitAsDefaultInstance() {
}

E_GodevilStrongStDesc::E_GodevilStrongStDesc(const E_GodevilStrongStDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilStrongStDesc::SharedCtor() {
  _cached_size_ = 0;
  m_typeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_quality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilStrongStDesc::~E_GodevilStrongStDesc() {
  SharedDtor();
}

void E_GodevilStrongStDesc::SharedDtor() {
  if (m_typeid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_typeid_;
  }
  if (m_quality_ != &::google::protobuf::internal::kEmptyString) {
    delete m_quality_;
  }
  if (m_position_ != &::google::protobuf::internal::kEmptyString) {
    delete m_position_;
  }
  if (this != default_instance_) {
  }
}

void E_GodevilStrongStDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilStrongStDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilStrongStDesc_descriptor_;
}

const E_GodevilStrongStDesc& E_GodevilStrongStDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilStrongStDesc* E_GodevilStrongStDesc::default_instance_ = NULL;

E_GodevilStrongStDesc* E_GodevilStrongStDesc::New() const {
  return new E_GodevilStrongStDesc;
}

void E_GodevilStrongStDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_m_typeid()) {
      if (m_typeid_ != &::google::protobuf::internal::kEmptyString) {
        m_typeid_->clear();
      }
    }
    if (has_m_quality()) {
      if (m_quality_ != &::google::protobuf::internal::kEmptyString) {
        m_quality_->clear();
      }
    }
    if (has_m_position()) {
      if (m_position_ != &::google::protobuf::internal::kEmptyString) {
        m_position_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilStrongStDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string m_typeid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_typeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_typeid().data(), this->m_typeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_quality;
        break;
      }

      // optional string m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_quality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_quality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_quality().data(), this->m_quality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_position;
        break;
      }

      // optional string m_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_position().data(), this->m_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilStrongStDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string m_typeid = 1;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typeid().data(), this->m_typeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->m_typeid(), output);
  }

  // optional string m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_quality().data(), this->m_quality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_quality(), output);
  }

  // optional string m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilStrongStDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string m_typeid = 1;
  if (has_m_typeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_typeid().data(), this->m_typeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->m_typeid(), target);
  }

  // optional string m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_quality().data(), this->m_quality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_quality(), target);
  }

  // optional string m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilStrongStDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string m_typeid = 1;
    if (has_m_typeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_typeid());
    }

    // optional string m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_quality());
    }

    // optional string m_position = 3;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilStrongStDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilStrongStDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilStrongStDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilStrongStDesc::MergeFrom(const E_GodevilStrongStDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_typeid()) {
      set_m_typeid(from.m_typeid());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilStrongStDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilStrongStDesc::CopyFrom(const E_GodevilStrongStDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilStrongStDesc::IsInitialized() const {

  return true;
}

void E_GodevilStrongStDesc::Swap(E_GodevilStrongStDesc* other) {
  if (other != this) {
    std::swap(m_typeid_, other->m_typeid_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_position_, other->m_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilStrongStDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilStrongStDesc_descriptor_;
  metadata.reflection = E_GodevilStrongStDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilStrong::kMLvFieldNumber;
const int E_GodevilStrong::kMExpFieldNumber;
const int E_GodevilStrong::kMTypeNumFieldNumber;
const int E_GodevilStrong::kMGodevillvFieldNumber;
const int E_GodevilStrong::kMStFieldNumber;
#endif  // !_MSC_VER

E_GodevilStrong::E_GodevilStrong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilStrong::InitAsDefaultInstance() {
}

E_GodevilStrong::E_GodevilStrong(const E_GodevilStrong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilStrong::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_exp_ = 0;
  m_type_num_ = 0;
  m_godevillv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilStrong::~E_GodevilStrong() {
  SharedDtor();
}

void E_GodevilStrong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilStrong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilStrong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilStrong_descriptor_;
}

const E_GodevilStrong& E_GodevilStrong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilStrong* E_GodevilStrong::default_instance_ = NULL;

E_GodevilStrong* E_GodevilStrong::New() const {
  return new E_GodevilStrong;
}

void E_GodevilStrong::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_exp_ = 0;
    m_type_num_ = 0;
    m_godevillv_ = 0;
  }
  m_st_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilStrong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type_num;
        break;
      }

      // optional int32 m_type_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_num_)));
          set_has_m_type_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_godevillv;
        break;
      }

      // optional int32 m_godevillv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_godevillv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_godevillv_)));
          set_has_m_godevillv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_st;
        break;
      }

      // repeated .proto_ff.E_GodevilStrongStDesc m_st = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_st:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_st()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_st;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilStrong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  // optional int32 m_type_num = 3;
  if (has_m_type_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type_num(), output);
  }

  // optional int32 m_godevillv = 4;
  if (has_m_godevillv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_godevillv(), output);
  }

  // repeated .proto_ff.E_GodevilStrongStDesc m_st = 5;
  for (int i = 0; i < this->m_st_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->m_st(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilStrong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  // optional int32 m_type_num = 3;
  if (has_m_type_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type_num(), target);
  }

  // optional int32 m_godevillv = 4;
  if (has_m_godevillv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_godevillv(), target);
  }

  // repeated .proto_ff.E_GodevilStrongStDesc m_st = 5;
  for (int i = 0; i < this->m_st_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->m_st(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilStrong::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional int32 m_type_num = 3;
    if (has_m_type_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type_num());
    }

    // optional int32 m_godevillv = 4;
    if (has_m_godevillv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_godevillv());
    }

  }
  // repeated .proto_ff.E_GodevilStrongStDesc m_st = 5;
  total_size += 1 * this->m_st_size();
  for (int i = 0; i < this->m_st_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_st(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilStrong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilStrong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilStrong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilStrong::MergeFrom(const E_GodevilStrong& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_st_.MergeFrom(from.m_st_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_type_num()) {
      set_m_type_num(from.m_type_num());
    }
    if (from.has_m_godevillv()) {
      set_m_godevillv(from.m_godevillv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilStrong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilStrong::CopyFrom(const E_GodevilStrong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilStrong::IsInitialized() const {

  return true;
}

void E_GodevilStrong::Swap(E_GodevilStrong* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_type_num_, other->m_type_num_);
    std::swap(m_godevillv_, other->m_godevillv_);
    m_st_.Swap(&other->m_st_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilStrong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilStrong_descriptor_;
  metadata.reflection = E_GodevilStrong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilStrong::kEGodevilStrongListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilStrong::Sheet_GodevilStrong()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilStrong::InitAsDefaultInstance() {
}

Sheet_GodevilStrong::Sheet_GodevilStrong(const Sheet_GodevilStrong& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilStrong::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilStrong::~Sheet_GodevilStrong() {
  SharedDtor();
}

void Sheet_GodevilStrong::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilStrong::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilStrong::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilStrong_descriptor_;
}

const Sheet_GodevilStrong& Sheet_GodevilStrong::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilStrong* Sheet_GodevilStrong::default_instance_ = NULL;

Sheet_GodevilStrong* Sheet_GodevilStrong::New() const {
  return new Sheet_GodevilStrong;
}

void Sheet_GodevilStrong::Clear() {
  e_godevilstrong_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilStrong::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilStrong E_GodevilStrong_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilStrong_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilstrong_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilStrong_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilStrong::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilStrong E_GodevilStrong_List = 1;
  for (int i = 0; i < this->e_godevilstrong_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilstrong_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilStrong::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilStrong E_GodevilStrong_List = 1;
  for (int i = 0; i < this->e_godevilstrong_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilstrong_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilStrong::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilStrong E_GodevilStrong_List = 1;
  total_size += 1 * this->e_godevilstrong_list_size();
  for (int i = 0; i < this->e_godevilstrong_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilstrong_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilStrong::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilStrong* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilStrong*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilStrong::MergeFrom(const Sheet_GodevilStrong& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilstrong_list_.MergeFrom(from.e_godevilstrong_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilStrong::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilStrong::CopyFrom(const Sheet_GodevilStrong& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilStrong::IsInitialized() const {

  return true;
}

void Sheet_GodevilStrong::Swap(Sheet_GodevilStrong* other) {
  if (other != this) {
    e_godevilstrong_list_.Swap(&other->e_godevilstrong_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilStrong::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilStrong_descriptor_;
  metadata.reflection = Sheet_GodevilStrong_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilStrongexp::kMIdFieldNumber;
const int E_GodevilStrongexp::kMTypeFieldNumber;
const int E_GodevilStrongexp::kMParamaFieldNumber;
const int E_GodevilStrongexp::kMStrongexpFieldNumber;
#endif  // !_MSC_VER

E_GodevilStrongexp::E_GodevilStrongexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilStrongexp::InitAsDefaultInstance() {
}

E_GodevilStrongexp::E_GodevilStrongexp(const E_GodevilStrongexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilStrongexp::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_parama_ = 0;
  m_strongexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilStrongexp::~E_GodevilStrongexp() {
  SharedDtor();
}

void E_GodevilStrongexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilStrongexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilStrongexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilStrongexp_descriptor_;
}

const E_GodevilStrongexp& E_GodevilStrongexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilStrongexp* E_GodevilStrongexp::default_instance_ = NULL;

E_GodevilStrongexp* E_GodevilStrongexp::New() const {
  return new E_GodevilStrongexp;
}

void E_GodevilStrongexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_parama_ = 0;
    m_strongexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilStrongexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_parama;
        break;
      }

      // optional int32 m_parama = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_parama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_parama_)));
          set_has_m_parama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_strongexp;
        break;
      }

      // optional int32 m_strongexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_strongexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_strongexp_)));
          set_has_m_strongexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilStrongexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_parama = 3;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_parama(), output);
  }

  // optional int32 m_strongexp = 4;
  if (has_m_strongexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_strongexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilStrongexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_parama = 3;
  if (has_m_parama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_parama(), target);
  }

  // optional int32 m_strongexp = 4;
  if (has_m_strongexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_strongexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilStrongexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_parama = 3;
    if (has_m_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_parama());
    }

    // optional int32 m_strongexp = 4;
    if (has_m_strongexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_strongexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilStrongexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilStrongexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilStrongexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilStrongexp::MergeFrom(const E_GodevilStrongexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_parama()) {
      set_m_parama(from.m_parama());
    }
    if (from.has_m_strongexp()) {
      set_m_strongexp(from.m_strongexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilStrongexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilStrongexp::CopyFrom(const E_GodevilStrongexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilStrongexp::IsInitialized() const {

  return true;
}

void E_GodevilStrongexp::Swap(E_GodevilStrongexp* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_parama_, other->m_parama_);
    std::swap(m_strongexp_, other->m_strongexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilStrongexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilStrongexp_descriptor_;
  metadata.reflection = E_GodevilStrongexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilStrongexp::kEGodevilStrongexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilStrongexp::Sheet_GodevilStrongexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilStrongexp::InitAsDefaultInstance() {
}

Sheet_GodevilStrongexp::Sheet_GodevilStrongexp(const Sheet_GodevilStrongexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilStrongexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilStrongexp::~Sheet_GodevilStrongexp() {
  SharedDtor();
}

void Sheet_GodevilStrongexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilStrongexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilStrongexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilStrongexp_descriptor_;
}

const Sheet_GodevilStrongexp& Sheet_GodevilStrongexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilStrongexp* Sheet_GodevilStrongexp::default_instance_ = NULL;

Sheet_GodevilStrongexp* Sheet_GodevilStrongexp::New() const {
  return new Sheet_GodevilStrongexp;
}

void Sheet_GodevilStrongexp::Clear() {
  e_godevilstrongexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilStrongexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilStrongexp E_GodevilStrongexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilStrongexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilstrongexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilStrongexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilStrongexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilStrongexp E_GodevilStrongexp_List = 1;
  for (int i = 0; i < this->e_godevilstrongexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilstrongexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilStrongexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilStrongexp E_GodevilStrongexp_List = 1;
  for (int i = 0; i < this->e_godevilstrongexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilstrongexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilStrongexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilStrongexp E_GodevilStrongexp_List = 1;
  total_size += 1 * this->e_godevilstrongexp_list_size();
  for (int i = 0; i < this->e_godevilstrongexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilstrongexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilStrongexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilStrongexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilStrongexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilStrongexp::MergeFrom(const Sheet_GodevilStrongexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilstrongexp_list_.MergeFrom(from.e_godevilstrongexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilStrongexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilStrongexp::CopyFrom(const Sheet_GodevilStrongexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilStrongexp::IsInitialized() const {

  return true;
}

void Sheet_GodevilStrongexp::Swap(Sheet_GodevilStrongexp* other) {
  if (other != this) {
    e_godevilstrongexp_list_.Swap(&other->e_godevilstrongexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilStrongexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilStrongexp_descriptor_;
  metadata.reflection = Sheet_GodevilStrongexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilAdvancelvAdDesc::kMGodevillvFieldNumber;
const int E_GodevilAdvancelvAdDesc::kMExpFieldNumber;
const int E_GodevilAdvancelvAdDesc::kMPositionFieldNumber;
#endif  // !_MSC_VER

E_GodevilAdvancelvAdDesc::E_GodevilAdvancelvAdDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilAdvancelvAdDesc::InitAsDefaultInstance() {
}

E_GodevilAdvancelvAdDesc::E_GodevilAdvancelvAdDesc(const E_GodevilAdvancelvAdDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilAdvancelvAdDesc::SharedCtor() {
  _cached_size_ = 0;
  m_godevillv_ = 0;
  m_exp_ = 0;
  m_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilAdvancelvAdDesc::~E_GodevilAdvancelvAdDesc() {
  SharedDtor();
}

void E_GodevilAdvancelvAdDesc::SharedDtor() {
  if (m_position_ != &::google::protobuf::internal::kEmptyString) {
    delete m_position_;
  }
  if (this != default_instance_) {
  }
}

void E_GodevilAdvancelvAdDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilAdvancelvAdDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilAdvancelvAdDesc_descriptor_;
}

const E_GodevilAdvancelvAdDesc& E_GodevilAdvancelvAdDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilAdvancelvAdDesc* E_GodevilAdvancelvAdDesc::default_instance_ = NULL;

E_GodevilAdvancelvAdDesc* E_GodevilAdvancelvAdDesc::New() const {
  return new E_GodevilAdvancelvAdDesc;
}

void E_GodevilAdvancelvAdDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_godevillv_ = 0;
    m_exp_ = 0;
    if (has_m_position()) {
      if (m_position_ != &::google::protobuf::internal::kEmptyString) {
        m_position_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilAdvancelvAdDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_godevillv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_godevillv_)));
          set_has_m_godevillv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_exp;
        break;
      }

      // optional int32 m_exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_exp_)));
          set_has_m_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_position;
        break;
      }

      // optional string m_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_position().data(), this->m_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilAdvancelvAdDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_godevillv = 1;
  if (has_m_godevillv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_godevillv(), output);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_exp(), output);
  }

  // optional string m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilAdvancelvAdDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_godevillv = 1;
  if (has_m_godevillv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_godevillv(), target);
  }

  // optional int32 m_exp = 2;
  if (has_m_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_exp(), target);
  }

  // optional string m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilAdvancelvAdDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_godevillv = 1;
    if (has_m_godevillv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_godevillv());
    }

    // optional int32 m_exp = 2;
    if (has_m_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_exp());
    }

    // optional string m_position = 3;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilAdvancelvAdDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilAdvancelvAdDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilAdvancelvAdDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilAdvancelvAdDesc::MergeFrom(const E_GodevilAdvancelvAdDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_godevillv()) {
      set_m_godevillv(from.m_godevillv());
    }
    if (from.has_m_exp()) {
      set_m_exp(from.m_exp());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilAdvancelvAdDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilAdvancelvAdDesc::CopyFrom(const E_GodevilAdvancelvAdDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilAdvancelvAdDesc::IsInitialized() const {

  return true;
}

void E_GodevilAdvancelvAdDesc::Swap(E_GodevilAdvancelvAdDesc* other) {
  if (other != this) {
    std::swap(m_godevillv_, other->m_godevillv_);
    std::swap(m_exp_, other->m_exp_);
    std::swap(m_position_, other->m_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilAdvancelvAdDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilAdvancelvAdDesc_descriptor_;
  metadata.reflection = E_GodevilAdvancelvAdDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilAdvancelv::kMWearlvFieldNumber;
const int E_GodevilAdvancelv::kMAdFieldNumber;
#endif  // !_MSC_VER

E_GodevilAdvancelv::E_GodevilAdvancelv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilAdvancelv::InitAsDefaultInstance() {
}

E_GodevilAdvancelv::E_GodevilAdvancelv(const E_GodevilAdvancelv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilAdvancelv::SharedCtor() {
  _cached_size_ = 0;
  m_wearlv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilAdvancelv::~E_GodevilAdvancelv() {
  SharedDtor();
}

void E_GodevilAdvancelv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilAdvancelv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilAdvancelv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilAdvancelv_descriptor_;
}

const E_GodevilAdvancelv& E_GodevilAdvancelv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilAdvancelv* E_GodevilAdvancelv::default_instance_ = NULL;

E_GodevilAdvancelv* E_GodevilAdvancelv::New() const {
  return new E_GodevilAdvancelv;
}

void E_GodevilAdvancelv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_wearlv_ = 0;
  }
  m_ad_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilAdvancelv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_wearlv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wearlv_)));
          set_has_m_wearlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ad;
        break;
      }

      // repeated .proto_ff.E_GodevilAdvancelvAdDesc m_ad = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_ad:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_ad()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_ad;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilAdvancelv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_wearlv = 1;
  if (has_m_wearlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_wearlv(), output);
  }

  // repeated .proto_ff.E_GodevilAdvancelvAdDesc m_ad = 2;
  for (int i = 0; i < this->m_ad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->m_ad(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilAdvancelv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_wearlv = 1;
  if (has_m_wearlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_wearlv(), target);
  }

  // repeated .proto_ff.E_GodevilAdvancelvAdDesc m_ad = 2;
  for (int i = 0; i < this->m_ad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->m_ad(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilAdvancelv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_wearlv = 1;
    if (has_m_wearlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wearlv());
    }

  }
  // repeated .proto_ff.E_GodevilAdvancelvAdDesc m_ad = 2;
  total_size += 1 * this->m_ad_size();
  for (int i = 0; i < this->m_ad_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_ad(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilAdvancelv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilAdvancelv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilAdvancelv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilAdvancelv::MergeFrom(const E_GodevilAdvancelv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_ad_.MergeFrom(from.m_ad_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_wearlv()) {
      set_m_wearlv(from.m_wearlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilAdvancelv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilAdvancelv::CopyFrom(const E_GodevilAdvancelv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilAdvancelv::IsInitialized() const {

  return true;
}

void E_GodevilAdvancelv::Swap(E_GodevilAdvancelv* other) {
  if (other != this) {
    std::swap(m_wearlv_, other->m_wearlv_);
    m_ad_.Swap(&other->m_ad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilAdvancelv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilAdvancelv_descriptor_;
  metadata.reflection = E_GodevilAdvancelv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilAdvancelv::kEGodevilAdvancelvListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilAdvancelv::Sheet_GodevilAdvancelv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilAdvancelv::InitAsDefaultInstance() {
}

Sheet_GodevilAdvancelv::Sheet_GodevilAdvancelv(const Sheet_GodevilAdvancelv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilAdvancelv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilAdvancelv::~Sheet_GodevilAdvancelv() {
  SharedDtor();
}

void Sheet_GodevilAdvancelv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilAdvancelv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilAdvancelv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilAdvancelv_descriptor_;
}

const Sheet_GodevilAdvancelv& Sheet_GodevilAdvancelv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilAdvancelv* Sheet_GodevilAdvancelv::default_instance_ = NULL;

Sheet_GodevilAdvancelv* Sheet_GodevilAdvancelv::New() const {
  return new Sheet_GodevilAdvancelv;
}

void Sheet_GodevilAdvancelv::Clear() {
  e_godeviladvancelv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilAdvancelv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilAdvancelv E_GodevilAdvancelv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilAdvancelv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godeviladvancelv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilAdvancelv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilAdvancelv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilAdvancelv E_GodevilAdvancelv_List = 1;
  for (int i = 0; i < this->e_godeviladvancelv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godeviladvancelv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilAdvancelv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilAdvancelv E_GodevilAdvancelv_List = 1;
  for (int i = 0; i < this->e_godeviladvancelv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godeviladvancelv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilAdvancelv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilAdvancelv E_GodevilAdvancelv_List = 1;
  total_size += 1 * this->e_godeviladvancelv_list_size();
  for (int i = 0; i < this->e_godeviladvancelv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godeviladvancelv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilAdvancelv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilAdvancelv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilAdvancelv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilAdvancelv::MergeFrom(const Sheet_GodevilAdvancelv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godeviladvancelv_list_.MergeFrom(from.e_godeviladvancelv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilAdvancelv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilAdvancelv::CopyFrom(const Sheet_GodevilAdvancelv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilAdvancelv::IsInitialized() const {

  return true;
}

void Sheet_GodevilAdvancelv::Swap(Sheet_GodevilAdvancelv* other) {
  if (other != this) {
    e_godeviladvancelv_list_.Swap(&other->e_godeviladvancelv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilAdvancelv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilAdvancelv_descriptor_;
  metadata.reflection = Sheet_GodevilAdvancelv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilAdvanceexp::kMIdFieldNumber;
const int E_GodevilAdvanceexp::kMWearlvFieldNumber;
const int E_GodevilAdvanceexp::kMPositionFieldNumber;
const int E_GodevilAdvanceexp::kMLvparamaFieldNumber;
const int E_GodevilAdvanceexp::kMGoldparamaFieldNumber;
const int E_GodevilAdvanceexp::kMSilverparamaFieldNumber;
const int E_GodevilAdvanceexp::kMQuality6FieldNumber;
const int E_GodevilAdvanceexp::kMQuality7FieldNumber;
const int E_GodevilAdvanceexp::kMQuality8FieldNumber;
const int E_GodevilAdvanceexp::kMQuality9FieldNumber;
const int E_GodevilAdvanceexp::kMQuality10FieldNumber;
#endif  // !_MSC_VER

E_GodevilAdvanceexp::E_GodevilAdvanceexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilAdvanceexp::InitAsDefaultInstance() {
}

E_GodevilAdvanceexp::E_GodevilAdvanceexp(const E_GodevilAdvanceexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilAdvanceexp::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_wearlv_ = 0;
  m_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_lvparama_ = 0;
  m_goldparama_ = 0;
  m_silverparama_ = 0;
  m_quality6_ = 0;
  m_quality7_ = 0;
  m_quality8_ = 0;
  m_quality9_ = 0;
  m_quality10_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilAdvanceexp::~E_GodevilAdvanceexp() {
  SharedDtor();
}

void E_GodevilAdvanceexp::SharedDtor() {
  if (m_position_ != &::google::protobuf::internal::kEmptyString) {
    delete m_position_;
  }
  if (this != default_instance_) {
  }
}

void E_GodevilAdvanceexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilAdvanceexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilAdvanceexp_descriptor_;
}

const E_GodevilAdvanceexp& E_GodevilAdvanceexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilAdvanceexp* E_GodevilAdvanceexp::default_instance_ = NULL;

E_GodevilAdvanceexp* E_GodevilAdvanceexp::New() const {
  return new E_GodevilAdvanceexp;
}

void E_GodevilAdvanceexp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_wearlv_ = 0;
    if (has_m_position()) {
      if (m_position_ != &::google::protobuf::internal::kEmptyString) {
        m_position_->clear();
      }
    }
    m_lvparama_ = 0;
    m_goldparama_ = 0;
    m_silverparama_ = 0;
    m_quality6_ = 0;
    m_quality7_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_quality8_ = 0;
    m_quality9_ = 0;
    m_quality10_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilAdvanceexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_wearlv;
        break;
      }

      // optional int32 m_wearlv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wearlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wearlv_)));
          set_has_m_wearlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_position;
        break;
      }

      // optional string m_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_position().data(), this->m_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_lvparama;
        break;
      }

      // optional int32 m_lvparama = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_lvparama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lvparama_)));
          set_has_m_lvparama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_goldparama;
        break;
      }

      // optional int32 m_goldparama = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_goldparama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goldparama_)));
          set_has_m_goldparama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_silverparama;
        break;
      }

      // optional int32 m_silverparama = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_silverparama:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_silverparama_)));
          set_has_m_silverparama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_quality6;
        break;
      }

      // optional int32 m_quality6 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality6_)));
          set_has_m_quality6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_quality7;
        break;
      }

      // optional int32 m_quality7 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality7_)));
          set_has_m_quality7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_quality8;
        break;
      }

      // optional int32 m_quality8 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality8:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality8_)));
          set_has_m_quality8();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_quality9;
        break;
      }

      // optional int32 m_quality9 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality9:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality9_)));
          set_has_m_quality9();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_quality10;
        break;
      }

      // optional int32 m_quality10 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality10:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality10_)));
          set_has_m_quality10();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilAdvanceexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_wearlv = 2;
  if (has_m_wearlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_wearlv(), output);
  }

  // optional string m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_position(), output);
  }

  // optional int32 m_lvparama = 4;
  if (has_m_lvparama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_lvparama(), output);
  }

  // optional int32 m_goldparama = 5;
  if (has_m_goldparama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_goldparama(), output);
  }

  // optional int32 m_silverparama = 6;
  if (has_m_silverparama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_silverparama(), output);
  }

  // optional int32 m_quality6 = 7;
  if (has_m_quality6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_quality6(), output);
  }

  // optional int32 m_quality7 = 8;
  if (has_m_quality7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_quality7(), output);
  }

  // optional int32 m_quality8 = 9;
  if (has_m_quality8()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_quality8(), output);
  }

  // optional int32 m_quality9 = 10;
  if (has_m_quality9()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_quality9(), output);
  }

  // optional int32 m_quality10 = 11;
  if (has_m_quality10()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_quality10(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilAdvanceexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_wearlv = 2;
  if (has_m_wearlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_wearlv(), target);
  }

  // optional string m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_position(), target);
  }

  // optional int32 m_lvparama = 4;
  if (has_m_lvparama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_lvparama(), target);
  }

  // optional int32 m_goldparama = 5;
  if (has_m_goldparama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_goldparama(), target);
  }

  // optional int32 m_silverparama = 6;
  if (has_m_silverparama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_silverparama(), target);
  }

  // optional int32 m_quality6 = 7;
  if (has_m_quality6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_quality6(), target);
  }

  // optional int32 m_quality7 = 8;
  if (has_m_quality7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_quality7(), target);
  }

  // optional int32 m_quality8 = 9;
  if (has_m_quality8()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_quality8(), target);
  }

  // optional int32 m_quality9 = 10;
  if (has_m_quality9()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_quality9(), target);
  }

  // optional int32 m_quality10 = 11;
  if (has_m_quality10()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_quality10(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilAdvanceexp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_wearlv = 2;
    if (has_m_wearlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wearlv());
    }

    // optional string m_position = 3;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_position());
    }

    // optional int32 m_lvparama = 4;
    if (has_m_lvparama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lvparama());
    }

    // optional int32 m_goldparama = 5;
    if (has_m_goldparama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goldparama());
    }

    // optional int32 m_silverparama = 6;
    if (has_m_silverparama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_silverparama());
    }

    // optional int32 m_quality6 = 7;
    if (has_m_quality6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality6());
    }

    // optional int32 m_quality7 = 8;
    if (has_m_quality7()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality7());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_quality8 = 9;
    if (has_m_quality8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality8());
    }

    // optional int32 m_quality9 = 10;
    if (has_m_quality9()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality9());
    }

    // optional int32 m_quality10 = 11;
    if (has_m_quality10()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality10());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilAdvanceexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilAdvanceexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilAdvanceexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilAdvanceexp::MergeFrom(const E_GodevilAdvanceexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_wearlv()) {
      set_m_wearlv(from.m_wearlv());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_lvparama()) {
      set_m_lvparama(from.m_lvparama());
    }
    if (from.has_m_goldparama()) {
      set_m_goldparama(from.m_goldparama());
    }
    if (from.has_m_silverparama()) {
      set_m_silverparama(from.m_silverparama());
    }
    if (from.has_m_quality6()) {
      set_m_quality6(from.m_quality6());
    }
    if (from.has_m_quality7()) {
      set_m_quality7(from.m_quality7());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_quality8()) {
      set_m_quality8(from.m_quality8());
    }
    if (from.has_m_quality9()) {
      set_m_quality9(from.m_quality9());
    }
    if (from.has_m_quality10()) {
      set_m_quality10(from.m_quality10());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilAdvanceexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilAdvanceexp::CopyFrom(const E_GodevilAdvanceexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilAdvanceexp::IsInitialized() const {

  return true;
}

void E_GodevilAdvanceexp::Swap(E_GodevilAdvanceexp* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_wearlv_, other->m_wearlv_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_lvparama_, other->m_lvparama_);
    std::swap(m_goldparama_, other->m_goldparama_);
    std::swap(m_silverparama_, other->m_silverparama_);
    std::swap(m_quality6_, other->m_quality6_);
    std::swap(m_quality7_, other->m_quality7_);
    std::swap(m_quality8_, other->m_quality8_);
    std::swap(m_quality9_, other->m_quality9_);
    std::swap(m_quality10_, other->m_quality10_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilAdvanceexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilAdvanceexp_descriptor_;
  metadata.reflection = E_GodevilAdvanceexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilAdvanceexp::kEGodevilAdvanceexpListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilAdvanceexp::Sheet_GodevilAdvanceexp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilAdvanceexp::InitAsDefaultInstance() {
}

Sheet_GodevilAdvanceexp::Sheet_GodevilAdvanceexp(const Sheet_GodevilAdvanceexp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilAdvanceexp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilAdvanceexp::~Sheet_GodevilAdvanceexp() {
  SharedDtor();
}

void Sheet_GodevilAdvanceexp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilAdvanceexp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilAdvanceexp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilAdvanceexp_descriptor_;
}

const Sheet_GodevilAdvanceexp& Sheet_GodevilAdvanceexp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilAdvanceexp* Sheet_GodevilAdvanceexp::default_instance_ = NULL;

Sheet_GodevilAdvanceexp* Sheet_GodevilAdvanceexp::New() const {
  return new Sheet_GodevilAdvanceexp;
}

void Sheet_GodevilAdvanceexp::Clear() {
  e_godeviladvanceexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilAdvanceexp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilAdvanceexp E_GodevilAdvanceexp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilAdvanceexp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godeviladvanceexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilAdvanceexp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilAdvanceexp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilAdvanceexp E_GodevilAdvanceexp_List = 1;
  for (int i = 0; i < this->e_godeviladvanceexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godeviladvanceexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilAdvanceexp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilAdvanceexp E_GodevilAdvanceexp_List = 1;
  for (int i = 0; i < this->e_godeviladvanceexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godeviladvanceexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilAdvanceexp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilAdvanceexp E_GodevilAdvanceexp_List = 1;
  total_size += 1 * this->e_godeviladvanceexp_list_size();
  for (int i = 0; i < this->e_godeviladvanceexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godeviladvanceexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilAdvanceexp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilAdvanceexp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilAdvanceexp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilAdvanceexp::MergeFrom(const Sheet_GodevilAdvanceexp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godeviladvanceexp_list_.MergeFrom(from.e_godeviladvanceexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilAdvanceexp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilAdvanceexp::CopyFrom(const Sheet_GodevilAdvanceexp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilAdvanceexp::IsInitialized() const {

  return true;
}

void Sheet_GodevilAdvanceexp::Swap(Sheet_GodevilAdvanceexp* other) {
  if (other != this) {
    e_godeviladvanceexp_list_.Swap(&other->e_godeviladvanceexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilAdvanceexp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilAdvanceexp_descriptor_;
  metadata.reflection = Sheet_GodevilAdvanceexp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilQualitylvItemDesc::kMNumFieldNumber;
const int E_GodevilQualitylvItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_GodevilQualitylvItemDesc::E_GodevilQualitylvItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilQualitylvItemDesc::InitAsDefaultInstance() {
}

E_GodevilQualitylvItemDesc::E_GodevilQualitylvItemDesc(const E_GodevilQualitylvItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilQualitylvItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilQualitylvItemDesc::~E_GodevilQualitylvItemDesc() {
  SharedDtor();
}

void E_GodevilQualitylvItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilQualitylvItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilQualitylvItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilQualitylvItemDesc_descriptor_;
}

const E_GodevilQualitylvItemDesc& E_GodevilQualitylvItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilQualitylvItemDesc* E_GodevilQualitylvItemDesc::default_instance_ = NULL;

E_GodevilQualitylvItemDesc* E_GodevilQualitylvItemDesc::New() const {
  return new E_GodevilQualitylvItemDesc;
}

void E_GodevilQualitylvItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilQualitylvItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilQualitylvItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilQualitylvItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilQualitylvItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilQualitylvItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilQualitylvItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilQualitylvItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilQualitylvItemDesc::MergeFrom(const E_GodevilQualitylvItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilQualitylvItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilQualitylvItemDesc::CopyFrom(const E_GodevilQualitylvItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilQualitylvItemDesc::IsInitialized() const {

  return true;
}

void E_GodevilQualitylvItemDesc::Swap(E_GodevilQualitylvItemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilQualitylvItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilQualitylvItemDesc_descriptor_;
  metadata.reflection = E_GodevilQualitylvItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilQualitylv::kMIdFieldNumber;
const int E_GodevilQualitylv::kMQualityFieldNumber;
const int E_GodevilQualitylv::kMWearlvFieldNumber;
const int E_GodevilQualitylv::kMPercentFieldNumber;
const int E_GodevilQualitylv::kMPositionFieldNumber;
const int E_GodevilQualitylv::kMCostwuxiongitemFieldNumber;
const int E_GodevilQualitylv::kMCostnumberFieldNumber;
const int E_GodevilQualitylv::kMItemFieldNumber;
#endif  // !_MSC_VER

E_GodevilQualitylv::E_GodevilQualitylv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilQualitylv::InitAsDefaultInstance() {
}

E_GodevilQualitylv::E_GodevilQualitylv(const E_GodevilQualitylv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilQualitylv::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_quality_ = 0;
  m_wearlv_ = 0;
  m_percent_ = 0;
  m_position_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_costwuxiongitem_ = 0;
  m_costnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilQualitylv::~E_GodevilQualitylv() {
  SharedDtor();
}

void E_GodevilQualitylv::SharedDtor() {
  if (m_position_ != &::google::protobuf::internal::kEmptyString) {
    delete m_position_;
  }
  if (this != default_instance_) {
  }
}

void E_GodevilQualitylv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilQualitylv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilQualitylv_descriptor_;
}

const E_GodevilQualitylv& E_GodevilQualitylv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilQualitylv* E_GodevilQualitylv::default_instance_ = NULL;

E_GodevilQualitylv* E_GodevilQualitylv::New() const {
  return new E_GodevilQualitylv;
}

void E_GodevilQualitylv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_quality_ = 0;
    m_wearlv_ = 0;
    m_percent_ = 0;
    if (has_m_position()) {
      if (m_position_ != &::google::protobuf::internal::kEmptyString) {
        m_position_->clear();
      }
    }
    m_costwuxiongitem_ = 0;
    m_costnumber_ = 0;
  }
  m_item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilQualitylv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_wearlv;
        break;
      }

      // optional int32 m_wearlv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_wearlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_wearlv_)));
          set_has_m_wearlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_percent;
        break;
      }

      // optional int32 m_percent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_percent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_percent_)));
          set_has_m_percent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_position;
        break;
      }

      // optional string m_position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_position()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_position().data(), this->m_position().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_costwuxiongitem;
        break;
      }

      // optional int32 m_costwuxiongitem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costwuxiongitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costwuxiongitem_)));
          set_has_m_costwuxiongitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_costnumber;
        break;
      }

      // optional int32 m_costnumber = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costnumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costnumber_)));
          set_has_m_costnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_GodevilQualitylvItemDesc m_item = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_m_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilQualitylv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_quality(), output);
  }

  // optional int32 m_wearlv = 3;
  if (has_m_wearlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_wearlv(), output);
  }

  // optional int32 m_percent = 4;
  if (has_m_percent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_percent(), output);
  }

  // optional string m_position = 5;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_position(), output);
  }

  // optional int32 m_costwuxiongitem = 6;
  if (has_m_costwuxiongitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_costwuxiongitem(), output);
  }

  // optional int32 m_costnumber = 7;
  if (has_m_costnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_costnumber(), output);
  }

  // repeated .proto_ff.E_GodevilQualitylvItemDesc m_item = 8;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->m_item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilQualitylv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_quality = 2;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_quality(), target);
  }

  // optional int32 m_wearlv = 3;
  if (has_m_wearlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_wearlv(), target);
  }

  // optional int32 m_percent = 4;
  if (has_m_percent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_percent(), target);
  }

  // optional string m_position = 5;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_position().data(), this->m_position().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_position(), target);
  }

  // optional int32 m_costwuxiongitem = 6;
  if (has_m_costwuxiongitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_costwuxiongitem(), target);
  }

  // optional int32 m_costnumber = 7;
  if (has_m_costnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_costnumber(), target);
  }

  // repeated .proto_ff.E_GodevilQualitylvItemDesc m_item = 8;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->m_item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilQualitylv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_quality = 2;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_wearlv = 3;
    if (has_m_wearlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_wearlv());
    }

    // optional int32 m_percent = 4;
    if (has_m_percent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_percent());
    }

    // optional string m_position = 5;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_position());
    }

    // optional int32 m_costwuxiongitem = 6;
    if (has_m_costwuxiongitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costwuxiongitem());
    }

    // optional int32 m_costnumber = 7;
    if (has_m_costnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costnumber());
    }

  }
  // repeated .proto_ff.E_GodevilQualitylvItemDesc m_item = 8;
  total_size += 1 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilQualitylv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilQualitylv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilQualitylv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilQualitylv::MergeFrom(const E_GodevilQualitylv& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_wearlv()) {
      set_m_wearlv(from.m_wearlv());
    }
    if (from.has_m_percent()) {
      set_m_percent(from.m_percent());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_costwuxiongitem()) {
      set_m_costwuxiongitem(from.m_costwuxiongitem());
    }
    if (from.has_m_costnumber()) {
      set_m_costnumber(from.m_costnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilQualitylv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilQualitylv::CopyFrom(const E_GodevilQualitylv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilQualitylv::IsInitialized() const {

  return true;
}

void E_GodevilQualitylv::Swap(E_GodevilQualitylv* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_wearlv_, other->m_wearlv_);
    std::swap(m_percent_, other->m_percent_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_costwuxiongitem_, other->m_costwuxiongitem_);
    std::swap(m_costnumber_, other->m_costnumber_);
    m_item_.Swap(&other->m_item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilQualitylv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilQualitylv_descriptor_;
  metadata.reflection = E_GodevilQualitylv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilQualitylv::kEGodevilQualitylvListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilQualitylv::Sheet_GodevilQualitylv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilQualitylv::InitAsDefaultInstance() {
}

Sheet_GodevilQualitylv::Sheet_GodevilQualitylv(const Sheet_GodevilQualitylv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilQualitylv::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilQualitylv::~Sheet_GodevilQualitylv() {
  SharedDtor();
}

void Sheet_GodevilQualitylv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilQualitylv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilQualitylv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilQualitylv_descriptor_;
}

const Sheet_GodevilQualitylv& Sheet_GodevilQualitylv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilQualitylv* Sheet_GodevilQualitylv::default_instance_ = NULL;

Sheet_GodevilQualitylv* Sheet_GodevilQualitylv::New() const {
  return new Sheet_GodevilQualitylv;
}

void Sheet_GodevilQualitylv::Clear() {
  e_godevilqualitylv_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilQualitylv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilQualitylv E_GodevilQualitylv_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilQualitylv_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilqualitylv_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilQualitylv_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilQualitylv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilQualitylv E_GodevilQualitylv_List = 1;
  for (int i = 0; i < this->e_godevilqualitylv_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilqualitylv_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilQualitylv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilQualitylv E_GodevilQualitylv_List = 1;
  for (int i = 0; i < this->e_godevilqualitylv_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilqualitylv_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilQualitylv::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilQualitylv E_GodevilQualitylv_List = 1;
  total_size += 1 * this->e_godevilqualitylv_list_size();
  for (int i = 0; i < this->e_godevilqualitylv_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilqualitylv_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilQualitylv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilQualitylv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilQualitylv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilQualitylv::MergeFrom(const Sheet_GodevilQualitylv& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilqualitylv_list_.MergeFrom(from.e_godevilqualitylv_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilQualitylv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilQualitylv::CopyFrom(const Sheet_GodevilQualitylv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilQualitylv::IsInitialized() const {

  return true;
}

void Sheet_GodevilQualitylv::Swap(Sheet_GodevilQualitylv* other) {
  if (other != this) {
    e_godevilqualitylv_list_.Swap(&other->e_godevilqualitylv_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilQualitylv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilQualitylv_descriptor_;
  metadata.reflection = Sheet_GodevilQualitylv_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilPositionunlock::kMPositionFieldNumber;
const int E_GodevilPositionunlock::kMDayFieldNumber;
const int E_GodevilPositionunlock::kMGodevillvFieldNumber;
#endif  // !_MSC_VER

E_GodevilPositionunlock::E_GodevilPositionunlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilPositionunlock::InitAsDefaultInstance() {
}

E_GodevilPositionunlock::E_GodevilPositionunlock(const E_GodevilPositionunlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilPositionunlock::SharedCtor() {
  _cached_size_ = 0;
  m_position_ = 0;
  m_day_ = 0;
  m_godevillv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilPositionunlock::~E_GodevilPositionunlock() {
  SharedDtor();
}

void E_GodevilPositionunlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilPositionunlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilPositionunlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilPositionunlock_descriptor_;
}

const E_GodevilPositionunlock& E_GodevilPositionunlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilPositionunlock* E_GodevilPositionunlock::default_instance_ = NULL;

E_GodevilPositionunlock* E_GodevilPositionunlock::New() const {
  return new E_GodevilPositionunlock;
}

void E_GodevilPositionunlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_position_ = 0;
    m_day_ = 0;
    m_godevillv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilPositionunlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_day;
        break;
      }

      // optional int32 m_day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_day_)));
          set_has_m_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_godevillv;
        break;
      }

      // optional int32 m_godevillv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_godevillv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_godevillv_)));
          set_has_m_godevillv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilPositionunlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_position = 1;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_position(), output);
  }

  // optional int32 m_day = 2;
  if (has_m_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_day(), output);
  }

  // optional int32 m_godevillv = 3;
  if (has_m_godevillv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_godevillv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilPositionunlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_position = 1;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_position(), target);
  }

  // optional int32 m_day = 2;
  if (has_m_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_day(), target);
  }

  // optional int32 m_godevillv = 3;
  if (has_m_godevillv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_godevillv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilPositionunlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_position = 1;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_day = 2;
    if (has_m_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_day());
    }

    // optional int32 m_godevillv = 3;
    if (has_m_godevillv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_godevillv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilPositionunlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilPositionunlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilPositionunlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilPositionunlock::MergeFrom(const E_GodevilPositionunlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_day()) {
      set_m_day(from.m_day());
    }
    if (from.has_m_godevillv()) {
      set_m_godevillv(from.m_godevillv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilPositionunlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilPositionunlock::CopyFrom(const E_GodevilPositionunlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilPositionunlock::IsInitialized() const {

  return true;
}

void E_GodevilPositionunlock::Swap(E_GodevilPositionunlock* other) {
  if (other != this) {
    std::swap(m_position_, other->m_position_);
    std::swap(m_day_, other->m_day_);
    std::swap(m_godevillv_, other->m_godevillv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilPositionunlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilPositionunlock_descriptor_;
  metadata.reflection = E_GodevilPositionunlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilPositionunlock::kEGodevilPositionunlockListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilPositionunlock::Sheet_GodevilPositionunlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilPositionunlock::InitAsDefaultInstance() {
}

Sheet_GodevilPositionunlock::Sheet_GodevilPositionunlock(const Sheet_GodevilPositionunlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilPositionunlock::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilPositionunlock::~Sheet_GodevilPositionunlock() {
  SharedDtor();
}

void Sheet_GodevilPositionunlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilPositionunlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilPositionunlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilPositionunlock_descriptor_;
}

const Sheet_GodevilPositionunlock& Sheet_GodevilPositionunlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilPositionunlock* Sheet_GodevilPositionunlock::default_instance_ = NULL;

Sheet_GodevilPositionunlock* Sheet_GodevilPositionunlock::New() const {
  return new Sheet_GodevilPositionunlock;
}

void Sheet_GodevilPositionunlock::Clear() {
  e_godevilpositionunlock_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilPositionunlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilPositionunlock E_GodevilPositionunlock_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilPositionunlock_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilpositionunlock_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilPositionunlock_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilPositionunlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilPositionunlock E_GodevilPositionunlock_List = 1;
  for (int i = 0; i < this->e_godevilpositionunlock_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilpositionunlock_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilPositionunlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilPositionunlock E_GodevilPositionunlock_List = 1;
  for (int i = 0; i < this->e_godevilpositionunlock_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilpositionunlock_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilPositionunlock::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilPositionunlock E_GodevilPositionunlock_List = 1;
  total_size += 1 * this->e_godevilpositionunlock_list_size();
  for (int i = 0; i < this->e_godevilpositionunlock_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilpositionunlock_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilPositionunlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilPositionunlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilPositionunlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilPositionunlock::MergeFrom(const Sheet_GodevilPositionunlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilpositionunlock_list_.MergeFrom(from.e_godevilpositionunlock_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilPositionunlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilPositionunlock::CopyFrom(const Sheet_GodevilPositionunlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilPositionunlock::IsInitialized() const {

  return true;
}

void Sheet_GodevilPositionunlock::Swap(Sheet_GodevilPositionunlock* other) {
  if (other != this) {
    e_godevilpositionunlock_list_.Swap(&other->e_godevilpositionunlock_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilPositionunlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilPositionunlock_descriptor_;
  metadata.reflection = Sheet_GodevilPositionunlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilBlacksmithItemDesc::kMNumFieldNumber;
const int E_GodevilBlacksmithItemDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_GodevilBlacksmithItemDesc::E_GodevilBlacksmithItemDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilBlacksmithItemDesc::InitAsDefaultInstance() {
}

E_GodevilBlacksmithItemDesc::E_GodevilBlacksmithItemDesc(const E_GodevilBlacksmithItemDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilBlacksmithItemDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilBlacksmithItemDesc::~E_GodevilBlacksmithItemDesc() {
  SharedDtor();
}

void E_GodevilBlacksmithItemDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilBlacksmithItemDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilBlacksmithItemDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilBlacksmithItemDesc_descriptor_;
}

const E_GodevilBlacksmithItemDesc& E_GodevilBlacksmithItemDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilBlacksmithItemDesc* E_GodevilBlacksmithItemDesc::default_instance_ = NULL;

E_GodevilBlacksmithItemDesc* E_GodevilBlacksmithItemDesc::New() const {
  return new E_GodevilBlacksmithItemDesc;
}

void E_GodevilBlacksmithItemDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilBlacksmithItemDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilBlacksmithItemDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilBlacksmithItemDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilBlacksmithItemDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilBlacksmithItemDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilBlacksmithItemDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilBlacksmithItemDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilBlacksmithItemDesc::MergeFrom(const E_GodevilBlacksmithItemDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilBlacksmithItemDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilBlacksmithItemDesc::CopyFrom(const E_GodevilBlacksmithItemDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilBlacksmithItemDesc::IsInitialized() const {

  return true;
}

void E_GodevilBlacksmithItemDesc::Swap(E_GodevilBlacksmithItemDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilBlacksmithItemDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilBlacksmithItemDesc_descriptor_;
  metadata.reflection = E_GodevilBlacksmithItemDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilBlacksmithSkillDesc::kMProbabilityFieldNumber;
const int E_GodevilBlacksmithSkillDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_GodevilBlacksmithSkillDesc::E_GodevilBlacksmithSkillDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilBlacksmithSkillDesc::InitAsDefaultInstance() {
}

E_GodevilBlacksmithSkillDesc::E_GodevilBlacksmithSkillDesc(const E_GodevilBlacksmithSkillDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilBlacksmithSkillDesc::SharedCtor() {
  _cached_size_ = 0;
  m_probability_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilBlacksmithSkillDesc::~E_GodevilBlacksmithSkillDesc() {
  SharedDtor();
}

void E_GodevilBlacksmithSkillDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilBlacksmithSkillDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilBlacksmithSkillDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilBlacksmithSkillDesc_descriptor_;
}

const E_GodevilBlacksmithSkillDesc& E_GodevilBlacksmithSkillDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilBlacksmithSkillDesc* E_GodevilBlacksmithSkillDesc::default_instance_ = NULL;

E_GodevilBlacksmithSkillDesc* E_GodevilBlacksmithSkillDesc::New() const {
  return new E_GodevilBlacksmithSkillDesc;
}

void E_GodevilBlacksmithSkillDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_probability_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilBlacksmithSkillDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_probability = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_probability_)));
          set_has_m_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilBlacksmithSkillDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_probability = 1;
  if (has_m_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_probability(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilBlacksmithSkillDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_probability = 1;
  if (has_m_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_probability(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilBlacksmithSkillDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_probability = 1;
    if (has_m_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_probability());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilBlacksmithSkillDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilBlacksmithSkillDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilBlacksmithSkillDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilBlacksmithSkillDesc::MergeFrom(const E_GodevilBlacksmithSkillDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_probability()) {
      set_m_probability(from.m_probability());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilBlacksmithSkillDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilBlacksmithSkillDesc::CopyFrom(const E_GodevilBlacksmithSkillDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilBlacksmithSkillDesc::IsInitialized() const {

  return true;
}

void E_GodevilBlacksmithSkillDesc::Swap(E_GodevilBlacksmithSkillDesc* other) {
  if (other != this) {
    std::swap(m_probability_, other->m_probability_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilBlacksmithSkillDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilBlacksmithSkillDesc_descriptor_;
  metadata.reflection = E_GodevilBlacksmithSkillDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilBlacksmith::kMIdFieldNumber;
const int E_GodevilBlacksmith::kMTypeFieldNumber;
const int E_GodevilBlacksmith::kMPositionFieldNumber;
const int E_GodevilBlacksmith::kMQualityFieldNumber;
const int E_GodevilBlacksmith::kMProbabilityFieldNumber;
const int E_GodevilBlacksmith::kMGodpointFieldNumber;
const int E_GodevilBlacksmith::kMStarsprobabilityFieldNumber;
const int E_GodevilBlacksmith::kMGoldFieldNumber;
const int E_GodevilBlacksmith::kMSilverFieldNumber;
const int E_GodevilBlacksmith::kMPaperidFieldNumber;
const int E_GodevilBlacksmith::kMPapernumFieldNumber;
const int E_GodevilBlacksmith::kMSubstituteitemFieldNumber;
const int E_GodevilBlacksmith::kMNumberFieldNumber;
const int E_GodevilBlacksmith::kMGodevilskillFieldNumber;
const int E_GodevilBlacksmith::kMSkillsetFieldNumber;
const int E_GodevilBlacksmith::kMItemFieldNumber;
const int E_GodevilBlacksmith::kMSkillFieldNumber;
#endif  // !_MSC_VER

E_GodevilBlacksmith::E_GodevilBlacksmith()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilBlacksmith::InitAsDefaultInstance() {
}

E_GodevilBlacksmith::E_GodevilBlacksmith(const E_GodevilBlacksmith& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilBlacksmith::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_position_ = 0;
  m_quality_ = 0;
  m_probability_ = 0;
  m_godpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_starsprobability_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_gold_ = 0;
  m_silver_ = 0;
  m_paperid_ = 0;
  m_papernum_ = 0;
  m_substituteitem_ = 0;
  m_number_ = 0;
  m_godevilskill_ = 0;
  m_skillset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilBlacksmith::~E_GodevilBlacksmith() {
  SharedDtor();
}

void E_GodevilBlacksmith::SharedDtor() {
  if (m_godpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete m_godpoint_;
  }
  if (m_starsprobability_ != &::google::protobuf::internal::kEmptyString) {
    delete m_starsprobability_;
  }
  if (m_skillset_ != &::google::protobuf::internal::kEmptyString) {
    delete m_skillset_;
  }
  if (this != default_instance_) {
  }
}

void E_GodevilBlacksmith::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilBlacksmith::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilBlacksmith_descriptor_;
}

const E_GodevilBlacksmith& E_GodevilBlacksmith::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilBlacksmith* E_GodevilBlacksmith::default_instance_ = NULL;

E_GodevilBlacksmith* E_GodevilBlacksmith::New() const {
  return new E_GodevilBlacksmith;
}

void E_GodevilBlacksmith::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_position_ = 0;
    m_quality_ = 0;
    m_probability_ = 0;
    if (has_m_godpoint()) {
      if (m_godpoint_ != &::google::protobuf::internal::kEmptyString) {
        m_godpoint_->clear();
      }
    }
    if (has_m_starsprobability()) {
      if (m_starsprobability_ != &::google::protobuf::internal::kEmptyString) {
        m_starsprobability_->clear();
      }
    }
    m_gold_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_silver_ = 0;
    m_paperid_ = 0;
    m_papernum_ = 0;
    m_substituteitem_ = 0;
    m_number_ = 0;
    m_godevilskill_ = 0;
    if (has_m_skillset()) {
      if (m_skillset_ != &::google::protobuf::internal::kEmptyString) {
        m_skillset_->clear();
      }
    }
  }
  m_item_.Clear();
  m_skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilBlacksmith::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_position;
        break;
      }

      // optional int32 m_position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_quality;
        break;
      }

      // optional int32 m_quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_quality_)));
          set_has_m_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_probability;
        break;
      }

      // optional int32 m_probability = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_probability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_probability_)));
          set_has_m_probability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_godpoint;
        break;
      }

      // optional string m_godpoint = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_godpoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_godpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_godpoint().data(), this->m_godpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_starsprobability;
        break;
      }

      // optional string m_starsprobability = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_starsprobability:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_starsprobability()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_starsprobability().data(), this->m_starsprobability().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_gold;
        break;
      }

      // optional int32 m_gold = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_gold_)));
          set_has_m_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_silver;
        break;
      }

      // optional int32 m_silver = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_silver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_silver_)));
          set_has_m_silver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_paperid;
        break;
      }

      // optional int32 m_paperid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_paperid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_paperid_)));
          set_has_m_paperid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_papernum;
        break;
      }

      // optional int32 m_papernum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_papernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_papernum_)));
          set_has_m_papernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_substituteitem;
        break;
      }

      // optional int32 m_substituteitem = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_substituteitem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_substituteitem_)));
          set_has_m_substituteitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_number;
        break;
      }

      // optional int32 m_number = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_number_)));
          set_has_m_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_godevilskill;
        break;
      }

      // optional int32 m_godevilskill = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_godevilskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_godevilskill_)));
          set_has_m_godevilskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_m_skillset;
        break;
      }

      // optional string m_skillset = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skillset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_skillset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_skillset().data(), this->m_skillset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_item;
        break;
      }

      // repeated .proto_ff.E_GodevilBlacksmithItemDesc m_item = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_m_item;
        if (input->ExpectTag(138)) goto parse_m_skill;
        break;
      }

      // repeated .proto_ff.E_GodevilBlacksmithSkillDesc m_skill = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_m_skill;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilBlacksmith::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_position = 3;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_position(), output);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_quality(), output);
  }

  // optional int32 m_probability = 5;
  if (has_m_probability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_probability(), output);
  }

  // optional string m_godpoint = 6;
  if (has_m_godpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_godpoint().data(), this->m_godpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->m_godpoint(), output);
  }

  // optional string m_starsprobability = 7;
  if (has_m_starsprobability()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starsprobability().data(), this->m_starsprobability().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_starsprobability(), output);
  }

  // optional int32 m_gold = 8;
  if (has_m_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_gold(), output);
  }

  // optional int32 m_silver = 9;
  if (has_m_silver()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_silver(), output);
  }

  // optional int32 m_paperid = 10;
  if (has_m_paperid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_paperid(), output);
  }

  // optional int32 m_papernum = 11;
  if (has_m_papernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_papernum(), output);
  }

  // optional int32 m_substituteitem = 12;
  if (has_m_substituteitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_substituteitem(), output);
  }

  // optional int32 m_number = 13;
  if (has_m_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_number(), output);
  }

  // optional int32 m_godevilskill = 14;
  if (has_m_godevilskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_godevilskill(), output);
  }

  // optional string m_skillset = 15;
  if (has_m_skillset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillset().data(), this->m_skillset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->m_skillset(), output);
  }

  // repeated .proto_ff.E_GodevilBlacksmithItemDesc m_item = 16;
  for (int i = 0; i < this->m_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->m_item(i), output);
  }

  // repeated .proto_ff.E_GodevilBlacksmithSkillDesc m_skill = 17;
  for (int i = 0; i < this->m_skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->m_skill(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilBlacksmith::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_position = 3;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_position(), target);
  }

  // optional int32 m_quality = 4;
  if (has_m_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_quality(), target);
  }

  // optional int32 m_probability = 5;
  if (has_m_probability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_probability(), target);
  }

  // optional string m_godpoint = 6;
  if (has_m_godpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_godpoint().data(), this->m_godpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->m_godpoint(), target);
  }

  // optional string m_starsprobability = 7;
  if (has_m_starsprobability()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_starsprobability().data(), this->m_starsprobability().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_starsprobability(), target);
  }

  // optional int32 m_gold = 8;
  if (has_m_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_gold(), target);
  }

  // optional int32 m_silver = 9;
  if (has_m_silver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_silver(), target);
  }

  // optional int32 m_paperid = 10;
  if (has_m_paperid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_paperid(), target);
  }

  // optional int32 m_papernum = 11;
  if (has_m_papernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_papernum(), target);
  }

  // optional int32 m_substituteitem = 12;
  if (has_m_substituteitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_substituteitem(), target);
  }

  // optional int32 m_number = 13;
  if (has_m_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_number(), target);
  }

  // optional int32 m_godevilskill = 14;
  if (has_m_godevilskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_godevilskill(), target);
  }

  // optional string m_skillset = 15;
  if (has_m_skillset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_skillset().data(), this->m_skillset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->m_skillset(), target);
  }

  // repeated .proto_ff.E_GodevilBlacksmithItemDesc m_item = 16;
  for (int i = 0; i < this->m_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->m_item(i), target);
  }

  // repeated .proto_ff.E_GodevilBlacksmithSkillDesc m_skill = 17;
  for (int i = 0; i < this->m_skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->m_skill(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilBlacksmith::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_position = 3;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_quality = 4;
    if (has_m_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_quality());
    }

    // optional int32 m_probability = 5;
    if (has_m_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_probability());
    }

    // optional string m_godpoint = 6;
    if (has_m_godpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_godpoint());
    }

    // optional string m_starsprobability = 7;
    if (has_m_starsprobability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_starsprobability());
    }

    // optional int32 m_gold = 8;
    if (has_m_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_gold());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_silver = 9;
    if (has_m_silver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_silver());
    }

    // optional int32 m_paperid = 10;
    if (has_m_paperid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_paperid());
    }

    // optional int32 m_papernum = 11;
    if (has_m_papernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_papernum());
    }

    // optional int32 m_substituteitem = 12;
    if (has_m_substituteitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_substituteitem());
    }

    // optional int32 m_number = 13;
    if (has_m_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_number());
    }

    // optional int32 m_godevilskill = 14;
    if (has_m_godevilskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_godevilskill());
    }

    // optional string m_skillset = 15;
    if (has_m_skillset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_skillset());
    }

  }
  // repeated .proto_ff.E_GodevilBlacksmithItemDesc m_item = 16;
  total_size += 2 * this->m_item_size();
  for (int i = 0; i < this->m_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_item(i));
  }

  // repeated .proto_ff.E_GodevilBlacksmithSkillDesc m_skill = 17;
  total_size += 2 * this->m_skill_size();
  for (int i = 0; i < this->m_skill_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_skill(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilBlacksmith::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilBlacksmith* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilBlacksmith*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilBlacksmith::MergeFrom(const E_GodevilBlacksmith& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_item_.MergeFrom(from.m_item_);
  m_skill_.MergeFrom(from.m_skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_quality()) {
      set_m_quality(from.m_quality());
    }
    if (from.has_m_probability()) {
      set_m_probability(from.m_probability());
    }
    if (from.has_m_godpoint()) {
      set_m_godpoint(from.m_godpoint());
    }
    if (from.has_m_starsprobability()) {
      set_m_starsprobability(from.m_starsprobability());
    }
    if (from.has_m_gold()) {
      set_m_gold(from.m_gold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_silver()) {
      set_m_silver(from.m_silver());
    }
    if (from.has_m_paperid()) {
      set_m_paperid(from.m_paperid());
    }
    if (from.has_m_papernum()) {
      set_m_papernum(from.m_papernum());
    }
    if (from.has_m_substituteitem()) {
      set_m_substituteitem(from.m_substituteitem());
    }
    if (from.has_m_number()) {
      set_m_number(from.m_number());
    }
    if (from.has_m_godevilskill()) {
      set_m_godevilskill(from.m_godevilskill());
    }
    if (from.has_m_skillset()) {
      set_m_skillset(from.m_skillset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilBlacksmith::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilBlacksmith::CopyFrom(const E_GodevilBlacksmith& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilBlacksmith::IsInitialized() const {

  return true;
}

void E_GodevilBlacksmith::Swap(E_GodevilBlacksmith* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_position_, other->m_position_);
    std::swap(m_quality_, other->m_quality_);
    std::swap(m_probability_, other->m_probability_);
    std::swap(m_godpoint_, other->m_godpoint_);
    std::swap(m_starsprobability_, other->m_starsprobability_);
    std::swap(m_gold_, other->m_gold_);
    std::swap(m_silver_, other->m_silver_);
    std::swap(m_paperid_, other->m_paperid_);
    std::swap(m_papernum_, other->m_papernum_);
    std::swap(m_substituteitem_, other->m_substituteitem_);
    std::swap(m_number_, other->m_number_);
    std::swap(m_godevilskill_, other->m_godevilskill_);
    std::swap(m_skillset_, other->m_skillset_);
    m_item_.Swap(&other->m_item_);
    m_skill_.Swap(&other->m_skill_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilBlacksmith::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilBlacksmith_descriptor_;
  metadata.reflection = E_GodevilBlacksmith_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilBlacksmith::kEGodevilBlacksmithListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilBlacksmith::Sheet_GodevilBlacksmith()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilBlacksmith::InitAsDefaultInstance() {
}

Sheet_GodevilBlacksmith::Sheet_GodevilBlacksmith(const Sheet_GodevilBlacksmith& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilBlacksmith::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilBlacksmith::~Sheet_GodevilBlacksmith() {
  SharedDtor();
}

void Sheet_GodevilBlacksmith::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilBlacksmith::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilBlacksmith::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilBlacksmith_descriptor_;
}

const Sheet_GodevilBlacksmith& Sheet_GodevilBlacksmith::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilBlacksmith* Sheet_GodevilBlacksmith::default_instance_ = NULL;

Sheet_GodevilBlacksmith* Sheet_GodevilBlacksmith::New() const {
  return new Sheet_GodevilBlacksmith;
}

void Sheet_GodevilBlacksmith::Clear() {
  e_godevilblacksmith_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilBlacksmith::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilBlacksmith E_GodevilBlacksmith_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilBlacksmith_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilblacksmith_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilBlacksmith_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilBlacksmith::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilBlacksmith E_GodevilBlacksmith_List = 1;
  for (int i = 0; i < this->e_godevilblacksmith_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilblacksmith_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilBlacksmith::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilBlacksmith E_GodevilBlacksmith_List = 1;
  for (int i = 0; i < this->e_godevilblacksmith_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilblacksmith_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilBlacksmith::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilBlacksmith E_GodevilBlacksmith_List = 1;
  total_size += 1 * this->e_godevilblacksmith_list_size();
  for (int i = 0; i < this->e_godevilblacksmith_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilblacksmith_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilBlacksmith::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilBlacksmith* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilBlacksmith*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilBlacksmith::MergeFrom(const Sheet_GodevilBlacksmith& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilblacksmith_list_.MergeFrom(from.e_godevilblacksmith_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilBlacksmith::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilBlacksmith::CopyFrom(const Sheet_GodevilBlacksmith& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilBlacksmith::IsInitialized() const {

  return true;
}

void Sheet_GodevilBlacksmith::Swap(Sheet_GodevilBlacksmith* other) {
  if (other != this) {
    e_godevilblacksmith_list_.Swap(&other->e_godevilblacksmith_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilBlacksmith::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilBlacksmith_descriptor_;
  metadata.reflection = Sheet_GodevilBlacksmith_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilGodevilskill::kMGodevilskillFieldNumber;
const int E_GodevilGodevilskill::kMGoldstarsFieldNumber;
#endif  // !_MSC_VER

E_GodevilGodevilskill::E_GodevilGodevilskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilGodevilskill::InitAsDefaultInstance() {
}

E_GodevilGodevilskill::E_GodevilGodevilskill(const E_GodevilGodevilskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilGodevilskill::SharedCtor() {
  _cached_size_ = 0;
  m_godevilskill_ = 0;
  m_goldstars_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilGodevilskill::~E_GodevilGodevilskill() {
  SharedDtor();
}

void E_GodevilGodevilskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilGodevilskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilGodevilskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilGodevilskill_descriptor_;
}

const E_GodevilGodevilskill& E_GodevilGodevilskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilGodevilskill* E_GodevilGodevilskill::default_instance_ = NULL;

E_GodevilGodevilskill* E_GodevilGodevilskill::New() const {
  return new E_GodevilGodevilskill;
}

void E_GodevilGodevilskill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_godevilskill_ = 0;
    m_goldstars_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilGodevilskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_godevilskill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_godevilskill_)));
          set_has_m_godevilskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_goldstars;
        break;
      }

      // optional int32 m_goldstars = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_goldstars:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goldstars_)));
          set_has_m_goldstars();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilGodevilskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_godevilskill = 1;
  if (has_m_godevilskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_godevilskill(), output);
  }

  // optional int32 m_goldstars = 2;
  if (has_m_goldstars()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_goldstars(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilGodevilskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_godevilskill = 1;
  if (has_m_godevilskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_godevilskill(), target);
  }

  // optional int32 m_goldstars = 2;
  if (has_m_goldstars()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_goldstars(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilGodevilskill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_godevilskill = 1;
    if (has_m_godevilskill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_godevilskill());
    }

    // optional int32 m_goldstars = 2;
    if (has_m_goldstars()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goldstars());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilGodevilskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilGodevilskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilGodevilskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilGodevilskill::MergeFrom(const E_GodevilGodevilskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_godevilskill()) {
      set_m_godevilskill(from.m_godevilskill());
    }
    if (from.has_m_goldstars()) {
      set_m_goldstars(from.m_goldstars());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilGodevilskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilGodevilskill::CopyFrom(const E_GodevilGodevilskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilGodevilskill::IsInitialized() const {

  return true;
}

void E_GodevilGodevilskill::Swap(E_GodevilGodevilskill* other) {
  if (other != this) {
    std::swap(m_godevilskill_, other->m_godevilskill_);
    std::swap(m_goldstars_, other->m_goldstars_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilGodevilskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilGodevilskill_descriptor_;
  metadata.reflection = E_GodevilGodevilskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilGodevilskill::kEGodevilGodevilskillListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilGodevilskill::Sheet_GodevilGodevilskill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilGodevilskill::InitAsDefaultInstance() {
}

Sheet_GodevilGodevilskill::Sheet_GodevilGodevilskill(const Sheet_GodevilGodevilskill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilGodevilskill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilGodevilskill::~Sheet_GodevilGodevilskill() {
  SharedDtor();
}

void Sheet_GodevilGodevilskill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilGodevilskill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilGodevilskill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilGodevilskill_descriptor_;
}

const Sheet_GodevilGodevilskill& Sheet_GodevilGodevilskill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilGodevilskill* Sheet_GodevilGodevilskill::default_instance_ = NULL;

Sheet_GodevilGodevilskill* Sheet_GodevilGodevilskill::New() const {
  return new Sheet_GodevilGodevilskill;
}

void Sheet_GodevilGodevilskill::Clear() {
  e_godevilgodevilskill_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilGodevilskill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilGodevilskill E_GodevilGodevilskill_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilGodevilskill_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilgodevilskill_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilGodevilskill_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilGodevilskill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilGodevilskill E_GodevilGodevilskill_List = 1;
  for (int i = 0; i < this->e_godevilgodevilskill_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilgodevilskill_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilGodevilskill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilGodevilskill E_GodevilGodevilskill_List = 1;
  for (int i = 0; i < this->e_godevilgodevilskill_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilgodevilskill_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilGodevilskill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilGodevilskill E_GodevilGodevilskill_List = 1;
  total_size += 1 * this->e_godevilgodevilskill_list_size();
  for (int i = 0; i < this->e_godevilgodevilskill_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilgodevilskill_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilGodevilskill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilGodevilskill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilGodevilskill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilGodevilskill::MergeFrom(const Sheet_GodevilGodevilskill& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilgodevilskill_list_.MergeFrom(from.e_godevilgodevilskill_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilGodevilskill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilGodevilskill::CopyFrom(const Sheet_GodevilGodevilskill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilGodevilskill::IsInitialized() const {

  return true;
}

void Sheet_GodevilGodevilskill::Swap(Sheet_GodevilGodevilskill* other) {
  if (other != this) {
    e_godevilgodevilskill_list_.Swap(&other->e_godevilgodevilskill_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilGodevilskill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilGodevilskill_descriptor_;
  metadata.reflection = Sheet_GodevilGodevilskill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_GodevilPrefixname::kMIdFieldNumber;
const int E_GodevilPrefixname::kMTypeFieldNumber;
const int E_GodevilPrefixname::kMNumberFieldNumber;
#endif  // !_MSC_VER

E_GodevilPrefixname::E_GodevilPrefixname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_GodevilPrefixname::InitAsDefaultInstance() {
}

E_GodevilPrefixname::E_GodevilPrefixname(const E_GodevilPrefixname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_GodevilPrefixname::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_GodevilPrefixname::~E_GodevilPrefixname() {
  SharedDtor();
}

void E_GodevilPrefixname::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_GodevilPrefixname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_GodevilPrefixname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_GodevilPrefixname_descriptor_;
}

const E_GodevilPrefixname& E_GodevilPrefixname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

E_GodevilPrefixname* E_GodevilPrefixname::default_instance_ = NULL;

E_GodevilPrefixname* E_GodevilPrefixname::New() const {
  return new E_GodevilPrefixname;
}

void E_GodevilPrefixname::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_GodevilPrefixname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_number;
        break;
      }

      // optional int32 m_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_number_)));
          set_has_m_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_GodevilPrefixname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_number = 3;
  if (has_m_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_GodevilPrefixname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_number = 3;
  if (has_m_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_GodevilPrefixname::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_number = 3;
    if (has_m_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_GodevilPrefixname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_GodevilPrefixname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_GodevilPrefixname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_GodevilPrefixname::MergeFrom(const E_GodevilPrefixname& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_number()) {
      set_m_number(from.m_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_GodevilPrefixname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_GodevilPrefixname::CopyFrom(const E_GodevilPrefixname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_GodevilPrefixname::IsInitialized() const {

  return true;
}

void E_GodevilPrefixname::Swap(E_GodevilPrefixname* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_number_, other->m_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_GodevilPrefixname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_GodevilPrefixname_descriptor_;
  metadata.reflection = E_GodevilPrefixname_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_GodevilPrefixname::kEGodevilPrefixnameListFieldNumber;
#endif  // !_MSC_VER

Sheet_GodevilPrefixname::Sheet_GodevilPrefixname()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_GodevilPrefixname::InitAsDefaultInstance() {
}

Sheet_GodevilPrefixname::Sheet_GodevilPrefixname(const Sheet_GodevilPrefixname& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_GodevilPrefixname::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_GodevilPrefixname::~Sheet_GodevilPrefixname() {
  SharedDtor();
}

void Sheet_GodevilPrefixname::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_GodevilPrefixname::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_GodevilPrefixname::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_GodevilPrefixname_descriptor_;
}

const Sheet_GodevilPrefixname& Sheet_GodevilPrefixname::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fGodevil_2eproto();
  return *default_instance_;
}

Sheet_GodevilPrefixname* Sheet_GodevilPrefixname::default_instance_ = NULL;

Sheet_GodevilPrefixname* Sheet_GodevilPrefixname::New() const {
  return new Sheet_GodevilPrefixname;
}

void Sheet_GodevilPrefixname::Clear() {
  e_godevilprefixname_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_GodevilPrefixname::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_GodevilPrefixname E_GodevilPrefixname_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_GodevilPrefixname_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_godevilprefixname_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_GodevilPrefixname_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_GodevilPrefixname::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_GodevilPrefixname E_GodevilPrefixname_List = 1;
  for (int i = 0; i < this->e_godevilprefixname_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_godevilprefixname_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_GodevilPrefixname::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_GodevilPrefixname E_GodevilPrefixname_List = 1;
  for (int i = 0; i < this->e_godevilprefixname_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_godevilprefixname_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_GodevilPrefixname::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_GodevilPrefixname E_GodevilPrefixname_List = 1;
  total_size += 1 * this->e_godevilprefixname_list_size();
  for (int i = 0; i < this->e_godevilprefixname_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_godevilprefixname_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_GodevilPrefixname::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_GodevilPrefixname* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_GodevilPrefixname*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_GodevilPrefixname::MergeFrom(const Sheet_GodevilPrefixname& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_godevilprefixname_list_.MergeFrom(from.e_godevilprefixname_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_GodevilPrefixname::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_GodevilPrefixname::CopyFrom(const Sheet_GodevilPrefixname& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_GodevilPrefixname::IsInitialized() const {

  return true;
}

void Sheet_GodevilPrefixname::Swap(Sheet_GodevilPrefixname* other) {
  if (other != this) {
    e_godevilprefixname_list_.Swap(&other->e_godevilprefixname_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_GodevilPrefixname::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_GodevilPrefixname_descriptor_;
  metadata.reflection = Sheet_GodevilPrefixname_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
