// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recharge.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "recharge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* rechargerechargepresentDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rechargerechargepresentDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rechargerechargechannelDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rechargerechargechannelDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* rechargerecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  rechargerecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_rechargerecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_rechargerecharge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_recharge_2eproto() {
  protobuf_AddDesc_recharge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "recharge.proto");
  GOOGLE_CHECK(file != NULL);
  rechargerechargepresentDesc_descriptor_ = file->message_type(0);
  static const int rechargerechargepresentDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerechargepresentDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerechargepresentDesc, id_),
  };
  rechargerechargepresentDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rechargerechargepresentDesc_descriptor_,
      rechargerechargepresentDesc::default_instance_,
      rechargerechargepresentDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerechargepresentDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerechargepresentDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rechargerechargepresentDesc));
  rechargerechargechannelDesc_descriptor_ = file->message_type(1);
  static const int rechargerechargechannelDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerechargechannelDesc, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerechargechannelDesc, point_),
  };
  rechargerechargechannelDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rechargerechargechannelDesc_descriptor_,
      rechargerechargechannelDesc::default_instance_,
      rechargerechargechannelDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerechargechannelDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerechargechannelDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rechargerechargechannelDesc));
  rechargerecharge_descriptor_ = file->message_type(2);
  static const int rechargerecharge_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, defaultpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, beizhu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, multipletimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, multiplereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, zuanshitype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, vipexplimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, activitycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, hactivitycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, fristpresent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, presenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, prerecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, present_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, channel_),
  };
  rechargerecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      rechargerecharge_descriptor_,
      rechargerecharge::default_instance_,
      rechargerecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(rechargerecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(rechargerecharge));
  Sheet_rechargerecharge_descriptor_ = file->message_type(3);
  static const int Sheet_rechargerecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rechargerecharge, rechargerecharge_list_),
  };
  Sheet_rechargerecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_rechargerecharge_descriptor_,
      Sheet_rechargerecharge::default_instance_,
      Sheet_rechargerecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rechargerecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_rechargerecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_rechargerecharge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_recharge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rechargerechargepresentDesc_descriptor_, &rechargerechargepresentDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rechargerechargechannelDesc_descriptor_, &rechargerechargechannelDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    rechargerecharge_descriptor_, &rechargerecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_rechargerecharge_descriptor_, &Sheet_rechargerecharge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_recharge_2eproto() {
  delete rechargerechargepresentDesc::default_instance_;
  delete rechargerechargepresentDesc_reflection_;
  delete rechargerechargechannelDesc::default_instance_;
  delete rechargerechargechannelDesc_reflection_;
  delete rechargerecharge::default_instance_;
  delete rechargerecharge_reflection_;
  delete Sheet_rechargerecharge::default_instance_;
  delete Sheet_rechargerecharge_reflection_;
}

void protobuf_AddDesc_recharge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016recharge.proto\022\010proto_ff\032\025yd_fieldopti"
    "ons.proto\"J\n\033rechargerechargepresentDesc"
    "\022\027\n\003Num\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\022\n\002Id\030\002 \001(\003B\006\302"
    "\377\024\002id\"S\n\033rechargerechargechannelDesc\022\022\n\002"
    "id\030\001 \001(\005B\006\302\377\024\002id\022 \n\005point\030\002 \001(\tB\021\302\377\024\t\350\256\241"
    "\350\264\271\347\202\271\220\301\024<\"\247\007\n\020rechargerecharge\022\022\n\002id\030\001 "
    "\001(\005B\006\302\377\024\002id\022\034\n\004name\030\002 \001(\tB\016\302\377\024\006\345\220\215\347\247\260\220\301\024"
    "P\022-\n\014defaultPoint\030\003 \001(\tB\027\302\377\024\017\351\273\230\350\256\244\350\256\241\350\264"
    "\271\347\202\271\220\301\024<\022\036\n\004type\030\004 \001(\005B\020\302\377\024\014\345\205\205\345\200\274\347\261\273\345\236\213"
    "\022\034\n\004unit\030\005 \001(\tB\016\302\377\024\006\345\215\225\344\275\215\220\301\024<\022\037\n\006beizhu"
    "\030\006 \001(\tB\017\302\377\024\006\345\244\207\346\263\250\220\301\024\310\001\022\"\n\010quantity\030\007 \001("
    "\003B\020\302\377\024\014\350\216\267\345\217\226\346\241\243\344\275\215\022*\n\007itemNum\030\010 \001(\005B\031\302\377"
    "\024\025\350\216\267\345\276\227\347\211\251\345\223\201\347\232\204\346\225\260\351\207\217\022\'\n\rmultipleTimes"
    "\030\t \001(\003B\020\302\377\024\014\351\207\215\345\244\215\346\254\241\346\225\260\022(\n\016multipleRewa"
    "rd\030\n \001(\003B\020\302\377\024\014\351\207\215\345\244\215\345\245\226\345\212\261\022%\n\013zuanshityp"
    "e\030\013 \001(\005B\020\302\377\024\014\350\216\267\345\217\226\347\261\273\345\236\213\022\035\n\006vipExp\030\014 \001("
    "\005B\r\302\377\024\tvip\347\273\217\351\252\214\022(\n\013vipExpLimit\030\r \001(\005B\023\302"
    "\377\024\017vip\347\273\217\351\252\214\351\231\220\345\210\266\022-\n\ractivityCount\030\016 \001("
    "\005B\026\302\377\024\022\350\277\220\350\220\245\346\264\273\345\212\250\350\256\241\346\225\260\0224\n\016HactivityCo"
    "unt\030\017 \001(\005B\034\302\377\024\030\351\253\230\347\272\247\350\277\220\350\220\245\346\264\273\345\212\250\350\256\241\346\225\260\022"
    "\031\n\005price\030\020 \001(\005B\n\302\377\024\006\345\224\256\344\273\267\022,\n\014fristprese"
    "nt\030\021 \001(\005B\026\302\377\024\022\351\246\226\345\205\205\350\265\240\351\200\201\346\225\260\351\207\217\022%\n\013pres"
    "enttype\030\022 \001(\005B\020\302\377\024\014\350\265\240\351\200\201\347\261\273\345\236\213\022\034\n\004icon\030"
    "\023 \001(\tB\016\302\377\024\006\345\233\276\346\240\207\220\301\024<\0221\n\013preRecharge\030\024 \001"
    "(\005B\034\302\377\024\030\346\230\257\345\220\246\345\205\201\350\256\270\351\207\221\345\210\270\345\205\205\345\200\274\022R\n\007pres"
    "ent\030\025 \003(\0132%.proto_ff.rechargerechargepre"
    "sentDescB\032\302\377\024\022\345\205\205\345\200\274\350\265\240\351\200\201\347\211\251\345\223\201\210\301\024\002\022F\n\007"
    "channel\030\026 \003(\0132%.proto_ff.rechargerecharg"
    "echannelDescB\016\302\377\024\006\346\270\240\351\201\223\210\301\024\004\"Z\n\026Sheet_re"
    "chargerecharge\022@\n\025rechargerecharge_List\030"
    "\001 \003(\0132\032.proto_ff.rechargerechargeB\005\210\301\024\320\017", 1240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "recharge.proto", &protobuf_RegisterTypes);
  rechargerechargepresentDesc::default_instance_ = new rechargerechargepresentDesc();
  rechargerechargechannelDesc::default_instance_ = new rechargerechargechannelDesc();
  rechargerecharge::default_instance_ = new rechargerecharge();
  Sheet_rechargerecharge::default_instance_ = new Sheet_rechargerecharge();
  rechargerechargepresentDesc::default_instance_->InitAsDefaultInstance();
  rechargerechargechannelDesc::default_instance_->InitAsDefaultInstance();
  rechargerecharge::default_instance_->InitAsDefaultInstance();
  Sheet_rechargerecharge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_recharge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_recharge_2eproto {
  StaticDescriptorInitializer_recharge_2eproto() {
    protobuf_AddDesc_recharge_2eproto();
  }
} static_descriptor_initializer_recharge_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int rechargerechargepresentDesc::kNumFieldNumber;
const int rechargerechargepresentDesc::kIdFieldNumber;
#endif  // !_MSC_VER

rechargerechargepresentDesc::rechargerechargepresentDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rechargerechargepresentDesc::InitAsDefaultInstance() {
}

rechargerechargepresentDesc::rechargerechargepresentDesc(const rechargerechargepresentDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rechargerechargepresentDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rechargerechargepresentDesc::~rechargerechargepresentDesc() {
  SharedDtor();
}

void rechargerechargepresentDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void rechargerechargepresentDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rechargerechargepresentDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rechargerechargepresentDesc_descriptor_;
}

const rechargerechargepresentDesc& rechargerechargepresentDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2eproto();
  return *default_instance_;
}

rechargerechargepresentDesc* rechargerechargepresentDesc::default_instance_ = NULL;

rechargerechargepresentDesc* rechargerechargepresentDesc::New() const {
  return new rechargerechargepresentDesc;
}

void rechargerechargepresentDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rechargerechargepresentDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional int64 Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rechargerechargepresentDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rechargerechargepresentDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rechargerechargepresentDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rechargerechargepresentDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rechargerechargepresentDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rechargerechargepresentDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rechargerechargepresentDesc::MergeFrom(const rechargerechargepresentDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rechargerechargepresentDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rechargerechargepresentDesc::CopyFrom(const rechargerechargepresentDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rechargerechargepresentDesc::IsInitialized() const {

  return true;
}

void rechargerechargepresentDesc::Swap(rechargerechargepresentDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rechargerechargepresentDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rechargerechargepresentDesc_descriptor_;
  metadata.reflection = rechargerechargepresentDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rechargerechargechannelDesc::kIdFieldNumber;
const int rechargerechargechannelDesc::kPointFieldNumber;
#endif  // !_MSC_VER

rechargerechargechannelDesc::rechargerechargechannelDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rechargerechargechannelDesc::InitAsDefaultInstance() {
}

rechargerechargechannelDesc::rechargerechargechannelDesc(const rechargerechargechannelDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rechargerechargechannelDesc::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  point_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rechargerechargechannelDesc::~rechargerechargechannelDesc() {
  SharedDtor();
}

void rechargerechargechannelDesc::SharedDtor() {
  if (point_ != &::google::protobuf::internal::kEmptyString) {
    delete point_;
  }
  if (this != default_instance_) {
  }
}

void rechargerechargechannelDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rechargerechargechannelDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rechargerechargechannelDesc_descriptor_;
}

const rechargerechargechannelDesc& rechargerechargechannelDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2eproto();
  return *default_instance_;
}

rechargerechargechannelDesc* rechargerechargechannelDesc::default_instance_ = NULL;

rechargerechargechannelDesc* rechargerechargechannelDesc::New() const {
  return new rechargerechargechannelDesc;
}

void rechargerechargechannelDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_point()) {
      if (point_ != &::google::protobuf::internal::kEmptyString) {
        point_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rechargerechargechannelDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_point;
        break;
      }

      // optional string point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_point()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->point().data(), this->point().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rechargerechargechannelDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->point().data(), this->point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->point(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rechargerechargechannelDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->point().data(), this->point().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->point(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rechargerechargechannelDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->point());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rechargerechargechannelDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rechargerechargechannelDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rechargerechargechannelDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rechargerechargechannelDesc::MergeFrom(const rechargerechargechannelDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rechargerechargechannelDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rechargerechargechannelDesc::CopyFrom(const rechargerechargechannelDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rechargerechargechannelDesc::IsInitialized() const {

  return true;
}

void rechargerechargechannelDesc::Swap(rechargerechargechannelDesc* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(point_, other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rechargerechargechannelDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rechargerechargechannelDesc_descriptor_;
  metadata.reflection = rechargerechargechannelDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int rechargerecharge::kIdFieldNumber;
const int rechargerecharge::kNameFieldNumber;
const int rechargerecharge::kDefaultPointFieldNumber;
const int rechargerecharge::kTypeFieldNumber;
const int rechargerecharge::kUnitFieldNumber;
const int rechargerecharge::kBeizhuFieldNumber;
const int rechargerecharge::kQuantityFieldNumber;
const int rechargerecharge::kItemNumFieldNumber;
const int rechargerecharge::kMultipleTimesFieldNumber;
const int rechargerecharge::kMultipleRewardFieldNumber;
const int rechargerecharge::kZuanshitypeFieldNumber;
const int rechargerecharge::kVipExpFieldNumber;
const int rechargerecharge::kVipExpLimitFieldNumber;
const int rechargerecharge::kActivityCountFieldNumber;
const int rechargerecharge::kHactivityCountFieldNumber;
const int rechargerecharge::kPriceFieldNumber;
const int rechargerecharge::kFristpresentFieldNumber;
const int rechargerecharge::kPresenttypeFieldNumber;
const int rechargerecharge::kIconFieldNumber;
const int rechargerecharge::kPreRechargeFieldNumber;
const int rechargerecharge::kPresentFieldNumber;
const int rechargerecharge::kChannelFieldNumber;
#endif  // !_MSC_VER

rechargerecharge::rechargerecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void rechargerecharge::InitAsDefaultInstance() {
}

rechargerecharge::rechargerecharge(const rechargerecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void rechargerecharge::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  defaultpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beizhu_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quantity_ = GOOGLE_LONGLONG(0);
  itemnum_ = 0;
  multipletimes_ = GOOGLE_LONGLONG(0);
  multiplereward_ = GOOGLE_LONGLONG(0);
  zuanshitype_ = 0;
  vipexp_ = 0;
  vipexplimit_ = 0;
  activitycount_ = 0;
  hactivitycount_ = 0;
  price_ = 0;
  fristpresent_ = 0;
  presenttype_ = 0;
  icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prerecharge_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

rechargerecharge::~rechargerecharge() {
  SharedDtor();
}

void rechargerecharge::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (defaultpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete defaultpoint_;
  }
  if (unit_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_;
  }
  if (beizhu_ != &::google::protobuf::internal::kEmptyString) {
    delete beizhu_;
  }
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (this != default_instance_) {
  }
}

void rechargerecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* rechargerecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return rechargerecharge_descriptor_;
}

const rechargerecharge& rechargerecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2eproto();
  return *default_instance_;
}

rechargerecharge* rechargerecharge::default_instance_ = NULL;

rechargerecharge* rechargerecharge::New() const {
  return new rechargerecharge;
}

void rechargerecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_defaultpoint()) {
      if (defaultpoint_ != &::google::protobuf::internal::kEmptyString) {
        defaultpoint_->clear();
      }
    }
    type_ = 0;
    if (has_unit()) {
      if (unit_ != &::google::protobuf::internal::kEmptyString) {
        unit_->clear();
      }
    }
    if (has_beizhu()) {
      if (beizhu_ != &::google::protobuf::internal::kEmptyString) {
        beizhu_->clear();
      }
    }
    quantity_ = GOOGLE_LONGLONG(0);
    itemnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    multipletimes_ = GOOGLE_LONGLONG(0);
    multiplereward_ = GOOGLE_LONGLONG(0);
    zuanshitype_ = 0;
    vipexp_ = 0;
    vipexplimit_ = 0;
    activitycount_ = 0;
    hactivitycount_ = 0;
    price_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fristpresent_ = 0;
    presenttype_ = 0;
    if (has_icon()) {
      if (icon_ != &::google::protobuf::internal::kEmptyString) {
        icon_->clear();
      }
    }
    prerecharge_ = 0;
  }
  present_.Clear();
  channel_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool rechargerecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_defaultPoint;
        break;
      }

      // optional string defaultPoint = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_defaultPoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defaultpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->defaultpoint().data(), this->defaultpoint().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_unit;
        break;
      }

      // optional string unit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit().data(), this->unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_beizhu;
        break;
      }

      // optional string beizhu = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beizhu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beizhu()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beizhu().data(), this->beizhu().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quantity;
        break;
      }

      // optional int64 quantity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_multipleTimes;
        break;
      }

      // optional int64 multipleTimes = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multipleTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &multipletimes_)));
          set_has_multipletimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_multipleReward;
        break;
      }

      // optional int64 multipleReward = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multipleReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &multiplereward_)));
          set_has_multiplereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_zuanshitype;
        break;
      }

      // optional int32 zuanshitype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zuanshitype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zuanshitype_)));
          set_has_zuanshitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_vipExp;
        break;
      }

      // optional int32 vipExp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_vipExpLimit;
        break;
      }

      // optional int32 vipExpLimit = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipExpLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexplimit_)));
          set_has_vipexplimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_activityCount;
        break;
      }

      // optional int32 activityCount = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activitycount_)));
          set_has_activitycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_HactivityCount;
        break;
      }

      // optional int32 HactivityCount = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HactivityCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hactivitycount_)));
          set_has_hactivitycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_price;
        break;
      }

      // optional int32 price = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_fristpresent;
        break;
      }

      // optional int32 fristpresent = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fristpresent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fristpresent_)));
          set_has_fristpresent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_presenttype;
        break;
      }

      // optional int32 presenttype = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_presenttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &presenttype_)));
          set_has_presenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_icon;
        break;
      }

      // optional string icon = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_icon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->icon().data(), this->icon().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_preRecharge;
        break;
      }

      // optional int32 preRecharge = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prerecharge_)));
          set_has_prerecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_present;
        break;
      }

      // repeated .proto_ff.rechargerechargepresentDesc present = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_present:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_present()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_present;
        if (input->ExpectTag(178)) goto parse_channel;
        break;
      }

      // repeated .proto_ff.rechargerechargechannelDesc channel = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_channel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_channel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_channel;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void rechargerecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string defaultPoint = 3;
  if (has_defaultpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defaultpoint().data(), this->defaultpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->defaultpoint(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional string unit = 5;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->unit(), output);
  }

  // optional string beizhu = 6;
  if (has_beizhu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beizhu().data(), this->beizhu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->beizhu(), output);
  }

  // optional int64 quantity = 7;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->quantity(), output);
  }

  // optional int32 itemNum = 8;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->itemnum(), output);
  }

  // optional int64 multipleTimes = 9;
  if (has_multipletimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->multipletimes(), output);
  }

  // optional int64 multipleReward = 10;
  if (has_multiplereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->multiplereward(), output);
  }

  // optional int32 zuanshitype = 11;
  if (has_zuanshitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->zuanshitype(), output);
  }

  // optional int32 vipExp = 12;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->vipexp(), output);
  }

  // optional int32 vipExpLimit = 13;
  if (has_vipexplimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->vipexplimit(), output);
  }

  // optional int32 activityCount = 14;
  if (has_activitycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->activitycount(), output);
  }

  // optional int32 HactivityCount = 15;
  if (has_hactivitycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->hactivitycount(), output);
  }

  // optional int32 price = 16;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->price(), output);
  }

  // optional int32 fristpresent = 17;
  if (has_fristpresent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->fristpresent(), output);
  }

  // optional int32 presenttype = 18;
  if (has_presenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->presenttype(), output);
  }

  // optional string icon = 19;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->icon(), output);
  }

  // optional int32 preRecharge = 20;
  if (has_prerecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->prerecharge(), output);
  }

  // repeated .proto_ff.rechargerechargepresentDesc present = 21;
  for (int i = 0; i < this->present_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->present(i), output);
  }

  // repeated .proto_ff.rechargerechargechannelDesc channel = 22;
  for (int i = 0; i < this->channel_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->channel(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* rechargerecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string defaultPoint = 3;
  if (has_defaultpoint()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->defaultpoint().data(), this->defaultpoint().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->defaultpoint(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional string unit = 5;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit().data(), this->unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->unit(), target);
  }

  // optional string beizhu = 6;
  if (has_beizhu()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beizhu().data(), this->beizhu().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->beizhu(), target);
  }

  // optional int64 quantity = 7;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->quantity(), target);
  }

  // optional int32 itemNum = 8;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->itemnum(), target);
  }

  // optional int64 multipleTimes = 9;
  if (has_multipletimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->multipletimes(), target);
  }

  // optional int64 multipleReward = 10;
  if (has_multiplereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->multiplereward(), target);
  }

  // optional int32 zuanshitype = 11;
  if (has_zuanshitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->zuanshitype(), target);
  }

  // optional int32 vipExp = 12;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->vipexp(), target);
  }

  // optional int32 vipExpLimit = 13;
  if (has_vipexplimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->vipexplimit(), target);
  }

  // optional int32 activityCount = 14;
  if (has_activitycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->activitycount(), target);
  }

  // optional int32 HactivityCount = 15;
  if (has_hactivitycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->hactivitycount(), target);
  }

  // optional int32 price = 16;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->price(), target);
  }

  // optional int32 fristpresent = 17;
  if (has_fristpresent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->fristpresent(), target);
  }

  // optional int32 presenttype = 18;
  if (has_presenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->presenttype(), target);
  }

  // optional string icon = 19;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->icon().data(), this->icon().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->icon(), target);
  }

  // optional int32 preRecharge = 20;
  if (has_prerecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->prerecharge(), target);
  }

  // repeated .proto_ff.rechargerechargepresentDesc present = 21;
  for (int i = 0; i < this->present_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->present(i), target);
  }

  // repeated .proto_ff.rechargerechargechannelDesc channel = 22;
  for (int i = 0; i < this->channel_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->channel(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int rechargerecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string defaultPoint = 3;
    if (has_defaultpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defaultpoint());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string unit = 5;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit());
    }

    // optional string beizhu = 6;
    if (has_beizhu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beizhu());
    }

    // optional int64 quantity = 7;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->quantity());
    }

    // optional int32 itemNum = 8;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 multipleTimes = 9;
    if (has_multipletimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->multipletimes());
    }

    // optional int64 multipleReward = 10;
    if (has_multiplereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->multiplereward());
    }

    // optional int32 zuanshitype = 11;
    if (has_zuanshitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zuanshitype());
    }

    // optional int32 vipExp = 12;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexp());
    }

    // optional int32 vipExpLimit = 13;
    if (has_vipexplimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexplimit());
    }

    // optional int32 activityCount = 14;
    if (has_activitycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitycount());
    }

    // optional int32 HactivityCount = 15;
    if (has_hactivitycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hactivitycount());
    }

    // optional int32 price = 16;
    if (has_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 fristpresent = 17;
    if (has_fristpresent()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fristpresent());
    }

    // optional int32 presenttype = 18;
    if (has_presenttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->presenttype());
    }

    // optional string icon = 19;
    if (has_icon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon());
    }

    // optional int32 preRecharge = 20;
    if (has_prerecharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prerecharge());
    }

  }
  // repeated .proto_ff.rechargerechargepresentDesc present = 21;
  total_size += 2 * this->present_size();
  for (int i = 0; i < this->present_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->present(i));
  }

  // repeated .proto_ff.rechargerechargechannelDesc channel = 22;
  total_size += 2 * this->channel_size();
  for (int i = 0; i < this->channel_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->channel(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void rechargerecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const rechargerecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const rechargerecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void rechargerecharge::MergeFrom(const rechargerecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  present_.MergeFrom(from.present_);
  channel_.MergeFrom(from.channel_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_defaultpoint()) {
      set_defaultpoint(from.defaultpoint());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_beizhu()) {
      set_beizhu(from.beizhu());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_multipletimes()) {
      set_multipletimes(from.multipletimes());
    }
    if (from.has_multiplereward()) {
      set_multiplereward(from.multiplereward());
    }
    if (from.has_zuanshitype()) {
      set_zuanshitype(from.zuanshitype());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_vipexplimit()) {
      set_vipexplimit(from.vipexplimit());
    }
    if (from.has_activitycount()) {
      set_activitycount(from.activitycount());
    }
    if (from.has_hactivitycount()) {
      set_hactivitycount(from.hactivitycount());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fristpresent()) {
      set_fristpresent(from.fristpresent());
    }
    if (from.has_presenttype()) {
      set_presenttype(from.presenttype());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_prerecharge()) {
      set_prerecharge(from.prerecharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void rechargerecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void rechargerecharge::CopyFrom(const rechargerecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool rechargerecharge::IsInitialized() const {

  return true;
}

void rechargerecharge::Swap(rechargerecharge* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(defaultpoint_, other->defaultpoint_);
    std::swap(type_, other->type_);
    std::swap(unit_, other->unit_);
    std::swap(beizhu_, other->beizhu_);
    std::swap(quantity_, other->quantity_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(multipletimes_, other->multipletimes_);
    std::swap(multiplereward_, other->multiplereward_);
    std::swap(zuanshitype_, other->zuanshitype_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(vipexplimit_, other->vipexplimit_);
    std::swap(activitycount_, other->activitycount_);
    std::swap(hactivitycount_, other->hactivitycount_);
    std::swap(price_, other->price_);
    std::swap(fristpresent_, other->fristpresent_);
    std::swap(presenttype_, other->presenttype_);
    std::swap(icon_, other->icon_);
    std::swap(prerecharge_, other->prerecharge_);
    present_.Swap(&other->present_);
    channel_.Swap(&other->channel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata rechargerecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = rechargerecharge_descriptor_;
  metadata.reflection = rechargerecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_rechargerecharge::kRechargerechargeListFieldNumber;
#endif  // !_MSC_VER

Sheet_rechargerecharge::Sheet_rechargerecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_rechargerecharge::InitAsDefaultInstance() {
}

Sheet_rechargerecharge::Sheet_rechargerecharge(const Sheet_rechargerecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_rechargerecharge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_rechargerecharge::~Sheet_rechargerecharge() {
  SharedDtor();
}

void Sheet_rechargerecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_rechargerecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_rechargerecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_rechargerecharge_descriptor_;
}

const Sheet_rechargerecharge& Sheet_rechargerecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_recharge_2eproto();
  return *default_instance_;
}

Sheet_rechargerecharge* Sheet_rechargerecharge::default_instance_ = NULL;

Sheet_rechargerecharge* Sheet_rechargerecharge::New() const {
  return new Sheet_rechargerecharge;
}

void Sheet_rechargerecharge::Clear() {
  rechargerecharge_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_rechargerecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.rechargerecharge rechargerecharge_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rechargerecharge_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rechargerecharge_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rechargerecharge_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_rechargerecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.rechargerecharge rechargerecharge_List = 1;
  for (int i = 0; i < this->rechargerecharge_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rechargerecharge_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_rechargerecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.rechargerecharge rechargerecharge_List = 1;
  for (int i = 0; i < this->rechargerecharge_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rechargerecharge_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_rechargerecharge::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.rechargerecharge rechargerecharge_List = 1;
  total_size += 1 * this->rechargerecharge_list_size();
  for (int i = 0; i < this->rechargerecharge_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rechargerecharge_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_rechargerecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_rechargerecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_rechargerecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_rechargerecharge::MergeFrom(const Sheet_rechargerecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  rechargerecharge_list_.MergeFrom(from.rechargerecharge_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_rechargerecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_rechargerecharge::CopyFrom(const Sheet_rechargerecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_rechargerecharge::IsInitialized() const {

  return true;
}

void Sheet_rechargerecharge::Swap(Sheet_rechargerecharge* other) {
  if (other != this) {
    rechargerecharge_list_.Swap(&other->rechargerecharge_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_rechargerecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_rechargerecharge_descriptor_;
  metadata.reflection = Sheet_rechargerecharge_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
