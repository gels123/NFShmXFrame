// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Ancient.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Ancient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* NotifyAncient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyAncient_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientUnlockNumReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientUnlockNumReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientUnlockNumRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientUnlockNumRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientUnlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientUnlockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientUnlockRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientUnlockRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientLvReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientLvReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientLvRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientLvRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientStarUnlcokReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientStarUnlcokReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientStarUnlcokRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientStarUnlcokRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientBlessReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientBlessReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientBlessRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientBlessRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Ancient_2eproto() {
  protobuf_AddDesc_Ancient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Ancient.proto");
  GOOGLE_CHECK(file != NULL);
  NotifyAncient_descriptor_ = file->message_type(0);
  static const int NotifyAncient_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAncient, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAncient, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAncient, unlock_star_id_),
  };
  NotifyAncient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyAncient_descriptor_,
      NotifyAncient::default_instance_,
      NotifyAncient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAncient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyAncient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyAncient));
  AncientUnlockNumReq_descriptor_ = file->message_type(1);
  static const int AncientUnlockNumReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockNumReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockNumReq, nums_index_),
  };
  AncientUnlockNumReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientUnlockNumReq_descriptor_,
      AncientUnlockNumReq::default_instance_,
      AncientUnlockNumReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockNumReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockNumReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientUnlockNumReq));
  AncientUnlockNumRsp_descriptor_ = file->message_type(2);
  static const int AncientUnlockNumRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockNumRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockNumRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockNumRsp, nums_index_),
  };
  AncientUnlockNumRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientUnlockNumRsp_descriptor_,
      AncientUnlockNumRsp::default_instance_,
      AncientUnlockNumRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockNumRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockNumRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientUnlockNumRsp));
  AncientUnlockReq_descriptor_ = file->message_type(3);
  static const int AncientUnlockReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockReq, id_),
  };
  AncientUnlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientUnlockReq_descriptor_,
      AncientUnlockReq::default_instance_,
      AncientUnlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientUnlockReq));
  AncientUnlockRsp_descriptor_ = file->message_type(4);
  static const int AncientUnlockRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockRsp, id_),
  };
  AncientUnlockRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientUnlockRsp_descriptor_,
      AncientUnlockRsp::default_instance_,
      AncientUnlockRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientUnlockRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientUnlockRsp));
  AncientLvReq_descriptor_ = file->message_type(5);
  static const int AncientLvReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvReq, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvReq, mallbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvReq, bag_pos_),
  };
  AncientLvReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientLvReq_descriptor_,
      AncientLvReq::default_instance_,
      AncientLvReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientLvReq));
  AncientLvRsp_descriptor_ = file->message_type(6);
  static const int AncientLvRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvRsp, mallbuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvRsp, bag_pos_),
  };
  AncientLvRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientLvRsp_descriptor_,
      AncientLvRsp::default_instance_,
      AncientLvRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientLvRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientLvRsp));
  AncientStarUnlcokReq_descriptor_ = file->message_type(7);
  static const int AncientStarUnlcokReq_offsets_[1] = {
  };
  AncientStarUnlcokReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientStarUnlcokReq_descriptor_,
      AncientStarUnlcokReq::default_instance_,
      AncientStarUnlcokReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientStarUnlcokReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientStarUnlcokReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientStarUnlcokReq));
  AncientStarUnlcokRsp_descriptor_ = file->message_type(8);
  static const int AncientStarUnlcokRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientStarUnlcokRsp, ret_),
  };
  AncientStarUnlcokRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientStarUnlcokRsp_descriptor_,
      AncientStarUnlcokRsp::default_instance_,
      AncientStarUnlcokRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientStarUnlcokRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientStarUnlcokRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientStarUnlcokRsp));
  AncientBlessReq_descriptor_ = file->message_type(9);
  static const int AncientBlessReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientBlessReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientBlessReq, slot_),
  };
  AncientBlessReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientBlessReq_descriptor_,
      AncientBlessReq::default_instance_,
      AncientBlessReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientBlessReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientBlessReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientBlessReq));
  AncientBlessRsp_descriptor_ = file->message_type(10);
  static const int AncientBlessRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientBlessRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientBlessRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientBlessRsp, slot_),
  };
  AncientBlessRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientBlessRsp_descriptor_,
      AncientBlessRsp::default_instance_,
      AncientBlessRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientBlessRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientBlessRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientBlessRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Ancient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyAncient_descriptor_, &NotifyAncient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientUnlockNumReq_descriptor_, &AncientUnlockNumReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientUnlockNumRsp_descriptor_, &AncientUnlockNumRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientUnlockReq_descriptor_, &AncientUnlockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientUnlockRsp_descriptor_, &AncientUnlockRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientLvReq_descriptor_, &AncientLvReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientLvRsp_descriptor_, &AncientLvRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientStarUnlcokReq_descriptor_, &AncientStarUnlcokReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientStarUnlcokRsp_descriptor_, &AncientStarUnlcokRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientBlessReq_descriptor_, &AncientBlessReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientBlessRsp_descriptor_, &AncientBlessRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Ancient_2eproto() {
  delete NotifyAncient::default_instance_;
  delete NotifyAncient_reflection_;
  delete AncientUnlockNumReq::default_instance_;
  delete AncientUnlockNumReq_reflection_;
  delete AncientUnlockNumRsp::default_instance_;
  delete AncientUnlockNumRsp_reflection_;
  delete AncientUnlockReq::default_instance_;
  delete AncientUnlockReq_reflection_;
  delete AncientUnlockRsp::default_instance_;
  delete AncientUnlockRsp_reflection_;
  delete AncientLvReq::default_instance_;
  delete AncientLvReq_reflection_;
  delete AncientLvRsp::default_instance_;
  delete AncientLvRsp_reflection_;
  delete AncientStarUnlcokReq::default_instance_;
  delete AncientStarUnlcokReq_reflection_;
  delete AncientStarUnlcokRsp::default_instance_;
  delete AncientStarUnlcokRsp_reflection_;
  delete AncientBlessReq::default_instance_;
  delete AncientBlessReq_reflection_;
  delete AncientBlessRsp::default_instance_;
  delete AncientBlessRsp_reflection_;
}

void protobuf_AddDesc_Ancient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rAncient.proto\022\010proto_ff\032\tCom.proto\032\017Co"
    "mDefine.proto\"[\n\rNotifyAncient\022\014\n\004type\030\001"
    " \001(\005\022$\n\005infos\030\002 \003(\0132\025.proto_ff.AncientIn"
    "fo\022\026\n\016unlock_star_id\030\003 \001(\005\"5\n\023AncientUnl"
    "ockNumReq\022\n\n\002id\030\001 \001(\005\022\022\n\nnums_index\030\002 \001("
    "\005\"B\n\023AncientUnlockNumRsp\022\013\n\003ret\030\001 \001(\005\022\n\n"
    "\002id\030\002 \001(\005\022\022\n\nnums_index\030\003 \001(\005\"\036\n\020Ancient"
    "UnlockReq\022\n\n\002id\030\001 \001(\005\"+\n\020AncientUnlockRs"
    "p\022\013\n\003ret\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\"J\n\014AncientLvR"
    "eq\022\n\n\002id\030\001 \001(\005\022\014\n\004slot\030\002 \001(\005\022\017\n\007mallBuy\030"
    "\003 \001(\005\022\017\n\007bag_pos\030\004 \003(\005\"I\n\014AncientLvRsp\022\013"
    "\n\003ret\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\017\n\007mallBuy\030\003 \001(\005"
    "\022\017\n\007bag_pos\030\004 \003(\005\"\026\n\024AncientStarUnlcokRe"
    "q\"#\n\024AncientStarUnlcokRsp\022\013\n\003ret\030\001 \001(\005\"+"
    "\n\017AncientBlessReq\022\n\n\002id\030\001 \001(\005\022\014\n\004slot\030\002 "
    "\001(\005\"8\n\017AncientBlessRsp\022\013\n\003ret\030\001 \001(\005\022\n\n\002i"
    "d\030\002 \001(\005\022\014\n\004slot\030\003 \001(\005", 661);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Ancient.proto", &protobuf_RegisterTypes);
  NotifyAncient::default_instance_ = new NotifyAncient();
  AncientUnlockNumReq::default_instance_ = new AncientUnlockNumReq();
  AncientUnlockNumRsp::default_instance_ = new AncientUnlockNumRsp();
  AncientUnlockReq::default_instance_ = new AncientUnlockReq();
  AncientUnlockRsp::default_instance_ = new AncientUnlockRsp();
  AncientLvReq::default_instance_ = new AncientLvReq();
  AncientLvRsp::default_instance_ = new AncientLvRsp();
  AncientStarUnlcokReq::default_instance_ = new AncientStarUnlcokReq();
  AncientStarUnlcokRsp::default_instance_ = new AncientStarUnlcokRsp();
  AncientBlessReq::default_instance_ = new AncientBlessReq();
  AncientBlessRsp::default_instance_ = new AncientBlessRsp();
  NotifyAncient::default_instance_->InitAsDefaultInstance();
  AncientUnlockNumReq::default_instance_->InitAsDefaultInstance();
  AncientUnlockNumRsp::default_instance_->InitAsDefaultInstance();
  AncientUnlockReq::default_instance_->InitAsDefaultInstance();
  AncientUnlockRsp::default_instance_->InitAsDefaultInstance();
  AncientLvReq::default_instance_->InitAsDefaultInstance();
  AncientLvRsp::default_instance_->InitAsDefaultInstance();
  AncientStarUnlcokReq::default_instance_->InitAsDefaultInstance();
  AncientStarUnlcokRsp::default_instance_->InitAsDefaultInstance();
  AncientBlessReq::default_instance_->InitAsDefaultInstance();
  AncientBlessRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Ancient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Ancient_2eproto {
  StaticDescriptorInitializer_Ancient_2eproto() {
    protobuf_AddDesc_Ancient_2eproto();
  }
} static_descriptor_initializer_Ancient_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NotifyAncient::kTypeFieldNumber;
const int NotifyAncient::kInfosFieldNumber;
const int NotifyAncient::kUnlockStarIdFieldNumber;
#endif  // !_MSC_VER

NotifyAncient::NotifyAncient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyAncient::InitAsDefaultInstance() {
}

NotifyAncient::NotifyAncient(const NotifyAncient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyAncient::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  unlock_star_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyAncient::~NotifyAncient() {
  SharedDtor();
}

void NotifyAncient::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyAncient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyAncient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyAncient_descriptor_;
}

const NotifyAncient& NotifyAncient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

NotifyAncient* NotifyAncient::default_instance_ = NULL;

NotifyAncient* NotifyAncient::New() const {
  return new NotifyAncient;
}

void NotifyAncient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    unlock_star_id_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyAncient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.AncientInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectTag(24)) goto parse_unlock_star_id;
        break;
      }

      // optional int32 unlock_star_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock_star_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_star_id_)));
          set_has_unlock_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyAncient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.AncientInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  // optional int32 unlock_star_id = 3;
  if (has_unlock_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->unlock_star_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyAncient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.AncientInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  // optional int32 unlock_star_id = 3;
  if (has_unlock_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->unlock_star_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyAncient::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 unlock_star_id = 3;
    if (has_unlock_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock_star_id());
    }

  }
  // repeated .proto_ff.AncientInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyAncient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyAncient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyAncient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyAncient::MergeFrom(const NotifyAncient& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_unlock_star_id()) {
      set_unlock_star_id(from.unlock_star_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyAncient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyAncient::CopyFrom(const NotifyAncient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyAncient::IsInitialized() const {

  return true;
}

void NotifyAncient::Swap(NotifyAncient* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    infos_.Swap(&other->infos_);
    std::swap(unlock_star_id_, other->unlock_star_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyAncient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyAncient_descriptor_;
  metadata.reflection = NotifyAncient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientUnlockNumReq::kIdFieldNumber;
const int AncientUnlockNumReq::kNumsIndexFieldNumber;
#endif  // !_MSC_VER

AncientUnlockNumReq::AncientUnlockNumReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientUnlockNumReq::InitAsDefaultInstance() {
}

AncientUnlockNumReq::AncientUnlockNumReq(const AncientUnlockNumReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientUnlockNumReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  nums_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientUnlockNumReq::~AncientUnlockNumReq() {
  SharedDtor();
}

void AncientUnlockNumReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientUnlockNumReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientUnlockNumReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientUnlockNumReq_descriptor_;
}

const AncientUnlockNumReq& AncientUnlockNumReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientUnlockNumReq* AncientUnlockNumReq::default_instance_ = NULL;

AncientUnlockNumReq* AncientUnlockNumReq::New() const {
  return new AncientUnlockNumReq;
}

void AncientUnlockNumReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    nums_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientUnlockNumReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nums_index;
        break;
      }

      // optional int32 nums_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nums_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nums_index_)));
          set_has_nums_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientUnlockNumReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 nums_index = 2;
  if (has_nums_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nums_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientUnlockNumReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 nums_index = 2;
  if (has_nums_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nums_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientUnlockNumReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 nums_index = 2;
    if (has_nums_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nums_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientUnlockNumReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientUnlockNumReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientUnlockNumReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientUnlockNumReq::MergeFrom(const AncientUnlockNumReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nums_index()) {
      set_nums_index(from.nums_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientUnlockNumReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientUnlockNumReq::CopyFrom(const AncientUnlockNumReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientUnlockNumReq::IsInitialized() const {

  return true;
}

void AncientUnlockNumReq::Swap(AncientUnlockNumReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nums_index_, other->nums_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientUnlockNumReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientUnlockNumReq_descriptor_;
  metadata.reflection = AncientUnlockNumReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientUnlockNumRsp::kRetFieldNumber;
const int AncientUnlockNumRsp::kIdFieldNumber;
const int AncientUnlockNumRsp::kNumsIndexFieldNumber;
#endif  // !_MSC_VER

AncientUnlockNumRsp::AncientUnlockNumRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientUnlockNumRsp::InitAsDefaultInstance() {
}

AncientUnlockNumRsp::AncientUnlockNumRsp(const AncientUnlockNumRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientUnlockNumRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  nums_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientUnlockNumRsp::~AncientUnlockNumRsp() {
  SharedDtor();
}

void AncientUnlockNumRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientUnlockNumRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientUnlockNumRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientUnlockNumRsp_descriptor_;
}

const AncientUnlockNumRsp& AncientUnlockNumRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientUnlockNumRsp* AncientUnlockNumRsp::default_instance_ = NULL;

AncientUnlockNumRsp* AncientUnlockNumRsp::New() const {
  return new AncientUnlockNumRsp;
}

void AncientUnlockNumRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
    nums_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientUnlockNumRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nums_index;
        break;
      }

      // optional int32 nums_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nums_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nums_index_)));
          set_has_nums_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientUnlockNumRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 nums_index = 3;
  if (has_nums_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nums_index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientUnlockNumRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 nums_index = 3;
  if (has_nums_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nums_index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientUnlockNumRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 nums_index = 3;
    if (has_nums_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nums_index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientUnlockNumRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientUnlockNumRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientUnlockNumRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientUnlockNumRsp::MergeFrom(const AncientUnlockNumRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nums_index()) {
      set_nums_index(from.nums_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientUnlockNumRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientUnlockNumRsp::CopyFrom(const AncientUnlockNumRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientUnlockNumRsp::IsInitialized() const {

  return true;
}

void AncientUnlockNumRsp::Swap(AncientUnlockNumRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(nums_index_, other->nums_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientUnlockNumRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientUnlockNumRsp_descriptor_;
  metadata.reflection = AncientUnlockNumRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientUnlockReq::kIdFieldNumber;
#endif  // !_MSC_VER

AncientUnlockReq::AncientUnlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientUnlockReq::InitAsDefaultInstance() {
}

AncientUnlockReq::AncientUnlockReq(const AncientUnlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientUnlockReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientUnlockReq::~AncientUnlockReq() {
  SharedDtor();
}

void AncientUnlockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientUnlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientUnlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientUnlockReq_descriptor_;
}

const AncientUnlockReq& AncientUnlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientUnlockReq* AncientUnlockReq::default_instance_ = NULL;

AncientUnlockReq* AncientUnlockReq::New() const {
  return new AncientUnlockReq;
}

void AncientUnlockReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientUnlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientUnlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientUnlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientUnlockReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientUnlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientUnlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientUnlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientUnlockReq::MergeFrom(const AncientUnlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientUnlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientUnlockReq::CopyFrom(const AncientUnlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientUnlockReq::IsInitialized() const {

  return true;
}

void AncientUnlockReq::Swap(AncientUnlockReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientUnlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientUnlockReq_descriptor_;
  metadata.reflection = AncientUnlockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientUnlockRsp::kRetFieldNumber;
const int AncientUnlockRsp::kIdFieldNumber;
#endif  // !_MSC_VER

AncientUnlockRsp::AncientUnlockRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientUnlockRsp::InitAsDefaultInstance() {
}

AncientUnlockRsp::AncientUnlockRsp(const AncientUnlockRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientUnlockRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientUnlockRsp::~AncientUnlockRsp() {
  SharedDtor();
}

void AncientUnlockRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientUnlockRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientUnlockRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientUnlockRsp_descriptor_;
}

const AncientUnlockRsp& AncientUnlockRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientUnlockRsp* AncientUnlockRsp::default_instance_ = NULL;

AncientUnlockRsp* AncientUnlockRsp::New() const {
  return new AncientUnlockRsp;
}

void AncientUnlockRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientUnlockRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientUnlockRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientUnlockRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientUnlockRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientUnlockRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientUnlockRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientUnlockRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientUnlockRsp::MergeFrom(const AncientUnlockRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientUnlockRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientUnlockRsp::CopyFrom(const AncientUnlockRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientUnlockRsp::IsInitialized() const {

  return true;
}

void AncientUnlockRsp::Swap(AncientUnlockRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientUnlockRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientUnlockRsp_descriptor_;
  metadata.reflection = AncientUnlockRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientLvReq::kIdFieldNumber;
const int AncientLvReq::kSlotFieldNumber;
const int AncientLvReq::kMallBuyFieldNumber;
const int AncientLvReq::kBagPosFieldNumber;
#endif  // !_MSC_VER

AncientLvReq::AncientLvReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientLvReq::InitAsDefaultInstance() {
}

AncientLvReq::AncientLvReq(const AncientLvReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientLvReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  slot_ = 0;
  mallbuy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientLvReq::~AncientLvReq() {
  SharedDtor();
}

void AncientLvReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientLvReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientLvReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientLvReq_descriptor_;
}

const AncientLvReq& AncientLvReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientLvReq* AncientLvReq::default_instance_ = NULL;

AncientLvReq* AncientLvReq::New() const {
  return new AncientLvReq;
}

void AncientLvReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    slot_ = 0;
    mallbuy_ = 0;
  }
  bag_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientLvReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mallBuy;
        break;
      }

      // optional int32 mallBuy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mallBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mallbuy_)));
          set_has_mallbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bag_pos;
        break;
      }

      // repeated int32 bag_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_bag_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bag_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bag_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientLvReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  // optional int32 mallBuy = 3;
  if (has_mallbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mallbuy(), output);
  }

  // repeated int32 bag_pos = 4;
  for (int i = 0; i < this->bag_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->bag_pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientLvReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  // optional int32 mallBuy = 3;
  if (has_mallbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mallbuy(), target);
  }

  // repeated int32 bag_pos = 4;
  for (int i = 0; i < this->bag_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->bag_pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientLvReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

    // optional int32 mallBuy = 3;
    if (has_mallbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mallbuy());
    }

  }
  // repeated int32 bag_pos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->bag_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bag_pos(i));
    }
    total_size += 1 * this->bag_pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientLvReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientLvReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientLvReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientLvReq::MergeFrom(const AncientLvReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  bag_pos_.MergeFrom(from.bag_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_mallbuy()) {
      set_mallbuy(from.mallbuy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientLvReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientLvReq::CopyFrom(const AncientLvReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientLvReq::IsInitialized() const {

  return true;
}

void AncientLvReq::Swap(AncientLvReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(slot_, other->slot_);
    std::swap(mallbuy_, other->mallbuy_);
    bag_pos_.Swap(&other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientLvReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientLvReq_descriptor_;
  metadata.reflection = AncientLvReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientLvRsp::kRetFieldNumber;
const int AncientLvRsp::kIdFieldNumber;
const int AncientLvRsp::kMallBuyFieldNumber;
const int AncientLvRsp::kBagPosFieldNumber;
#endif  // !_MSC_VER

AncientLvRsp::AncientLvRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientLvRsp::InitAsDefaultInstance() {
}

AncientLvRsp::AncientLvRsp(const AncientLvRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientLvRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  mallbuy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientLvRsp::~AncientLvRsp() {
  SharedDtor();
}

void AncientLvRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientLvRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientLvRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientLvRsp_descriptor_;
}

const AncientLvRsp& AncientLvRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientLvRsp* AncientLvRsp::default_instance_ = NULL;

AncientLvRsp* AncientLvRsp::New() const {
  return new AncientLvRsp;
}

void AncientLvRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
    mallbuy_ = 0;
  }
  bag_pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientLvRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mallBuy;
        break;
      }

      // optional int32 mallBuy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mallBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mallbuy_)));
          set_has_mallbuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bag_pos;
        break;
      }

      // repeated int32 bag_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bag_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_bag_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bag_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bag_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientLvRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 mallBuy = 3;
  if (has_mallbuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mallbuy(), output);
  }

  // repeated int32 bag_pos = 4;
  for (int i = 0; i < this->bag_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->bag_pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientLvRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 mallBuy = 3;
  if (has_mallbuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mallbuy(), target);
  }

  // repeated int32 bag_pos = 4;
  for (int i = 0; i < this->bag_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->bag_pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientLvRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 mallBuy = 3;
    if (has_mallbuy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mallbuy());
    }

  }
  // repeated int32 bag_pos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->bag_pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bag_pos(i));
    }
    total_size += 1 * this->bag_pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientLvRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientLvRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientLvRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientLvRsp::MergeFrom(const AncientLvRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  bag_pos_.MergeFrom(from.bag_pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mallbuy()) {
      set_mallbuy(from.mallbuy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientLvRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientLvRsp::CopyFrom(const AncientLvRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientLvRsp::IsInitialized() const {

  return true;
}

void AncientLvRsp::Swap(AncientLvRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(mallbuy_, other->mallbuy_);
    bag_pos_.Swap(&other->bag_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientLvRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientLvRsp_descriptor_;
  metadata.reflection = AncientLvRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AncientStarUnlcokReq::AncientStarUnlcokReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientStarUnlcokReq::InitAsDefaultInstance() {
}

AncientStarUnlcokReq::AncientStarUnlcokReq(const AncientStarUnlcokReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientStarUnlcokReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientStarUnlcokReq::~AncientStarUnlcokReq() {
  SharedDtor();
}

void AncientStarUnlcokReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientStarUnlcokReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientStarUnlcokReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientStarUnlcokReq_descriptor_;
}

const AncientStarUnlcokReq& AncientStarUnlcokReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientStarUnlcokReq* AncientStarUnlcokReq::default_instance_ = NULL;

AncientStarUnlcokReq* AncientStarUnlcokReq::New() const {
  return new AncientStarUnlcokReq;
}

void AncientStarUnlcokReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientStarUnlcokReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AncientStarUnlcokReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientStarUnlcokReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientStarUnlcokReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientStarUnlcokReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientStarUnlcokReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientStarUnlcokReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientStarUnlcokReq::MergeFrom(const AncientStarUnlcokReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientStarUnlcokReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientStarUnlcokReq::CopyFrom(const AncientStarUnlcokReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientStarUnlcokReq::IsInitialized() const {

  return true;
}

void AncientStarUnlcokReq::Swap(AncientStarUnlcokReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientStarUnlcokReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientStarUnlcokReq_descriptor_;
  metadata.reflection = AncientStarUnlcokReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientStarUnlcokRsp::kRetFieldNumber;
#endif  // !_MSC_VER

AncientStarUnlcokRsp::AncientStarUnlcokRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientStarUnlcokRsp::InitAsDefaultInstance() {
}

AncientStarUnlcokRsp::AncientStarUnlcokRsp(const AncientStarUnlcokRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientStarUnlcokRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientStarUnlcokRsp::~AncientStarUnlcokRsp() {
  SharedDtor();
}

void AncientStarUnlcokRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientStarUnlcokRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientStarUnlcokRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientStarUnlcokRsp_descriptor_;
}

const AncientStarUnlcokRsp& AncientStarUnlcokRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientStarUnlcokRsp* AncientStarUnlcokRsp::default_instance_ = NULL;

AncientStarUnlcokRsp* AncientStarUnlcokRsp::New() const {
  return new AncientStarUnlcokRsp;
}

void AncientStarUnlcokRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientStarUnlcokRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientStarUnlcokRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientStarUnlcokRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientStarUnlcokRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientStarUnlcokRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientStarUnlcokRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientStarUnlcokRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientStarUnlcokRsp::MergeFrom(const AncientStarUnlcokRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientStarUnlcokRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientStarUnlcokRsp::CopyFrom(const AncientStarUnlcokRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientStarUnlcokRsp::IsInitialized() const {

  return true;
}

void AncientStarUnlcokRsp::Swap(AncientStarUnlcokRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientStarUnlcokRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientStarUnlcokRsp_descriptor_;
  metadata.reflection = AncientStarUnlcokRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientBlessReq::kIdFieldNumber;
const int AncientBlessReq::kSlotFieldNumber;
#endif  // !_MSC_VER

AncientBlessReq::AncientBlessReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientBlessReq::InitAsDefaultInstance() {
}

AncientBlessReq::AncientBlessReq(const AncientBlessReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientBlessReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientBlessReq::~AncientBlessReq() {
  SharedDtor();
}

void AncientBlessReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientBlessReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientBlessReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientBlessReq_descriptor_;
}

const AncientBlessReq& AncientBlessReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientBlessReq* AncientBlessReq::default_instance_ = NULL;

AncientBlessReq* AncientBlessReq::New() const {
  return new AncientBlessReq;
}

void AncientBlessReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientBlessReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }

      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientBlessReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientBlessReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientBlessReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientBlessReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientBlessReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientBlessReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientBlessReq::MergeFrom(const AncientBlessReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientBlessReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientBlessReq::CopyFrom(const AncientBlessReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientBlessReq::IsInitialized() const {

  return true;
}

void AncientBlessReq::Swap(AncientBlessReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientBlessReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientBlessReq_descriptor_;
  metadata.reflection = AncientBlessReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientBlessRsp::kRetFieldNumber;
const int AncientBlessRsp::kIdFieldNumber;
const int AncientBlessRsp::kSlotFieldNumber;
#endif  // !_MSC_VER

AncientBlessRsp::AncientBlessRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientBlessRsp::InitAsDefaultInstance() {
}

AncientBlessRsp::AncientBlessRsp(const AncientBlessRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientBlessRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  slot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientBlessRsp::~AncientBlessRsp() {
  SharedDtor();
}

void AncientBlessRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientBlessRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientBlessRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientBlessRsp_descriptor_;
}

const AncientBlessRsp& AncientBlessRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Ancient_2eproto();
  return *default_instance_;
}

AncientBlessRsp* AncientBlessRsp::default_instance_ = NULL;

AncientBlessRsp* AncientBlessRsp::New() const {
  return new AncientBlessRsp;
}

void AncientBlessRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
    slot_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientBlessRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slot;
        break;
      }

      // optional int32 slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientBlessRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 slot = 3;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientBlessRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 slot = 3;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientBlessRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientBlessRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientBlessRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientBlessRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientBlessRsp::MergeFrom(const AncientBlessRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientBlessRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientBlessRsp::CopyFrom(const AncientBlessRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientBlessRsp::IsInitialized() const {

  return true;
}

void AncientBlessRsp::Swap(AncientBlessRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientBlessRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientBlessRsp_descriptor_;
  metadata.reflection = AncientBlessRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
