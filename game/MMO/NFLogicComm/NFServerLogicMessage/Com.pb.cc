// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Com.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Com.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* EmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPair64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPair64_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComPairBool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComPairBool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector3PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector2PB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector2PB_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr64_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr64_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFacadeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFacadeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleListDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleListDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRoleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRoleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginSyncProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginSyncProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterRoleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterRoleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SocialRoleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SocialRoleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Attr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attr_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlueStarAttr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlueStarAttr_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemProtoInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemProtoInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultItemSimpleProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultItemSimpleProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailParamProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailParamProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailStrProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailStrProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailAttachmentList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailAttachmentList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebMailItemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebMailItemProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebMailDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebMailDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseItemArgProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItemArgProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyRoleFacadeCastRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyRoleFacadeCastRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionUnlockInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionUnlockInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RolePlayerMiniInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RolePlayerMiniInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendApplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationHateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationHateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationGiftRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationGiftRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelationDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelationDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DigPerfor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DigPerfor_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillPosProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillPosProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillGroupProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillGroupProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillGroupListProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillGroupListProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFantasyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFantasyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeFragmentData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeFragmentData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeSkillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeSkillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatisticDataProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatisticDataProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodRelicsTaskEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodRelicsTaskEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodRelicsTaskGroupEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodRelicsTaskGroupEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskLimitEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskLimitEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskBackDayEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskBackDayEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskBackEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskBackEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskRewardEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskRewardEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyTaskAllData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyTaskAllData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBRecentSubmitMission_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBRecentSubmitMission_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMissionItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMissionItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBMissionTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBMissionTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBDyMissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBDyMissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterDBTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterDBTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* NotifyVipDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NotifyVipDataRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ECState_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EAttrGroup_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GrowType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ECreatureAttr_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DigPerforType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_GODRELICS_TASK_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_GODRELICS_GROUP_TASK_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_DAILY_TASK_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EN_DAILY_TASK_REWARD_STATUS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Com_2eproto() {
  protobuf_AddDesc_Com_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Com.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyMessage_descriptor_ = file->message_type(0);
  static const int EmptyMessage_offsets_[1] = {
  };
  EmptyMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmptyMessage_descriptor_,
      EmptyMessage::default_instance_,
      EmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmptyMessage));
  ComPair_descriptor_ = file->message_type(1);
  static const int ComPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, value_),
  };
  ComPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPair_descriptor_,
      ComPair::default_instance_,
      ComPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPair));
  ComPair64_descriptor_ = file->message_type(2);
  static const int ComPair64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, value_),
  };
  ComPair64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPair64_descriptor_,
      ComPair64::default_instance_,
      ComPair64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPair64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPair64));
  ComPairBool_descriptor_ = file->message_type(3);
  static const int ComPairBool_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, value_),
  };
  ComPairBool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComPairBool_descriptor_,
      ComPairBool::default_instance_,
      ComPairBool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComPairBool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComPairBool));
  Vector3PB_descriptor_ = file->message_type(4);
  static const int Vector3PB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, z_),
  };
  Vector3PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3PB_descriptor_,
      Vector3PB::default_instance_,
      Vector3PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3PB));
  Vector2PB_descriptor_ = file->message_type(5);
  static const int Vector2PB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, y_),
  };
  Vector2PB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector2PB_descriptor_,
      Vector2PB::default_instance_,
      Vector2PB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector2PB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector2PB));
  Attr64_descriptor_ = file->message_type(6);
  static const int Attr64_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, value_),
  };
  Attr64_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attr64_descriptor_,
      Attr64::default_instance_,
      Attr64_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr64, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attr64));
  RoleFacadeProto_descriptor_ = file->message_type(7);
  static const int RoleFacadeProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFacadeProto, growfacade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFacadeProto, color_),
  };
  RoleFacadeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleFacadeProto_descriptor_,
      RoleFacadeProto::default_instance_,
      RoleFacadeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFacadeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFacadeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleFacadeProto));
  RoleListDBProto_descriptor_ = file->message_type(8);
  static const int RoleListDBProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, lastsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, lastpos_),
  };
  RoleListDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleListDBProto_descriptor_,
      RoleListDBProto::default_instance_,
      RoleListDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleListDBProto));
  LoginRoleProto_descriptor_ = file->message_type(9);
  static const int LoginRoleProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, facade_),
  };
  LoginRoleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRoleProto_descriptor_,
      LoginRoleProto::default_instance_,
      LoginRoleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRoleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRoleProto));
  LoginSyncProto_descriptor_ = file->message_type(10);
  static const int LoginSyncProto_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, guild_duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, guild_leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, leader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, mem_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, cloness_lev_),
  };
  LoginSyncProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginSyncProto_descriptor_,
      LoginSyncProto::default_instance_,
      LoginSyncProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginSyncProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginSyncProto));
  CenterRoleProto_descriptor_ = file->message_type(11);
  static const int CenterRoleProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, lastlogout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, max_hp_),
  };
  CenterRoleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterRoleProto_descriptor_,
      CenterRoleProto::default_instance_,
      CenterRoleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterRoleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterRoleProto));
  SocialRoleProto_descriptor_ = file->message_type(12);
  static const int SocialRoleProto_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, lastlogout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, max_hp_),
  };
  SocialRoleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SocialRoleProto_descriptor_,
      SocialRoleProto::default_instance_,
      SocialRoleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SocialRoleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SocialRoleProto));
  Attr_descriptor_ = file->message_type(13);
  static const int Attr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, value_),
  };
  Attr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attr_descriptor_,
      Attr::default_instance_,
      Attr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attr));
  BlueStarAttr_descriptor_ = file->message_type(14);
  static const int BlueStarAttr_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, lv_part_),
  };
  BlueStarAttr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlueStarAttr_descriptor_,
      BlueStarAttr::default_instance_,
      BlueStarAttr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueStarAttr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlueStarAttr));
  ItemProtoInfo_descriptor_ = file->message_type(15);
  static const int ItemProtoInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, refine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, god_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, special_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, expiretime_),
  };
  ItemProtoInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemProtoInfo_descriptor_,
      ItemProtoInfo::default_instance_,
      ItemProtoInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemProtoInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemProtoInfo));
  EquipSlotInfo_descriptor_ = file->message_type(16);
  static const int EquipSlotInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, slot_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, total_score_),
  };
  EquipSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipSlotInfo_descriptor_,
      EquipSlotInfo::default_instance_,
      EquipSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipSlotInfo));
  EquipInfo_descriptor_ = file->message_type(17);
  static const int EquipInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, slot_),
  };
  EquipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipInfo_descriptor_,
      EquipInfo::default_instance_,
      EquipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipInfo));
  ItemSimpleProto_descriptor_ = file->message_type(18);
  static const int ItemSimpleProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, bind_),
  };
  ItemSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSimpleProto_descriptor_,
      ItemSimpleProto::default_instance_,
      ItemSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSimpleProto));
  MultItemSimpleProto_descriptor_ = file->message_type(19);
  static const int MultItemSimpleProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultItemSimpleProto, info_),
  };
  MultItemSimpleProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultItemSimpleProto_descriptor_,
      MultItemSimpleProto::default_instance_,
      MultItemSimpleProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultItemSimpleProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultItemSimpleProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultItemSimpleProto));
  MailParamProto_descriptor_ = file->message_type(20);
  static const int MailParamProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, int_param_),
  };
  MailParamProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailParamProto_descriptor_,
      MailParamProto::default_instance_,
      MailParamProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailParamProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailParamProto));
  MailStrProto_descriptor_ = file->message_type(21);
  static const int MailStrProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailStrProto, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailStrProto, param_),
  };
  MailStrProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailStrProto_descriptor_,
      MailStrProto::default_instance_,
      MailStrProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailStrProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailStrProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailStrProto));
  MailAttachmentList_descriptor_ = file->message_type(22);
  static const int MailAttachmentList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachmentList, iteminfo_),
  };
  MailAttachmentList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailAttachmentList_descriptor_,
      MailAttachmentList::default_instance_,
      MailAttachmentList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachmentList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAttachmentList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailAttachmentList));
  MailHead_descriptor_ = file->message_type(23);
  static const int MailHead_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, sendplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, sendplayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, destplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, has_attach_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, begin_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, end_time_),
  };
  MailHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailHead_descriptor_,
      MailHead::default_instance_,
      MailHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailHead));
  MailInfo_descriptor_ = file->message_type(24);
  static const int MailInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, mailhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, magiccrystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, attachmentlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, sourceval_),
  };
  MailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailInfo_descriptor_,
      MailInfo::default_instance_,
      MailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailInfo));
  WebMailItemProto_descriptor_ = file->message_type(25);
  static const int WebMailItemProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailItemProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailItemProto, num_),
  };
  WebMailItemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebMailItemProto_descriptor_,
      WebMailItemProto::default_instance_,
      WebMailItemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailItemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailItemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebMailItemProto));
  WebMailDataProto_descriptor_ = file->message_type(26);
  static const int WebMailDataProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, diamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, binddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, arenascore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, magiccrystal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, itemlist_),
  };
  WebMailDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebMailDataProto_descriptor_,
      WebMailDataProto::default_instance_,
      WebMailDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebMailDataProto));
  UseItemArgProto_descriptor_ = file->message_type(27);
  static const int UseItemArgProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, item_lst_),
  };
  UseItemArgProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseItemArgProto_descriptor_,
      UseItemArgProto::default_instance_,
      UseItemArgProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemArgProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseItemArgProto));
  NotifyRoleFacadeCastRsp_descriptor_ = file->message_type(28);
  static const int NotifyRoleFacadeCastRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleFacadeCastRsp, roleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleFacadeCastRsp, facade_),
  };
  NotifyRoleFacadeCastRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyRoleFacadeCastRsp_descriptor_,
      NotifyRoleFacadeCastRsp::default_instance_,
      NotifyRoleFacadeCastRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleFacadeCastRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyRoleFacadeCastRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyRoleFacadeCastRsp));
  FunctionUnlockInfoData_descriptor_ = file->message_type(29);
  static const int FunctionUnlockInfoData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoData, unlockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoData, get_reward_),
  };
  FunctionUnlockInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockInfoData_descriptor_,
      FunctionUnlockInfoData::default_instance_,
      FunctionUnlockInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockInfoData));
  FunctionUnlockInfo_descriptor_ = file->message_type(30);
  static const int FunctionUnlockInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfo, data_),
  };
  FunctionUnlockInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockInfo_descriptor_,
      FunctionUnlockInfo::default_instance_,
      FunctionUnlockInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockInfo));
  RolePlayerMiniInfo_descriptor_ = file->message_type(31);
  static const int RolePlayerMiniInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, playername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, closeness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, recenttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, recenttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, unionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, killmetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, connect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, marry_),
  };
  RolePlayerMiniInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RolePlayerMiniInfo_descriptor_,
      RolePlayerMiniInfo::default_instance_,
      RolePlayerMiniInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePlayerMiniInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RolePlayerMiniInfo));
  FriendInfo_descriptor_ = file->message_type(32);
  static const int FriendInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, closeness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, todaycloseness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, updatetime_),
  };
  FriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::default_instance_,
      FriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfo));
  FriendApplyInfo_descriptor_ = file->message_type(33);
  static const int FriendApplyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyInfo, connect_),
  };
  FriendApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendApplyInfo_descriptor_,
      FriendApplyInfo::default_instance_,
      FriendApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendApplyInfo));
  RelationHateInfo_descriptor_ = file->message_type(34);
  static const int RelationHateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationHateInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationHateInfo, killmetimes_),
  };
  RelationHateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationHateInfo_descriptor_,
      RelationHateInfo::default_instance_,
      RelationHateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationHateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationHateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationHateInfo));
  RelationGiftRecord_descriptor_ = file->message_type(35);
  static const int RelationGiftRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, friendid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, isthanks_),
  };
  RelationGiftRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationGiftRecord_descriptor_,
      RelationGiftRecord::default_instance_,
      RelationGiftRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationGiftRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationGiftRecord));
  RelationDBInfo_descriptor_ = file->message_type(36);
  static const int RelationDBInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, friendlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, blacklist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, hatelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, applylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, friends_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, giftrecords_),
  };
  RelationDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelationDBInfo_descriptor_,
      RelationDBInfo::default_instance_,
      RelationDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelationDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelationDBInfo));
  DigPerfor_descriptor_ = file->message_type(37);
  static const int DigPerfor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, value_),
  };
  DigPerfor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DigPerfor_descriptor_,
      DigPerfor::default_instance_,
      DigPerfor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigPerfor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DigPerfor));
  BuffProto_descriptor_ = file->message_type(38);
  static const int BuffProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, buff_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, buff_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, recver_cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, left_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, skill_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, is_effect_),
  };
  BuffProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffProto_descriptor_,
      BuffProto::default_instance_,
      BuffProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffProto));
  BuffListProto_descriptor_ = file->message_type(39);
  static const int BuffListProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffListProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffListProto, info_),
  };
  BuffListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffListProto_descriptor_,
      BuffListProto::default_instance_,
      BuffListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffListProto));
  SkillPosProto_descriptor_ = file->message_type(40);
  static const int SkillPosProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, cd_),
  };
  SkillPosProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillPosProto_descriptor_,
      SkillPosProto::default_instance_,
      SkillPosProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillPosProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillPosProto));
  SkillGroupProto_descriptor_ = file->message_type(41);
  static const int SkillGroupProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupProto, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupProto, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupProto, lst_),
  };
  SkillGroupProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillGroupProto_descriptor_,
      SkillGroupProto::default_instance_,
      SkillGroupProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillGroupProto));
  SkillGroupListProto_descriptor_ = file->message_type(42);
  static const int SkillGroupListProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupListProto, info_),
  };
  SkillGroupListProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillGroupListProto_descriptor_,
      SkillGroupListProto::default_instance_,
      SkillGroupListProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupListProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillGroupListProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillGroupListProto));
  FacadeFantasyData_descriptor_ = file->message_type(43);
  static const int FacadeFantasyData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyData, fantasy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyData, fantasy_lev_),
  };
  FacadeFantasyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFantasyData_descriptor_,
      FacadeFantasyData::default_instance_,
      FacadeFantasyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFantasyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFantasyData));
  FacadeFragmentData_descriptor_ = file->message_type(44);
  static const int FacadeFragmentData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentData, fragment_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentData, use_times_),
  };
  FacadeFragmentData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeFragmentData_descriptor_,
      FacadeFragmentData::default_instance_,
      FacadeFragmentData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeFragmentData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeFragmentData));
  FacadeSkillData_descriptor_ = file->message_type(45);
  static const int FacadeSkillData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillData, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillData, skill_lev_),
  };
  FacadeSkillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeSkillData_descriptor_,
      FacadeSkillData::default_instance_,
      FacadeSkillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeSkillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeSkillData));
  StatisticDataProto_descriptor_ = file->message_type(46);
  static const int StatisticDataProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, total_login_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, total_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, today_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, total_activitycount_),
  };
  StatisticDataProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatisticDataProto_descriptor_,
      StatisticDataProto::default_instance_,
      StatisticDataProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatisticDataProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatisticDataProto));
  GodRelicsTaskEntry_descriptor_ = file->message_type(47);
  static const int GodRelicsTaskEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, task_state_),
  };
  GodRelicsTaskEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodRelicsTaskEntry_descriptor_,
      GodRelicsTaskEntry::default_instance_,
      GodRelicsTaskEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodRelicsTaskEntry));
  GodRelicsTaskGroupEntry_descriptor_ = file->message_type(48);
  static const int GodRelicsTaskGroupEntry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, group_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, normal_reward_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, create_time_),
  };
  GodRelicsTaskGroupEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodRelicsTaskGroupEntry_descriptor_,
      GodRelicsTaskGroupEntry::default_instance_,
      GodRelicsTaskGroupEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsTaskGroupEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodRelicsTaskGroupEntry));
  DailyTaskEntry_descriptor_ = file->message_type(49);
  static const int DailyTaskEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, buy_num_),
  };
  DailyTaskEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskEntry_descriptor_,
      DailyTaskEntry::default_instance_,
      DailyTaskEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskEntry));
  DailyTaskLimitEntry_descriptor_ = file->message_type(50);
  static const int DailyTaskLimitEntry_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, buy_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, ready_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, is_open_),
  };
  DailyTaskLimitEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskLimitEntry_descriptor_,
      DailyTaskLimitEntry::default_instance_,
      DailyTaskLimitEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskLimitEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskLimitEntry));
  DailyTaskBackDayEntry_descriptor_ = file->message_type(51);
  static const int DailyTaskBackDayEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, external_left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, last_time_),
  };
  DailyTaskBackDayEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskBackDayEntry_descriptor_,
      DailyTaskBackDayEntry::default_instance_,
      DailyTaskBackDayEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackDayEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskBackDayEntry));
  DailyTaskBackEntry_descriptor_ = file->message_type(52);
  static const int DailyTaskBackEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, task_cfg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, task_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, day_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, external_left_num_),
  };
  DailyTaskBackEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskBackEntry_descriptor_,
      DailyTaskBackEntry::default_instance_,
      DailyTaskBackEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskBackEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskBackEntry));
  DailyTaskRewardEntry_descriptor_ = file->message_type(53);
  static const int DailyTaskRewardEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskRewardEntry, reward_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskRewardEntry, state_),
  };
  DailyTaskRewardEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskRewardEntry_descriptor_,
      DailyTaskRewardEntry::default_instance_,
      DailyTaskRewardEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskRewardEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskRewardEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskRewardEntry));
  DailyTaskAllData_descriptor_ = file->message_type(54);
  static const int DailyTaskAllData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, task_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, task_limit_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, back_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, reward_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, daily_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, daily_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, daily_exp_),
  };
  DailyTaskAllData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyTaskAllData_descriptor_,
      DailyTaskAllData::default_instance_,
      DailyTaskAllData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyTaskAllData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyTaskAllData));
  CharacterDBRecentSubmitMission_descriptor_ = file->message_type(55);
  static const int CharacterDBRecentSubmitMission_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, mission_id_),
  };
  CharacterDBRecentSubmitMission_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBRecentSubmitMission_descriptor_,
      CharacterDBRecentSubmitMission::default_instance_,
      CharacterDBRecentSubmitMission_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBRecentSubmitMission, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBRecentSubmitMission));
  CharacterDBMissionItemInfo_descriptor_ = file->message_type(56);
  static const int CharacterDBMissionItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, currentvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, finalvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, completedflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, parma3_),
  };
  CharacterDBMissionItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMissionItemInfo_descriptor_,
      CharacterDBMissionItemInfo::default_instance_,
      CharacterDBMissionItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMissionItemInfo));
  CharacterDBMissionTrack_descriptor_ = file->message_type(57);
  static const int CharacterDBMissionTrack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, missionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, dynamicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, acceptmissiontime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, textid_),
  };
  CharacterDBMissionTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBMissionTrack_descriptor_,
      CharacterDBMissionTrack::default_instance_,
      CharacterDBMissionTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBMissionTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBMissionTrack));
  CharacterDBDyMissionInfo_descriptor_ = file->message_type(58);
  static const int CharacterDBDyMissionInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, mission_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, lastfresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, accept_num_),
  };
  CharacterDBDyMissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBDyMissionInfo_descriptor_,
      CharacterDBDyMissionInfo::default_instance_,
      CharacterDBDyMissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBDyMissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBDyMissionInfo));
  CharacterDBTaskData_descriptor_ = file->message_type(59);
  static const int CharacterDBTaskData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, missiontrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, dyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, already_submit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, recent_submit_),
  };
  CharacterDBTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterDBTaskData_descriptor_,
      CharacterDBTaskData::default_instance_,
      CharacterDBTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterDBTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterDBTaskData));
  NotifyVipDataRsp_descriptor_ = file->message_type(60);
  static const int NotifyVipDataRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyVipDataRsp, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyVipDataRsp, ids_),
  };
  NotifyVipDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NotifyVipDataRsp_descriptor_,
      NotifyVipDataRsp::default_instance_,
      NotifyVipDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyVipDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NotifyVipDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NotifyVipDataRsp));
  ECState_descriptor_ = file->enum_type(0);
  EAttrGroup_descriptor_ = file->enum_type(1);
  GrowType_descriptor_ = file->enum_type(2);
  ECreatureAttr_descriptor_ = file->enum_type(3);
  DigPerforType_descriptor_ = file->enum_type(4);
  EN_GODRELICS_TASK_STATUS_descriptor_ = file->enum_type(5);
  EN_GODRELICS_GROUP_TASK_STATUS_descriptor_ = file->enum_type(6);
  EN_DAILY_TASK_STATUS_descriptor_ = file->enum_type(7);
  EN_DAILY_TASK_REWARD_STATUS_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Com_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmptyMessage_descriptor_, &EmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPair_descriptor_, &ComPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPair64_descriptor_, &ComPair64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComPairBool_descriptor_, &ComPairBool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3PB_descriptor_, &Vector3PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector2PB_descriptor_, &Vector2PB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attr64_descriptor_, &Attr64::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleFacadeProto_descriptor_, &RoleFacadeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleListDBProto_descriptor_, &RoleListDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRoleProto_descriptor_, &LoginRoleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginSyncProto_descriptor_, &LoginSyncProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterRoleProto_descriptor_, &CenterRoleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SocialRoleProto_descriptor_, &SocialRoleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attr_descriptor_, &Attr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlueStarAttr_descriptor_, &BlueStarAttr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemProtoInfo_descriptor_, &ItemProtoInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipSlotInfo_descriptor_, &EquipSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipInfo_descriptor_, &EquipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSimpleProto_descriptor_, &ItemSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultItemSimpleProto_descriptor_, &MultItemSimpleProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailParamProto_descriptor_, &MailParamProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailStrProto_descriptor_, &MailStrProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailAttachmentList_descriptor_, &MailAttachmentList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailHead_descriptor_, &MailHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailInfo_descriptor_, &MailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebMailItemProto_descriptor_, &WebMailItemProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebMailDataProto_descriptor_, &WebMailDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseItemArgProto_descriptor_, &UseItemArgProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyRoleFacadeCastRsp_descriptor_, &NotifyRoleFacadeCastRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockInfoData_descriptor_, &FunctionUnlockInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockInfo_descriptor_, &FunctionUnlockInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RolePlayerMiniInfo_descriptor_, &RolePlayerMiniInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfo_descriptor_, &FriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendApplyInfo_descriptor_, &FriendApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationHateInfo_descriptor_, &RelationHateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationGiftRecord_descriptor_, &RelationGiftRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelationDBInfo_descriptor_, &RelationDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DigPerfor_descriptor_, &DigPerfor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffProto_descriptor_, &BuffProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffListProto_descriptor_, &BuffListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillPosProto_descriptor_, &SkillPosProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillGroupProto_descriptor_, &SkillGroupProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillGroupListProto_descriptor_, &SkillGroupListProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFantasyData_descriptor_, &FacadeFantasyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeFragmentData_descriptor_, &FacadeFragmentData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeSkillData_descriptor_, &FacadeSkillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatisticDataProto_descriptor_, &StatisticDataProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodRelicsTaskEntry_descriptor_, &GodRelicsTaskEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodRelicsTaskGroupEntry_descriptor_, &GodRelicsTaskGroupEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskEntry_descriptor_, &DailyTaskEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskLimitEntry_descriptor_, &DailyTaskLimitEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskBackDayEntry_descriptor_, &DailyTaskBackDayEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskBackEntry_descriptor_, &DailyTaskBackEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskRewardEntry_descriptor_, &DailyTaskRewardEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyTaskAllData_descriptor_, &DailyTaskAllData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBRecentSubmitMission_descriptor_, &CharacterDBRecentSubmitMission::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMissionItemInfo_descriptor_, &CharacterDBMissionItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBMissionTrack_descriptor_, &CharacterDBMissionTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBDyMissionInfo_descriptor_, &CharacterDBDyMissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterDBTaskData_descriptor_, &CharacterDBTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NotifyVipDataRsp_descriptor_, &NotifyVipDataRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Com_2eproto() {
  delete EmptyMessage::default_instance_;
  delete EmptyMessage_reflection_;
  delete ComPair::default_instance_;
  delete ComPair_reflection_;
  delete ComPair64::default_instance_;
  delete ComPair64_reflection_;
  delete ComPairBool::default_instance_;
  delete ComPairBool_reflection_;
  delete Vector3PB::default_instance_;
  delete Vector3PB_reflection_;
  delete Vector2PB::default_instance_;
  delete Vector2PB_reflection_;
  delete Attr64::default_instance_;
  delete Attr64_reflection_;
  delete RoleFacadeProto::default_instance_;
  delete RoleFacadeProto_reflection_;
  delete RoleListDBProto::default_instance_;
  delete RoleListDBProto_reflection_;
  delete LoginRoleProto::default_instance_;
  delete LoginRoleProto_reflection_;
  delete LoginSyncProto::default_instance_;
  delete LoginSyncProto_reflection_;
  delete CenterRoleProto::default_instance_;
  delete CenterRoleProto_reflection_;
  delete SocialRoleProto::default_instance_;
  delete SocialRoleProto_reflection_;
  delete Attr::default_instance_;
  delete Attr_reflection_;
  delete BlueStarAttr::default_instance_;
  delete BlueStarAttr_reflection_;
  delete ItemProtoInfo::default_instance_;
  delete ItemProtoInfo_reflection_;
  delete EquipSlotInfo::default_instance_;
  delete EquipSlotInfo_reflection_;
  delete EquipInfo::default_instance_;
  delete EquipInfo_reflection_;
  delete ItemSimpleProto::default_instance_;
  delete ItemSimpleProto_reflection_;
  delete MultItemSimpleProto::default_instance_;
  delete MultItemSimpleProto_reflection_;
  delete MailParamProto::default_instance_;
  delete MailParamProto_reflection_;
  delete MailStrProto::default_instance_;
  delete MailStrProto_reflection_;
  delete MailAttachmentList::default_instance_;
  delete MailAttachmentList_reflection_;
  delete MailHead::default_instance_;
  delete MailHead_reflection_;
  delete MailInfo::default_instance_;
  delete MailInfo_reflection_;
  delete WebMailItemProto::default_instance_;
  delete WebMailItemProto_reflection_;
  delete WebMailDataProto::default_instance_;
  delete WebMailDataProto_reflection_;
  delete UseItemArgProto::default_instance_;
  delete UseItemArgProto_reflection_;
  delete NotifyRoleFacadeCastRsp::default_instance_;
  delete NotifyRoleFacadeCastRsp_reflection_;
  delete FunctionUnlockInfoData::default_instance_;
  delete FunctionUnlockInfoData_reflection_;
  delete FunctionUnlockInfo::default_instance_;
  delete FunctionUnlockInfo_reflection_;
  delete RolePlayerMiniInfo::default_instance_;
  delete RolePlayerMiniInfo_reflection_;
  delete FriendInfo::default_instance_;
  delete FriendInfo_reflection_;
  delete FriendApplyInfo::default_instance_;
  delete FriendApplyInfo_reflection_;
  delete RelationHateInfo::default_instance_;
  delete RelationHateInfo_reflection_;
  delete RelationGiftRecord::default_instance_;
  delete RelationGiftRecord_reflection_;
  delete RelationDBInfo::default_instance_;
  delete RelationDBInfo_reflection_;
  delete DigPerfor::default_instance_;
  delete DigPerfor_reflection_;
  delete BuffProto::default_instance_;
  delete BuffProto_reflection_;
  delete BuffListProto::default_instance_;
  delete BuffListProto_reflection_;
  delete SkillPosProto::default_instance_;
  delete SkillPosProto_reflection_;
  delete SkillGroupProto::default_instance_;
  delete SkillGroupProto_reflection_;
  delete SkillGroupListProto::default_instance_;
  delete SkillGroupListProto_reflection_;
  delete FacadeFantasyData::default_instance_;
  delete FacadeFantasyData_reflection_;
  delete FacadeFragmentData::default_instance_;
  delete FacadeFragmentData_reflection_;
  delete FacadeSkillData::default_instance_;
  delete FacadeSkillData_reflection_;
  delete StatisticDataProto::default_instance_;
  delete StatisticDataProto_reflection_;
  delete GodRelicsTaskEntry::default_instance_;
  delete GodRelicsTaskEntry_reflection_;
  delete GodRelicsTaskGroupEntry::default_instance_;
  delete GodRelicsTaskGroupEntry_reflection_;
  delete DailyTaskEntry::default_instance_;
  delete DailyTaskEntry_reflection_;
  delete DailyTaskLimitEntry::default_instance_;
  delete DailyTaskLimitEntry_reflection_;
  delete DailyTaskBackDayEntry::default_instance_;
  delete DailyTaskBackDayEntry_reflection_;
  delete DailyTaskBackEntry::default_instance_;
  delete DailyTaskBackEntry_reflection_;
  delete DailyTaskRewardEntry::default_instance_;
  delete DailyTaskRewardEntry_reflection_;
  delete DailyTaskAllData::default_instance_;
  delete DailyTaskAllData_reflection_;
  delete CharacterDBRecentSubmitMission::default_instance_;
  delete CharacterDBRecentSubmitMission_reflection_;
  delete CharacterDBMissionItemInfo::default_instance_;
  delete CharacterDBMissionItemInfo_reflection_;
  delete CharacterDBMissionTrack::default_instance_;
  delete CharacterDBMissionTrack_reflection_;
  delete CharacterDBDyMissionInfo::default_instance_;
  delete CharacterDBDyMissionInfo_reflection_;
  delete CharacterDBTaskData::default_instance_;
  delete CharacterDBTaskData_reflection_;
  delete NotifyVipDataRsp::default_instance_;
  delete NotifyVipDataRsp_reflection_;
}

void protobuf_AddDesc_Com_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tCom.proto\022\010proto_ff\032\025yd_fieldoptions.p"
    "roto\032\022common_logic.proto\032\017ComDefine.prot"
    "o\"\016\n\014EmptyMessage\"%\n\007ComPair\022\013\n\003key\030\001 \001("
    "\r\022\r\n\005value\030\002 \001(\r\"\'\n\tComPair64\022\013\n\003key\030\001 \001"
    "(\004\022\r\n\005value\030\002 \001(\004\")\n\013ComPairBool\022\013\n\003key\030"
    "\001 \001(\r\022\r\n\005value\030\002 \001(\010\",\n\tVector3PB\022\t\n\001x\030\001"
    " \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"!\n\tVector2PB\022"
    "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\"#\n\006Attr64\022\n\n\002id\030\001 "
    "\001(\r\022\r\n\005value\030\002 \001(\003\"M\n\017RoleFacadeProto\022+\n"
    "\ngrowFacade\030\001 \003(\0132\020.proto_ff.Attr64B\005\210\301\024"
    "\310\001\022\r\n\005color\030\002 \001(\005\"\255\002\n\017RoleListDBProto\022\013\n"
    "\003cid\030\001 \001(\004\022\022\n\004name\030\002 \001(\tB\004\220\301\024 \022\014\n\004prof\030\003"
    " \001(\r\022\r\n\005level\030\004 \001(\r\022\r\n\005fight\030\005 \001(\004\022\022\n\ncr"
    "eatetime\030\006 \001(\004\022)\n\006facade\030\007 \001(\0132\031.proto_f"
    "f.RoleFacadeProto\022\017\n\007sceneid\030\010 \001(\004\022\r\n\005ma"
    "pid\030\t \001(\004\022 \n\003pos\030\n \001(\0132\023.proto_ff.Vector"
    "3PB\022\023\n\013lastsceneid\030\013 \001(\004\022\021\n\tlastmapid\030\014 "
    "\001(\004\022$\n\007lastpos\030\r \001(\0132\023.proto_ff.Vector3P"
    "B\"\234\001\n\016LoginRoleProto\022\013\n\003cid\030\001 \001(\004\022\022\n\004nam"
    "e\030\002 \001(\tB\004\220\301\024 \022\014\n\004prof\030\003 \001(\r\022\r\n\005level\030\004 \001"
    "(\r\022\r\n\005fight\030\005 \001(\004\022\022\n\ncreatetime\030\006 \001(\004\022)\n"
    "\006facade\030\007 \001(\0132\031.proto_ff.RoleFacadeProto"
    "\"\257\001\n\016LoginSyncProto\022\020\n\010guild_id\030\001 \001(\r\022\030\n"
    "\nguild_name\030\002 \001(\tB\004\220\301\024 \022\022\n\nguild_duty\030\003 "
    "\001(\005\022\024\n\014guild_leader\030\004 \001(\004\022\017\n\007team_id\030\005 \001"
    "(\r\022\016\n\006leader\030\006 \001(\004\022\021\n\tmem_count\030\007 \001(\005\022\023\n"
    "\013cloness_lev\030\010 \001(\005\"\331\001\n\017CenterRoleProto\022\013"
    "\n\003cid\030\001 \001(\004\022\013\n\003uid\030\002 \001(\r\022\022\n\004name\030\003 \001(\014B\004"
    "\210\301\024\n\022\014\n\004prof\030\004 \001(\r\022\r\n\005level\030\005 \001(\r\022\r\n\005fig"
    "ht\030\006 \001(\004\022\022\n\nlastlogout\030\007 \001(\004\022)\n\006facade\030\010"
    " \001(\0132\031.proto_ff.RoleFacadeProto\022\021\n\tvip_l"
    "evel\030\t \001(\r\022\n\n\002hp\030\n \001(\003\022\016\n\006max_hp\030\013 \001(\003\"\370"
    "\001\n\017SocialRoleProto\022\013\n\003cid\030\001 \001(\004\022\013\n\003uid\030\002"
    " \001(\r\022\022\n\004name\030\003 \001(\014B\004\210\301\024\n\022\014\n\004prof\030\004 \001(\r\022\r"
    "\n\005level\030\005 \001(\r\022\r\n\005fight\030\006 \001(\004\022\022\n\nlastlogo"
    "ut\030\007 \001(\004\022)\n\006facade\030\010 \001(\0132\031.proto_ff.Role"
    "FacadeProto\022\021\n\tvip_level\030\t \001(\r\022\013\n\003zid\030\n "
    "\001(\r\022\020\n\010isonline\030\013 \001(\010\022\n\n\002hp\030\014 \001(\003\022\016\n\006max"
    "_hp\030\r \001(\003\"!\n\004Attr\022\n\n\002id\030\001 \001(\r\022\r\n\005value\030\002"
    " \001(\r\":\n\014BlueStarAttr\022\n\n\002id\030\001 \001(\r\022\r\n\005valu"
    "e\030\002 \001(\003\022\017\n\007lv_part\030\003 \001(\005\"\267\002\n\rItemProtoIn"
    "fo\022\r\n\005index\030\001 \001(\005\022\017\n\007item_id\030\002 \001(\004\022\020\n\010it"
    "em_num\030\003 \001(\003\022\014\n\004bind\030\004 \001(\005\022\r\n\005level\030\005 \001("
    "\005\022#\n\004base\030\006 \003(\0132\016.proto_ff.AttrB\005\210\301\024\310\001\022%"
    "\n\006refine\030\007 \003(\0132\016.proto_ff.AttrB\005\210\301\024\310\001\022+\n"
    "\004blue\030\010 \003(\0132\026.proto_ff.BlueStarAttrB\005\210\301\024"
    "\310\001\022\"\n\003god\030\t \003(\0132\016.proto_ff.AttrB\005\210\301\024\310\001\022&"
    "\n\007special\030\n \003(\0132\016.proto_ff.AttrB\005\210\301\024\310\001\022\022"
    "\n\nexpireTime\030\013 \001(\004\"6\n\rEquipSlotInfo\022\020\n\010s"
    "lot_pos\030\001 \001(\005\022\023\n\013total_score\030\002 \001(\003\"g\n\tEq"
    "uipInfo\022\013\n\003pos\030\001 \001(\005\022&\n\005equip\030\002 \001(\0132\027.pr"
    "oto_ff.ItemProtoInfo\022%\n\004slot\030\003 \001(\0132\027.pro"
    "to_ff.EquipSlotInfo\"<\n\017ItemSimpleProto\022\016"
    "\n\006itemid\030\001 \001(\004\022\013\n\003num\030\002 \001(\003\022\014\n\004bind\030\003 \001("
    "\005\"D\n\023MultItemSimpleProto\022-\n\004info\030\001 \003(\0132\031"
    ".proto_ff.ItemSimpleProtoB\004\210\301\024\n\"U\n\016MailP"
    "aramProto\022\r\n\005cfgid\030\001 \001(\004\022\033\n\tstr_param\030\002 "
    "\003(\014B\010\210\301\024\n\220\301\024 \022\027\n\tint_param\030\003 \003(\004B\004\210\301\024\n\"J"
    "\n\014MailStrProto\022\021\n\003str\030\001 \001(\014B\004\210\301\024\n\022\'\n\005par"
    "am\030\002 \001(\0132\030.proto_ff.MailParamProto\"E\n\022Ma"
    "ilAttachmentList\022/\n\010itemInfo\030\001 \003(\0132\027.pro"
    "to_ff.ItemProtoInfoB\004\210\301\024\n\"\206\002\n\010MailHead\022\016"
    "\n\006mailId\030\001 \001(\004\022\014\n\004type\030\002 \001(\r\022\024\n\014sendPlay"
    "erId\030\003 \001(\004\022\034\n\016sendPlayerName\030\004 \001(\014B\004\210\301\024\n"
    "\022\024\n\014destPlayerId\030\005 \001(\004\022%\n\005topic\030\006 \001(\0132\026."
    "proto_ff.MailStrProto\022\022\n\ncreateTime\030\007 \001("
    "\004\022\016\n\006status\030\010 \001(\r\022\r\n\005fetch\030\t \001(\005\022\022\n\nhas_"
    "attach\030\n \001(\005\022\022\n\nbegin_time\030\013 \001(\004\022\020\n\010end_"
    "time\030\014 \001(\004\"\216\002\n\010MailInfo\022$\n\010mailHead\030\001 \001("
    "\0132\022.proto_ff.MailHead\022\'\n\007content\030\002 \001(\0132\026"
    ".proto_ff.MailStrProto\022\014\n\004gold\030\003 \001(\004\022\017\n\007"
    "diamond\030\004 \001(\004\022\023\n\013bindDiamond\030\005 \001(\004\022\024\n\014ma"
    "giccrystal\030\006 \001(\004\022\020\n\010prestige\030\007 \001(\004\0224\n\016at"
    "tachmentList\030\010 \001(\0132\034.proto_ff.MailAttach"
    "mentList\022\016\n\006source\030\t \001(\005\022\021\n\tsourceVal\030\n "
    "\001(\003\"+\n\020WebMailItemProto\022\n\n\002id\030\001 \001(\004\022\013\n\003n"
    "um\030\002 \001(\004\"\271\002\n\020WebMailDataProto\022\016\n\006mailId\030"
    "\001 \001(\004\022\022\n\ncreateTime\030\002 \001(\004\022%\n\005topic\030\003 \001(\013"
    "2\026.proto_ff.MailStrProto\022\r\n\005fetch\030\004 \001(\005\022"
    "\'\n\007content\030\005 \001(\0132\026.proto_ff.MailStrProto"
    "\022\014\n\004gold\030\006 \001(\004\022\017\n\007diamond\030\007 \001(\004\022\023\n\013bindD"
    "iamond\030\010 \001(\004\022\022\n\narenaScore\030\t \001(\004\022\024\n\014magi"
    "ccrystal\030\n \001(\004\022\020\n\010prestige\030\013 \001(\004\0222\n\010item"
    "List\030\014 \003(\0132\032.proto_ff.WebMailItemProtoB\004"
    "\210\301\024\n\"U\n\017UseItemArgProto\022\021\n\tint_param\030\001 \001"
    "(\003\022\027\n\tstr_param\030\002 \001(\014B\004\210\301\024\n\022\026\n\010item_lst\030"
    "\003 \003(\004B\004\210\301\024\n\"T\n\027NotifyRoleFacadeCastRsp\022\016"
    "\n\006roleid\030\001 \001(\004\022)\n\006facade\030\002 \001(\0132\031.proto_f"
    "f.RoleFacadeProto\">\n\026FunctionUnlockInfoD"
    "ata\022\020\n\010unlockId\030\001 \001(\004\022\022\n\nget_reward\030\002 \001("
    "\010\"J\n\022FunctionUnlockInfo\0224\n\004data\030\001 \003(\0132 ."
    "proto_ff.FunctionUnlockInfoDataB\004\210\301\024d\"\367\002"
    "\n\022RolePlayerMiniInfo\022\020\n\010playerId\030\001 \001(\004\022\030"
    "\n\nplayerName\030\002 \001(\tB\004\220\301\024 \022\013\n\003zid\030\003 \001(\r\022\r\n"
    "\005level\030\005 \001(\r\022\021\n\tcloseness\030\006 \001(\r\022\022\n\nrecen"
    "tType\030\007 \001(\r\022\022\n\nrecentTime\030\010 \001(\004\022\014\n\004prof\030"
    "\t \001(\r\022\016\n\006teamId\030\n \001(\r\022\017\n\007unionId\030\013 \001(\r\022\022"
    "\n\nfightPower\030\014 \001(\004\022\023\n\013killMeTimes\030\r \001(\r\022"
    "\023\n\013offlineTime\030\016 \001(\004\022\025\n\007connect\030\017 \001(\tB\004\220"
    "\301\024 \022\016\n\006online\030\020 \001(\010\022\020\n\010vipLevel\030\021 \001(\r\022)\n"
    "\006facade\030\022 \001(\0132\031.proto_ff.RoleFacadeProto"
    "\022\r\n\005marry\030\023 \001(\r\"W\n\nFriendInfo\022\n\n\002id\030\001 \001("
    "\004\022\021\n\tcloseness\030\002 \001(\r\022\026\n\016todayCloseness\030\003"
    " \001(\r\022\022\n\nupdateTime\030\004 \001(\004\"4\n\017FriendApplyI"
    "nfo\022\n\n\002id\030\001 \001(\004\022\025\n\007connect\030\002 \001(\tB\004\220\301\024 \"3"
    "\n\020RelationHateInfo\022\n\n\002id\030\001 \001(\004\022\023\n\013killMe"
    "Times\030\002 \001(\r\"H\n\022RelationGiftRecord\022\020\n\010fri"
    "endId\030\001 \001(\004\022\016\n\006itemId\030\002 \001(\004\022\020\n\010isThanks\030"
    "\003 \001(\r\"\217\002\n\016RelationDBInfo\022.\n\nfriendList\030\001"
    " \003(\0132\024.proto_ff.FriendInfoB\004\210\301\024\n\022\027\n\tblac"
    "kList\030\002 \003(\004B\004\210\301\024\n\0222\n\010hateList\030\003 \003(\0132\032.pr"
    "oto_ff.RelationHateInfoB\004\210\301\024\n\0222\n\tapplyLi"
    "st\030\004 \003(\0132\031.proto_ff.FriendApplyInfoB\004\210\301\024"
    "\n\022\023\n\013friends_add\030\005 \001(\r\0227\n\013giftRecords\030\006 "
    "\003(\0132\034.proto_ff.RelationGiftRecordB\004\210\301\024\n\""
    "(\n\tDigPerfor\022\014\n\004type\030\001 \001(\r\022\r\n\005value\030\002 \001("
    "\003\"\217\001\n\tBuffProto\022\022\n\nbuff_index\030\001 \001(\004\022\017\n\007b"
    "uff_id\030\002 \001(\004\022\022\n\nrecver_cid\030\003 \001(\004\022\021\n\tleft"
    "_msec\030\004 \001(\005\022\020\n\010skill_id\030\005 \001(\004\022\021\n\tskill_l"
    "ev\030\006 \001(\005\022\021\n\tis_effect\030\007 \001(\005\"E\n\rBuffListP"
    "roto\022\013\n\003cid\030\001 \001(\004\022\'\n\004info\030\002 \003(\0132\023.proto_"
    "ff.BuffProtoB\004\210\301\024\n\":\n\rSkillPosProto\022\020\n\010s"
    "kill_id\030\001 \001(\004\022\013\n\003pos\030\002 \001(\r\022\n\n\002cd\030\003 \001(\005\"X"
    "\n\017SkillGroupProto\022\r\n\005group\030\001 \001(\r\022\n\n\002cd\030\002"
    " \001(\005\022*\n\003lst\030\003 \003(\0132\027.proto_ff.SkillPosPro"
    "toB\004\210\301\024\n\"D\n\023SkillGroupListProto\022-\n\004info\030"
    "\001 \003(\0132\031.proto_ff.SkillGroupProtoB\004\210\301\024\n\"<"
    "\n\021FacadeFantasyData\022\022\n\nfantasy_id\030\001 \001(\004\022"
    "\023\n\013fantasy_lev\030\002 \001(\r\"<\n\022FacadeFragmentDa"
    "ta\022\023\n\013fragment_id\030\001 \001(\004\022\021\n\tuse_times\030\002 \001"
    "(\r\"6\n\017FacadeSkillData\022\020\n\010skill_id\030\001 \001(\004\022"
    "\021\n\tskill_lev\030\002 \001(\r\"\177\n\022StatisticDataProto"
    "\022\r\n\005level\030\001 \001(\005\022\027\n\017total_login_day\030\002 \001(\r"
    "\022\021\n\ttotal_rmb\030\003 \001(\r\022\021\n\ttoday_rmb\030\004 \001(\r\022\033"
    "\n\023total_activityCount\030\005 \001(\r\"N\n\022GodRelics"
    "TaskEntry\022\023\n\013task_cfg_id\030\001 \001(\004\022\017\n\007cur_nu"
    "m\030\002 \001(\005\022\022\n\ntask_state\030\003 \001(\005\"\225\001\n\027GodRelic"
    "sTaskGroupEntry\022\024\n\014group_cfg_id\030\001 \001(\004\0222\n"
    "\006entrys\030\002 \003(\0132\034.proto_ff.GodRelicsTaskEn"
    "tryB\004\210\301\024\n\022\033\n\023normal_reward_state\030\003 \001(\005\022\023"
    "\n\013create_time\030\005 \001(\004\"n\n\016DailyTaskEntry\022\023\n"
    "\013task_cfg_id\030\001 \001(\004\022\017\n\007cur_num\030\002 \001(\005\022\022\n\nt"
    "ask_state\030\003 \001(\005\022\021\n\tlast_time\030\004 \001(\004\022\017\n\007bu"
    "y_num\030\005 \001(\005\"\227\001\n\023DailyTaskLimitEntry\022\023\n\013t"
    "ask_cfg_id\030\001 \001(\004\022\017\n\007cur_num\030\002 \001(\005\022\022\n\ntas"
    "k_state\030\003 \001(\005\022\021\n\tlast_time\030\004 \001(\004\022\017\n\007buy_"
    "num\030\005 \001(\005\022\021\n\tready_add\030\006 \001(\010\022\017\n\007is_open\030"
    "\007 \001(\010\"W\n\025DailyTaskBackDayEntry\022\020\n\010left_n"
    "um\030\001 \001(\005\022\031\n\021external_left_num\030\002 \001(\005\022\021\n\tl"
    "ast_time\030\003 \001(\003\"\243\001\n\022DailyTaskBackEntry\022\023\n"
    "\013task_cfg_id\030\001 \001(\004\022\022\n\ntask_state\030\003 \001(\005\0227"
    "\n\010day_data\030\004 \003(\0132\037.proto_ff.DailyTaskBac"
    "kDayEntryB\004\210\301\024\n\022\020\n\010left_num\030\005 \001(\005\022\031\n\021ext"
    "ernal_left_num\030\006 \001(\005\"8\n\024DailyTaskRewardE"
    "ntry\022\021\n\treward_id\030\001 \001(\004\022\r\n\005state\030\002 \001(\005\"\307"
    "\002\n\020DailyTaskAllData\0221\n\ttask_data\030\001 \003(\0132\030"
    ".proto_ff.DailyTaskEntryB\004\210\301\024\n\022<\n\017task_l"
    "imit_data\030\002 \003(\0132\035.proto_ff.DailyTaskLimi"
    "tEntryB\004\210\301\024\n\0225\n\tback_data\030\003 \003(\0132\034.proto_"
    "ff.DailyTaskBackEntryB\004\210\301\024\n\0229\n\013reward_da"
    "ta\030\004 \003(\0132\036.proto_ff.DailyTaskRewardEntry"
    "B\004\210\301\024\n\022\023\n\013daily_score\030\005 \001(\r\022\023\n\013daily_lev"
    "el\030\006 \001(\r\022\023\n\013create_time\030\007 \001(\004\022\021\n\tdaily_e"
    "xp\030\010 \001(\004\"J\n\036CharacterDBRecentSubmitMissi"
    "on\022\024\n\014mission_type\030\001 \001(\005\022\022\n\nmission_id\030\002"
    " \001(\004\"\247\001\n\032CharacterDBMissionItemInfo\022\014\n\004t"
    "ype\030\001 \001(\r\022\n\n\002id\030\002 \001(\004\022\024\n\014currentValue\030\003 "
    "\001(\r\022\022\n\nfinalValue\030\004 \001(\r\022\025\n\rcompletedFlag"
    "\030\005 \001(\010\022\016\n\006parma1\030\006 \001(\004\022\016\n\006parma2\030\007 \001(\004\022\016"
    "\n\006parma3\030\010 \001(\004\"\270\001\n\027CharacterDBMissionTra"
    "ck\022\021\n\tmissionId\030\001 \001(\004\022\021\n\tdynamicid\030\002 \001(\004"
    "\022\016\n\006status\030\003 \001(\r\022\031\n\021acceptMissionTime\030\004 "
    "\001(\004\022<\n\010itemInfo\030\005 \003(\0132$.proto_ff.Charact"
    "erDBMissionItemInfoB\004\210\301\024\n\022\016\n\006textid\030\006 \001("
    "\004\"W\n\030CharacterDBDyMissionInfo\022\024\n\014mission"
    "_type\030\001 \001(\005\022\021\n\tlastfresh\030\002 \001(\004\022\022\n\naccept"
    "_num\030\003 \001(\005\"\363\001\n\023CharacterDBTaskData\022=\n\014mi"
    "ssionTrack\030\001 \003(\0132!.proto_ff.CharacterDBM"
    "issionTrackB\004\210\301\024\n\0228\n\006dyinfo\030\002 \003(\0132\".prot"
    "o_ff.CharacterDBDyMissionInfoB\004\210\301\024\n\022\034\n\016a"
    "lready_submit\030\003 \003(\004B\004\210\301\024\n\022E\n\rrecent_subm"
    "it\030\004 \003(\0132(.proto_ff.CharacterDBRecentSub"
    "mitMissionB\004\210\301\024\n\"2\n\020NotifyVipDataRsp\022\013\n\003"
    "exp\030\001 \001(\005\022\021\n\003ids\030\002 \003(\005B\004\210\301\024\n*\\\n\007ECState\022"
    "\016\n\nstate_init\020\000\022\020\n\014state_normal\020\001\022\016\n\nsta"
    "te_dead\020\002\022\016\n\nstate_seat\020\003\022\017\n\013state_fight"
    "\020\004*\242\001\n\nEAttrGroup\022\024\n\020EAttrGroup_Level\020\001\022"
    "\024\n\020EAttrGroup_Skill\020\002\022\023\n\017EAttrGroup_Buff"
    "\020\003\022\024\n\020EAttrGroup_Equip\020\004\022\023\n\017EAttrGroup_G"
    "row\020\005\022\025\n\021EAttrGroup_Facade\020\006\022\021\n\rEAttrGro"
    "up_Gm\020\007*\216\003\n\010GrowType\022\024\n\020GrowType_clothes"
    "\020\001\022\023\n\017GrowType_weapon\020\002\022\024\n\020GrowType_eye_"
    "awn\020\003\022\025\n\021GrowType_face_des\020\004\022\026\n\022GrowType"
    "_waist_des\020\005\022\021\n\rGrowType_tail\020\006\022\025\n\021GrowT"
    "ype_bracelet\020\007\022\026\n\022GrowType_footprint\020\010\022\020"
    "\n\014GrowType_med\020\t\022\021\n\rGrowType_halo\020\n\022\030\n\024G"
    "rowType_proto_frame\020\013\022\023\n\017GrowType_bubble"
    "\020\014\022\021\n\rGrowType_head\020\r\022\026\n\022GrowType_WING_T"
    "YPE\020\016\022\032\n\026GrowType_TREASURE_TYPE\020\017\022\032\n\026Gro"
    "wType_ARTIFACT_TYPE\020\020\022\031\n\025GrowType_PARTNE"
    "R_TYPE\020\021*\316\026\n\rECreatureAttr\022\n\n\006A_NONE\020\000\022\014"
    "\n\010A_MAX_HP\020\001\022\t\n\005A_ATK\020\002\022\t\n\005A_DEF\020\003\022\017\n\013A_"
    "BRK_ARMOR\020\004\022\016\n\nA_FIVE_DAM\020\005\022\020\n\014A_FIVE_AR"
    "MOR\020\006\022\020\n\014A_THUMP_RATE\020\007\022\022\n\016A_THUMP_RESIS"
    "T\020\010\022\t\n\005A_SKY\020\t\022\r\n\tA_SKY_DAM\020\n\022\025\n\021A_SKY_R"
    "EDU_RESIST\020\013\022\020\n\014A_SKY_RESIST\020\014\022\016\n\nA_KILL"
    "_GOD\020\r\022\016\n\nA_GOD_BODY\020\016\022\021\n\rA_MORTAL_RATE\020"
    "\017\022\023\n\017A_MORTAL_RESIST\020\020\022\020\n\014A_FAIRY_RATE\020\021"
    "\022\022\n\016A_FAIRY_RESIST\020\022\022\016\n\nA_GOD_RATE\020\023\022\020\n\014"
    "A_GOD_RESIST\020\024\022\017\n\013A_CRIT_RATE\020\025\022\025\n\021A_CRI"
    "T_RESIT_RATE\020\026\022\016\n\nA_CRIT_DAM\020\027\022\017\n\013A_CRIT"
    "_REDU\020\030\022\021\n\rA_BATTER_RATE\020\031\022\023\n\017A_BATTER_R"
    "ESIST\020\032\022\020\n\014A_BATTER_DAM\020\033\022\021\n\rA_BATTER_RE"
    "DU\020\034\022\022\n\016A_BRKDOWN_RATE\020\035\022\024\n\020A_BRKDOWN_RE"
    "SIST\020\036\022\r\n\tA_DAM_ADD\020\037\022\016\n\nA_DAM_REDU\020 \022\r\n"
    "\tA_ALL_ADD\020!\022\016\n\nA_ALL_REDU\020\"\022\017\n\013A_SKILL_"
    "ADD\020#\022\020\n\014A_SKILL_REDU\020$\022\021\n\rA_REBOUND_DAM"
    "\020%\022\016\n\nA_HP_STEAL\020&\022\020\n\014A_DODGE_RATE\020\'\022\016\n\n"
    "A_HIT_RATE\020(\022\016\n\nA_BLK_RATE\020)\022\022\n\016A_BRK_BL"
    "K_RATE\020*\022\016\n\nA_BLK_FREE\020+\022\020\n\014A_BLK_PIERCE"
    "\020,\022\017\n\013A_REL_ARMOR\020-\022\r\n\tA_REL_DAM\020.\022\021\n\rA_"
    "FIVE_RESIST\020/\022\026\n\022A_FIVE_RESIST_REDU\0200\022\016\n"
    "\nA_FIRE_ADD\0201\022\017\n\013A_FIRE_REDU\0202\022\r\n\tA_ICE_"
    "ADD\0203\022\016\n\nA_ICE_REDU\0204\022\021\n\rA_THUNDER_ADD\0205"
    "\022\021\n\rA_THUNDER_RDU\0206\022\021\n\rA_PLAYER_REDU\0207\022\020"
    "\n\014A_PLAYER_ADD\0208\022\021\n\rA_LEADER_REDU\0209\022\020\n\014A"
    "_LEADER_ADD\020:\022\016\n\nA_MON_REDU\020;\022\r\n\tA_MON_A"
    "DD\020<\022\016\n\nA_VAR_REDU\020=\022\r\n\tA_VAR_ADD\020>\022\024\n\020A"
    "_UNUSUAL_RESIST\020\?\022\021\n\rA_UNUSUAL_HIT\020@\022\020\n\014"
    "A_HP_RECOVER\020A\022\021\n\rA_UNUSUAL_ADD\020B\022\021\n\rA_F"
    "IX_RECOVER\020C\022\021\n\rA_HIGH_HP_ADD\020D\022\024\n\020A_REC"
    "OVER_HP_ADD\020E\022\016\n\nA_WEEK_ADD\020F\022\020\n\014A_MAG_S"
    "HIELD\020G\022\r\n\tA_MAG_ATK\020H\022\r\n\tA_MAG_DEF\020I\022\r\n"
    "\tA_MAG_DAM\020J\022\024\n\020A_MAG_SHIELD_ADD\020K\022\016\n\nA_"
    "MAG_REDU\020L\022\021\n\rA_MAG_ATK_ADD\020M\022\021\n\rA_MAG_D"
    "EF_ADD\020N\022\022\n\016A_MAG_VAR_COOL\020O\022\020\n\014A_GOD_SH"
    "IELD\020P\022\014\n\010A_SHIELD\020Q\022\016\n\nA_VAR_TIME\020R\022\017\n\013"
    "A_COOL_TIME\020S\022\013\n\007A_SPEED\020T\022\014\n\010A_HP_ADD\020U"
    "\022\r\n\tA_ATK_ADD\020V\022\r\n\tA_DEF_ADD\020W\022\017\n\013A_ARMO"
    "R_ADD\020X\022\022\n\016A_FIVE_DAM_ADD\020Y\022\024\n\020A_FIVE_AR"
    "MOR_ADD\020Z\022\n\n\006A_DROP\020[\022\r\n\tA_EXP_ADD\020\\\022\017\n\013"
    "A_GOLD_DROP\020]\022\021\n\rA_LEV_ALL_ADD\020^\022\r\n\tA_SK"
    "Y_ADD\020_\022\022\n\016A_GONG_ABS_ADD\020`\022\022\n\016A_MERI_AB"
    "S_ADD\020a\022\022\n\016A_WING_ALL_ADD\020b\022\030\n\024A_MAG_WEA"
    "PON_ALL_ADD\020c\022\026\n\022A_ARTIFACT_ALL_ADD\020d\022\023\n"
    "\017A_SWORD_ALL_ADD\020e\022\021\n\rA_GOD_ALL_ADD\020f\022\023\n"
    "\017A_MOUNT_ALL_ADD\020g\022\023\n\017A_STONE_ALL_ADD\020h\022"
    "\020\n\014A_GOD_EQU_BA\020i\022\017\n\013A_WEAPON_BA\020j\022\024\n\020A_"
    "WEAPON_WAKE_BA\020k\022\021\n\rA_GODS_QI_SHA\020l\022\021\n\rA"
    "_GODS_PO_JUN\020m\022\021\n\rA_GODS_ZI_WEI\020n\022\020\n\014A_G"
    "ODS_WU_QU\020o\022\023\n\017A_GODS_TAI_YANG\020p\022\024\n\020A_GO"
    "DS_LIAN_ZHEN\020q\022\023\n\017A_GODS_TAN_LANG\020r\022\022\n\016A"
    "_GODS_TIAN_FU\020s\022\025\n\021A_GODS_TIAN_XIANG\020t\022\021"
    "\n\rA_GODS_JU_MEN\020u\022\030\n\024A_MAIN_WEAPON_BA_AD"
    "D\020v\022\032\n\026A_DEPUTY_WEAPON_BA_ADD\020w\022\020\n\014A_CAP"
    "_BA_ADD\020x\022\022\n\016A_CLOTH_BA_ADD\020y\022\021\n\rA_HAND_"
    "BA_ADD\020z\022\021\n\rA_BELT_BA_ADD\020{\022\021\n\rA_SHOE_BA"
    "_ADD\020|\022\021\n\rA_NECK_BA_ADD\020}\022\025\n\021A_BRACELET_"
    "BA_ADD\020~\022\021\n\rA_RING_BA_ADD\020\177\022\026\n\021A_EQU_WAK"
    "E_BA_ADD\020\200\001\022\031\n\024A_SUIT_ZHU_MO_BA_ADD\020\201\001\022\033"
    "\n\026A_SUIT_ZHU_XIAN_BA_ADD\020\202\001\022\033\n\026A_SUIT_ZH"
    "U_SHEN_BA_ADD\020\203\001\022\025\n\020A_EQU_FLY_BA_ADD\020\204\001\022"
    "\023\n\016A_EIGHT_BA_ADD\020\205\001\022\027\n\022A_EIGHT_EYE_BA_A"
    "DD\020\206\001\022\021\n\014A_COM_SHIELD\020\207\001\022\020\n\013A_FIGHT_END\020"
    "\310\001\022\013\n\006A_GOLD\020\311\001\022\014\n\007A_MAGIC\020\312\001\022\n\n\005A_DIA\020\313"
    "\001\022\r\n\010A_BD_DIA\020\314\001\022\017\n\nA_PRESTIGE\020\315\001\022\014\n\007A_F"
    "IGHT\020\316\001\022\n\n\005A_EXP\020\317\001\022\r\n\010A_CUR_HP\020\320\001\022\013\n\006A_"
    "PROF\020\321\001\022\014\n\007A_LEVEL\020\322\001\022\020\n\013A_VIP_LEVEL\020\323\001\022"
    "\016\n\tA_TEAM_ID\020\324\001\022\022\n\rA_TEAM_LEADER\020\325\001\022\023\n\016A"
    "_FRIEND_COUNT\020\334\001\022\022\n\rA_HANGUP_TIME\020\335\001\022\024\n\017"
    "A_WORLD_EXP_ADD\020\336\001\022\021\n\014A_FUSHI_TIME\020\337\001\022\r\n"
    "\010A_DUP_ID\020\340\001\022\016\n\tA_CAMP_ID\020\342\001\022\020\n\013A_DAILY_"
    "EXP\020\343\001\022\021\n\014A_COMMON_END\020\220\003*\225\002\n\rDigPerforT"
    "ype\022\t\n\005addhp\020\001\022\014\n\010reducehp\020\002\022\010\n\004crit\020\003\022\t"
    "\n\005dodge\020\004\022\n\n\006absorb\020\005\022\020\n\014normalimmune\020\006\022"
    "\016\n\nfiveimmune\020\007\022\r\n\tgodimmune\020\010\022\n\n\006injury"
    "\020\t\022\016\n\ninvincible\020\n\022\021\n\reffectivearea\020\013\022\t\n"
    "\005steal\020\014\022\010\n\004kill\020\r\022\022\n\016bosscountlimit\020\016\022\r"
    "\n\tbreakdown\020\017\022\t\n\005conti\020\020\022\010\n\004pet1\020\021\022\010\n\004pe"
    "t2\020\022\022\010\n\004pet3\020\023\022\t\n\005block\020\024*\221\001\n\030EN_GODRELI"
    "CS_TASK_STATUS\022\'\n#EN_GODRELICS_TASK_STAT"
    "US_NOT_FINISH\020\000\022#\n\037EN_GODRELICS_TASK_STA"
    "TUS_FINISH\020\001\022\'\n#EN_GODRELICS_TASK_STATUS"
    "_GET_REWARD\020\002*\330\001\n\036EN_GODRELICS_GROUP_TAS"
    "K_STATUS\022-\n)EN_GODRELICS_GROUP_TASK_STAT"
    "US_NOT_UNLOCK\020\000\022-\n)EN_GODRELICS_GROUP_TA"
    "SK_STATUS_NOT_FINISH\020\001\022)\n%EN_GODRELICS_G"
    "ROUP_TASK_STATUS_FINISH\020\002\022-\n)EN_GODRELIC"
    "S_GROUP_TASK_STATUS_GET_REWARD\020\003*\201\001\n\024EN_"
    "DAILY_TASK_STATUS\022#\n\037EN_DAILY_TASK_STATU"
    "S_NOT_UNLOCK\020\000\022#\n\037EN_DAILY_TASK_STATUS_N"
    "OT_FINISH\020\001\022\037\n\033EN_DAILY_TASK_STATUS_FINI"
    "SH\020\002*\224\001\n\033EN_DAILY_TASK_REWARD_STATUS\022\'\n#"
    "EN_DAILY_TASK_REWARD_STATUS_NOT_GET\020\000\022\'\n"
    "#EN_DAILY_TASK_REWARD_STATUS_CAN_GET\020\001\022#"
    "\n\037EN_DAILY_TASK_REWARD_STATUS_GET\020\002", 11835);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Com.proto", &protobuf_RegisterTypes);
  EmptyMessage::default_instance_ = new EmptyMessage();
  ComPair::default_instance_ = new ComPair();
  ComPair64::default_instance_ = new ComPair64();
  ComPairBool::default_instance_ = new ComPairBool();
  Vector3PB::default_instance_ = new Vector3PB();
  Vector2PB::default_instance_ = new Vector2PB();
  Attr64::default_instance_ = new Attr64();
  RoleFacadeProto::default_instance_ = new RoleFacadeProto();
  RoleListDBProto::default_instance_ = new RoleListDBProto();
  LoginRoleProto::default_instance_ = new LoginRoleProto();
  LoginSyncProto::default_instance_ = new LoginSyncProto();
  CenterRoleProto::default_instance_ = new CenterRoleProto();
  SocialRoleProto::default_instance_ = new SocialRoleProto();
  Attr::default_instance_ = new Attr();
  BlueStarAttr::default_instance_ = new BlueStarAttr();
  ItemProtoInfo::default_instance_ = new ItemProtoInfo();
  EquipSlotInfo::default_instance_ = new EquipSlotInfo();
  EquipInfo::default_instance_ = new EquipInfo();
  ItemSimpleProto::default_instance_ = new ItemSimpleProto();
  MultItemSimpleProto::default_instance_ = new MultItemSimpleProto();
  MailParamProto::default_instance_ = new MailParamProto();
  MailStrProto::default_instance_ = new MailStrProto();
  MailAttachmentList::default_instance_ = new MailAttachmentList();
  MailHead::default_instance_ = new MailHead();
  MailInfo::default_instance_ = new MailInfo();
  WebMailItemProto::default_instance_ = new WebMailItemProto();
  WebMailDataProto::default_instance_ = new WebMailDataProto();
  UseItemArgProto::default_instance_ = new UseItemArgProto();
  NotifyRoleFacadeCastRsp::default_instance_ = new NotifyRoleFacadeCastRsp();
  FunctionUnlockInfoData::default_instance_ = new FunctionUnlockInfoData();
  FunctionUnlockInfo::default_instance_ = new FunctionUnlockInfo();
  RolePlayerMiniInfo::default_instance_ = new RolePlayerMiniInfo();
  FriendInfo::default_instance_ = new FriendInfo();
  FriendApplyInfo::default_instance_ = new FriendApplyInfo();
  RelationHateInfo::default_instance_ = new RelationHateInfo();
  RelationGiftRecord::default_instance_ = new RelationGiftRecord();
  RelationDBInfo::default_instance_ = new RelationDBInfo();
  DigPerfor::default_instance_ = new DigPerfor();
  BuffProto::default_instance_ = new BuffProto();
  BuffListProto::default_instance_ = new BuffListProto();
  SkillPosProto::default_instance_ = new SkillPosProto();
  SkillGroupProto::default_instance_ = new SkillGroupProto();
  SkillGroupListProto::default_instance_ = new SkillGroupListProto();
  FacadeFantasyData::default_instance_ = new FacadeFantasyData();
  FacadeFragmentData::default_instance_ = new FacadeFragmentData();
  FacadeSkillData::default_instance_ = new FacadeSkillData();
  StatisticDataProto::default_instance_ = new StatisticDataProto();
  GodRelicsTaskEntry::default_instance_ = new GodRelicsTaskEntry();
  GodRelicsTaskGroupEntry::default_instance_ = new GodRelicsTaskGroupEntry();
  DailyTaskEntry::default_instance_ = new DailyTaskEntry();
  DailyTaskLimitEntry::default_instance_ = new DailyTaskLimitEntry();
  DailyTaskBackDayEntry::default_instance_ = new DailyTaskBackDayEntry();
  DailyTaskBackEntry::default_instance_ = new DailyTaskBackEntry();
  DailyTaskRewardEntry::default_instance_ = new DailyTaskRewardEntry();
  DailyTaskAllData::default_instance_ = new DailyTaskAllData();
  CharacterDBRecentSubmitMission::default_instance_ = new CharacterDBRecentSubmitMission();
  CharacterDBMissionItemInfo::default_instance_ = new CharacterDBMissionItemInfo();
  CharacterDBMissionTrack::default_instance_ = new CharacterDBMissionTrack();
  CharacterDBDyMissionInfo::default_instance_ = new CharacterDBDyMissionInfo();
  CharacterDBTaskData::default_instance_ = new CharacterDBTaskData();
  NotifyVipDataRsp::default_instance_ = new NotifyVipDataRsp();
  EmptyMessage::default_instance_->InitAsDefaultInstance();
  ComPair::default_instance_->InitAsDefaultInstance();
  ComPair64::default_instance_->InitAsDefaultInstance();
  ComPairBool::default_instance_->InitAsDefaultInstance();
  Vector3PB::default_instance_->InitAsDefaultInstance();
  Vector2PB::default_instance_->InitAsDefaultInstance();
  Attr64::default_instance_->InitAsDefaultInstance();
  RoleFacadeProto::default_instance_->InitAsDefaultInstance();
  RoleListDBProto::default_instance_->InitAsDefaultInstance();
  LoginRoleProto::default_instance_->InitAsDefaultInstance();
  LoginSyncProto::default_instance_->InitAsDefaultInstance();
  CenterRoleProto::default_instance_->InitAsDefaultInstance();
  SocialRoleProto::default_instance_->InitAsDefaultInstance();
  Attr::default_instance_->InitAsDefaultInstance();
  BlueStarAttr::default_instance_->InitAsDefaultInstance();
  ItemProtoInfo::default_instance_->InitAsDefaultInstance();
  EquipSlotInfo::default_instance_->InitAsDefaultInstance();
  EquipInfo::default_instance_->InitAsDefaultInstance();
  ItemSimpleProto::default_instance_->InitAsDefaultInstance();
  MultItemSimpleProto::default_instance_->InitAsDefaultInstance();
  MailParamProto::default_instance_->InitAsDefaultInstance();
  MailStrProto::default_instance_->InitAsDefaultInstance();
  MailAttachmentList::default_instance_->InitAsDefaultInstance();
  MailHead::default_instance_->InitAsDefaultInstance();
  MailInfo::default_instance_->InitAsDefaultInstance();
  WebMailItemProto::default_instance_->InitAsDefaultInstance();
  WebMailDataProto::default_instance_->InitAsDefaultInstance();
  UseItemArgProto::default_instance_->InitAsDefaultInstance();
  NotifyRoleFacadeCastRsp::default_instance_->InitAsDefaultInstance();
  FunctionUnlockInfoData::default_instance_->InitAsDefaultInstance();
  FunctionUnlockInfo::default_instance_->InitAsDefaultInstance();
  RolePlayerMiniInfo::default_instance_->InitAsDefaultInstance();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  FriendApplyInfo::default_instance_->InitAsDefaultInstance();
  RelationHateInfo::default_instance_->InitAsDefaultInstance();
  RelationGiftRecord::default_instance_->InitAsDefaultInstance();
  RelationDBInfo::default_instance_->InitAsDefaultInstance();
  DigPerfor::default_instance_->InitAsDefaultInstance();
  BuffProto::default_instance_->InitAsDefaultInstance();
  BuffListProto::default_instance_->InitAsDefaultInstance();
  SkillPosProto::default_instance_->InitAsDefaultInstance();
  SkillGroupProto::default_instance_->InitAsDefaultInstance();
  SkillGroupListProto::default_instance_->InitAsDefaultInstance();
  FacadeFantasyData::default_instance_->InitAsDefaultInstance();
  FacadeFragmentData::default_instance_->InitAsDefaultInstance();
  FacadeSkillData::default_instance_->InitAsDefaultInstance();
  StatisticDataProto::default_instance_->InitAsDefaultInstance();
  GodRelicsTaskEntry::default_instance_->InitAsDefaultInstance();
  GodRelicsTaskGroupEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskLimitEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskBackDayEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskBackEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskRewardEntry::default_instance_->InitAsDefaultInstance();
  DailyTaskAllData::default_instance_->InitAsDefaultInstance();
  CharacterDBRecentSubmitMission::default_instance_->InitAsDefaultInstance();
  CharacterDBMissionItemInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBMissionTrack::default_instance_->InitAsDefaultInstance();
  CharacterDBDyMissionInfo::default_instance_->InitAsDefaultInstance();
  CharacterDBTaskData::default_instance_->InitAsDefaultInstance();
  NotifyVipDataRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Com_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Com_2eproto {
  StaticDescriptorInitializer_Com_2eproto() {
    protobuf_AddDesc_Com_2eproto();
  }
} static_descriptor_initializer_Com_2eproto_;
const ::google::protobuf::EnumDescriptor* ECState_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECState_descriptor_;
}
bool ECState_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAttrGroup_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EAttrGroup_descriptor_;
}
bool EAttrGroup_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GrowType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowType_descriptor_;
}
bool GrowType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECreatureAttr_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECreatureAttr_descriptor_;
}
bool ECreatureAttr_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 226:
    case 227:
    case 400:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DigPerforType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DigPerforType_descriptor_;
}
bool DigPerforType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EN_GODRELICS_TASK_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_GODRELICS_TASK_STATUS_descriptor_;
}
bool EN_GODRELICS_TASK_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EN_GODRELICS_GROUP_TASK_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_GODRELICS_GROUP_TASK_STATUS_descriptor_;
}
bool EN_GODRELICS_GROUP_TASK_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EN_DAILY_TASK_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_DAILY_TASK_STATUS_descriptor_;
}
bool EN_DAILY_TASK_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EN_DAILY_TASK_REWARD_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EN_DAILY_TASK_REWARD_STATUS_descriptor_;
}
bool EN_DAILY_TASK_REWARD_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

EmptyMessage::EmptyMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmptyMessage::InitAsDefaultInstance() {
}

EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMessage::~EmptyMessage() {
  SharedDtor();
}

void EmptyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMessage_descriptor_;
}

const EmptyMessage& EmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

EmptyMessage* EmptyMessage::default_instance_ = NULL;

EmptyMessage* EmptyMessage::New() const {
  return new EmptyMessage;
}

void EmptyMessage::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void EmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmptyMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmptyMessage::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmptyMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmptyMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {

  return true;
}

void EmptyMessage::Swap(EmptyMessage* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMessage_descriptor_;
  metadata.reflection = EmptyMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPair::kKeyFieldNumber;
const int ComPair::kValueFieldNumber;
#endif  // !_MSC_VER

ComPair::ComPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPair::InitAsDefaultInstance() {
}

ComPair::ComPair(const ComPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPair::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPair::~ComPair() {
  SharedDtor();
}

void ComPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPair_descriptor_;
}

const ComPair& ComPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPair* ComPair::default_instance_ = NULL;

ComPair* ComPair::New() const {
  return new ComPair;
}

void ComPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPair::MergeFrom(const ComPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPair::CopyFrom(const ComPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPair::IsInitialized() const {

  return true;
}

void ComPair::Swap(ComPair* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPair_descriptor_;
  metadata.reflection = ComPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPair64::kKeyFieldNumber;
const int ComPair64::kValueFieldNumber;
#endif  // !_MSC_VER

ComPair64::ComPair64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPair64::InitAsDefaultInstance() {
}

ComPair64::ComPair64(const ComPair64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPair64::SharedCtor() {
  _cached_size_ = 0;
  key_ = GOOGLE_ULONGLONG(0);
  value_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPair64::~ComPair64() {
  SharedDtor();
}

void ComPair64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPair64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPair64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPair64_descriptor_;
}

const ComPair64& ComPair64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPair64* ComPair64::default_instance_ = NULL;

ComPair64* ComPair64::New() const {
  return new ComPair64;
}

void ComPair64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = GOOGLE_ULONGLONG(0);
    value_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPair64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPair64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->key(), output);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPair64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->key(), target);
  }

  // optional uint64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPair64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key());
    }

    // optional uint64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPair64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPair64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPair64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPair64::MergeFrom(const ComPair64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPair64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPair64::CopyFrom(const ComPair64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPair64::IsInitialized() const {

  return true;
}

void ComPair64::Swap(ComPair64* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPair64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPair64_descriptor_;
  metadata.reflection = ComPair64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComPairBool::kKeyFieldNumber;
const int ComPairBool::kValueFieldNumber;
#endif  // !_MSC_VER

ComPairBool::ComPairBool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComPairBool::InitAsDefaultInstance() {
}

ComPairBool::ComPairBool(const ComPairBool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComPairBool::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0u;
  value_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComPairBool::~ComPairBool() {
  SharedDtor();
}

void ComPairBool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComPairBool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComPairBool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComPairBool_descriptor_;
}

const ComPairBool& ComPairBool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ComPairBool* ComPairBool::default_instance_ = NULL;

ComPairBool* ComPairBool::New() const {
  return new ComPairBool;
}

void ComPairBool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0u;
    value_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComPairBool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional bool value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComPairBool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key(), output);
  }

  // optional bool value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComPairBool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->key(), target);
  }

  // optional bool value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComPairBool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->key());
    }

    // optional bool value = 2;
    if (has_value()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComPairBool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComPairBool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComPairBool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComPairBool::MergeFrom(const ComPairBool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComPairBool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComPairBool::CopyFrom(const ComPairBool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComPairBool::IsInitialized() const {

  return true;
}

void ComPairBool::Swap(ComPairBool* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComPairBool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComPairBool_descriptor_;
  metadata.reflection = ComPairBool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector3PB::kXFieldNumber;
const int Vector3PB::kYFieldNumber;
const int Vector3PB::kZFieldNumber;
#endif  // !_MSC_VER

Vector3PB::Vector3PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3PB::InitAsDefaultInstance() {
}

Vector3PB::Vector3PB(const Vector3PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3PB::~Vector3PB() {
  SharedDtor();
}

void Vector3PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3PB_descriptor_;
}

const Vector3PB& Vector3PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Vector3PB* Vector3PB::default_instance_ = NULL;

Vector3PB* Vector3PB::New() const {
  return new Vector3PB;
}

void Vector3PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3PB::MergeFrom(const Vector3PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3PB::CopyFrom(const Vector3PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3PB::IsInitialized() const {

  return true;
}

void Vector3PB::Swap(Vector3PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3PB_descriptor_;
  metadata.reflection = Vector3PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector2PB::kXFieldNumber;
const int Vector2PB::kYFieldNumber;
#endif  // !_MSC_VER

Vector2PB::Vector2PB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector2PB::InitAsDefaultInstance() {
}

Vector2PB::Vector2PB(const Vector2PB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector2PB::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector2PB::~Vector2PB() {
  SharedDtor();
}

void Vector2PB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector2PB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2PB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector2PB_descriptor_;
}

const Vector2PB& Vector2PB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Vector2PB* Vector2PB::default_instance_ = NULL;

Vector2PB* Vector2PB::New() const {
  return new Vector2PB;
}

void Vector2PB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector2PB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector2PB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector2PB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector2PB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2PB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector2PB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector2PB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector2PB::MergeFrom(const Vector2PB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector2PB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2PB::CopyFrom(const Vector2PB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2PB::IsInitialized() const {

  return true;
}

void Vector2PB::Swap(Vector2PB* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector2PB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector2PB_descriptor_;
  metadata.reflection = Vector2PB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attr64::kIdFieldNumber;
const int Attr64::kValueFieldNumber;
#endif  // !_MSC_VER

Attr64::Attr64()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attr64::InitAsDefaultInstance() {
}

Attr64::Attr64(const Attr64& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attr64::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attr64::~Attr64() {
  SharedDtor();
}

void Attr64::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attr64::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr64::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr64_descriptor_;
}

const Attr64& Attr64::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Attr64* Attr64::default_instance_ = NULL;

Attr64* Attr64::New() const {
  return new Attr64;
}

void Attr64::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attr64::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attr64::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attr64::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attr64::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr64::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attr64* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attr64*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attr64::MergeFrom(const Attr64& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attr64::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr64::CopyFrom(const Attr64& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr64::IsInitialized() const {

  return true;
}

void Attr64::Swap(Attr64* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attr64::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr64_descriptor_;
  metadata.reflection = Attr64_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleFacadeProto::kGrowFacadeFieldNumber;
const int RoleFacadeProto::kColorFieldNumber;
#endif  // !_MSC_VER

RoleFacadeProto::RoleFacadeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleFacadeProto::InitAsDefaultInstance() {
}

RoleFacadeProto::RoleFacadeProto(const RoleFacadeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleFacadeProto::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFacadeProto::~RoleFacadeProto() {
  SharedDtor();
}

void RoleFacadeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleFacadeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFacadeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFacadeProto_descriptor_;
}

const RoleFacadeProto& RoleFacadeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RoleFacadeProto* RoleFacadeProto::default_instance_ = NULL;

RoleFacadeProto* RoleFacadeProto::New() const {
  return new RoleFacadeProto;
}

void RoleFacadeProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    color_ = 0;
  }
  growfacade_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleFacadeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Attr64 growFacade = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_growFacade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_growfacade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_growFacade;
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }

      // optional int32 color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleFacadeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Attr64 growFacade = 1;
  for (int i = 0; i < this->growfacade_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->growfacade(i), output);
  }

  // optional int32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->color(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleFacadeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Attr64 growFacade = 1;
  for (int i = 0; i < this->growfacade_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->growfacade(i), target);
  }

  // optional int32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->color(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleFacadeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

  }
  // repeated .proto_ff.Attr64 growFacade = 1;
  total_size += 1 * this->growfacade_size();
  for (int i = 0; i < this->growfacade_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->growfacade(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFacadeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleFacadeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleFacadeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleFacadeProto::MergeFrom(const RoleFacadeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  growfacade_.MergeFrom(from.growfacade_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleFacadeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFacadeProto::CopyFrom(const RoleFacadeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFacadeProto::IsInitialized() const {

  return true;
}

void RoleFacadeProto::Swap(RoleFacadeProto* other) {
  if (other != this) {
    growfacade_.Swap(&other->growfacade_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleFacadeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFacadeProto_descriptor_;
  metadata.reflection = RoleFacadeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleListDBProto::kCidFieldNumber;
const int RoleListDBProto::kNameFieldNumber;
const int RoleListDBProto::kProfFieldNumber;
const int RoleListDBProto::kLevelFieldNumber;
const int RoleListDBProto::kFightFieldNumber;
const int RoleListDBProto::kCreatetimeFieldNumber;
const int RoleListDBProto::kFacadeFieldNumber;
const int RoleListDBProto::kSceneidFieldNumber;
const int RoleListDBProto::kMapidFieldNumber;
const int RoleListDBProto::kPosFieldNumber;
const int RoleListDBProto::kLastsceneidFieldNumber;
const int RoleListDBProto::kLastmapidFieldNumber;
const int RoleListDBProto::kLastposFieldNumber;
#endif  // !_MSC_VER

RoleListDBProto::RoleListDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleListDBProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  lastpos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

RoleListDBProto::RoleListDBProto(const RoleListDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleListDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  lastsceneid_ = GOOGLE_ULONGLONG(0);
  lastmapid_ = GOOGLE_ULONGLONG(0);
  lastpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleListDBProto::~RoleListDBProto() {
  SharedDtor();
}

void RoleListDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
    delete pos_;
    delete lastpos_;
  }
}

void RoleListDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleListDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleListDBProto_descriptor_;
}

const RoleListDBProto& RoleListDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RoleListDBProto* RoleListDBProto::default_instance_ = NULL;

RoleListDBProto* RoleListDBProto::New() const {
  return new RoleListDBProto;
}

void RoleListDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    sceneid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mapid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    lastsceneid_ = GOOGLE_ULONGLONG(0);
    lastmapid_ = GOOGLE_ULONGLONG(0);
    if (has_lastpos()) {
      if (lastpos_ != NULL) lastpos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleListDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_pos;
        break;
      }

      // optional .proto_ff.Vector3PB pos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_lastsceneid;
        break;
      }

      // optional uint64 lastsceneid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastsceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsceneid_)));
          set_has_lastsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_lastmapid;
        break;
      }

      // optional uint64 lastmapid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_lastpos;
        break;
      }

      // optional .proto_ff.Vector3PB lastpos = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastpos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleListDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prof(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->createtime(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->facade(), output);
  }

  // optional uint64 sceneid = 8;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->sceneid(), output);
  }

  // optional uint64 mapid = 9;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->mapid(), output);
  }

  // optional .proto_ff.Vector3PB pos = 10;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->pos(), output);
  }

  // optional uint64 lastsceneid = 11;
  if (has_lastsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->lastsceneid(), output);
  }

  // optional uint64 lastmapid = 12;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->lastmapid(), output);
  }

  // optional .proto_ff.Vector3PB lastpos = 13;
  if (has_lastpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->lastpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleListDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prof(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->createtime(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->facade(), target);
  }

  // optional uint64 sceneid = 8;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->sceneid(), target);
  }

  // optional uint64 mapid = 9;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->mapid(), target);
  }

  // optional .proto_ff.Vector3PB pos = 10;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->pos(), target);
  }

  // optional uint64 lastsceneid = 11;
  if (has_lastsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->lastsceneid(), target);
  }

  // optional uint64 lastmapid = 12;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->lastmapid(), target);
  }

  // optional .proto_ff.Vector3PB lastpos = 13;
  if (has_lastpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->lastpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleListDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 createtime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional .proto_ff.RoleFacadeProto facade = 7;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional uint64 sceneid = 8;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 mapid = 9;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional .proto_ff.Vector3PB pos = 10;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional uint64 lastsceneid = 11;
    if (has_lastsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsceneid());
    }

    // optional uint64 lastmapid = 12;
    if (has_lastmapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastmapid());
    }

    // optional .proto_ff.Vector3PB lastpos = 13;
    if (has_lastpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleListDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleListDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleListDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleListDBProto::MergeFrom(const RoleListDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_lastsceneid()) {
      set_lastsceneid(from.lastsceneid());
    }
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
    if (from.has_lastpos()) {
      mutable_lastpos()->::proto_ff::Vector3PB::MergeFrom(from.lastpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleListDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleListDBProto::CopyFrom(const RoleListDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListDBProto::IsInitialized() const {

  return true;
}

void RoleListDBProto::Swap(RoleListDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(createtime_, other->createtime_);
    std::swap(facade_, other->facade_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(lastsceneid_, other->lastsceneid_);
    std::swap(lastmapid_, other->lastmapid_);
    std::swap(lastpos_, other->lastpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleListDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleListDBProto_descriptor_;
  metadata.reflection = RoleListDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRoleProto::kCidFieldNumber;
const int LoginRoleProto::kNameFieldNumber;
const int LoginRoleProto::kProfFieldNumber;
const int LoginRoleProto::kLevelFieldNumber;
const int LoginRoleProto::kFightFieldNumber;
const int LoginRoleProto::kCreatetimeFieldNumber;
const int LoginRoleProto::kFacadeFieldNumber;
#endif  // !_MSC_VER

LoginRoleProto::LoginRoleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRoleProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

LoginRoleProto::LoginRoleProto(const LoginRoleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRoleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRoleProto::~LoginRoleProto() {
  SharedDtor();
}

void LoginRoleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void LoginRoleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRoleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRoleProto_descriptor_;
}

const LoginRoleProto& LoginRoleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

LoginRoleProto* LoginRoleProto::default_instance_ = NULL;

LoginRoleProto* LoginRoleProto::New() const {
  return new LoginRoleProto;
}

void LoginRoleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRoleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_createtime;
        break;
      }

      // optional uint64 createtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRoleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 prof = 3;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->prof(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->createtime(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->facade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRoleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 prof = 3;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->prof(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  // optional uint64 createtime = 6;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->createtime(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 7;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->facade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRoleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 prof = 3;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 createtime = 6;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional .proto_ff.RoleFacadeProto facade = 7;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRoleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRoleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRoleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRoleProto::MergeFrom(const LoginRoleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRoleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRoleProto::CopyFrom(const LoginRoleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRoleProto::IsInitialized() const {

  return true;
}

void LoginRoleProto::Swap(LoginRoleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(createtime_, other->createtime_);
    std::swap(facade_, other->facade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRoleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRoleProto_descriptor_;
  metadata.reflection = LoginRoleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginSyncProto::kGuildIdFieldNumber;
const int LoginSyncProto::kGuildNameFieldNumber;
const int LoginSyncProto::kGuildDutyFieldNumber;
const int LoginSyncProto::kGuildLeaderFieldNumber;
const int LoginSyncProto::kTeamIdFieldNumber;
const int LoginSyncProto::kLeaderFieldNumber;
const int LoginSyncProto::kMemCountFieldNumber;
const int LoginSyncProto::kClonessLevFieldNumber;
#endif  // !_MSC_VER

LoginSyncProto::LoginSyncProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginSyncProto::InitAsDefaultInstance() {
}

LoginSyncProto::LoginSyncProto(const LoginSyncProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginSyncProto::SharedCtor() {
  _cached_size_ = 0;
  guild_id_ = 0u;
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guild_duty_ = 0;
  guild_leader_ = GOOGLE_ULONGLONG(0);
  team_id_ = 0u;
  leader_ = GOOGLE_ULONGLONG(0);
  mem_count_ = 0;
  cloness_lev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginSyncProto::~LoginSyncProto() {
  SharedDtor();
}

void LoginSyncProto::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (this != default_instance_) {
  }
}

void LoginSyncProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginSyncProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginSyncProto_descriptor_;
}

const LoginSyncProto& LoginSyncProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

LoginSyncProto* LoginSyncProto::default_instance_ = NULL;

LoginSyncProto* LoginSyncProto::New() const {
  return new LoginSyncProto;
}

void LoginSyncProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guild_id_ = 0u;
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    guild_duty_ = 0;
    guild_leader_ = GOOGLE_ULONGLONG(0);
    team_id_ = 0u;
    leader_ = GOOGLE_ULONGLONG(0);
    mem_count_ = 0;
    cloness_lev_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginSyncProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guild_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guild_name;
        break;
      }

      // optional string guild_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guild_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guild_name().data(), this->guild_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_guild_duty;
        break;
      }

      // optional int32 guild_duty = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guild_duty_)));
          set_has_guild_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guild_leader;
        break;
      }

      // optional uint64 guild_leader = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &guild_leader_)));
          set_has_guild_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_team_id;
        break;
      }

      // optional uint32 team_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leader;
        break;
      }

      // optional uint64 leader = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_)));
          set_has_leader();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mem_count;
        break;
      }

      // optional int32 mem_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mem_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mem_count_)));
          set_has_mem_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cloness_lev;
        break;
      }

      // optional int32 cloness_lev = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloness_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloness_lev_)));
          set_has_cloness_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginSyncProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guild_id(), output);
  }

  // optional string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guild_name(), output);
  }

  // optional int32 guild_duty = 3;
  if (has_guild_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->guild_duty(), output);
  }

  // optional uint64 guild_leader = 4;
  if (has_guild_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->guild_leader(), output);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id(), output);
  }

  // optional uint64 leader = 6;
  if (has_leader()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->leader(), output);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mem_count(), output);
  }

  // optional int32 cloness_lev = 8;
  if (has_cloness_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cloness_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginSyncProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guild_id = 1;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guild_id(), target);
  }

  // optional string guild_name = 2;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guild_name().data(), this->guild_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guild_name(), target);
  }

  // optional int32 guild_duty = 3;
  if (has_guild_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->guild_duty(), target);
  }

  // optional uint64 guild_leader = 4;
  if (has_guild_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->guild_leader(), target);
  }

  // optional uint32 team_id = 5;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id(), target);
  }

  // optional uint64 leader = 6;
  if (has_leader()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->leader(), target);
  }

  // optional int32 mem_count = 7;
  if (has_mem_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mem_count(), target);
  }

  // optional int32 cloness_lev = 8;
  if (has_cloness_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cloness_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginSyncProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guild_id = 1;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guild_id());
    }

    // optional string guild_name = 2;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guild_name());
    }

    // optional int32 guild_duty = 3;
    if (has_guild_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guild_duty());
    }

    // optional uint64 guild_leader = 4;
    if (has_guild_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->guild_leader());
    }

    // optional uint32 team_id = 5;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint64 leader = 6;
    if (has_leader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader());
    }

    // optional int32 mem_count = 7;
    if (has_mem_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mem_count());
    }

    // optional int32 cloness_lev = 8;
    if (has_cloness_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloness_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginSyncProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginSyncProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginSyncProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginSyncProto::MergeFrom(const LoginSyncProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_guild_duty()) {
      set_guild_duty(from.guild_duty());
    }
    if (from.has_guild_leader()) {
      set_guild_leader(from.guild_leader());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_leader()) {
      set_leader(from.leader());
    }
    if (from.has_mem_count()) {
      set_mem_count(from.mem_count());
    }
    if (from.has_cloness_lev()) {
      set_cloness_lev(from.cloness_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginSyncProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginSyncProto::CopyFrom(const LoginSyncProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginSyncProto::IsInitialized() const {

  return true;
}

void LoginSyncProto::Swap(LoginSyncProto* other) {
  if (other != this) {
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(guild_duty_, other->guild_duty_);
    std::swap(guild_leader_, other->guild_leader_);
    std::swap(team_id_, other->team_id_);
    std::swap(leader_, other->leader_);
    std::swap(mem_count_, other->mem_count_);
    std::swap(cloness_lev_, other->cloness_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginSyncProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginSyncProto_descriptor_;
  metadata.reflection = LoginSyncProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterRoleProto::kCidFieldNumber;
const int CenterRoleProto::kUidFieldNumber;
const int CenterRoleProto::kNameFieldNumber;
const int CenterRoleProto::kProfFieldNumber;
const int CenterRoleProto::kLevelFieldNumber;
const int CenterRoleProto::kFightFieldNumber;
const int CenterRoleProto::kLastlogoutFieldNumber;
const int CenterRoleProto::kFacadeFieldNumber;
const int CenterRoleProto::kVipLevelFieldNumber;
const int CenterRoleProto::kHpFieldNumber;
const int CenterRoleProto::kMaxHpFieldNumber;
#endif  // !_MSC_VER

CenterRoleProto::CenterRoleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterRoleProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

CenterRoleProto::CenterRoleProto(const CenterRoleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterRoleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  lastlogout_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  vip_level_ = 0u;
  hp_ = GOOGLE_LONGLONG(0);
  max_hp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterRoleProto::~CenterRoleProto() {
  SharedDtor();
}

void CenterRoleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void CenterRoleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterRoleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterRoleProto_descriptor_;
}

const CenterRoleProto& CenterRoleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CenterRoleProto* CenterRoleProto::default_instance_ = NULL;

CenterRoleProto* CenterRoleProto::New() const {
  return new CenterRoleProto;
}

void CenterRoleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    lastlogout_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vip_level_ = 0u;
    hp_ = GOOGLE_LONGLONG(0);
    max_hp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterRoleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastlogout;
        break;
      }

      // optional uint64 lastlogout = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogout_)));
          set_has_lastlogout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hp;
        break;
      }

      // optional int64 hp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_max_hp;
        break;
      }

      // optional int64 max_hp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterRoleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prof(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fight(), output);
  }

  // optional uint64 lastlogout = 7;
  if (has_lastlogout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lastlogout(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->facade(), output);
  }

  // optional uint32 vip_level = 9;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vip_level(), output);
  }

  // optional int64 hp = 10;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->hp(), output);
  }

  // optional int64 max_hp = 11;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->max_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterRoleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prof(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fight(), target);
  }

  // optional uint64 lastlogout = 7;
  if (has_lastlogout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lastlogout(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->facade(), target);
  }

  // optional uint32 vip_level = 9;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vip_level(), target);
  }

  // optional int64 hp = 10;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->hp(), target);
  }

  // optional int64 max_hp = 11;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->max_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterRoleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 lastlogout = 7;
    if (has_lastlogout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogout());
    }

    // optional .proto_ff.RoleFacadeProto facade = 8;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 vip_level = 9;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional int64 hp = 10;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 max_hp = 11;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterRoleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterRoleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterRoleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterRoleProto::MergeFrom(const CenterRoleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_lastlogout()) {
      set_lastlogout(from.lastlogout());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterRoleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterRoleProto::CopyFrom(const CenterRoleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterRoleProto::IsInitialized() const {

  return true;
}

void CenterRoleProto::Swap(CenterRoleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(lastlogout_, other->lastlogout_);
    std::swap(facade_, other->facade_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(hp_, other->hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterRoleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterRoleProto_descriptor_;
  metadata.reflection = CenterRoleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SocialRoleProto::kCidFieldNumber;
const int SocialRoleProto::kUidFieldNumber;
const int SocialRoleProto::kNameFieldNumber;
const int SocialRoleProto::kProfFieldNumber;
const int SocialRoleProto::kLevelFieldNumber;
const int SocialRoleProto::kFightFieldNumber;
const int SocialRoleProto::kLastlogoutFieldNumber;
const int SocialRoleProto::kFacadeFieldNumber;
const int SocialRoleProto::kVipLevelFieldNumber;
const int SocialRoleProto::kZidFieldNumber;
const int SocialRoleProto::kIsonlineFieldNumber;
const int SocialRoleProto::kHpFieldNumber;
const int SocialRoleProto::kMaxHpFieldNumber;
#endif  // !_MSC_VER

SocialRoleProto::SocialRoleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SocialRoleProto::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

SocialRoleProto::SocialRoleProto(const SocialRoleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SocialRoleProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  fight_ = GOOGLE_ULONGLONG(0);
  lastlogout_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  vip_level_ = 0u;
  zid_ = 0u;
  isonline_ = false;
  hp_ = GOOGLE_LONGLONG(0);
  max_hp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SocialRoleProto::~SocialRoleProto() {
  SharedDtor();
}

void SocialRoleProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void SocialRoleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SocialRoleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SocialRoleProto_descriptor_;
}

const SocialRoleProto& SocialRoleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

SocialRoleProto* SocialRoleProto::default_instance_ = NULL;

SocialRoleProto* SocialRoleProto::New() const {
  return new SocialRoleProto;
}

void SocialRoleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    fight_ = GOOGLE_ULONGLONG(0);
    lastlogout_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vip_level_ = 0u;
    zid_ = 0u;
    isonline_ = false;
    hp_ = GOOGLE_LONGLONG(0);
    max_hp_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SocialRoleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastlogout;
        break;
      }

      // optional uint64 lastlogout = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogout_)));
          set_has_lastlogout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isonline;
        break;
      }

      // optional bool isonline = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isonline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hp;
        break;
      }

      // optional int64 hp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_max_hp;
        break;
      }

      // optional int64 max_hp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SocialRoleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->prof(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->fight(), output);
  }

  // optional uint64 lastlogout = 7;
  if (has_lastlogout()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->lastlogout(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->facade(), output);
  }

  // optional uint32 vip_level = 9;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->vip_level(), output);
  }

  // optional uint32 zid = 10;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->zid(), output);
  }

  // optional bool isonline = 11;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isonline(), output);
  }

  // optional int64 hp = 12;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->hp(), output);
  }

  // optional int64 max_hp = 13;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->max_hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SocialRoleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional uint32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->prof(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint64 fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->fight(), target);
  }

  // optional uint64 lastlogout = 7;
  if (has_lastlogout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->lastlogout(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 8;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->facade(), target);
  }

  // optional uint32 vip_level = 9;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->vip_level(), target);
  }

  // optional uint32 zid = 10;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->zid(), target);
  }

  // optional bool isonline = 11;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isonline(), target);
  }

  // optional int64 hp = 12;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->hp(), target);
  }

  // optional int64 max_hp = 13;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->max_hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SocialRoleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint64 lastlogout = 7;
    if (has_lastlogout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastlogout());
    }

    // optional .proto_ff.RoleFacadeProto facade = 8;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 vip_level = 9;
    if (has_vip_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional uint32 zid = 10;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional bool isonline = 11;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

    // optional int64 hp = 12;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // optional int64 max_hp = 13;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SocialRoleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SocialRoleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SocialRoleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SocialRoleProto::MergeFrom(const SocialRoleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_lastlogout()) {
      set_lastlogout(from.lastlogout());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SocialRoleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SocialRoleProto::CopyFrom(const SocialRoleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocialRoleProto::IsInitialized() const {

  return true;
}

void SocialRoleProto::Swap(SocialRoleProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(fight_, other->fight_);
    std::swap(lastlogout_, other->lastlogout_);
    std::swap(facade_, other->facade_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(zid_, other->zid_);
    std::swap(isonline_, other->isonline_);
    std::swap(hp_, other->hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SocialRoleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SocialRoleProto_descriptor_;
  metadata.reflection = SocialRoleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Attr::kIdFieldNumber;
const int Attr::kValueFieldNumber;
#endif  // !_MSC_VER

Attr::Attr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Attr::InitAsDefaultInstance() {
}

Attr::Attr(const Attr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Attr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attr::~Attr() {
  SharedDtor();
}

void Attr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attr_descriptor_;
}

const Attr& Attr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

Attr* Attr::default_instance_ = NULL;

Attr* Attr::New() const {
  return new Attr;
}

void Attr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Attr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Attr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Attr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attr::MergeFrom(const Attr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attr::CopyFrom(const Attr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attr::IsInitialized() const {

  return true;
}

void Attr::Swap(Attr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attr_descriptor_;
  metadata.reflection = Attr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlueStarAttr::kIdFieldNumber;
const int BlueStarAttr::kValueFieldNumber;
const int BlueStarAttr::kLvPartFieldNumber;
#endif  // !_MSC_VER

BlueStarAttr::BlueStarAttr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlueStarAttr::InitAsDefaultInstance() {
}

BlueStarAttr::BlueStarAttr(const BlueStarAttr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlueStarAttr::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  value_ = GOOGLE_LONGLONG(0);
  lv_part_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlueStarAttr::~BlueStarAttr() {
  SharedDtor();
}

void BlueStarAttr::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlueStarAttr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueStarAttr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlueStarAttr_descriptor_;
}

const BlueStarAttr& BlueStarAttr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BlueStarAttr* BlueStarAttr::default_instance_ = NULL;

BlueStarAttr* BlueStarAttr::New() const {
  return new BlueStarAttr;
}

void BlueStarAttr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    value_ = GOOGLE_LONGLONG(0);
    lv_part_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlueStarAttr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv_part;
        break;
      }

      // optional int32 lv_part = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_part:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_part_)));
          set_has_lv_part();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlueStarAttr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  // optional int32 lv_part = 3;
  if (has_lv_part()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv_part(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlueStarAttr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  // optional int32 lv_part = 3;
  if (has_lv_part()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv_part(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlueStarAttr::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

    // optional int32 lv_part = 3;
    if (has_lv_part()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv_part());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueStarAttr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlueStarAttr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlueStarAttr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlueStarAttr::MergeFrom(const BlueStarAttr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_lv_part()) {
      set_lv_part(from.lv_part());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlueStarAttr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueStarAttr::CopyFrom(const BlueStarAttr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueStarAttr::IsInitialized() const {

  return true;
}

void BlueStarAttr::Swap(BlueStarAttr* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(lv_part_, other->lv_part_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlueStarAttr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlueStarAttr_descriptor_;
  metadata.reflection = BlueStarAttr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemProtoInfo::kIndexFieldNumber;
const int ItemProtoInfo::kItemIdFieldNumber;
const int ItemProtoInfo::kItemNumFieldNumber;
const int ItemProtoInfo::kBindFieldNumber;
const int ItemProtoInfo::kLevelFieldNumber;
const int ItemProtoInfo::kBaseFieldNumber;
const int ItemProtoInfo::kRefineFieldNumber;
const int ItemProtoInfo::kBlueFieldNumber;
const int ItemProtoInfo::kGodFieldNumber;
const int ItemProtoInfo::kSpecialFieldNumber;
const int ItemProtoInfo::kExpireTimeFieldNumber;
#endif  // !_MSC_VER

ItemProtoInfo::ItemProtoInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemProtoInfo::InitAsDefaultInstance() {
}

ItemProtoInfo::ItemProtoInfo(const ItemProtoInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemProtoInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  item_id_ = GOOGLE_ULONGLONG(0);
  item_num_ = GOOGLE_LONGLONG(0);
  bind_ = 0;
  level_ = 0;
  expiretime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemProtoInfo::~ItemProtoInfo() {
  SharedDtor();
}

void ItemProtoInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemProtoInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemProtoInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemProtoInfo_descriptor_;
}

const ItemProtoInfo& ItemProtoInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ItemProtoInfo* ItemProtoInfo::default_instance_ = NULL;

ItemProtoInfo* ItemProtoInfo::New() const {
  return new ItemProtoInfo;
}

void ItemProtoInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    item_id_ = GOOGLE_ULONGLONG(0);
    item_num_ = GOOGLE_LONGLONG(0);
    bind_ = 0;
    level_ = 0;
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    expiretime_ = GOOGLE_ULONGLONG(0);
  }
  base_.Clear();
  refine_.Clear();
  blue_.Clear();
  god_.Clear();
  special_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemProtoInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item_id;
        break;
      }

      // optional uint64 item_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
          set_has_item_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_num;
        break;
      }

      // optional int64 item_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_num_)));
          set_has_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bind;
        break;
      }

      // optional int32 bind = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_base;
        break;
      }

      // repeated .proto_ff.Attr base = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_base;
        if (input->ExpectTag(58)) goto parse_refine;
        break;
      }

      // repeated .proto_ff.Attr refine = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_refine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_refine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_refine;
        if (input->ExpectTag(66)) goto parse_blue;
        break;
      }

      // repeated .proto_ff.BlueStarAttr blue = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_blue;
        if (input->ExpectTag(74)) goto parse_god;
        break;
      }

      // repeated .proto_ff.Attr god = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_god:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_god()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_god;
        if (input->ExpectTag(82)) goto parse_special;
        break;
      }

      // repeated .proto_ff.Attr special = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_special:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_special()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_special;
        if (input->ExpectTag(88)) goto parse_expireTime;
        break;
      }

      // optional uint64 expireTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expireTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &expiretime_)));
          set_has_expiretime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemProtoInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_id(), output);
  }

  // optional int64 item_num = 3;
  if (has_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->item_num(), output);
  }

  // optional int32 bind = 4;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bind(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // repeated .proto_ff.Attr base = 6;
  for (int i = 0; i < this->base_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->base(i), output);
  }

  // repeated .proto_ff.Attr refine = 7;
  for (int i = 0; i < this->refine_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->refine(i), output);
  }

  // repeated .proto_ff.BlueStarAttr blue = 8;
  for (int i = 0; i < this->blue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->blue(i), output);
  }

  // repeated .proto_ff.Attr god = 9;
  for (int i = 0; i < this->god_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->god(i), output);
  }

  // repeated .proto_ff.Attr special = 10;
  for (int i = 0; i < this->special_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->special(i), output);
  }

  // optional uint64 expireTime = 11;
  if (has_expiretime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->expiretime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemProtoInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional uint64 item_id = 2;
  if (has_item_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_id(), target);
  }

  // optional int64 item_num = 3;
  if (has_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->item_num(), target);
  }

  // optional int32 bind = 4;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bind(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // repeated .proto_ff.Attr base = 6;
  for (int i = 0; i < this->base_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->base(i), target);
  }

  // repeated .proto_ff.Attr refine = 7;
  for (int i = 0; i < this->refine_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->refine(i), target);
  }

  // repeated .proto_ff.BlueStarAttr blue = 8;
  for (int i = 0; i < this->blue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->blue(i), target);
  }

  // repeated .proto_ff.Attr god = 9;
  for (int i = 0; i < this->god_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->god(i), target);
  }

  // repeated .proto_ff.Attr special = 10;
  for (int i = 0; i < this->special_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->special(i), target);
  }

  // optional uint64 expireTime = 11;
  if (has_expiretime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->expiretime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemProtoInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional uint64 item_id = 2;
    if (has_item_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional int64 item_num = 3;
    if (has_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item_num());
    }

    // optional int32 bind = 4;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional uint64 expireTime = 11;
    if (has_expiretime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->expiretime());
    }

  }
  // repeated .proto_ff.Attr base = 6;
  total_size += 1 * this->base_size();
  for (int i = 0; i < this->base_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->base(i));
  }

  // repeated .proto_ff.Attr refine = 7;
  total_size += 1 * this->refine_size();
  for (int i = 0; i < this->refine_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->refine(i));
  }

  // repeated .proto_ff.BlueStarAttr blue = 8;
  total_size += 1 * this->blue_size();
  for (int i = 0; i < this->blue_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blue(i));
  }

  // repeated .proto_ff.Attr god = 9;
  total_size += 1 * this->god_size();
  for (int i = 0; i < this->god_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->god(i));
  }

  // repeated .proto_ff.Attr special = 10;
  total_size += 1 * this->special_size();
  for (int i = 0; i < this->special_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->special(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemProtoInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemProtoInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemProtoInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemProtoInfo::MergeFrom(const ItemProtoInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  base_.MergeFrom(from.base_);
  refine_.MergeFrom(from.refine_);
  blue_.MergeFrom(from.blue_);
  god_.MergeFrom(from.god_);
  special_.MergeFrom(from.special_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_item_id()) {
      set_item_id(from.item_id());
    }
    if (from.has_item_num()) {
      set_item_num(from.item_num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_expiretime()) {
      set_expiretime(from.expiretime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemProtoInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemProtoInfo::CopyFrom(const ItemProtoInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemProtoInfo::IsInitialized() const {

  return true;
}

void ItemProtoInfo::Swap(ItemProtoInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(item_id_, other->item_id_);
    std::swap(item_num_, other->item_num_);
    std::swap(bind_, other->bind_);
    std::swap(level_, other->level_);
    base_.Swap(&other->base_);
    refine_.Swap(&other->refine_);
    blue_.Swap(&other->blue_);
    god_.Swap(&other->god_);
    special_.Swap(&other->special_);
    std::swap(expiretime_, other->expiretime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemProtoInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemProtoInfo_descriptor_;
  metadata.reflection = ItemProtoInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipSlotInfo::kSlotPosFieldNumber;
const int EquipSlotInfo::kTotalScoreFieldNumber;
#endif  // !_MSC_VER

EquipSlotInfo::EquipSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipSlotInfo::InitAsDefaultInstance() {
}

EquipSlotInfo::EquipSlotInfo(const EquipSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  slot_pos_ = 0;
  total_score_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipSlotInfo::~EquipSlotInfo() {
  SharedDtor();
}

void EquipSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipSlotInfo_descriptor_;
}

const EquipSlotInfo& EquipSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

EquipSlotInfo* EquipSlotInfo::default_instance_ = NULL;

EquipSlotInfo* EquipSlotInfo::New() const {
  return new EquipSlotInfo;
}

void EquipSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slot_pos_ = 0;
    total_score_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 slot_pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_pos_)));
          set_has_slot_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_score;
        break;
      }

      // optional int64 total_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_score_)));
          set_has_total_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->slot_pos(), output);
  }

  // optional int64 total_score = 2;
  if (has_total_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->total_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 slot_pos = 1;
  if (has_slot_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->slot_pos(), target);
  }

  // optional int64 total_score = 2;
  if (has_total_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->total_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 slot_pos = 1;
    if (has_slot_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_pos());
    }

    // optional int64 total_score = 2;
    if (has_total_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipSlotInfo::MergeFrom(const EquipSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slot_pos()) {
      set_slot_pos(from.slot_pos());
    }
    if (from.has_total_score()) {
      set_total_score(from.total_score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipSlotInfo::CopyFrom(const EquipSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipSlotInfo::IsInitialized() const {

  return true;
}

void EquipSlotInfo::Swap(EquipSlotInfo* other) {
  if (other != this) {
    std::swap(slot_pos_, other->slot_pos_);
    std::swap(total_score_, other->total_score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipSlotInfo_descriptor_;
  metadata.reflection = EquipSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipInfo::kPosFieldNumber;
const int EquipInfo::kEquipFieldNumber;
const int EquipInfo::kSlotFieldNumber;
#endif  // !_MSC_VER

EquipInfo::EquipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipInfo::InitAsDefaultInstance() {
  equip_ = const_cast< ::proto_ff::ItemProtoInfo*>(&::proto_ff::ItemProtoInfo::default_instance());
  slot_ = const_cast< ::proto_ff::EquipSlotInfo*>(&::proto_ff::EquipSlotInfo::default_instance());
}

EquipInfo::EquipInfo(const EquipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipInfo::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  equip_ = NULL;
  slot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipInfo::~EquipInfo() {
  SharedDtor();
}

void EquipInfo::SharedDtor() {
  if (this != default_instance_) {
    delete equip_;
    delete slot_;
  }
}

void EquipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipInfo_descriptor_;
}

const EquipInfo& EquipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

EquipInfo* EquipInfo::default_instance_ = NULL;

EquipInfo* EquipInfo::New() const {
  return new EquipInfo;
}

void EquipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto_ff::ItemProtoInfo::Clear();
    }
    if (has_slot()) {
      if (slot_ != NULL) slot_->::proto_ff::EquipSlotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equip;
        break;
      }

      // optional .proto_ff.ItemProtoInfo equip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slot;
        break;
      }

      // optional .proto_ff.EquipSlotInfo slot = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // optional .proto_ff.ItemProtoInfo equip = 2;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equip(), output);
  }

  // optional .proto_ff.EquipSlotInfo slot = 3;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // optional .proto_ff.ItemProtoInfo equip = 2;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equip(), target);
  }

  // optional .proto_ff.EquipSlotInfo slot = 3;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // optional .proto_ff.ItemProtoInfo equip = 2;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional .proto_ff.EquipSlotInfo slot = 3;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->slot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipInfo::MergeFrom(const EquipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto_ff::ItemProtoInfo::MergeFrom(from.equip());
    }
    if (from.has_slot()) {
      mutable_slot()->::proto_ff::EquipSlotInfo::MergeFrom(from.slot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipInfo::CopyFrom(const EquipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipInfo::IsInitialized() const {

  return true;
}

void EquipInfo::Swap(EquipInfo* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(equip_, other->equip_);
    std::swap(slot_, other->slot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipInfo_descriptor_;
  metadata.reflection = EquipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSimpleProto::kItemidFieldNumber;
const int ItemSimpleProto::kNumFieldNumber;
const int ItemSimpleProto::kBindFieldNumber;
#endif  // !_MSC_VER

ItemSimpleProto::ItemSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSimpleProto::InitAsDefaultInstance() {
}

ItemSimpleProto::ItemSimpleProto(const ItemSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  num_ = GOOGLE_LONGLONG(0);
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSimpleProto::~ItemSimpleProto() {
  SharedDtor();
}

void ItemSimpleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSimpleProto_descriptor_;
}

const ItemSimpleProto& ItemSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

ItemSimpleProto* ItemSimpleProto::default_instance_ = NULL;

ItemSimpleProto* ItemSimpleProto::New() const {
  return new ItemSimpleProto;
}

void ItemSimpleProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_ULONGLONG(0);
    num_ = GOOGLE_LONGLONG(0);
    bind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional int32 bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional int64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num(), output);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional int64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num(), target);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSimpleProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional int64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSimpleProto::MergeFrom(const ItemSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSimpleProto::CopyFrom(const ItemSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSimpleProto::IsInitialized() const {

  return true;
}

void ItemSimpleProto::Swap(ItemSimpleProto* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSimpleProto_descriptor_;
  metadata.reflection = ItemSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultItemSimpleProto::kInfoFieldNumber;
#endif  // !_MSC_VER

MultItemSimpleProto::MultItemSimpleProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MultItemSimpleProto::InitAsDefaultInstance() {
}

MultItemSimpleProto::MultItemSimpleProto(const MultItemSimpleProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MultItemSimpleProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultItemSimpleProto::~MultItemSimpleProto() {
  SharedDtor();
}

void MultItemSimpleProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultItemSimpleProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultItemSimpleProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultItemSimpleProto_descriptor_;
}

const MultItemSimpleProto& MultItemSimpleProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MultItemSimpleProto* MultItemSimpleProto::default_instance_ = NULL;

MultItemSimpleProto* MultItemSimpleProto::New() const {
  return new MultItemSimpleProto;
}

void MultItemSimpleProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultItemSimpleProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemSimpleProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MultItemSimpleProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemSimpleProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MultItemSimpleProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemSimpleProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MultItemSimpleProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ItemSimpleProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultItemSimpleProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultItemSimpleProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultItemSimpleProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultItemSimpleProto::MergeFrom(const MultItemSimpleProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultItemSimpleProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultItemSimpleProto::CopyFrom(const MultItemSimpleProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultItemSimpleProto::IsInitialized() const {

  return true;
}

void MultItemSimpleProto::Swap(MultItemSimpleProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultItemSimpleProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultItemSimpleProto_descriptor_;
  metadata.reflection = MultItemSimpleProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailParamProto::kCfgidFieldNumber;
const int MailParamProto::kStrParamFieldNumber;
const int MailParamProto::kIntParamFieldNumber;
#endif  // !_MSC_VER

MailParamProto::MailParamProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailParamProto::InitAsDefaultInstance() {
}

MailParamProto::MailParamProto(const MailParamProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailParamProto::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailParamProto::~MailParamProto() {
  SharedDtor();
}

void MailParamProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailParamProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailParamProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailParamProto_descriptor_;
}

const MailParamProto& MailParamProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailParamProto* MailParamProto::default_instance_ = NULL;

MailParamProto* MailParamProto::New() const {
  return new MailParamProto;
}

void MailParamProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = GOOGLE_ULONGLONG(0);
  }
  str_param_.Clear();
  int_param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailParamProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cfgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_param;
        break;
      }

      // repeated bytes str_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_str_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_param;
        if (input->ExpectTag(24)) goto parse_int_param;
        break;
      }

      // repeated uint64 int_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_int_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_int_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailParamProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cfgid = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cfgid(), output);
  }

  // repeated bytes str_param = 2;
  for (int i = 0; i < this->str_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->str_param(i), output);
  }

  // repeated uint64 int_param = 3;
  for (int i = 0; i < this->int_param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->int_param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailParamProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cfgid = 1;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cfgid(), target);
  }

  // repeated bytes str_param = 2;
  for (int i = 0; i < this->str_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->str_param(i), target);
  }

  // repeated uint64 int_param = 3;
  for (int i = 0; i < this->int_param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->int_param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailParamProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cfgid = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cfgid());
    }

  }
  // repeated bytes str_param = 2;
  total_size += 1 * this->str_param_size();
  for (int i = 0; i < this->str_param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->str_param(i));
  }

  // repeated uint64 int_param = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->int_param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->int_param(i));
    }
    total_size += 1 * this->int_param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailParamProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailParamProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailParamProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailParamProto::MergeFrom(const MailParamProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  str_param_.MergeFrom(from.str_param_);
  int_param_.MergeFrom(from.int_param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailParamProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailParamProto::CopyFrom(const MailParamProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailParamProto::IsInitialized() const {

  return true;
}

void MailParamProto::Swap(MailParamProto* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    str_param_.Swap(&other->str_param_);
    int_param_.Swap(&other->int_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailParamProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailParamProto_descriptor_;
  metadata.reflection = MailParamProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailStrProto::kStrFieldNumber;
const int MailStrProto::kParamFieldNumber;
#endif  // !_MSC_VER

MailStrProto::MailStrProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailStrProto::InitAsDefaultInstance() {
  param_ = const_cast< ::proto_ff::MailParamProto*>(&::proto_ff::MailParamProto::default_instance());
}

MailStrProto::MailStrProto(const MailStrProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailStrProto::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailStrProto::~MailStrProto() {
  SharedDtor();
}

void MailStrProto::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (this != default_instance_) {
    delete param_;
  }
}

void MailStrProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailStrProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailStrProto_descriptor_;
}

const MailStrProto& MailStrProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailStrProto* MailStrProto::default_instance_ = NULL;

MailStrProto* MailStrProto::New() const {
  return new MailStrProto;
}

void MailStrProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    if (has_param()) {
      if (param_ != NULL) param_->::proto_ff::MailParamProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailStrProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }

      // optional .proto_ff.MailParamProto param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailStrProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->str(), output);
  }

  // optional .proto_ff.MailParamProto param = 2;
  if (has_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailStrProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes str = 1;
  if (has_str()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->str(), target);
  }

  // optional .proto_ff.MailParamProto param = 2;
  if (has_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailStrProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str());
    }

    // optional .proto_ff.MailParamProto param = 2;
    if (has_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailStrProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailStrProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailStrProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailStrProto::MergeFrom(const MailStrProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_param()) {
      mutable_param()->::proto_ff::MailParamProto::MergeFrom(from.param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailStrProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailStrProto::CopyFrom(const MailStrProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailStrProto::IsInitialized() const {

  return true;
}

void MailStrProto::Swap(MailStrProto* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(param_, other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailStrProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailStrProto_descriptor_;
  metadata.reflection = MailStrProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailAttachmentList::kItemInfoFieldNumber;
#endif  // !_MSC_VER

MailAttachmentList::MailAttachmentList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailAttachmentList::InitAsDefaultInstance() {
}

MailAttachmentList::MailAttachmentList(const MailAttachmentList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailAttachmentList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailAttachmentList::~MailAttachmentList() {
  SharedDtor();
}

void MailAttachmentList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailAttachmentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailAttachmentList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailAttachmentList_descriptor_;
}

const MailAttachmentList& MailAttachmentList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailAttachmentList* MailAttachmentList::default_instance_ = NULL;

MailAttachmentList* MailAttachmentList::New() const {
  return new MailAttachmentList;
}

void MailAttachmentList::Clear() {
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailAttachmentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo itemInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailAttachmentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo itemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailAttachmentList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo itemInfo = 1;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailAttachmentList::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ItemProtoInfo itemInfo = 1;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailAttachmentList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailAttachmentList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailAttachmentList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailAttachmentList::MergeFrom(const MailAttachmentList& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailAttachmentList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailAttachmentList::CopyFrom(const MailAttachmentList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailAttachmentList::IsInitialized() const {

  return true;
}

void MailAttachmentList::Swap(MailAttachmentList* other) {
  if (other != this) {
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailAttachmentList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailAttachmentList_descriptor_;
  metadata.reflection = MailAttachmentList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailHead::kMailIdFieldNumber;
const int MailHead::kTypeFieldNumber;
const int MailHead::kSendPlayerIdFieldNumber;
const int MailHead::kSendPlayerNameFieldNumber;
const int MailHead::kDestPlayerIdFieldNumber;
const int MailHead::kTopicFieldNumber;
const int MailHead::kCreateTimeFieldNumber;
const int MailHead::kStatusFieldNumber;
const int MailHead::kFetchFieldNumber;
const int MailHead::kHasAttachFieldNumber;
const int MailHead::kBeginTimeFieldNumber;
const int MailHead::kEndTimeFieldNumber;
#endif  // !_MSC_VER

MailHead::MailHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailHead::InitAsDefaultInstance() {
  topic_ = const_cast< ::proto_ff::MailStrProto*>(&::proto_ff::MailStrProto::default_instance());
}

MailHead::MailHead(const MailHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailHead::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  type_ = 0u;
  sendplayerid_ = GOOGLE_ULONGLONG(0);
  sendplayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  destplayerid_ = GOOGLE_ULONGLONG(0);
  topic_ = NULL;
  createtime_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  fetch_ = 0;
  has_attach_ = 0;
  begin_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailHead::~MailHead() {
  SharedDtor();
}

void MailHead::SharedDtor() {
  if (sendplayername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendplayername_;
  }
  if (this != default_instance_) {
    delete topic_;
  }
}

void MailHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailHead_descriptor_;
}

const MailHead& MailHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailHead* MailHead::default_instance_ = NULL;

MailHead* MailHead::New() const {
  return new MailHead;
}

void MailHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    type_ = 0u;
    sendplayerid_ = GOOGLE_ULONGLONG(0);
    if (has_sendplayername()) {
      if (sendplayername_ != &::google::protobuf::internal::kEmptyString) {
        sendplayername_->clear();
      }
    }
    destplayerid_ = GOOGLE_ULONGLONG(0);
    if (has_topic()) {
      if (topic_ != NULL) topic_->::proto_ff::MailStrProto::Clear();
    }
    createtime_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fetch_ = 0;
    has_attach_ = 0;
    begin_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendPlayerId;
        break;
      }

      // optional uint64 sendPlayerId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendplayerid_)));
          set_has_sendplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sendPlayerName;
        break;
      }

      // optional bytes sendPlayerName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sendPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sendplayername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_destPlayerId;
        break;
      }

      // optional uint64 destPlayerId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destPlayerId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &destplayerid_)));
          set_has_destplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_topic;
        break;
      }

      // optional .proto_ff.MailStrProto topic = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_createTime;
        break;
      }

      // optional uint64 createTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional uint32 status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_has_attach;
        break;
      }

      // optional int32 has_attach = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_has_attach:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &has_attach_)));
          set_has_has_attach();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_begin_time;
        break;
      }

      // optional uint64 begin_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_time_)));
          set_has_begin_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint64 sendPlayerId = 3;
  if (has_sendplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sendplayerid(), output);
  }

  // optional bytes sendPlayerName = 4;
  if (has_sendplayername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->sendplayername(), output);
  }

  // optional uint64 destPlayerId = 5;
  if (has_destplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->destplayerid(), output);
  }

  // optional .proto_ff.MailStrProto topic = 6;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->topic(), output);
  }

  // optional uint64 createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->createtime(), output);
  }

  // optional uint32 status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->status(), output);
  }

  // optional int32 fetch = 9;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fetch(), output);
  }

  // optional int32 has_attach = 10;
  if (has_has_attach()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->has_attach(), output);
  }

  // optional uint64 begin_time = 11;
  if (has_begin_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->begin_time(), output);
  }

  // optional uint64 end_time = 12;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->end_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint64 sendPlayerId = 3;
  if (has_sendplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sendplayerid(), target);
  }

  // optional bytes sendPlayerName = 4;
  if (has_sendplayername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->sendplayername(), target);
  }

  // optional uint64 destPlayerId = 5;
  if (has_destplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->destplayerid(), target);
  }

  // optional .proto_ff.MailStrProto topic = 6;
  if (has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->topic(), target);
  }

  // optional uint64 createTime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->createtime(), target);
  }

  // optional uint32 status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->status(), target);
  }

  // optional int32 fetch = 9;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fetch(), target);
  }

  // optional int32 has_attach = 10;
  if (has_has_attach()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->has_attach(), target);
  }

  // optional uint64 begin_time = 11;
  if (has_begin_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->begin_time(), target);
  }

  // optional uint64 end_time = 12;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->end_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 sendPlayerId = 3;
    if (has_sendplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendplayerid());
    }

    // optional bytes sendPlayerName = 4;
    if (has_sendplayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sendplayername());
    }

    // optional uint64 destPlayerId = 5;
    if (has_destplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->destplayerid());
    }

    // optional .proto_ff.MailStrProto topic = 6;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topic());
    }

    // optional uint64 createTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional uint32 status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fetch = 9;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

    // optional int32 has_attach = 10;
    if (has_has_attach()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->has_attach());
    }

    // optional uint64 begin_time = 11;
    if (has_begin_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin_time());
    }

    // optional uint64 end_time = 12;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailHead::MergeFrom(const MailHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_sendplayerid()) {
      set_sendplayerid(from.sendplayerid());
    }
    if (from.has_sendplayername()) {
      set_sendplayername(from.sendplayername());
    }
    if (from.has_destplayerid()) {
      set_destplayerid(from.destplayerid());
    }
    if (from.has_topic()) {
      mutable_topic()->::proto_ff::MailStrProto::MergeFrom(from.topic());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
    if (from.has_has_attach()) {
      set_has_attach(from.has_attach());
    }
    if (from.has_begin_time()) {
      set_begin_time(from.begin_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailHead::CopyFrom(const MailHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailHead::IsInitialized() const {

  return true;
}

void MailHead::Swap(MailHead* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(type_, other->type_);
    std::swap(sendplayerid_, other->sendplayerid_);
    std::swap(sendplayername_, other->sendplayername_);
    std::swap(destplayerid_, other->destplayerid_);
    std::swap(topic_, other->topic_);
    std::swap(createtime_, other->createtime_);
    std::swap(status_, other->status_);
    std::swap(fetch_, other->fetch_);
    std::swap(has_attach_, other->has_attach_);
    std::swap(begin_time_, other->begin_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailHead_descriptor_;
  metadata.reflection = MailHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailInfo::kMailHeadFieldNumber;
const int MailInfo::kContentFieldNumber;
const int MailInfo::kGoldFieldNumber;
const int MailInfo::kDiamondFieldNumber;
const int MailInfo::kBindDiamondFieldNumber;
const int MailInfo::kMagiccrystalFieldNumber;
const int MailInfo::kPrestigeFieldNumber;
const int MailInfo::kAttachmentListFieldNumber;
const int MailInfo::kSourceFieldNumber;
const int MailInfo::kSourceValFieldNumber;
#endif  // !_MSC_VER

MailInfo::MailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailInfo::InitAsDefaultInstance() {
  mailhead_ = const_cast< ::proto_ff::MailHead*>(&::proto_ff::MailHead::default_instance());
  content_ = const_cast< ::proto_ff::MailStrProto*>(&::proto_ff::MailStrProto::default_instance());
  attachmentlist_ = const_cast< ::proto_ff::MailAttachmentList*>(&::proto_ff::MailAttachmentList::default_instance());
}

MailInfo::MailInfo(const MailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailInfo::SharedCtor() {
  _cached_size_ = 0;
  mailhead_ = NULL;
  content_ = NULL;
  gold_ = GOOGLE_ULONGLONG(0);
  diamond_ = GOOGLE_ULONGLONG(0);
  binddiamond_ = GOOGLE_ULONGLONG(0);
  magiccrystal_ = GOOGLE_ULONGLONG(0);
  prestige_ = GOOGLE_ULONGLONG(0);
  attachmentlist_ = NULL;
  source_ = 0;
  sourceval_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailInfo::~MailInfo() {
  SharedDtor();
}

void MailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete mailhead_;
    delete content_;
    delete attachmentlist_;
  }
}

void MailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailInfo_descriptor_;
}

const MailInfo& MailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

MailInfo* MailInfo::default_instance_ = NULL;

MailInfo* MailInfo::New() const {
  return new MailInfo;
}

void MailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_mailhead()) {
      if (mailhead_ != NULL) mailhead_->::proto_ff::MailHead::Clear();
    }
    if (has_content()) {
      if (content_ != NULL) content_->::proto_ff::MailStrProto::Clear();
    }
    gold_ = GOOGLE_ULONGLONG(0);
    diamond_ = GOOGLE_ULONGLONG(0);
    binddiamond_ = GOOGLE_ULONGLONG(0);
    magiccrystal_ = GOOGLE_ULONGLONG(0);
    prestige_ = GOOGLE_ULONGLONG(0);
    if (has_attachmentlist()) {
      if (attachmentlist_ != NULL) attachmentlist_->::proto_ff::MailAttachmentList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    source_ = 0;
    sourceval_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.MailHead mailHead = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mailhead()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional .proto_ff.MailStrProto content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_diamond;
        break;
      }

      // optional uint64 diamond = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bindDiamond;
        break;
      }

      // optional uint64 bindDiamond = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_magiccrystal;
        break;
      }

      // optional uint64 magiccrystal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magiccrystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &magiccrystal_)));
          set_has_magiccrystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_prestige;
        break;
      }

      // optional uint64 prestige = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_attachmentList;
        break;
      }

      // optional .proto_ff.MailAttachmentList attachmentList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attachmentList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attachmentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_source;
        break;
      }

      // optional int32 source = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sourceVal;
        break;
      }

      // optional int64 sourceVal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sourceVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sourceval_)));
          set_has_sourceval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.MailHead mailHead = 1;
  if (has_mailhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mailhead(), output);
  }

  // optional .proto_ff.MailStrProto content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->content(), output);
  }

  // optional uint64 gold = 3;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->gold(), output);
  }

  // optional uint64 diamond = 4;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->diamond(), output);
  }

  // optional uint64 bindDiamond = 5;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->binddiamond(), output);
  }

  // optional uint64 magiccrystal = 6;
  if (has_magiccrystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->magiccrystal(), output);
  }

  // optional uint64 prestige = 7;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->prestige(), output);
  }

  // optional .proto_ff.MailAttachmentList attachmentList = 8;
  if (has_attachmentlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->attachmentlist(), output);
  }

  // optional int32 source = 9;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->source(), output);
  }

  // optional int64 sourceVal = 10;
  if (has_sourceval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->sourceval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.MailHead mailHead = 1;
  if (has_mailhead()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mailhead(), target);
  }

  // optional .proto_ff.MailStrProto content = 2;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->content(), target);
  }

  // optional uint64 gold = 3;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->gold(), target);
  }

  // optional uint64 diamond = 4;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->diamond(), target);
  }

  // optional uint64 bindDiamond = 5;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->binddiamond(), target);
  }

  // optional uint64 magiccrystal = 6;
  if (has_magiccrystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->magiccrystal(), target);
  }

  // optional uint64 prestige = 7;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->prestige(), target);
  }

  // optional .proto_ff.MailAttachmentList attachmentList = 8;
  if (has_attachmentlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->attachmentlist(), target);
  }

  // optional int32 source = 9;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->source(), target);
  }

  // optional int64 sourceVal = 10;
  if (has_sourceval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->sourceval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.MailHead mailHead = 1;
    if (has_mailhead()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mailhead());
    }

    // optional .proto_ff.MailStrProto content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional uint64 gold = 3;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint64 diamond = 4;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->diamond());
    }

    // optional uint64 bindDiamond = 5;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->binddiamond());
    }

    // optional uint64 magiccrystal = 6;
    if (has_magiccrystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->magiccrystal());
    }

    // optional uint64 prestige = 7;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prestige());
    }

    // optional .proto_ff.MailAttachmentList attachmentList = 8;
    if (has_attachmentlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attachmentlist());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 source = 9;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source());
    }

    // optional int64 sourceVal = 10;
    if (has_sourceval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sourceval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailInfo::MergeFrom(const MailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailhead()) {
      mutable_mailhead()->::proto_ff::MailHead::MergeFrom(from.mailhead());
    }
    if (from.has_content()) {
      mutable_content()->::proto_ff::MailStrProto::MergeFrom(from.content());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
    if (from.has_magiccrystal()) {
      set_magiccrystal(from.magiccrystal());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_attachmentlist()) {
      mutable_attachmentlist()->::proto_ff::MailAttachmentList::MergeFrom(from.attachmentlist());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_sourceval()) {
      set_sourceval(from.sourceval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailInfo::CopyFrom(const MailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailInfo::IsInitialized() const {

  return true;
}

void MailInfo::Swap(MailInfo* other) {
  if (other != this) {
    std::swap(mailhead_, other->mailhead_);
    std::swap(content_, other->content_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(magiccrystal_, other->magiccrystal_);
    std::swap(prestige_, other->prestige_);
    std::swap(attachmentlist_, other->attachmentlist_);
    std::swap(source_, other->source_);
    std::swap(sourceval_, other->sourceval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailInfo_descriptor_;
  metadata.reflection = MailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebMailItemProto::kIdFieldNumber;
const int WebMailItemProto::kNumFieldNumber;
#endif  // !_MSC_VER

WebMailItemProto::WebMailItemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebMailItemProto::InitAsDefaultInstance() {
}

WebMailItemProto::WebMailItemProto(const WebMailItemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebMailItemProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  num_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebMailItemProto::~WebMailItemProto() {
  SharedDtor();
}

void WebMailItemProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WebMailItemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebMailItemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebMailItemProto_descriptor_;
}

const WebMailItemProto& WebMailItemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

WebMailItemProto* WebMailItemProto::default_instance_ = NULL;

WebMailItemProto* WebMailItemProto::New() const {
  return new WebMailItemProto;
}

void WebMailItemProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    num_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebMailItemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint64 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebMailItemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebMailItemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebMailItemProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebMailItemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebMailItemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebMailItemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebMailItemProto::MergeFrom(const WebMailItemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebMailItemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebMailItemProto::CopyFrom(const WebMailItemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMailItemProto::IsInitialized() const {

  return true;
}

void WebMailItemProto::Swap(WebMailItemProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebMailItemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebMailItemProto_descriptor_;
  metadata.reflection = WebMailItemProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebMailDataProto::kMailIdFieldNumber;
const int WebMailDataProto::kCreateTimeFieldNumber;
const int WebMailDataProto::kTopicFieldNumber;
const int WebMailDataProto::kFetchFieldNumber;
const int WebMailDataProto::kContentFieldNumber;
const int WebMailDataProto::kGoldFieldNumber;
const int WebMailDataProto::kDiamondFieldNumber;
const int WebMailDataProto::kBindDiamondFieldNumber;
const int WebMailDataProto::kArenaScoreFieldNumber;
const int WebMailDataProto::kMagiccrystalFieldNumber;
const int WebMailDataProto::kPrestigeFieldNumber;
const int WebMailDataProto::kItemListFieldNumber;
#endif  // !_MSC_VER

WebMailDataProto::WebMailDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebMailDataProto::InitAsDefaultInstance() {
  topic_ = const_cast< ::proto_ff::MailStrProto*>(&::proto_ff::MailStrProto::default_instance());
  content_ = const_cast< ::proto_ff::MailStrProto*>(&::proto_ff::MailStrProto::default_instance());
}

WebMailDataProto::WebMailDataProto(const WebMailDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebMailDataProto::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  topic_ = NULL;
  fetch_ = 0;
  content_ = NULL;
  gold_ = GOOGLE_ULONGLONG(0);
  diamond_ = GOOGLE_ULONGLONG(0);
  binddiamond_ = GOOGLE_ULONGLONG(0);
  arenascore_ = GOOGLE_ULONGLONG(0);
  magiccrystal_ = GOOGLE_ULONGLONG(0);
  prestige_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebMailDataProto::~WebMailDataProto() {
  SharedDtor();
}

void WebMailDataProto::SharedDtor() {
  if (this != default_instance_) {
    delete topic_;
    delete content_;
  }
}

void WebMailDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebMailDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebMailDataProto_descriptor_;
}

const WebMailDataProto& WebMailDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

WebMailDataProto* WebMailDataProto::default_instance_ = NULL;

WebMailDataProto* WebMailDataProto::New() const {
  return new WebMailDataProto;
}

void WebMailDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    if (has_topic()) {
      if (topic_ != NULL) topic_->::proto_ff::MailStrProto::Clear();
    }
    fetch_ = 0;
    if (has_content()) {
      if (content_ != NULL) content_->::proto_ff::MailStrProto::Clear();
    }
    gold_ = GOOGLE_ULONGLONG(0);
    diamond_ = GOOGLE_ULONGLONG(0);
    binddiamond_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    arenascore_ = GOOGLE_ULONGLONG(0);
    magiccrystal_ = GOOGLE_ULONGLONG(0);
    prestige_ = GOOGLE_ULONGLONG(0);
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebMailDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_createTime;
        break;
      }

      // optional uint64 createTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }

      // optional .proto_ff.MailStrProto topic = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_content;
        break;
      }

      // optional .proto_ff.MailStrProto content = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gold;
        break;
      }

      // optional uint64 gold = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_diamond;
        break;
      }

      // optional uint64 diamond = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &diamond_)));
          set_has_diamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bindDiamond;
        break;
      }

      // optional uint64 bindDiamond = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &binddiamond_)));
          set_has_binddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_arenaScore;
        break;
      }

      // optional uint64 arenaScore = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenaScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &arenascore_)));
          set_has_arenascore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_magiccrystal;
        break;
      }

      // optional uint64 magiccrystal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magiccrystal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &magiccrystal_)));
          set_has_magiccrystal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_prestige;
        break;
      }

      // optional uint64 prestige = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_itemList;
        break;
      }

      // repeated .proto_ff.WebMailItemProto itemList = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_itemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebMailDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mailid(), output);
  }

  // optional uint64 createTime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->createtime(), output);
  }

  // optional .proto_ff.MailStrProto topic = 3;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->topic(), output);
  }

  // optional int32 fetch = 4;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fetch(), output);
  }

  // optional .proto_ff.MailStrProto content = 5;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->content(), output);
  }

  // optional uint64 gold = 6;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->gold(), output);
  }

  // optional uint64 diamond = 7;
  if (has_diamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->diamond(), output);
  }

  // optional uint64 bindDiamond = 8;
  if (has_binddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->binddiamond(), output);
  }

  // optional uint64 arenaScore = 9;
  if (has_arenascore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->arenascore(), output);
  }

  // optional uint64 magiccrystal = 10;
  if (has_magiccrystal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->magiccrystal(), output);
  }

  // optional uint64 prestige = 11;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->prestige(), output);
  }

  // repeated .proto_ff.WebMailItemProto itemList = 12;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebMailDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mailid(), target);
  }

  // optional uint64 createTime = 2;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->createtime(), target);
  }

  // optional .proto_ff.MailStrProto topic = 3;
  if (has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->topic(), target);
  }

  // optional int32 fetch = 4;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fetch(), target);
  }

  // optional .proto_ff.MailStrProto content = 5;
  if (has_content()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->content(), target);
  }

  // optional uint64 gold = 6;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->gold(), target);
  }

  // optional uint64 diamond = 7;
  if (has_diamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->diamond(), target);
  }

  // optional uint64 bindDiamond = 8;
  if (has_binddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->binddiamond(), target);
  }

  // optional uint64 arenaScore = 9;
  if (has_arenascore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->arenascore(), target);
  }

  // optional uint64 magiccrystal = 10;
  if (has_magiccrystal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->magiccrystal(), target);
  }

  // optional uint64 prestige = 11;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->prestige(), target);
  }

  // repeated .proto_ff.WebMailItemProto itemList = 12;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebMailDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mailid());
    }

    // optional uint64 createTime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // optional .proto_ff.MailStrProto topic = 3;
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topic());
    }

    // optional int32 fetch = 4;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

    // optional .proto_ff.MailStrProto content = 5;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->content());
    }

    // optional uint64 gold = 6;
    if (has_gold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gold());
    }

    // optional uint64 diamond = 7;
    if (has_diamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->diamond());
    }

    // optional uint64 bindDiamond = 8;
    if (has_binddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->binddiamond());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 arenaScore = 9;
    if (has_arenascore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->arenascore());
    }

    // optional uint64 magiccrystal = 10;
    if (has_magiccrystal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->magiccrystal());
    }

    // optional uint64 prestige = 11;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prestige());
    }

  }
  // repeated .proto_ff.WebMailItemProto itemList = 12;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebMailDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebMailDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebMailDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebMailDataProto::MergeFrom(const WebMailDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_topic()) {
      mutable_topic()->::proto_ff::MailStrProto::MergeFrom(from.topic());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
    if (from.has_content()) {
      mutable_content()->::proto_ff::MailStrProto::MergeFrom(from.content());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_diamond()) {
      set_diamond(from.diamond());
    }
    if (from.has_binddiamond()) {
      set_binddiamond(from.binddiamond());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_arenascore()) {
      set_arenascore(from.arenascore());
    }
    if (from.has_magiccrystal()) {
      set_magiccrystal(from.magiccrystal());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebMailDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebMailDataProto::CopyFrom(const WebMailDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMailDataProto::IsInitialized() const {

  return true;
}

void WebMailDataProto::Swap(WebMailDataProto* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(createtime_, other->createtime_);
    std::swap(topic_, other->topic_);
    std::swap(fetch_, other->fetch_);
    std::swap(content_, other->content_);
    std::swap(gold_, other->gold_);
    std::swap(diamond_, other->diamond_);
    std::swap(binddiamond_, other->binddiamond_);
    std::swap(arenascore_, other->arenascore_);
    std::swap(magiccrystal_, other->magiccrystal_);
    std::swap(prestige_, other->prestige_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebMailDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebMailDataProto_descriptor_;
  metadata.reflection = WebMailDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseItemArgProto::kIntParamFieldNumber;
const int UseItemArgProto::kStrParamFieldNumber;
const int UseItemArgProto::kItemLstFieldNumber;
#endif  // !_MSC_VER

UseItemArgProto::UseItemArgProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseItemArgProto::InitAsDefaultInstance() {
}

UseItemArgProto::UseItemArgProto(const UseItemArgProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseItemArgProto::SharedCtor() {
  _cached_size_ = 0;
  int_param_ = GOOGLE_LONGLONG(0);
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseItemArgProto::~UseItemArgProto() {
  SharedDtor();
}

void UseItemArgProto::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
  }
}

void UseItemArgProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItemArgProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemArgProto_descriptor_;
}

const UseItemArgProto& UseItemArgProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

UseItemArgProto* UseItemArgProto::default_instance_ = NULL;

UseItemArgProto* UseItemArgProto::New() const {
  return new UseItemArgProto;
}

void UseItemArgProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    int_param_ = GOOGLE_LONGLONG(0);
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
  }
  item_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseItemArgProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 int_param = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_str_param;
        break;
      }

      // optional bytes str_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_lst;
        break;
      }

      // repeated uint64 item_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_item_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseItemArgProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 int_param = 1;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->int_param(), output);
  }

  // optional bytes str_param = 2;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->str_param(), output);
  }

  // repeated uint64 item_lst = 3;
  for (int i = 0; i < this->item_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->item_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseItemArgProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 int_param = 1;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->int_param(), target);
  }

  // optional bytes str_param = 2;
  if (has_str_param()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->str_param(), target);
  }

  // repeated uint64 item_lst = 3;
  for (int i = 0; i < this->item_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->item_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseItemArgProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 int_param = 1;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_param());
    }

    // optional bytes str_param = 2;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_param());
    }

  }
  // repeated uint64 item_lst = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->item_lst(i));
    }
    total_size += 1 * this->item_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItemArgProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseItemArgProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseItemArgProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseItemArgProto::MergeFrom(const UseItemArgProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_lst_.MergeFrom(from.item_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseItemArgProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemArgProto::CopyFrom(const UseItemArgProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemArgProto::IsInitialized() const {

  return true;
}

void UseItemArgProto::Swap(UseItemArgProto* other) {
  if (other != this) {
    std::swap(int_param_, other->int_param_);
    std::swap(str_param_, other->str_param_);
    item_lst_.Swap(&other->item_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseItemArgProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItemArgProto_descriptor_;
  metadata.reflection = UseItemArgProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyRoleFacadeCastRsp::kRoleidFieldNumber;
const int NotifyRoleFacadeCastRsp::kFacadeFieldNumber;
#endif  // !_MSC_VER

NotifyRoleFacadeCastRsp::NotifyRoleFacadeCastRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyRoleFacadeCastRsp::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

NotifyRoleFacadeCastRsp::NotifyRoleFacadeCastRsp(const NotifyRoleFacadeCastRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyRoleFacadeCastRsp::SharedCtor() {
  _cached_size_ = 0;
  roleid_ = GOOGLE_ULONGLONG(0);
  facade_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyRoleFacadeCastRsp::~NotifyRoleFacadeCastRsp() {
  SharedDtor();
}

void NotifyRoleFacadeCastRsp::SharedDtor() {
  if (this != default_instance_) {
    delete facade_;
  }
}

void NotifyRoleFacadeCastRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyRoleFacadeCastRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyRoleFacadeCastRsp_descriptor_;
}

const NotifyRoleFacadeCastRsp& NotifyRoleFacadeCastRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

NotifyRoleFacadeCastRsp* NotifyRoleFacadeCastRsp::default_instance_ = NULL;

NotifyRoleFacadeCastRsp* NotifyRoleFacadeCastRsp::New() const {
  return new NotifyRoleFacadeCastRsp;
}

void NotifyRoleFacadeCastRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roleid_ = GOOGLE_ULONGLONG(0);
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyRoleFacadeCastRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 roleid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &roleid_)));
          set_has_roleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyRoleFacadeCastRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->roleid(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 2;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->facade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyRoleFacadeCastRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 roleid = 1;
  if (has_roleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->roleid(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 2;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->facade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyRoleFacadeCastRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 roleid = 1;
    if (has_roleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->roleid());
    }

    // optional .proto_ff.RoleFacadeProto facade = 2;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyRoleFacadeCastRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyRoleFacadeCastRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyRoleFacadeCastRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyRoleFacadeCastRsp::MergeFrom(const NotifyRoleFacadeCastRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roleid()) {
      set_roleid(from.roleid());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyRoleFacadeCastRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyRoleFacadeCastRsp::CopyFrom(const NotifyRoleFacadeCastRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyRoleFacadeCastRsp::IsInitialized() const {

  return true;
}

void NotifyRoleFacadeCastRsp::Swap(NotifyRoleFacadeCastRsp* other) {
  if (other != this) {
    std::swap(roleid_, other->roleid_);
    std::swap(facade_, other->facade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyRoleFacadeCastRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyRoleFacadeCastRsp_descriptor_;
  metadata.reflection = NotifyRoleFacadeCastRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockInfoData::kUnlockIdFieldNumber;
const int FunctionUnlockInfoData::kGetRewardFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockInfoData::FunctionUnlockInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockInfoData::InitAsDefaultInstance() {
}

FunctionUnlockInfoData::FunctionUnlockInfoData(const FunctionUnlockInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockInfoData::SharedCtor() {
  _cached_size_ = 0;
  unlockid_ = GOOGLE_ULONGLONG(0);
  get_reward_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockInfoData::~FunctionUnlockInfoData() {
  SharedDtor();
}

void FunctionUnlockInfoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockInfoData_descriptor_;
}

const FunctionUnlockInfoData& FunctionUnlockInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FunctionUnlockInfoData* FunctionUnlockInfoData::default_instance_ = NULL;

FunctionUnlockInfoData* FunctionUnlockInfoData::New() const {
  return new FunctionUnlockInfoData;
}

void FunctionUnlockInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unlockid_ = GOOGLE_ULONGLONG(0);
    get_reward_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 unlockId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &unlockid_)));
          set_has_unlockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_get_reward;
        break;
      }

      // optional bool get_reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_get_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &get_reward_)));
          set_has_get_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 unlockId = 1;
  if (has_unlockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->unlockid(), output);
  }

  // optional bool get_reward = 2;
  if (has_get_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->get_reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 unlockId = 1;
  if (has_unlockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->unlockid(), target);
  }

  // optional bool get_reward = 2;
  if (has_get_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->get_reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 unlockId = 1;
    if (has_unlockid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->unlockid());
    }

    // optional bool get_reward = 2;
    if (has_get_reward()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockInfoData::MergeFrom(const FunctionUnlockInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unlockid()) {
      set_unlockid(from.unlockid());
    }
    if (from.has_get_reward()) {
      set_get_reward(from.get_reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockInfoData::CopyFrom(const FunctionUnlockInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockInfoData::IsInitialized() const {

  return true;
}

void FunctionUnlockInfoData::Swap(FunctionUnlockInfoData* other) {
  if (other != this) {
    std::swap(unlockid_, other->unlockid_);
    std::swap(get_reward_, other->get_reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockInfoData_descriptor_;
  metadata.reflection = FunctionUnlockInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockInfo::kDataFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockInfo::FunctionUnlockInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockInfo::InitAsDefaultInstance() {
}

FunctionUnlockInfo::FunctionUnlockInfo(const FunctionUnlockInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockInfo::~FunctionUnlockInfo() {
  SharedDtor();
}

void FunctionUnlockInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockInfo_descriptor_;
}

const FunctionUnlockInfo& FunctionUnlockInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FunctionUnlockInfo* FunctionUnlockInfo::default_instance_ = NULL;

FunctionUnlockInfo* FunctionUnlockInfo::New() const {
  return new FunctionUnlockInfo;
}

void FunctionUnlockInfo::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FunctionUnlockInfoData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FunctionUnlockInfoData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FunctionUnlockInfoData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockInfo::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FunctionUnlockInfoData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockInfo::MergeFrom(const FunctionUnlockInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockInfo::CopyFrom(const FunctionUnlockInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockInfo::IsInitialized() const {

  return true;
}

void FunctionUnlockInfo::Swap(FunctionUnlockInfo* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockInfo_descriptor_;
  metadata.reflection = FunctionUnlockInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RolePlayerMiniInfo::kPlayerIdFieldNumber;
const int RolePlayerMiniInfo::kPlayerNameFieldNumber;
const int RolePlayerMiniInfo::kZidFieldNumber;
const int RolePlayerMiniInfo::kLevelFieldNumber;
const int RolePlayerMiniInfo::kClosenessFieldNumber;
const int RolePlayerMiniInfo::kRecentTypeFieldNumber;
const int RolePlayerMiniInfo::kRecentTimeFieldNumber;
const int RolePlayerMiniInfo::kProfFieldNumber;
const int RolePlayerMiniInfo::kTeamIdFieldNumber;
const int RolePlayerMiniInfo::kUnionIdFieldNumber;
const int RolePlayerMiniInfo::kFightPowerFieldNumber;
const int RolePlayerMiniInfo::kKillMeTimesFieldNumber;
const int RolePlayerMiniInfo::kOfflineTimeFieldNumber;
const int RolePlayerMiniInfo::kConnectFieldNumber;
const int RolePlayerMiniInfo::kOnlineFieldNumber;
const int RolePlayerMiniInfo::kVipLevelFieldNumber;
const int RolePlayerMiniInfo::kFacadeFieldNumber;
const int RolePlayerMiniInfo::kMarryFieldNumber;
#endif  // !_MSC_VER

RolePlayerMiniInfo::RolePlayerMiniInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RolePlayerMiniInfo::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
}

RolePlayerMiniInfo::RolePlayerMiniInfo(const RolePlayerMiniInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RolePlayerMiniInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_ULONGLONG(0);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  level_ = 0u;
  closeness_ = 0u;
  recenttype_ = 0u;
  recenttime_ = GOOGLE_ULONGLONG(0);
  prof_ = 0u;
  teamid_ = 0u;
  unionid_ = 0u;
  fightpower_ = GOOGLE_ULONGLONG(0);
  killmetimes_ = 0u;
  offlinetime_ = GOOGLE_ULONGLONG(0);
  connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  online_ = false;
  viplevel_ = 0u;
  facade_ = NULL;
  marry_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RolePlayerMiniInfo::~RolePlayerMiniInfo() {
  SharedDtor();
}

void RolePlayerMiniInfo::SharedDtor() {
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (connect_ != &::google::protobuf::internal::kEmptyString) {
    delete connect_;
  }
  if (this != default_instance_) {
    delete facade_;
  }
}

void RolePlayerMiniInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RolePlayerMiniInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RolePlayerMiniInfo_descriptor_;
}

const RolePlayerMiniInfo& RolePlayerMiniInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RolePlayerMiniInfo* RolePlayerMiniInfo::default_instance_ = NULL;

RolePlayerMiniInfo* RolePlayerMiniInfo::New() const {
  return new RolePlayerMiniInfo;
}

void RolePlayerMiniInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_ULONGLONG(0);
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
    zid_ = 0u;
    level_ = 0u;
    closeness_ = 0u;
    recenttype_ = 0u;
    recenttime_ = GOOGLE_ULONGLONG(0);
    prof_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    teamid_ = 0u;
    unionid_ = 0u;
    fightpower_ = GOOGLE_ULONGLONG(0);
    killmetimes_ = 0u;
    offlinetime_ = GOOGLE_ULONGLONG(0);
    if (has_connect()) {
      if (connect_ != &::google::protobuf::internal::kEmptyString) {
        connect_->clear();
      }
    }
    online_ = false;
    viplevel_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    marry_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RolePlayerMiniInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 playerId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerName;
        break;
      }

      // optional string playerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_playername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->playername().data(), this->playername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_closeness;
        break;
      }

      // optional uint32 closeness = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closeness_)));
          set_has_closeness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recentType;
        break;
      }

      // optional uint32 recentType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recentType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recenttype_)));
          set_has_recenttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_recentTime;
        break;
      }

      // optional uint64 recentTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recentTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recenttime_)));
          set_has_recenttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_prof;
        break;
      }

      // optional uint32 prof = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_teamId;
        break;
      }

      // optional uint32 teamId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_unionId;
        break;
      }

      // optional uint32 unionId = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unionid_)));
          set_has_unionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_fightPower;
        break;
      }

      // optional uint64 fightPower = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_killMeTimes;
        break;
      }

      // optional uint32 killMeTimes = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killMeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killmetimes_)));
          set_has_killmetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_offlineTime;
        break;
      }

      // optional uint64 offlineTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_connect;
        break;
      }

      // optional string connect = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connect().data(), this->connect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_online;
        break;
      }

      // optional bool online = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_vipLevel;
        break;
      }

      // optional uint32 vipLevel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_marry;
        break;
      }

      // optional uint32 marry = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marry_)));
          set_has_marry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RolePlayerMiniInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->playerid(), output);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->playername(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 closeness = 6;
  if (has_closeness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->closeness(), output);
  }

  // optional uint32 recentType = 7;
  if (has_recenttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->recenttype(), output);
  }

  // optional uint64 recentTime = 8;
  if (has_recenttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->recenttime(), output);
  }

  // optional uint32 prof = 9;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->prof(), output);
  }

  // optional uint32 teamId = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->teamid(), output);
  }

  // optional uint32 unionId = 11;
  if (has_unionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->unionid(), output);
  }

  // optional uint64 fightPower = 12;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->fightpower(), output);
  }

  // optional uint32 killMeTimes = 13;
  if (has_killmetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->killmetimes(), output);
  }

  // optional uint64 offlineTime = 14;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->offlinetime(), output);
  }

  // optional string connect = 15;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->connect(), output);
  }

  // optional bool online = 16;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->online(), output);
  }

  // optional uint32 vipLevel = 17;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->viplevel(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 18;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->facade(), output);
  }

  // optional uint32 marry = 19;
  if (has_marry()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->marry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RolePlayerMiniInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 playerId = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->playerid(), target);
  }

  // optional string playerName = 2;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->playername().data(), this->playername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->playername(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 closeness = 6;
  if (has_closeness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->closeness(), target);
  }

  // optional uint32 recentType = 7;
  if (has_recenttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->recenttype(), target);
  }

  // optional uint64 recentTime = 8;
  if (has_recenttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->recenttime(), target);
  }

  // optional uint32 prof = 9;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->prof(), target);
  }

  // optional uint32 teamId = 10;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->teamid(), target);
  }

  // optional uint32 unionId = 11;
  if (has_unionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->unionid(), target);
  }

  // optional uint64 fightPower = 12;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->fightpower(), target);
  }

  // optional uint32 killMeTimes = 13;
  if (has_killmetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->killmetimes(), target);
  }

  // optional uint64 offlineTime = 14;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->offlinetime(), target);
  }

  // optional string connect = 15;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->connect(), target);
  }

  // optional bool online = 16;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->online(), target);
  }

  // optional uint32 vipLevel = 17;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->viplevel(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 18;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->facade(), target);
  }

  // optional uint32 marry = 19;
  if (has_marry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->marry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RolePlayerMiniInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 playerId = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->playerid());
    }

    // optional string playerName = 2;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->playername());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 closeness = 6;
    if (has_closeness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->closeness());
    }

    // optional uint32 recentType = 7;
    if (has_recenttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recenttype());
    }

    // optional uint64 recentTime = 8;
    if (has_recenttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recenttime());
    }

    // optional uint32 prof = 9;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 teamId = 10;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 unionId = 11;
    if (has_unionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unionid());
    }

    // optional uint64 fightPower = 12;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fightpower());
    }

    // optional uint32 killMeTimes = 13;
    if (has_killmetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killmetimes());
    }

    // optional uint64 offlineTime = 14;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->offlinetime());
    }

    // optional string connect = 15;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

    // optional bool online = 16;
    if (has_online()) {
      total_size += 2 + 1;
    }

    // optional uint32 vipLevel = 17;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplevel());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .proto_ff.RoleFacadeProto facade = 18;
    if (has_facade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional uint32 marry = 19;
    if (has_marry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marry());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RolePlayerMiniInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RolePlayerMiniInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RolePlayerMiniInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RolePlayerMiniInfo::MergeFrom(const RolePlayerMiniInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_closeness()) {
      set_closeness(from.closeness());
    }
    if (from.has_recenttype()) {
      set_recenttype(from.recenttype());
    }
    if (from.has_recenttime()) {
      set_recenttime(from.recenttime());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_unionid()) {
      set_unionid(from.unionid());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_killmetimes()) {
      set_killmetimes(from.killmetimes());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_marry()) {
      set_marry(from.marry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RolePlayerMiniInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RolePlayerMiniInfo::CopyFrom(const RolePlayerMiniInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePlayerMiniInfo::IsInitialized() const {

  return true;
}

void RolePlayerMiniInfo::Swap(RolePlayerMiniInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(playername_, other->playername_);
    std::swap(zid_, other->zid_);
    std::swap(level_, other->level_);
    std::swap(closeness_, other->closeness_);
    std::swap(recenttype_, other->recenttype_);
    std::swap(recenttime_, other->recenttime_);
    std::swap(prof_, other->prof_);
    std::swap(teamid_, other->teamid_);
    std::swap(unionid_, other->unionid_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(killmetimes_, other->killmetimes_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(connect_, other->connect_);
    std::swap(online_, other->online_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(facade_, other->facade_);
    std::swap(marry_, other->marry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RolePlayerMiniInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RolePlayerMiniInfo_descriptor_;
  metadata.reflection = RolePlayerMiniInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfo::kIdFieldNumber;
const int FriendInfo::kClosenessFieldNumber;
const int FriendInfo::kTodayClosenessFieldNumber;
const int FriendInfo::kUpdateTimeFieldNumber;
#endif  // !_MSC_VER

FriendInfo::FriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfo::InitAsDefaultInstance() {
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  closeness_ = 0u;
  todaycloseness_ = 0u;
  updatetime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfo::~FriendInfo() {
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New() const {
  return new FriendInfo;
}

void FriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    closeness_ = 0u;
    todaycloseness_ = 0u;
    updatetime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_closeness;
        break;
      }

      // optional uint32 closeness = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closeness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &closeness_)));
          set_has_closeness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_todayCloseness;
        break;
      }

      // optional uint32 todayCloseness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayCloseness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaycloseness_)));
          set_has_todaycloseness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_updateTime;
        break;
      }

      // optional uint64 updateTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 closeness = 2;
  if (has_closeness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->closeness(), output);
  }

  // optional uint32 todayCloseness = 3;
  if (has_todaycloseness()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->todaycloseness(), output);
  }

  // optional uint64 updateTime = 4;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 closeness = 2;
  if (has_closeness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->closeness(), target);
  }

  // optional uint32 todayCloseness = 3;
  if (has_todaycloseness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->todaycloseness(), target);
  }

  // optional uint64 updateTime = 4;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 closeness = 2;
    if (has_closeness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->closeness());
    }

    // optional uint32 todayCloseness = 3;
    if (has_todaycloseness()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaycloseness());
    }

    // optional uint64 updateTime = 4;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_closeness()) {
      set_closeness(from.closeness());
    }
    if (from.has_todaycloseness()) {
      set_todaycloseness(from.todaycloseness());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {

  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(closeness_, other->closeness_);
    std::swap(todaycloseness_, other->todaycloseness_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendApplyInfo::kIdFieldNumber;
const int FriendApplyInfo::kConnectFieldNumber;
#endif  // !_MSC_VER

FriendApplyInfo::FriendApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendApplyInfo::InitAsDefaultInstance() {
}

FriendApplyInfo::FriendApplyInfo(const FriendApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  connect_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendApplyInfo::~FriendApplyInfo() {
  SharedDtor();
}

void FriendApplyInfo::SharedDtor() {
  if (connect_ != &::google::protobuf::internal::kEmptyString) {
    delete connect_;
  }
  if (this != default_instance_) {
  }
}

void FriendApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendApplyInfo_descriptor_;
}

const FriendApplyInfo& FriendApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FriendApplyInfo* FriendApplyInfo::default_instance_ = NULL;

FriendApplyInfo* FriendApplyInfo::New() const {
  return new FriendApplyInfo;
}

void FriendApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_connect()) {
      if (connect_ != &::google::protobuf::internal::kEmptyString) {
        connect_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_connect;
        break;
      }

      // optional string connect = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_connect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connect()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->connect().data(), this->connect().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional string connect = 2;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->connect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional string connect = 2;
  if (has_connect()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->connect().data(), this->connect().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->connect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendApplyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional string connect = 2;
    if (has_connect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->connect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendApplyInfo::MergeFrom(const FriendApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_connect()) {
      set_connect(from.connect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendApplyInfo::CopyFrom(const FriendApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendApplyInfo::IsInitialized() const {

  return true;
}

void FriendApplyInfo::Swap(FriendApplyInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(connect_, other->connect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendApplyInfo_descriptor_;
  metadata.reflection = FriendApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationHateInfo::kIdFieldNumber;
const int RelationHateInfo::kKillMeTimesFieldNumber;
#endif  // !_MSC_VER

RelationHateInfo::RelationHateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationHateInfo::InitAsDefaultInstance() {
}

RelationHateInfo::RelationHateInfo(const RelationHateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationHateInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  killmetimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationHateInfo::~RelationHateInfo() {
  SharedDtor();
}

void RelationHateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationHateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationHateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationHateInfo_descriptor_;
}

const RelationHateInfo& RelationHateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RelationHateInfo* RelationHateInfo::default_instance_ = NULL;

RelationHateInfo* RelationHateInfo::New() const {
  return new RelationHateInfo;
}

void RelationHateInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    killmetimes_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationHateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killMeTimes;
        break;
      }

      // optional uint32 killMeTimes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killMeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killmetimes_)));
          set_has_killmetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationHateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 killMeTimes = 2;
  if (has_killmetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->killmetimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationHateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 killMeTimes = 2;
  if (has_killmetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->killmetimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationHateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 killMeTimes = 2;
    if (has_killmetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killmetimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationHateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationHateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationHateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationHateInfo::MergeFrom(const RelationHateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_killmetimes()) {
      set_killmetimes(from.killmetimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationHateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationHateInfo::CopyFrom(const RelationHateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationHateInfo::IsInitialized() const {

  return true;
}

void RelationHateInfo::Swap(RelationHateInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(killmetimes_, other->killmetimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationHateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationHateInfo_descriptor_;
  metadata.reflection = RelationHateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationGiftRecord::kFriendIdFieldNumber;
const int RelationGiftRecord::kItemIdFieldNumber;
const int RelationGiftRecord::kIsThanksFieldNumber;
#endif  // !_MSC_VER

RelationGiftRecord::RelationGiftRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationGiftRecord::InitAsDefaultInstance() {
}

RelationGiftRecord::RelationGiftRecord(const RelationGiftRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationGiftRecord::SharedCtor() {
  _cached_size_ = 0;
  friendid_ = GOOGLE_ULONGLONG(0);
  itemid_ = GOOGLE_ULONGLONG(0);
  isthanks_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationGiftRecord::~RelationGiftRecord() {
  SharedDtor();
}

void RelationGiftRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationGiftRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationGiftRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationGiftRecord_descriptor_;
}

const RelationGiftRecord& RelationGiftRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RelationGiftRecord* RelationGiftRecord::default_instance_ = NULL;

RelationGiftRecord* RelationGiftRecord::New() const {
  return new RelationGiftRecord;
}

void RelationGiftRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    friendid_ = GOOGLE_ULONGLONG(0);
    itemid_ = GOOGLE_ULONGLONG(0);
    isthanks_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationGiftRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 friendId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &friendid_)));
          set_has_friendid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isThanks;
        break;
      }

      // optional uint32 isThanks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isThanks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isthanks_)));
          set_has_isthanks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationGiftRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 friendId = 1;
  if (has_friendid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->friendid(), output);
  }

  // optional uint64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->itemid(), output);
  }

  // optional uint32 isThanks = 3;
  if (has_isthanks()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->isthanks(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationGiftRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 friendId = 1;
  if (has_friendid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->friendid(), target);
  }

  // optional uint64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->itemid(), target);
  }

  // optional uint32 isThanks = 3;
  if (has_isthanks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->isthanks(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationGiftRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 friendId = 1;
    if (has_friendid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->friendid());
    }

    // optional uint64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional uint32 isThanks = 3;
    if (has_isthanks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isthanks());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationGiftRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationGiftRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationGiftRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationGiftRecord::MergeFrom(const RelationGiftRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendid()) {
      set_friendid(from.friendid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_isthanks()) {
      set_isthanks(from.isthanks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationGiftRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationGiftRecord::CopyFrom(const RelationGiftRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationGiftRecord::IsInitialized() const {

  return true;
}

void RelationGiftRecord::Swap(RelationGiftRecord* other) {
  if (other != this) {
    std::swap(friendid_, other->friendid_);
    std::swap(itemid_, other->itemid_);
    std::swap(isthanks_, other->isthanks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationGiftRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationGiftRecord_descriptor_;
  metadata.reflection = RelationGiftRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelationDBInfo::kFriendListFieldNumber;
const int RelationDBInfo::kBlackListFieldNumber;
const int RelationDBInfo::kHateListFieldNumber;
const int RelationDBInfo::kApplyListFieldNumber;
const int RelationDBInfo::kFriendsAddFieldNumber;
const int RelationDBInfo::kGiftRecordsFieldNumber;
#endif  // !_MSC_VER

RelationDBInfo::RelationDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelationDBInfo::InitAsDefaultInstance() {
}

RelationDBInfo::RelationDBInfo(const RelationDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelationDBInfo::SharedCtor() {
  _cached_size_ = 0;
  friends_add_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelationDBInfo::~RelationDBInfo() {
  SharedDtor();
}

void RelationDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelationDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelationDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelationDBInfo_descriptor_;
}

const RelationDBInfo& RelationDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

RelationDBInfo* RelationDBInfo::default_instance_ = NULL;

RelationDBInfo* RelationDBInfo::New() const {
  return new RelationDBInfo;
}

void RelationDBInfo::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    friends_add_ = 0u;
  }
  friendlist_.Clear();
  blacklist_.Clear();
  hatelist_.Clear();
  applylist_.Clear();
  giftrecords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelationDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FriendInfo friendList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friendList;
        if (input->ExpectTag(16)) goto parse_blackList;
        break;
      }

      // repeated uint64 blackList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blackList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_blacklist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_blacklist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_blackList;
        if (input->ExpectTag(26)) goto parse_hateList;
        break;
      }

      // repeated .proto_ff.RelationHateInfo hateList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hateList;
        if (input->ExpectTag(34)) goto parse_applyList;
        break;
      }

      // repeated .proto_ff.FriendApplyInfo applyList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_applyList;
        if (input->ExpectTag(40)) goto parse_friends_add;
        break;
      }

      // optional uint32 friends_add = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friends_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friends_add_)));
          set_has_friends_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_giftRecords;
        break;
      }

      // repeated .proto_ff.RelationGiftRecord giftRecords = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_giftRecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_giftrecords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_giftRecords;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelationDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FriendInfo friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendlist(i), output);
  }

  // repeated uint64 blackList = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->blacklist(i), output);
  }

  // repeated .proto_ff.RelationHateInfo hateList = 3;
  for (int i = 0; i < this->hatelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hatelist(i), output);
  }

  // repeated .proto_ff.FriendApplyInfo applyList = 4;
  for (int i = 0; i < this->applylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->applylist(i), output);
  }

  // optional uint32 friends_add = 5;
  if (has_friends_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->friends_add(), output);
  }

  // repeated .proto_ff.RelationGiftRecord giftRecords = 6;
  for (int i = 0; i < this->giftrecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->giftrecords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelationDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FriendInfo friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendlist(i), target);
  }

  // repeated uint64 blackList = 2;
  for (int i = 0; i < this->blacklist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->blacklist(i), target);
  }

  // repeated .proto_ff.RelationHateInfo hateList = 3;
  for (int i = 0; i < this->hatelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hatelist(i), target);
  }

  // repeated .proto_ff.FriendApplyInfo applyList = 4;
  for (int i = 0; i < this->applylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->applylist(i), target);
  }

  // optional uint32 friends_add = 5;
  if (has_friends_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->friends_add(), target);
  }

  // repeated .proto_ff.RelationGiftRecord giftRecords = 6;
  for (int i = 0; i < this->giftrecords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->giftrecords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelationDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 friends_add = 5;
    if (has_friends_add()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friends_add());
    }

  }
  // repeated .proto_ff.FriendInfo friendList = 1;
  total_size += 1 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  // repeated uint64 blackList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->blacklist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->blacklist(i));
    }
    total_size += 1 * this->blacklist_size() + data_size;
  }

  // repeated .proto_ff.RelationHateInfo hateList = 3;
  total_size += 1 * this->hatelist_size();
  for (int i = 0; i < this->hatelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hatelist(i));
  }

  // repeated .proto_ff.FriendApplyInfo applyList = 4;
  total_size += 1 * this->applylist_size();
  for (int i = 0; i < this->applylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applylist(i));
  }

  // repeated .proto_ff.RelationGiftRecord giftRecords = 6;
  total_size += 1 * this->giftrecords_size();
  for (int i = 0; i < this->giftrecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->giftrecords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelationDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelationDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelationDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelationDBInfo::MergeFrom(const RelationDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
  blacklist_.MergeFrom(from.blacklist_);
  hatelist_.MergeFrom(from.hatelist_);
  applylist_.MergeFrom(from.applylist_);
  giftrecords_.MergeFrom(from.giftrecords_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_friends_add()) {
      set_friends_add(from.friends_add());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelationDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelationDBInfo::CopyFrom(const RelationDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelationDBInfo::IsInitialized() const {

  return true;
}

void RelationDBInfo::Swap(RelationDBInfo* other) {
  if (other != this) {
    friendlist_.Swap(&other->friendlist_);
    blacklist_.Swap(&other->blacklist_);
    hatelist_.Swap(&other->hatelist_);
    applylist_.Swap(&other->applylist_);
    std::swap(friends_add_, other->friends_add_);
    giftrecords_.Swap(&other->giftrecords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelationDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelationDBInfo_descriptor_;
  metadata.reflection = RelationDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DigPerfor::kTypeFieldNumber;
const int DigPerfor::kValueFieldNumber;
#endif  // !_MSC_VER

DigPerfor::DigPerfor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DigPerfor::InitAsDefaultInstance() {
}

DigPerfor::DigPerfor(const DigPerfor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DigPerfor::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DigPerfor::~DigPerfor() {
  SharedDtor();
}

void DigPerfor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DigPerfor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigPerfor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DigPerfor_descriptor_;
}

const DigPerfor& DigPerfor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DigPerfor* DigPerfor::default_instance_ = NULL;

DigPerfor* DigPerfor::New() const {
  return new DigPerfor;
}

void DigPerfor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DigPerfor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DigPerfor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DigPerfor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DigPerfor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigPerfor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DigPerfor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DigPerfor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DigPerfor::MergeFrom(const DigPerfor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DigPerfor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigPerfor::CopyFrom(const DigPerfor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigPerfor::IsInitialized() const {

  return true;
}

void DigPerfor::Swap(DigPerfor* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DigPerfor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DigPerfor_descriptor_;
  metadata.reflection = DigPerfor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffProto::kBuffIndexFieldNumber;
const int BuffProto::kBuffIdFieldNumber;
const int BuffProto::kRecverCidFieldNumber;
const int BuffProto::kLeftMsecFieldNumber;
const int BuffProto::kSkillIdFieldNumber;
const int BuffProto::kSkillLevFieldNumber;
const int BuffProto::kIsEffectFieldNumber;
#endif  // !_MSC_VER

BuffProto::BuffProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffProto::InitAsDefaultInstance() {
}

BuffProto::BuffProto(const BuffProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffProto::SharedCtor() {
  _cached_size_ = 0;
  buff_index_ = GOOGLE_ULONGLONG(0);
  buff_id_ = GOOGLE_ULONGLONG(0);
  recver_cid_ = GOOGLE_ULONGLONG(0);
  left_msec_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  skill_lev_ = 0;
  is_effect_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffProto::~BuffProto() {
  SharedDtor();
}

void BuffProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffProto_descriptor_;
}

const BuffProto& BuffProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BuffProto* BuffProto::default_instance_ = NULL;

BuffProto* BuffProto::New() const {
  return new BuffProto;
}

void BuffProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buff_index_ = GOOGLE_ULONGLONG(0);
    buff_id_ = GOOGLE_ULONGLONG(0);
    recver_cid_ = GOOGLE_ULONGLONG(0);
    left_msec_ = 0;
    skill_id_ = GOOGLE_ULONGLONG(0);
    skill_lev_ = 0;
    is_effect_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 buff_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buff_index_)));
          set_has_buff_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buff_id;
        break;
      }

      // optional uint64 buff_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buff_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buff_id_)));
          set_has_buff_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recver_cid;
        break;
      }

      // optional uint64 recver_cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recver_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recver_cid_)));
          set_has_recver_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_left_msec;
        break;
      }

      // optional int32 left_msec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_msec_)));
          set_has_left_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_skill_id;
        break;
      }

      // optional uint64 skill_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_skill_lev;
        break;
      }

      // optional int32 skill_lev = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill_lev_)));
          set_has_skill_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_effect;
        break;
      }

      // optional int32 is_effect = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_effect_)));
          set_has_is_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 buff_index = 1;
  if (has_buff_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buff_index(), output);
  }

  // optional uint64 buff_id = 2;
  if (has_buff_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->buff_id(), output);
  }

  // optional uint64 recver_cid = 3;
  if (has_recver_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->recver_cid(), output);
  }

  // optional int32 left_msec = 4;
  if (has_left_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->left_msec(), output);
  }

  // optional uint64 skill_id = 5;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->skill_id(), output);
  }

  // optional int32 skill_lev = 6;
  if (has_skill_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skill_lev(), output);
  }

  // optional int32 is_effect = 7;
  if (has_is_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->is_effect(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 buff_index = 1;
  if (has_buff_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buff_index(), target);
  }

  // optional uint64 buff_id = 2;
  if (has_buff_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->buff_id(), target);
  }

  // optional uint64 recver_cid = 3;
  if (has_recver_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->recver_cid(), target);
  }

  // optional int32 left_msec = 4;
  if (has_left_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->left_msec(), target);
  }

  // optional uint64 skill_id = 5;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->skill_id(), target);
  }

  // optional int32 skill_lev = 6;
  if (has_skill_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skill_lev(), target);
  }

  // optional int32 is_effect = 7;
  if (has_is_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->is_effect(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 buff_index = 1;
    if (has_buff_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buff_index());
    }

    // optional uint64 buff_id = 2;
    if (has_buff_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buff_id());
    }

    // optional uint64 recver_cid = 3;
    if (has_recver_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recver_cid());
    }

    // optional int32 left_msec = 4;
    if (has_left_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_msec());
    }

    // optional uint64 skill_id = 5;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional int32 skill_lev = 6;
    if (has_skill_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill_lev());
    }

    // optional int32 is_effect = 7;
    if (has_is_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_effect());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffProto::MergeFrom(const BuffProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buff_index()) {
      set_buff_index(from.buff_index());
    }
    if (from.has_buff_id()) {
      set_buff_id(from.buff_id());
    }
    if (from.has_recver_cid()) {
      set_recver_cid(from.recver_cid());
    }
    if (from.has_left_msec()) {
      set_left_msec(from.left_msec());
    }
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_lev()) {
      set_skill_lev(from.skill_lev());
    }
    if (from.has_is_effect()) {
      set_is_effect(from.is_effect());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffProto::CopyFrom(const BuffProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffProto::IsInitialized() const {

  return true;
}

void BuffProto::Swap(BuffProto* other) {
  if (other != this) {
    std::swap(buff_index_, other->buff_index_);
    std::swap(buff_id_, other->buff_id_);
    std::swap(recver_cid_, other->recver_cid_);
    std::swap(left_msec_, other->left_msec_);
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_lev_, other->skill_lev_);
    std::swap(is_effect_, other->is_effect_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffProto_descriptor_;
  metadata.reflection = BuffProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffListProto::kCidFieldNumber;
const int BuffListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

BuffListProto::BuffListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffListProto::InitAsDefaultInstance() {
}

BuffListProto::BuffListProto(const BuffListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffListProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffListProto::~BuffListProto() {
  SharedDtor();
}

void BuffListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffListProto_descriptor_;
}

const BuffListProto& BuffListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

BuffListProto* BuffListProto::default_instance_ = NULL;

BuffListProto* BuffListProto::New() const {
  return new BuffListProto;
}

void BuffListProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.BuffProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.BuffProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.BuffProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffListProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.BuffProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffListProto::MergeFrom(const BuffListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffListProto::CopyFrom(const BuffListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffListProto::IsInitialized() const {

  return true;
}

void BuffListProto::Swap(BuffListProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffListProto_descriptor_;
  metadata.reflection = BuffListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillPosProto::kSkillIdFieldNumber;
const int SkillPosProto::kPosFieldNumber;
const int SkillPosProto::kCdFieldNumber;
#endif  // !_MSC_VER

SkillPosProto::SkillPosProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillPosProto::InitAsDefaultInstance() {
}

SkillPosProto::SkillPosProto(const SkillPosProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillPosProto::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillPosProto::~SkillPosProto() {
  SharedDtor();
}

void SkillPosProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillPosProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillPosProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillPosProto_descriptor_;
}

const SkillPosProto& SkillPosProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

SkillPosProto* SkillPosProto::default_instance_ = NULL;

SkillPosProto* SkillPosProto::New() const {
  return new SkillPosProto;
}

void SkillPosProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    pos_ = 0u;
    cd_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillPosProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cd;
        break;
      }

      // optional int32 cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillPosProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional int32 cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillPosProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional int32 cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillPosProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional int32 cd = 3;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillPosProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillPosProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillPosProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillPosProto::MergeFrom(const SkillPosProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillPosProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillPosProto::CopyFrom(const SkillPosProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillPosProto::IsInitialized() const {

  return true;
}

void SkillPosProto::Swap(SkillPosProto* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(pos_, other->pos_);
    std::swap(cd_, other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillPosProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillPosProto_descriptor_;
  metadata.reflection = SkillPosProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillGroupProto::kGroupFieldNumber;
const int SkillGroupProto::kCdFieldNumber;
const int SkillGroupProto::kLstFieldNumber;
#endif  // !_MSC_VER

SkillGroupProto::SkillGroupProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillGroupProto::InitAsDefaultInstance() {
}

SkillGroupProto::SkillGroupProto(const SkillGroupProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillGroupProto::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0u;
  cd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillGroupProto::~SkillGroupProto() {
  SharedDtor();
}

void SkillGroupProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillGroupProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillGroupProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillGroupProto_descriptor_;
}

const SkillGroupProto& SkillGroupProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

SkillGroupProto* SkillGroupProto::default_instance_ = NULL;

SkillGroupProto* SkillGroupProto::New() const {
  return new SkillGroupProto;
}

void SkillGroupProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0u;
    cd_ = 0;
  }
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillGroupProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cd;
        break;
      }

      // optional int32 cd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lst;
        break;
      }

      // repeated .proto_ff.SkillPosProto lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillGroupProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group(), output);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cd(), output);
  }

  // repeated .proto_ff.SkillPosProto lst = 3;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillGroupProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group(), target);
  }

  // optional int32 cd = 2;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cd(), target);
  }

  // repeated .proto_ff.SkillPosProto lst = 3;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillGroupProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional int32 cd = 2;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cd());
    }

  }
  // repeated .proto_ff.SkillPosProto lst = 3;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillGroupProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillGroupProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillGroupProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillGroupProto::MergeFrom(const SkillGroupProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillGroupProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillGroupProto::CopyFrom(const SkillGroupProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillGroupProto::IsInitialized() const {

  return true;
}

void SkillGroupProto::Swap(SkillGroupProto* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(cd_, other->cd_);
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillGroupProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillGroupProto_descriptor_;
  metadata.reflection = SkillGroupProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillGroupListProto::kInfoFieldNumber;
#endif  // !_MSC_VER

SkillGroupListProto::SkillGroupListProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillGroupListProto::InitAsDefaultInstance() {
}

SkillGroupListProto::SkillGroupListProto(const SkillGroupListProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillGroupListProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillGroupListProto::~SkillGroupListProto() {
  SharedDtor();
}

void SkillGroupListProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillGroupListProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillGroupListProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillGroupListProto_descriptor_;
}

const SkillGroupListProto& SkillGroupListProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

SkillGroupListProto* SkillGroupListProto::default_instance_ = NULL;

SkillGroupListProto* SkillGroupListProto::New() const {
  return new SkillGroupListProto;
}

void SkillGroupListProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillGroupListProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SkillGroupProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillGroupListProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SkillGroupProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillGroupListProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SkillGroupProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillGroupListProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.SkillGroupProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillGroupListProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillGroupListProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillGroupListProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillGroupListProto::MergeFrom(const SkillGroupListProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillGroupListProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillGroupListProto::CopyFrom(const SkillGroupListProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillGroupListProto::IsInitialized() const {

  return true;
}

void SkillGroupListProto::Swap(SkillGroupListProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillGroupListProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillGroupListProto_descriptor_;
  metadata.reflection = SkillGroupListProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFantasyData::kFantasyIdFieldNumber;
const int FacadeFantasyData::kFantasyLevFieldNumber;
#endif  // !_MSC_VER

FacadeFantasyData::FacadeFantasyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFantasyData::InitAsDefaultInstance() {
}

FacadeFantasyData::FacadeFantasyData(const FacadeFantasyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFantasyData::SharedCtor() {
  _cached_size_ = 0;
  fantasy_id_ = GOOGLE_ULONGLONG(0);
  fantasy_lev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFantasyData::~FacadeFantasyData() {
  SharedDtor();
}

void FacadeFantasyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFantasyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFantasyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFantasyData_descriptor_;
}

const FacadeFantasyData& FacadeFantasyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FacadeFantasyData* FacadeFantasyData::default_instance_ = NULL;

FacadeFantasyData* FacadeFantasyData::New() const {
  return new FacadeFantasyData;
}

void FacadeFantasyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fantasy_id_ = GOOGLE_ULONGLONG(0);
    fantasy_lev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFantasyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fantasy_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fantasy_id_)));
          set_has_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fantasy_lev;
        break;
      }

      // optional uint32 fantasy_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fantasy_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_lev_)));
          set_has_fantasy_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFantasyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fantasy_id = 1;
  if (has_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fantasy_id(), output);
  }

  // optional uint32 fantasy_lev = 2;
  if (has_fantasy_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->fantasy_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFantasyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fantasy_id = 1;
  if (has_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fantasy_id(), target);
  }

  // optional uint32 fantasy_lev = 2;
  if (has_fantasy_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->fantasy_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFantasyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fantasy_id = 1;
    if (has_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fantasy_id());
    }

    // optional uint32 fantasy_lev = 2;
    if (has_fantasy_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFantasyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFantasyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFantasyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFantasyData::MergeFrom(const FacadeFantasyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fantasy_id()) {
      set_fantasy_id(from.fantasy_id());
    }
    if (from.has_fantasy_lev()) {
      set_fantasy_lev(from.fantasy_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFantasyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFantasyData::CopyFrom(const FacadeFantasyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFantasyData::IsInitialized() const {

  return true;
}

void FacadeFantasyData::Swap(FacadeFantasyData* other) {
  if (other != this) {
    std::swap(fantasy_id_, other->fantasy_id_);
    std::swap(fantasy_lev_, other->fantasy_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFantasyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFantasyData_descriptor_;
  metadata.reflection = FacadeFantasyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeFragmentData::kFragmentIdFieldNumber;
const int FacadeFragmentData::kUseTimesFieldNumber;
#endif  // !_MSC_VER

FacadeFragmentData::FacadeFragmentData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeFragmentData::InitAsDefaultInstance() {
}

FacadeFragmentData::FacadeFragmentData(const FacadeFragmentData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeFragmentData::SharedCtor() {
  _cached_size_ = 0;
  fragment_id_ = GOOGLE_ULONGLONG(0);
  use_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeFragmentData::~FacadeFragmentData() {
  SharedDtor();
}

void FacadeFragmentData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeFragmentData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeFragmentData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeFragmentData_descriptor_;
}

const FacadeFragmentData& FacadeFragmentData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FacadeFragmentData* FacadeFragmentData::default_instance_ = NULL;

FacadeFragmentData* FacadeFragmentData::New() const {
  return new FacadeFragmentData;
}

void FacadeFragmentData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fragment_id_ = GOOGLE_ULONGLONG(0);
    use_times_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeFragmentData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 fragment_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fragment_id_)));
          set_has_fragment_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_times;
        break;
      }

      // optional uint32 use_times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &use_times_)));
          set_has_use_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeFragmentData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 fragment_id = 1;
  if (has_fragment_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->fragment_id(), output);
  }

  // optional uint32 use_times = 2;
  if (has_use_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->use_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeFragmentData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 fragment_id = 1;
  if (has_fragment_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->fragment_id(), target);
  }

  // optional uint32 use_times = 2;
  if (has_use_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->use_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeFragmentData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 fragment_id = 1;
    if (has_fragment_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fragment_id());
    }

    // optional uint32 use_times = 2;
    if (has_use_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->use_times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeFragmentData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeFragmentData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeFragmentData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeFragmentData::MergeFrom(const FacadeFragmentData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fragment_id()) {
      set_fragment_id(from.fragment_id());
    }
    if (from.has_use_times()) {
      set_use_times(from.use_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeFragmentData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeFragmentData::CopyFrom(const FacadeFragmentData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeFragmentData::IsInitialized() const {

  return true;
}

void FacadeFragmentData::Swap(FacadeFragmentData* other) {
  if (other != this) {
    std::swap(fragment_id_, other->fragment_id_);
    std::swap(use_times_, other->use_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeFragmentData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeFragmentData_descriptor_;
  metadata.reflection = FacadeFragmentData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeSkillData::kSkillIdFieldNumber;
const int FacadeSkillData::kSkillLevFieldNumber;
#endif  // !_MSC_VER

FacadeSkillData::FacadeSkillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeSkillData::InitAsDefaultInstance() {
}

FacadeSkillData::FacadeSkillData(const FacadeSkillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeSkillData::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  skill_lev_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeSkillData::~FacadeSkillData() {
  SharedDtor();
}

void FacadeSkillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeSkillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeSkillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeSkillData_descriptor_;
}

const FacadeSkillData& FacadeSkillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

FacadeSkillData* FacadeSkillData::default_instance_ = NULL;

FacadeSkillData* FacadeSkillData::New() const {
  return new FacadeSkillData;
}

void FacadeSkillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    skill_lev_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeSkillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skill_lev;
        break;
      }

      // optional uint32 skill_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_lev_)));
          set_has_skill_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeSkillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 skill_lev = 2;
  if (has_skill_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skill_lev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeSkillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 skill_lev = 2;
  if (has_skill_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skill_lev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeSkillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 skill_lev = 2;
    if (has_skill_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_lev());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeSkillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeSkillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeSkillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeSkillData::MergeFrom(const FacadeSkillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_skill_lev()) {
      set_skill_lev(from.skill_lev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeSkillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeSkillData::CopyFrom(const FacadeSkillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeSkillData::IsInitialized() const {

  return true;
}

void FacadeSkillData::Swap(FacadeSkillData* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(skill_lev_, other->skill_lev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeSkillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeSkillData_descriptor_;
  metadata.reflection = FacadeSkillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatisticDataProto::kLevelFieldNumber;
const int StatisticDataProto::kTotalLoginDayFieldNumber;
const int StatisticDataProto::kTotalRmbFieldNumber;
const int StatisticDataProto::kTodayRmbFieldNumber;
const int StatisticDataProto::kTotalActivityCountFieldNumber;
#endif  // !_MSC_VER

StatisticDataProto::StatisticDataProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatisticDataProto::InitAsDefaultInstance() {
}

StatisticDataProto::StatisticDataProto(const StatisticDataProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatisticDataProto::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  total_login_day_ = 0u;
  total_rmb_ = 0u;
  today_rmb_ = 0u;
  total_activitycount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatisticDataProto::~StatisticDataProto() {
  SharedDtor();
}

void StatisticDataProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatisticDataProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatisticDataProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatisticDataProto_descriptor_;
}

const StatisticDataProto& StatisticDataProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

StatisticDataProto* StatisticDataProto::default_instance_ = NULL;

StatisticDataProto* StatisticDataProto::New() const {
  return new StatisticDataProto;
}

void StatisticDataProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    total_login_day_ = 0u;
    total_rmb_ = 0u;
    today_rmb_ = 0u;
    total_activitycount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatisticDataProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_login_day;
        break;
      }

      // optional uint32 total_login_day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_login_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_login_day_)));
          set_has_total_login_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_total_rmb;
        break;
      }

      // optional uint32 total_rmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_rmb_)));
          set_has_total_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_today_rmb;
        break;
      }

      // optional uint32 today_rmb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_rmb_)));
          set_has_today_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_activityCount;
        break;
      }

      // optional uint32 total_activityCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_activityCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_activitycount_)));
          set_has_total_activitycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatisticDataProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional uint32 total_login_day = 2;
  if (has_total_login_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_login_day(), output);
  }

  // optional uint32 total_rmb = 3;
  if (has_total_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->total_rmb(), output);
  }

  // optional uint32 today_rmb = 4;
  if (has_today_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->today_rmb(), output);
  }

  // optional uint32 total_activityCount = 5;
  if (has_total_activitycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->total_activitycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatisticDataProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional uint32 total_login_day = 2;
  if (has_total_login_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_login_day(), target);
  }

  // optional uint32 total_rmb = 3;
  if (has_total_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->total_rmb(), target);
  }

  // optional uint32 today_rmb = 4;
  if (has_today_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->today_rmb(), target);
  }

  // optional uint32 total_activityCount = 5;
  if (has_total_activitycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->total_activitycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatisticDataProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint32 total_login_day = 2;
    if (has_total_login_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_login_day());
    }

    // optional uint32 total_rmb = 3;
    if (has_total_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_rmb());
    }

    // optional uint32 today_rmb = 4;
    if (has_today_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_rmb());
    }

    // optional uint32 total_activityCount = 5;
    if (has_total_activitycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_activitycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatisticDataProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatisticDataProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatisticDataProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatisticDataProto::MergeFrom(const StatisticDataProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_total_login_day()) {
      set_total_login_day(from.total_login_day());
    }
    if (from.has_total_rmb()) {
      set_total_rmb(from.total_rmb());
    }
    if (from.has_today_rmb()) {
      set_today_rmb(from.today_rmb());
    }
    if (from.has_total_activitycount()) {
      set_total_activitycount(from.total_activitycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatisticDataProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatisticDataProto::CopyFrom(const StatisticDataProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatisticDataProto::IsInitialized() const {

  return true;
}

void StatisticDataProto::Swap(StatisticDataProto* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(total_login_day_, other->total_login_day_);
    std::swap(total_rmb_, other->total_rmb_);
    std::swap(today_rmb_, other->today_rmb_);
    std::swap(total_activitycount_, other->total_activitycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatisticDataProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatisticDataProto_descriptor_;
  metadata.reflection = StatisticDataProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodRelicsTaskEntry::kTaskCfgIdFieldNumber;
const int GodRelicsTaskEntry::kCurNumFieldNumber;
const int GodRelicsTaskEntry::kTaskStateFieldNumber;
#endif  // !_MSC_VER

GodRelicsTaskEntry::GodRelicsTaskEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodRelicsTaskEntry::InitAsDefaultInstance() {
}

GodRelicsTaskEntry::GodRelicsTaskEntry(const GodRelicsTaskEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodRelicsTaskEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  task_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodRelicsTaskEntry::~GodRelicsTaskEntry() {
  SharedDtor();
}

void GodRelicsTaskEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodRelicsTaskEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodRelicsTaskEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodRelicsTaskEntry_descriptor_;
}

const GodRelicsTaskEntry& GodRelicsTaskEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GodRelicsTaskEntry* GodRelicsTaskEntry::default_instance_ = NULL;

GodRelicsTaskEntry* GodRelicsTaskEntry::New() const {
  return new GodRelicsTaskEntry;
}

void GodRelicsTaskEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
    task_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodRelicsTaskEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodRelicsTaskEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodRelicsTaskEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodRelicsTaskEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodRelicsTaskEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodRelicsTaskEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodRelicsTaskEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodRelicsTaskEntry::MergeFrom(const GodRelicsTaskEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodRelicsTaskEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodRelicsTaskEntry::CopyFrom(const GodRelicsTaskEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodRelicsTaskEntry::IsInitialized() const {

  return true;
}

void GodRelicsTaskEntry::Swap(GodRelicsTaskEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(task_state_, other->task_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodRelicsTaskEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodRelicsTaskEntry_descriptor_;
  metadata.reflection = GodRelicsTaskEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodRelicsTaskGroupEntry::kGroupCfgIdFieldNumber;
const int GodRelicsTaskGroupEntry::kEntrysFieldNumber;
const int GodRelicsTaskGroupEntry::kNormalRewardStateFieldNumber;
const int GodRelicsTaskGroupEntry::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

GodRelicsTaskGroupEntry::GodRelicsTaskGroupEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodRelicsTaskGroupEntry::InitAsDefaultInstance() {
}

GodRelicsTaskGroupEntry::GodRelicsTaskGroupEntry(const GodRelicsTaskGroupEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodRelicsTaskGroupEntry::SharedCtor() {
  _cached_size_ = 0;
  group_cfg_id_ = GOOGLE_ULONGLONG(0);
  normal_reward_state_ = 0;
  create_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodRelicsTaskGroupEntry::~GodRelicsTaskGroupEntry() {
  SharedDtor();
}

void GodRelicsTaskGroupEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodRelicsTaskGroupEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodRelicsTaskGroupEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodRelicsTaskGroupEntry_descriptor_;
}

const GodRelicsTaskGroupEntry& GodRelicsTaskGroupEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

GodRelicsTaskGroupEntry* GodRelicsTaskGroupEntry::default_instance_ = NULL;

GodRelicsTaskGroupEntry* GodRelicsTaskGroupEntry::New() const {
  return new GodRelicsTaskGroupEntry;
}

void GodRelicsTaskGroupEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_cfg_id_ = GOOGLE_ULONGLONG(0);
    normal_reward_state_ = 0;
    create_time_ = GOOGLE_ULONGLONG(0);
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodRelicsTaskGroupEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_cfg_id_)));
          set_has_group_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.GodRelicsTaskEntry entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectTag(24)) goto parse_normal_reward_state;
        break;
      }

      // optional int32 normal_reward_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_normal_reward_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &normal_reward_state_)));
          set_has_normal_reward_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodRelicsTaskGroupEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_cfg_id(), output);
  }

  // repeated .proto_ff.GodRelicsTaskEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  // optional int32 normal_reward_state = 3;
  if (has_normal_reward_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->normal_reward_state(), output);
  }

  // optional uint64 create_time = 5;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->create_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodRelicsTaskGroupEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 group_cfg_id = 1;
  if (has_group_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_cfg_id(), target);
  }

  // repeated .proto_ff.GodRelicsTaskEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  // optional int32 normal_reward_state = 3;
  if (has_normal_reward_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->normal_reward_state(), target);
  }

  // optional uint64 create_time = 5;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->create_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodRelicsTaskGroupEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 group_cfg_id = 1;
    if (has_group_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_cfg_id());
    }

    // optional int32 normal_reward_state = 3;
    if (has_normal_reward_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->normal_reward_state());
    }

    // optional uint64 create_time = 5;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

  }
  // repeated .proto_ff.GodRelicsTaskEntry entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodRelicsTaskGroupEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodRelicsTaskGroupEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodRelicsTaskGroupEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodRelicsTaskGroupEntry::MergeFrom(const GodRelicsTaskGroupEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group_cfg_id()) {
      set_group_cfg_id(from.group_cfg_id());
    }
    if (from.has_normal_reward_state()) {
      set_normal_reward_state(from.normal_reward_state());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodRelicsTaskGroupEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodRelicsTaskGroupEntry::CopyFrom(const GodRelicsTaskGroupEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodRelicsTaskGroupEntry::IsInitialized() const {

  return true;
}

void GodRelicsTaskGroupEntry::Swap(GodRelicsTaskGroupEntry* other) {
  if (other != this) {
    std::swap(group_cfg_id_, other->group_cfg_id_);
    entrys_.Swap(&other->entrys_);
    std::swap(normal_reward_state_, other->normal_reward_state_);
    std::swap(create_time_, other->create_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodRelicsTaskGroupEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodRelicsTaskGroupEntry_descriptor_;
  metadata.reflection = GodRelicsTaskGroupEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskEntry::kTaskCfgIdFieldNumber;
const int DailyTaskEntry::kCurNumFieldNumber;
const int DailyTaskEntry::kTaskStateFieldNumber;
const int DailyTaskEntry::kLastTimeFieldNumber;
const int DailyTaskEntry::kBuyNumFieldNumber;
#endif  // !_MSC_VER

DailyTaskEntry::DailyTaskEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskEntry::InitAsDefaultInstance() {
}

DailyTaskEntry::DailyTaskEntry(const DailyTaskEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  task_state_ = 0;
  last_time_ = GOOGLE_ULONGLONG(0);
  buy_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskEntry::~DailyTaskEntry() {
  SharedDtor();
}

void DailyTaskEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskEntry_descriptor_;
}

const DailyTaskEntry& DailyTaskEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskEntry* DailyTaskEntry::default_instance_ = NULL;

DailyTaskEntry* DailyTaskEntry::New() const {
  return new DailyTaskEntry;
}

void DailyTaskEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
    task_state_ = 0;
    last_time_ = GOOGLE_ULONGLONG(0);
    buy_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_time(), output);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_time(), target);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

    // optional uint64 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional int32 buy_num = 5;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskEntry::MergeFrom(const DailyTaskEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskEntry::CopyFrom(const DailyTaskEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskEntry::IsInitialized() const {

  return true;
}

void DailyTaskEntry::Swap(DailyTaskEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(task_state_, other->task_state_);
    std::swap(last_time_, other->last_time_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskEntry_descriptor_;
  metadata.reflection = DailyTaskEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskLimitEntry::kTaskCfgIdFieldNumber;
const int DailyTaskLimitEntry::kCurNumFieldNumber;
const int DailyTaskLimitEntry::kTaskStateFieldNumber;
const int DailyTaskLimitEntry::kLastTimeFieldNumber;
const int DailyTaskLimitEntry::kBuyNumFieldNumber;
const int DailyTaskLimitEntry::kReadyAddFieldNumber;
const int DailyTaskLimitEntry::kIsOpenFieldNumber;
#endif  // !_MSC_VER

DailyTaskLimitEntry::DailyTaskLimitEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskLimitEntry::InitAsDefaultInstance() {
}

DailyTaskLimitEntry::DailyTaskLimitEntry(const DailyTaskLimitEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskLimitEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  cur_num_ = 0;
  task_state_ = 0;
  last_time_ = GOOGLE_ULONGLONG(0);
  buy_num_ = 0;
  ready_add_ = false;
  is_open_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskLimitEntry::~DailyTaskLimitEntry() {
  SharedDtor();
}

void DailyTaskLimitEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskLimitEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskLimitEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskLimitEntry_descriptor_;
}

const DailyTaskLimitEntry& DailyTaskLimitEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskLimitEntry* DailyTaskLimitEntry::default_instance_ = NULL;

DailyTaskLimitEntry* DailyTaskLimitEntry::New() const {
  return new DailyTaskLimitEntry;
}

void DailyTaskLimitEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    cur_num_ = 0;
    task_state_ = 0;
    last_time_ = GOOGLE_ULONGLONG(0);
    buy_num_ = 0;
    ready_add_ = false;
    is_open_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskLimitEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buy_num;
        break;
      }

      // optional int32 buy_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_num_)));
          set_has_buy_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ready_add;
        break;
      }

      // optional bool ready_add = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_add_)));
          set_has_ready_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_open;
        break;
      }

      // optional bool is_open = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskLimitEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_time(), output);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buy_num(), output);
  }

  // optional bool ready_add = 6;
  if (has_ready_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ready_add(), output);
  }

  // optional bool is_open = 7;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_open(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskLimitEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_time(), target);
  }

  // optional int32 buy_num = 5;
  if (has_buy_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buy_num(), target);
  }

  // optional bool ready_add = 6;
  if (has_ready_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ready_add(), target);
  }

  // optional bool is_open = 7;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_open(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskLimitEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

    // optional uint64 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional int32 buy_num = 5;
    if (has_buy_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy_num());
    }

    // optional bool ready_add = 6;
    if (has_ready_add()) {
      total_size += 1 + 1;
    }

    // optional bool is_open = 7;
    if (has_is_open()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskLimitEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskLimitEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskLimitEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskLimitEntry::MergeFrom(const DailyTaskLimitEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_buy_num()) {
      set_buy_num(from.buy_num());
    }
    if (from.has_ready_add()) {
      set_ready_add(from.ready_add());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskLimitEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskLimitEntry::CopyFrom(const DailyTaskLimitEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskLimitEntry::IsInitialized() const {

  return true;
}

void DailyTaskLimitEntry::Swap(DailyTaskLimitEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(task_state_, other->task_state_);
    std::swap(last_time_, other->last_time_);
    std::swap(buy_num_, other->buy_num_);
    std::swap(ready_add_, other->ready_add_);
    std::swap(is_open_, other->is_open_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskLimitEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskLimitEntry_descriptor_;
  metadata.reflection = DailyTaskLimitEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskBackDayEntry::kLeftNumFieldNumber;
const int DailyTaskBackDayEntry::kExternalLeftNumFieldNumber;
const int DailyTaskBackDayEntry::kLastTimeFieldNumber;
#endif  // !_MSC_VER

DailyTaskBackDayEntry::DailyTaskBackDayEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskBackDayEntry::InitAsDefaultInstance() {
}

DailyTaskBackDayEntry::DailyTaskBackDayEntry(const DailyTaskBackDayEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskBackDayEntry::SharedCtor() {
  _cached_size_ = 0;
  left_num_ = 0;
  external_left_num_ = 0;
  last_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskBackDayEntry::~DailyTaskBackDayEntry() {
  SharedDtor();
}

void DailyTaskBackDayEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskBackDayEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskBackDayEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskBackDayEntry_descriptor_;
}

const DailyTaskBackDayEntry& DailyTaskBackDayEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskBackDayEntry* DailyTaskBackDayEntry::default_instance_ = NULL;

DailyTaskBackDayEntry* DailyTaskBackDayEntry::New() const {
  return new DailyTaskBackDayEntry;
}

void DailyTaskBackDayEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    left_num_ = 0;
    external_left_num_ = 0;
    last_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskBackDayEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 left_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_external_left_num;
        break;
      }

      // optional int32 external_left_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_external_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_left_num_)));
          set_has_external_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_last_time;
        break;
      }

      // optional int64 last_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskBackDayEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 left_num = 1;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->left_num(), output);
  }

  // optional int32 external_left_num = 2;
  if (has_external_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->external_left_num(), output);
  }

  // optional int64 last_time = 3;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->last_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskBackDayEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 left_num = 1;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->left_num(), target);
  }

  // optional int32 external_left_num = 2;
  if (has_external_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->external_left_num(), target);
  }

  // optional int64 last_time = 3;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->last_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskBackDayEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 left_num = 1;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_num());
    }

    // optional int32 external_left_num = 2;
    if (has_external_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->external_left_num());
    }

    // optional int64 last_time = 3;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->last_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskBackDayEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskBackDayEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskBackDayEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskBackDayEntry::MergeFrom(const DailyTaskBackDayEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_external_left_num()) {
      set_external_left_num(from.external_left_num());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskBackDayEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskBackDayEntry::CopyFrom(const DailyTaskBackDayEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskBackDayEntry::IsInitialized() const {

  return true;
}

void DailyTaskBackDayEntry::Swap(DailyTaskBackDayEntry* other) {
  if (other != this) {
    std::swap(left_num_, other->left_num_);
    std::swap(external_left_num_, other->external_left_num_);
    std::swap(last_time_, other->last_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskBackDayEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskBackDayEntry_descriptor_;
  metadata.reflection = DailyTaskBackDayEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskBackEntry::kTaskCfgIdFieldNumber;
const int DailyTaskBackEntry::kTaskStateFieldNumber;
const int DailyTaskBackEntry::kDayDataFieldNumber;
const int DailyTaskBackEntry::kLeftNumFieldNumber;
const int DailyTaskBackEntry::kExternalLeftNumFieldNumber;
#endif  // !_MSC_VER

DailyTaskBackEntry::DailyTaskBackEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskBackEntry::InitAsDefaultInstance() {
}

DailyTaskBackEntry::DailyTaskBackEntry(const DailyTaskBackEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskBackEntry::SharedCtor() {
  _cached_size_ = 0;
  task_cfg_id_ = GOOGLE_ULONGLONG(0);
  task_state_ = 0;
  left_num_ = 0;
  external_left_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskBackEntry::~DailyTaskBackEntry() {
  SharedDtor();
}

void DailyTaskBackEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskBackEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskBackEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskBackEntry_descriptor_;
}

const DailyTaskBackEntry& DailyTaskBackEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskBackEntry* DailyTaskBackEntry::default_instance_ = NULL;

DailyTaskBackEntry* DailyTaskBackEntry::New() const {
  return new DailyTaskBackEntry;
}

void DailyTaskBackEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    task_cfg_id_ = GOOGLE_ULONGLONG(0);
    task_state_ = 0;
    left_num_ = 0;
    external_left_num_ = 0;
  }
  day_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskBackEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 task_cfg_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_cfg_id_)));
          set_has_task_cfg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_task_state;
        break;
      }

      // optional int32 task_state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_state_)));
          set_has_task_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_day_data;
        break;
      }

      // repeated .proto_ff.DailyTaskBackDayEntry day_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_day_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_day_data;
        if (input->ExpectTag(40)) goto parse_left_num;
        break;
      }

      // optional int32 left_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_external_left_num;
        break;
      }

      // optional int32 external_left_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_external_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &external_left_num_)));
          set_has_external_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskBackEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->task_cfg_id(), output);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->task_state(), output);
  }

  // repeated .proto_ff.DailyTaskBackDayEntry day_data = 4;
  for (int i = 0; i < this->day_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->day_data(i), output);
  }

  // optional int32 left_num = 5;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->left_num(), output);
  }

  // optional int32 external_left_num = 6;
  if (has_external_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->external_left_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskBackEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 task_cfg_id = 1;
  if (has_task_cfg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->task_cfg_id(), target);
  }

  // optional int32 task_state = 3;
  if (has_task_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->task_state(), target);
  }

  // repeated .proto_ff.DailyTaskBackDayEntry day_data = 4;
  for (int i = 0; i < this->day_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->day_data(i), target);
  }

  // optional int32 left_num = 5;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->left_num(), target);
  }

  // optional int32 external_left_num = 6;
  if (has_external_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->external_left_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskBackEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 task_cfg_id = 1;
    if (has_task_cfg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_cfg_id());
    }

    // optional int32 task_state = 3;
    if (has_task_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_state());
    }

    // optional int32 left_num = 5;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_num());
    }

    // optional int32 external_left_num = 6;
    if (has_external_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->external_left_num());
    }

  }
  // repeated .proto_ff.DailyTaskBackDayEntry day_data = 4;
  total_size += 1 * this->day_data_size();
  for (int i = 0; i < this->day_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->day_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskBackEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskBackEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskBackEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskBackEntry::MergeFrom(const DailyTaskBackEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  day_data_.MergeFrom(from.day_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task_cfg_id()) {
      set_task_cfg_id(from.task_cfg_id());
    }
    if (from.has_task_state()) {
      set_task_state(from.task_state());
    }
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_external_left_num()) {
      set_external_left_num(from.external_left_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskBackEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskBackEntry::CopyFrom(const DailyTaskBackEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskBackEntry::IsInitialized() const {

  return true;
}

void DailyTaskBackEntry::Swap(DailyTaskBackEntry* other) {
  if (other != this) {
    std::swap(task_cfg_id_, other->task_cfg_id_);
    std::swap(task_state_, other->task_state_);
    day_data_.Swap(&other->day_data_);
    std::swap(left_num_, other->left_num_);
    std::swap(external_left_num_, other->external_left_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskBackEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskBackEntry_descriptor_;
  metadata.reflection = DailyTaskBackEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskRewardEntry::kRewardIdFieldNumber;
const int DailyTaskRewardEntry::kStateFieldNumber;
#endif  // !_MSC_VER

DailyTaskRewardEntry::DailyTaskRewardEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskRewardEntry::InitAsDefaultInstance() {
}

DailyTaskRewardEntry::DailyTaskRewardEntry(const DailyTaskRewardEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskRewardEntry::SharedCtor() {
  _cached_size_ = 0;
  reward_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskRewardEntry::~DailyTaskRewardEntry() {
  SharedDtor();
}

void DailyTaskRewardEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskRewardEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskRewardEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskRewardEntry_descriptor_;
}

const DailyTaskRewardEntry& DailyTaskRewardEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskRewardEntry* DailyTaskRewardEntry::default_instance_ = NULL;

DailyTaskRewardEntry* DailyTaskRewardEntry::New() const {
  return new DailyTaskRewardEntry;
}

void DailyTaskRewardEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reward_id_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskRewardEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 reward_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reward_id_)));
          set_has_reward_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskRewardEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 reward_id = 1;
  if (has_reward_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reward_id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskRewardEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 reward_id = 1;
  if (has_reward_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reward_id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskRewardEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 reward_id = 1;
    if (has_reward_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reward_id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskRewardEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskRewardEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskRewardEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskRewardEntry::MergeFrom(const DailyTaskRewardEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reward_id()) {
      set_reward_id(from.reward_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskRewardEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskRewardEntry::CopyFrom(const DailyTaskRewardEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskRewardEntry::IsInitialized() const {

  return true;
}

void DailyTaskRewardEntry::Swap(DailyTaskRewardEntry* other) {
  if (other != this) {
    std::swap(reward_id_, other->reward_id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskRewardEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskRewardEntry_descriptor_;
  metadata.reflection = DailyTaskRewardEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyTaskAllData::kTaskDataFieldNumber;
const int DailyTaskAllData::kTaskLimitDataFieldNumber;
const int DailyTaskAllData::kBackDataFieldNumber;
const int DailyTaskAllData::kRewardDataFieldNumber;
const int DailyTaskAllData::kDailyScoreFieldNumber;
const int DailyTaskAllData::kDailyLevelFieldNumber;
const int DailyTaskAllData::kCreateTimeFieldNumber;
const int DailyTaskAllData::kDailyExpFieldNumber;
#endif  // !_MSC_VER

DailyTaskAllData::DailyTaskAllData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyTaskAllData::InitAsDefaultInstance() {
}

DailyTaskAllData::DailyTaskAllData(const DailyTaskAllData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyTaskAllData::SharedCtor() {
  _cached_size_ = 0;
  daily_score_ = 0u;
  daily_level_ = 0u;
  create_time_ = GOOGLE_ULONGLONG(0);
  daily_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyTaskAllData::~DailyTaskAllData() {
  SharedDtor();
}

void DailyTaskAllData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyTaskAllData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyTaskAllData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyTaskAllData_descriptor_;
}

const DailyTaskAllData& DailyTaskAllData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

DailyTaskAllData* DailyTaskAllData::default_instance_ = NULL;

DailyTaskAllData* DailyTaskAllData::New() const {
  return new DailyTaskAllData;
}

void DailyTaskAllData::Clear() {
  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    daily_score_ = 0u;
    daily_level_ = 0u;
    create_time_ = GOOGLE_ULONGLONG(0);
    daily_exp_ = GOOGLE_ULONGLONG(0);
  }
  task_data_.Clear();
  task_limit_data_.Clear();
  back_data_.Clear();
  reward_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyTaskAllData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DailyTaskEntry task_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task_data;
        if (input->ExpectTag(18)) goto parse_task_limit_data;
        break;
      }

      // repeated .proto_ff.DailyTaskLimitEntry task_limit_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_limit_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task_limit_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task_limit_data;
        if (input->ExpectTag(26)) goto parse_back_data;
        break;
      }

      // repeated .proto_ff.DailyTaskBackEntry back_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_back_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_back_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_back_data;
        if (input->ExpectTag(34)) goto parse_reward_data;
        break;
      }

      // repeated .proto_ff.DailyTaskRewardEntry reward_data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reward_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reward_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reward_data;
        if (input->ExpectTag(40)) goto parse_daily_score;
        break;
      }

      // optional uint32 daily_score = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_score_)));
          set_has_daily_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_daily_level;
        break;
      }

      // optional uint32 daily_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_level_)));
          set_has_daily_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_daily_exp;
        break;
      }

      // optional uint64 daily_exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &daily_exp_)));
          set_has_daily_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyTaskAllData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DailyTaskEntry task_data = 1;
  for (int i = 0; i < this->task_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task_data(i), output);
  }

  // repeated .proto_ff.DailyTaskLimitEntry task_limit_data = 2;
  for (int i = 0; i < this->task_limit_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task_limit_data(i), output);
  }

  // repeated .proto_ff.DailyTaskBackEntry back_data = 3;
  for (int i = 0; i < this->back_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->back_data(i), output);
  }

  // repeated .proto_ff.DailyTaskRewardEntry reward_data = 4;
  for (int i = 0; i < this->reward_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->reward_data(i), output);
  }

  // optional uint32 daily_score = 5;
  if (has_daily_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->daily_score(), output);
  }

  // optional uint32 daily_level = 6;
  if (has_daily_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->daily_level(), output);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->create_time(), output);
  }

  // optional uint64 daily_exp = 8;
  if (has_daily_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->daily_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyTaskAllData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DailyTaskEntry task_data = 1;
  for (int i = 0; i < this->task_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task_data(i), target);
  }

  // repeated .proto_ff.DailyTaskLimitEntry task_limit_data = 2;
  for (int i = 0; i < this->task_limit_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task_limit_data(i), target);
  }

  // repeated .proto_ff.DailyTaskBackEntry back_data = 3;
  for (int i = 0; i < this->back_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->back_data(i), target);
  }

  // repeated .proto_ff.DailyTaskRewardEntry reward_data = 4;
  for (int i = 0; i < this->reward_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->reward_data(i), target);
  }

  // optional uint32 daily_score = 5;
  if (has_daily_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->daily_score(), target);
  }

  // optional uint32 daily_level = 6;
  if (has_daily_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->daily_level(), target);
  }

  // optional uint64 create_time = 7;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->create_time(), target);
  }

  // optional uint64 daily_exp = 8;
  if (has_daily_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->daily_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyTaskAllData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    // optional uint32 daily_score = 5;
    if (has_daily_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_score());
    }

    // optional uint32 daily_level = 6;
    if (has_daily_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_level());
    }

    // optional uint64 create_time = 7;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional uint64 daily_exp = 8;
    if (has_daily_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->daily_exp());
    }

  }
  // repeated .proto_ff.DailyTaskEntry task_data = 1;
  total_size += 1 * this->task_data_size();
  for (int i = 0; i < this->task_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_data(i));
  }

  // repeated .proto_ff.DailyTaskLimitEntry task_limit_data = 2;
  total_size += 1 * this->task_limit_data_size();
  for (int i = 0; i < this->task_limit_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task_limit_data(i));
  }

  // repeated .proto_ff.DailyTaskBackEntry back_data = 3;
  total_size += 1 * this->back_data_size();
  for (int i = 0; i < this->back_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->back_data(i));
  }

  // repeated .proto_ff.DailyTaskRewardEntry reward_data = 4;
  total_size += 1 * this->reward_data_size();
  for (int i = 0; i < this->reward_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reward_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyTaskAllData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyTaskAllData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyTaskAllData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyTaskAllData::MergeFrom(const DailyTaskAllData& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_data_.MergeFrom(from.task_data_);
  task_limit_data_.MergeFrom(from.task_limit_data_);
  back_data_.MergeFrom(from.back_data_);
  reward_data_.MergeFrom(from.reward_data_);
  if (from._has_bits_[4 / 32] & (0xffu << (4 % 32))) {
    if (from.has_daily_score()) {
      set_daily_score(from.daily_score());
    }
    if (from.has_daily_level()) {
      set_daily_level(from.daily_level());
    }
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_daily_exp()) {
      set_daily_exp(from.daily_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyTaskAllData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyTaskAllData::CopyFrom(const DailyTaskAllData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyTaskAllData::IsInitialized() const {

  return true;
}

void DailyTaskAllData::Swap(DailyTaskAllData* other) {
  if (other != this) {
    task_data_.Swap(&other->task_data_);
    task_limit_data_.Swap(&other->task_limit_data_);
    back_data_.Swap(&other->back_data_);
    reward_data_.Swap(&other->reward_data_);
    std::swap(daily_score_, other->daily_score_);
    std::swap(daily_level_, other->daily_level_);
    std::swap(create_time_, other->create_time_);
    std::swap(daily_exp_, other->daily_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyTaskAllData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyTaskAllData_descriptor_;
  metadata.reflection = DailyTaskAllData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBRecentSubmitMission::kMissionTypeFieldNumber;
const int CharacterDBRecentSubmitMission::kMissionIdFieldNumber;
#endif  // !_MSC_VER

CharacterDBRecentSubmitMission::CharacterDBRecentSubmitMission()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBRecentSubmitMission::InitAsDefaultInstance() {
}

CharacterDBRecentSubmitMission::CharacterDBRecentSubmitMission(const CharacterDBRecentSubmitMission& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBRecentSubmitMission::SharedCtor() {
  _cached_size_ = 0;
  mission_type_ = 0;
  mission_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBRecentSubmitMission::~CharacterDBRecentSubmitMission() {
  SharedDtor();
}

void CharacterDBRecentSubmitMission::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBRecentSubmitMission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBRecentSubmitMission::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBRecentSubmitMission_descriptor_;
}

const CharacterDBRecentSubmitMission& CharacterDBRecentSubmitMission::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBRecentSubmitMission* CharacterDBRecentSubmitMission::default_instance_ = NULL;

CharacterDBRecentSubmitMission* CharacterDBRecentSubmitMission::New() const {
  return new CharacterDBRecentSubmitMission;
}

void CharacterDBRecentSubmitMission::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_type_ = 0;
    mission_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBRecentSubmitMission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mission_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_type_)));
          set_has_mission_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mission_id;
        break;
      }

      // optional uint64 mission_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mission_id_)));
          set_has_mission_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBRecentSubmitMission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_type(), output);
  }

  // optional uint64 mission_id = 2;
  if (has_mission_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->mission_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBRecentSubmitMission::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_type(), target);
  }

  // optional uint64 mission_id = 2;
  if (has_mission_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->mission_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBRecentSubmitMission::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mission_type = 1;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_type());
    }

    // optional uint64 mission_id = 2;
    if (has_mission_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mission_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBRecentSubmitMission::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBRecentSubmitMission* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBRecentSubmitMission*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBRecentSubmitMission::MergeFrom(const CharacterDBRecentSubmitMission& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_mission_id()) {
      set_mission_id(from.mission_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBRecentSubmitMission::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBRecentSubmitMission::CopyFrom(const CharacterDBRecentSubmitMission& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBRecentSubmitMission::IsInitialized() const {

  return true;
}

void CharacterDBRecentSubmitMission::Swap(CharacterDBRecentSubmitMission* other) {
  if (other != this) {
    std::swap(mission_type_, other->mission_type_);
    std::swap(mission_id_, other->mission_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBRecentSubmitMission::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBRecentSubmitMission_descriptor_;
  metadata.reflection = CharacterDBRecentSubmitMission_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMissionItemInfo::kTypeFieldNumber;
const int CharacterDBMissionItemInfo::kIdFieldNumber;
const int CharacterDBMissionItemInfo::kCurrentValueFieldNumber;
const int CharacterDBMissionItemInfo::kFinalValueFieldNumber;
const int CharacterDBMissionItemInfo::kCompletedFlagFieldNumber;
const int CharacterDBMissionItemInfo::kParma1FieldNumber;
const int CharacterDBMissionItemInfo::kParma2FieldNumber;
const int CharacterDBMissionItemInfo::kParma3FieldNumber;
#endif  // !_MSC_VER

CharacterDBMissionItemInfo::CharacterDBMissionItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMissionItemInfo::InitAsDefaultInstance() {
}

CharacterDBMissionItemInfo::CharacterDBMissionItemInfo(const CharacterDBMissionItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMissionItemInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  id_ = GOOGLE_ULONGLONG(0);
  currentvalue_ = 0u;
  finalvalue_ = 0u;
  completedflag_ = false;
  parma1_ = GOOGLE_ULONGLONG(0);
  parma2_ = GOOGLE_ULONGLONG(0);
  parma3_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMissionItemInfo::~CharacterDBMissionItemInfo() {
  SharedDtor();
}

void CharacterDBMissionItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMissionItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMissionItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMissionItemInfo_descriptor_;
}

const CharacterDBMissionItemInfo& CharacterDBMissionItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBMissionItemInfo* CharacterDBMissionItemInfo::default_instance_ = NULL;

CharacterDBMissionItemInfo* CharacterDBMissionItemInfo::New() const {
  return new CharacterDBMissionItemInfo;
}

void CharacterDBMissionItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    id_ = GOOGLE_ULONGLONG(0);
    currentvalue_ = 0u;
    finalvalue_ = 0u;
    completedflag_ = false;
    parma1_ = GOOGLE_ULONGLONG(0);
    parma2_ = GOOGLE_ULONGLONG(0);
    parma3_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMissionItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentValue;
        break;
      }

      // optional uint32 currentValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentvalue_)));
          set_has_currentvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_finalValue;
        break;
      }

      // optional uint32 finalValue = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finalValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finalvalue_)));
          set_has_finalvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_completedFlag;
        break;
      }

      // optional bool completedFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completedFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completedflag_)));
          set_has_completedflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_parma1;
        break;
      }

      // optional uint64 parma1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma1_)));
          set_has_parma1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_parma2;
        break;
      }

      // optional uint64 parma2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma2_)));
          set_has_parma2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_parma3;
        break;
      }

      // optional uint64 parma3 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parma3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &parma3_)));
          set_has_parma3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMissionItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->id(), output);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->currentvalue(), output);
  }

  // optional uint32 finalValue = 4;
  if (has_finalvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->finalvalue(), output);
  }

  // optional bool completedFlag = 5;
  if (has_completedflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->completedflag(), output);
  }

  // optional uint64 parma1 = 6;
  if (has_parma1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->parma1(), output);
  }

  // optional uint64 parma2 = 7;
  if (has_parma2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->parma2(), output);
  }

  // optional uint64 parma3 = 8;
  if (has_parma3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->parma3(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMissionItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }

  // optional uint64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->id(), target);
  }

  // optional uint32 currentValue = 3;
  if (has_currentvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->currentvalue(), target);
  }

  // optional uint32 finalValue = 4;
  if (has_finalvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->finalvalue(), target);
  }

  // optional bool completedFlag = 5;
  if (has_completedflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->completedflag(), target);
  }

  // optional uint64 parma1 = 6;
  if (has_parma1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->parma1(), target);
  }

  // optional uint64 parma2 = 7;
  if (has_parma2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->parma2(), target);
  }

  // optional uint64 parma3 = 8;
  if (has_parma3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->parma3(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMissionItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 currentValue = 3;
    if (has_currentvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentvalue());
    }

    // optional uint32 finalValue = 4;
    if (has_finalvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finalvalue());
    }

    // optional bool completedFlag = 5;
    if (has_completedflag()) {
      total_size += 1 + 1;
    }

    // optional uint64 parma1 = 6;
    if (has_parma1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma1());
    }

    // optional uint64 parma2 = 7;
    if (has_parma2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma2());
    }

    // optional uint64 parma3 = 8;
    if (has_parma3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->parma3());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMissionItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMissionItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMissionItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMissionItemInfo::MergeFrom(const CharacterDBMissionItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currentvalue()) {
      set_currentvalue(from.currentvalue());
    }
    if (from.has_finalvalue()) {
      set_finalvalue(from.finalvalue());
    }
    if (from.has_completedflag()) {
      set_completedflag(from.completedflag());
    }
    if (from.has_parma1()) {
      set_parma1(from.parma1());
    }
    if (from.has_parma2()) {
      set_parma2(from.parma2());
    }
    if (from.has_parma3()) {
      set_parma3(from.parma3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMissionItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMissionItemInfo::CopyFrom(const CharacterDBMissionItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMissionItemInfo::IsInitialized() const {

  return true;
}

void CharacterDBMissionItemInfo::Swap(CharacterDBMissionItemInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(currentvalue_, other->currentvalue_);
    std::swap(finalvalue_, other->finalvalue_);
    std::swap(completedflag_, other->completedflag_);
    std::swap(parma1_, other->parma1_);
    std::swap(parma2_, other->parma2_);
    std::swap(parma3_, other->parma3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMissionItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMissionItemInfo_descriptor_;
  metadata.reflection = CharacterDBMissionItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBMissionTrack::kMissionIdFieldNumber;
const int CharacterDBMissionTrack::kDynamicidFieldNumber;
const int CharacterDBMissionTrack::kStatusFieldNumber;
const int CharacterDBMissionTrack::kAcceptMissionTimeFieldNumber;
const int CharacterDBMissionTrack::kItemInfoFieldNumber;
const int CharacterDBMissionTrack::kTextidFieldNumber;
#endif  // !_MSC_VER

CharacterDBMissionTrack::CharacterDBMissionTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBMissionTrack::InitAsDefaultInstance() {
}

CharacterDBMissionTrack::CharacterDBMissionTrack(const CharacterDBMissionTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBMissionTrack::SharedCtor() {
  _cached_size_ = 0;
  missionid_ = GOOGLE_ULONGLONG(0);
  dynamicid_ = GOOGLE_ULONGLONG(0);
  status_ = 0u;
  acceptmissiontime_ = GOOGLE_ULONGLONG(0);
  textid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBMissionTrack::~CharacterDBMissionTrack() {
  SharedDtor();
}

void CharacterDBMissionTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBMissionTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBMissionTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBMissionTrack_descriptor_;
}

const CharacterDBMissionTrack& CharacterDBMissionTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBMissionTrack* CharacterDBMissionTrack::default_instance_ = NULL;

CharacterDBMissionTrack* CharacterDBMissionTrack::New() const {
  return new CharacterDBMissionTrack;
}

void CharacterDBMissionTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    missionid_ = GOOGLE_ULONGLONG(0);
    dynamicid_ = GOOGLE_ULONGLONG(0);
    status_ = 0u;
    acceptmissiontime_ = GOOGLE_ULONGLONG(0);
    textid_ = GOOGLE_ULONGLONG(0);
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBMissionTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 missionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &missionid_)));
          set_has_missionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dynamicid;
        break;
      }

      // optional uint64 dynamicid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dynamicid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dynamicid_)));
          set_has_dynamicid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_acceptMissionTime;
        break;
      }

      // optional uint64 acceptMissionTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acceptMissionTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &acceptmissiontime_)));
          set_has_acceptmissiontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemInfo;
        break;
      }

      // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemInfo;
        if (input->ExpectTag(48)) goto parse_textid;
        break;
      }

      // optional uint64 textid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_textid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &textid_)));
          set_has_textid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBMissionTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 missionId = 1;
  if (has_missionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->missionid(), output);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dynamicid(), output);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // optional uint64 acceptMissionTime = 4;
  if (has_acceptmissiontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->acceptmissiontime(), output);
  }

  // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->iteminfo(i), output);
  }

  // optional uint64 textid = 6;
  if (has_textid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->textid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBMissionTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 missionId = 1;
  if (has_missionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->missionid(), target);
  }

  // optional uint64 dynamicid = 2;
  if (has_dynamicid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dynamicid(), target);
  }

  // optional uint32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // optional uint64 acceptMissionTime = 4;
  if (has_acceptmissiontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->acceptmissiontime(), target);
  }

  // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->iteminfo(i), target);
  }

  // optional uint64 textid = 6;
  if (has_textid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->textid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBMissionTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 missionId = 1;
    if (has_missionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->missionid());
    }

    // optional uint64 dynamicid = 2;
    if (has_dynamicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dynamicid());
    }

    // optional uint32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint64 acceptMissionTime = 4;
    if (has_acceptmissiontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->acceptmissiontime());
    }

    // optional uint64 textid = 6;
    if (has_textid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->textid());
    }

  }
  // repeated .proto_ff.CharacterDBMissionItemInfo itemInfo = 5;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBMissionTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBMissionTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBMissionTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBMissionTrack::MergeFrom(const CharacterDBMissionTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missionid()) {
      set_missionid(from.missionid());
    }
    if (from.has_dynamicid()) {
      set_dynamicid(from.dynamicid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_acceptmissiontime()) {
      set_acceptmissiontime(from.acceptmissiontime());
    }
    if (from.has_textid()) {
      set_textid(from.textid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBMissionTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBMissionTrack::CopyFrom(const CharacterDBMissionTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBMissionTrack::IsInitialized() const {

  return true;
}

void CharacterDBMissionTrack::Swap(CharacterDBMissionTrack* other) {
  if (other != this) {
    std::swap(missionid_, other->missionid_);
    std::swap(dynamicid_, other->dynamicid_);
    std::swap(status_, other->status_);
    std::swap(acceptmissiontime_, other->acceptmissiontime_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(textid_, other->textid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBMissionTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBMissionTrack_descriptor_;
  metadata.reflection = CharacterDBMissionTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBDyMissionInfo::kMissionTypeFieldNumber;
const int CharacterDBDyMissionInfo::kLastfreshFieldNumber;
const int CharacterDBDyMissionInfo::kAcceptNumFieldNumber;
#endif  // !_MSC_VER

CharacterDBDyMissionInfo::CharacterDBDyMissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBDyMissionInfo::InitAsDefaultInstance() {
}

CharacterDBDyMissionInfo::CharacterDBDyMissionInfo(const CharacterDBDyMissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBDyMissionInfo::SharedCtor() {
  _cached_size_ = 0;
  mission_type_ = 0;
  lastfresh_ = GOOGLE_ULONGLONG(0);
  accept_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBDyMissionInfo::~CharacterDBDyMissionInfo() {
  SharedDtor();
}

void CharacterDBDyMissionInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBDyMissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBDyMissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBDyMissionInfo_descriptor_;
}

const CharacterDBDyMissionInfo& CharacterDBDyMissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBDyMissionInfo* CharacterDBDyMissionInfo::default_instance_ = NULL;

CharacterDBDyMissionInfo* CharacterDBDyMissionInfo::New() const {
  return new CharacterDBDyMissionInfo;
}

void CharacterDBDyMissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mission_type_ = 0;
    lastfresh_ = GOOGLE_ULONGLONG(0);
    accept_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBDyMissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mission_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mission_type_)));
          set_has_mission_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastfresh;
        break;
      }

      // optional uint64 lastfresh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastfresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastfresh_)));
          set_has_lastfresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_accept_num;
        break;
      }

      // optional int32 accept_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_num_)));
          set_has_accept_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBDyMissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mission_type(), output);
  }

  // optional uint64 lastfresh = 2;
  if (has_lastfresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastfresh(), output);
  }

  // optional int32 accept_num = 3;
  if (has_accept_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->accept_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBDyMissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mission_type = 1;
  if (has_mission_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mission_type(), target);
  }

  // optional uint64 lastfresh = 2;
  if (has_lastfresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastfresh(), target);
  }

  // optional int32 accept_num = 3;
  if (has_accept_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->accept_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBDyMissionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mission_type = 1;
    if (has_mission_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mission_type());
    }

    // optional uint64 lastfresh = 2;
    if (has_lastfresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastfresh());
    }

    // optional int32 accept_num = 3;
    if (has_accept_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accept_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBDyMissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBDyMissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBDyMissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBDyMissionInfo::MergeFrom(const CharacterDBDyMissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mission_type()) {
      set_mission_type(from.mission_type());
    }
    if (from.has_lastfresh()) {
      set_lastfresh(from.lastfresh());
    }
    if (from.has_accept_num()) {
      set_accept_num(from.accept_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBDyMissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBDyMissionInfo::CopyFrom(const CharacterDBDyMissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBDyMissionInfo::IsInitialized() const {

  return true;
}

void CharacterDBDyMissionInfo::Swap(CharacterDBDyMissionInfo* other) {
  if (other != this) {
    std::swap(mission_type_, other->mission_type_);
    std::swap(lastfresh_, other->lastfresh_);
    std::swap(accept_num_, other->accept_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBDyMissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBDyMissionInfo_descriptor_;
  metadata.reflection = CharacterDBDyMissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterDBTaskData::kMissionTrackFieldNumber;
const int CharacterDBTaskData::kDyinfoFieldNumber;
const int CharacterDBTaskData::kAlreadySubmitFieldNumber;
const int CharacterDBTaskData::kRecentSubmitFieldNumber;
#endif  // !_MSC_VER

CharacterDBTaskData::CharacterDBTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterDBTaskData::InitAsDefaultInstance() {
}

CharacterDBTaskData::CharacterDBTaskData(const CharacterDBTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterDBTaskData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterDBTaskData::~CharacterDBTaskData() {
  SharedDtor();
}

void CharacterDBTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterDBTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterDBTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterDBTaskData_descriptor_;
}

const CharacterDBTaskData& CharacterDBTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

CharacterDBTaskData* CharacterDBTaskData::default_instance_ = NULL;

CharacterDBTaskData* CharacterDBTaskData::New() const {
  return new CharacterDBTaskData;
}

void CharacterDBTaskData::Clear() {
  missiontrack_.Clear();
  dyinfo_.Clear();
  already_submit_.Clear();
  recent_submit_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterDBTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_missionTrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missiontrack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_missionTrack;
        if (input->ExpectTag(18)) goto parse_dyinfo;
        break;
      }

      // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dyinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dyinfo;
        if (input->ExpectTag(24)) goto parse_already_submit;
        break;
      }

      // repeated uint64 already_submit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_submit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 24, input, this->mutable_already_submit())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_already_submit())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_already_submit;
        if (input->ExpectTag(34)) goto parse_recent_submit;
        break;
      }

      // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_recent_submit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_recent_submit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_recent_submit;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterDBTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
  for (int i = 0; i < this->missiontrack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missiontrack(i), output);
  }

  // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
  for (int i = 0; i < this->dyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->dyinfo(i), output);
  }

  // repeated uint64 already_submit = 3;
  for (int i = 0; i < this->already_submit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      3, this->already_submit(i), output);
  }

  // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
  for (int i = 0; i < this->recent_submit_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->recent_submit(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterDBTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
  for (int i = 0; i < this->missiontrack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missiontrack(i), target);
  }

  // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
  for (int i = 0; i < this->dyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->dyinfo(i), target);
  }

  // repeated uint64 already_submit = 3;
  for (int i = 0; i < this->already_submit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(3, this->already_submit(i), target);
  }

  // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
  for (int i = 0; i < this->recent_submit_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->recent_submit(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterDBTaskData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CharacterDBMissionTrack missionTrack = 1;
  total_size += 1 * this->missiontrack_size();
  for (int i = 0; i < this->missiontrack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missiontrack(i));
  }

  // repeated .proto_ff.CharacterDBDyMissionInfo dyinfo = 2;
  total_size += 1 * this->dyinfo_size();
  for (int i = 0; i < this->dyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dyinfo(i));
  }

  // repeated uint64 already_submit = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->already_submit_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->already_submit(i));
    }
    total_size += 1 * this->already_submit_size() + data_size;
  }

  // repeated .proto_ff.CharacterDBRecentSubmitMission recent_submit = 4;
  total_size += 1 * this->recent_submit_size();
  for (int i = 0; i < this->recent_submit_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->recent_submit(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterDBTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterDBTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterDBTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterDBTaskData::MergeFrom(const CharacterDBTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  missiontrack_.MergeFrom(from.missiontrack_);
  dyinfo_.MergeFrom(from.dyinfo_);
  already_submit_.MergeFrom(from.already_submit_);
  recent_submit_.MergeFrom(from.recent_submit_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterDBTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterDBTaskData::CopyFrom(const CharacterDBTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterDBTaskData::IsInitialized() const {

  return true;
}

void CharacterDBTaskData::Swap(CharacterDBTaskData* other) {
  if (other != this) {
    missiontrack_.Swap(&other->missiontrack_);
    dyinfo_.Swap(&other->dyinfo_);
    already_submit_.Swap(&other->already_submit_);
    recent_submit_.Swap(&other->recent_submit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterDBTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterDBTaskData_descriptor_;
  metadata.reflection = CharacterDBTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NotifyVipDataRsp::kExpFieldNumber;
const int NotifyVipDataRsp::kIdsFieldNumber;
#endif  // !_MSC_VER

NotifyVipDataRsp::NotifyVipDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NotifyVipDataRsp::InitAsDefaultInstance() {
}

NotifyVipDataRsp::NotifyVipDataRsp(const NotifyVipDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NotifyVipDataRsp::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NotifyVipDataRsp::~NotifyVipDataRsp() {
  SharedDtor();
}

void NotifyVipDataRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NotifyVipDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NotifyVipDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NotifyVipDataRsp_descriptor_;
}

const NotifyVipDataRsp& NotifyVipDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Com_2eproto();
  return *default_instance_;
}

NotifyVipDataRsp* NotifyVipDataRsp::default_instance_ = NULL;

NotifyVipDataRsp* NotifyVipDataRsp::New() const {
  return new NotifyVipDataRsp;
}

void NotifyVipDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
  }
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NotifyVipDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ids;
        break;
      }

      // repeated int32 ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NotifyVipDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // repeated int32 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NotifyVipDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  // repeated int32 ids = 2;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NotifyVipDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  // repeated int32 ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NotifyVipDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NotifyVipDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NotifyVipDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NotifyVipDataRsp::MergeFrom(const NotifyVipDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NotifyVipDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NotifyVipDataRsp::CopyFrom(const NotifyVipDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NotifyVipDataRsp::IsInitialized() const {

  return true;
}

void NotifyVipDataRsp::Swap(NotifyVipDataRsp* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NotifyVipDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NotifyVipDataRsp_descriptor_;
  metadata.reflection = NotifyVipDataRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
