// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: duplicate.proto

#ifndef PROTOBUF_duplicate_2eproto__INCLUDED
#define PROTOBUF_duplicate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_duplicate_2eproto();
void protobuf_AssignDesc_duplicate_2eproto();
void protobuf_ShutdownFile_duplicate_2eproto();

class duplicateduplicate;
class Sheet_duplicateduplicate;
class duplicateconstant;
class Sheet_duplicateconstant;
class duplicateendlessMaze;
class Sheet_duplicateendlessMaze;
class duplicatetowerReward;
class Sheet_duplicatetowerReward;
class duplicatedungeonRewardrewardDesc;
class duplicatedungeonReward;
class Sheet_duplicatedungeonReward;
class duplicategroup;
class Sheet_duplicategroup;
class duplicatesweepmonsterNum;
class Sheet_duplicatesweepmonsterNum;
class duplicateGuildbosstime;
class Sheet_duplicateGuildbosstime;
class duplicateGuildbosskillDesc;
class duplicateGuildboss;
class Sheet_duplicateGuildboss;
class duplicateGuildDuplicate;
class Sheet_duplicateGuildDuplicate;

// ===================================================================

class duplicateduplicate : public ::google::protobuf::Message {
 public:
  duplicateduplicate();
  virtual ~duplicateduplicate();

  duplicateduplicate(const duplicateduplicate& from);

  inline duplicateduplicate& operator=(const duplicateduplicate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicateduplicate& default_instance();

  void Swap(duplicateduplicate* other);

  // implements Message ----------------------------------------------

  duplicateduplicate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicateduplicate& from);
  void MergeFrom(const duplicateduplicate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 duplicateID = 1;
  inline bool has_duplicateid() const;
  inline void clear_duplicateid();
  static const int kDuplicateIDFieldNumber = 1;
  inline ::google::protobuf::int64 duplicateid() const;
  inline void set_duplicateid(::google::protobuf::int64 value);

  // optional string duplicateName = 2;
  inline bool has_duplicatename() const;
  inline void clear_duplicatename();
  static const int kDuplicateNameFieldNumber = 2;
  inline const ::std::string& duplicatename() const;
  inline void set_duplicatename(const ::std::string& value);
  inline void set_duplicatename(const char* value);
  inline void set_duplicatename(const char* value, size_t size);
  inline ::std::string* mutable_duplicatename();
  inline ::std::string* release_duplicatename();
  inline void set_allocated_duplicatename(::std::string* duplicatename);

  // optional string duplicateTitlePic = 3;
  inline bool has_duplicatetitlepic() const;
  inline void clear_duplicatetitlepic();
  static const int kDuplicateTitlePicFieldNumber = 3;
  inline const ::std::string& duplicatetitlepic() const;
  inline void set_duplicatetitlepic(const ::std::string& value);
  inline void set_duplicatetitlepic(const char* value);
  inline void set_duplicatetitlepic(const char* value, size_t size);
  inline ::std::string* mutable_duplicatetitlepic();
  inline ::std::string* release_duplicatetitlepic();
  inline void set_allocated_duplicatetitlepic(::std::string* duplicatetitlepic);

  // optional int64 groupID = 4;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 4;
  inline ::google::protobuf::int64 groupid() const;
  inline void set_groupid(::google::protobuf::int64 value);

  // optional int32 duplicateType = 5;
  inline bool has_duplicatetype() const;
  inline void clear_duplicatetype();
  static const int kDuplicateTypeFieldNumber = 5;
  inline ::google::protobuf::int32 duplicatetype() const;
  inline void set_duplicatetype(::google::protobuf::int32 value);

  // optional int32 playType = 6;
  inline bool has_playtype() const;
  inline void clear_playtype();
  static const int kPlayTypeFieldNumber = 6;
  inline ::google::protobuf::int32 playtype() const;
  inline void set_playtype(::google::protobuf::int32 value);

  // optional int64 sceneResource = 7;
  inline bool has_sceneresource() const;
  inline void clear_sceneresource();
  static const int kSceneResourceFieldNumber = 7;
  inline ::google::protobuf::int64 sceneresource() const;
  inline void set_sceneresource(::google::protobuf::int64 value);

  // optional int32 levelLimit = 8;
  inline bool has_levellimit() const;
  inline void clear_levellimit();
  static const int kLevelLimitFieldNumber = 8;
  inline ::google::protobuf::int32 levellimit() const;
  inline void set_levellimit(::google::protobuf::int32 value);

  // optional int64 linkDuplicateRequest = 9;
  inline bool has_linkduplicaterequest() const;
  inline void clear_linkduplicaterequest();
  static const int kLinkDuplicateRequestFieldNumber = 9;
  inline ::google::protobuf::int64 linkduplicaterequest() const;
  inline void set_linkduplicaterequest(::google::protobuf::int64 value);

  // optional int32 isAutoFight = 10;
  inline bool has_isautofight() const;
  inline void clear_isautofight();
  static const int kIsAutoFightFieldNumber = 10;
  inline ::google::protobuf::int32 isautofight() const;
  inline void set_isautofight(::google::protobuf::int32 value);

  // optional string duplicateConditionType = 11;
  inline bool has_duplicateconditiontype() const;
  inline void clear_duplicateconditiontype();
  static const int kDuplicateConditionTypeFieldNumber = 11;
  inline const ::std::string& duplicateconditiontype() const;
  inline void set_duplicateconditiontype(const ::std::string& value);
  inline void set_duplicateconditiontype(const char* value);
  inline void set_duplicateconditiontype(const char* value, size_t size);
  inline ::std::string* mutable_duplicateconditiontype();
  inline ::std::string* release_duplicateconditiontype();
  inline void set_allocated_duplicateconditiontype(::std::string* duplicateconditiontype);

  // optional int32 reviveMaxTimes = 12;
  inline bool has_revivemaxtimes() const;
  inline void clear_revivemaxtimes();
  static const int kReviveMaxTimesFieldNumber = 12;
  inline ::google::protobuf::int32 revivemaxtimes() const;
  inline void set_revivemaxtimes(::google::protobuf::int32 value);

  // optional int64 dropNormalMonster = 13;
  inline bool has_dropnormalmonster() const;
  inline void clear_dropnormalmonster();
  static const int kDropNormalMonsterFieldNumber = 13;
  inline ::google::protobuf::int64 dropnormalmonster() const;
  inline void set_dropnormalmonster(::google::protobuf::int64 value);

  // optional int64 dropEliteMonster = 14;
  inline bool has_dropelitemonster() const;
  inline void clear_dropelitemonster();
  static const int kDropEliteMonsterFieldNumber = 14;
  inline ::google::protobuf::int64 dropelitemonster() const;
  inline void set_dropelitemonster(::google::protobuf::int64 value);

  // optional int64 dropBossMonster = 15;
  inline bool has_dropbossmonster() const;
  inline void clear_dropbossmonster();
  static const int kDropBossMonsterFieldNumber = 15;
  inline ::google::protobuf::int64 dropbossmonster() const;
  inline void set_dropbossmonster(::google::protobuf::int64 value);

  // optional string sceneAIScript = 16;
  inline bool has_sceneaiscript() const;
  inline void clear_sceneaiscript();
  static const int kSceneAIScriptFieldNumber = 16;
  inline const ::std::string& sceneaiscript() const;
  inline void set_sceneaiscript(const ::std::string& value);
  inline void set_sceneaiscript(const char* value);
  inline void set_sceneaiscript(const char* value, size_t size);
  inline ::std::string* mutable_sceneaiscript();
  inline ::std::string* release_sceneaiscript();
  inline void set_allocated_sceneaiscript(::std::string* sceneaiscript);

  // optional string bossDesc = 17;
  inline bool has_bossdesc() const;
  inline void clear_bossdesc();
  static const int kBossDescFieldNumber = 17;
  inline const ::std::string& bossdesc() const;
  inline void set_bossdesc(const ::std::string& value);
  inline void set_bossdesc(const char* value);
  inline void set_bossdesc(const char* value, size_t size);
  inline ::std::string* mutable_bossdesc();
  inline ::std::string* release_bossdesc();
  inline void set_allocated_bossdesc(::std::string* bossdesc);

  // optional int32 TeamObjectID = 18;
  inline bool has_teamobjectid() const;
  inline void clear_teamobjectid();
  static const int kTeamObjectIDFieldNumber = 18;
  inline ::google::protobuf::int32 teamobjectid() const;
  inline void set_teamobjectid(::google::protobuf::int32 value);

  // optional string gradeCondition = 19;
  inline bool has_gradecondition() const;
  inline void clear_gradecondition();
  static const int kGradeConditionFieldNumber = 19;
  inline const ::std::string& gradecondition() const;
  inline void set_gradecondition(const ::std::string& value);
  inline void set_gradecondition(const char* value);
  inline void set_gradecondition(const char* value, size_t size);
  inline ::std::string* mutable_gradecondition();
  inline ::std::string* release_gradecondition();
  inline void set_allocated_gradecondition(::std::string* gradecondition);

  // optional int64 sweepRewardBoxID = 20;
  inline bool has_sweeprewardboxid() const;
  inline void clear_sweeprewardboxid();
  static const int kSweepRewardBoxIDFieldNumber = 20;
  inline ::google::protobuf::int64 sweeprewardboxid() const;
  inline void set_sweeprewardboxid(::google::protobuf::int64 value);

  // optional int32 sweepRewardExp = 21;
  inline bool has_sweeprewardexp() const;
  inline void clear_sweeprewardexp();
  static const int kSweepRewardExpFieldNumber = 21;
  inline ::google::protobuf::int32 sweeprewardexp() const;
  inline void set_sweeprewardexp(::google::protobuf::int32 value);

  // optional string trackpath = 22;
  inline bool has_trackpath() const;
  inline void clear_trackpath();
  static const int kTrackpathFieldNumber = 22;
  inline const ::std::string& trackpath() const;
  inline void set_trackpath(const ::std::string& value);
  inline void set_trackpath(const char* value);
  inline void set_trackpath(const char* value, size_t size);
  inline ::std::string* mutable_trackpath();
  inline ::std::string* release_trackpath();
  inline void set_allocated_trackpath(::std::string* trackpath);

  // optional string pathOfmonster = 23;
  inline bool has_pathofmonster() const;
  inline void clear_pathofmonster();
  static const int kPathOfmonsterFieldNumber = 23;
  inline const ::std::string& pathofmonster() const;
  inline void set_pathofmonster(const ::std::string& value);
  inline void set_pathofmonster(const char* value);
  inline void set_pathofmonster(const char* value, size_t size);
  inline ::std::string* mutable_pathofmonster();
  inline ::std::string* release_pathofmonster();
  inline void set_allocated_pathofmonster(::std::string* pathofmonster);

  // optional int32 isPatrol = 24;
  inline bool has_ispatrol() const;
  inline void clear_ispatrol();
  static const int kIsPatrolFieldNumber = 24;
  inline ::google::protobuf::int32 ispatrol() const;
  inline void set_ispatrol(::google::protobuf::int32 value);

  // optional int32 sweepType = 25;
  inline bool has_sweeptype() const;
  inline void clear_sweeptype();
  static const int kSweepTypeFieldNumber = 25;
  inline ::google::protobuf::int32 sweeptype() const;
  inline void set_sweeptype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicateduplicate)
 private:
  inline void set_has_duplicateid();
  inline void clear_has_duplicateid();
  inline void set_has_duplicatename();
  inline void clear_has_duplicatename();
  inline void set_has_duplicatetitlepic();
  inline void clear_has_duplicatetitlepic();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_duplicatetype();
  inline void clear_has_duplicatetype();
  inline void set_has_playtype();
  inline void clear_has_playtype();
  inline void set_has_sceneresource();
  inline void clear_has_sceneresource();
  inline void set_has_levellimit();
  inline void clear_has_levellimit();
  inline void set_has_linkduplicaterequest();
  inline void clear_has_linkduplicaterequest();
  inline void set_has_isautofight();
  inline void clear_has_isautofight();
  inline void set_has_duplicateconditiontype();
  inline void clear_has_duplicateconditiontype();
  inline void set_has_revivemaxtimes();
  inline void clear_has_revivemaxtimes();
  inline void set_has_dropnormalmonster();
  inline void clear_has_dropnormalmonster();
  inline void set_has_dropelitemonster();
  inline void clear_has_dropelitemonster();
  inline void set_has_dropbossmonster();
  inline void clear_has_dropbossmonster();
  inline void set_has_sceneaiscript();
  inline void clear_has_sceneaiscript();
  inline void set_has_bossdesc();
  inline void clear_has_bossdesc();
  inline void set_has_teamobjectid();
  inline void clear_has_teamobjectid();
  inline void set_has_gradecondition();
  inline void clear_has_gradecondition();
  inline void set_has_sweeprewardboxid();
  inline void clear_has_sweeprewardboxid();
  inline void set_has_sweeprewardexp();
  inline void clear_has_sweeprewardexp();
  inline void set_has_trackpath();
  inline void clear_has_trackpath();
  inline void set_has_pathofmonster();
  inline void clear_has_pathofmonster();
  inline void set_has_ispatrol();
  inline void clear_has_ispatrol();
  inline void set_has_sweeptype();
  inline void clear_has_sweeptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 duplicateid_;
  ::std::string* duplicatename_;
  ::std::string* duplicatetitlepic_;
  ::google::protobuf::int64 groupid_;
  ::google::protobuf::int32 duplicatetype_;
  ::google::protobuf::int32 playtype_;
  ::google::protobuf::int64 sceneresource_;
  ::google::protobuf::int64 linkduplicaterequest_;
  ::google::protobuf::int32 levellimit_;
  ::google::protobuf::int32 isautofight_;
  ::std::string* duplicateconditiontype_;
  ::google::protobuf::int64 dropnormalmonster_;
  ::google::protobuf::int64 dropelitemonster_;
  ::google::protobuf::int64 dropbossmonster_;
  ::google::protobuf::int32 revivemaxtimes_;
  ::google::protobuf::int32 teamobjectid_;
  ::std::string* sceneaiscript_;
  ::std::string* bossdesc_;
  ::std::string* gradecondition_;
  ::google::protobuf::int64 sweeprewardboxid_;
  ::std::string* trackpath_;
  ::google::protobuf::int32 sweeprewardexp_;
  ::google::protobuf::int32 ispatrol_;
  ::std::string* pathofmonster_;
  ::google::protobuf::int32 sweeptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(25 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicateduplicate* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicateduplicate : public ::google::protobuf::Message {
 public:
  Sheet_duplicateduplicate();
  virtual ~Sheet_duplicateduplicate();

  Sheet_duplicateduplicate(const Sheet_duplicateduplicate& from);

  inline Sheet_duplicateduplicate& operator=(const Sheet_duplicateduplicate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicateduplicate& default_instance();

  void Swap(Sheet_duplicateduplicate* other);

  // implements Message ----------------------------------------------

  Sheet_duplicateduplicate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicateduplicate& from);
  void MergeFrom(const Sheet_duplicateduplicate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicateduplicate duplicateduplicate_List = 1;
  inline int duplicateduplicate_list_size() const;
  inline void clear_duplicateduplicate_list();
  static const int kDuplicateduplicateListFieldNumber = 1;
  inline const ::proto_ff::duplicateduplicate& duplicateduplicate_list(int index) const;
  inline ::proto_ff::duplicateduplicate* mutable_duplicateduplicate_list(int index);
  inline ::proto_ff::duplicateduplicate* add_duplicateduplicate_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateduplicate >&
      duplicateduplicate_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateduplicate >*
      mutable_duplicateduplicate_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicateduplicate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateduplicate > duplicateduplicate_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicateduplicate* default_instance_;
};
// -------------------------------------------------------------------

class duplicateconstant : public ::google::protobuf::Message {
 public:
  duplicateconstant();
  virtual ~duplicateconstant();

  duplicateconstant(const duplicateconstant& from);

  inline duplicateconstant& operator=(const duplicateconstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicateconstant& default_instance();

  void Swap(duplicateconstant* other);

  // implements Message ----------------------------------------------

  duplicateconstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicateconstant& from);
  void MergeFrom(const duplicateconstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 constantid = 1;
  inline bool has_constantid() const;
  inline void clear_constantid();
  static const int kConstantidFieldNumber = 1;
  inline ::google::protobuf::int64 constantid() const;
  inline void set_constantid(::google::protobuf::int64 value);

  // optional int64 constantdata = 2;
  inline bool has_constantdata() const;
  inline void clear_constantdata();
  static const int kConstantdataFieldNumber = 2;
  inline ::google::protobuf::int64 constantdata() const;
  inline void set_constantdata(::google::protobuf::int64 value);

  // optional string stringdata = 3;
  inline bool has_stringdata() const;
  inline void clear_stringdata();
  static const int kStringdataFieldNumber = 3;
  inline const ::std::string& stringdata() const;
  inline void set_stringdata(const ::std::string& value);
  inline void set_stringdata(const char* value);
  inline void set_stringdata(const char* value, size_t size);
  inline ::std::string* mutable_stringdata();
  inline ::std::string* release_stringdata();
  inline void set_allocated_stringdata(::std::string* stringdata);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicateconstant)
 private:
  inline void set_has_constantid();
  inline void clear_has_constantid();
  inline void set_has_constantdata();
  inline void clear_has_constantdata();
  inline void set_has_stringdata();
  inline void clear_has_stringdata();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 constantid_;
  ::google::protobuf::int64 constantdata_;
  ::std::string* stringdata_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicateconstant* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicateconstant : public ::google::protobuf::Message {
 public:
  Sheet_duplicateconstant();
  virtual ~Sheet_duplicateconstant();

  Sheet_duplicateconstant(const Sheet_duplicateconstant& from);

  inline Sheet_duplicateconstant& operator=(const Sheet_duplicateconstant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicateconstant& default_instance();

  void Swap(Sheet_duplicateconstant* other);

  // implements Message ----------------------------------------------

  Sheet_duplicateconstant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicateconstant& from);
  void MergeFrom(const Sheet_duplicateconstant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicateconstant duplicateconstant_List = 1;
  inline int duplicateconstant_list_size() const;
  inline void clear_duplicateconstant_list();
  static const int kDuplicateconstantListFieldNumber = 1;
  inline const ::proto_ff::duplicateconstant& duplicateconstant_list(int index) const;
  inline ::proto_ff::duplicateconstant* mutable_duplicateconstant_list(int index);
  inline ::proto_ff::duplicateconstant* add_duplicateconstant_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateconstant >&
      duplicateconstant_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateconstant >*
      mutable_duplicateconstant_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicateconstant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateconstant > duplicateconstant_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicateconstant* default_instance_;
};
// -------------------------------------------------------------------

class duplicateendlessMaze : public ::google::protobuf::Message {
 public:
  duplicateendlessMaze();
  virtual ~duplicateendlessMaze();

  duplicateendlessMaze(const duplicateendlessMaze& from);

  inline duplicateendlessMaze& operator=(const duplicateendlessMaze& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicateendlessMaze& default_instance();

  void Swap(duplicateendlessMaze* other);

  // implements Message ----------------------------------------------

  duplicateendlessMaze* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicateendlessMaze& from);
  void MergeFrom(const duplicateendlessMaze& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional string duplicateID = 3;
  inline bool has_duplicateid() const;
  inline void clear_duplicateid();
  static const int kDuplicateIDFieldNumber = 3;
  inline const ::std::string& duplicateid() const;
  inline void set_duplicateid(const ::std::string& value);
  inline void set_duplicateid(const char* value);
  inline void set_duplicateid(const char* value, size_t size);
  inline ::std::string* mutable_duplicateid();
  inline ::std::string* release_duplicateid();
  inline void set_allocated_duplicateid(::std::string* duplicateid);

  // optional int32 CreateRate = 4;
  inline bool has_createrate() const;
  inline void clear_createrate();
  static const int kCreateRateFieldNumber = 4;
  inline ::google::protobuf::int32 createrate() const;
  inline void set_createrate(::google::protobuf::int32 value);

  // optional int64 rewardID = 5;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIDFieldNumber = 5;
  inline ::google::protobuf::int64 rewardid() const;
  inline void set_rewardid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicateendlessMaze)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_duplicateid();
  inline void clear_has_duplicateid();
  inline void set_has_createrate();
  inline void clear_has_createrate();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 level_;
  ::std::string* duplicateid_;
  ::google::protobuf::int64 rewardid_;
  ::google::protobuf::int32 createrate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicateendlessMaze* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicateendlessMaze : public ::google::protobuf::Message {
 public:
  Sheet_duplicateendlessMaze();
  virtual ~Sheet_duplicateendlessMaze();

  Sheet_duplicateendlessMaze(const Sheet_duplicateendlessMaze& from);

  inline Sheet_duplicateendlessMaze& operator=(const Sheet_duplicateendlessMaze& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicateendlessMaze& default_instance();

  void Swap(Sheet_duplicateendlessMaze* other);

  // implements Message ----------------------------------------------

  Sheet_duplicateendlessMaze* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicateendlessMaze& from);
  void MergeFrom(const Sheet_duplicateendlessMaze& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicateendlessMaze duplicateendlessMaze_List = 1;
  inline int duplicateendlessmaze_list_size() const;
  inline void clear_duplicateendlessmaze_list();
  static const int kDuplicateendlessMazeListFieldNumber = 1;
  inline const ::proto_ff::duplicateendlessMaze& duplicateendlessmaze_list(int index) const;
  inline ::proto_ff::duplicateendlessMaze* mutable_duplicateendlessmaze_list(int index);
  inline ::proto_ff::duplicateendlessMaze* add_duplicateendlessmaze_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateendlessMaze >&
      duplicateendlessmaze_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateendlessMaze >*
      mutable_duplicateendlessmaze_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicateendlessMaze)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateendlessMaze > duplicateendlessmaze_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicateendlessMaze* default_instance_;
};
// -------------------------------------------------------------------

class duplicatetowerReward : public ::google::protobuf::Message {
 public:
  duplicatetowerReward();
  virtual ~duplicatetowerReward();

  duplicatetowerReward(const duplicatetowerReward& from);

  inline duplicatetowerReward& operator=(const duplicatetowerReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicatetowerReward& default_instance();

  void Swap(duplicatetowerReward* other);

  // implements Message ----------------------------------------------

  duplicatetowerReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicatetowerReward& from);
  void MergeFrom(const duplicatetowerReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 floorMin = 1;
  inline bool has_floormin() const;
  inline void clear_floormin();
  static const int kFloorMinFieldNumber = 1;
  inline ::google::protobuf::int64 floormin() const;
  inline void set_floormin(::google::protobuf::int64 value);

  // optional int64 floormax = 2;
  inline bool has_floormax() const;
  inline void clear_floormax();
  static const int kFloormaxFieldNumber = 2;
  inline ::google::protobuf::int64 floormax() const;
  inline void set_floormax(::google::protobuf::int64 value);

  // optional int64 BOXID = 3;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBOXIDFieldNumber = 3;
  inline ::google::protobuf::int64 boxid() const;
  inline void set_boxid(::google::protobuf::int64 value);

  // optional int64 itemId = 4;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 itemNum = 5;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 5;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicatetowerReward)
 private:
  inline void set_has_floormin();
  inline void clear_has_floormin();
  inline void set_has_floormax();
  inline void clear_has_floormax();
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 floormin_;
  ::google::protobuf::int64 floormax_;
  ::google::protobuf::int64 boxid_;
  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int32 itemnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicatetowerReward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicatetowerReward : public ::google::protobuf::Message {
 public:
  Sheet_duplicatetowerReward();
  virtual ~Sheet_duplicatetowerReward();

  Sheet_duplicatetowerReward(const Sheet_duplicatetowerReward& from);

  inline Sheet_duplicatetowerReward& operator=(const Sheet_duplicatetowerReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicatetowerReward& default_instance();

  void Swap(Sheet_duplicatetowerReward* other);

  // implements Message ----------------------------------------------

  Sheet_duplicatetowerReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicatetowerReward& from);
  void MergeFrom(const Sheet_duplicatetowerReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicatetowerReward duplicatetowerReward_List = 1;
  inline int duplicatetowerreward_list_size() const;
  inline void clear_duplicatetowerreward_list();
  static const int kDuplicatetowerRewardListFieldNumber = 1;
  inline const ::proto_ff::duplicatetowerReward& duplicatetowerreward_list(int index) const;
  inline ::proto_ff::duplicatetowerReward* mutable_duplicatetowerreward_list(int index);
  inline ::proto_ff::duplicatetowerReward* add_duplicatetowerreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatetowerReward >&
      duplicatetowerreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatetowerReward >*
      mutable_duplicatetowerreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicatetowerReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatetowerReward > duplicatetowerreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicatetowerReward* default_instance_;
};
// -------------------------------------------------------------------

class duplicatedungeonRewardrewardDesc : public ::google::protobuf::Message {
 public:
  duplicatedungeonRewardrewardDesc();
  virtual ~duplicatedungeonRewardrewardDesc();

  duplicatedungeonRewardrewardDesc(const duplicatedungeonRewardrewardDesc& from);

  inline duplicatedungeonRewardrewardDesc& operator=(const duplicatedungeonRewardrewardDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicatedungeonRewardrewardDesc& default_instance();

  void Swap(duplicatedungeonRewardrewardDesc* other);

  // implements Message ----------------------------------------------

  duplicatedungeonRewardrewardDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicatedungeonRewardrewardDesc& from);
  void MergeFrom(const duplicatedungeonRewardrewardDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ItemNum = 1;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 1;
  inline ::google::protobuf::int32 itemnum() const;
  inline void set_itemnum(::google::protobuf::int32 value);

  // optional int64 Item = 2;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline ::google::protobuf::int64 item() const;
  inline void set_item(::google::protobuf::int64 value);

  // optional int32 Num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicatedungeonRewardrewardDesc)
 private:
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_item();
  inline void clear_has_item();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 item_;
  ::google::protobuf::int32 itemnum_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicatedungeonRewardrewardDesc* default_instance_;
};
// -------------------------------------------------------------------

class duplicatedungeonReward : public ::google::protobuf::Message {
 public:
  duplicatedungeonReward();
  virtual ~duplicatedungeonReward();

  duplicatedungeonReward(const duplicatedungeonReward& from);

  inline duplicatedungeonReward& operator=(const duplicatedungeonReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicatedungeonReward& default_instance();

  void Swap(duplicatedungeonReward* other);

  // implements Message ----------------------------------------------

  duplicatedungeonReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicatedungeonReward& from);
  void MergeFrom(const duplicatedungeonReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::int32 levelid() const;
  inline void set_levelid(::google::protobuf::int32 value);

  // optional int32 rewardTime = 2;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 2;
  inline ::google::protobuf::int32 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::int32 value);

  // optional int32 passReceiveTime = 3;
  inline bool has_passreceivetime() const;
  inline void clear_passreceivetime();
  static const int kPassReceiveTimeFieldNumber = 3;
  inline ::google::protobuf::int32 passreceivetime() const;
  inline void set_passreceivetime(::google::protobuf::int32 value);

  // repeated .proto_ff.duplicatedungeonRewardrewardDesc reward = 4;
  inline int reward_size() const;
  inline void clear_reward();
  static const int kRewardFieldNumber = 4;
  inline const ::proto_ff::duplicatedungeonRewardrewardDesc& reward(int index) const;
  inline ::proto_ff::duplicatedungeonRewardrewardDesc* mutable_reward(int index);
  inline ::proto_ff::duplicatedungeonRewardrewardDesc* add_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonRewardrewardDesc >&
      reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonRewardrewardDesc >*
      mutable_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.duplicatedungeonReward)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_passreceivetime();
  inline void clear_has_passreceivetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 levelid_;
  ::google::protobuf::int32 rewardtime_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonRewardrewardDesc > reward_;
  ::google::protobuf::int32 passreceivetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicatedungeonReward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicatedungeonReward : public ::google::protobuf::Message {
 public:
  Sheet_duplicatedungeonReward();
  virtual ~Sheet_duplicatedungeonReward();

  Sheet_duplicatedungeonReward(const Sheet_duplicatedungeonReward& from);

  inline Sheet_duplicatedungeonReward& operator=(const Sheet_duplicatedungeonReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicatedungeonReward& default_instance();

  void Swap(Sheet_duplicatedungeonReward* other);

  // implements Message ----------------------------------------------

  Sheet_duplicatedungeonReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicatedungeonReward& from);
  void MergeFrom(const Sheet_duplicatedungeonReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicatedungeonReward duplicatedungeonReward_List = 1;
  inline int duplicatedungeonreward_list_size() const;
  inline void clear_duplicatedungeonreward_list();
  static const int kDuplicatedungeonRewardListFieldNumber = 1;
  inline const ::proto_ff::duplicatedungeonReward& duplicatedungeonreward_list(int index) const;
  inline ::proto_ff::duplicatedungeonReward* mutable_duplicatedungeonreward_list(int index);
  inline ::proto_ff::duplicatedungeonReward* add_duplicatedungeonreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonReward >&
      duplicatedungeonreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonReward >*
      mutable_duplicatedungeonreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicatedungeonReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonReward > duplicatedungeonreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicatedungeonReward* default_instance_;
};
// -------------------------------------------------------------------

class duplicategroup : public ::google::protobuf::Message {
 public:
  duplicategroup();
  virtual ~duplicategroup();

  duplicategroup(const duplicategroup& from);

  inline duplicategroup& operator=(const duplicategroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicategroup& default_instance();

  void Swap(duplicategroup* other);

  // implements Message ----------------------------------------------

  duplicategroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicategroup& from);
  void MergeFrom(const duplicategroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string duplicateTitlePic = 3;
  inline bool has_duplicatetitlepic() const;
  inline void clear_duplicatetitlepic();
  static const int kDuplicateTitlePicFieldNumber = 3;
  inline const ::std::string& duplicatetitlepic() const;
  inline void set_duplicatetitlepic(const ::std::string& value);
  inline void set_duplicatetitlepic(const char* value);
  inline void set_duplicatetitlepic(const char* value, size_t size);
  inline ::std::string* mutable_duplicatetitlepic();
  inline ::std::string* release_duplicatetitlepic();
  inline void set_allocated_duplicatetitlepic(::std::string* duplicatetitlepic);

  // optional int32 unlockLevel = 4;
  inline bool has_unlocklevel() const;
  inline void clear_unlocklevel();
  static const int kUnlockLevelFieldNumber = 4;
  inline ::google::protobuf::int32 unlocklevel() const;
  inline void set_unlocklevel(::google::protobuf::int32 value);

  // optional int32 belongToType = 5;
  inline bool has_belongtotype() const;
  inline void clear_belongtotype();
  static const int kBelongToTypeFieldNumber = 5;
  inline ::google::protobuf::int32 belongtotype() const;
  inline void set_belongtotype(::google::protobuf::int32 value);

  // optional int32 viptype = 6;
  inline bool has_viptype() const;
  inline void clear_viptype();
  static const int kViptypeFieldNumber = 6;
  inline ::google::protobuf::int32 viptype() const;
  inline void set_viptype(::google::protobuf::int32 value);

  // optional int32 dynamiclevel = 7;
  inline bool has_dynamiclevel() const;
  inline void clear_dynamiclevel();
  static const int kDynamiclevelFieldNumber = 7;
  inline ::google::protobuf::int32 dynamiclevel() const;
  inline void set_dynamiclevel(::google::protobuf::int32 value);

  // optional string timesRes = 8;
  inline bool has_timesres() const;
  inline void clear_timesres();
  static const int kTimesResFieldNumber = 8;
  inline const ::std::string& timesres() const;
  inline void set_timesres(const ::std::string& value);
  inline void set_timesres(const char* value);
  inline void set_timesres(const char* value, size_t size);
  inline ::std::string* mutable_timesres();
  inline ::std::string* release_timesres();
  inline void set_allocated_timesres(::std::string* timesres);

  // optional int32 groupTimesType = 9;
  inline bool has_grouptimestype() const;
  inline void clear_grouptimestype();
  static const int kGroupTimesTypeFieldNumber = 9;
  inline ::google::protobuf::int32 grouptimestype() const;
  inline void set_grouptimestype(::google::protobuf::int32 value);

  // optional int32 groupTimes = 10;
  inline bool has_grouptimes() const;
  inline void clear_grouptimes();
  static const int kGroupTimesFieldNumber = 10;
  inline ::google::protobuf::int32 grouptimes() const;
  inline void set_grouptimes(::google::protobuf::int32 value);

  // optional int32 refreshType = 11;
  inline bool has_refreshtype() const;
  inline void clear_refreshtype();
  static const int kRefreshTypeFieldNumber = 11;
  inline ::google::protobuf::int32 refreshtype() const;
  inline void set_refreshtype(::google::protobuf::int32 value);

  // optional int64 enterItemID = 12;
  inline bool has_enteritemid() const;
  inline void clear_enteritemid();
  static const int kEnterItemIDFieldNumber = 12;
  inline ::google::protobuf::int64 enteritemid() const;
  inline void set_enteritemid(::google::protobuf::int64 value);

  // optional int32 reliveTpye = 13;
  inline bool has_relivetpye() const;
  inline void clear_relivetpye();
  static const int kReliveTpyeFieldNumber = 13;
  inline ::google::protobuf::int32 relivetpye() const;
  inline void set_relivetpye(::google::protobuf::int32 value);

  // optional string sweepCondition = 14;
  inline bool has_sweepcondition() const;
  inline void clear_sweepcondition();
  static const int kSweepConditionFieldNumber = 14;
  inline const ::std::string& sweepcondition() const;
  inline void set_sweepcondition(const ::std::string& value);
  inline void set_sweepcondition(const char* value);
  inline void set_sweepcondition(const char* value, size_t size);
  inline ::std::string* mutable_sweepcondition();
  inline ::std::string* release_sweepcondition();
  inline void set_allocated_sweepcondition(::std::string* sweepcondition);

  // optional int32 buyEnterTimesCostType = 15;
  inline bool has_buyentertimescosttype() const;
  inline void clear_buyentertimescosttype();
  static const int kBuyEnterTimesCostTypeFieldNumber = 15;
  inline ::google::protobuf::int32 buyentertimescosttype() const;
  inline void set_buyentertimescosttype(::google::protobuf::int32 value);

  // optional int32 buyEnterTimesCost = 16;
  inline bool has_buyentertimescost() const;
  inline void clear_buyentertimescost();
  static const int kBuyEnterTimesCostFieldNumber = 16;
  inline ::google::protobuf::int32 buyentertimescost() const;
  inline void set_buyentertimescost(::google::protobuf::int32 value);

  // optional int32 countDown = 17;
  inline bool has_countdown() const;
  inline void clear_countdown();
  static const int kCountDownFieldNumber = 17;
  inline ::google::protobuf::int32 countdown() const;
  inline void set_countdown(::google::protobuf::int32 value);

  // optional int32 pathfindingtype = 18;
  inline bool has_pathfindingtype() const;
  inline void clear_pathfindingtype();
  static const int kPathfindingtypeFieldNumber = 18;
  inline ::google::protobuf::int32 pathfindingtype() const;
  inline void set_pathfindingtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicategroup)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_duplicatetitlepic();
  inline void clear_has_duplicatetitlepic();
  inline void set_has_unlocklevel();
  inline void clear_has_unlocklevel();
  inline void set_has_belongtotype();
  inline void clear_has_belongtotype();
  inline void set_has_viptype();
  inline void clear_has_viptype();
  inline void set_has_dynamiclevel();
  inline void clear_has_dynamiclevel();
  inline void set_has_timesres();
  inline void clear_has_timesres();
  inline void set_has_grouptimestype();
  inline void clear_has_grouptimestype();
  inline void set_has_grouptimes();
  inline void clear_has_grouptimes();
  inline void set_has_refreshtype();
  inline void clear_has_refreshtype();
  inline void set_has_enteritemid();
  inline void clear_has_enteritemid();
  inline void set_has_relivetpye();
  inline void clear_has_relivetpye();
  inline void set_has_sweepcondition();
  inline void clear_has_sweepcondition();
  inline void set_has_buyentertimescosttype();
  inline void clear_has_buyentertimescosttype();
  inline void set_has_buyentertimescost();
  inline void clear_has_buyentertimescost();
  inline void set_has_countdown();
  inline void clear_has_countdown();
  inline void set_has_pathfindingtype();
  inline void clear_has_pathfindingtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* name_;
  ::std::string* duplicatetitlepic_;
  ::google::protobuf::int32 unlocklevel_;
  ::google::protobuf::int32 belongtotype_;
  ::google::protobuf::int32 viptype_;
  ::google::protobuf::int32 dynamiclevel_;
  ::std::string* timesres_;
  ::google::protobuf::int32 grouptimestype_;
  ::google::protobuf::int32 grouptimes_;
  ::google::protobuf::int64 enteritemid_;
  ::google::protobuf::int32 refreshtype_;
  ::google::protobuf::int32 relivetpye_;
  ::std::string* sweepcondition_;
  ::google::protobuf::int32 buyentertimescosttype_;
  ::google::protobuf::int32 buyentertimescost_;
  ::google::protobuf::int32 countdown_;
  ::google::protobuf::int32 pathfindingtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicategroup* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicategroup : public ::google::protobuf::Message {
 public:
  Sheet_duplicategroup();
  virtual ~Sheet_duplicategroup();

  Sheet_duplicategroup(const Sheet_duplicategroup& from);

  inline Sheet_duplicategroup& operator=(const Sheet_duplicategroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicategroup& default_instance();

  void Swap(Sheet_duplicategroup* other);

  // implements Message ----------------------------------------------

  Sheet_duplicategroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicategroup& from);
  void MergeFrom(const Sheet_duplicategroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicategroup duplicategroup_List = 1;
  inline int duplicategroup_list_size() const;
  inline void clear_duplicategroup_list();
  static const int kDuplicategroupListFieldNumber = 1;
  inline const ::proto_ff::duplicategroup& duplicategroup_list(int index) const;
  inline ::proto_ff::duplicategroup* mutable_duplicategroup_list(int index);
  inline ::proto_ff::duplicategroup* add_duplicategroup_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicategroup >&
      duplicategroup_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicategroup >*
      mutable_duplicategroup_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicategroup)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicategroup > duplicategroup_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicategroup* default_instance_;
};
// -------------------------------------------------------------------

class duplicatesweepmonsterNum : public ::google::protobuf::Message {
 public:
  duplicatesweepmonsterNum();
  virtual ~duplicatesweepmonsterNum();

  duplicatesweepmonsterNum(const duplicatesweepmonsterNum& from);

  inline duplicatesweepmonsterNum& operator=(const duplicatesweepmonsterNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicatesweepmonsterNum& default_instance();

  void Swap(duplicatesweepmonsterNum* other);

  // implements Message ----------------------------------------------

  duplicatesweepmonsterNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicatesweepmonsterNum& from);
  void MergeFrom(const duplicatesweepmonsterNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 sweepType = 2;
  inline bool has_sweeptype() const;
  inline void clear_sweeptype();
  static const int kSweepTypeFieldNumber = 2;
  inline ::google::protobuf::int32 sweeptype() const;
  inline void set_sweeptype(::google::protobuf::int32 value);

  // optional int32 minLevel = 3;
  inline bool has_minlevel() const;
  inline void clear_minlevel();
  static const int kMinLevelFieldNumber = 3;
  inline ::google::protobuf::int32 minlevel() const;
  inline void set_minlevel(::google::protobuf::int32 value);

  // optional int32 maxLevel = 4;
  inline bool has_maxlevel() const;
  inline void clear_maxlevel();
  static const int kMaxLevelFieldNumber = 4;
  inline ::google::protobuf::int32 maxlevel() const;
  inline void set_maxlevel(::google::protobuf::int32 value);

  // optional int32 killNumber = 5;
  inline bool has_killnumber() const;
  inline void clear_killnumber();
  static const int kKillNumberFieldNumber = 5;
  inline ::google::protobuf::int32 killnumber() const;
  inline void set_killnumber(::google::protobuf::int32 value);

  // optional int32 monstervaluetype = 6;
  inline bool has_monstervaluetype() const;
  inline void clear_monstervaluetype();
  static const int kMonstervaluetypeFieldNumber = 6;
  inline ::google::protobuf::int32 monstervaluetype() const;
  inline void set_monstervaluetype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicatesweepmonsterNum)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_sweeptype();
  inline void clear_has_sweeptype();
  inline void set_has_minlevel();
  inline void clear_has_minlevel();
  inline void set_has_maxlevel();
  inline void clear_has_maxlevel();
  inline void set_has_killnumber();
  inline void clear_has_killnumber();
  inline void set_has_monstervaluetype();
  inline void clear_has_monstervaluetype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 sweeptype_;
  ::google::protobuf::int32 minlevel_;
  ::google::protobuf::int32 maxlevel_;
  ::google::protobuf::int32 killnumber_;
  ::google::protobuf::int32 monstervaluetype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicatesweepmonsterNum* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicatesweepmonsterNum : public ::google::protobuf::Message {
 public:
  Sheet_duplicatesweepmonsterNum();
  virtual ~Sheet_duplicatesweepmonsterNum();

  Sheet_duplicatesweepmonsterNum(const Sheet_duplicatesweepmonsterNum& from);

  inline Sheet_duplicatesweepmonsterNum& operator=(const Sheet_duplicatesweepmonsterNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicatesweepmonsterNum& default_instance();

  void Swap(Sheet_duplicatesweepmonsterNum* other);

  // implements Message ----------------------------------------------

  Sheet_duplicatesweepmonsterNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicatesweepmonsterNum& from);
  void MergeFrom(const Sheet_duplicatesweepmonsterNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicatesweepmonsterNum duplicatesweepmonsterNum_List = 1;
  inline int duplicatesweepmonsternum_list_size() const;
  inline void clear_duplicatesweepmonsternum_list();
  static const int kDuplicatesweepmonsterNumListFieldNumber = 1;
  inline const ::proto_ff::duplicatesweepmonsterNum& duplicatesweepmonsternum_list(int index) const;
  inline ::proto_ff::duplicatesweepmonsterNum* mutable_duplicatesweepmonsternum_list(int index);
  inline ::proto_ff::duplicatesweepmonsterNum* add_duplicatesweepmonsternum_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatesweepmonsterNum >&
      duplicatesweepmonsternum_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatesweepmonsterNum >*
      mutable_duplicatesweepmonsternum_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicatesweepmonsterNum)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatesweepmonsterNum > duplicatesweepmonsternum_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicatesweepmonsterNum* default_instance_;
};
// -------------------------------------------------------------------

class duplicateGuildbosstime : public ::google::protobuf::Message {
 public:
  duplicateGuildbosstime();
  virtual ~duplicateGuildbosstime();

  duplicateGuildbosstime(const duplicateGuildbosstime& from);

  inline duplicateGuildbosstime& operator=(const duplicateGuildbosstime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicateGuildbosstime& default_instance();

  void Swap(duplicateGuildbosstime* other);

  // implements Message ----------------------------------------------

  duplicateGuildbosstime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicateGuildbosstime& from);
  void MergeFrom(const duplicateGuildbosstime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 duplicateID = 1;
  inline bool has_duplicateid() const;
  inline void clear_duplicateid();
  static const int kDuplicateIDFieldNumber = 1;
  inline ::google::protobuf::int64 duplicateid() const;
  inline void set_duplicateid(::google::protobuf::int64 value);

  // optional int32 openCycle = 2;
  inline bool has_opencycle() const;
  inline void clear_opencycle();
  static const int kOpenCycleFieldNumber = 2;
  inline ::google::protobuf::int32 opencycle() const;
  inline void set_opencycle(::google::protobuf::int32 value);

  // optional string openTime = 3;
  inline bool has_opentime() const;
  inline void clear_opentime();
  static const int kOpenTimeFieldNumber = 3;
  inline const ::std::string& opentime() const;
  inline void set_opentime(const ::std::string& value);
  inline void set_opentime(const char* value);
  inline void set_opentime(const char* value, size_t size);
  inline ::std::string* mutable_opentime();
  inline ::std::string* release_opentime();
  inline void set_allocated_opentime(::std::string* opentime);

  // optional int32 bossGroup = 4;
  inline bool has_bossgroup() const;
  inline void clear_bossgroup();
  static const int kBossGroupFieldNumber = 4;
  inline ::google::protobuf::int32 bossgroup() const;
  inline void set_bossgroup(::google::protobuf::int32 value);

  // optional int32 relevance = 5;
  inline bool has_relevance() const;
  inline void clear_relevance();
  static const int kRelevanceFieldNumber = 5;
  inline ::google::protobuf::int32 relevance() const;
  inline void set_relevance(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicateGuildbosstime)
 private:
  inline void set_has_duplicateid();
  inline void clear_has_duplicateid();
  inline void set_has_opencycle();
  inline void clear_has_opencycle();
  inline void set_has_opentime();
  inline void clear_has_opentime();
  inline void set_has_bossgroup();
  inline void clear_has_bossgroup();
  inline void set_has_relevance();
  inline void clear_has_relevance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 duplicateid_;
  ::std::string* opentime_;
  ::google::protobuf::int32 opencycle_;
  ::google::protobuf::int32 bossgroup_;
  ::google::protobuf::int32 relevance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicateGuildbosstime* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicateGuildbosstime : public ::google::protobuf::Message {
 public:
  Sheet_duplicateGuildbosstime();
  virtual ~Sheet_duplicateGuildbosstime();

  Sheet_duplicateGuildbosstime(const Sheet_duplicateGuildbosstime& from);

  inline Sheet_duplicateGuildbosstime& operator=(const Sheet_duplicateGuildbosstime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicateGuildbosstime& default_instance();

  void Swap(Sheet_duplicateGuildbosstime* other);

  // implements Message ----------------------------------------------

  Sheet_duplicateGuildbosstime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicateGuildbosstime& from);
  void MergeFrom(const Sheet_duplicateGuildbosstime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicateGuildbosstime duplicateGuildbosstime_List = 1;
  inline int duplicateguildbosstime_list_size() const;
  inline void clear_duplicateguildbosstime_list();
  static const int kDuplicateGuildbosstimeListFieldNumber = 1;
  inline const ::proto_ff::duplicateGuildbosstime& duplicateguildbosstime_list(int index) const;
  inline ::proto_ff::duplicateGuildbosstime* mutable_duplicateguildbosstime_list(int index);
  inline ::proto_ff::duplicateGuildbosstime* add_duplicateguildbosstime_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosstime >&
      duplicateguildbosstime_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosstime >*
      mutable_duplicateguildbosstime_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicateGuildbosstime)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosstime > duplicateguildbosstime_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicateGuildbosstime* default_instance_;
};
// -------------------------------------------------------------------

class duplicateGuildbosskillDesc : public ::google::protobuf::Message {
 public:
  duplicateGuildbosskillDesc();
  virtual ~duplicateGuildbosskillDesc();

  duplicateGuildbosskillDesc(const duplicateGuildbosskillDesc& from);

  inline duplicateGuildbosskillDesc& operator=(const duplicateGuildbosskillDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicateGuildbosskillDesc& default_instance();

  void Swap(duplicateGuildbosskillDesc* other);

  // implements Message ----------------------------------------------

  duplicateGuildbosskillDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicateGuildbosskillDesc& from);
  void MergeFrom(const duplicateGuildbosskillDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 small = 1;
  inline bool has_small() const;
  inline void clear_small();
  static const int kSmallFieldNumber = 1;
  inline ::google::protobuf::int32 small() const;
  inline void set_small(::google::protobuf::int32 value);

  // optional int32 large = 2;
  inline bool has_large() const;
  inline void clear_large();
  static const int kLargeFieldNumber = 2;
  inline ::google::protobuf::int32 large() const;
  inline void set_large(::google::protobuf::int32 value);

  // optional int32 weaken = 3;
  inline bool has_weaken() const;
  inline void clear_weaken();
  static const int kWeakenFieldNumber = 3;
  inline ::google::protobuf::int32 weaken() const;
  inline void set_weaken(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicateGuildbosskillDesc)
 private:
  inline void set_has_small();
  inline void clear_has_small();
  inline void set_has_large();
  inline void clear_has_large();
  inline void set_has_weaken();
  inline void clear_has_weaken();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 small_;
  ::google::protobuf::int32 large_;
  ::google::protobuf::int32 weaken_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicateGuildbosskillDesc* default_instance_;
};
// -------------------------------------------------------------------

class duplicateGuildboss : public ::google::protobuf::Message {
 public:
  duplicateGuildboss();
  virtual ~duplicateGuildboss();

  duplicateGuildboss(const duplicateGuildboss& from);

  inline duplicateGuildboss& operator=(const duplicateGuildboss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicateGuildboss& default_instance();

  void Swap(duplicateGuildboss* other);

  // implements Message ----------------------------------------------

  duplicateGuildboss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicateGuildboss& from);
  void MergeFrom(const duplicateGuildboss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 duplicateID = 1;
  inline bool has_duplicateid() const;
  inline void clear_duplicateid();
  static const int kDuplicateIDFieldNumber = 1;
  inline ::google::protobuf::int64 duplicateid() const;
  inline void set_duplicateid(::google::protobuf::int64 value);

  // optional int64 rewardId = 2;
  inline bool has_rewardid() const;
  inline void clear_rewardid();
  static const int kRewardIdFieldNumber = 2;
  inline ::google::protobuf::int64 rewardid() const;
  inline void set_rewardid(::google::protobuf::int64 value);

  // repeated .proto_ff.duplicateGuildbosskillDesc kill = 3;
  inline int kill_size() const;
  inline void clear_kill();
  static const int kKillFieldNumber = 3;
  inline const ::proto_ff::duplicateGuildbosskillDesc& kill(int index) const;
  inline ::proto_ff::duplicateGuildbosskillDesc* mutable_kill(int index);
  inline ::proto_ff::duplicateGuildbosskillDesc* add_kill();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosskillDesc >&
      kill() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosskillDesc >*
      mutable_kill();

  // @@protoc_insertion_point(class_scope:proto_ff.duplicateGuildboss)
 private:
  inline void set_has_duplicateid();
  inline void clear_has_duplicateid();
  inline void set_has_rewardid();
  inline void clear_has_rewardid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 duplicateid_;
  ::google::protobuf::int64 rewardid_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosskillDesc > kill_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicateGuildboss* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicateGuildboss : public ::google::protobuf::Message {
 public:
  Sheet_duplicateGuildboss();
  virtual ~Sheet_duplicateGuildboss();

  Sheet_duplicateGuildboss(const Sheet_duplicateGuildboss& from);

  inline Sheet_duplicateGuildboss& operator=(const Sheet_duplicateGuildboss& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicateGuildboss& default_instance();

  void Swap(Sheet_duplicateGuildboss* other);

  // implements Message ----------------------------------------------

  Sheet_duplicateGuildboss* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicateGuildboss& from);
  void MergeFrom(const Sheet_duplicateGuildboss& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicateGuildboss duplicateGuildboss_List = 1;
  inline int duplicateguildboss_list_size() const;
  inline void clear_duplicateguildboss_list();
  static const int kDuplicateGuildbossListFieldNumber = 1;
  inline const ::proto_ff::duplicateGuildboss& duplicateguildboss_list(int index) const;
  inline ::proto_ff::duplicateGuildboss* mutable_duplicateguildboss_list(int index);
  inline ::proto_ff::duplicateGuildboss* add_duplicateguildboss_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildboss >&
      duplicateguildboss_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildboss >*
      mutable_duplicateguildboss_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicateGuildboss)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildboss > duplicateguildboss_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicateGuildboss* default_instance_;
};
// -------------------------------------------------------------------

class duplicateGuildDuplicate : public ::google::protobuf::Message {
 public:
  duplicateGuildDuplicate();
  virtual ~duplicateGuildDuplicate();

  duplicateGuildDuplicate(const duplicateGuildDuplicate& from);

  inline duplicateGuildDuplicate& operator=(const duplicateGuildDuplicate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duplicateGuildDuplicate& default_instance();

  void Swap(duplicateGuildDuplicate* other);

  // implements Message ----------------------------------------------

  duplicateGuildDuplicate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duplicateGuildDuplicate& from);
  void MergeFrom(const duplicateGuildDuplicate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 level = 1;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 1;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 monsterExp = 2;
  inline bool has_monsterexp() const;
  inline void clear_monsterexp();
  static const int kMonsterExpFieldNumber = 2;
  inline ::google::protobuf::int64 monsterexp() const;
  inline void set_monsterexp(::google::protobuf::int64 value);

  // optional int64 bossExp = 3;
  inline bool has_bossexp() const;
  inline void clear_bossexp();
  static const int kBossExpFieldNumber = 3;
  inline ::google::protobuf::int64 bossexp() const;
  inline void set_bossexp(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duplicateGuildDuplicate)
 private:
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_monsterexp();
  inline void clear_has_monsterexp();
  inline void set_has_bossexp();
  inline void clear_has_bossexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 monsterexp_;
  ::google::protobuf::int64 bossexp_;
  ::google::protobuf::int32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static duplicateGuildDuplicate* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duplicateGuildDuplicate : public ::google::protobuf::Message {
 public:
  Sheet_duplicateGuildDuplicate();
  virtual ~Sheet_duplicateGuildDuplicate();

  Sheet_duplicateGuildDuplicate(const Sheet_duplicateGuildDuplicate& from);

  inline Sheet_duplicateGuildDuplicate& operator=(const Sheet_duplicateGuildDuplicate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duplicateGuildDuplicate& default_instance();

  void Swap(Sheet_duplicateGuildDuplicate* other);

  // implements Message ----------------------------------------------

  Sheet_duplicateGuildDuplicate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duplicateGuildDuplicate& from);
  void MergeFrom(const Sheet_duplicateGuildDuplicate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duplicateGuildDuplicate duplicateGuildDuplicate_List = 1;
  inline int duplicateguildduplicate_list_size() const;
  inline void clear_duplicateguildduplicate_list();
  static const int kDuplicateGuildDuplicateListFieldNumber = 1;
  inline const ::proto_ff::duplicateGuildDuplicate& duplicateguildduplicate_list(int index) const;
  inline ::proto_ff::duplicateGuildDuplicate* mutable_duplicateguildduplicate_list(int index);
  inline ::proto_ff::duplicateGuildDuplicate* add_duplicateguildduplicate_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildDuplicate >&
      duplicateguildduplicate_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildDuplicate >*
      mutable_duplicateguildduplicate_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duplicateGuildDuplicate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildDuplicate > duplicateguildduplicate_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_duplicate_2eproto();
  friend void protobuf_AssignDesc_duplicate_2eproto();
  friend void protobuf_ShutdownFile_duplicate_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duplicateGuildDuplicate* default_instance_;
};
// ===================================================================


// ===================================================================

// duplicateduplicate

// optional int64 duplicateID = 1;
inline bool duplicateduplicate::has_duplicateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicateduplicate::set_has_duplicateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicateduplicate::clear_has_duplicateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicateduplicate::clear_duplicateid() {
  duplicateid_ = GOOGLE_LONGLONG(0);
  clear_has_duplicateid();
}
inline ::google::protobuf::int64 duplicateduplicate::duplicateid() const {
  return duplicateid_;
}
inline void duplicateduplicate::set_duplicateid(::google::protobuf::int64 value) {
  set_has_duplicateid();
  duplicateid_ = value;
}

// optional string duplicateName = 2;
inline bool duplicateduplicate::has_duplicatename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicateduplicate::set_has_duplicatename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicateduplicate::clear_has_duplicatename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicateduplicate::clear_duplicatename() {
  if (duplicatename_ != &::google::protobuf::internal::kEmptyString) {
    duplicatename_->clear();
  }
  clear_has_duplicatename();
}
inline const ::std::string& duplicateduplicate::duplicatename() const {
  return *duplicatename_;
}
inline void duplicateduplicate::set_duplicatename(const ::std::string& value) {
  set_has_duplicatename();
  if (duplicatename_ == &::google::protobuf::internal::kEmptyString) {
    duplicatename_ = new ::std::string;
  }
  duplicatename_->assign(value);
}
inline void duplicateduplicate::set_duplicatename(const char* value) {
  set_has_duplicatename();
  if (duplicatename_ == &::google::protobuf::internal::kEmptyString) {
    duplicatename_ = new ::std::string;
  }
  duplicatename_->assign(value);
}
inline void duplicateduplicate::set_duplicatename(const char* value, size_t size) {
  set_has_duplicatename();
  if (duplicatename_ == &::google::protobuf::internal::kEmptyString) {
    duplicatename_ = new ::std::string;
  }
  duplicatename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateduplicate::mutable_duplicatename() {
  set_has_duplicatename();
  if (duplicatename_ == &::google::protobuf::internal::kEmptyString) {
    duplicatename_ = new ::std::string;
  }
  return duplicatename_;
}
inline ::std::string* duplicateduplicate::release_duplicatename() {
  clear_has_duplicatename();
  if (duplicatename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duplicatename_;
    duplicatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateduplicate::set_allocated_duplicatename(::std::string* duplicatename) {
  if (duplicatename_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicatename_;
  }
  if (duplicatename) {
    set_has_duplicatename();
    duplicatename_ = duplicatename;
  } else {
    clear_has_duplicatename();
    duplicatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string duplicateTitlePic = 3;
inline bool duplicateduplicate::has_duplicatetitlepic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicateduplicate::set_has_duplicatetitlepic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicateduplicate::clear_has_duplicatetitlepic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicateduplicate::clear_duplicatetitlepic() {
  if (duplicatetitlepic_ != &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_->clear();
  }
  clear_has_duplicatetitlepic();
}
inline const ::std::string& duplicateduplicate::duplicatetitlepic() const {
  return *duplicatetitlepic_;
}
inline void duplicateduplicate::set_duplicatetitlepic(const ::std::string& value) {
  set_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_ = new ::std::string;
  }
  duplicatetitlepic_->assign(value);
}
inline void duplicateduplicate::set_duplicatetitlepic(const char* value) {
  set_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_ = new ::std::string;
  }
  duplicatetitlepic_->assign(value);
}
inline void duplicateduplicate::set_duplicatetitlepic(const char* value, size_t size) {
  set_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_ = new ::std::string;
  }
  duplicatetitlepic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateduplicate::mutable_duplicatetitlepic() {
  set_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_ = new ::std::string;
  }
  return duplicatetitlepic_;
}
inline ::std::string* duplicateduplicate::release_duplicatetitlepic() {
  clear_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duplicatetitlepic_;
    duplicatetitlepic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateduplicate::set_allocated_duplicatetitlepic(::std::string* duplicatetitlepic) {
  if (duplicatetitlepic_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicatetitlepic_;
  }
  if (duplicatetitlepic) {
    set_has_duplicatetitlepic();
    duplicatetitlepic_ = duplicatetitlepic;
  } else {
    clear_has_duplicatetitlepic();
    duplicatetitlepic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 groupID = 4;
inline bool duplicateduplicate::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void duplicateduplicate::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void duplicateduplicate::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void duplicateduplicate::clear_groupid() {
  groupid_ = GOOGLE_LONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::int64 duplicateduplicate::groupid() const {
  return groupid_;
}
inline void duplicateduplicate::set_groupid(::google::protobuf::int64 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional int32 duplicateType = 5;
inline bool duplicateduplicate::has_duplicatetype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void duplicateduplicate::set_has_duplicatetype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void duplicateduplicate::clear_has_duplicatetype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void duplicateduplicate::clear_duplicatetype() {
  duplicatetype_ = 0;
  clear_has_duplicatetype();
}
inline ::google::protobuf::int32 duplicateduplicate::duplicatetype() const {
  return duplicatetype_;
}
inline void duplicateduplicate::set_duplicatetype(::google::protobuf::int32 value) {
  set_has_duplicatetype();
  duplicatetype_ = value;
}

// optional int32 playType = 6;
inline bool duplicateduplicate::has_playtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void duplicateduplicate::set_has_playtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void duplicateduplicate::clear_has_playtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void duplicateduplicate::clear_playtype() {
  playtype_ = 0;
  clear_has_playtype();
}
inline ::google::protobuf::int32 duplicateduplicate::playtype() const {
  return playtype_;
}
inline void duplicateduplicate::set_playtype(::google::protobuf::int32 value) {
  set_has_playtype();
  playtype_ = value;
}

// optional int64 sceneResource = 7;
inline bool duplicateduplicate::has_sceneresource() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void duplicateduplicate::set_has_sceneresource() {
  _has_bits_[0] |= 0x00000040u;
}
inline void duplicateduplicate::clear_has_sceneresource() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void duplicateduplicate::clear_sceneresource() {
  sceneresource_ = GOOGLE_LONGLONG(0);
  clear_has_sceneresource();
}
inline ::google::protobuf::int64 duplicateduplicate::sceneresource() const {
  return sceneresource_;
}
inline void duplicateduplicate::set_sceneresource(::google::protobuf::int64 value) {
  set_has_sceneresource();
  sceneresource_ = value;
}

// optional int32 levelLimit = 8;
inline bool duplicateduplicate::has_levellimit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void duplicateduplicate::set_has_levellimit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void duplicateduplicate::clear_has_levellimit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void duplicateduplicate::clear_levellimit() {
  levellimit_ = 0;
  clear_has_levellimit();
}
inline ::google::protobuf::int32 duplicateduplicate::levellimit() const {
  return levellimit_;
}
inline void duplicateduplicate::set_levellimit(::google::protobuf::int32 value) {
  set_has_levellimit();
  levellimit_ = value;
}

// optional int64 linkDuplicateRequest = 9;
inline bool duplicateduplicate::has_linkduplicaterequest() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void duplicateduplicate::set_has_linkduplicaterequest() {
  _has_bits_[0] |= 0x00000100u;
}
inline void duplicateduplicate::clear_has_linkduplicaterequest() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void duplicateduplicate::clear_linkduplicaterequest() {
  linkduplicaterequest_ = GOOGLE_LONGLONG(0);
  clear_has_linkduplicaterequest();
}
inline ::google::protobuf::int64 duplicateduplicate::linkduplicaterequest() const {
  return linkduplicaterequest_;
}
inline void duplicateduplicate::set_linkduplicaterequest(::google::protobuf::int64 value) {
  set_has_linkduplicaterequest();
  linkduplicaterequest_ = value;
}

// optional int32 isAutoFight = 10;
inline bool duplicateduplicate::has_isautofight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void duplicateduplicate::set_has_isautofight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void duplicateduplicate::clear_has_isautofight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void duplicateduplicate::clear_isautofight() {
  isautofight_ = 0;
  clear_has_isautofight();
}
inline ::google::protobuf::int32 duplicateduplicate::isautofight() const {
  return isautofight_;
}
inline void duplicateduplicate::set_isautofight(::google::protobuf::int32 value) {
  set_has_isautofight();
  isautofight_ = value;
}

// optional string duplicateConditionType = 11;
inline bool duplicateduplicate::has_duplicateconditiontype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void duplicateduplicate::set_has_duplicateconditiontype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void duplicateduplicate::clear_has_duplicateconditiontype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void duplicateduplicate::clear_duplicateconditiontype() {
  if (duplicateconditiontype_ != &::google::protobuf::internal::kEmptyString) {
    duplicateconditiontype_->clear();
  }
  clear_has_duplicateconditiontype();
}
inline const ::std::string& duplicateduplicate::duplicateconditiontype() const {
  return *duplicateconditiontype_;
}
inline void duplicateduplicate::set_duplicateconditiontype(const ::std::string& value) {
  set_has_duplicateconditiontype();
  if (duplicateconditiontype_ == &::google::protobuf::internal::kEmptyString) {
    duplicateconditiontype_ = new ::std::string;
  }
  duplicateconditiontype_->assign(value);
}
inline void duplicateduplicate::set_duplicateconditiontype(const char* value) {
  set_has_duplicateconditiontype();
  if (duplicateconditiontype_ == &::google::protobuf::internal::kEmptyString) {
    duplicateconditiontype_ = new ::std::string;
  }
  duplicateconditiontype_->assign(value);
}
inline void duplicateduplicate::set_duplicateconditiontype(const char* value, size_t size) {
  set_has_duplicateconditiontype();
  if (duplicateconditiontype_ == &::google::protobuf::internal::kEmptyString) {
    duplicateconditiontype_ = new ::std::string;
  }
  duplicateconditiontype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateduplicate::mutable_duplicateconditiontype() {
  set_has_duplicateconditiontype();
  if (duplicateconditiontype_ == &::google::protobuf::internal::kEmptyString) {
    duplicateconditiontype_ = new ::std::string;
  }
  return duplicateconditiontype_;
}
inline ::std::string* duplicateduplicate::release_duplicateconditiontype() {
  clear_has_duplicateconditiontype();
  if (duplicateconditiontype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duplicateconditiontype_;
    duplicateconditiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateduplicate::set_allocated_duplicateconditiontype(::std::string* duplicateconditiontype) {
  if (duplicateconditiontype_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicateconditiontype_;
  }
  if (duplicateconditiontype) {
    set_has_duplicateconditiontype();
    duplicateconditiontype_ = duplicateconditiontype;
  } else {
    clear_has_duplicateconditiontype();
    duplicateconditiontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 reviveMaxTimes = 12;
inline bool duplicateduplicate::has_revivemaxtimes() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void duplicateduplicate::set_has_revivemaxtimes() {
  _has_bits_[0] |= 0x00000800u;
}
inline void duplicateduplicate::clear_has_revivemaxtimes() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void duplicateduplicate::clear_revivemaxtimes() {
  revivemaxtimes_ = 0;
  clear_has_revivemaxtimes();
}
inline ::google::protobuf::int32 duplicateduplicate::revivemaxtimes() const {
  return revivemaxtimes_;
}
inline void duplicateduplicate::set_revivemaxtimes(::google::protobuf::int32 value) {
  set_has_revivemaxtimes();
  revivemaxtimes_ = value;
}

// optional int64 dropNormalMonster = 13;
inline bool duplicateduplicate::has_dropnormalmonster() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void duplicateduplicate::set_has_dropnormalmonster() {
  _has_bits_[0] |= 0x00001000u;
}
inline void duplicateduplicate::clear_has_dropnormalmonster() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void duplicateduplicate::clear_dropnormalmonster() {
  dropnormalmonster_ = GOOGLE_LONGLONG(0);
  clear_has_dropnormalmonster();
}
inline ::google::protobuf::int64 duplicateduplicate::dropnormalmonster() const {
  return dropnormalmonster_;
}
inline void duplicateduplicate::set_dropnormalmonster(::google::protobuf::int64 value) {
  set_has_dropnormalmonster();
  dropnormalmonster_ = value;
}

// optional int64 dropEliteMonster = 14;
inline bool duplicateduplicate::has_dropelitemonster() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void duplicateduplicate::set_has_dropelitemonster() {
  _has_bits_[0] |= 0x00002000u;
}
inline void duplicateduplicate::clear_has_dropelitemonster() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void duplicateduplicate::clear_dropelitemonster() {
  dropelitemonster_ = GOOGLE_LONGLONG(0);
  clear_has_dropelitemonster();
}
inline ::google::protobuf::int64 duplicateduplicate::dropelitemonster() const {
  return dropelitemonster_;
}
inline void duplicateduplicate::set_dropelitemonster(::google::protobuf::int64 value) {
  set_has_dropelitemonster();
  dropelitemonster_ = value;
}

// optional int64 dropBossMonster = 15;
inline bool duplicateduplicate::has_dropbossmonster() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void duplicateduplicate::set_has_dropbossmonster() {
  _has_bits_[0] |= 0x00004000u;
}
inline void duplicateduplicate::clear_has_dropbossmonster() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void duplicateduplicate::clear_dropbossmonster() {
  dropbossmonster_ = GOOGLE_LONGLONG(0);
  clear_has_dropbossmonster();
}
inline ::google::protobuf::int64 duplicateduplicate::dropbossmonster() const {
  return dropbossmonster_;
}
inline void duplicateduplicate::set_dropbossmonster(::google::protobuf::int64 value) {
  set_has_dropbossmonster();
  dropbossmonster_ = value;
}

// optional string sceneAIScript = 16;
inline bool duplicateduplicate::has_sceneaiscript() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void duplicateduplicate::set_has_sceneaiscript() {
  _has_bits_[0] |= 0x00008000u;
}
inline void duplicateduplicate::clear_has_sceneaiscript() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void duplicateduplicate::clear_sceneaiscript() {
  if (sceneaiscript_ != &::google::protobuf::internal::kEmptyString) {
    sceneaiscript_->clear();
  }
  clear_has_sceneaiscript();
}
inline const ::std::string& duplicateduplicate::sceneaiscript() const {
  return *sceneaiscript_;
}
inline void duplicateduplicate::set_sceneaiscript(const ::std::string& value) {
  set_has_sceneaiscript();
  if (sceneaiscript_ == &::google::protobuf::internal::kEmptyString) {
    sceneaiscript_ = new ::std::string;
  }
  sceneaiscript_->assign(value);
}
inline void duplicateduplicate::set_sceneaiscript(const char* value) {
  set_has_sceneaiscript();
  if (sceneaiscript_ == &::google::protobuf::internal::kEmptyString) {
    sceneaiscript_ = new ::std::string;
  }
  sceneaiscript_->assign(value);
}
inline void duplicateduplicate::set_sceneaiscript(const char* value, size_t size) {
  set_has_sceneaiscript();
  if (sceneaiscript_ == &::google::protobuf::internal::kEmptyString) {
    sceneaiscript_ = new ::std::string;
  }
  sceneaiscript_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateduplicate::mutable_sceneaiscript() {
  set_has_sceneaiscript();
  if (sceneaiscript_ == &::google::protobuf::internal::kEmptyString) {
    sceneaiscript_ = new ::std::string;
  }
  return sceneaiscript_;
}
inline ::std::string* duplicateduplicate::release_sceneaiscript() {
  clear_has_sceneaiscript();
  if (sceneaiscript_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sceneaiscript_;
    sceneaiscript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateduplicate::set_allocated_sceneaiscript(::std::string* sceneaiscript) {
  if (sceneaiscript_ != &::google::protobuf::internal::kEmptyString) {
    delete sceneaiscript_;
  }
  if (sceneaiscript) {
    set_has_sceneaiscript();
    sceneaiscript_ = sceneaiscript;
  } else {
    clear_has_sceneaiscript();
    sceneaiscript_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bossDesc = 17;
inline bool duplicateduplicate::has_bossdesc() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void duplicateduplicate::set_has_bossdesc() {
  _has_bits_[0] |= 0x00010000u;
}
inline void duplicateduplicate::clear_has_bossdesc() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void duplicateduplicate::clear_bossdesc() {
  if (bossdesc_ != &::google::protobuf::internal::kEmptyString) {
    bossdesc_->clear();
  }
  clear_has_bossdesc();
}
inline const ::std::string& duplicateduplicate::bossdesc() const {
  return *bossdesc_;
}
inline void duplicateduplicate::set_bossdesc(const ::std::string& value) {
  set_has_bossdesc();
  if (bossdesc_ == &::google::protobuf::internal::kEmptyString) {
    bossdesc_ = new ::std::string;
  }
  bossdesc_->assign(value);
}
inline void duplicateduplicate::set_bossdesc(const char* value) {
  set_has_bossdesc();
  if (bossdesc_ == &::google::protobuf::internal::kEmptyString) {
    bossdesc_ = new ::std::string;
  }
  bossdesc_->assign(value);
}
inline void duplicateduplicate::set_bossdesc(const char* value, size_t size) {
  set_has_bossdesc();
  if (bossdesc_ == &::google::protobuf::internal::kEmptyString) {
    bossdesc_ = new ::std::string;
  }
  bossdesc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateduplicate::mutable_bossdesc() {
  set_has_bossdesc();
  if (bossdesc_ == &::google::protobuf::internal::kEmptyString) {
    bossdesc_ = new ::std::string;
  }
  return bossdesc_;
}
inline ::std::string* duplicateduplicate::release_bossdesc() {
  clear_has_bossdesc();
  if (bossdesc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bossdesc_;
    bossdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateduplicate::set_allocated_bossdesc(::std::string* bossdesc) {
  if (bossdesc_ != &::google::protobuf::internal::kEmptyString) {
    delete bossdesc_;
  }
  if (bossdesc) {
    set_has_bossdesc();
    bossdesc_ = bossdesc;
  } else {
    clear_has_bossdesc();
    bossdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 TeamObjectID = 18;
inline bool duplicateduplicate::has_teamobjectid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void duplicateduplicate::set_has_teamobjectid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void duplicateduplicate::clear_has_teamobjectid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void duplicateduplicate::clear_teamobjectid() {
  teamobjectid_ = 0;
  clear_has_teamobjectid();
}
inline ::google::protobuf::int32 duplicateduplicate::teamobjectid() const {
  return teamobjectid_;
}
inline void duplicateduplicate::set_teamobjectid(::google::protobuf::int32 value) {
  set_has_teamobjectid();
  teamobjectid_ = value;
}

// optional string gradeCondition = 19;
inline bool duplicateduplicate::has_gradecondition() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void duplicateduplicate::set_has_gradecondition() {
  _has_bits_[0] |= 0x00040000u;
}
inline void duplicateduplicate::clear_has_gradecondition() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void duplicateduplicate::clear_gradecondition() {
  if (gradecondition_ != &::google::protobuf::internal::kEmptyString) {
    gradecondition_->clear();
  }
  clear_has_gradecondition();
}
inline const ::std::string& duplicateduplicate::gradecondition() const {
  return *gradecondition_;
}
inline void duplicateduplicate::set_gradecondition(const ::std::string& value) {
  set_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    gradecondition_ = new ::std::string;
  }
  gradecondition_->assign(value);
}
inline void duplicateduplicate::set_gradecondition(const char* value) {
  set_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    gradecondition_ = new ::std::string;
  }
  gradecondition_->assign(value);
}
inline void duplicateduplicate::set_gradecondition(const char* value, size_t size) {
  set_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    gradecondition_ = new ::std::string;
  }
  gradecondition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateduplicate::mutable_gradecondition() {
  set_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    gradecondition_ = new ::std::string;
  }
  return gradecondition_;
}
inline ::std::string* duplicateduplicate::release_gradecondition() {
  clear_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gradecondition_;
    gradecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateduplicate::set_allocated_gradecondition(::std::string* gradecondition) {
  if (gradecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete gradecondition_;
  }
  if (gradecondition) {
    set_has_gradecondition();
    gradecondition_ = gradecondition;
  } else {
    clear_has_gradecondition();
    gradecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 sweepRewardBoxID = 20;
inline bool duplicateduplicate::has_sweeprewardboxid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void duplicateduplicate::set_has_sweeprewardboxid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void duplicateduplicate::clear_has_sweeprewardboxid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void duplicateduplicate::clear_sweeprewardboxid() {
  sweeprewardboxid_ = GOOGLE_LONGLONG(0);
  clear_has_sweeprewardboxid();
}
inline ::google::protobuf::int64 duplicateduplicate::sweeprewardboxid() const {
  return sweeprewardboxid_;
}
inline void duplicateduplicate::set_sweeprewardboxid(::google::protobuf::int64 value) {
  set_has_sweeprewardboxid();
  sweeprewardboxid_ = value;
}

// optional int32 sweepRewardExp = 21;
inline bool duplicateduplicate::has_sweeprewardexp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void duplicateduplicate::set_has_sweeprewardexp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void duplicateduplicate::clear_has_sweeprewardexp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void duplicateduplicate::clear_sweeprewardexp() {
  sweeprewardexp_ = 0;
  clear_has_sweeprewardexp();
}
inline ::google::protobuf::int32 duplicateduplicate::sweeprewardexp() const {
  return sweeprewardexp_;
}
inline void duplicateduplicate::set_sweeprewardexp(::google::protobuf::int32 value) {
  set_has_sweeprewardexp();
  sweeprewardexp_ = value;
}

// optional string trackpath = 22;
inline bool duplicateduplicate::has_trackpath() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void duplicateduplicate::set_has_trackpath() {
  _has_bits_[0] |= 0x00200000u;
}
inline void duplicateduplicate::clear_has_trackpath() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void duplicateduplicate::clear_trackpath() {
  if (trackpath_ != &::google::protobuf::internal::kEmptyString) {
    trackpath_->clear();
  }
  clear_has_trackpath();
}
inline const ::std::string& duplicateduplicate::trackpath() const {
  return *trackpath_;
}
inline void duplicateduplicate::set_trackpath(const ::std::string& value) {
  set_has_trackpath();
  if (trackpath_ == &::google::protobuf::internal::kEmptyString) {
    trackpath_ = new ::std::string;
  }
  trackpath_->assign(value);
}
inline void duplicateduplicate::set_trackpath(const char* value) {
  set_has_trackpath();
  if (trackpath_ == &::google::protobuf::internal::kEmptyString) {
    trackpath_ = new ::std::string;
  }
  trackpath_->assign(value);
}
inline void duplicateduplicate::set_trackpath(const char* value, size_t size) {
  set_has_trackpath();
  if (trackpath_ == &::google::protobuf::internal::kEmptyString) {
    trackpath_ = new ::std::string;
  }
  trackpath_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateduplicate::mutable_trackpath() {
  set_has_trackpath();
  if (trackpath_ == &::google::protobuf::internal::kEmptyString) {
    trackpath_ = new ::std::string;
  }
  return trackpath_;
}
inline ::std::string* duplicateduplicate::release_trackpath() {
  clear_has_trackpath();
  if (trackpath_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trackpath_;
    trackpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateduplicate::set_allocated_trackpath(::std::string* trackpath) {
  if (trackpath_ != &::google::protobuf::internal::kEmptyString) {
    delete trackpath_;
  }
  if (trackpath) {
    set_has_trackpath();
    trackpath_ = trackpath;
  } else {
    clear_has_trackpath();
    trackpath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pathOfmonster = 23;
inline bool duplicateduplicate::has_pathofmonster() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void duplicateduplicate::set_has_pathofmonster() {
  _has_bits_[0] |= 0x00400000u;
}
inline void duplicateduplicate::clear_has_pathofmonster() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void duplicateduplicate::clear_pathofmonster() {
  if (pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
    pathofmonster_->clear();
  }
  clear_has_pathofmonster();
}
inline const ::std::string& duplicateduplicate::pathofmonster() const {
  return *pathofmonster_;
}
inline void duplicateduplicate::set_pathofmonster(const ::std::string& value) {
  set_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    pathofmonster_ = new ::std::string;
  }
  pathofmonster_->assign(value);
}
inline void duplicateduplicate::set_pathofmonster(const char* value) {
  set_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    pathofmonster_ = new ::std::string;
  }
  pathofmonster_->assign(value);
}
inline void duplicateduplicate::set_pathofmonster(const char* value, size_t size) {
  set_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    pathofmonster_ = new ::std::string;
  }
  pathofmonster_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateduplicate::mutable_pathofmonster() {
  set_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    pathofmonster_ = new ::std::string;
  }
  return pathofmonster_;
}
inline ::std::string* duplicateduplicate::release_pathofmonster() {
  clear_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pathofmonster_;
    pathofmonster_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateduplicate::set_allocated_pathofmonster(::std::string* pathofmonster) {
  if (pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
    delete pathofmonster_;
  }
  if (pathofmonster) {
    set_has_pathofmonster();
    pathofmonster_ = pathofmonster;
  } else {
    clear_has_pathofmonster();
    pathofmonster_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isPatrol = 24;
inline bool duplicateduplicate::has_ispatrol() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void duplicateduplicate::set_has_ispatrol() {
  _has_bits_[0] |= 0x00800000u;
}
inline void duplicateduplicate::clear_has_ispatrol() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void duplicateduplicate::clear_ispatrol() {
  ispatrol_ = 0;
  clear_has_ispatrol();
}
inline ::google::protobuf::int32 duplicateduplicate::ispatrol() const {
  return ispatrol_;
}
inline void duplicateduplicate::set_ispatrol(::google::protobuf::int32 value) {
  set_has_ispatrol();
  ispatrol_ = value;
}

// optional int32 sweepType = 25;
inline bool duplicateduplicate::has_sweeptype() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void duplicateduplicate::set_has_sweeptype() {
  _has_bits_[0] |= 0x01000000u;
}
inline void duplicateduplicate::clear_has_sweeptype() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void duplicateduplicate::clear_sweeptype() {
  sweeptype_ = 0;
  clear_has_sweeptype();
}
inline ::google::protobuf::int32 duplicateduplicate::sweeptype() const {
  return sweeptype_;
}
inline void duplicateduplicate::set_sweeptype(::google::protobuf::int32 value) {
  set_has_sweeptype();
  sweeptype_ = value;
}

// -------------------------------------------------------------------

// Sheet_duplicateduplicate

// repeated .proto_ff.duplicateduplicate duplicateduplicate_List = 1;
inline int Sheet_duplicateduplicate::duplicateduplicate_list_size() const {
  return duplicateduplicate_list_.size();
}
inline void Sheet_duplicateduplicate::clear_duplicateduplicate_list() {
  duplicateduplicate_list_.Clear();
}
inline const ::proto_ff::duplicateduplicate& Sheet_duplicateduplicate::duplicateduplicate_list(int index) const {
  return duplicateduplicate_list_.Get(index);
}
inline ::proto_ff::duplicateduplicate* Sheet_duplicateduplicate::mutable_duplicateduplicate_list(int index) {
  return duplicateduplicate_list_.Mutable(index);
}
inline ::proto_ff::duplicateduplicate* Sheet_duplicateduplicate::add_duplicateduplicate_list() {
  return duplicateduplicate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateduplicate >&
Sheet_duplicateduplicate::duplicateduplicate_list() const {
  return duplicateduplicate_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateduplicate >*
Sheet_duplicateduplicate::mutable_duplicateduplicate_list() {
  return &duplicateduplicate_list_;
}

// -------------------------------------------------------------------

// duplicateconstant

// optional int64 constantid = 1;
inline bool duplicateconstant::has_constantid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicateconstant::set_has_constantid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicateconstant::clear_has_constantid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicateconstant::clear_constantid() {
  constantid_ = GOOGLE_LONGLONG(0);
  clear_has_constantid();
}
inline ::google::protobuf::int64 duplicateconstant::constantid() const {
  return constantid_;
}
inline void duplicateconstant::set_constantid(::google::protobuf::int64 value) {
  set_has_constantid();
  constantid_ = value;
}

// optional int64 constantdata = 2;
inline bool duplicateconstant::has_constantdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicateconstant::set_has_constantdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicateconstant::clear_has_constantdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicateconstant::clear_constantdata() {
  constantdata_ = GOOGLE_LONGLONG(0);
  clear_has_constantdata();
}
inline ::google::protobuf::int64 duplicateconstant::constantdata() const {
  return constantdata_;
}
inline void duplicateconstant::set_constantdata(::google::protobuf::int64 value) {
  set_has_constantdata();
  constantdata_ = value;
}

// optional string stringdata = 3;
inline bool duplicateconstant::has_stringdata() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicateconstant::set_has_stringdata() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicateconstant::clear_has_stringdata() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicateconstant::clear_stringdata() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    stringdata_->clear();
  }
  clear_has_stringdata();
}
inline const ::std::string& duplicateconstant::stringdata() const {
  return *stringdata_;
}
inline void duplicateconstant::set_stringdata(const ::std::string& value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void duplicateconstant::set_stringdata(const char* value) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(value);
}
inline void duplicateconstant::set_stringdata(const char* value, size_t size) {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  stringdata_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateconstant::mutable_stringdata() {
  set_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    stringdata_ = new ::std::string;
  }
  return stringdata_;
}
inline ::std::string* duplicateconstant::release_stringdata() {
  clear_has_stringdata();
  if (stringdata_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = stringdata_;
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateconstant::set_allocated_stringdata(::std::string* stringdata) {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (stringdata) {
    set_has_stringdata();
    stringdata_ = stringdata;
  } else {
    clear_has_stringdata();
    stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sheet_duplicateconstant

// repeated .proto_ff.duplicateconstant duplicateconstant_List = 1;
inline int Sheet_duplicateconstant::duplicateconstant_list_size() const {
  return duplicateconstant_list_.size();
}
inline void Sheet_duplicateconstant::clear_duplicateconstant_list() {
  duplicateconstant_list_.Clear();
}
inline const ::proto_ff::duplicateconstant& Sheet_duplicateconstant::duplicateconstant_list(int index) const {
  return duplicateconstant_list_.Get(index);
}
inline ::proto_ff::duplicateconstant* Sheet_duplicateconstant::mutable_duplicateconstant_list(int index) {
  return duplicateconstant_list_.Mutable(index);
}
inline ::proto_ff::duplicateconstant* Sheet_duplicateconstant::add_duplicateconstant_list() {
  return duplicateconstant_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateconstant >&
Sheet_duplicateconstant::duplicateconstant_list() const {
  return duplicateconstant_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateconstant >*
Sheet_duplicateconstant::mutable_duplicateconstant_list() {
  return &duplicateconstant_list_;
}

// -------------------------------------------------------------------

// duplicateendlessMaze

// optional int32 id = 1;
inline bool duplicateendlessMaze::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicateendlessMaze::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicateendlessMaze::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicateendlessMaze::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 duplicateendlessMaze::id() const {
  return id_;
}
inline void duplicateendlessMaze::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 level = 2;
inline bool duplicateendlessMaze::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicateendlessMaze::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicateendlessMaze::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicateendlessMaze::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 duplicateendlessMaze::level() const {
  return level_;
}
inline void duplicateendlessMaze::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional string duplicateID = 3;
inline bool duplicateendlessMaze::has_duplicateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicateendlessMaze::set_has_duplicateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicateendlessMaze::clear_has_duplicateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicateendlessMaze::clear_duplicateid() {
  if (duplicateid_ != &::google::protobuf::internal::kEmptyString) {
    duplicateid_->clear();
  }
  clear_has_duplicateid();
}
inline const ::std::string& duplicateendlessMaze::duplicateid() const {
  return *duplicateid_;
}
inline void duplicateendlessMaze::set_duplicateid(const ::std::string& value) {
  set_has_duplicateid();
  if (duplicateid_ == &::google::protobuf::internal::kEmptyString) {
    duplicateid_ = new ::std::string;
  }
  duplicateid_->assign(value);
}
inline void duplicateendlessMaze::set_duplicateid(const char* value) {
  set_has_duplicateid();
  if (duplicateid_ == &::google::protobuf::internal::kEmptyString) {
    duplicateid_ = new ::std::string;
  }
  duplicateid_->assign(value);
}
inline void duplicateendlessMaze::set_duplicateid(const char* value, size_t size) {
  set_has_duplicateid();
  if (duplicateid_ == &::google::protobuf::internal::kEmptyString) {
    duplicateid_ = new ::std::string;
  }
  duplicateid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateendlessMaze::mutable_duplicateid() {
  set_has_duplicateid();
  if (duplicateid_ == &::google::protobuf::internal::kEmptyString) {
    duplicateid_ = new ::std::string;
  }
  return duplicateid_;
}
inline ::std::string* duplicateendlessMaze::release_duplicateid() {
  clear_has_duplicateid();
  if (duplicateid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duplicateid_;
    duplicateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateendlessMaze::set_allocated_duplicateid(::std::string* duplicateid) {
  if (duplicateid_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicateid_;
  }
  if (duplicateid) {
    set_has_duplicateid();
    duplicateid_ = duplicateid;
  } else {
    clear_has_duplicateid();
    duplicateid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 CreateRate = 4;
inline bool duplicateendlessMaze::has_createrate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void duplicateendlessMaze::set_has_createrate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void duplicateendlessMaze::clear_has_createrate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void duplicateendlessMaze::clear_createrate() {
  createrate_ = 0;
  clear_has_createrate();
}
inline ::google::protobuf::int32 duplicateendlessMaze::createrate() const {
  return createrate_;
}
inline void duplicateendlessMaze::set_createrate(::google::protobuf::int32 value) {
  set_has_createrate();
  createrate_ = value;
}

// optional int64 rewardID = 5;
inline bool duplicateendlessMaze::has_rewardid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void duplicateendlessMaze::set_has_rewardid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void duplicateendlessMaze::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void duplicateendlessMaze::clear_rewardid() {
  rewardid_ = GOOGLE_LONGLONG(0);
  clear_has_rewardid();
}
inline ::google::protobuf::int64 duplicateendlessMaze::rewardid() const {
  return rewardid_;
}
inline void duplicateendlessMaze::set_rewardid(::google::protobuf::int64 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// -------------------------------------------------------------------

// Sheet_duplicateendlessMaze

// repeated .proto_ff.duplicateendlessMaze duplicateendlessMaze_List = 1;
inline int Sheet_duplicateendlessMaze::duplicateendlessmaze_list_size() const {
  return duplicateendlessmaze_list_.size();
}
inline void Sheet_duplicateendlessMaze::clear_duplicateendlessmaze_list() {
  duplicateendlessmaze_list_.Clear();
}
inline const ::proto_ff::duplicateendlessMaze& Sheet_duplicateendlessMaze::duplicateendlessmaze_list(int index) const {
  return duplicateendlessmaze_list_.Get(index);
}
inline ::proto_ff::duplicateendlessMaze* Sheet_duplicateendlessMaze::mutable_duplicateendlessmaze_list(int index) {
  return duplicateendlessmaze_list_.Mutable(index);
}
inline ::proto_ff::duplicateendlessMaze* Sheet_duplicateendlessMaze::add_duplicateendlessmaze_list() {
  return duplicateendlessmaze_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateendlessMaze >&
Sheet_duplicateendlessMaze::duplicateendlessmaze_list() const {
  return duplicateendlessmaze_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateendlessMaze >*
Sheet_duplicateendlessMaze::mutable_duplicateendlessmaze_list() {
  return &duplicateendlessmaze_list_;
}

// -------------------------------------------------------------------

// duplicatetowerReward

// optional int64 floorMin = 1;
inline bool duplicatetowerReward::has_floormin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicatetowerReward::set_has_floormin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicatetowerReward::clear_has_floormin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicatetowerReward::clear_floormin() {
  floormin_ = GOOGLE_LONGLONG(0);
  clear_has_floormin();
}
inline ::google::protobuf::int64 duplicatetowerReward::floormin() const {
  return floormin_;
}
inline void duplicatetowerReward::set_floormin(::google::protobuf::int64 value) {
  set_has_floormin();
  floormin_ = value;
}

// optional int64 floormax = 2;
inline bool duplicatetowerReward::has_floormax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicatetowerReward::set_has_floormax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicatetowerReward::clear_has_floormax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicatetowerReward::clear_floormax() {
  floormax_ = GOOGLE_LONGLONG(0);
  clear_has_floormax();
}
inline ::google::protobuf::int64 duplicatetowerReward::floormax() const {
  return floormax_;
}
inline void duplicatetowerReward::set_floormax(::google::protobuf::int64 value) {
  set_has_floormax();
  floormax_ = value;
}

// optional int64 BOXID = 3;
inline bool duplicatetowerReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicatetowerReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicatetowerReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicatetowerReward::clear_boxid() {
  boxid_ = GOOGLE_LONGLONG(0);
  clear_has_boxid();
}
inline ::google::protobuf::int64 duplicatetowerReward::boxid() const {
  return boxid_;
}
inline void duplicatetowerReward::set_boxid(::google::protobuf::int64 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional int64 itemId = 4;
inline bool duplicatetowerReward::has_itemid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void duplicatetowerReward::set_has_itemid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void duplicatetowerReward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void duplicatetowerReward::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 duplicatetowerReward::itemid() const {
  return itemid_;
}
inline void duplicatetowerReward::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 itemNum = 5;
inline bool duplicatetowerReward::has_itemnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void duplicatetowerReward::set_has_itemnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void duplicatetowerReward::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void duplicatetowerReward::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 duplicatetowerReward::itemnum() const {
  return itemnum_;
}
inline void duplicatetowerReward::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// -------------------------------------------------------------------

// Sheet_duplicatetowerReward

// repeated .proto_ff.duplicatetowerReward duplicatetowerReward_List = 1;
inline int Sheet_duplicatetowerReward::duplicatetowerreward_list_size() const {
  return duplicatetowerreward_list_.size();
}
inline void Sheet_duplicatetowerReward::clear_duplicatetowerreward_list() {
  duplicatetowerreward_list_.Clear();
}
inline const ::proto_ff::duplicatetowerReward& Sheet_duplicatetowerReward::duplicatetowerreward_list(int index) const {
  return duplicatetowerreward_list_.Get(index);
}
inline ::proto_ff::duplicatetowerReward* Sheet_duplicatetowerReward::mutable_duplicatetowerreward_list(int index) {
  return duplicatetowerreward_list_.Mutable(index);
}
inline ::proto_ff::duplicatetowerReward* Sheet_duplicatetowerReward::add_duplicatetowerreward_list() {
  return duplicatetowerreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatetowerReward >&
Sheet_duplicatetowerReward::duplicatetowerreward_list() const {
  return duplicatetowerreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatetowerReward >*
Sheet_duplicatetowerReward::mutable_duplicatetowerreward_list() {
  return &duplicatetowerreward_list_;
}

// -------------------------------------------------------------------

// duplicatedungeonRewardrewardDesc

// optional int32 ItemNum = 1;
inline bool duplicatedungeonRewardrewardDesc::has_itemnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicatedungeonRewardrewardDesc::set_has_itemnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicatedungeonRewardrewardDesc::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicatedungeonRewardrewardDesc::clear_itemnum() {
  itemnum_ = 0;
  clear_has_itemnum();
}
inline ::google::protobuf::int32 duplicatedungeonRewardrewardDesc::itemnum() const {
  return itemnum_;
}
inline void duplicatedungeonRewardrewardDesc::set_itemnum(::google::protobuf::int32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional int64 Item = 2;
inline bool duplicatedungeonRewardrewardDesc::has_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicatedungeonRewardrewardDesc::set_has_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicatedungeonRewardrewardDesc::clear_has_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicatedungeonRewardrewardDesc::clear_item() {
  item_ = GOOGLE_LONGLONG(0);
  clear_has_item();
}
inline ::google::protobuf::int64 duplicatedungeonRewardrewardDesc::item() const {
  return item_;
}
inline void duplicatedungeonRewardrewardDesc::set_item(::google::protobuf::int64 value) {
  set_has_item();
  item_ = value;
}

// optional int32 Num = 3;
inline bool duplicatedungeonRewardrewardDesc::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicatedungeonRewardrewardDesc::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicatedungeonRewardrewardDesc::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicatedungeonRewardrewardDesc::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 duplicatedungeonRewardrewardDesc::num() const {
  return num_;
}
inline void duplicatedungeonRewardrewardDesc::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// duplicatedungeonReward

// optional int32 levelID = 1;
inline bool duplicatedungeonReward::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicatedungeonReward::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicatedungeonReward::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicatedungeonReward::clear_levelid() {
  levelid_ = 0;
  clear_has_levelid();
}
inline ::google::protobuf::int32 duplicatedungeonReward::levelid() const {
  return levelid_;
}
inline void duplicatedungeonReward::set_levelid(::google::protobuf::int32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional int32 rewardTime = 2;
inline bool duplicatedungeonReward::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicatedungeonReward::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicatedungeonReward::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicatedungeonReward::clear_rewardtime() {
  rewardtime_ = 0;
  clear_has_rewardtime();
}
inline ::google::protobuf::int32 duplicatedungeonReward::rewardtime() const {
  return rewardtime_;
}
inline void duplicatedungeonReward::set_rewardtime(::google::protobuf::int32 value) {
  set_has_rewardtime();
  rewardtime_ = value;
}

// optional int32 passReceiveTime = 3;
inline bool duplicatedungeonReward::has_passreceivetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicatedungeonReward::set_has_passreceivetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicatedungeonReward::clear_has_passreceivetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicatedungeonReward::clear_passreceivetime() {
  passreceivetime_ = 0;
  clear_has_passreceivetime();
}
inline ::google::protobuf::int32 duplicatedungeonReward::passreceivetime() const {
  return passreceivetime_;
}
inline void duplicatedungeonReward::set_passreceivetime(::google::protobuf::int32 value) {
  set_has_passreceivetime();
  passreceivetime_ = value;
}

// repeated .proto_ff.duplicatedungeonRewardrewardDesc reward = 4;
inline int duplicatedungeonReward::reward_size() const {
  return reward_.size();
}
inline void duplicatedungeonReward::clear_reward() {
  reward_.Clear();
}
inline const ::proto_ff::duplicatedungeonRewardrewardDesc& duplicatedungeonReward::reward(int index) const {
  return reward_.Get(index);
}
inline ::proto_ff::duplicatedungeonRewardrewardDesc* duplicatedungeonReward::mutable_reward(int index) {
  return reward_.Mutable(index);
}
inline ::proto_ff::duplicatedungeonRewardrewardDesc* duplicatedungeonReward::add_reward() {
  return reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonRewardrewardDesc >&
duplicatedungeonReward::reward() const {
  return reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonRewardrewardDesc >*
duplicatedungeonReward::mutable_reward() {
  return &reward_;
}

// -------------------------------------------------------------------

// Sheet_duplicatedungeonReward

// repeated .proto_ff.duplicatedungeonReward duplicatedungeonReward_List = 1;
inline int Sheet_duplicatedungeonReward::duplicatedungeonreward_list_size() const {
  return duplicatedungeonreward_list_.size();
}
inline void Sheet_duplicatedungeonReward::clear_duplicatedungeonreward_list() {
  duplicatedungeonreward_list_.Clear();
}
inline const ::proto_ff::duplicatedungeonReward& Sheet_duplicatedungeonReward::duplicatedungeonreward_list(int index) const {
  return duplicatedungeonreward_list_.Get(index);
}
inline ::proto_ff::duplicatedungeonReward* Sheet_duplicatedungeonReward::mutable_duplicatedungeonreward_list(int index) {
  return duplicatedungeonreward_list_.Mutable(index);
}
inline ::proto_ff::duplicatedungeonReward* Sheet_duplicatedungeonReward::add_duplicatedungeonreward_list() {
  return duplicatedungeonreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonReward >&
Sheet_duplicatedungeonReward::duplicatedungeonreward_list() const {
  return duplicatedungeonreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatedungeonReward >*
Sheet_duplicatedungeonReward::mutable_duplicatedungeonreward_list() {
  return &duplicatedungeonreward_list_;
}

// -------------------------------------------------------------------

// duplicategroup

// optional int64 id = 1;
inline bool duplicategroup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicategroup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicategroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicategroup::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 duplicategroup::id() const {
  return id_;
}
inline void duplicategroup::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool duplicategroup::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicategroup::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicategroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicategroup::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& duplicategroup::name() const {
  return *name_;
}
inline void duplicategroup::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void duplicategroup::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void duplicategroup::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicategroup::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* duplicategroup::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicategroup::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string duplicateTitlePic = 3;
inline bool duplicategroup::has_duplicatetitlepic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicategroup::set_has_duplicatetitlepic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicategroup::clear_has_duplicatetitlepic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicategroup::clear_duplicatetitlepic() {
  if (duplicatetitlepic_ != &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_->clear();
  }
  clear_has_duplicatetitlepic();
}
inline const ::std::string& duplicategroup::duplicatetitlepic() const {
  return *duplicatetitlepic_;
}
inline void duplicategroup::set_duplicatetitlepic(const ::std::string& value) {
  set_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_ = new ::std::string;
  }
  duplicatetitlepic_->assign(value);
}
inline void duplicategroup::set_duplicatetitlepic(const char* value) {
  set_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_ = new ::std::string;
  }
  duplicatetitlepic_->assign(value);
}
inline void duplicategroup::set_duplicatetitlepic(const char* value, size_t size) {
  set_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_ = new ::std::string;
  }
  duplicatetitlepic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicategroup::mutable_duplicatetitlepic() {
  set_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    duplicatetitlepic_ = new ::std::string;
  }
  return duplicatetitlepic_;
}
inline ::std::string* duplicategroup::release_duplicatetitlepic() {
  clear_has_duplicatetitlepic();
  if (duplicatetitlepic_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = duplicatetitlepic_;
    duplicatetitlepic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicategroup::set_allocated_duplicatetitlepic(::std::string* duplicatetitlepic) {
  if (duplicatetitlepic_ != &::google::protobuf::internal::kEmptyString) {
    delete duplicatetitlepic_;
  }
  if (duplicatetitlepic) {
    set_has_duplicatetitlepic();
    duplicatetitlepic_ = duplicatetitlepic;
  } else {
    clear_has_duplicatetitlepic();
    duplicatetitlepic_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 unlockLevel = 4;
inline bool duplicategroup::has_unlocklevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void duplicategroup::set_has_unlocklevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void duplicategroup::clear_has_unlocklevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void duplicategroup::clear_unlocklevel() {
  unlocklevel_ = 0;
  clear_has_unlocklevel();
}
inline ::google::protobuf::int32 duplicategroup::unlocklevel() const {
  return unlocklevel_;
}
inline void duplicategroup::set_unlocklevel(::google::protobuf::int32 value) {
  set_has_unlocklevel();
  unlocklevel_ = value;
}

// optional int32 belongToType = 5;
inline bool duplicategroup::has_belongtotype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void duplicategroup::set_has_belongtotype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void duplicategroup::clear_has_belongtotype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void duplicategroup::clear_belongtotype() {
  belongtotype_ = 0;
  clear_has_belongtotype();
}
inline ::google::protobuf::int32 duplicategroup::belongtotype() const {
  return belongtotype_;
}
inline void duplicategroup::set_belongtotype(::google::protobuf::int32 value) {
  set_has_belongtotype();
  belongtotype_ = value;
}

// optional int32 viptype = 6;
inline bool duplicategroup::has_viptype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void duplicategroup::set_has_viptype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void duplicategroup::clear_has_viptype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void duplicategroup::clear_viptype() {
  viptype_ = 0;
  clear_has_viptype();
}
inline ::google::protobuf::int32 duplicategroup::viptype() const {
  return viptype_;
}
inline void duplicategroup::set_viptype(::google::protobuf::int32 value) {
  set_has_viptype();
  viptype_ = value;
}

// optional int32 dynamiclevel = 7;
inline bool duplicategroup::has_dynamiclevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void duplicategroup::set_has_dynamiclevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void duplicategroup::clear_has_dynamiclevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void duplicategroup::clear_dynamiclevel() {
  dynamiclevel_ = 0;
  clear_has_dynamiclevel();
}
inline ::google::protobuf::int32 duplicategroup::dynamiclevel() const {
  return dynamiclevel_;
}
inline void duplicategroup::set_dynamiclevel(::google::protobuf::int32 value) {
  set_has_dynamiclevel();
  dynamiclevel_ = value;
}

// optional string timesRes = 8;
inline bool duplicategroup::has_timesres() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void duplicategroup::set_has_timesres() {
  _has_bits_[0] |= 0x00000080u;
}
inline void duplicategroup::clear_has_timesres() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void duplicategroup::clear_timesres() {
  if (timesres_ != &::google::protobuf::internal::kEmptyString) {
    timesres_->clear();
  }
  clear_has_timesres();
}
inline const ::std::string& duplicategroup::timesres() const {
  return *timesres_;
}
inline void duplicategroup::set_timesres(const ::std::string& value) {
  set_has_timesres();
  if (timesres_ == &::google::protobuf::internal::kEmptyString) {
    timesres_ = new ::std::string;
  }
  timesres_->assign(value);
}
inline void duplicategroup::set_timesres(const char* value) {
  set_has_timesres();
  if (timesres_ == &::google::protobuf::internal::kEmptyString) {
    timesres_ = new ::std::string;
  }
  timesres_->assign(value);
}
inline void duplicategroup::set_timesres(const char* value, size_t size) {
  set_has_timesres();
  if (timesres_ == &::google::protobuf::internal::kEmptyString) {
    timesres_ = new ::std::string;
  }
  timesres_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicategroup::mutable_timesres() {
  set_has_timesres();
  if (timesres_ == &::google::protobuf::internal::kEmptyString) {
    timesres_ = new ::std::string;
  }
  return timesres_;
}
inline ::std::string* duplicategroup::release_timesres() {
  clear_has_timesres();
  if (timesres_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = timesres_;
    timesres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicategroup::set_allocated_timesres(::std::string* timesres) {
  if (timesres_ != &::google::protobuf::internal::kEmptyString) {
    delete timesres_;
  }
  if (timesres) {
    set_has_timesres();
    timesres_ = timesres;
  } else {
    clear_has_timesres();
    timesres_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 groupTimesType = 9;
inline bool duplicategroup::has_grouptimestype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void duplicategroup::set_has_grouptimestype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void duplicategroup::clear_has_grouptimestype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void duplicategroup::clear_grouptimestype() {
  grouptimestype_ = 0;
  clear_has_grouptimestype();
}
inline ::google::protobuf::int32 duplicategroup::grouptimestype() const {
  return grouptimestype_;
}
inline void duplicategroup::set_grouptimestype(::google::protobuf::int32 value) {
  set_has_grouptimestype();
  grouptimestype_ = value;
}

// optional int32 groupTimes = 10;
inline bool duplicategroup::has_grouptimes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void duplicategroup::set_has_grouptimes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void duplicategroup::clear_has_grouptimes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void duplicategroup::clear_grouptimes() {
  grouptimes_ = 0;
  clear_has_grouptimes();
}
inline ::google::protobuf::int32 duplicategroup::grouptimes() const {
  return grouptimes_;
}
inline void duplicategroup::set_grouptimes(::google::protobuf::int32 value) {
  set_has_grouptimes();
  grouptimes_ = value;
}

// optional int32 refreshType = 11;
inline bool duplicategroup::has_refreshtype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void duplicategroup::set_has_refreshtype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void duplicategroup::clear_has_refreshtype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void duplicategroup::clear_refreshtype() {
  refreshtype_ = 0;
  clear_has_refreshtype();
}
inline ::google::protobuf::int32 duplicategroup::refreshtype() const {
  return refreshtype_;
}
inline void duplicategroup::set_refreshtype(::google::protobuf::int32 value) {
  set_has_refreshtype();
  refreshtype_ = value;
}

// optional int64 enterItemID = 12;
inline bool duplicategroup::has_enteritemid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void duplicategroup::set_has_enteritemid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void duplicategroup::clear_has_enteritemid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void duplicategroup::clear_enteritemid() {
  enteritemid_ = GOOGLE_LONGLONG(0);
  clear_has_enteritemid();
}
inline ::google::protobuf::int64 duplicategroup::enteritemid() const {
  return enteritemid_;
}
inline void duplicategroup::set_enteritemid(::google::protobuf::int64 value) {
  set_has_enteritemid();
  enteritemid_ = value;
}

// optional int32 reliveTpye = 13;
inline bool duplicategroup::has_relivetpye() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void duplicategroup::set_has_relivetpye() {
  _has_bits_[0] |= 0x00001000u;
}
inline void duplicategroup::clear_has_relivetpye() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void duplicategroup::clear_relivetpye() {
  relivetpye_ = 0;
  clear_has_relivetpye();
}
inline ::google::protobuf::int32 duplicategroup::relivetpye() const {
  return relivetpye_;
}
inline void duplicategroup::set_relivetpye(::google::protobuf::int32 value) {
  set_has_relivetpye();
  relivetpye_ = value;
}

// optional string sweepCondition = 14;
inline bool duplicategroup::has_sweepcondition() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void duplicategroup::set_has_sweepcondition() {
  _has_bits_[0] |= 0x00002000u;
}
inline void duplicategroup::clear_has_sweepcondition() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void duplicategroup::clear_sweepcondition() {
  if (sweepcondition_ != &::google::protobuf::internal::kEmptyString) {
    sweepcondition_->clear();
  }
  clear_has_sweepcondition();
}
inline const ::std::string& duplicategroup::sweepcondition() const {
  return *sweepcondition_;
}
inline void duplicategroup::set_sweepcondition(const ::std::string& value) {
  set_has_sweepcondition();
  if (sweepcondition_ == &::google::protobuf::internal::kEmptyString) {
    sweepcondition_ = new ::std::string;
  }
  sweepcondition_->assign(value);
}
inline void duplicategroup::set_sweepcondition(const char* value) {
  set_has_sweepcondition();
  if (sweepcondition_ == &::google::protobuf::internal::kEmptyString) {
    sweepcondition_ = new ::std::string;
  }
  sweepcondition_->assign(value);
}
inline void duplicategroup::set_sweepcondition(const char* value, size_t size) {
  set_has_sweepcondition();
  if (sweepcondition_ == &::google::protobuf::internal::kEmptyString) {
    sweepcondition_ = new ::std::string;
  }
  sweepcondition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicategroup::mutable_sweepcondition() {
  set_has_sweepcondition();
  if (sweepcondition_ == &::google::protobuf::internal::kEmptyString) {
    sweepcondition_ = new ::std::string;
  }
  return sweepcondition_;
}
inline ::std::string* duplicategroup::release_sweepcondition() {
  clear_has_sweepcondition();
  if (sweepcondition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sweepcondition_;
    sweepcondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicategroup::set_allocated_sweepcondition(::std::string* sweepcondition) {
  if (sweepcondition_ != &::google::protobuf::internal::kEmptyString) {
    delete sweepcondition_;
  }
  if (sweepcondition) {
    set_has_sweepcondition();
    sweepcondition_ = sweepcondition;
  } else {
    clear_has_sweepcondition();
    sweepcondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 buyEnterTimesCostType = 15;
inline bool duplicategroup::has_buyentertimescosttype() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void duplicategroup::set_has_buyentertimescosttype() {
  _has_bits_[0] |= 0x00004000u;
}
inline void duplicategroup::clear_has_buyentertimescosttype() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void duplicategroup::clear_buyentertimescosttype() {
  buyentertimescosttype_ = 0;
  clear_has_buyentertimescosttype();
}
inline ::google::protobuf::int32 duplicategroup::buyentertimescosttype() const {
  return buyentertimescosttype_;
}
inline void duplicategroup::set_buyentertimescosttype(::google::protobuf::int32 value) {
  set_has_buyentertimescosttype();
  buyentertimescosttype_ = value;
}

// optional int32 buyEnterTimesCost = 16;
inline bool duplicategroup::has_buyentertimescost() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void duplicategroup::set_has_buyentertimescost() {
  _has_bits_[0] |= 0x00008000u;
}
inline void duplicategroup::clear_has_buyentertimescost() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void duplicategroup::clear_buyentertimescost() {
  buyentertimescost_ = 0;
  clear_has_buyentertimescost();
}
inline ::google::protobuf::int32 duplicategroup::buyentertimescost() const {
  return buyentertimescost_;
}
inline void duplicategroup::set_buyentertimescost(::google::protobuf::int32 value) {
  set_has_buyentertimescost();
  buyentertimescost_ = value;
}

// optional int32 countDown = 17;
inline bool duplicategroup::has_countdown() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void duplicategroup::set_has_countdown() {
  _has_bits_[0] |= 0x00010000u;
}
inline void duplicategroup::clear_has_countdown() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void duplicategroup::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
inline ::google::protobuf::int32 duplicategroup::countdown() const {
  return countdown_;
}
inline void duplicategroup::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
}

// optional int32 pathfindingtype = 18;
inline bool duplicategroup::has_pathfindingtype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void duplicategroup::set_has_pathfindingtype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void duplicategroup::clear_has_pathfindingtype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void duplicategroup::clear_pathfindingtype() {
  pathfindingtype_ = 0;
  clear_has_pathfindingtype();
}
inline ::google::protobuf::int32 duplicategroup::pathfindingtype() const {
  return pathfindingtype_;
}
inline void duplicategroup::set_pathfindingtype(::google::protobuf::int32 value) {
  set_has_pathfindingtype();
  pathfindingtype_ = value;
}

// -------------------------------------------------------------------

// Sheet_duplicategroup

// repeated .proto_ff.duplicategroup duplicategroup_List = 1;
inline int Sheet_duplicategroup::duplicategroup_list_size() const {
  return duplicategroup_list_.size();
}
inline void Sheet_duplicategroup::clear_duplicategroup_list() {
  duplicategroup_list_.Clear();
}
inline const ::proto_ff::duplicategroup& Sheet_duplicategroup::duplicategroup_list(int index) const {
  return duplicategroup_list_.Get(index);
}
inline ::proto_ff::duplicategroup* Sheet_duplicategroup::mutable_duplicategroup_list(int index) {
  return duplicategroup_list_.Mutable(index);
}
inline ::proto_ff::duplicategroup* Sheet_duplicategroup::add_duplicategroup_list() {
  return duplicategroup_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicategroup >&
Sheet_duplicategroup::duplicategroup_list() const {
  return duplicategroup_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicategroup >*
Sheet_duplicategroup::mutable_duplicategroup_list() {
  return &duplicategroup_list_;
}

// -------------------------------------------------------------------

// duplicatesweepmonsterNum

// optional int32 ID = 1;
inline bool duplicatesweepmonsterNum::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicatesweepmonsterNum::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicatesweepmonsterNum::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicatesweepmonsterNum::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 duplicatesweepmonsterNum::id() const {
  return id_;
}
inline void duplicatesweepmonsterNum::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 sweepType = 2;
inline bool duplicatesweepmonsterNum::has_sweeptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicatesweepmonsterNum::set_has_sweeptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicatesweepmonsterNum::clear_has_sweeptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicatesweepmonsterNum::clear_sweeptype() {
  sweeptype_ = 0;
  clear_has_sweeptype();
}
inline ::google::protobuf::int32 duplicatesweepmonsterNum::sweeptype() const {
  return sweeptype_;
}
inline void duplicatesweepmonsterNum::set_sweeptype(::google::protobuf::int32 value) {
  set_has_sweeptype();
  sweeptype_ = value;
}

// optional int32 minLevel = 3;
inline bool duplicatesweepmonsterNum::has_minlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicatesweepmonsterNum::set_has_minlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicatesweepmonsterNum::clear_has_minlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicatesweepmonsterNum::clear_minlevel() {
  minlevel_ = 0;
  clear_has_minlevel();
}
inline ::google::protobuf::int32 duplicatesweepmonsterNum::minlevel() const {
  return minlevel_;
}
inline void duplicatesweepmonsterNum::set_minlevel(::google::protobuf::int32 value) {
  set_has_minlevel();
  minlevel_ = value;
}

// optional int32 maxLevel = 4;
inline bool duplicatesweepmonsterNum::has_maxlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void duplicatesweepmonsterNum::set_has_maxlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void duplicatesweepmonsterNum::clear_has_maxlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void duplicatesweepmonsterNum::clear_maxlevel() {
  maxlevel_ = 0;
  clear_has_maxlevel();
}
inline ::google::protobuf::int32 duplicatesweepmonsterNum::maxlevel() const {
  return maxlevel_;
}
inline void duplicatesweepmonsterNum::set_maxlevel(::google::protobuf::int32 value) {
  set_has_maxlevel();
  maxlevel_ = value;
}

// optional int32 killNumber = 5;
inline bool duplicatesweepmonsterNum::has_killnumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void duplicatesweepmonsterNum::set_has_killnumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void duplicatesweepmonsterNum::clear_has_killnumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void duplicatesweepmonsterNum::clear_killnumber() {
  killnumber_ = 0;
  clear_has_killnumber();
}
inline ::google::protobuf::int32 duplicatesweepmonsterNum::killnumber() const {
  return killnumber_;
}
inline void duplicatesweepmonsterNum::set_killnumber(::google::protobuf::int32 value) {
  set_has_killnumber();
  killnumber_ = value;
}

// optional int32 monstervaluetype = 6;
inline bool duplicatesweepmonsterNum::has_monstervaluetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void duplicatesweepmonsterNum::set_has_monstervaluetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void duplicatesweepmonsterNum::clear_has_monstervaluetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void duplicatesweepmonsterNum::clear_monstervaluetype() {
  monstervaluetype_ = 0;
  clear_has_monstervaluetype();
}
inline ::google::protobuf::int32 duplicatesweepmonsterNum::monstervaluetype() const {
  return monstervaluetype_;
}
inline void duplicatesweepmonsterNum::set_monstervaluetype(::google::protobuf::int32 value) {
  set_has_monstervaluetype();
  monstervaluetype_ = value;
}

// -------------------------------------------------------------------

// Sheet_duplicatesweepmonsterNum

// repeated .proto_ff.duplicatesweepmonsterNum duplicatesweepmonsterNum_List = 1;
inline int Sheet_duplicatesweepmonsterNum::duplicatesweepmonsternum_list_size() const {
  return duplicatesweepmonsternum_list_.size();
}
inline void Sheet_duplicatesweepmonsterNum::clear_duplicatesweepmonsternum_list() {
  duplicatesweepmonsternum_list_.Clear();
}
inline const ::proto_ff::duplicatesweepmonsterNum& Sheet_duplicatesweepmonsterNum::duplicatesweepmonsternum_list(int index) const {
  return duplicatesweepmonsternum_list_.Get(index);
}
inline ::proto_ff::duplicatesweepmonsterNum* Sheet_duplicatesweepmonsterNum::mutable_duplicatesweepmonsternum_list(int index) {
  return duplicatesweepmonsternum_list_.Mutable(index);
}
inline ::proto_ff::duplicatesweepmonsterNum* Sheet_duplicatesweepmonsterNum::add_duplicatesweepmonsternum_list() {
  return duplicatesweepmonsternum_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatesweepmonsterNum >&
Sheet_duplicatesweepmonsterNum::duplicatesweepmonsternum_list() const {
  return duplicatesweepmonsternum_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicatesweepmonsterNum >*
Sheet_duplicatesweepmonsterNum::mutable_duplicatesweepmonsternum_list() {
  return &duplicatesweepmonsternum_list_;
}

// -------------------------------------------------------------------

// duplicateGuildbosstime

// optional int64 duplicateID = 1;
inline bool duplicateGuildbosstime::has_duplicateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicateGuildbosstime::set_has_duplicateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicateGuildbosstime::clear_has_duplicateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicateGuildbosstime::clear_duplicateid() {
  duplicateid_ = GOOGLE_LONGLONG(0);
  clear_has_duplicateid();
}
inline ::google::protobuf::int64 duplicateGuildbosstime::duplicateid() const {
  return duplicateid_;
}
inline void duplicateGuildbosstime::set_duplicateid(::google::protobuf::int64 value) {
  set_has_duplicateid();
  duplicateid_ = value;
}

// optional int32 openCycle = 2;
inline bool duplicateGuildbosstime::has_opencycle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicateGuildbosstime::set_has_opencycle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicateGuildbosstime::clear_has_opencycle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicateGuildbosstime::clear_opencycle() {
  opencycle_ = 0;
  clear_has_opencycle();
}
inline ::google::protobuf::int32 duplicateGuildbosstime::opencycle() const {
  return opencycle_;
}
inline void duplicateGuildbosstime::set_opencycle(::google::protobuf::int32 value) {
  set_has_opencycle();
  opencycle_ = value;
}

// optional string openTime = 3;
inline bool duplicateGuildbosstime::has_opentime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicateGuildbosstime::set_has_opentime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicateGuildbosstime::clear_has_opentime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicateGuildbosstime::clear_opentime() {
  if (opentime_ != &::google::protobuf::internal::kEmptyString) {
    opentime_->clear();
  }
  clear_has_opentime();
}
inline const ::std::string& duplicateGuildbosstime::opentime() const {
  return *opentime_;
}
inline void duplicateGuildbosstime::set_opentime(const ::std::string& value) {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    opentime_ = new ::std::string;
  }
  opentime_->assign(value);
}
inline void duplicateGuildbosstime::set_opentime(const char* value) {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    opentime_ = new ::std::string;
  }
  opentime_->assign(value);
}
inline void duplicateGuildbosstime::set_opentime(const char* value, size_t size) {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    opentime_ = new ::std::string;
  }
  opentime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* duplicateGuildbosstime::mutable_opentime() {
  set_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    opentime_ = new ::std::string;
  }
  return opentime_;
}
inline ::std::string* duplicateGuildbosstime::release_opentime() {
  clear_has_opentime();
  if (opentime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = opentime_;
    opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void duplicateGuildbosstime::set_allocated_opentime(::std::string* opentime) {
  if (opentime_ != &::google::protobuf::internal::kEmptyString) {
    delete opentime_;
  }
  if (opentime) {
    set_has_opentime();
    opentime_ = opentime;
  } else {
    clear_has_opentime();
    opentime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 bossGroup = 4;
inline bool duplicateGuildbosstime::has_bossgroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void duplicateGuildbosstime::set_has_bossgroup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void duplicateGuildbosstime::clear_has_bossgroup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void duplicateGuildbosstime::clear_bossgroup() {
  bossgroup_ = 0;
  clear_has_bossgroup();
}
inline ::google::protobuf::int32 duplicateGuildbosstime::bossgroup() const {
  return bossgroup_;
}
inline void duplicateGuildbosstime::set_bossgroup(::google::protobuf::int32 value) {
  set_has_bossgroup();
  bossgroup_ = value;
}

// optional int32 relevance = 5;
inline bool duplicateGuildbosstime::has_relevance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void duplicateGuildbosstime::set_has_relevance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void duplicateGuildbosstime::clear_has_relevance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void duplicateGuildbosstime::clear_relevance() {
  relevance_ = 0;
  clear_has_relevance();
}
inline ::google::protobuf::int32 duplicateGuildbosstime::relevance() const {
  return relevance_;
}
inline void duplicateGuildbosstime::set_relevance(::google::protobuf::int32 value) {
  set_has_relevance();
  relevance_ = value;
}

// -------------------------------------------------------------------

// Sheet_duplicateGuildbosstime

// repeated .proto_ff.duplicateGuildbosstime duplicateGuildbosstime_List = 1;
inline int Sheet_duplicateGuildbosstime::duplicateguildbosstime_list_size() const {
  return duplicateguildbosstime_list_.size();
}
inline void Sheet_duplicateGuildbosstime::clear_duplicateguildbosstime_list() {
  duplicateguildbosstime_list_.Clear();
}
inline const ::proto_ff::duplicateGuildbosstime& Sheet_duplicateGuildbosstime::duplicateguildbosstime_list(int index) const {
  return duplicateguildbosstime_list_.Get(index);
}
inline ::proto_ff::duplicateGuildbosstime* Sheet_duplicateGuildbosstime::mutable_duplicateguildbosstime_list(int index) {
  return duplicateguildbosstime_list_.Mutable(index);
}
inline ::proto_ff::duplicateGuildbosstime* Sheet_duplicateGuildbosstime::add_duplicateguildbosstime_list() {
  return duplicateguildbosstime_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosstime >&
Sheet_duplicateGuildbosstime::duplicateguildbosstime_list() const {
  return duplicateguildbosstime_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosstime >*
Sheet_duplicateGuildbosstime::mutable_duplicateguildbosstime_list() {
  return &duplicateguildbosstime_list_;
}

// -------------------------------------------------------------------

// duplicateGuildbosskillDesc

// optional int32 small = 1;
inline bool duplicateGuildbosskillDesc::has_small() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicateGuildbosskillDesc::set_has_small() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicateGuildbosskillDesc::clear_has_small() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicateGuildbosskillDesc::clear_small() {
  small_ = 0;
  clear_has_small();
}
inline ::google::protobuf::int32 duplicateGuildbosskillDesc::small() const {
  return small_;
}
inline void duplicateGuildbosskillDesc::set_small(::google::protobuf::int32 value) {
  set_has_small();
  small_ = value;
}

// optional int32 large = 2;
inline bool duplicateGuildbosskillDesc::has_large() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicateGuildbosskillDesc::set_has_large() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicateGuildbosskillDesc::clear_has_large() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicateGuildbosskillDesc::clear_large() {
  large_ = 0;
  clear_has_large();
}
inline ::google::protobuf::int32 duplicateGuildbosskillDesc::large() const {
  return large_;
}
inline void duplicateGuildbosskillDesc::set_large(::google::protobuf::int32 value) {
  set_has_large();
  large_ = value;
}

// optional int32 weaken = 3;
inline bool duplicateGuildbosskillDesc::has_weaken() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicateGuildbosskillDesc::set_has_weaken() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicateGuildbosskillDesc::clear_has_weaken() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicateGuildbosskillDesc::clear_weaken() {
  weaken_ = 0;
  clear_has_weaken();
}
inline ::google::protobuf::int32 duplicateGuildbosskillDesc::weaken() const {
  return weaken_;
}
inline void duplicateGuildbosskillDesc::set_weaken(::google::protobuf::int32 value) {
  set_has_weaken();
  weaken_ = value;
}

// -------------------------------------------------------------------

// duplicateGuildboss

// optional int64 duplicateID = 1;
inline bool duplicateGuildboss::has_duplicateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicateGuildboss::set_has_duplicateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicateGuildboss::clear_has_duplicateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicateGuildboss::clear_duplicateid() {
  duplicateid_ = GOOGLE_LONGLONG(0);
  clear_has_duplicateid();
}
inline ::google::protobuf::int64 duplicateGuildboss::duplicateid() const {
  return duplicateid_;
}
inline void duplicateGuildboss::set_duplicateid(::google::protobuf::int64 value) {
  set_has_duplicateid();
  duplicateid_ = value;
}

// optional int64 rewardId = 2;
inline bool duplicateGuildboss::has_rewardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicateGuildboss::set_has_rewardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicateGuildboss::clear_has_rewardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicateGuildboss::clear_rewardid() {
  rewardid_ = GOOGLE_LONGLONG(0);
  clear_has_rewardid();
}
inline ::google::protobuf::int64 duplicateGuildboss::rewardid() const {
  return rewardid_;
}
inline void duplicateGuildboss::set_rewardid(::google::protobuf::int64 value) {
  set_has_rewardid();
  rewardid_ = value;
}

// repeated .proto_ff.duplicateGuildbosskillDesc kill = 3;
inline int duplicateGuildboss::kill_size() const {
  return kill_.size();
}
inline void duplicateGuildboss::clear_kill() {
  kill_.Clear();
}
inline const ::proto_ff::duplicateGuildbosskillDesc& duplicateGuildboss::kill(int index) const {
  return kill_.Get(index);
}
inline ::proto_ff::duplicateGuildbosskillDesc* duplicateGuildboss::mutable_kill(int index) {
  return kill_.Mutable(index);
}
inline ::proto_ff::duplicateGuildbosskillDesc* duplicateGuildboss::add_kill() {
  return kill_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosskillDesc >&
duplicateGuildboss::kill() const {
  return kill_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildbosskillDesc >*
duplicateGuildboss::mutable_kill() {
  return &kill_;
}

// -------------------------------------------------------------------

// Sheet_duplicateGuildboss

// repeated .proto_ff.duplicateGuildboss duplicateGuildboss_List = 1;
inline int Sheet_duplicateGuildboss::duplicateguildboss_list_size() const {
  return duplicateguildboss_list_.size();
}
inline void Sheet_duplicateGuildboss::clear_duplicateguildboss_list() {
  duplicateguildboss_list_.Clear();
}
inline const ::proto_ff::duplicateGuildboss& Sheet_duplicateGuildboss::duplicateguildboss_list(int index) const {
  return duplicateguildboss_list_.Get(index);
}
inline ::proto_ff::duplicateGuildboss* Sheet_duplicateGuildboss::mutable_duplicateguildboss_list(int index) {
  return duplicateguildboss_list_.Mutable(index);
}
inline ::proto_ff::duplicateGuildboss* Sheet_duplicateGuildboss::add_duplicateguildboss_list() {
  return duplicateguildboss_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildboss >&
Sheet_duplicateGuildboss::duplicateguildboss_list() const {
  return duplicateguildboss_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildboss >*
Sheet_duplicateGuildboss::mutable_duplicateguildboss_list() {
  return &duplicateguildboss_list_;
}

// -------------------------------------------------------------------

// duplicateGuildDuplicate

// optional int32 level = 1;
inline bool duplicateGuildDuplicate::has_level() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duplicateGuildDuplicate::set_has_level() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duplicateGuildDuplicate::clear_has_level() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duplicateGuildDuplicate::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 duplicateGuildDuplicate::level() const {
  return level_;
}
inline void duplicateGuildDuplicate::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 monsterExp = 2;
inline bool duplicateGuildDuplicate::has_monsterexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duplicateGuildDuplicate::set_has_monsterexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duplicateGuildDuplicate::clear_has_monsterexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duplicateGuildDuplicate::clear_monsterexp() {
  monsterexp_ = GOOGLE_LONGLONG(0);
  clear_has_monsterexp();
}
inline ::google::protobuf::int64 duplicateGuildDuplicate::monsterexp() const {
  return monsterexp_;
}
inline void duplicateGuildDuplicate::set_monsterexp(::google::protobuf::int64 value) {
  set_has_monsterexp();
  monsterexp_ = value;
}

// optional int64 bossExp = 3;
inline bool duplicateGuildDuplicate::has_bossexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duplicateGuildDuplicate::set_has_bossexp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duplicateGuildDuplicate::clear_has_bossexp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duplicateGuildDuplicate::clear_bossexp() {
  bossexp_ = GOOGLE_LONGLONG(0);
  clear_has_bossexp();
}
inline ::google::protobuf::int64 duplicateGuildDuplicate::bossexp() const {
  return bossexp_;
}
inline void duplicateGuildDuplicate::set_bossexp(::google::protobuf::int64 value) {
  set_has_bossexp();
  bossexp_ = value;
}

// -------------------------------------------------------------------

// Sheet_duplicateGuildDuplicate

// repeated .proto_ff.duplicateGuildDuplicate duplicateGuildDuplicate_List = 1;
inline int Sheet_duplicateGuildDuplicate::duplicateguildduplicate_list_size() const {
  return duplicateguildduplicate_list_.size();
}
inline void Sheet_duplicateGuildDuplicate::clear_duplicateguildduplicate_list() {
  duplicateguildduplicate_list_.Clear();
}
inline const ::proto_ff::duplicateGuildDuplicate& Sheet_duplicateGuildDuplicate::duplicateguildduplicate_list(int index) const {
  return duplicateguildduplicate_list_.Get(index);
}
inline ::proto_ff::duplicateGuildDuplicate* Sheet_duplicateGuildDuplicate::mutable_duplicateguildduplicate_list(int index) {
  return duplicateguildduplicate_list_.Mutable(index);
}
inline ::proto_ff::duplicateGuildDuplicate* Sheet_duplicateGuildDuplicate::add_duplicateguildduplicate_list() {
  return duplicateguildduplicate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildDuplicate >&
Sheet_duplicateGuildDuplicate::duplicateguildduplicate_list() const {
  return duplicateguildduplicate_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duplicateGuildDuplicate >*
Sheet_duplicateGuildDuplicate::mutable_duplicateguildduplicate_list() {
  return &duplicateguildduplicate_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_duplicate_2eproto__INCLUDED
