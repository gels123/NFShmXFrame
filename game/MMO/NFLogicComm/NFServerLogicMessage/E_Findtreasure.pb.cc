// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Findtreasure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Findtreasure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_FindtreasureFindtreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureFindtreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FindtreasureFindtreasure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FindtreasureFindtreasure_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FindtreasureFindpool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureFindpool_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FindtreasureFindpool_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FindtreasureFindpool_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FindtreasureConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FindtreasureConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FindtreasureConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FindtreasureTotal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureTotal_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FindtreasureTotal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FindtreasureTotal_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FindtreasureActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FindtreasureActive_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FindtreasureActive_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FindtreasureActiveup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureActiveup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FindtreasureActiveup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FindtreasureActiveup_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FindtreasureActivegoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureActivegoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FindtreasureActivegoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FindtreasureActivegoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FindtreasureActiveshopGoodDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureActiveshopGoodDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FindtreasureActiveshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureActiveshop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FindtreasureActiveshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FindtreasureActiveshop_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_FindtreasureShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_FindtreasureShop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_FindtreasureShop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_FindtreasureShop_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fFindtreasure_2eproto() {
  protobuf_AddDesc_E_5fFindtreasure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Findtreasure.proto");
  GOOGLE_CHECK(file != NULL);
  E_FindtreasureFindtreasure_descriptor_ = file->message_type(0);
  static const int E_FindtreasureFindtreasure_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_functionunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_costid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_contitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_poolgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_loop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_pooltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_totalgroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_activegroupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_protecttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_additem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_addnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, m_storehousetype_),
  };
  E_FindtreasureFindtreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureFindtreasure_descriptor_,
      E_FindtreasureFindtreasure::default_instance_,
      E_FindtreasureFindtreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindtreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureFindtreasure));
  Sheet_FindtreasureFindtreasure_descriptor_ = file->message_type(1);
  static const int Sheet_FindtreasureFindtreasure_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureFindtreasure, e_findtreasurefindtreasure_list_),
  };
  Sheet_FindtreasureFindtreasure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FindtreasureFindtreasure_descriptor_,
      Sheet_FindtreasureFindtreasure::default_instance_,
      Sheet_FindtreasureFindtreasure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureFindtreasure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureFindtreasure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FindtreasureFindtreasure));
  E_FindtreasureFindpool_descriptor_ = file->message_type(2);
  static const int E_FindtreasureFindpool_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, m_showorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, m_prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, m_weights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, m_proweights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, m_record_),
  };
  E_FindtreasureFindpool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureFindpool_descriptor_,
      E_FindtreasureFindpool::default_instance_,
      E_FindtreasureFindpool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureFindpool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureFindpool));
  Sheet_FindtreasureFindpool_descriptor_ = file->message_type(3);
  static const int Sheet_FindtreasureFindpool_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureFindpool, e_findtreasurefindpool_list_),
  };
  Sheet_FindtreasureFindpool_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FindtreasureFindpool_descriptor_,
      Sheet_FindtreasureFindpool::default_instance_,
      Sheet_FindtreasureFindpool_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureFindpool, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureFindpool, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FindtreasureFindpool));
  E_FindtreasureConstant_descriptor_ = file->message_type(4);
  static const int E_FindtreasureConstant_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureConstant, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureConstant, m_dragonsevertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureConstant, m_godsevertime_),
  };
  E_FindtreasureConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureConstant_descriptor_,
      E_FindtreasureConstant::default_instance_,
      E_FindtreasureConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureConstant));
  Sheet_FindtreasureConstant_descriptor_ = file->message_type(5);
  static const int Sheet_FindtreasureConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureConstant, e_findtreasureconstant_list_),
  };
  Sheet_FindtreasureConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FindtreasureConstant_descriptor_,
      Sheet_FindtreasureConstant::default_instance_,
      Sheet_FindtreasureConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FindtreasureConstant));
  E_FindtreasureTotal_descriptor_ = file->message_type(6);
  static const int E_FindtreasureTotal_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureTotal, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureTotal, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureTotal, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureTotal, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureTotal, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureTotal, m_arg_),
  };
  E_FindtreasureTotal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureTotal_descriptor_,
      E_FindtreasureTotal::default_instance_,
      E_FindtreasureTotal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureTotal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureTotal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureTotal));
  Sheet_FindtreasureTotal_descriptor_ = file->message_type(7);
  static const int Sheet_FindtreasureTotal_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureTotal, e_findtreasuretotal_list_),
  };
  Sheet_FindtreasureTotal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FindtreasureTotal_descriptor_,
      Sheet_FindtreasureTotal::default_instance_,
      Sheet_FindtreasureTotal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureTotal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureTotal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FindtreasureTotal));
  E_FindtreasureActive_descriptor_ = file->message_type(8);
  static const int E_FindtreasureActive_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActive, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActive, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActive, m_opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActive, m_durtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActive, m_closetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActive, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActive, m_typegroupid_),
  };
  E_FindtreasureActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureActive_descriptor_,
      E_FindtreasureActive::default_instance_,
      E_FindtreasureActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureActive));
  Sheet_FindtreasureActive_descriptor_ = file->message_type(9);
  static const int Sheet_FindtreasureActive_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActive, e_findtreasureactive_list_),
  };
  Sheet_FindtreasureActive_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FindtreasureActive_descriptor_,
      Sheet_FindtreasureActive::default_instance_,
      Sheet_FindtreasureActive_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActive, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActive, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FindtreasureActive));
  E_FindtreasureActiveup_descriptor_ = file->message_type(10);
  static const int E_FindtreasureActiveup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveup, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveup, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveup, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveup, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveup, m_proarg_),
  };
  E_FindtreasureActiveup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureActiveup_descriptor_,
      E_FindtreasureActiveup::default_instance_,
      E_FindtreasureActiveup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureActiveup));
  Sheet_FindtreasureActiveup_descriptor_ = file->message_type(11);
  static const int Sheet_FindtreasureActiveup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActiveup, e_findtreasureactiveup_list_),
  };
  Sheet_FindtreasureActiveup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FindtreasureActiveup_descriptor_,
      Sheet_FindtreasureActiveup::default_instance_,
      Sheet_FindtreasureActiveup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActiveup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActiveup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FindtreasureActiveup));
  E_FindtreasureActivegoods_descriptor_ = file->message_type(12);
  static const int E_FindtreasureActivegoods_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActivegoods, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActivegoods, m_itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActivegoods, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActivegoods, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActivegoods, m_itemnum_),
  };
  E_FindtreasureActivegoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureActivegoods_descriptor_,
      E_FindtreasureActivegoods::default_instance_,
      E_FindtreasureActivegoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActivegoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActivegoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureActivegoods));
  Sheet_FindtreasureActivegoods_descriptor_ = file->message_type(13);
  static const int Sheet_FindtreasureActivegoods_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActivegoods, e_findtreasureactivegoods_list_),
  };
  Sheet_FindtreasureActivegoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FindtreasureActivegoods_descriptor_,
      Sheet_FindtreasureActivegoods::default_instance_,
      Sheet_FindtreasureActivegoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActivegoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActivegoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FindtreasureActivegoods));
  E_FindtreasureActiveshopGoodDesc_descriptor_ = file->message_type(14);
  static const int E_FindtreasureActiveshopGoodDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshopGoodDesc, m_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshopGoodDesc, m_id_),
  };
  E_FindtreasureActiveshopGoodDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureActiveshopGoodDesc_descriptor_,
      E_FindtreasureActiveshopGoodDesc::default_instance_,
      E_FindtreasureActiveshopGoodDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshopGoodDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshopGoodDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureActiveshopGoodDesc));
  E_FindtreasureActiveshop_descriptor_ = file->message_type(15);
  static const int E_FindtreasureActiveshop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshop, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshop, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshop, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshop, m_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshop, m_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshop, m_good_),
  };
  E_FindtreasureActiveshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureActiveshop_descriptor_,
      E_FindtreasureActiveshop::default_instance_,
      E_FindtreasureActiveshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureActiveshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureActiveshop));
  Sheet_FindtreasureActiveshop_descriptor_ = file->message_type(16);
  static const int Sheet_FindtreasureActiveshop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActiveshop, e_findtreasureactiveshop_list_),
  };
  Sheet_FindtreasureActiveshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FindtreasureActiveshop_descriptor_,
      Sheet_FindtreasureActiveshop::default_instance_,
      Sheet_FindtreasureActiveshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActiveshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureActiveshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FindtreasureActiveshop));
  E_FindtreasureShop_descriptor_ = file->message_type(17);
  static const int E_FindtreasureShop_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureShop, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureShop, m_groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureShop, m_goodsid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureShop, m_goodsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureShop, m_costid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureShop, m_num_),
  };
  E_FindtreasureShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_FindtreasureShop_descriptor_,
      E_FindtreasureShop::default_instance_,
      E_FindtreasureShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_FindtreasureShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_FindtreasureShop));
  Sheet_FindtreasureShop_descriptor_ = file->message_type(18);
  static const int Sheet_FindtreasureShop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureShop, e_findtreasureshop_list_),
  };
  Sheet_FindtreasureShop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_FindtreasureShop_descriptor_,
      Sheet_FindtreasureShop::default_instance_,
      Sheet_FindtreasureShop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureShop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_FindtreasureShop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_FindtreasureShop));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fFindtreasure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureFindtreasure_descriptor_, &E_FindtreasureFindtreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FindtreasureFindtreasure_descriptor_, &Sheet_FindtreasureFindtreasure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureFindpool_descriptor_, &E_FindtreasureFindpool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FindtreasureFindpool_descriptor_, &Sheet_FindtreasureFindpool::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureConstant_descriptor_, &E_FindtreasureConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FindtreasureConstant_descriptor_, &Sheet_FindtreasureConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureTotal_descriptor_, &E_FindtreasureTotal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FindtreasureTotal_descriptor_, &Sheet_FindtreasureTotal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureActive_descriptor_, &E_FindtreasureActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FindtreasureActive_descriptor_, &Sheet_FindtreasureActive::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureActiveup_descriptor_, &E_FindtreasureActiveup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FindtreasureActiveup_descriptor_, &Sheet_FindtreasureActiveup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureActivegoods_descriptor_, &E_FindtreasureActivegoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FindtreasureActivegoods_descriptor_, &Sheet_FindtreasureActivegoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureActiveshopGoodDesc_descriptor_, &E_FindtreasureActiveshopGoodDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureActiveshop_descriptor_, &E_FindtreasureActiveshop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FindtreasureActiveshop_descriptor_, &Sheet_FindtreasureActiveshop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_FindtreasureShop_descriptor_, &E_FindtreasureShop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_FindtreasureShop_descriptor_, &Sheet_FindtreasureShop::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fFindtreasure_2eproto() {
  delete E_FindtreasureFindtreasure::default_instance_;
  delete E_FindtreasureFindtreasure_reflection_;
  delete Sheet_FindtreasureFindtreasure::default_instance_;
  delete Sheet_FindtreasureFindtreasure_reflection_;
  delete E_FindtreasureFindpool::default_instance_;
  delete E_FindtreasureFindpool_reflection_;
  delete Sheet_FindtreasureFindpool::default_instance_;
  delete Sheet_FindtreasureFindpool_reflection_;
  delete E_FindtreasureConstant::default_instance_;
  delete E_FindtreasureConstant_reflection_;
  delete Sheet_FindtreasureConstant::default_instance_;
  delete Sheet_FindtreasureConstant_reflection_;
  delete E_FindtreasureTotal::default_instance_;
  delete E_FindtreasureTotal_reflection_;
  delete Sheet_FindtreasureTotal::default_instance_;
  delete Sheet_FindtreasureTotal_reflection_;
  delete E_FindtreasureActive::default_instance_;
  delete E_FindtreasureActive_reflection_;
  delete Sheet_FindtreasureActive::default_instance_;
  delete Sheet_FindtreasureActive_reflection_;
  delete E_FindtreasureActiveup::default_instance_;
  delete E_FindtreasureActiveup_reflection_;
  delete Sheet_FindtreasureActiveup::default_instance_;
  delete Sheet_FindtreasureActiveup_reflection_;
  delete E_FindtreasureActivegoods::default_instance_;
  delete E_FindtreasureActivegoods_reflection_;
  delete Sheet_FindtreasureActivegoods::default_instance_;
  delete Sheet_FindtreasureActivegoods_reflection_;
  delete E_FindtreasureActiveshopGoodDesc::default_instance_;
  delete E_FindtreasureActiveshopGoodDesc_reflection_;
  delete E_FindtreasureActiveshop::default_instance_;
  delete E_FindtreasureActiveshop_reflection_;
  delete Sheet_FindtreasureActiveshop::default_instance_;
  delete Sheet_FindtreasureActiveshop_reflection_;
  delete E_FindtreasureShop::default_instance_;
  delete E_FindtreasureShop_reflection_;
  delete Sheet_FindtreasureShop::default_instance_;
  delete Sheet_FindtreasureShop_reflection_;
}

void protobuf_AddDesc_E_5fFindtreasure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024E_Findtreasure.proto\022\010proto_ff\032\025yd_fie"
    "ldoptions.proto\"\254\005\n\032E_FindtreasureFindtr"
    "easure\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\032\n\006m_type\030\002"
    " \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022*\n\020m_functionUnlock\030\003 \001"
    "(\005B\020\302\377\024\014\345\212\237\350\203\275\345\274\200\346\224\276\022\036\n\010m_costID\030\004 \001(\003B\014"
    "\302\377\024\010\351\201\223\345\205\267id\022\'\n\tm_costNum\030\005 \001(\tB\024\302\377\024\014\346\212\275"
    "\345\245\226\346\266\210\350\200\227\220\301\024@\022*\n\nm_ContItem\030\006 \001(\005B\026\302\377\024\022\347"
    "\211\271\346\256\212\350\277\236\346\212\275\351\201\223\345\205\267\022\'\n\rm_poolGroupId\030\007 \001(\t"
    "B\020\302\377\024\010\345\245\226\346\261\240id\220\301\024@\0225\n\006m_loop\030\010 \001(\005B%\302\377\024!"
    "\347\254\254\345\207\240\344\270\252\345\245\226\346\261\240\345\220\216\344\270\272\345\276\252\347\216\257\345\245\226\346\261\240\022*\n\nm_p"
    "oolTime\030\t \001(\005B\026\302\377\024\022\345\245\226\346\261\240\350\275\256\346\215\242\346\227\266\351\227\264\0220\n"
    "\016m_totalGroupID\030\n \001(\005B\030\302\377\024\024\347\264\257\350\256\241\346\254\241\346\225\260\345"
    "\245\226\345\212\261id\022%\n\017m_activeGroupID\030\013 \001(\005B\014\302\377\024\010\346\264"
    "\273\345\212\250id\022-\n\rm_protectTime\030\014 \001(\005B\026\302\377\024\022\344\277\235\345\272"
    "\225\345\245\226\346\261\240\346\254\241\346\225\260\022+\n\tm_addItem\030\r \001(\005B\030\302\377\024\024\346\212"
    "\275\345\245\226\351\242\235\345\244\226\345\245\226\345\212\261ID\022.\n\010m_addNum\030\016 \001(\005B\034\302\377"
    "\024\030\346\212\275\345\245\226\351\242\235\345\244\226\345\245\226\345\212\261\346\225\260\351\207\217\022\036\n\010m_shopID\030\017"
    " \001(\005B\014\302\377\024\010\345\225\206\345\237\216Id\022*\n\020m_storehouseType\030\020"
    " \001(\005B\020\302\377\024\014\344\273\223\345\272\223\347\261\273\345\236\213\"u\n\036Sheet_Findtrea"
    "sureFindtreasure\022S\n\037E_FindtreasureFindtr"
    "easure_List\030\001 \003(\0132$.proto_ff.E_Findtreas"
    "ureFindtreasureB\004\210\301\024\020\"\321\002\n\026E_Findtreasure"
    "Findpool\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\"\n\tm_grou"
    "pID\030\002 \001(\005B\017\302\377\024\013\345\245\226\346\261\240\347\273\204ID\022(\n\013m_showOrde"
    "r\030\003 \001(\005B\023\302\377\024\017\345\256\242\346\210\267\347\253\257\345\261\225\347\244\272\022\034\n\010m_itemid"
    "\030\004 \001(\003B\n\302\377\024\006\347\211\251\345\223\201\022\031\n\005m_num\030\005 \001(\005B\n\302\377\024\006\346"
    "\225\260\351\207\217\022\032\n\006m_prof\030\006 \001(\005B\n\302\377\024\006\350\201\214\344\270\232\022#\n\tm_w"
    "eights\030\007 \001(\005B\020\302\377\024\014\346\216\211\350\220\275\346\235\203\351\207\215\022,\n\014m_proW"
    "eights\030\010 \001(\005B\026\302\377\024\022\344\277\235\345\272\225\346\216\211\350\220\275\346\235\203\351\207\215\022+\n\010"
    "m_Record\030\t \001(\005B\031\302\377\024\025\345\245\226\345\212\261\350\256\260\345\275\225\347\250\200\346\234\211\345\272"
    "\246\"j\n\032Sheet_FindtreasureFindpool\022L\n\033E_Fin"
    "dtreasureFindpool_List\030\001 \003(\0132 .proto_ff."
    "E_FindtreasureFindpoolB\005\210\301\024\200\002\"\257\001\n\026E_Find"
    "treasureConstant\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022I"
    "\n\021m_dragonSeverTime\030\002 \001(\005B.\302\377\024*\347\234\237\351\276\231\347\247\230"
    "\345\256\235\345\274\200\346\234\215\345\274\200\345\220\257\345\270\270\350\247\204\345\210\267\346\226\260\346\227\266\351\227\264\0224\n\016m_g"
    "odSeverTime\030\003 \001(\005B\034\302\377\024\030\347\245\236\346\234\272\346\233\264\346\215\242\345\245\226\346\261"
    "\240\346\227\266\351\227\264\"i\n\032Sheet_FindtreasureConstant\022K\n"
    "\033E_FindtreasureConstant_List\030\001 \003(\0132 .pro"
    "to_ff.E_FindtreasureConstantB\004\210\301\024\002\"\321\001\n\023E"
    "_FindtreasureTotal\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id"
    "\022\034\n\tm_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022\032\n\006m_type"
    "\030\003 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022$\n\010m_itemID\030\004 \001(\005B\022\302\377"
    "\024\016\345\245\226\345\212\261\351\201\223\345\205\267id\022%\n\005m_num\030\005 \001(\005B\026\302\377\024\022\345\245\226"
    "\345\212\261\351\201\223\345\205\267\346\225\260\351\207\217\022\035\n\005m_arg\030\006 \003(\005B\016\302\377\024\006\345\217\202\346"
    "\225\260\210\301\024\002\"`\n\027Sheet_FindtreasureTotal\022E\n\030E_F"
    "indtreasureTotal_List\030\001 \003(\0132\035.proto_ff.E"
    "_FindtreasureTotalB\004\210\301\024@\"\214\002\n\024E_Findtreas"
    "ureActive\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022\034\n\tm_gro"
    "upid\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022*\n\nm_opentime\030\003 \001("
    "\005B\026\302\377\024\022\346\264\273\345\212\250\345\274\200\345\220\257\346\227\266\351\227\264\022#\n\tm_durTime\030\004"
    " \001(\005B\020\302\377\024\014\346\214\201\347\273\255\346\227\266\351\227\264\022%\n\013m_closeTime\030\005 "
    "\001(\005B\020\302\377\024\014\345\205\263\351\227\255\346\227\266\351\227\264\022 \n\006m_type\030\006 \001(\005B\020\302"
    "\377\024\014\346\264\273\345\212\250\347\261\273\345\236\213\022&\n\rm_typeGroupId\030\007 \001(\005B\017"
    "\302\377\024\013\346\264\273\345\212\250\347\273\204id\"c\n\030Sheet_FindtreasureAct"
    "ive\022G\n\031E_FindtreasureActive_List\030\001 \003(\0132\036"
    ".proto_ff.E_FindtreasureActiveB\004\210\301\024\010\"\254\001\n"
    "\026E_FindtreasureActiveup\022\024\n\004m_id\030\001 \001(\005B\006\302"
    "\377\024\002id\022\034\n\tm_groupID\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022\032\n\006m"
    "_type\030\003 \001(\005B\n\302\377\024\006\345\210\206\347\261\273\022\036\n\010m_itemid\030\004 \001("
    "\005B\014\302\377\024\010\347\211\251\345\223\201id\022\"\n\010m_proArg\030\005 \001(\005B\020\302\377\024\014\350"
    "\260\203\346\225\264\347\263\273\346\225\260\"i\n\032Sheet_FindtreasureActiveu"
    "p\022K\n\033E_FindtreasureActiveup_List\030\001 \003(\0132 "
    ".proto_ff.E_FindtreasureActiveupB\004\210\301\024 \"\275"
    "\001\n\031E_FindtreasureActivegoods\022\034\n\tm_groupi"
    "d\030\001 \001(\005B\t\302\377\024\005\347\273\204id\022\036\n\010m_itemID\030\002 \001(\005B\014\302\377"
    "\024\010\351\201\223\345\205\267id\022 \n\006m_type\030\003 \001(\005B\020\302\377\024\014\344\273\267\346\240\274\347\261"
    "\273\345\236\213\022\033\n\007m_price\030\004 \001(\005B\n\302\377\024\006\344\273\267\346\240\274\022#\n\tm_i"
    "temNum\030\005 \001(\005B\020\302\377\024\014\351\201\223\345\205\267\346\225\260\351\207\217\"r\n\035Sheet_"
    "FindtreasureActivegoods\022Q\n\036E_Findtreasur"
    "eActivegoods_List\030\001 \003(\0132#.proto_ff.E_Fin"
    "dtreasureActivegoodsB\004\210\301\024\004\"S\n E_Findtrea"
    "sureActiveshopGoodDesc\022\031\n\005m_num\030\001 \001(\005B\n\302"
    "\377\024\006\346\225\260\351\207\217\022\024\n\004m_id\030\002 \001(\005B\006\302\377\024\002id\"\374\001\n\030E_Fi"
    "ndtreasureActiveshop\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002"
    "id\022\034\n\tm_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022 \n\006m_ty"
    "pe\030\003 \001(\005B\020\302\377\024\014\344\273\267\346\240\274\347\261\273\345\236\213\022\033\n\007m_price\030\004 "
    "\001(\005B\n\302\377\024\006\344\273\267\346\240\274\022!\n\007m_times\030\005 \001(\005B\020\302\377\024\014\351\231"
    "\220\350\264\255\346\254\241\346\225\260\022J\n\006m_good\030\006 \003(\0132*.proto_ff.E_"
    "FindtreasureActiveshopGoodDescB\016\302\377\024\006\345\225\206\345"
    "\223\201\210\301\024\004\"o\n\034Sheet_FindtreasureActiveshop\022O"
    "\n\035E_FindtreasureActiveshop_List\030\001 \003(\0132\"."
    "proto_ff.E_FindtreasureActiveshopB\004\210\301\024\004\""
    "\320\001\n\022E_FindtreasureShop\022\024\n\004m_id\030\001 \001(\005B\006\302\377"
    "\024\002id\022\034\n\tm_groupid\030\002 \001(\005B\t\302\377\024\005\347\273\204id\022\037\n\tm_"
    "goodsID\030\003 \001(\005B\014\302\377\024\010\345\225\206\345\223\201id\022$\n\nm_goodsNu"
    "m\030\004 \001(\005B\020\302\377\024\014\345\225\206\345\223\201\346\225\260\351\207\217\022\036\n\010m_costID\030\005 "
    "\001(\005B\014\302\377\024\010\350\264\247\345\270\201id\022\037\n\005m_num\030\006 \001(\005B\020\302\377\024\014\350\264"
    "\247\345\270\201\346\225\260\351\207\217\"]\n\026Sheet_FindtreasureShop\022C\n\027"
    "E_FindtreasureShop_List\030\001 \003(\0132\034.proto_ff"
    ".E_FindtreasureShopB\004\210\301\024\020", 3625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Findtreasure.proto", &protobuf_RegisterTypes);
  E_FindtreasureFindtreasure::default_instance_ = new E_FindtreasureFindtreasure();
  Sheet_FindtreasureFindtreasure::default_instance_ = new Sheet_FindtreasureFindtreasure();
  E_FindtreasureFindpool::default_instance_ = new E_FindtreasureFindpool();
  Sheet_FindtreasureFindpool::default_instance_ = new Sheet_FindtreasureFindpool();
  E_FindtreasureConstant::default_instance_ = new E_FindtreasureConstant();
  Sheet_FindtreasureConstant::default_instance_ = new Sheet_FindtreasureConstant();
  E_FindtreasureTotal::default_instance_ = new E_FindtreasureTotal();
  Sheet_FindtreasureTotal::default_instance_ = new Sheet_FindtreasureTotal();
  E_FindtreasureActive::default_instance_ = new E_FindtreasureActive();
  Sheet_FindtreasureActive::default_instance_ = new Sheet_FindtreasureActive();
  E_FindtreasureActiveup::default_instance_ = new E_FindtreasureActiveup();
  Sheet_FindtreasureActiveup::default_instance_ = new Sheet_FindtreasureActiveup();
  E_FindtreasureActivegoods::default_instance_ = new E_FindtreasureActivegoods();
  Sheet_FindtreasureActivegoods::default_instance_ = new Sheet_FindtreasureActivegoods();
  E_FindtreasureActiveshopGoodDesc::default_instance_ = new E_FindtreasureActiveshopGoodDesc();
  E_FindtreasureActiveshop::default_instance_ = new E_FindtreasureActiveshop();
  Sheet_FindtreasureActiveshop::default_instance_ = new Sheet_FindtreasureActiveshop();
  E_FindtreasureShop::default_instance_ = new E_FindtreasureShop();
  Sheet_FindtreasureShop::default_instance_ = new Sheet_FindtreasureShop();
  E_FindtreasureFindtreasure::default_instance_->InitAsDefaultInstance();
  Sheet_FindtreasureFindtreasure::default_instance_->InitAsDefaultInstance();
  E_FindtreasureFindpool::default_instance_->InitAsDefaultInstance();
  Sheet_FindtreasureFindpool::default_instance_->InitAsDefaultInstance();
  E_FindtreasureConstant::default_instance_->InitAsDefaultInstance();
  Sheet_FindtreasureConstant::default_instance_->InitAsDefaultInstance();
  E_FindtreasureTotal::default_instance_->InitAsDefaultInstance();
  Sheet_FindtreasureTotal::default_instance_->InitAsDefaultInstance();
  E_FindtreasureActive::default_instance_->InitAsDefaultInstance();
  Sheet_FindtreasureActive::default_instance_->InitAsDefaultInstance();
  E_FindtreasureActiveup::default_instance_->InitAsDefaultInstance();
  Sheet_FindtreasureActiveup::default_instance_->InitAsDefaultInstance();
  E_FindtreasureActivegoods::default_instance_->InitAsDefaultInstance();
  Sheet_FindtreasureActivegoods::default_instance_->InitAsDefaultInstance();
  E_FindtreasureActiveshopGoodDesc::default_instance_->InitAsDefaultInstance();
  E_FindtreasureActiveshop::default_instance_->InitAsDefaultInstance();
  Sheet_FindtreasureActiveshop::default_instance_->InitAsDefaultInstance();
  E_FindtreasureShop::default_instance_->InitAsDefaultInstance();
  Sheet_FindtreasureShop::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fFindtreasure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fFindtreasure_2eproto {
  StaticDescriptorInitializer_E_5fFindtreasure_2eproto() {
    protobuf_AddDesc_E_5fFindtreasure_2eproto();
  }
} static_descriptor_initializer_E_5fFindtreasure_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureFindtreasure::kMIdFieldNumber;
const int E_FindtreasureFindtreasure::kMTypeFieldNumber;
const int E_FindtreasureFindtreasure::kMFunctionUnlockFieldNumber;
const int E_FindtreasureFindtreasure::kMCostIDFieldNumber;
const int E_FindtreasureFindtreasure::kMCostNumFieldNumber;
const int E_FindtreasureFindtreasure::kMContItemFieldNumber;
const int E_FindtreasureFindtreasure::kMPoolGroupIdFieldNumber;
const int E_FindtreasureFindtreasure::kMLoopFieldNumber;
const int E_FindtreasureFindtreasure::kMPoolTimeFieldNumber;
const int E_FindtreasureFindtreasure::kMTotalGroupIDFieldNumber;
const int E_FindtreasureFindtreasure::kMActiveGroupIDFieldNumber;
const int E_FindtreasureFindtreasure::kMProtectTimeFieldNumber;
const int E_FindtreasureFindtreasure::kMAddItemFieldNumber;
const int E_FindtreasureFindtreasure::kMAddNumFieldNumber;
const int E_FindtreasureFindtreasure::kMShopIDFieldNumber;
const int E_FindtreasureFindtreasure::kMStorehouseTypeFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureFindtreasure::E_FindtreasureFindtreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureFindtreasure::InitAsDefaultInstance() {
}

E_FindtreasureFindtreasure::E_FindtreasureFindtreasure(const E_FindtreasureFindtreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureFindtreasure::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_type_ = 0;
  m_functionunlock_ = 0;
  m_costid_ = GOOGLE_LONGLONG(0);
  m_costnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_contitem_ = 0;
  m_poolgroupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_loop_ = 0;
  m_pooltime_ = 0;
  m_totalgroupid_ = 0;
  m_activegroupid_ = 0;
  m_protecttime_ = 0;
  m_additem_ = 0;
  m_addnum_ = 0;
  m_shopid_ = 0;
  m_storehousetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureFindtreasure::~E_FindtreasureFindtreasure() {
  SharedDtor();
}

void E_FindtreasureFindtreasure::SharedDtor() {
  if (m_costnum_ != &::google::protobuf::internal::kEmptyString) {
    delete m_costnum_;
  }
  if (m_poolgroupid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_poolgroupid_;
  }
  if (this != default_instance_) {
  }
}

void E_FindtreasureFindtreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureFindtreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureFindtreasure_descriptor_;
}

const E_FindtreasureFindtreasure& E_FindtreasureFindtreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureFindtreasure* E_FindtreasureFindtreasure::default_instance_ = NULL;

E_FindtreasureFindtreasure* E_FindtreasureFindtreasure::New() const {
  return new E_FindtreasureFindtreasure;
}

void E_FindtreasureFindtreasure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_type_ = 0;
    m_functionunlock_ = 0;
    m_costid_ = GOOGLE_LONGLONG(0);
    if (has_m_costnum()) {
      if (m_costnum_ != &::google::protobuf::internal::kEmptyString) {
        m_costnum_->clear();
      }
    }
    m_contitem_ = 0;
    if (has_m_poolgroupid()) {
      if (m_poolgroupid_ != &::google::protobuf::internal::kEmptyString) {
        m_poolgroupid_->clear();
      }
    }
    m_loop_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_pooltime_ = 0;
    m_totalgroupid_ = 0;
    m_activegroupid_ = 0;
    m_protecttime_ = 0;
    m_additem_ = 0;
    m_addnum_ = 0;
    m_shopid_ = 0;
    m_storehousetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureFindtreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_functionUnlock;
        break;
      }

      // optional int32 m_functionUnlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_functionUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_functionunlock_)));
          set_has_m_functionunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_costID;
        break;
      }

      // optional int64 m_costID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_costid_)));
          set_has_m_costid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_m_costNum;
        break;
      }

      // optional string m_costNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_costNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_costnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_costnum().data(), this->m_costnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_ContItem;
        break;
      }

      // optional int32 m_ContItem = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ContItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_contitem_)));
          set_has_m_contitem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_m_poolGroupId;
        break;
      }

      // optional string m_poolGroupId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_poolGroupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_poolgroupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_poolgroupid().data(), this->m_poolgroupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_loop;
        break;
      }

      // optional int32 m_loop = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_loop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_loop_)));
          set_has_m_loop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_poolTime;
        break;
      }

      // optional int32 m_poolTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_poolTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_pooltime_)));
          set_has_m_pooltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_totalGroupID;
        break;
      }

      // optional int32 m_totalGroupID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_totalGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_totalgroupid_)));
          set_has_m_totalgroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_activeGroupID;
        break;
      }

      // optional int32 m_activeGroupID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_activeGroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_activegroupid_)));
          set_has_m_activegroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_protectTime;
        break;
      }

      // optional int32 m_protectTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_protectTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_protecttime_)));
          set_has_m_protecttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_addItem;
        break;
      }

      // optional int32 m_addItem = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_additem_)));
          set_has_m_additem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_addNum;
        break;
      }

      // optional int32 m_addNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_addNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_addnum_)));
          set_has_m_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_shopID;
        break;
      }

      // optional int32 m_shopID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_shopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_shopid_)));
          set_has_m_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_storehouseType;
        break;
      }

      // optional int32 m_storehouseType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_storehouseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_storehousetype_)));
          set_has_m_storehousetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureFindtreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  // optional int32 m_functionUnlock = 3;
  if (has_m_functionunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_functionunlock(), output);
  }

  // optional int64 m_costID = 4;
  if (has_m_costid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_costid(), output);
  }

  // optional string m_costNum = 5;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_costnum().data(), this->m_costnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->m_costnum(), output);
  }

  // optional int32 m_ContItem = 6;
  if (has_m_contitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_contitem(), output);
  }

  // optional string m_poolGroupId = 7;
  if (has_m_poolgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_poolgroupid().data(), this->m_poolgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->m_poolgroupid(), output);
  }

  // optional int32 m_loop = 8;
  if (has_m_loop()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_loop(), output);
  }

  // optional int32 m_poolTime = 9;
  if (has_m_pooltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_pooltime(), output);
  }

  // optional int32 m_totalGroupID = 10;
  if (has_m_totalgroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_totalgroupid(), output);
  }

  // optional int32 m_activeGroupID = 11;
  if (has_m_activegroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_activegroupid(), output);
  }

  // optional int32 m_protectTime = 12;
  if (has_m_protecttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_protecttime(), output);
  }

  // optional int32 m_addItem = 13;
  if (has_m_additem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->m_additem(), output);
  }

  // optional int32 m_addNum = 14;
  if (has_m_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_addnum(), output);
  }

  // optional int32 m_shopID = 15;
  if (has_m_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_shopid(), output);
  }

  // optional int32 m_storehouseType = 16;
  if (has_m_storehousetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_storehousetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureFindtreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  // optional int32 m_functionUnlock = 3;
  if (has_m_functionunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_functionunlock(), target);
  }

  // optional int64 m_costID = 4;
  if (has_m_costid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_costid(), target);
  }

  // optional string m_costNum = 5;
  if (has_m_costnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_costnum().data(), this->m_costnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->m_costnum(), target);
  }

  // optional int32 m_ContItem = 6;
  if (has_m_contitem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_contitem(), target);
  }

  // optional string m_poolGroupId = 7;
  if (has_m_poolgroupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_poolgroupid().data(), this->m_poolgroupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->m_poolgroupid(), target);
  }

  // optional int32 m_loop = 8;
  if (has_m_loop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_loop(), target);
  }

  // optional int32 m_poolTime = 9;
  if (has_m_pooltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_pooltime(), target);
  }

  // optional int32 m_totalGroupID = 10;
  if (has_m_totalgroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_totalgroupid(), target);
  }

  // optional int32 m_activeGroupID = 11;
  if (has_m_activegroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_activegroupid(), target);
  }

  // optional int32 m_protectTime = 12;
  if (has_m_protecttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_protecttime(), target);
  }

  // optional int32 m_addItem = 13;
  if (has_m_additem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->m_additem(), target);
  }

  // optional int32 m_addNum = 14;
  if (has_m_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_addnum(), target);
  }

  // optional int32 m_shopID = 15;
  if (has_m_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_shopid(), target);
  }

  // optional int32 m_storehouseType = 16;
  if (has_m_storehousetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_storehousetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureFindtreasure::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_functionUnlock = 3;
    if (has_m_functionunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_functionunlock());
    }

    // optional int64 m_costID = 4;
    if (has_m_costid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_costid());
    }

    // optional string m_costNum = 5;
    if (has_m_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_costnum());
    }

    // optional int32 m_ContItem = 6;
    if (has_m_contitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_contitem());
    }

    // optional string m_poolGroupId = 7;
    if (has_m_poolgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_poolgroupid());
    }

    // optional int32 m_loop = 8;
    if (has_m_loop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_loop());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_poolTime = 9;
    if (has_m_pooltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_pooltime());
    }

    // optional int32 m_totalGroupID = 10;
    if (has_m_totalgroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_totalgroupid());
    }

    // optional int32 m_activeGroupID = 11;
    if (has_m_activegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_activegroupid());
    }

    // optional int32 m_protectTime = 12;
    if (has_m_protecttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_protecttime());
    }

    // optional int32 m_addItem = 13;
    if (has_m_additem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_additem());
    }

    // optional int32 m_addNum = 14;
    if (has_m_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_addnum());
    }

    // optional int32 m_shopID = 15;
    if (has_m_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_shopid());
    }

    // optional int32 m_storehouseType = 16;
    if (has_m_storehousetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_storehousetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureFindtreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureFindtreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureFindtreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureFindtreasure::MergeFrom(const E_FindtreasureFindtreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_functionunlock()) {
      set_m_functionunlock(from.m_functionunlock());
    }
    if (from.has_m_costid()) {
      set_m_costid(from.m_costid());
    }
    if (from.has_m_costnum()) {
      set_m_costnum(from.m_costnum());
    }
    if (from.has_m_contitem()) {
      set_m_contitem(from.m_contitem());
    }
    if (from.has_m_poolgroupid()) {
      set_m_poolgroupid(from.m_poolgroupid());
    }
    if (from.has_m_loop()) {
      set_m_loop(from.m_loop());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_pooltime()) {
      set_m_pooltime(from.m_pooltime());
    }
    if (from.has_m_totalgroupid()) {
      set_m_totalgroupid(from.m_totalgroupid());
    }
    if (from.has_m_activegroupid()) {
      set_m_activegroupid(from.m_activegroupid());
    }
    if (from.has_m_protecttime()) {
      set_m_protecttime(from.m_protecttime());
    }
    if (from.has_m_additem()) {
      set_m_additem(from.m_additem());
    }
    if (from.has_m_addnum()) {
      set_m_addnum(from.m_addnum());
    }
    if (from.has_m_shopid()) {
      set_m_shopid(from.m_shopid());
    }
    if (from.has_m_storehousetype()) {
      set_m_storehousetype(from.m_storehousetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureFindtreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureFindtreasure::CopyFrom(const E_FindtreasureFindtreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureFindtreasure::IsInitialized() const {

  return true;
}

void E_FindtreasureFindtreasure::Swap(E_FindtreasureFindtreasure* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_functionunlock_, other->m_functionunlock_);
    std::swap(m_costid_, other->m_costid_);
    std::swap(m_costnum_, other->m_costnum_);
    std::swap(m_contitem_, other->m_contitem_);
    std::swap(m_poolgroupid_, other->m_poolgroupid_);
    std::swap(m_loop_, other->m_loop_);
    std::swap(m_pooltime_, other->m_pooltime_);
    std::swap(m_totalgroupid_, other->m_totalgroupid_);
    std::swap(m_activegroupid_, other->m_activegroupid_);
    std::swap(m_protecttime_, other->m_protecttime_);
    std::swap(m_additem_, other->m_additem_);
    std::swap(m_addnum_, other->m_addnum_);
    std::swap(m_shopid_, other->m_shopid_);
    std::swap(m_storehousetype_, other->m_storehousetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureFindtreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureFindtreasure_descriptor_;
  metadata.reflection = E_FindtreasureFindtreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FindtreasureFindtreasure::kEFindtreasureFindtreasureListFieldNumber;
#endif  // !_MSC_VER

Sheet_FindtreasureFindtreasure::Sheet_FindtreasureFindtreasure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FindtreasureFindtreasure::InitAsDefaultInstance() {
}

Sheet_FindtreasureFindtreasure::Sheet_FindtreasureFindtreasure(const Sheet_FindtreasureFindtreasure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FindtreasureFindtreasure::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FindtreasureFindtreasure::~Sheet_FindtreasureFindtreasure() {
  SharedDtor();
}

void Sheet_FindtreasureFindtreasure::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FindtreasureFindtreasure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FindtreasureFindtreasure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FindtreasureFindtreasure_descriptor_;
}

const Sheet_FindtreasureFindtreasure& Sheet_FindtreasureFindtreasure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

Sheet_FindtreasureFindtreasure* Sheet_FindtreasureFindtreasure::default_instance_ = NULL;

Sheet_FindtreasureFindtreasure* Sheet_FindtreasureFindtreasure::New() const {
  return new Sheet_FindtreasureFindtreasure;
}

void Sheet_FindtreasureFindtreasure::Clear() {
  e_findtreasurefindtreasure_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FindtreasureFindtreasure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FindtreasureFindtreasure E_FindtreasureFindtreasure_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FindtreasureFindtreasure_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_findtreasurefindtreasure_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FindtreasureFindtreasure_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FindtreasureFindtreasure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FindtreasureFindtreasure E_FindtreasureFindtreasure_List = 1;
  for (int i = 0; i < this->e_findtreasurefindtreasure_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_findtreasurefindtreasure_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FindtreasureFindtreasure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FindtreasureFindtreasure E_FindtreasureFindtreasure_List = 1;
  for (int i = 0; i < this->e_findtreasurefindtreasure_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_findtreasurefindtreasure_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FindtreasureFindtreasure::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FindtreasureFindtreasure E_FindtreasureFindtreasure_List = 1;
  total_size += 1 * this->e_findtreasurefindtreasure_list_size();
  for (int i = 0; i < this->e_findtreasurefindtreasure_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_findtreasurefindtreasure_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FindtreasureFindtreasure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FindtreasureFindtreasure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FindtreasureFindtreasure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FindtreasureFindtreasure::MergeFrom(const Sheet_FindtreasureFindtreasure& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_findtreasurefindtreasure_list_.MergeFrom(from.e_findtreasurefindtreasure_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FindtreasureFindtreasure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FindtreasureFindtreasure::CopyFrom(const Sheet_FindtreasureFindtreasure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FindtreasureFindtreasure::IsInitialized() const {

  return true;
}

void Sheet_FindtreasureFindtreasure::Swap(Sheet_FindtreasureFindtreasure* other) {
  if (other != this) {
    e_findtreasurefindtreasure_list_.Swap(&other->e_findtreasurefindtreasure_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FindtreasureFindtreasure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FindtreasureFindtreasure_descriptor_;
  metadata.reflection = Sheet_FindtreasureFindtreasure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureFindpool::kMIdFieldNumber;
const int E_FindtreasureFindpool::kMGroupIDFieldNumber;
const int E_FindtreasureFindpool::kMShowOrderFieldNumber;
const int E_FindtreasureFindpool::kMItemidFieldNumber;
const int E_FindtreasureFindpool::kMNumFieldNumber;
const int E_FindtreasureFindpool::kMProfFieldNumber;
const int E_FindtreasureFindpool::kMWeightsFieldNumber;
const int E_FindtreasureFindpool::kMProWeightsFieldNumber;
const int E_FindtreasureFindpool::kMRecordFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureFindpool::E_FindtreasureFindpool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureFindpool::InitAsDefaultInstance() {
}

E_FindtreasureFindpool::E_FindtreasureFindpool(const E_FindtreasureFindpool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureFindpool::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_showorder_ = 0;
  m_itemid_ = GOOGLE_LONGLONG(0);
  m_num_ = 0;
  m_prof_ = 0;
  m_weights_ = 0;
  m_proweights_ = 0;
  m_record_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureFindpool::~E_FindtreasureFindpool() {
  SharedDtor();
}

void E_FindtreasureFindpool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FindtreasureFindpool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureFindpool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureFindpool_descriptor_;
}

const E_FindtreasureFindpool& E_FindtreasureFindpool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureFindpool* E_FindtreasureFindpool::default_instance_ = NULL;

E_FindtreasureFindpool* E_FindtreasureFindpool::New() const {
  return new E_FindtreasureFindpool;
}

void E_FindtreasureFindpool::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_showorder_ = 0;
    m_itemid_ = GOOGLE_LONGLONG(0);
    m_num_ = 0;
    m_prof_ = 0;
    m_weights_ = 0;
    m_proweights_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_record_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureFindpool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupID;
        break;
      }

      // optional int32 m_groupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_showOrder;
        break;
      }

      // optional int32 m_showOrder = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_showOrder:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_showorder_)));
          set_has_m_showorder();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itemid;
        break;
      }

      // optional int64 m_itemid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_prof;
        break;
      }

      // optional int32 m_prof = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_prof_)));
          set_has_m_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_weights;
        break;
      }

      // optional int32 m_weights = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_weights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_weights_)));
          set_has_m_weights();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_proWeights;
        break;
      }

      // optional int32 m_proWeights = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_proWeights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_proweights_)));
          set_has_m_proweights();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_Record;
        break;
      }

      // optional int32 m_Record = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Record:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_record_)));
          set_has_m_record();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureFindpool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_showOrder = 3;
  if (has_m_showorder()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_showorder(), output);
  }

  // optional int64 m_itemid = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_itemid(), output);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_num(), output);
  }

  // optional int32 m_prof = 6;
  if (has_m_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_prof(), output);
  }

  // optional int32 m_weights = 7;
  if (has_m_weights()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_weights(), output);
  }

  // optional int32 m_proWeights = 8;
  if (has_m_proweights()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_proweights(), output);
  }

  // optional int32 m_Record = 9;
  if (has_m_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_record(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureFindpool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_showOrder = 3;
  if (has_m_showorder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_showorder(), target);
  }

  // optional int64 m_itemid = 4;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_itemid(), target);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_num(), target);
  }

  // optional int32 m_prof = 6;
  if (has_m_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_prof(), target);
  }

  // optional int32 m_weights = 7;
  if (has_m_weights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_weights(), target);
  }

  // optional int32 m_proWeights = 8;
  if (has_m_proweights()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_proweights(), target);
  }

  // optional int32 m_Record = 9;
  if (has_m_record()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_record(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureFindpool::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupID = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_showOrder = 3;
    if (has_m_showorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_showorder());
    }

    // optional int64 m_itemid = 4;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_itemid());
    }

    // optional int32 m_num = 5;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_prof = 6;
    if (has_m_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_prof());
    }

    // optional int32 m_weights = 7;
    if (has_m_weights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_weights());
    }

    // optional int32 m_proWeights = 8;
    if (has_m_proweights()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_proweights());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_Record = 9;
    if (has_m_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_record());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureFindpool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureFindpool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureFindpool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureFindpool::MergeFrom(const E_FindtreasureFindpool& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_showorder()) {
      set_m_showorder(from.m_showorder());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_prof()) {
      set_m_prof(from.m_prof());
    }
    if (from.has_m_weights()) {
      set_m_weights(from.m_weights());
    }
    if (from.has_m_proweights()) {
      set_m_proweights(from.m_proweights());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_record()) {
      set_m_record(from.m_record());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureFindpool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureFindpool::CopyFrom(const E_FindtreasureFindpool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureFindpool::IsInitialized() const {

  return true;
}

void E_FindtreasureFindpool::Swap(E_FindtreasureFindpool* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_showorder_, other->m_showorder_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    std::swap(m_prof_, other->m_prof_);
    std::swap(m_weights_, other->m_weights_);
    std::swap(m_proweights_, other->m_proweights_);
    std::swap(m_record_, other->m_record_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureFindpool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureFindpool_descriptor_;
  metadata.reflection = E_FindtreasureFindpool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FindtreasureFindpool::kEFindtreasureFindpoolListFieldNumber;
#endif  // !_MSC_VER

Sheet_FindtreasureFindpool::Sheet_FindtreasureFindpool()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FindtreasureFindpool::InitAsDefaultInstance() {
}

Sheet_FindtreasureFindpool::Sheet_FindtreasureFindpool(const Sheet_FindtreasureFindpool& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FindtreasureFindpool::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FindtreasureFindpool::~Sheet_FindtreasureFindpool() {
  SharedDtor();
}

void Sheet_FindtreasureFindpool::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FindtreasureFindpool::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FindtreasureFindpool::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FindtreasureFindpool_descriptor_;
}

const Sheet_FindtreasureFindpool& Sheet_FindtreasureFindpool::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

Sheet_FindtreasureFindpool* Sheet_FindtreasureFindpool::default_instance_ = NULL;

Sheet_FindtreasureFindpool* Sheet_FindtreasureFindpool::New() const {
  return new Sheet_FindtreasureFindpool;
}

void Sheet_FindtreasureFindpool::Clear() {
  e_findtreasurefindpool_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FindtreasureFindpool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FindtreasureFindpool E_FindtreasureFindpool_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FindtreasureFindpool_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_findtreasurefindpool_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FindtreasureFindpool_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FindtreasureFindpool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FindtreasureFindpool E_FindtreasureFindpool_List = 1;
  for (int i = 0; i < this->e_findtreasurefindpool_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_findtreasurefindpool_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FindtreasureFindpool::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FindtreasureFindpool E_FindtreasureFindpool_List = 1;
  for (int i = 0; i < this->e_findtreasurefindpool_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_findtreasurefindpool_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FindtreasureFindpool::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FindtreasureFindpool E_FindtreasureFindpool_List = 1;
  total_size += 1 * this->e_findtreasurefindpool_list_size();
  for (int i = 0; i < this->e_findtreasurefindpool_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_findtreasurefindpool_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FindtreasureFindpool::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FindtreasureFindpool* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FindtreasureFindpool*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FindtreasureFindpool::MergeFrom(const Sheet_FindtreasureFindpool& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_findtreasurefindpool_list_.MergeFrom(from.e_findtreasurefindpool_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FindtreasureFindpool::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FindtreasureFindpool::CopyFrom(const Sheet_FindtreasureFindpool& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FindtreasureFindpool::IsInitialized() const {

  return true;
}

void Sheet_FindtreasureFindpool::Swap(Sheet_FindtreasureFindpool* other) {
  if (other != this) {
    e_findtreasurefindpool_list_.Swap(&other->e_findtreasurefindpool_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FindtreasureFindpool::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FindtreasureFindpool_descriptor_;
  metadata.reflection = Sheet_FindtreasureFindpool_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureConstant::kMIdFieldNumber;
const int E_FindtreasureConstant::kMDragonSeverTimeFieldNumber;
const int E_FindtreasureConstant::kMGodSeverTimeFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureConstant::E_FindtreasureConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureConstant::InitAsDefaultInstance() {
}

E_FindtreasureConstant::E_FindtreasureConstant(const E_FindtreasureConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureConstant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_dragonsevertime_ = 0;
  m_godsevertime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureConstant::~E_FindtreasureConstant() {
  SharedDtor();
}

void E_FindtreasureConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FindtreasureConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureConstant_descriptor_;
}

const E_FindtreasureConstant& E_FindtreasureConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureConstant* E_FindtreasureConstant::default_instance_ = NULL;

E_FindtreasureConstant* E_FindtreasureConstant::New() const {
  return new E_FindtreasureConstant;
}

void E_FindtreasureConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_dragonsevertime_ = 0;
    m_godsevertime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_dragonSeverTime;
        break;
      }

      // optional int32 m_dragonSeverTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_dragonSeverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_dragonsevertime_)));
          set_has_m_dragonsevertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_godSeverTime;
        break;
      }

      // optional int32 m_godSeverTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_godSeverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_godsevertime_)));
          set_has_m_godsevertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_dragonSeverTime = 2;
  if (has_m_dragonsevertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_dragonsevertime(), output);
  }

  // optional int32 m_godSeverTime = 3;
  if (has_m_godsevertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_godsevertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_dragonSeverTime = 2;
  if (has_m_dragonsevertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_dragonsevertime(), target);
  }

  // optional int32 m_godSeverTime = 3;
  if (has_m_godsevertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_godsevertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_dragonSeverTime = 2;
    if (has_m_dragonsevertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_dragonsevertime());
    }

    // optional int32 m_godSeverTime = 3;
    if (has_m_godsevertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_godsevertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureConstant::MergeFrom(const E_FindtreasureConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_dragonsevertime()) {
      set_m_dragonsevertime(from.m_dragonsevertime());
    }
    if (from.has_m_godsevertime()) {
      set_m_godsevertime(from.m_godsevertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureConstant::CopyFrom(const E_FindtreasureConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureConstant::IsInitialized() const {

  return true;
}

void E_FindtreasureConstant::Swap(E_FindtreasureConstant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_dragonsevertime_, other->m_dragonsevertime_);
    std::swap(m_godsevertime_, other->m_godsevertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureConstant_descriptor_;
  metadata.reflection = E_FindtreasureConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FindtreasureConstant::kEFindtreasureConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_FindtreasureConstant::Sheet_FindtreasureConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FindtreasureConstant::InitAsDefaultInstance() {
}

Sheet_FindtreasureConstant::Sheet_FindtreasureConstant(const Sheet_FindtreasureConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FindtreasureConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FindtreasureConstant::~Sheet_FindtreasureConstant() {
  SharedDtor();
}

void Sheet_FindtreasureConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FindtreasureConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FindtreasureConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FindtreasureConstant_descriptor_;
}

const Sheet_FindtreasureConstant& Sheet_FindtreasureConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

Sheet_FindtreasureConstant* Sheet_FindtreasureConstant::default_instance_ = NULL;

Sheet_FindtreasureConstant* Sheet_FindtreasureConstant::New() const {
  return new Sheet_FindtreasureConstant;
}

void Sheet_FindtreasureConstant::Clear() {
  e_findtreasureconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FindtreasureConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FindtreasureConstant E_FindtreasureConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FindtreasureConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_findtreasureconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FindtreasureConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FindtreasureConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FindtreasureConstant E_FindtreasureConstant_List = 1;
  for (int i = 0; i < this->e_findtreasureconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_findtreasureconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FindtreasureConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FindtreasureConstant E_FindtreasureConstant_List = 1;
  for (int i = 0; i < this->e_findtreasureconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_findtreasureconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FindtreasureConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FindtreasureConstant E_FindtreasureConstant_List = 1;
  total_size += 1 * this->e_findtreasureconstant_list_size();
  for (int i = 0; i < this->e_findtreasureconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_findtreasureconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FindtreasureConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FindtreasureConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FindtreasureConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FindtreasureConstant::MergeFrom(const Sheet_FindtreasureConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_findtreasureconstant_list_.MergeFrom(from.e_findtreasureconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FindtreasureConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FindtreasureConstant::CopyFrom(const Sheet_FindtreasureConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FindtreasureConstant::IsInitialized() const {

  return true;
}

void Sheet_FindtreasureConstant::Swap(Sheet_FindtreasureConstant* other) {
  if (other != this) {
    e_findtreasureconstant_list_.Swap(&other->e_findtreasureconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FindtreasureConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FindtreasureConstant_descriptor_;
  metadata.reflection = Sheet_FindtreasureConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureTotal::kMIdFieldNumber;
const int E_FindtreasureTotal::kMGroupidFieldNumber;
const int E_FindtreasureTotal::kMTypeFieldNumber;
const int E_FindtreasureTotal::kMItemIDFieldNumber;
const int E_FindtreasureTotal::kMNumFieldNumber;
const int E_FindtreasureTotal::kMArgFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureTotal::E_FindtreasureTotal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureTotal::InitAsDefaultInstance() {
}

E_FindtreasureTotal::E_FindtreasureTotal(const E_FindtreasureTotal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureTotal::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_type_ = 0;
  m_itemid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureTotal::~E_FindtreasureTotal() {
  SharedDtor();
}

void E_FindtreasureTotal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FindtreasureTotal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureTotal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureTotal_descriptor_;
}

const E_FindtreasureTotal& E_FindtreasureTotal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureTotal* E_FindtreasureTotal::default_instance_ = NULL;

E_FindtreasureTotal* E_FindtreasureTotal::New() const {
  return new E_FindtreasureTotal;
}

void E_FindtreasureTotal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_type_ = 0;
    m_itemid_ = 0;
    m_num_ = 0;
  }
  m_arg_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureTotal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itemID;
        break;
      }

      // optional int32 m_itemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_arg;
        break;
      }

      // repeated int32 m_arg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_arg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_m_arg())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_arg())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_arg;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureTotal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_itemID = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_itemid(), output);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_num(), output);
  }

  // repeated int32 m_arg = 6;
  for (int i = 0; i < this->m_arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->m_arg(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureTotal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_itemID = 4;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_itemid(), target);
  }

  // optional int32 m_num = 5;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_num(), target);
  }

  // repeated int32 m_arg = 6;
  for (int i = 0; i < this->m_arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->m_arg(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureTotal::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_itemID = 4;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_num = 5;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  // repeated int32 m_arg = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_arg_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_arg(i));
    }
    total_size += 1 * this->m_arg_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureTotal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureTotal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureTotal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureTotal::MergeFrom(const E_FindtreasureTotal& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_arg_.MergeFrom(from.m_arg_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureTotal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureTotal::CopyFrom(const E_FindtreasureTotal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureTotal::IsInitialized() const {

  return true;
}

void E_FindtreasureTotal::Swap(E_FindtreasureTotal* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_num_, other->m_num_);
    m_arg_.Swap(&other->m_arg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureTotal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureTotal_descriptor_;
  metadata.reflection = E_FindtreasureTotal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FindtreasureTotal::kEFindtreasureTotalListFieldNumber;
#endif  // !_MSC_VER

Sheet_FindtreasureTotal::Sheet_FindtreasureTotal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FindtreasureTotal::InitAsDefaultInstance() {
}

Sheet_FindtreasureTotal::Sheet_FindtreasureTotal(const Sheet_FindtreasureTotal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FindtreasureTotal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FindtreasureTotal::~Sheet_FindtreasureTotal() {
  SharedDtor();
}

void Sheet_FindtreasureTotal::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FindtreasureTotal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FindtreasureTotal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FindtreasureTotal_descriptor_;
}

const Sheet_FindtreasureTotal& Sheet_FindtreasureTotal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

Sheet_FindtreasureTotal* Sheet_FindtreasureTotal::default_instance_ = NULL;

Sheet_FindtreasureTotal* Sheet_FindtreasureTotal::New() const {
  return new Sheet_FindtreasureTotal;
}

void Sheet_FindtreasureTotal::Clear() {
  e_findtreasuretotal_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FindtreasureTotal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FindtreasureTotal E_FindtreasureTotal_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FindtreasureTotal_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_findtreasuretotal_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FindtreasureTotal_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FindtreasureTotal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FindtreasureTotal E_FindtreasureTotal_List = 1;
  for (int i = 0; i < this->e_findtreasuretotal_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_findtreasuretotal_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FindtreasureTotal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FindtreasureTotal E_FindtreasureTotal_List = 1;
  for (int i = 0; i < this->e_findtreasuretotal_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_findtreasuretotal_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FindtreasureTotal::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FindtreasureTotal E_FindtreasureTotal_List = 1;
  total_size += 1 * this->e_findtreasuretotal_list_size();
  for (int i = 0; i < this->e_findtreasuretotal_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_findtreasuretotal_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FindtreasureTotal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FindtreasureTotal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FindtreasureTotal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FindtreasureTotal::MergeFrom(const Sheet_FindtreasureTotal& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_findtreasuretotal_list_.MergeFrom(from.e_findtreasuretotal_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FindtreasureTotal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FindtreasureTotal::CopyFrom(const Sheet_FindtreasureTotal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FindtreasureTotal::IsInitialized() const {

  return true;
}

void Sheet_FindtreasureTotal::Swap(Sheet_FindtreasureTotal* other) {
  if (other != this) {
    e_findtreasuretotal_list_.Swap(&other->e_findtreasuretotal_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FindtreasureTotal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FindtreasureTotal_descriptor_;
  metadata.reflection = Sheet_FindtreasureTotal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureActive::kMIdFieldNumber;
const int E_FindtreasureActive::kMGroupidFieldNumber;
const int E_FindtreasureActive::kMOpentimeFieldNumber;
const int E_FindtreasureActive::kMDurTimeFieldNumber;
const int E_FindtreasureActive::kMCloseTimeFieldNumber;
const int E_FindtreasureActive::kMTypeFieldNumber;
const int E_FindtreasureActive::kMTypeGroupIdFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureActive::E_FindtreasureActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureActive::InitAsDefaultInstance() {
}

E_FindtreasureActive::E_FindtreasureActive(const E_FindtreasureActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureActive::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_opentime_ = 0;
  m_durtime_ = 0;
  m_closetime_ = 0;
  m_type_ = 0;
  m_typegroupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureActive::~E_FindtreasureActive() {
  SharedDtor();
}

void E_FindtreasureActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FindtreasureActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureActive_descriptor_;
}

const E_FindtreasureActive& E_FindtreasureActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureActive* E_FindtreasureActive::default_instance_ = NULL;

E_FindtreasureActive* E_FindtreasureActive::New() const {
  return new E_FindtreasureActive;
}

void E_FindtreasureActive::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_opentime_ = 0;
    m_durtime_ = 0;
    m_closetime_ = 0;
    m_type_ = 0;
    m_typegroupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_opentime;
        break;
      }

      // optional int32 m_opentime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_opentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_opentime_)));
          set_has_m_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_durTime;
        break;
      }

      // optional int32 m_durTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_durTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_durtime_)));
          set_has_m_durtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_closeTime;
        break;
      }

      // optional int32 m_closeTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_closeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_closetime_)));
          set_has_m_closetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_typeGroupId;
        break;
      }

      // optional int32 m_typeGroupId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_typeGroupId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_typegroupid_)));
          set_has_m_typegroupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_opentime = 3;
  if (has_m_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_opentime(), output);
  }

  // optional int32 m_durTime = 4;
  if (has_m_durtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_durtime(), output);
  }

  // optional int32 m_closeTime = 5;
  if (has_m_closetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_closetime(), output);
  }

  // optional int32 m_type = 6;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_type(), output);
  }

  // optional int32 m_typeGroupId = 7;
  if (has_m_typegroupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_typegroupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_opentime = 3;
  if (has_m_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_opentime(), target);
  }

  // optional int32 m_durTime = 4;
  if (has_m_durtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_durtime(), target);
  }

  // optional int32 m_closeTime = 5;
  if (has_m_closetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_closetime(), target);
  }

  // optional int32 m_type = 6;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_type(), target);
  }

  // optional int32 m_typeGroupId = 7;
  if (has_m_typegroupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_typegroupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureActive::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_opentime = 3;
    if (has_m_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_opentime());
    }

    // optional int32 m_durTime = 4;
    if (has_m_durtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_durtime());
    }

    // optional int32 m_closeTime = 5;
    if (has_m_closetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_closetime());
    }

    // optional int32 m_type = 6;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_typeGroupId = 7;
    if (has_m_typegroupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_typegroupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureActive::MergeFrom(const E_FindtreasureActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_opentime()) {
      set_m_opentime(from.m_opentime());
    }
    if (from.has_m_durtime()) {
      set_m_durtime(from.m_durtime());
    }
    if (from.has_m_closetime()) {
      set_m_closetime(from.m_closetime());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_typegroupid()) {
      set_m_typegroupid(from.m_typegroupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureActive::CopyFrom(const E_FindtreasureActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureActive::IsInitialized() const {

  return true;
}

void E_FindtreasureActive::Swap(E_FindtreasureActive* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_opentime_, other->m_opentime_);
    std::swap(m_durtime_, other->m_durtime_);
    std::swap(m_closetime_, other->m_closetime_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_typegroupid_, other->m_typegroupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureActive_descriptor_;
  metadata.reflection = E_FindtreasureActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FindtreasureActive::kEFindtreasureActiveListFieldNumber;
#endif  // !_MSC_VER

Sheet_FindtreasureActive::Sheet_FindtreasureActive()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FindtreasureActive::InitAsDefaultInstance() {
}

Sheet_FindtreasureActive::Sheet_FindtreasureActive(const Sheet_FindtreasureActive& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FindtreasureActive::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FindtreasureActive::~Sheet_FindtreasureActive() {
  SharedDtor();
}

void Sheet_FindtreasureActive::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FindtreasureActive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FindtreasureActive::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FindtreasureActive_descriptor_;
}

const Sheet_FindtreasureActive& Sheet_FindtreasureActive::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

Sheet_FindtreasureActive* Sheet_FindtreasureActive::default_instance_ = NULL;

Sheet_FindtreasureActive* Sheet_FindtreasureActive::New() const {
  return new Sheet_FindtreasureActive;
}

void Sheet_FindtreasureActive::Clear() {
  e_findtreasureactive_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FindtreasureActive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FindtreasureActive E_FindtreasureActive_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FindtreasureActive_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_findtreasureactive_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FindtreasureActive_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FindtreasureActive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FindtreasureActive E_FindtreasureActive_List = 1;
  for (int i = 0; i < this->e_findtreasureactive_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_findtreasureactive_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FindtreasureActive::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FindtreasureActive E_FindtreasureActive_List = 1;
  for (int i = 0; i < this->e_findtreasureactive_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_findtreasureactive_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FindtreasureActive::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FindtreasureActive E_FindtreasureActive_List = 1;
  total_size += 1 * this->e_findtreasureactive_list_size();
  for (int i = 0; i < this->e_findtreasureactive_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_findtreasureactive_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FindtreasureActive::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FindtreasureActive* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FindtreasureActive*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FindtreasureActive::MergeFrom(const Sheet_FindtreasureActive& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_findtreasureactive_list_.MergeFrom(from.e_findtreasureactive_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FindtreasureActive::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FindtreasureActive::CopyFrom(const Sheet_FindtreasureActive& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FindtreasureActive::IsInitialized() const {

  return true;
}

void Sheet_FindtreasureActive::Swap(Sheet_FindtreasureActive* other) {
  if (other != this) {
    e_findtreasureactive_list_.Swap(&other->e_findtreasureactive_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FindtreasureActive::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FindtreasureActive_descriptor_;
  metadata.reflection = Sheet_FindtreasureActive_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureActiveup::kMIdFieldNumber;
const int E_FindtreasureActiveup::kMGroupIDFieldNumber;
const int E_FindtreasureActiveup::kMTypeFieldNumber;
const int E_FindtreasureActiveup::kMItemidFieldNumber;
const int E_FindtreasureActiveup::kMProArgFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureActiveup::E_FindtreasureActiveup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureActiveup::InitAsDefaultInstance() {
}

E_FindtreasureActiveup::E_FindtreasureActiveup(const E_FindtreasureActiveup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureActiveup::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_type_ = 0;
  m_itemid_ = 0;
  m_proarg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureActiveup::~E_FindtreasureActiveup() {
  SharedDtor();
}

void E_FindtreasureActiveup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FindtreasureActiveup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureActiveup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureActiveup_descriptor_;
}

const E_FindtreasureActiveup& E_FindtreasureActiveup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureActiveup* E_FindtreasureActiveup::default_instance_ = NULL;

E_FindtreasureActiveup* E_FindtreasureActiveup::New() const {
  return new E_FindtreasureActiveup;
}

void E_FindtreasureActiveup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_type_ = 0;
    m_itemid_ = 0;
    m_proarg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureActiveup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupID;
        break;
      }

      // optional int32 m_groupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_itemid;
        break;
      }

      // optional int32 m_itemid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_proArg;
        break;
      }

      // optional int32 m_proArg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_proArg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_proarg_)));
          set_has_m_proarg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureActiveup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_itemid(), output);
  }

  // optional int32 m_proArg = 5;
  if (has_m_proarg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_proarg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureActiveup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupID = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_itemid = 4;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_itemid(), target);
  }

  // optional int32 m_proArg = 5;
  if (has_m_proarg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_proarg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureActiveup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupID = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_itemid = 4;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_proArg = 5;
    if (has_m_proarg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_proarg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureActiveup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureActiveup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureActiveup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureActiveup::MergeFrom(const E_FindtreasureActiveup& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_proarg()) {
      set_m_proarg(from.m_proarg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureActiveup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureActiveup::CopyFrom(const E_FindtreasureActiveup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureActiveup::IsInitialized() const {

  return true;
}

void E_FindtreasureActiveup::Swap(E_FindtreasureActiveup* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_proarg_, other->m_proarg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureActiveup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureActiveup_descriptor_;
  metadata.reflection = E_FindtreasureActiveup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FindtreasureActiveup::kEFindtreasureActiveupListFieldNumber;
#endif  // !_MSC_VER

Sheet_FindtreasureActiveup::Sheet_FindtreasureActiveup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FindtreasureActiveup::InitAsDefaultInstance() {
}

Sheet_FindtreasureActiveup::Sheet_FindtreasureActiveup(const Sheet_FindtreasureActiveup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FindtreasureActiveup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FindtreasureActiveup::~Sheet_FindtreasureActiveup() {
  SharedDtor();
}

void Sheet_FindtreasureActiveup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FindtreasureActiveup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FindtreasureActiveup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FindtreasureActiveup_descriptor_;
}

const Sheet_FindtreasureActiveup& Sheet_FindtreasureActiveup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

Sheet_FindtreasureActiveup* Sheet_FindtreasureActiveup::default_instance_ = NULL;

Sheet_FindtreasureActiveup* Sheet_FindtreasureActiveup::New() const {
  return new Sheet_FindtreasureActiveup;
}

void Sheet_FindtreasureActiveup::Clear() {
  e_findtreasureactiveup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FindtreasureActiveup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FindtreasureActiveup E_FindtreasureActiveup_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FindtreasureActiveup_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_findtreasureactiveup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FindtreasureActiveup_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FindtreasureActiveup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FindtreasureActiveup E_FindtreasureActiveup_List = 1;
  for (int i = 0; i < this->e_findtreasureactiveup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_findtreasureactiveup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FindtreasureActiveup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FindtreasureActiveup E_FindtreasureActiveup_List = 1;
  for (int i = 0; i < this->e_findtreasureactiveup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_findtreasureactiveup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FindtreasureActiveup::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FindtreasureActiveup E_FindtreasureActiveup_List = 1;
  total_size += 1 * this->e_findtreasureactiveup_list_size();
  for (int i = 0; i < this->e_findtreasureactiveup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_findtreasureactiveup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FindtreasureActiveup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FindtreasureActiveup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FindtreasureActiveup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FindtreasureActiveup::MergeFrom(const Sheet_FindtreasureActiveup& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_findtreasureactiveup_list_.MergeFrom(from.e_findtreasureactiveup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FindtreasureActiveup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FindtreasureActiveup::CopyFrom(const Sheet_FindtreasureActiveup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FindtreasureActiveup::IsInitialized() const {

  return true;
}

void Sheet_FindtreasureActiveup::Swap(Sheet_FindtreasureActiveup* other) {
  if (other != this) {
    e_findtreasureactiveup_list_.Swap(&other->e_findtreasureactiveup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FindtreasureActiveup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FindtreasureActiveup_descriptor_;
  metadata.reflection = Sheet_FindtreasureActiveup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureActivegoods::kMGroupidFieldNumber;
const int E_FindtreasureActivegoods::kMItemIDFieldNumber;
const int E_FindtreasureActivegoods::kMTypeFieldNumber;
const int E_FindtreasureActivegoods::kMPriceFieldNumber;
const int E_FindtreasureActivegoods::kMItemNumFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureActivegoods::E_FindtreasureActivegoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureActivegoods::InitAsDefaultInstance() {
}

E_FindtreasureActivegoods::E_FindtreasureActivegoods(const E_FindtreasureActivegoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureActivegoods::SharedCtor() {
  _cached_size_ = 0;
  m_groupid_ = 0;
  m_itemid_ = 0;
  m_type_ = 0;
  m_price_ = 0;
  m_itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureActivegoods::~E_FindtreasureActivegoods() {
  SharedDtor();
}

void E_FindtreasureActivegoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FindtreasureActivegoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureActivegoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureActivegoods_descriptor_;
}

const E_FindtreasureActivegoods& E_FindtreasureActivegoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureActivegoods* E_FindtreasureActivegoods::default_instance_ = NULL;

E_FindtreasureActivegoods* E_FindtreasureActivegoods::New() const {
  return new E_FindtreasureActivegoods;
}

void E_FindtreasureActivegoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_groupid_ = 0;
    m_itemid_ = 0;
    m_type_ = 0;
    m_price_ = 0;
    m_itemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureActivegoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_itemID;
        break;
      }

      // optional int32 m_itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemid_)));
          set_has_m_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_itemNum;
        break;
      }

      // optional int32 m_itemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureActivegoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_groupid = 1;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_groupid(), output);
  }

  // optional int32 m_itemID = 2;
  if (has_m_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_itemid(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_price = 4;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_price(), output);
  }

  // optional int32 m_itemNum = 5;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureActivegoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_groupid = 1;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_groupid(), target);
  }

  // optional int32 m_itemID = 2;
  if (has_m_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_itemid(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_price = 4;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_price(), target);
  }

  // optional int32 m_itemNum = 5;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureActivegoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_groupid = 1;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_itemID = 2;
    if (has_m_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemid());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_price = 4;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_itemNum = 5;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureActivegoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureActivegoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureActivegoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureActivegoods::MergeFrom(const E_FindtreasureActivegoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_itemid()) {
      set_m_itemid(from.m_itemid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureActivegoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureActivegoods::CopyFrom(const E_FindtreasureActivegoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureActivegoods::IsInitialized() const {

  return true;
}

void E_FindtreasureActivegoods::Swap(E_FindtreasureActivegoods* other) {
  if (other != this) {
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_itemid_, other->m_itemid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_itemnum_, other->m_itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureActivegoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureActivegoods_descriptor_;
  metadata.reflection = E_FindtreasureActivegoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FindtreasureActivegoods::kEFindtreasureActivegoodsListFieldNumber;
#endif  // !_MSC_VER

Sheet_FindtreasureActivegoods::Sheet_FindtreasureActivegoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FindtreasureActivegoods::InitAsDefaultInstance() {
}

Sheet_FindtreasureActivegoods::Sheet_FindtreasureActivegoods(const Sheet_FindtreasureActivegoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FindtreasureActivegoods::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FindtreasureActivegoods::~Sheet_FindtreasureActivegoods() {
  SharedDtor();
}

void Sheet_FindtreasureActivegoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FindtreasureActivegoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FindtreasureActivegoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FindtreasureActivegoods_descriptor_;
}

const Sheet_FindtreasureActivegoods& Sheet_FindtreasureActivegoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

Sheet_FindtreasureActivegoods* Sheet_FindtreasureActivegoods::default_instance_ = NULL;

Sheet_FindtreasureActivegoods* Sheet_FindtreasureActivegoods::New() const {
  return new Sheet_FindtreasureActivegoods;
}

void Sheet_FindtreasureActivegoods::Clear() {
  e_findtreasureactivegoods_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FindtreasureActivegoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FindtreasureActivegoods E_FindtreasureActivegoods_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FindtreasureActivegoods_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_findtreasureactivegoods_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FindtreasureActivegoods_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FindtreasureActivegoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FindtreasureActivegoods E_FindtreasureActivegoods_List = 1;
  for (int i = 0; i < this->e_findtreasureactivegoods_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_findtreasureactivegoods_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FindtreasureActivegoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FindtreasureActivegoods E_FindtreasureActivegoods_List = 1;
  for (int i = 0; i < this->e_findtreasureactivegoods_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_findtreasureactivegoods_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FindtreasureActivegoods::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FindtreasureActivegoods E_FindtreasureActivegoods_List = 1;
  total_size += 1 * this->e_findtreasureactivegoods_list_size();
  for (int i = 0; i < this->e_findtreasureactivegoods_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_findtreasureactivegoods_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FindtreasureActivegoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FindtreasureActivegoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FindtreasureActivegoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FindtreasureActivegoods::MergeFrom(const Sheet_FindtreasureActivegoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_findtreasureactivegoods_list_.MergeFrom(from.e_findtreasureactivegoods_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FindtreasureActivegoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FindtreasureActivegoods::CopyFrom(const Sheet_FindtreasureActivegoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FindtreasureActivegoods::IsInitialized() const {

  return true;
}

void Sheet_FindtreasureActivegoods::Swap(Sheet_FindtreasureActivegoods* other) {
  if (other != this) {
    e_findtreasureactivegoods_list_.Swap(&other->e_findtreasureactivegoods_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FindtreasureActivegoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FindtreasureActivegoods_descriptor_;
  metadata.reflection = Sheet_FindtreasureActivegoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureActiveshopGoodDesc::kMNumFieldNumber;
const int E_FindtreasureActiveshopGoodDesc::kMIdFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureActiveshopGoodDesc::E_FindtreasureActiveshopGoodDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureActiveshopGoodDesc::InitAsDefaultInstance() {
}

E_FindtreasureActiveshopGoodDesc::E_FindtreasureActiveshopGoodDesc(const E_FindtreasureActiveshopGoodDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureActiveshopGoodDesc::SharedCtor() {
  _cached_size_ = 0;
  m_num_ = 0;
  m_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureActiveshopGoodDesc::~E_FindtreasureActiveshopGoodDesc() {
  SharedDtor();
}

void E_FindtreasureActiveshopGoodDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FindtreasureActiveshopGoodDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureActiveshopGoodDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureActiveshopGoodDesc_descriptor_;
}

const E_FindtreasureActiveshopGoodDesc& E_FindtreasureActiveshopGoodDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureActiveshopGoodDesc* E_FindtreasureActiveshopGoodDesc::default_instance_ = NULL;

E_FindtreasureActiveshopGoodDesc* E_FindtreasureActiveshopGoodDesc::New() const {
  return new E_FindtreasureActiveshopGoodDesc;
}

void E_FindtreasureActiveshopGoodDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_num_ = 0;
    m_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureActiveshopGoodDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_id;
        break;
      }

      // optional int32 m_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureActiveshopGoodDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_num(), output);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureActiveshopGoodDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_num = 1;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_num(), target);
  }

  // optional int32 m_id = 2;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureActiveshopGoodDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_num = 1;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

    // optional int32 m_id = 2;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureActiveshopGoodDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureActiveshopGoodDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureActiveshopGoodDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureActiveshopGoodDesc::MergeFrom(const E_FindtreasureActiveshopGoodDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureActiveshopGoodDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureActiveshopGoodDesc::CopyFrom(const E_FindtreasureActiveshopGoodDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureActiveshopGoodDesc::IsInitialized() const {

  return true;
}

void E_FindtreasureActiveshopGoodDesc::Swap(E_FindtreasureActiveshopGoodDesc* other) {
  if (other != this) {
    std::swap(m_num_, other->m_num_);
    std::swap(m_id_, other->m_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureActiveshopGoodDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureActiveshopGoodDesc_descriptor_;
  metadata.reflection = E_FindtreasureActiveshopGoodDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureActiveshop::kMIdFieldNumber;
const int E_FindtreasureActiveshop::kMGroupidFieldNumber;
const int E_FindtreasureActiveshop::kMTypeFieldNumber;
const int E_FindtreasureActiveshop::kMPriceFieldNumber;
const int E_FindtreasureActiveshop::kMTimesFieldNumber;
const int E_FindtreasureActiveshop::kMGoodFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureActiveshop::E_FindtreasureActiveshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureActiveshop::InitAsDefaultInstance() {
}

E_FindtreasureActiveshop::E_FindtreasureActiveshop(const E_FindtreasureActiveshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureActiveshop::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_type_ = 0;
  m_price_ = 0;
  m_times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureActiveshop::~E_FindtreasureActiveshop() {
  SharedDtor();
}

void E_FindtreasureActiveshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FindtreasureActiveshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureActiveshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureActiveshop_descriptor_;
}

const E_FindtreasureActiveshop& E_FindtreasureActiveshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureActiveshop* E_FindtreasureActiveshop::default_instance_ = NULL;

E_FindtreasureActiveshop* E_FindtreasureActiveshop::New() const {
  return new E_FindtreasureActiveshop;
}

void E_FindtreasureActiveshop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_type_ = 0;
    m_price_ = 0;
    m_times_ = 0;
  }
  m_good_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureActiveshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_price;
        break;
      }

      // optional int32 m_price = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_price_)));
          set_has_m_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_times;
        break;
      }

      // optional int32 m_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_times_)));
          set_has_m_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_good;
        break;
      }

      // repeated .proto_ff.E_FindtreasureActiveshopGoodDesc m_good = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_good:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_good()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_m_good;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureActiveshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_type(), output);
  }

  // optional int32 m_price = 4;
  if (has_m_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_price(), output);
  }

  // optional int32 m_times = 5;
  if (has_m_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_times(), output);
  }

  // repeated .proto_ff.E_FindtreasureActiveshopGoodDesc m_good = 6;
  for (int i = 0; i < this->m_good_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->m_good(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureActiveshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_type = 3;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_type(), target);
  }

  // optional int32 m_price = 4;
  if (has_m_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_price(), target);
  }

  // optional int32 m_times = 5;
  if (has_m_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_times(), target);
  }

  // repeated .proto_ff.E_FindtreasureActiveshopGoodDesc m_good = 6;
  for (int i = 0; i < this->m_good_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->m_good(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureActiveshop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_type = 3;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional int32 m_price = 4;
    if (has_m_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_price());
    }

    // optional int32 m_times = 5;
    if (has_m_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_times());
    }

  }
  // repeated .proto_ff.E_FindtreasureActiveshopGoodDesc m_good = 6;
  total_size += 1 * this->m_good_size();
  for (int i = 0; i < this->m_good_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_good(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureActiveshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureActiveshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureActiveshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureActiveshop::MergeFrom(const E_FindtreasureActiveshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_good_.MergeFrom(from.m_good_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_price()) {
      set_m_price(from.m_price());
    }
    if (from.has_m_times()) {
      set_m_times(from.m_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureActiveshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureActiveshop::CopyFrom(const E_FindtreasureActiveshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureActiveshop::IsInitialized() const {

  return true;
}

void E_FindtreasureActiveshop::Swap(E_FindtreasureActiveshop* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_type_, other->m_type_);
    std::swap(m_price_, other->m_price_);
    std::swap(m_times_, other->m_times_);
    m_good_.Swap(&other->m_good_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureActiveshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureActiveshop_descriptor_;
  metadata.reflection = E_FindtreasureActiveshop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FindtreasureActiveshop::kEFindtreasureActiveshopListFieldNumber;
#endif  // !_MSC_VER

Sheet_FindtreasureActiveshop::Sheet_FindtreasureActiveshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FindtreasureActiveshop::InitAsDefaultInstance() {
}

Sheet_FindtreasureActiveshop::Sheet_FindtreasureActiveshop(const Sheet_FindtreasureActiveshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FindtreasureActiveshop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FindtreasureActiveshop::~Sheet_FindtreasureActiveshop() {
  SharedDtor();
}

void Sheet_FindtreasureActiveshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FindtreasureActiveshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FindtreasureActiveshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FindtreasureActiveshop_descriptor_;
}

const Sheet_FindtreasureActiveshop& Sheet_FindtreasureActiveshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

Sheet_FindtreasureActiveshop* Sheet_FindtreasureActiveshop::default_instance_ = NULL;

Sheet_FindtreasureActiveshop* Sheet_FindtreasureActiveshop::New() const {
  return new Sheet_FindtreasureActiveshop;
}

void Sheet_FindtreasureActiveshop::Clear() {
  e_findtreasureactiveshop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FindtreasureActiveshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FindtreasureActiveshop E_FindtreasureActiveshop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FindtreasureActiveshop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_findtreasureactiveshop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FindtreasureActiveshop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FindtreasureActiveshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FindtreasureActiveshop E_FindtreasureActiveshop_List = 1;
  for (int i = 0; i < this->e_findtreasureactiveshop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_findtreasureactiveshop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FindtreasureActiveshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FindtreasureActiveshop E_FindtreasureActiveshop_List = 1;
  for (int i = 0; i < this->e_findtreasureactiveshop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_findtreasureactiveshop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FindtreasureActiveshop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FindtreasureActiveshop E_FindtreasureActiveshop_List = 1;
  total_size += 1 * this->e_findtreasureactiveshop_list_size();
  for (int i = 0; i < this->e_findtreasureactiveshop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_findtreasureactiveshop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FindtreasureActiveshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FindtreasureActiveshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FindtreasureActiveshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FindtreasureActiveshop::MergeFrom(const Sheet_FindtreasureActiveshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_findtreasureactiveshop_list_.MergeFrom(from.e_findtreasureactiveshop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FindtreasureActiveshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FindtreasureActiveshop::CopyFrom(const Sheet_FindtreasureActiveshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FindtreasureActiveshop::IsInitialized() const {

  return true;
}

void Sheet_FindtreasureActiveshop::Swap(Sheet_FindtreasureActiveshop* other) {
  if (other != this) {
    e_findtreasureactiveshop_list_.Swap(&other->e_findtreasureactiveshop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FindtreasureActiveshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FindtreasureActiveshop_descriptor_;
  metadata.reflection = Sheet_FindtreasureActiveshop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_FindtreasureShop::kMIdFieldNumber;
const int E_FindtreasureShop::kMGroupidFieldNumber;
const int E_FindtreasureShop::kMGoodsIDFieldNumber;
const int E_FindtreasureShop::kMGoodsNumFieldNumber;
const int E_FindtreasureShop::kMCostIDFieldNumber;
const int E_FindtreasureShop::kMNumFieldNumber;
#endif  // !_MSC_VER

E_FindtreasureShop::E_FindtreasureShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_FindtreasureShop::InitAsDefaultInstance() {
}

E_FindtreasureShop::E_FindtreasureShop(const E_FindtreasureShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_FindtreasureShop::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_groupid_ = 0;
  m_goodsid_ = 0;
  m_goodsnum_ = 0;
  m_costid_ = 0;
  m_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_FindtreasureShop::~E_FindtreasureShop() {
  SharedDtor();
}

void E_FindtreasureShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_FindtreasureShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_FindtreasureShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_FindtreasureShop_descriptor_;
}

const E_FindtreasureShop& E_FindtreasureShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

E_FindtreasureShop* E_FindtreasureShop::default_instance_ = NULL;

E_FindtreasureShop* E_FindtreasureShop::New() const {
  return new E_FindtreasureShop;
}

void E_FindtreasureShop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_groupid_ = 0;
    m_goodsid_ = 0;
    m_goodsnum_ = 0;
    m_costid_ = 0;
    m_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_FindtreasureShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_groupid;
        break;
      }

      // optional int32 m_groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_groupid_)));
          set_has_m_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_goodsID;
        break;
      }

      // optional int32 m_goodsID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_goodsID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goodsid_)));
          set_has_m_goodsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_goodsNum;
        break;
      }

      // optional int32 m_goodsNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_goodsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_goodsnum_)));
          set_has_m_goodsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_costID;
        break;
      }

      // optional int32 m_costID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_costID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_costid_)));
          set_has_m_costid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_num;
        break;
      }

      // optional int32 m_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_num_)));
          set_has_m_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_FindtreasureShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_groupid(), output);
  }

  // optional int32 m_goodsID = 3;
  if (has_m_goodsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_goodsid(), output);
  }

  // optional int32 m_goodsNum = 4;
  if (has_m_goodsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_goodsnum(), output);
  }

  // optional int32 m_costID = 5;
  if (has_m_costid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_costid(), output);
  }

  // optional int32 m_num = 6;
  if (has_m_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_FindtreasureShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_groupid = 2;
  if (has_m_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_groupid(), target);
  }

  // optional int32 m_goodsID = 3;
  if (has_m_goodsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_goodsid(), target);
  }

  // optional int32 m_goodsNum = 4;
  if (has_m_goodsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_goodsnum(), target);
  }

  // optional int32 m_costID = 5;
  if (has_m_costid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_costid(), target);
  }

  // optional int32 m_num = 6;
  if (has_m_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_FindtreasureShop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_groupid = 2;
    if (has_m_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_groupid());
    }

    // optional int32 m_goodsID = 3;
    if (has_m_goodsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goodsid());
    }

    // optional int32 m_goodsNum = 4;
    if (has_m_goodsnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_goodsnum());
    }

    // optional int32 m_costID = 5;
    if (has_m_costid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_costid());
    }

    // optional int32 m_num = 6;
    if (has_m_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_FindtreasureShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_FindtreasureShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_FindtreasureShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_FindtreasureShop::MergeFrom(const E_FindtreasureShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_groupid()) {
      set_m_groupid(from.m_groupid());
    }
    if (from.has_m_goodsid()) {
      set_m_goodsid(from.m_goodsid());
    }
    if (from.has_m_goodsnum()) {
      set_m_goodsnum(from.m_goodsnum());
    }
    if (from.has_m_costid()) {
      set_m_costid(from.m_costid());
    }
    if (from.has_m_num()) {
      set_m_num(from.m_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_FindtreasureShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_FindtreasureShop::CopyFrom(const E_FindtreasureShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_FindtreasureShop::IsInitialized() const {

  return true;
}

void E_FindtreasureShop::Swap(E_FindtreasureShop* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_groupid_, other->m_groupid_);
    std::swap(m_goodsid_, other->m_goodsid_);
    std::swap(m_goodsnum_, other->m_goodsnum_);
    std::swap(m_costid_, other->m_costid_);
    std::swap(m_num_, other->m_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_FindtreasureShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_FindtreasureShop_descriptor_;
  metadata.reflection = E_FindtreasureShop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_FindtreasureShop::kEFindtreasureShopListFieldNumber;
#endif  // !_MSC_VER

Sheet_FindtreasureShop::Sheet_FindtreasureShop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_FindtreasureShop::InitAsDefaultInstance() {
}

Sheet_FindtreasureShop::Sheet_FindtreasureShop(const Sheet_FindtreasureShop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_FindtreasureShop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_FindtreasureShop::~Sheet_FindtreasureShop() {
  SharedDtor();
}

void Sheet_FindtreasureShop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_FindtreasureShop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_FindtreasureShop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_FindtreasureShop_descriptor_;
}

const Sheet_FindtreasureShop& Sheet_FindtreasureShop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fFindtreasure_2eproto();
  return *default_instance_;
}

Sheet_FindtreasureShop* Sheet_FindtreasureShop::default_instance_ = NULL;

Sheet_FindtreasureShop* Sheet_FindtreasureShop::New() const {
  return new Sheet_FindtreasureShop;
}

void Sheet_FindtreasureShop::Clear() {
  e_findtreasureshop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_FindtreasureShop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_FindtreasureShop E_FindtreasureShop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_FindtreasureShop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_findtreasureshop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_FindtreasureShop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_FindtreasureShop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_FindtreasureShop E_FindtreasureShop_List = 1;
  for (int i = 0; i < this->e_findtreasureshop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_findtreasureshop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_FindtreasureShop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_FindtreasureShop E_FindtreasureShop_List = 1;
  for (int i = 0; i < this->e_findtreasureshop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_findtreasureshop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_FindtreasureShop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_FindtreasureShop E_FindtreasureShop_List = 1;
  total_size += 1 * this->e_findtreasureshop_list_size();
  for (int i = 0; i < this->e_findtreasureshop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_findtreasureshop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_FindtreasureShop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_FindtreasureShop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_FindtreasureShop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_FindtreasureShop::MergeFrom(const Sheet_FindtreasureShop& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_findtreasureshop_list_.MergeFrom(from.e_findtreasureshop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_FindtreasureShop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_FindtreasureShop::CopyFrom(const Sheet_FindtreasureShop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_FindtreasureShop::IsInitialized() const {

  return true;
}

void Sheet_FindtreasureShop::Swap(Sheet_FindtreasureShop* other) {
  if (other != this) {
    e_findtreasureshop_list_.Swap(&other->e_findtreasureshop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_FindtreasureShop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_FindtreasureShop_descriptor_;
  metadata.reflection = Sheet_FindtreasureShop_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
