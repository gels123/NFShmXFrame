// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: notice.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "notice.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* noticenotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  noticenotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_noticenotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_noticenotice_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_notice_2eproto() {
  protobuf_AddDesc_notice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "notice.proto");
  GOOGLE_CHECK(file != NULL);
  noticenotice_descriptor_ = file->message_type(0);
  static const int noticenotice_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, noticeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, noitceonoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, noticetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, opencycle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, levelrequire_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, endday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, startday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, noticetitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, noticecontent_),
  };
  noticenotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      noticenotice_descriptor_,
      noticenotice::default_instance_,
      noticenotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(noticenotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(noticenotice));
  Sheet_noticenotice_descriptor_ = file->message_type(1);
  static const int Sheet_noticenotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_noticenotice, noticenotice_list_),
  };
  Sheet_noticenotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_noticenotice_descriptor_,
      Sheet_noticenotice::default_instance_,
      Sheet_noticenotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_noticenotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_noticenotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_noticenotice));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_notice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    noticenotice_descriptor_, &noticenotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_noticenotice_descriptor_, &Sheet_noticenotice::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_notice_2eproto() {
  delete noticenotice::default_instance_;
  delete noticenotice_reflection_;
  delete Sheet_noticenotice::default_instance_;
  delete Sheet_noticenotice_reflection_;
}

void protobuf_AddDesc_notice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014notice.proto\022\010proto_ff\032\025yd_fieldoption"
    "s.proto\"\303\003\n\014noticenotice\022\036\n\010noticeId\030\001 \001"
    "(\005B\014\302\377\024\010\351\200\232\347\237\245ID\022%\n\013noitceOnoff\030\002 \001(\005B\020\302"
    "\377\024\014\351\200\232\347\237\245\345\274\200\345\205\263\022$\n\nnoticeType\030\003 \001(\005B\020\302\377\024"
    "\014\351\200\232\347\237\245\347\261\273\345\236\213\022-\n\topenCycle\030\004 \001(\tB\032\302\377\024\022\346\257"
    "\217\345\221\250\345\274\271\345\207\272\346\227\245\346\234\237\220\301\024 \022%\n\004time\030\005 \001(\tB\027\302\377\024\017"
    "\345\274\271\345\207\272\346\227\266\351\227\264\347\202\271\220\301\024 \022,\n\014levelRequire\030\006 \001("
    "\005B\026\302\377\024\022\347\216\251\345\256\266\347\255\211\347\272\247\351\231\220\345\256\232\0223\n\006endDay\030\007 \001("
    "\tB#\302\377\024\033\345\274\200\346\234\215\345\220\216\345\244\232\345\260\221\345\244\251\344\270\215\345\206\215\345\274\271\220\301\024 \0225"
    "\n\010startDay\030\010 \001(\tB#\302\377\024\033\345\274\200\346\234\215\345\220\216\345\244\232\345\260\221\345\244\251"
    "\345\274\200\345\247\213\345\274\271\220\301\024 \022)\n\013noticeTitle\030\t \001(\tB\024\302\377\024\014"
    "\351\200\232\347\237\245\346\240\207\351\242\230\220\301\024 \022+\n\rnoticeContent\030\n \001(\tB"
    "\024\302\377\024\014\351\200\232\347\237\245\345\206\205\345\256\271\220\301\024\?\"M\n\022Sheet_noticenot"
    "ice\0227\n\021noticenotice_List\030\001 \003(\0132\026.proto_f"
    "f.noticenoticeB\004\210\301\024t", 580);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "notice.proto", &protobuf_RegisterTypes);
  noticenotice::default_instance_ = new noticenotice();
  Sheet_noticenotice::default_instance_ = new Sheet_noticenotice();
  noticenotice::default_instance_->InitAsDefaultInstance();
  Sheet_noticenotice::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_notice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_notice_2eproto {
  StaticDescriptorInitializer_notice_2eproto() {
    protobuf_AddDesc_notice_2eproto();
  }
} static_descriptor_initializer_notice_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int noticenotice::kNoticeIdFieldNumber;
const int noticenotice::kNoitceOnoffFieldNumber;
const int noticenotice::kNoticeTypeFieldNumber;
const int noticenotice::kOpenCycleFieldNumber;
const int noticenotice::kTimeFieldNumber;
const int noticenotice::kLevelRequireFieldNumber;
const int noticenotice::kEndDayFieldNumber;
const int noticenotice::kStartDayFieldNumber;
const int noticenotice::kNoticeTitleFieldNumber;
const int noticenotice::kNoticeContentFieldNumber;
#endif  // !_MSC_VER

noticenotice::noticenotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void noticenotice::InitAsDefaultInstance() {
}

noticenotice::noticenotice(const noticenotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void noticenotice::SharedCtor() {
  _cached_size_ = 0;
  noticeid_ = 0;
  noitceonoff_ = 0;
  noticetype_ = 0;
  opencycle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  levelrequire_ = 0;
  endday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  noticetitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  noticecontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

noticenotice::~noticenotice() {
  SharedDtor();
}

void noticenotice::SharedDtor() {
  if (opencycle_ != &::google::protobuf::internal::kEmptyString) {
    delete opencycle_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (endday_ != &::google::protobuf::internal::kEmptyString) {
    delete endday_;
  }
  if (startday_ != &::google::protobuf::internal::kEmptyString) {
    delete startday_;
  }
  if (noticetitle_ != &::google::protobuf::internal::kEmptyString) {
    delete noticetitle_;
  }
  if (noticecontent_ != &::google::protobuf::internal::kEmptyString) {
    delete noticecontent_;
  }
  if (this != default_instance_) {
  }
}

void noticenotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* noticenotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return noticenotice_descriptor_;
}

const noticenotice& noticenotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_notice_2eproto();
  return *default_instance_;
}

noticenotice* noticenotice::default_instance_ = NULL;

noticenotice* noticenotice::New() const {
  return new noticenotice;
}

void noticenotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    noticeid_ = 0;
    noitceonoff_ = 0;
    noticetype_ = 0;
    if (has_opencycle()) {
      if (opencycle_ != &::google::protobuf::internal::kEmptyString) {
        opencycle_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    levelrequire_ = 0;
    if (has_endday()) {
      if (endday_ != &::google::protobuf::internal::kEmptyString) {
        endday_->clear();
      }
    }
    if (has_startday()) {
      if (startday_ != &::google::protobuf::internal::kEmptyString) {
        startday_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_noticetitle()) {
      if (noticetitle_ != &::google::protobuf::internal::kEmptyString) {
        noticetitle_->clear();
      }
    }
    if (has_noticecontent()) {
      if (noticecontent_ != &::google::protobuf::internal::kEmptyString) {
        noticecontent_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool noticenotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 noticeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noticeid_)));
          set_has_noticeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_noitceOnoff;
        break;
      }

      // optional int32 noitceOnoff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noitceOnoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noitceonoff_)));
          set_has_noitceonoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_noticeType;
        break;
      }

      // optional int32 noticeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_noticeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noticetype_)));
          set_has_noticetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_openCycle;
        break;
      }

      // optional string openCycle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openCycle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opencycle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opencycle().data(), this->opencycle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_time;
        break;
      }

      // optional string time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_levelRequire;
        break;
      }

      // optional int32 levelRequire = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelRequire:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelrequire_)));
          set_has_levelrequire();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_endDay;
        break;
      }

      // optional string endDay = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->endday().data(), this->endday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_startDay;
        break;
      }

      // optional string startDay = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startDay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_startday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->startday().data(), this->startday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_noticeTitle;
        break;
      }

      // optional string noticeTitle = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noticeTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noticetitle()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->noticetitle().data(), this->noticetitle().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_noticeContent;
        break;
      }

      // optional string noticeContent = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noticeContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_noticecontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->noticecontent().data(), this->noticecontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void noticenotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 noticeId = 1;
  if (has_noticeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->noticeid(), output);
  }

  // optional int32 noitceOnoff = 2;
  if (has_noitceonoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->noitceonoff(), output);
  }

  // optional int32 noticeType = 3;
  if (has_noticetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->noticetype(), output);
  }

  // optional string openCycle = 4;
  if (has_opencycle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opencycle().data(), this->opencycle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->opencycle(), output);
  }

  // optional string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->time(), output);
  }

  // optional int32 levelRequire = 6;
  if (has_levelrequire()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->levelrequire(), output);
  }

  // optional string endDay = 7;
  if (has_endday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endday().data(), this->endday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->endday(), output);
  }

  // optional string startDay = 8;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startday().data(), this->startday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->startday(), output);
  }

  // optional string noticeTitle = 9;
  if (has_noticetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noticetitle().data(), this->noticetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->noticetitle(), output);
  }

  // optional string noticeContent = 10;
  if (has_noticecontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noticecontent().data(), this->noticecontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->noticecontent(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* noticenotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 noticeId = 1;
  if (has_noticeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->noticeid(), target);
  }

  // optional int32 noitceOnoff = 2;
  if (has_noitceonoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->noitceonoff(), target);
  }

  // optional int32 noticeType = 3;
  if (has_noticetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->noticetype(), target);
  }

  // optional string openCycle = 4;
  if (has_opencycle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opencycle().data(), this->opencycle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->opencycle(), target);
  }

  // optional string time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->time(), target);
  }

  // optional int32 levelRequire = 6;
  if (has_levelrequire()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->levelrequire(), target);
  }

  // optional string endDay = 7;
  if (has_endday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->endday().data(), this->endday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->endday(), target);
  }

  // optional string startDay = 8;
  if (has_startday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->startday().data(), this->startday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->startday(), target);
  }

  // optional string noticeTitle = 9;
  if (has_noticetitle()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noticetitle().data(), this->noticetitle().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->noticetitle(), target);
  }

  // optional string noticeContent = 10;
  if (has_noticecontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->noticecontent().data(), this->noticecontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->noticecontent(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int noticenotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 noticeId = 1;
    if (has_noticeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noticeid());
    }

    // optional int32 noitceOnoff = 2;
    if (has_noitceonoff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noitceonoff());
    }

    // optional int32 noticeType = 3;
    if (has_noticetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->noticetype());
    }

    // optional string openCycle = 4;
    if (has_opencycle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opencycle());
    }

    // optional string time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // optional int32 levelRequire = 6;
    if (has_levelrequire()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelrequire());
    }

    // optional string endDay = 7;
    if (has_endday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endday());
    }

    // optional string startDay = 8;
    if (has_startday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->startday());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string noticeTitle = 9;
    if (has_noticetitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->noticetitle());
    }

    // optional string noticeContent = 10;
    if (has_noticecontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->noticecontent());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void noticenotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const noticenotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const noticenotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void noticenotice::MergeFrom(const noticenotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticeid()) {
      set_noticeid(from.noticeid());
    }
    if (from.has_noitceonoff()) {
      set_noitceonoff(from.noitceonoff());
    }
    if (from.has_noticetype()) {
      set_noticetype(from.noticetype());
    }
    if (from.has_opencycle()) {
      set_opencycle(from.opencycle());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_levelrequire()) {
      set_levelrequire(from.levelrequire());
    }
    if (from.has_endday()) {
      set_endday(from.endday());
    }
    if (from.has_startday()) {
      set_startday(from.startday());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_noticetitle()) {
      set_noticetitle(from.noticetitle());
    }
    if (from.has_noticecontent()) {
      set_noticecontent(from.noticecontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void noticenotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void noticenotice::CopyFrom(const noticenotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool noticenotice::IsInitialized() const {

  return true;
}

void noticenotice::Swap(noticenotice* other) {
  if (other != this) {
    std::swap(noticeid_, other->noticeid_);
    std::swap(noitceonoff_, other->noitceonoff_);
    std::swap(noticetype_, other->noticetype_);
    std::swap(opencycle_, other->opencycle_);
    std::swap(time_, other->time_);
    std::swap(levelrequire_, other->levelrequire_);
    std::swap(endday_, other->endday_);
    std::swap(startday_, other->startday_);
    std::swap(noticetitle_, other->noticetitle_);
    std::swap(noticecontent_, other->noticecontent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata noticenotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = noticenotice_descriptor_;
  metadata.reflection = noticenotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_noticenotice::kNoticenoticeListFieldNumber;
#endif  // !_MSC_VER

Sheet_noticenotice::Sheet_noticenotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_noticenotice::InitAsDefaultInstance() {
}

Sheet_noticenotice::Sheet_noticenotice(const Sheet_noticenotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_noticenotice::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_noticenotice::~Sheet_noticenotice() {
  SharedDtor();
}

void Sheet_noticenotice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_noticenotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_noticenotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_noticenotice_descriptor_;
}

const Sheet_noticenotice& Sheet_noticenotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_notice_2eproto();
  return *default_instance_;
}

Sheet_noticenotice* Sheet_noticenotice::default_instance_ = NULL;

Sheet_noticenotice* Sheet_noticenotice::New() const {
  return new Sheet_noticenotice;
}

void Sheet_noticenotice::Clear() {
  noticenotice_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_noticenotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.noticenotice noticenotice_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noticenotice_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_noticenotice_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_noticenotice_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_noticenotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.noticenotice noticenotice_List = 1;
  for (int i = 0; i < this->noticenotice_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->noticenotice_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_noticenotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.noticenotice noticenotice_List = 1;
  for (int i = 0; i < this->noticenotice_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->noticenotice_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_noticenotice::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.noticenotice noticenotice_List = 1;
  total_size += 1 * this->noticenotice_list_size();
  for (int i = 0; i < this->noticenotice_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->noticenotice_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_noticenotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_noticenotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_noticenotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_noticenotice::MergeFrom(const Sheet_noticenotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  noticenotice_list_.MergeFrom(from.noticenotice_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_noticenotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_noticenotice::CopyFrom(const Sheet_noticenotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_noticenotice::IsInitialized() const {

  return true;
}

void Sheet_noticenotice::Swap(Sheet_noticenotice* other) {
  if (other != this) {
    noticenotice_list_.Swap(&other->noticenotice_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_noticenotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_noticenotice_descriptor_;
  metadata.reflection = Sheet_noticenotice_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
