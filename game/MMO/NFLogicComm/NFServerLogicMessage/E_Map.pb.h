// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Map.proto

#ifndef PROTOBUF_E_5fMap_2eproto__INCLUDED
#define PROTOBUF_E_5fMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fMap_2eproto();
void protobuf_AssignDesc_E_5fMap_2eproto();
void protobuf_ShutdownFile_E_5fMap_2eproto();

class E_MapMap;
class Sheet_MapMap;
class E_MapItemdrop;
class Sheet_MapItemdrop;
class E_MapDestroyitem;
class Sheet_MapDestroyitem;
class E_MapButton;
class Sheet_MapButton;
class E_MapInspireRewardDesc;
class E_MapInspire;
class Sheet_MapInspire;

// ===================================================================

class E_MapMap : public ::google::protobuf::Message {
 public:
  E_MapMap();
  virtual ~E_MapMap();

  E_MapMap(const E_MapMap& from);

  inline E_MapMap& operator=(const E_MapMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MapMap& default_instance();

  void Swap(E_MapMap* other);

  // implements Message ----------------------------------------------

  E_MapMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MapMap& from);
  void MergeFrom(const E_MapMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_mapId = 1;
  inline bool has_m_mapid() const;
  inline void clear_m_mapid();
  static const int kMMapIdFieldNumber = 1;
  inline ::google::protobuf::int64 m_mapid() const;
  inline void set_m_mapid(::google::protobuf::int64 value);

  // optional int32 m_levelLimit = 2;
  inline bool has_m_levellimit() const;
  inline void clear_m_levellimit();
  static const int kMLevelLimitFieldNumber = 2;
  inline ::google::protobuf::int32 m_levellimit() const;
  inline void set_m_levellimit(::google::protobuf::int32 value);

  // optional string m_adviceLv = 3;
  inline bool has_m_advicelv() const;
  inline void clear_m_advicelv();
  static const int kMAdviceLvFieldNumber = 3;
  inline const ::std::string& m_advicelv() const;
  inline void set_m_advicelv(const ::std::string& value);
  inline void set_m_advicelv(const char* value);
  inline void set_m_advicelv(const char* value, size_t size);
  inline ::std::string* mutable_m_advicelv();
  inline ::std::string* release_m_advicelv();
  inline void set_allocated_m_advicelv(::std::string* m_advicelv);

  // optional int32 m_isDyn = 4;
  inline bool has_m_isdyn() const;
  inline void clear_m_isdyn();
  static const int kMIsDynFieldNumber = 4;
  inline ::google::protobuf::int32 m_isdyn() const;
  inline void set_m_isdyn(::google::protobuf::int32 value);

  // optional int32 m_mapType = 5;
  inline bool has_m_maptype() const;
  inline void clear_m_maptype();
  static const int kMMapTypeFieldNumber = 5;
  inline ::google::protobuf::int32 m_maptype() const;
  inline void set_m_maptype(::google::protobuf::int32 value);

  // optional int32 m_mapSubType = 6;
  inline bool has_m_mapsubtype() const;
  inline void clear_m_mapsubtype();
  static const int kMMapSubTypeFieldNumber = 6;
  inline ::google::protobuf::int32 m_mapsubtype() const;
  inline void set_m_mapsubtype(::google::protobuf::int32 value);

  // optional int32 m_clearanceTime = 7;
  inline bool has_m_clearancetime() const;
  inline void clear_m_clearancetime();
  static const int kMClearanceTimeFieldNumber = 7;
  inline ::google::protobuf::int32 m_clearancetime() const;
  inline void set_m_clearancetime(::google::protobuf::int32 value);

  // optional int32 m_mapPkmode = 8;
  inline bool has_m_mappkmode() const;
  inline void clear_m_mappkmode();
  static const int kMMapPkmodeFieldNumber = 8;
  inline ::google::protobuf::int32 m_mappkmode() const;
  inline void set_m_mappkmode(::google::protobuf::int32 value);

  // optional string m_mapPkValue = 9;
  inline bool has_m_mappkvalue() const;
  inline void clear_m_mappkvalue();
  static const int kMMapPkValueFieldNumber = 9;
  inline const ::std::string& m_mappkvalue() const;
  inline void set_m_mappkvalue(const ::std::string& value);
  inline void set_m_mappkvalue(const char* value);
  inline void set_m_mappkvalue(const char* value, size_t size);
  inline ::std::string* mutable_m_mappkvalue();
  inline ::std::string* release_m_mappkvalue();
  inline void set_allocated_m_mappkvalue(::std::string* m_mappkvalue);

  // optional int32 m_pklock = 10;
  inline bool has_m_pklock() const;
  inline void clear_m_pklock();
  static const int kMPklockFieldNumber = 10;
  inline ::google::protobuf::int32 m_pklock() const;
  inline void set_m_pklock(::google::protobuf::int32 value);

  // optional int32 m_pk = 11;
  inline bool has_m_pk() const;
  inline void clear_m_pk();
  static const int kMPkFieldNumber = 11;
  inline ::google::protobuf::int32 m_pk() const;
  inline void set_m_pk(::google::protobuf::int32 value);

  // optional int32 m_killValue = 12;
  inline bool has_m_killvalue() const;
  inline void clear_m_killvalue();
  static const int kMKillValueFieldNumber = 12;
  inline ::google::protobuf::int32 m_killvalue() const;
  inline void set_m_killvalue(::google::protobuf::int32 value);

  // optional int32 m_BanGroup = 13;
  inline bool has_m_bangroup() const;
  inline void clear_m_bangroup();
  static const int kMBanGroupFieldNumber = 13;
  inline ::google::protobuf::int32 m_bangroup() const;
  inline void set_m_bangroup(::google::protobuf::int32 value);

  // optional int32 m_reviveTime = 14;
  inline bool has_m_revivetime() const;
  inline void clear_m_revivetime();
  static const int kMReviveTimeFieldNumber = 14;
  inline ::google::protobuf::int32 m_revivetime() const;
  inline void set_m_revivetime(::google::protobuf::int32 value);

  // optional int32 m_mapWide = 15;
  inline bool has_m_mapwide() const;
  inline void clear_m_mapwide();
  static const int kMMapWideFieldNumber = 15;
  inline ::google::protobuf::int32 m_mapwide() const;
  inline void set_m_mapwide(::google::protobuf::int32 value);

  // optional int32 m_mapHeight = 16;
  inline bool has_m_mapheight() const;
  inline void clear_m_mapheight();
  static const int kMMapHeightFieldNumber = 16;
  inline ::google::protobuf::int32 m_mapheight() const;
  inline void set_m_mapheight(::google::protobuf::int32 value);

  // optional string m_mapResources = 17;
  inline bool has_m_mapresources() const;
  inline void clear_m_mapresources();
  static const int kMMapResourcesFieldNumber = 17;
  inline const ::std::string& m_mapresources() const;
  inline void set_m_mapresources(const ::std::string& value);
  inline void set_m_mapresources(const char* value);
  inline void set_m_mapresources(const char* value, size_t size);
  inline ::std::string* mutable_m_mapresources();
  inline ::std::string* release_m_mapresources();
  inline void set_allocated_m_mapresources(::std::string* m_mapresources);

  // optional int64 m_reviveSkill = 18;
  inline bool has_m_reviveskill() const;
  inline void clear_m_reviveskill();
  static const int kMReviveSkillFieldNumber = 18;
  inline ::google::protobuf::int64 m_reviveskill() const;
  inline void set_m_reviveskill(::google::protobuf::int64 value);

  // optional int32 m_reviveInPlaceType = 19;
  inline bool has_m_reviveinplacetype() const;
  inline void clear_m_reviveinplacetype();
  static const int kMReviveInPlaceTypeFieldNumber = 19;
  inline ::google::protobuf::int32 m_reviveinplacetype() const;
  inline void set_m_reviveinplacetype(::google::protobuf::int32 value);

  // optional int32 m_isHangUp = 20;
  inline bool has_m_ishangup() const;
  inline void clear_m_ishangup();
  static const int kMIsHangUpFieldNumber = 20;
  inline ::google::protobuf::int32 m_ishangup() const;
  inline void set_m_ishangup(::google::protobuf::int32 value);

  // optional int32 m_itemDropType = 21;
  inline bool has_m_itemdroptype() const;
  inline void clear_m_itemdroptype();
  static const int kMItemDropTypeFieldNumber = 21;
  inline ::google::protobuf::int32 m_itemdroptype() const;
  inline void set_m_itemdroptype(::google::protobuf::int32 value);

  // optional string m_itemDropID = 22;
  inline bool has_m_itemdropid() const;
  inline void clear_m_itemdropid();
  static const int kMItemDropIDFieldNumber = 22;
  inline const ::std::string& m_itemdropid() const;
  inline void set_m_itemdropid(const ::std::string& value);
  inline void set_m_itemdropid(const char* value);
  inline void set_m_itemdropid(const char* value, size_t size);
  inline ::std::string* mutable_m_itemdropid();
  inline ::std::string* release_m_itemdropid();
  inline void set_allocated_m_itemdropid(::std::string* m_itemdropid);

  // optional int64 m_linkOffLine = 23;
  inline bool has_m_linkoffline() const;
  inline void clear_m_linkoffline();
  static const int kMLinkOffLineFieldNumber = 23;
  inline ::google::protobuf::int64 m_linkoffline() const;
  inline void set_m_linkoffline(::google::protobuf::int64 value);

  // optional int32 m_banOnHook = 24;
  inline bool has_m_banonhook() const;
  inline void clear_m_banonhook();
  static const int kMBanOnHookFieldNumber = 24;
  inline ::google::protobuf::int32 m_banonhook() const;
  inline void set_m_banonhook(::google::protobuf::int32 value);

  // optional int32 m_Rewait = 25;
  inline bool has_m_rewait() const;
  inline void clear_m_rewait();
  static const int kMRewaitFieldNumber = 25;
  inline ::google::protobuf::int32 m_rewait() const;
  inline void set_m_rewait(::google::protobuf::int32 value);

  // optional int32 m_REtime = 26;
  inline bool has_m_retime() const;
  inline void clear_m_retime();
  static const int kMREtimeFieldNumber = 26;
  inline ::google::protobuf::int32 m_retime() const;
  inline void set_m_retime(::google::protobuf::int32 value);

  // optional int32 m_HREBan = 27;
  inline bool has_m_hreban() const;
  inline void clear_m_hreban();
  static const int kMHREBanFieldNumber = 27;
  inline ::google::protobuf::int32 m_hreban() const;
  inline void set_m_hreban(::google::protobuf::int32 value);

  // optional int32 m_Retiered = 28;
  inline bool has_m_retiered() const;
  inline void clear_m_retiered();
  static const int kMRetieredFieldNumber = 28;
  inline ::google::protobuf::int32 m_retiered() const;
  inline void set_m_retiered(::google::protobuf::int32 value);

  // optional int32 m_REskillid = 29;
  inline bool has_m_reskillid() const;
  inline void clear_m_reskillid();
  static const int kMREskillidFieldNumber = 29;
  inline ::google::protobuf::int32 m_reskillid() const;
  inline void set_m_reskillid(::google::protobuf::int32 value);

  // optional int32 m_Reteimes = 30;
  inline bool has_m_reteimes() const;
  inline void clear_m_reteimes();
  static const int kMReteimesFieldNumber = 30;
  inline ::google::protobuf::int32 m_reteimes() const;
  inline void set_m_reteimes(::google::protobuf::int32 value);

  // optional int32 m_drivePoint = 31;
  inline bool has_m_drivepoint() const;
  inline void clear_m_drivepoint();
  static const int kMDrivePointFieldNumber = 31;
  inline ::google::protobuf::int32 m_drivepoint() const;
  inline void set_m_drivepoint(::google::protobuf::int32 value);

  // optional int32 m_dieDP = 32;
  inline bool has_m_diedp() const;
  inline void clear_m_diedp();
  static const int kMDieDPFieldNumber = 32;
  inline ::google::protobuf::int32 m_diedp() const;
  inline void set_m_diedp(::google::protobuf::int32 value);

  // optional int32 m_timeDP = 33;
  inline bool has_m_timedp() const;
  inline void clear_m_timedp();
  static const int kMTimeDPFieldNumber = 33;
  inline ::google::protobuf::int32 m_timedp() const;
  inline void set_m_timedp(::google::protobuf::int32 value);

  // optional int32 m_meditation = 34;
  inline bool has_m_meditation() const;
  inline void clear_m_meditation();
  static const int kMMeditationFieldNumber = 34;
  inline ::google::protobuf::int32 m_meditation() const;
  inline void set_m_meditation(::google::protobuf::int32 value);

  // optional string m_mapButton = 35;
  inline bool has_m_mapbutton() const;
  inline void clear_m_mapbutton();
  static const int kMMapButtonFieldNumber = 35;
  inline const ::std::string& m_mapbutton() const;
  inline void set_m_mapbutton(const ::std::string& value);
  inline void set_m_mapbutton(const char* value);
  inline void set_m_mapbutton(const char* value, size_t size);
  inline ::std::string* mutable_m_mapbutton();
  inline ::std::string* release_m_mapbutton();
  inline void set_allocated_m_mapbutton(::std::string* m_mapbutton);

  // optional int32 m_banMount = 36;
  inline bool has_m_banmount() const;
  inline void clear_m_banmount();
  static const int kMBanMountFieldNumber = 36;
  inline ::google::protobuf::int32 m_banmount() const;
  inline void set_m_banmount(::google::protobuf::int32 value);

  // optional int32 m_banLink = 37;
  inline bool has_m_banlink() const;
  inline void clear_m_banlink();
  static const int kMBanLinkFieldNumber = 37;
  inline ::google::protobuf::int32 m_banlink() const;
  inline void set_m_banlink(::google::protobuf::int32 value);

  // optional int32 m_lvSupPvp = 38;
  inline bool has_m_lvsuppvp() const;
  inline void clear_m_lvsuppvp();
  static const int kMLvSupPvpFieldNumber = 38;
  inline ::google::protobuf::int32 m_lvsuppvp() const;
  inline void set_m_lvsuppvp(::google::protobuf::int32 value);

  // optional int32 m_powerSupPvp = 39;
  inline bool has_m_powersuppvp() const;
  inline void clear_m_powersuppvp();
  static const int kMPowerSupPvpFieldNumber = 39;
  inline ::google::protobuf::int32 m_powersuppvp() const;
  inline void set_m_powersuppvp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MapMap)
 private:
  inline void set_has_m_mapid();
  inline void clear_has_m_mapid();
  inline void set_has_m_levellimit();
  inline void clear_has_m_levellimit();
  inline void set_has_m_advicelv();
  inline void clear_has_m_advicelv();
  inline void set_has_m_isdyn();
  inline void clear_has_m_isdyn();
  inline void set_has_m_maptype();
  inline void clear_has_m_maptype();
  inline void set_has_m_mapsubtype();
  inline void clear_has_m_mapsubtype();
  inline void set_has_m_clearancetime();
  inline void clear_has_m_clearancetime();
  inline void set_has_m_mappkmode();
  inline void clear_has_m_mappkmode();
  inline void set_has_m_mappkvalue();
  inline void clear_has_m_mappkvalue();
  inline void set_has_m_pklock();
  inline void clear_has_m_pklock();
  inline void set_has_m_pk();
  inline void clear_has_m_pk();
  inline void set_has_m_killvalue();
  inline void clear_has_m_killvalue();
  inline void set_has_m_bangroup();
  inline void clear_has_m_bangroup();
  inline void set_has_m_revivetime();
  inline void clear_has_m_revivetime();
  inline void set_has_m_mapwide();
  inline void clear_has_m_mapwide();
  inline void set_has_m_mapheight();
  inline void clear_has_m_mapheight();
  inline void set_has_m_mapresources();
  inline void clear_has_m_mapresources();
  inline void set_has_m_reviveskill();
  inline void clear_has_m_reviveskill();
  inline void set_has_m_reviveinplacetype();
  inline void clear_has_m_reviveinplacetype();
  inline void set_has_m_ishangup();
  inline void clear_has_m_ishangup();
  inline void set_has_m_itemdroptype();
  inline void clear_has_m_itemdroptype();
  inline void set_has_m_itemdropid();
  inline void clear_has_m_itemdropid();
  inline void set_has_m_linkoffline();
  inline void clear_has_m_linkoffline();
  inline void set_has_m_banonhook();
  inline void clear_has_m_banonhook();
  inline void set_has_m_rewait();
  inline void clear_has_m_rewait();
  inline void set_has_m_retime();
  inline void clear_has_m_retime();
  inline void set_has_m_hreban();
  inline void clear_has_m_hreban();
  inline void set_has_m_retiered();
  inline void clear_has_m_retiered();
  inline void set_has_m_reskillid();
  inline void clear_has_m_reskillid();
  inline void set_has_m_reteimes();
  inline void clear_has_m_reteimes();
  inline void set_has_m_drivepoint();
  inline void clear_has_m_drivepoint();
  inline void set_has_m_diedp();
  inline void clear_has_m_diedp();
  inline void set_has_m_timedp();
  inline void clear_has_m_timedp();
  inline void set_has_m_meditation();
  inline void clear_has_m_meditation();
  inline void set_has_m_mapbutton();
  inline void clear_has_m_mapbutton();
  inline void set_has_m_banmount();
  inline void clear_has_m_banmount();
  inline void set_has_m_banlink();
  inline void clear_has_m_banlink();
  inline void set_has_m_lvsuppvp();
  inline void clear_has_m_lvsuppvp();
  inline void set_has_m_powersuppvp();
  inline void clear_has_m_powersuppvp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_mapid_;
  ::std::string* m_advicelv_;
  ::google::protobuf::int32 m_levellimit_;
  ::google::protobuf::int32 m_isdyn_;
  ::google::protobuf::int32 m_maptype_;
  ::google::protobuf::int32 m_mapsubtype_;
  ::google::protobuf::int32 m_clearancetime_;
  ::google::protobuf::int32 m_mappkmode_;
  ::std::string* m_mappkvalue_;
  ::google::protobuf::int32 m_pklock_;
  ::google::protobuf::int32 m_pk_;
  ::google::protobuf::int32 m_killvalue_;
  ::google::protobuf::int32 m_bangroup_;
  ::google::protobuf::int32 m_revivetime_;
  ::google::protobuf::int32 m_mapwide_;
  ::std::string* m_mapresources_;
  ::google::protobuf::int32 m_mapheight_;
  ::google::protobuf::int32 m_reviveinplacetype_;
  ::google::protobuf::int64 m_reviveskill_;
  ::google::protobuf::int32 m_ishangup_;
  ::google::protobuf::int32 m_itemdroptype_;
  ::std::string* m_itemdropid_;
  ::google::protobuf::int64 m_linkoffline_;
  ::google::protobuf::int32 m_banonhook_;
  ::google::protobuf::int32 m_rewait_;
  ::google::protobuf::int32 m_retime_;
  ::google::protobuf::int32 m_hreban_;
  ::google::protobuf::int32 m_retiered_;
  ::google::protobuf::int32 m_reskillid_;
  ::google::protobuf::int32 m_reteimes_;
  ::google::protobuf::int32 m_drivepoint_;
  ::google::protobuf::int32 m_diedp_;
  ::google::protobuf::int32 m_timedp_;
  ::std::string* m_mapbutton_;
  ::google::protobuf::int32 m_meditation_;
  ::google::protobuf::int32 m_banmount_;
  ::google::protobuf::int32 m_banlink_;
  ::google::protobuf::int32 m_lvsuppvp_;
  ::google::protobuf::int32 m_powersuppvp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(39 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static E_MapMap* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MapMap : public ::google::protobuf::Message {
 public:
  Sheet_MapMap();
  virtual ~Sheet_MapMap();

  Sheet_MapMap(const Sheet_MapMap& from);

  inline Sheet_MapMap& operator=(const Sheet_MapMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MapMap& default_instance();

  void Swap(Sheet_MapMap* other);

  // implements Message ----------------------------------------------

  Sheet_MapMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MapMap& from);
  void MergeFrom(const Sheet_MapMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MapMap E_MapMap_List = 1;
  inline int e_mapmap_list_size() const;
  inline void clear_e_mapmap_list();
  static const int kEMapMapListFieldNumber = 1;
  inline const ::proto_ff::E_MapMap& e_mapmap_list(int index) const;
  inline ::proto_ff::E_MapMap* mutable_e_mapmap_list(int index);
  inline ::proto_ff::E_MapMap* add_e_mapmap_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapMap >&
      e_mapmap_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapMap >*
      mutable_e_mapmap_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MapMap)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapMap > e_mapmap_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MapMap* default_instance_;
};
// -------------------------------------------------------------------

class E_MapItemdrop : public ::google::protobuf::Message {
 public:
  E_MapItemdrop();
  virtual ~E_MapItemdrop();

  E_MapItemdrop(const E_MapItemdrop& from);

  inline E_MapItemdrop& operator=(const E_MapItemdrop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MapItemdrop& default_instance();

  void Swap(E_MapItemdrop* other);

  // implements Message ----------------------------------------------

  E_MapItemdrop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MapItemdrop& from);
  void MergeFrom(const E_MapItemdrop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_itemDropID = 1;
  inline bool has_m_itemdropid() const;
  inline void clear_m_itemdropid();
  static const int kMItemDropIDFieldNumber = 1;
  inline ::google::protobuf::int32 m_itemdropid() const;
  inline void set_m_itemdropid(::google::protobuf::int32 value);

  // optional int32 m_dropType = 2;
  inline bool has_m_droptype() const;
  inline void clear_m_droptype();
  static const int kMDropTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_droptype() const;
  inline void set_m_droptype(::google::protobuf::int32 value);

  // optional int32 m_odds = 3;
  inline bool has_m_odds() const;
  inline void clear_m_odds();
  static const int kMOddsFieldNumber = 3;
  inline ::google::protobuf::int32 m_odds() const;
  inline void set_m_odds(::google::protobuf::int32 value);

  // optional int32 m_ownProtect = 4;
  inline bool has_m_ownprotect() const;
  inline void clear_m_ownprotect();
  static const int kMOwnProtectFieldNumber = 4;
  inline ::google::protobuf::int32 m_ownprotect() const;
  inline void set_m_ownprotect(::google::protobuf::int32 value);

  // optional int32 m_belongType = 5;
  inline bool has_m_belongtype() const;
  inline void clear_m_belongtype();
  static const int kMBelongTypeFieldNumber = 5;
  inline ::google::protobuf::int32 m_belongtype() const;
  inline void set_m_belongtype(::google::protobuf::int32 value);

  // optional int32 m_numMax = 6;
  inline bool has_m_nummax() const;
  inline void clear_m_nummax();
  static const int kMNumMaxFieldNumber = 6;
  inline ::google::protobuf::int32 m_nummax() const;
  inline void set_m_nummax(::google::protobuf::int32 value);

  // optional int32 m_dropvaluea = 7;
  inline bool has_m_dropvaluea() const;
  inline void clear_m_dropvaluea();
  static const int kMDropvalueaFieldNumber = 7;
  inline ::google::protobuf::int32 m_dropvaluea() const;
  inline void set_m_dropvaluea(::google::protobuf::int32 value);

  // optional int32 m_dropvalueb = 8;
  inline bool has_m_dropvalueb() const;
  inline void clear_m_dropvalueb();
  static const int kMDropvaluebFieldNumber = 8;
  inline ::google::protobuf::int32 m_dropvalueb() const;
  inline void set_m_dropvalueb(::google::protobuf::int32 value);

  // optional int32 m_dropvaluec = 9;
  inline bool has_m_dropvaluec() const;
  inline void clear_m_dropvaluec();
  static const int kMDropvaluecFieldNumber = 9;
  inline ::google::protobuf::int32 m_dropvaluec() const;
  inline void set_m_dropvaluec(::google::protobuf::int32 value);

  // optional int32 m_dropvalued = 10;
  inline bool has_m_dropvalued() const;
  inline void clear_m_dropvalued();
  static const int kMDropvaluedFieldNumber = 10;
  inline ::google::protobuf::int32 m_dropvalued() const;
  inline void set_m_dropvalued(::google::protobuf::int32 value);

  // optional int32 m_dropvaluee = 11;
  inline bool has_m_dropvaluee() const;
  inline void clear_m_dropvaluee();
  static const int kMDropvalueeFieldNumber = 11;
  inline ::google::protobuf::int32 m_dropvaluee() const;
  inline void set_m_dropvaluee(::google::protobuf::int32 value);

  // optional int32 m_dropvaluef = 12;
  inline bool has_m_dropvaluef() const;
  inline void clear_m_dropvaluef();
  static const int kMDropvaluefFieldNumber = 12;
  inline ::google::protobuf::int32 m_dropvaluef() const;
  inline void set_m_dropvaluef(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MapItemdrop)
 private:
  inline void set_has_m_itemdropid();
  inline void clear_has_m_itemdropid();
  inline void set_has_m_droptype();
  inline void clear_has_m_droptype();
  inline void set_has_m_odds();
  inline void clear_has_m_odds();
  inline void set_has_m_ownprotect();
  inline void clear_has_m_ownprotect();
  inline void set_has_m_belongtype();
  inline void clear_has_m_belongtype();
  inline void set_has_m_nummax();
  inline void clear_has_m_nummax();
  inline void set_has_m_dropvaluea();
  inline void clear_has_m_dropvaluea();
  inline void set_has_m_dropvalueb();
  inline void clear_has_m_dropvalueb();
  inline void set_has_m_dropvaluec();
  inline void clear_has_m_dropvaluec();
  inline void set_has_m_dropvalued();
  inline void clear_has_m_dropvalued();
  inline void set_has_m_dropvaluee();
  inline void clear_has_m_dropvaluee();
  inline void set_has_m_dropvaluef();
  inline void clear_has_m_dropvaluef();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_itemdropid_;
  ::google::protobuf::int32 m_droptype_;
  ::google::protobuf::int32 m_odds_;
  ::google::protobuf::int32 m_ownprotect_;
  ::google::protobuf::int32 m_belongtype_;
  ::google::protobuf::int32 m_nummax_;
  ::google::protobuf::int32 m_dropvaluea_;
  ::google::protobuf::int32 m_dropvalueb_;
  ::google::protobuf::int32 m_dropvaluec_;
  ::google::protobuf::int32 m_dropvalued_;
  ::google::protobuf::int32 m_dropvaluee_;
  ::google::protobuf::int32 m_dropvaluef_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static E_MapItemdrop* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MapItemdrop : public ::google::protobuf::Message {
 public:
  Sheet_MapItemdrop();
  virtual ~Sheet_MapItemdrop();

  Sheet_MapItemdrop(const Sheet_MapItemdrop& from);

  inline Sheet_MapItemdrop& operator=(const Sheet_MapItemdrop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MapItemdrop& default_instance();

  void Swap(Sheet_MapItemdrop* other);

  // implements Message ----------------------------------------------

  Sheet_MapItemdrop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MapItemdrop& from);
  void MergeFrom(const Sheet_MapItemdrop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MapItemdrop E_MapItemdrop_List = 1;
  inline int e_mapitemdrop_list_size() const;
  inline void clear_e_mapitemdrop_list();
  static const int kEMapItemdropListFieldNumber = 1;
  inline const ::proto_ff::E_MapItemdrop& e_mapitemdrop_list(int index) const;
  inline ::proto_ff::E_MapItemdrop* mutable_e_mapitemdrop_list(int index);
  inline ::proto_ff::E_MapItemdrop* add_e_mapitemdrop_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapItemdrop >&
      e_mapitemdrop_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapItemdrop >*
      mutable_e_mapitemdrop_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MapItemdrop)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapItemdrop > e_mapitemdrop_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MapItemdrop* default_instance_;
};
// -------------------------------------------------------------------

class E_MapDestroyitem : public ::google::protobuf::Message {
 public:
  E_MapDestroyitem();
  virtual ~E_MapDestroyitem();

  E_MapDestroyitem(const E_MapDestroyitem& from);

  inline E_MapDestroyitem& operator=(const E_MapDestroyitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MapDestroyitem& default_instance();

  void Swap(E_MapDestroyitem* other);

  // implements Message ----------------------------------------------

  E_MapDestroyitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MapDestroyitem& from);
  void MergeFrom(const E_MapDestroyitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 m_destroyitemID = 1;
  inline bool has_m_destroyitemid() const;
  inline void clear_m_destroyitemid();
  static const int kMDestroyitemIDFieldNumber = 1;
  inline ::google::protobuf::int64 m_destroyitemid() const;
  inline void set_m_destroyitemid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MapDestroyitem)
 private:
  inline void set_has_m_destroyitemid();
  inline void clear_has_m_destroyitemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 m_destroyitemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static E_MapDestroyitem* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MapDestroyitem : public ::google::protobuf::Message {
 public:
  Sheet_MapDestroyitem();
  virtual ~Sheet_MapDestroyitem();

  Sheet_MapDestroyitem(const Sheet_MapDestroyitem& from);

  inline Sheet_MapDestroyitem& operator=(const Sheet_MapDestroyitem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MapDestroyitem& default_instance();

  void Swap(Sheet_MapDestroyitem* other);

  // implements Message ----------------------------------------------

  Sheet_MapDestroyitem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MapDestroyitem& from);
  void MergeFrom(const Sheet_MapDestroyitem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MapDestroyitem E_MapDestroyitem_List = 1;
  inline int e_mapdestroyitem_list_size() const;
  inline void clear_e_mapdestroyitem_list();
  static const int kEMapDestroyitemListFieldNumber = 1;
  inline const ::proto_ff::E_MapDestroyitem& e_mapdestroyitem_list(int index) const;
  inline ::proto_ff::E_MapDestroyitem* mutable_e_mapdestroyitem_list(int index);
  inline ::proto_ff::E_MapDestroyitem* add_e_mapdestroyitem_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapDestroyitem >&
      e_mapdestroyitem_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapDestroyitem >*
      mutable_e_mapdestroyitem_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MapDestroyitem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapDestroyitem > e_mapdestroyitem_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MapDestroyitem* default_instance_;
};
// -------------------------------------------------------------------

class E_MapButton : public ::google::protobuf::Message {
 public:
  E_MapButton();
  virtual ~E_MapButton();

  E_MapButton(const E_MapButton& from);

  inline E_MapButton& operator=(const E_MapButton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MapButton& default_instance();

  void Swap(E_MapButton* other);

  // implements Message ----------------------------------------------

  E_MapButton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MapButton& from);
  void MergeFrom(const E_MapButton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_arg1 = 3;
  inline bool has_m_arg1() const;
  inline void clear_m_arg1();
  static const int kMArg1FieldNumber = 3;
  inline ::google::protobuf::int32 m_arg1() const;
  inline void set_m_arg1(::google::protobuf::int32 value);

  // optional int32 m_arg2 = 4;
  inline bool has_m_arg2() const;
  inline void clear_m_arg2();
  static const int kMArg2FieldNumber = 4;
  inline ::google::protobuf::int32 m_arg2() const;
  inline void set_m_arg2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MapButton)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_arg1();
  inline void clear_has_m_arg1();
  inline void set_has_m_arg2();
  inline void clear_has_m_arg2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int32 m_arg1_;
  ::google::protobuf::int32 m_arg2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static E_MapButton* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MapButton : public ::google::protobuf::Message {
 public:
  Sheet_MapButton();
  virtual ~Sheet_MapButton();

  Sheet_MapButton(const Sheet_MapButton& from);

  inline Sheet_MapButton& operator=(const Sheet_MapButton& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MapButton& default_instance();

  void Swap(Sheet_MapButton* other);

  // implements Message ----------------------------------------------

  Sheet_MapButton* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MapButton& from);
  void MergeFrom(const Sheet_MapButton& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MapButton E_MapButton_List = 1;
  inline int e_mapbutton_list_size() const;
  inline void clear_e_mapbutton_list();
  static const int kEMapButtonListFieldNumber = 1;
  inline const ::proto_ff::E_MapButton& e_mapbutton_list(int index) const;
  inline ::proto_ff::E_MapButton* mutable_e_mapbutton_list(int index);
  inline ::proto_ff::E_MapButton* add_e_mapbutton_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapButton >&
      e_mapbutton_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapButton >*
      mutable_e_mapbutton_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MapButton)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapButton > e_mapbutton_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MapButton* default_instance_;
};
// -------------------------------------------------------------------

class E_MapInspireRewardDesc : public ::google::protobuf::Message {
 public:
  E_MapInspireRewardDesc();
  virtual ~E_MapInspireRewardDesc();

  E_MapInspireRewardDesc(const E_MapInspireRewardDesc& from);

  inline E_MapInspireRewardDesc& operator=(const E_MapInspireRewardDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MapInspireRewardDesc& default_instance();

  void Swap(E_MapInspireRewardDesc* other);

  // implements Message ----------------------------------------------

  E_MapInspireRewardDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MapInspireRewardDesc& from);
  void MergeFrom(const E_MapInspireRewardDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_Num = 1;
  inline bool has_m_num() const;
  inline void clear_m_num();
  static const int kMNumFieldNumber = 1;
  inline ::google::protobuf::int32 m_num() const;
  inline void set_m_num(::google::protobuf::int32 value);

  // optional int32 m_Id = 2;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 2;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_MapInspireRewardDesc)
 private:
  inline void set_has_m_num();
  inline void clear_has_m_num();
  inline void set_has_m_id();
  inline void clear_has_m_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_num_;
  ::google::protobuf::int32 m_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static E_MapInspireRewardDesc* default_instance_;
};
// -------------------------------------------------------------------

class E_MapInspire : public ::google::protobuf::Message {
 public:
  E_MapInspire();
  virtual ~E_MapInspire();

  E_MapInspire(const E_MapInspire& from);

  inline E_MapInspire& operator=(const E_MapInspire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_MapInspire& default_instance();

  void Swap(E_MapInspire* other);

  // implements Message ----------------------------------------------

  E_MapInspire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_MapInspire& from);
  void MergeFrom(const E_MapInspire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_group = 2;
  inline bool has_m_group() const;
  inline void clear_m_group();
  static const int kMGroupFieldNumber = 2;
  inline ::google::protobuf::int32 m_group() const;
  inline void set_m_group(::google::protobuf::int32 value);

  // optional string m_name = 3;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 3;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_costId = 4;
  inline bool has_m_costid() const;
  inline void clear_m_costid();
  static const int kMCostIdFieldNumber = 4;
  inline ::google::protobuf::int32 m_costid() const;
  inline void set_m_costid(::google::protobuf::int32 value);

  // optional int32 m_costNum = 5;
  inline bool has_m_costnum() const;
  inline void clear_m_costnum();
  static const int kMCostNumFieldNumber = 5;
  inline ::google::protobuf::int32 m_costnum() const;
  inline void set_m_costnum(::google::protobuf::int32 value);

  // optional int32 m_skillid = 6;
  inline bool has_m_skillid() const;
  inline void clear_m_skillid();
  static const int kMSkillidFieldNumber = 6;
  inline ::google::protobuf::int32 m_skillid() const;
  inline void set_m_skillid(::google::protobuf::int32 value);

  // optional int32 m_times = 7;
  inline bool has_m_times() const;
  inline void clear_m_times();
  static const int kMTimesFieldNumber = 7;
  inline ::google::protobuf::int32 m_times() const;
  inline void set_m_times(::google::protobuf::int32 value);

  // repeated .proto_ff.E_MapInspireRewardDesc m_reward = 8;
  inline int m_reward_size() const;
  inline void clear_m_reward();
  static const int kMRewardFieldNumber = 8;
  inline const ::proto_ff::E_MapInspireRewardDesc& m_reward(int index) const;
  inline ::proto_ff::E_MapInspireRewardDesc* mutable_m_reward(int index);
  inline ::proto_ff::E_MapInspireRewardDesc* add_m_reward();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspireRewardDesc >&
      m_reward() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspireRewardDesc >*
      mutable_m_reward();

  // @@protoc_insertion_point(class_scope:proto_ff.E_MapInspire)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_group();
  inline void clear_has_m_group();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_costid();
  inline void clear_has_m_costid();
  inline void set_has_m_costnum();
  inline void clear_has_m_costnum();
  inline void set_has_m_skillid();
  inline void clear_has_m_skillid();
  inline void set_has_m_times();
  inline void clear_has_m_times();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_group_;
  ::std::string* m_name_;
  ::google::protobuf::int32 m_costid_;
  ::google::protobuf::int32 m_costnum_;
  ::google::protobuf::int32 m_skillid_;
  ::google::protobuf::int32 m_times_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspireRewardDesc > m_reward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static E_MapInspire* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_MapInspire : public ::google::protobuf::Message {
 public:
  Sheet_MapInspire();
  virtual ~Sheet_MapInspire();

  Sheet_MapInspire(const Sheet_MapInspire& from);

  inline Sheet_MapInspire& operator=(const Sheet_MapInspire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_MapInspire& default_instance();

  void Swap(Sheet_MapInspire* other);

  // implements Message ----------------------------------------------

  Sheet_MapInspire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_MapInspire& from);
  void MergeFrom(const Sheet_MapInspire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_MapInspire E_MapInspire_List = 1;
  inline int e_mapinspire_list_size() const;
  inline void clear_e_mapinspire_list();
  static const int kEMapInspireListFieldNumber = 1;
  inline const ::proto_ff::E_MapInspire& e_mapinspire_list(int index) const;
  inline ::proto_ff::E_MapInspire* mutable_e_mapinspire_list(int index);
  inline ::proto_ff::E_MapInspire* add_e_mapinspire_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspire >&
      e_mapinspire_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspire >*
      mutable_e_mapinspire_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_MapInspire)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspire > e_mapinspire_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fMap_2eproto();
  friend void protobuf_AssignDesc_E_5fMap_2eproto();
  friend void protobuf_ShutdownFile_E_5fMap_2eproto();

  void InitAsDefaultInstance();
  static Sheet_MapInspire* default_instance_;
};
// ===================================================================


// ===================================================================

// E_MapMap

// optional int64 m_mapId = 1;
inline bool E_MapMap::has_m_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MapMap::set_has_m_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MapMap::clear_has_m_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MapMap::clear_m_mapid() {
  m_mapid_ = GOOGLE_LONGLONG(0);
  clear_has_m_mapid();
}
inline ::google::protobuf::int64 E_MapMap::m_mapid() const {
  return m_mapid_;
}
inline void E_MapMap::set_m_mapid(::google::protobuf::int64 value) {
  set_has_m_mapid();
  m_mapid_ = value;
}

// optional int32 m_levelLimit = 2;
inline bool E_MapMap::has_m_levellimit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MapMap::set_has_m_levellimit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MapMap::clear_has_m_levellimit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MapMap::clear_m_levellimit() {
  m_levellimit_ = 0;
  clear_has_m_levellimit();
}
inline ::google::protobuf::int32 E_MapMap::m_levellimit() const {
  return m_levellimit_;
}
inline void E_MapMap::set_m_levellimit(::google::protobuf::int32 value) {
  set_has_m_levellimit();
  m_levellimit_ = value;
}

// optional string m_adviceLv = 3;
inline bool E_MapMap::has_m_advicelv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MapMap::set_has_m_advicelv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MapMap::clear_has_m_advicelv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MapMap::clear_m_advicelv() {
  if (m_advicelv_ != &::google::protobuf::internal::kEmptyString) {
    m_advicelv_->clear();
  }
  clear_has_m_advicelv();
}
inline const ::std::string& E_MapMap::m_advicelv() const {
  return *m_advicelv_;
}
inline void E_MapMap::set_m_advicelv(const ::std::string& value) {
  set_has_m_advicelv();
  if (m_advicelv_ == &::google::protobuf::internal::kEmptyString) {
    m_advicelv_ = new ::std::string;
  }
  m_advicelv_->assign(value);
}
inline void E_MapMap::set_m_advicelv(const char* value) {
  set_has_m_advicelv();
  if (m_advicelv_ == &::google::protobuf::internal::kEmptyString) {
    m_advicelv_ = new ::std::string;
  }
  m_advicelv_->assign(value);
}
inline void E_MapMap::set_m_advicelv(const char* value, size_t size) {
  set_has_m_advicelv();
  if (m_advicelv_ == &::google::protobuf::internal::kEmptyString) {
    m_advicelv_ = new ::std::string;
  }
  m_advicelv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MapMap::mutable_m_advicelv() {
  set_has_m_advicelv();
  if (m_advicelv_ == &::google::protobuf::internal::kEmptyString) {
    m_advicelv_ = new ::std::string;
  }
  return m_advicelv_;
}
inline ::std::string* E_MapMap::release_m_advicelv() {
  clear_has_m_advicelv();
  if (m_advicelv_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_advicelv_;
    m_advicelv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MapMap::set_allocated_m_advicelv(::std::string* m_advicelv) {
  if (m_advicelv_ != &::google::protobuf::internal::kEmptyString) {
    delete m_advicelv_;
  }
  if (m_advicelv) {
    set_has_m_advicelv();
    m_advicelv_ = m_advicelv;
  } else {
    clear_has_m_advicelv();
    m_advicelv_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_isDyn = 4;
inline bool E_MapMap::has_m_isdyn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MapMap::set_has_m_isdyn() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MapMap::clear_has_m_isdyn() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MapMap::clear_m_isdyn() {
  m_isdyn_ = 0;
  clear_has_m_isdyn();
}
inline ::google::protobuf::int32 E_MapMap::m_isdyn() const {
  return m_isdyn_;
}
inline void E_MapMap::set_m_isdyn(::google::protobuf::int32 value) {
  set_has_m_isdyn();
  m_isdyn_ = value;
}

// optional int32 m_mapType = 5;
inline bool E_MapMap::has_m_maptype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MapMap::set_has_m_maptype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MapMap::clear_has_m_maptype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MapMap::clear_m_maptype() {
  m_maptype_ = 0;
  clear_has_m_maptype();
}
inline ::google::protobuf::int32 E_MapMap::m_maptype() const {
  return m_maptype_;
}
inline void E_MapMap::set_m_maptype(::google::protobuf::int32 value) {
  set_has_m_maptype();
  m_maptype_ = value;
}

// optional int32 m_mapSubType = 6;
inline bool E_MapMap::has_m_mapsubtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MapMap::set_has_m_mapsubtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MapMap::clear_has_m_mapsubtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MapMap::clear_m_mapsubtype() {
  m_mapsubtype_ = 0;
  clear_has_m_mapsubtype();
}
inline ::google::protobuf::int32 E_MapMap::m_mapsubtype() const {
  return m_mapsubtype_;
}
inline void E_MapMap::set_m_mapsubtype(::google::protobuf::int32 value) {
  set_has_m_mapsubtype();
  m_mapsubtype_ = value;
}

// optional int32 m_clearanceTime = 7;
inline bool E_MapMap::has_m_clearancetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MapMap::set_has_m_clearancetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MapMap::clear_has_m_clearancetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MapMap::clear_m_clearancetime() {
  m_clearancetime_ = 0;
  clear_has_m_clearancetime();
}
inline ::google::protobuf::int32 E_MapMap::m_clearancetime() const {
  return m_clearancetime_;
}
inline void E_MapMap::set_m_clearancetime(::google::protobuf::int32 value) {
  set_has_m_clearancetime();
  m_clearancetime_ = value;
}

// optional int32 m_mapPkmode = 8;
inline bool E_MapMap::has_m_mappkmode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MapMap::set_has_m_mappkmode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MapMap::clear_has_m_mappkmode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MapMap::clear_m_mappkmode() {
  m_mappkmode_ = 0;
  clear_has_m_mappkmode();
}
inline ::google::protobuf::int32 E_MapMap::m_mappkmode() const {
  return m_mappkmode_;
}
inline void E_MapMap::set_m_mappkmode(::google::protobuf::int32 value) {
  set_has_m_mappkmode();
  m_mappkmode_ = value;
}

// optional string m_mapPkValue = 9;
inline bool E_MapMap::has_m_mappkvalue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MapMap::set_has_m_mappkvalue() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MapMap::clear_has_m_mappkvalue() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MapMap::clear_m_mappkvalue() {
  if (m_mappkvalue_ != &::google::protobuf::internal::kEmptyString) {
    m_mappkvalue_->clear();
  }
  clear_has_m_mappkvalue();
}
inline const ::std::string& E_MapMap::m_mappkvalue() const {
  return *m_mappkvalue_;
}
inline void E_MapMap::set_m_mappkvalue(const ::std::string& value) {
  set_has_m_mappkvalue();
  if (m_mappkvalue_ == &::google::protobuf::internal::kEmptyString) {
    m_mappkvalue_ = new ::std::string;
  }
  m_mappkvalue_->assign(value);
}
inline void E_MapMap::set_m_mappkvalue(const char* value) {
  set_has_m_mappkvalue();
  if (m_mappkvalue_ == &::google::protobuf::internal::kEmptyString) {
    m_mappkvalue_ = new ::std::string;
  }
  m_mappkvalue_->assign(value);
}
inline void E_MapMap::set_m_mappkvalue(const char* value, size_t size) {
  set_has_m_mappkvalue();
  if (m_mappkvalue_ == &::google::protobuf::internal::kEmptyString) {
    m_mappkvalue_ = new ::std::string;
  }
  m_mappkvalue_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MapMap::mutable_m_mappkvalue() {
  set_has_m_mappkvalue();
  if (m_mappkvalue_ == &::google::protobuf::internal::kEmptyString) {
    m_mappkvalue_ = new ::std::string;
  }
  return m_mappkvalue_;
}
inline ::std::string* E_MapMap::release_m_mappkvalue() {
  clear_has_m_mappkvalue();
  if (m_mappkvalue_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_mappkvalue_;
    m_mappkvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MapMap::set_allocated_m_mappkvalue(::std::string* m_mappkvalue) {
  if (m_mappkvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mappkvalue_;
  }
  if (m_mappkvalue) {
    set_has_m_mappkvalue();
    m_mappkvalue_ = m_mappkvalue;
  } else {
    clear_has_m_mappkvalue();
    m_mappkvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_pklock = 10;
inline bool E_MapMap::has_m_pklock() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MapMap::set_has_m_pklock() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MapMap::clear_has_m_pklock() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MapMap::clear_m_pklock() {
  m_pklock_ = 0;
  clear_has_m_pklock();
}
inline ::google::protobuf::int32 E_MapMap::m_pklock() const {
  return m_pklock_;
}
inline void E_MapMap::set_m_pklock(::google::protobuf::int32 value) {
  set_has_m_pklock();
  m_pklock_ = value;
}

// optional int32 m_pk = 11;
inline bool E_MapMap::has_m_pk() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MapMap::set_has_m_pk() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MapMap::clear_has_m_pk() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MapMap::clear_m_pk() {
  m_pk_ = 0;
  clear_has_m_pk();
}
inline ::google::protobuf::int32 E_MapMap::m_pk() const {
  return m_pk_;
}
inline void E_MapMap::set_m_pk(::google::protobuf::int32 value) {
  set_has_m_pk();
  m_pk_ = value;
}

// optional int32 m_killValue = 12;
inline bool E_MapMap::has_m_killvalue() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_MapMap::set_has_m_killvalue() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_MapMap::clear_has_m_killvalue() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_MapMap::clear_m_killvalue() {
  m_killvalue_ = 0;
  clear_has_m_killvalue();
}
inline ::google::protobuf::int32 E_MapMap::m_killvalue() const {
  return m_killvalue_;
}
inline void E_MapMap::set_m_killvalue(::google::protobuf::int32 value) {
  set_has_m_killvalue();
  m_killvalue_ = value;
}

// optional int32 m_BanGroup = 13;
inline bool E_MapMap::has_m_bangroup() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_MapMap::set_has_m_bangroup() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_MapMap::clear_has_m_bangroup() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_MapMap::clear_m_bangroup() {
  m_bangroup_ = 0;
  clear_has_m_bangroup();
}
inline ::google::protobuf::int32 E_MapMap::m_bangroup() const {
  return m_bangroup_;
}
inline void E_MapMap::set_m_bangroup(::google::protobuf::int32 value) {
  set_has_m_bangroup();
  m_bangroup_ = value;
}

// optional int32 m_reviveTime = 14;
inline bool E_MapMap::has_m_revivetime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_MapMap::set_has_m_revivetime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_MapMap::clear_has_m_revivetime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_MapMap::clear_m_revivetime() {
  m_revivetime_ = 0;
  clear_has_m_revivetime();
}
inline ::google::protobuf::int32 E_MapMap::m_revivetime() const {
  return m_revivetime_;
}
inline void E_MapMap::set_m_revivetime(::google::protobuf::int32 value) {
  set_has_m_revivetime();
  m_revivetime_ = value;
}

// optional int32 m_mapWide = 15;
inline bool E_MapMap::has_m_mapwide() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_MapMap::set_has_m_mapwide() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_MapMap::clear_has_m_mapwide() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_MapMap::clear_m_mapwide() {
  m_mapwide_ = 0;
  clear_has_m_mapwide();
}
inline ::google::protobuf::int32 E_MapMap::m_mapwide() const {
  return m_mapwide_;
}
inline void E_MapMap::set_m_mapwide(::google::protobuf::int32 value) {
  set_has_m_mapwide();
  m_mapwide_ = value;
}

// optional int32 m_mapHeight = 16;
inline bool E_MapMap::has_m_mapheight() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_MapMap::set_has_m_mapheight() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_MapMap::clear_has_m_mapheight() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_MapMap::clear_m_mapheight() {
  m_mapheight_ = 0;
  clear_has_m_mapheight();
}
inline ::google::protobuf::int32 E_MapMap::m_mapheight() const {
  return m_mapheight_;
}
inline void E_MapMap::set_m_mapheight(::google::protobuf::int32 value) {
  set_has_m_mapheight();
  m_mapheight_ = value;
}

// optional string m_mapResources = 17;
inline bool E_MapMap::has_m_mapresources() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_MapMap::set_has_m_mapresources() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_MapMap::clear_has_m_mapresources() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_MapMap::clear_m_mapresources() {
  if (m_mapresources_ != &::google::protobuf::internal::kEmptyString) {
    m_mapresources_->clear();
  }
  clear_has_m_mapresources();
}
inline const ::std::string& E_MapMap::m_mapresources() const {
  return *m_mapresources_;
}
inline void E_MapMap::set_m_mapresources(const ::std::string& value) {
  set_has_m_mapresources();
  if (m_mapresources_ == &::google::protobuf::internal::kEmptyString) {
    m_mapresources_ = new ::std::string;
  }
  m_mapresources_->assign(value);
}
inline void E_MapMap::set_m_mapresources(const char* value) {
  set_has_m_mapresources();
  if (m_mapresources_ == &::google::protobuf::internal::kEmptyString) {
    m_mapresources_ = new ::std::string;
  }
  m_mapresources_->assign(value);
}
inline void E_MapMap::set_m_mapresources(const char* value, size_t size) {
  set_has_m_mapresources();
  if (m_mapresources_ == &::google::protobuf::internal::kEmptyString) {
    m_mapresources_ = new ::std::string;
  }
  m_mapresources_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MapMap::mutable_m_mapresources() {
  set_has_m_mapresources();
  if (m_mapresources_ == &::google::protobuf::internal::kEmptyString) {
    m_mapresources_ = new ::std::string;
  }
  return m_mapresources_;
}
inline ::std::string* E_MapMap::release_m_mapresources() {
  clear_has_m_mapresources();
  if (m_mapresources_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_mapresources_;
    m_mapresources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MapMap::set_allocated_m_mapresources(::std::string* m_mapresources) {
  if (m_mapresources_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mapresources_;
  }
  if (m_mapresources) {
    set_has_m_mapresources();
    m_mapresources_ = m_mapresources;
  } else {
    clear_has_m_mapresources();
    m_mapresources_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 m_reviveSkill = 18;
inline bool E_MapMap::has_m_reviveskill() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_MapMap::set_has_m_reviveskill() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_MapMap::clear_has_m_reviveskill() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_MapMap::clear_m_reviveskill() {
  m_reviveskill_ = GOOGLE_LONGLONG(0);
  clear_has_m_reviveskill();
}
inline ::google::protobuf::int64 E_MapMap::m_reviveskill() const {
  return m_reviveskill_;
}
inline void E_MapMap::set_m_reviveskill(::google::protobuf::int64 value) {
  set_has_m_reviveskill();
  m_reviveskill_ = value;
}

// optional int32 m_reviveInPlaceType = 19;
inline bool E_MapMap::has_m_reviveinplacetype() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_MapMap::set_has_m_reviveinplacetype() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_MapMap::clear_has_m_reviveinplacetype() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_MapMap::clear_m_reviveinplacetype() {
  m_reviveinplacetype_ = 0;
  clear_has_m_reviveinplacetype();
}
inline ::google::protobuf::int32 E_MapMap::m_reviveinplacetype() const {
  return m_reviveinplacetype_;
}
inline void E_MapMap::set_m_reviveinplacetype(::google::protobuf::int32 value) {
  set_has_m_reviveinplacetype();
  m_reviveinplacetype_ = value;
}

// optional int32 m_isHangUp = 20;
inline bool E_MapMap::has_m_ishangup() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void E_MapMap::set_has_m_ishangup() {
  _has_bits_[0] |= 0x00080000u;
}
inline void E_MapMap::clear_has_m_ishangup() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void E_MapMap::clear_m_ishangup() {
  m_ishangup_ = 0;
  clear_has_m_ishangup();
}
inline ::google::protobuf::int32 E_MapMap::m_ishangup() const {
  return m_ishangup_;
}
inline void E_MapMap::set_m_ishangup(::google::protobuf::int32 value) {
  set_has_m_ishangup();
  m_ishangup_ = value;
}

// optional int32 m_itemDropType = 21;
inline bool E_MapMap::has_m_itemdroptype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void E_MapMap::set_has_m_itemdroptype() {
  _has_bits_[0] |= 0x00100000u;
}
inline void E_MapMap::clear_has_m_itemdroptype() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void E_MapMap::clear_m_itemdroptype() {
  m_itemdroptype_ = 0;
  clear_has_m_itemdroptype();
}
inline ::google::protobuf::int32 E_MapMap::m_itemdroptype() const {
  return m_itemdroptype_;
}
inline void E_MapMap::set_m_itemdroptype(::google::protobuf::int32 value) {
  set_has_m_itemdroptype();
  m_itemdroptype_ = value;
}

// optional string m_itemDropID = 22;
inline bool E_MapMap::has_m_itemdropid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void E_MapMap::set_has_m_itemdropid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void E_MapMap::clear_has_m_itemdropid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void E_MapMap::clear_m_itemdropid() {
  if (m_itemdropid_ != &::google::protobuf::internal::kEmptyString) {
    m_itemdropid_->clear();
  }
  clear_has_m_itemdropid();
}
inline const ::std::string& E_MapMap::m_itemdropid() const {
  return *m_itemdropid_;
}
inline void E_MapMap::set_m_itemdropid(const ::std::string& value) {
  set_has_m_itemdropid();
  if (m_itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    m_itemdropid_ = new ::std::string;
  }
  m_itemdropid_->assign(value);
}
inline void E_MapMap::set_m_itemdropid(const char* value) {
  set_has_m_itemdropid();
  if (m_itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    m_itemdropid_ = new ::std::string;
  }
  m_itemdropid_->assign(value);
}
inline void E_MapMap::set_m_itemdropid(const char* value, size_t size) {
  set_has_m_itemdropid();
  if (m_itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    m_itemdropid_ = new ::std::string;
  }
  m_itemdropid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MapMap::mutable_m_itemdropid() {
  set_has_m_itemdropid();
  if (m_itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    m_itemdropid_ = new ::std::string;
  }
  return m_itemdropid_;
}
inline ::std::string* E_MapMap::release_m_itemdropid() {
  clear_has_m_itemdropid();
  if (m_itemdropid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_itemdropid_;
    m_itemdropid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MapMap::set_allocated_m_itemdropid(::std::string* m_itemdropid) {
  if (m_itemdropid_ != &::google::protobuf::internal::kEmptyString) {
    delete m_itemdropid_;
  }
  if (m_itemdropid) {
    set_has_m_itemdropid();
    m_itemdropid_ = m_itemdropid;
  } else {
    clear_has_m_itemdropid();
    m_itemdropid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 m_linkOffLine = 23;
inline bool E_MapMap::has_m_linkoffline() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void E_MapMap::set_has_m_linkoffline() {
  _has_bits_[0] |= 0x00400000u;
}
inline void E_MapMap::clear_has_m_linkoffline() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void E_MapMap::clear_m_linkoffline() {
  m_linkoffline_ = GOOGLE_LONGLONG(0);
  clear_has_m_linkoffline();
}
inline ::google::protobuf::int64 E_MapMap::m_linkoffline() const {
  return m_linkoffline_;
}
inline void E_MapMap::set_m_linkoffline(::google::protobuf::int64 value) {
  set_has_m_linkoffline();
  m_linkoffline_ = value;
}

// optional int32 m_banOnHook = 24;
inline bool E_MapMap::has_m_banonhook() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void E_MapMap::set_has_m_banonhook() {
  _has_bits_[0] |= 0x00800000u;
}
inline void E_MapMap::clear_has_m_banonhook() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void E_MapMap::clear_m_banonhook() {
  m_banonhook_ = 0;
  clear_has_m_banonhook();
}
inline ::google::protobuf::int32 E_MapMap::m_banonhook() const {
  return m_banonhook_;
}
inline void E_MapMap::set_m_banonhook(::google::protobuf::int32 value) {
  set_has_m_banonhook();
  m_banonhook_ = value;
}

// optional int32 m_Rewait = 25;
inline bool E_MapMap::has_m_rewait() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void E_MapMap::set_has_m_rewait() {
  _has_bits_[0] |= 0x01000000u;
}
inline void E_MapMap::clear_has_m_rewait() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void E_MapMap::clear_m_rewait() {
  m_rewait_ = 0;
  clear_has_m_rewait();
}
inline ::google::protobuf::int32 E_MapMap::m_rewait() const {
  return m_rewait_;
}
inline void E_MapMap::set_m_rewait(::google::protobuf::int32 value) {
  set_has_m_rewait();
  m_rewait_ = value;
}

// optional int32 m_REtime = 26;
inline bool E_MapMap::has_m_retime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void E_MapMap::set_has_m_retime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void E_MapMap::clear_has_m_retime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void E_MapMap::clear_m_retime() {
  m_retime_ = 0;
  clear_has_m_retime();
}
inline ::google::protobuf::int32 E_MapMap::m_retime() const {
  return m_retime_;
}
inline void E_MapMap::set_m_retime(::google::protobuf::int32 value) {
  set_has_m_retime();
  m_retime_ = value;
}

// optional int32 m_HREBan = 27;
inline bool E_MapMap::has_m_hreban() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void E_MapMap::set_has_m_hreban() {
  _has_bits_[0] |= 0x04000000u;
}
inline void E_MapMap::clear_has_m_hreban() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void E_MapMap::clear_m_hreban() {
  m_hreban_ = 0;
  clear_has_m_hreban();
}
inline ::google::protobuf::int32 E_MapMap::m_hreban() const {
  return m_hreban_;
}
inline void E_MapMap::set_m_hreban(::google::protobuf::int32 value) {
  set_has_m_hreban();
  m_hreban_ = value;
}

// optional int32 m_Retiered = 28;
inline bool E_MapMap::has_m_retiered() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void E_MapMap::set_has_m_retiered() {
  _has_bits_[0] |= 0x08000000u;
}
inline void E_MapMap::clear_has_m_retiered() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void E_MapMap::clear_m_retiered() {
  m_retiered_ = 0;
  clear_has_m_retiered();
}
inline ::google::protobuf::int32 E_MapMap::m_retiered() const {
  return m_retiered_;
}
inline void E_MapMap::set_m_retiered(::google::protobuf::int32 value) {
  set_has_m_retiered();
  m_retiered_ = value;
}

// optional int32 m_REskillid = 29;
inline bool E_MapMap::has_m_reskillid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void E_MapMap::set_has_m_reskillid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void E_MapMap::clear_has_m_reskillid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void E_MapMap::clear_m_reskillid() {
  m_reskillid_ = 0;
  clear_has_m_reskillid();
}
inline ::google::protobuf::int32 E_MapMap::m_reskillid() const {
  return m_reskillid_;
}
inline void E_MapMap::set_m_reskillid(::google::protobuf::int32 value) {
  set_has_m_reskillid();
  m_reskillid_ = value;
}

// optional int32 m_Reteimes = 30;
inline bool E_MapMap::has_m_reteimes() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void E_MapMap::set_has_m_reteimes() {
  _has_bits_[0] |= 0x20000000u;
}
inline void E_MapMap::clear_has_m_reteimes() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void E_MapMap::clear_m_reteimes() {
  m_reteimes_ = 0;
  clear_has_m_reteimes();
}
inline ::google::protobuf::int32 E_MapMap::m_reteimes() const {
  return m_reteimes_;
}
inline void E_MapMap::set_m_reteimes(::google::protobuf::int32 value) {
  set_has_m_reteimes();
  m_reteimes_ = value;
}

// optional int32 m_drivePoint = 31;
inline bool E_MapMap::has_m_drivepoint() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void E_MapMap::set_has_m_drivepoint() {
  _has_bits_[0] |= 0x40000000u;
}
inline void E_MapMap::clear_has_m_drivepoint() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void E_MapMap::clear_m_drivepoint() {
  m_drivepoint_ = 0;
  clear_has_m_drivepoint();
}
inline ::google::protobuf::int32 E_MapMap::m_drivepoint() const {
  return m_drivepoint_;
}
inline void E_MapMap::set_m_drivepoint(::google::protobuf::int32 value) {
  set_has_m_drivepoint();
  m_drivepoint_ = value;
}

// optional int32 m_dieDP = 32;
inline bool E_MapMap::has_m_diedp() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void E_MapMap::set_has_m_diedp() {
  _has_bits_[0] |= 0x80000000u;
}
inline void E_MapMap::clear_has_m_diedp() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void E_MapMap::clear_m_diedp() {
  m_diedp_ = 0;
  clear_has_m_diedp();
}
inline ::google::protobuf::int32 E_MapMap::m_diedp() const {
  return m_diedp_;
}
inline void E_MapMap::set_m_diedp(::google::protobuf::int32 value) {
  set_has_m_diedp();
  m_diedp_ = value;
}

// optional int32 m_timeDP = 33;
inline bool E_MapMap::has_m_timedp() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void E_MapMap::set_has_m_timedp() {
  _has_bits_[1] |= 0x00000001u;
}
inline void E_MapMap::clear_has_m_timedp() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void E_MapMap::clear_m_timedp() {
  m_timedp_ = 0;
  clear_has_m_timedp();
}
inline ::google::protobuf::int32 E_MapMap::m_timedp() const {
  return m_timedp_;
}
inline void E_MapMap::set_m_timedp(::google::protobuf::int32 value) {
  set_has_m_timedp();
  m_timedp_ = value;
}

// optional int32 m_meditation = 34;
inline bool E_MapMap::has_m_meditation() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void E_MapMap::set_has_m_meditation() {
  _has_bits_[1] |= 0x00000002u;
}
inline void E_MapMap::clear_has_m_meditation() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void E_MapMap::clear_m_meditation() {
  m_meditation_ = 0;
  clear_has_m_meditation();
}
inline ::google::protobuf::int32 E_MapMap::m_meditation() const {
  return m_meditation_;
}
inline void E_MapMap::set_m_meditation(::google::protobuf::int32 value) {
  set_has_m_meditation();
  m_meditation_ = value;
}

// optional string m_mapButton = 35;
inline bool E_MapMap::has_m_mapbutton() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void E_MapMap::set_has_m_mapbutton() {
  _has_bits_[1] |= 0x00000004u;
}
inline void E_MapMap::clear_has_m_mapbutton() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void E_MapMap::clear_m_mapbutton() {
  if (m_mapbutton_ != &::google::protobuf::internal::kEmptyString) {
    m_mapbutton_->clear();
  }
  clear_has_m_mapbutton();
}
inline const ::std::string& E_MapMap::m_mapbutton() const {
  return *m_mapbutton_;
}
inline void E_MapMap::set_m_mapbutton(const ::std::string& value) {
  set_has_m_mapbutton();
  if (m_mapbutton_ == &::google::protobuf::internal::kEmptyString) {
    m_mapbutton_ = new ::std::string;
  }
  m_mapbutton_->assign(value);
}
inline void E_MapMap::set_m_mapbutton(const char* value) {
  set_has_m_mapbutton();
  if (m_mapbutton_ == &::google::protobuf::internal::kEmptyString) {
    m_mapbutton_ = new ::std::string;
  }
  m_mapbutton_->assign(value);
}
inline void E_MapMap::set_m_mapbutton(const char* value, size_t size) {
  set_has_m_mapbutton();
  if (m_mapbutton_ == &::google::protobuf::internal::kEmptyString) {
    m_mapbutton_ = new ::std::string;
  }
  m_mapbutton_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MapMap::mutable_m_mapbutton() {
  set_has_m_mapbutton();
  if (m_mapbutton_ == &::google::protobuf::internal::kEmptyString) {
    m_mapbutton_ = new ::std::string;
  }
  return m_mapbutton_;
}
inline ::std::string* E_MapMap::release_m_mapbutton() {
  clear_has_m_mapbutton();
  if (m_mapbutton_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_mapbutton_;
    m_mapbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MapMap::set_allocated_m_mapbutton(::std::string* m_mapbutton) {
  if (m_mapbutton_ != &::google::protobuf::internal::kEmptyString) {
    delete m_mapbutton_;
  }
  if (m_mapbutton) {
    set_has_m_mapbutton();
    m_mapbutton_ = m_mapbutton;
  } else {
    clear_has_m_mapbutton();
    m_mapbutton_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_banMount = 36;
inline bool E_MapMap::has_m_banmount() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void E_MapMap::set_has_m_banmount() {
  _has_bits_[1] |= 0x00000008u;
}
inline void E_MapMap::clear_has_m_banmount() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void E_MapMap::clear_m_banmount() {
  m_banmount_ = 0;
  clear_has_m_banmount();
}
inline ::google::protobuf::int32 E_MapMap::m_banmount() const {
  return m_banmount_;
}
inline void E_MapMap::set_m_banmount(::google::protobuf::int32 value) {
  set_has_m_banmount();
  m_banmount_ = value;
}

// optional int32 m_banLink = 37;
inline bool E_MapMap::has_m_banlink() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void E_MapMap::set_has_m_banlink() {
  _has_bits_[1] |= 0x00000010u;
}
inline void E_MapMap::clear_has_m_banlink() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void E_MapMap::clear_m_banlink() {
  m_banlink_ = 0;
  clear_has_m_banlink();
}
inline ::google::protobuf::int32 E_MapMap::m_banlink() const {
  return m_banlink_;
}
inline void E_MapMap::set_m_banlink(::google::protobuf::int32 value) {
  set_has_m_banlink();
  m_banlink_ = value;
}

// optional int32 m_lvSupPvp = 38;
inline bool E_MapMap::has_m_lvsuppvp() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void E_MapMap::set_has_m_lvsuppvp() {
  _has_bits_[1] |= 0x00000020u;
}
inline void E_MapMap::clear_has_m_lvsuppvp() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void E_MapMap::clear_m_lvsuppvp() {
  m_lvsuppvp_ = 0;
  clear_has_m_lvsuppvp();
}
inline ::google::protobuf::int32 E_MapMap::m_lvsuppvp() const {
  return m_lvsuppvp_;
}
inline void E_MapMap::set_m_lvsuppvp(::google::protobuf::int32 value) {
  set_has_m_lvsuppvp();
  m_lvsuppvp_ = value;
}

// optional int32 m_powerSupPvp = 39;
inline bool E_MapMap::has_m_powersuppvp() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void E_MapMap::set_has_m_powersuppvp() {
  _has_bits_[1] |= 0x00000040u;
}
inline void E_MapMap::clear_has_m_powersuppvp() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void E_MapMap::clear_m_powersuppvp() {
  m_powersuppvp_ = 0;
  clear_has_m_powersuppvp();
}
inline ::google::protobuf::int32 E_MapMap::m_powersuppvp() const {
  return m_powersuppvp_;
}
inline void E_MapMap::set_m_powersuppvp(::google::protobuf::int32 value) {
  set_has_m_powersuppvp();
  m_powersuppvp_ = value;
}

// -------------------------------------------------------------------

// Sheet_MapMap

// repeated .proto_ff.E_MapMap E_MapMap_List = 1;
inline int Sheet_MapMap::e_mapmap_list_size() const {
  return e_mapmap_list_.size();
}
inline void Sheet_MapMap::clear_e_mapmap_list() {
  e_mapmap_list_.Clear();
}
inline const ::proto_ff::E_MapMap& Sheet_MapMap::e_mapmap_list(int index) const {
  return e_mapmap_list_.Get(index);
}
inline ::proto_ff::E_MapMap* Sheet_MapMap::mutable_e_mapmap_list(int index) {
  return e_mapmap_list_.Mutable(index);
}
inline ::proto_ff::E_MapMap* Sheet_MapMap::add_e_mapmap_list() {
  return e_mapmap_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapMap >&
Sheet_MapMap::e_mapmap_list() const {
  return e_mapmap_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapMap >*
Sheet_MapMap::mutable_e_mapmap_list() {
  return &e_mapmap_list_;
}

// -------------------------------------------------------------------

// E_MapItemdrop

// optional int32 m_itemDropID = 1;
inline bool E_MapItemdrop::has_m_itemdropid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MapItemdrop::set_has_m_itemdropid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MapItemdrop::clear_has_m_itemdropid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MapItemdrop::clear_m_itemdropid() {
  m_itemdropid_ = 0;
  clear_has_m_itemdropid();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_itemdropid() const {
  return m_itemdropid_;
}
inline void E_MapItemdrop::set_m_itemdropid(::google::protobuf::int32 value) {
  set_has_m_itemdropid();
  m_itemdropid_ = value;
}

// optional int32 m_dropType = 2;
inline bool E_MapItemdrop::has_m_droptype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MapItemdrop::set_has_m_droptype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MapItemdrop::clear_has_m_droptype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MapItemdrop::clear_m_droptype() {
  m_droptype_ = 0;
  clear_has_m_droptype();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_droptype() const {
  return m_droptype_;
}
inline void E_MapItemdrop::set_m_droptype(::google::protobuf::int32 value) {
  set_has_m_droptype();
  m_droptype_ = value;
}

// optional int32 m_odds = 3;
inline bool E_MapItemdrop::has_m_odds() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MapItemdrop::set_has_m_odds() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MapItemdrop::clear_has_m_odds() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MapItemdrop::clear_m_odds() {
  m_odds_ = 0;
  clear_has_m_odds();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_odds() const {
  return m_odds_;
}
inline void E_MapItemdrop::set_m_odds(::google::protobuf::int32 value) {
  set_has_m_odds();
  m_odds_ = value;
}

// optional int32 m_ownProtect = 4;
inline bool E_MapItemdrop::has_m_ownprotect() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MapItemdrop::set_has_m_ownprotect() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MapItemdrop::clear_has_m_ownprotect() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MapItemdrop::clear_m_ownprotect() {
  m_ownprotect_ = 0;
  clear_has_m_ownprotect();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_ownprotect() const {
  return m_ownprotect_;
}
inline void E_MapItemdrop::set_m_ownprotect(::google::protobuf::int32 value) {
  set_has_m_ownprotect();
  m_ownprotect_ = value;
}

// optional int32 m_belongType = 5;
inline bool E_MapItemdrop::has_m_belongtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MapItemdrop::set_has_m_belongtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MapItemdrop::clear_has_m_belongtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MapItemdrop::clear_m_belongtype() {
  m_belongtype_ = 0;
  clear_has_m_belongtype();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_belongtype() const {
  return m_belongtype_;
}
inline void E_MapItemdrop::set_m_belongtype(::google::protobuf::int32 value) {
  set_has_m_belongtype();
  m_belongtype_ = value;
}

// optional int32 m_numMax = 6;
inline bool E_MapItemdrop::has_m_nummax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MapItemdrop::set_has_m_nummax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MapItemdrop::clear_has_m_nummax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MapItemdrop::clear_m_nummax() {
  m_nummax_ = 0;
  clear_has_m_nummax();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_nummax() const {
  return m_nummax_;
}
inline void E_MapItemdrop::set_m_nummax(::google::protobuf::int32 value) {
  set_has_m_nummax();
  m_nummax_ = value;
}

// optional int32 m_dropvaluea = 7;
inline bool E_MapItemdrop::has_m_dropvaluea() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MapItemdrop::set_has_m_dropvaluea() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MapItemdrop::clear_has_m_dropvaluea() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MapItemdrop::clear_m_dropvaluea() {
  m_dropvaluea_ = 0;
  clear_has_m_dropvaluea();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_dropvaluea() const {
  return m_dropvaluea_;
}
inline void E_MapItemdrop::set_m_dropvaluea(::google::protobuf::int32 value) {
  set_has_m_dropvaluea();
  m_dropvaluea_ = value;
}

// optional int32 m_dropvalueb = 8;
inline bool E_MapItemdrop::has_m_dropvalueb() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_MapItemdrop::set_has_m_dropvalueb() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_MapItemdrop::clear_has_m_dropvalueb() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_MapItemdrop::clear_m_dropvalueb() {
  m_dropvalueb_ = 0;
  clear_has_m_dropvalueb();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_dropvalueb() const {
  return m_dropvalueb_;
}
inline void E_MapItemdrop::set_m_dropvalueb(::google::protobuf::int32 value) {
  set_has_m_dropvalueb();
  m_dropvalueb_ = value;
}

// optional int32 m_dropvaluec = 9;
inline bool E_MapItemdrop::has_m_dropvaluec() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_MapItemdrop::set_has_m_dropvaluec() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_MapItemdrop::clear_has_m_dropvaluec() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_MapItemdrop::clear_m_dropvaluec() {
  m_dropvaluec_ = 0;
  clear_has_m_dropvaluec();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_dropvaluec() const {
  return m_dropvaluec_;
}
inline void E_MapItemdrop::set_m_dropvaluec(::google::protobuf::int32 value) {
  set_has_m_dropvaluec();
  m_dropvaluec_ = value;
}

// optional int32 m_dropvalued = 10;
inline bool E_MapItemdrop::has_m_dropvalued() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_MapItemdrop::set_has_m_dropvalued() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_MapItemdrop::clear_has_m_dropvalued() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_MapItemdrop::clear_m_dropvalued() {
  m_dropvalued_ = 0;
  clear_has_m_dropvalued();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_dropvalued() const {
  return m_dropvalued_;
}
inline void E_MapItemdrop::set_m_dropvalued(::google::protobuf::int32 value) {
  set_has_m_dropvalued();
  m_dropvalued_ = value;
}

// optional int32 m_dropvaluee = 11;
inline bool E_MapItemdrop::has_m_dropvaluee() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_MapItemdrop::set_has_m_dropvaluee() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_MapItemdrop::clear_has_m_dropvaluee() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_MapItemdrop::clear_m_dropvaluee() {
  m_dropvaluee_ = 0;
  clear_has_m_dropvaluee();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_dropvaluee() const {
  return m_dropvaluee_;
}
inline void E_MapItemdrop::set_m_dropvaluee(::google::protobuf::int32 value) {
  set_has_m_dropvaluee();
  m_dropvaluee_ = value;
}

// optional int32 m_dropvaluef = 12;
inline bool E_MapItemdrop::has_m_dropvaluef() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_MapItemdrop::set_has_m_dropvaluef() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_MapItemdrop::clear_has_m_dropvaluef() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_MapItemdrop::clear_m_dropvaluef() {
  m_dropvaluef_ = 0;
  clear_has_m_dropvaluef();
}
inline ::google::protobuf::int32 E_MapItemdrop::m_dropvaluef() const {
  return m_dropvaluef_;
}
inline void E_MapItemdrop::set_m_dropvaluef(::google::protobuf::int32 value) {
  set_has_m_dropvaluef();
  m_dropvaluef_ = value;
}

// -------------------------------------------------------------------

// Sheet_MapItemdrop

// repeated .proto_ff.E_MapItemdrop E_MapItemdrop_List = 1;
inline int Sheet_MapItemdrop::e_mapitemdrop_list_size() const {
  return e_mapitemdrop_list_.size();
}
inline void Sheet_MapItemdrop::clear_e_mapitemdrop_list() {
  e_mapitemdrop_list_.Clear();
}
inline const ::proto_ff::E_MapItemdrop& Sheet_MapItemdrop::e_mapitemdrop_list(int index) const {
  return e_mapitemdrop_list_.Get(index);
}
inline ::proto_ff::E_MapItemdrop* Sheet_MapItemdrop::mutable_e_mapitemdrop_list(int index) {
  return e_mapitemdrop_list_.Mutable(index);
}
inline ::proto_ff::E_MapItemdrop* Sheet_MapItemdrop::add_e_mapitemdrop_list() {
  return e_mapitemdrop_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapItemdrop >&
Sheet_MapItemdrop::e_mapitemdrop_list() const {
  return e_mapitemdrop_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapItemdrop >*
Sheet_MapItemdrop::mutable_e_mapitemdrop_list() {
  return &e_mapitemdrop_list_;
}

// -------------------------------------------------------------------

// E_MapDestroyitem

// optional int64 m_destroyitemID = 1;
inline bool E_MapDestroyitem::has_m_destroyitemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MapDestroyitem::set_has_m_destroyitemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MapDestroyitem::clear_has_m_destroyitemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MapDestroyitem::clear_m_destroyitemid() {
  m_destroyitemid_ = GOOGLE_LONGLONG(0);
  clear_has_m_destroyitemid();
}
inline ::google::protobuf::int64 E_MapDestroyitem::m_destroyitemid() const {
  return m_destroyitemid_;
}
inline void E_MapDestroyitem::set_m_destroyitemid(::google::protobuf::int64 value) {
  set_has_m_destroyitemid();
  m_destroyitemid_ = value;
}

// -------------------------------------------------------------------

// Sheet_MapDestroyitem

// repeated .proto_ff.E_MapDestroyitem E_MapDestroyitem_List = 1;
inline int Sheet_MapDestroyitem::e_mapdestroyitem_list_size() const {
  return e_mapdestroyitem_list_.size();
}
inline void Sheet_MapDestroyitem::clear_e_mapdestroyitem_list() {
  e_mapdestroyitem_list_.Clear();
}
inline const ::proto_ff::E_MapDestroyitem& Sheet_MapDestroyitem::e_mapdestroyitem_list(int index) const {
  return e_mapdestroyitem_list_.Get(index);
}
inline ::proto_ff::E_MapDestroyitem* Sheet_MapDestroyitem::mutable_e_mapdestroyitem_list(int index) {
  return e_mapdestroyitem_list_.Mutable(index);
}
inline ::proto_ff::E_MapDestroyitem* Sheet_MapDestroyitem::add_e_mapdestroyitem_list() {
  return e_mapdestroyitem_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapDestroyitem >&
Sheet_MapDestroyitem::e_mapdestroyitem_list() const {
  return e_mapdestroyitem_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapDestroyitem >*
Sheet_MapDestroyitem::mutable_e_mapdestroyitem_list() {
  return &e_mapdestroyitem_list_;
}

// -------------------------------------------------------------------

// E_MapButton

// optional int32 m_id = 1;
inline bool E_MapButton::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MapButton::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MapButton::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MapButton::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MapButton::m_id() const {
  return m_id_;
}
inline void E_MapButton::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_type = 2;
inline bool E_MapButton::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MapButton::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MapButton::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MapButton::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_MapButton::m_type() const {
  return m_type_;
}
inline void E_MapButton::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_arg1 = 3;
inline bool E_MapButton::has_m_arg1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MapButton::set_has_m_arg1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MapButton::clear_has_m_arg1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MapButton::clear_m_arg1() {
  m_arg1_ = 0;
  clear_has_m_arg1();
}
inline ::google::protobuf::int32 E_MapButton::m_arg1() const {
  return m_arg1_;
}
inline void E_MapButton::set_m_arg1(::google::protobuf::int32 value) {
  set_has_m_arg1();
  m_arg1_ = value;
}

// optional int32 m_arg2 = 4;
inline bool E_MapButton::has_m_arg2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MapButton::set_has_m_arg2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MapButton::clear_has_m_arg2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MapButton::clear_m_arg2() {
  m_arg2_ = 0;
  clear_has_m_arg2();
}
inline ::google::protobuf::int32 E_MapButton::m_arg2() const {
  return m_arg2_;
}
inline void E_MapButton::set_m_arg2(::google::protobuf::int32 value) {
  set_has_m_arg2();
  m_arg2_ = value;
}

// -------------------------------------------------------------------

// Sheet_MapButton

// repeated .proto_ff.E_MapButton E_MapButton_List = 1;
inline int Sheet_MapButton::e_mapbutton_list_size() const {
  return e_mapbutton_list_.size();
}
inline void Sheet_MapButton::clear_e_mapbutton_list() {
  e_mapbutton_list_.Clear();
}
inline const ::proto_ff::E_MapButton& Sheet_MapButton::e_mapbutton_list(int index) const {
  return e_mapbutton_list_.Get(index);
}
inline ::proto_ff::E_MapButton* Sheet_MapButton::mutable_e_mapbutton_list(int index) {
  return e_mapbutton_list_.Mutable(index);
}
inline ::proto_ff::E_MapButton* Sheet_MapButton::add_e_mapbutton_list() {
  return e_mapbutton_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapButton >&
Sheet_MapButton::e_mapbutton_list() const {
  return e_mapbutton_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapButton >*
Sheet_MapButton::mutable_e_mapbutton_list() {
  return &e_mapbutton_list_;
}

// -------------------------------------------------------------------

// E_MapInspireRewardDesc

// optional int32 m_Num = 1;
inline bool E_MapInspireRewardDesc::has_m_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MapInspireRewardDesc::set_has_m_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MapInspireRewardDesc::clear_has_m_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MapInspireRewardDesc::clear_m_num() {
  m_num_ = 0;
  clear_has_m_num();
}
inline ::google::protobuf::int32 E_MapInspireRewardDesc::m_num() const {
  return m_num_;
}
inline void E_MapInspireRewardDesc::set_m_num(::google::protobuf::int32 value) {
  set_has_m_num();
  m_num_ = value;
}

// optional int32 m_Id = 2;
inline bool E_MapInspireRewardDesc::has_m_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MapInspireRewardDesc::set_has_m_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MapInspireRewardDesc::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MapInspireRewardDesc::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MapInspireRewardDesc::m_id() const {
  return m_id_;
}
inline void E_MapInspireRewardDesc::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// -------------------------------------------------------------------

// E_MapInspire

// optional int32 m_id = 1;
inline bool E_MapInspire::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_MapInspire::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_MapInspire::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_MapInspire::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_MapInspire::m_id() const {
  return m_id_;
}
inline void E_MapInspire::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_group = 2;
inline bool E_MapInspire::has_m_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_MapInspire::set_has_m_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_MapInspire::clear_has_m_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_MapInspire::clear_m_group() {
  m_group_ = 0;
  clear_has_m_group();
}
inline ::google::protobuf::int32 E_MapInspire::m_group() const {
  return m_group_;
}
inline void E_MapInspire::set_m_group(::google::protobuf::int32 value) {
  set_has_m_group();
  m_group_ = value;
}

// optional string m_name = 3;
inline bool E_MapInspire::has_m_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_MapInspire::set_has_m_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_MapInspire::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_MapInspire::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_MapInspire::m_name() const {
  return *m_name_;
}
inline void E_MapInspire::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_MapInspire::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_MapInspire::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_MapInspire::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_MapInspire::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_MapInspire::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_costId = 4;
inline bool E_MapInspire::has_m_costid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_MapInspire::set_has_m_costid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_MapInspire::clear_has_m_costid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_MapInspire::clear_m_costid() {
  m_costid_ = 0;
  clear_has_m_costid();
}
inline ::google::protobuf::int32 E_MapInspire::m_costid() const {
  return m_costid_;
}
inline void E_MapInspire::set_m_costid(::google::protobuf::int32 value) {
  set_has_m_costid();
  m_costid_ = value;
}

// optional int32 m_costNum = 5;
inline bool E_MapInspire::has_m_costnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_MapInspire::set_has_m_costnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_MapInspire::clear_has_m_costnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_MapInspire::clear_m_costnum() {
  m_costnum_ = 0;
  clear_has_m_costnum();
}
inline ::google::protobuf::int32 E_MapInspire::m_costnum() const {
  return m_costnum_;
}
inline void E_MapInspire::set_m_costnum(::google::protobuf::int32 value) {
  set_has_m_costnum();
  m_costnum_ = value;
}

// optional int32 m_skillid = 6;
inline bool E_MapInspire::has_m_skillid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_MapInspire::set_has_m_skillid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_MapInspire::clear_has_m_skillid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_MapInspire::clear_m_skillid() {
  m_skillid_ = 0;
  clear_has_m_skillid();
}
inline ::google::protobuf::int32 E_MapInspire::m_skillid() const {
  return m_skillid_;
}
inline void E_MapInspire::set_m_skillid(::google::protobuf::int32 value) {
  set_has_m_skillid();
  m_skillid_ = value;
}

// optional int32 m_times = 7;
inline bool E_MapInspire::has_m_times() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_MapInspire::set_has_m_times() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_MapInspire::clear_has_m_times() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_MapInspire::clear_m_times() {
  m_times_ = 0;
  clear_has_m_times();
}
inline ::google::protobuf::int32 E_MapInspire::m_times() const {
  return m_times_;
}
inline void E_MapInspire::set_m_times(::google::protobuf::int32 value) {
  set_has_m_times();
  m_times_ = value;
}

// repeated .proto_ff.E_MapInspireRewardDesc m_reward = 8;
inline int E_MapInspire::m_reward_size() const {
  return m_reward_.size();
}
inline void E_MapInspire::clear_m_reward() {
  m_reward_.Clear();
}
inline const ::proto_ff::E_MapInspireRewardDesc& E_MapInspire::m_reward(int index) const {
  return m_reward_.Get(index);
}
inline ::proto_ff::E_MapInspireRewardDesc* E_MapInspire::mutable_m_reward(int index) {
  return m_reward_.Mutable(index);
}
inline ::proto_ff::E_MapInspireRewardDesc* E_MapInspire::add_m_reward() {
  return m_reward_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspireRewardDesc >&
E_MapInspire::m_reward() const {
  return m_reward_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspireRewardDesc >*
E_MapInspire::mutable_m_reward() {
  return &m_reward_;
}

// -------------------------------------------------------------------

// Sheet_MapInspire

// repeated .proto_ff.E_MapInspire E_MapInspire_List = 1;
inline int Sheet_MapInspire::e_mapinspire_list_size() const {
  return e_mapinspire_list_.size();
}
inline void Sheet_MapInspire::clear_e_mapinspire_list() {
  e_mapinspire_list_.Clear();
}
inline const ::proto_ff::E_MapInspire& Sheet_MapInspire::e_mapinspire_list(int index) const {
  return e_mapinspire_list_.Get(index);
}
inline ::proto_ff::E_MapInspire* Sheet_MapInspire::mutable_e_mapinspire_list(int index) {
  return e_mapinspire_list_.Mutable(index);
}
inline ::proto_ff::E_MapInspire* Sheet_MapInspire::add_e_mapinspire_list() {
  return e_mapinspire_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspire >&
Sheet_MapInspire::e_mapinspire_list() const {
  return e_mapinspire_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_MapInspire >*
Sheet_MapInspire::mutable_e_mapinspire_list() {
  return &e_mapinspire_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fMap_2eproto__INCLUDED
