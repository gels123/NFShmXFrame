// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Pk3v3.proto

#ifndef PROTOBUF_E_5fPk3v3_2eproto__INCLUDED
#define PROTOBUF_E_5fPk3v3_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_E_5fPk3v3_2eproto();
void protobuf_AssignDesc_E_5fPk3v3_2eproto();
void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

class E_Pk3v3Level;
class Sheet_Pk3v3Level;
class E_Pk3v3Reward;
class Sheet_Pk3v3Reward;
class E_Pk3v3Badge;
class Sheet_Pk3v3Badge;
class E_Pk3v3Constant;
class Sheet_Pk3v3Constant;
class E_Pk3v3Exp;
class Sheet_Pk3v3Exp;

// ===================================================================

class E_Pk3v3Level : public ::google::protobuf::Message {
 public:
  E_Pk3v3Level();
  virtual ~E_Pk3v3Level();

  E_Pk3v3Level(const E_Pk3v3Level& from);

  inline E_Pk3v3Level& operator=(const E_Pk3v3Level& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_Pk3v3Level& default_instance();

  void Swap(E_Pk3v3Level* other);

  // implements Message ----------------------------------------------

  E_Pk3v3Level* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_Pk3v3Level& from);
  void MergeFrom(const E_Pk3v3Level& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional string m_name = 3;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 3;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_starNum = 4;
  inline bool has_m_starnum() const;
  inline void clear_m_starnum();
  static const int kMStarNumFieldNumber = 4;
  inline ::google::protobuf::int32 m_starnum() const;
  inline void set_m_starnum(::google::protobuf::int32 value);

  // optional int32 m_scoring = 5;
  inline bool has_m_scoring() const;
  inline void clear_m_scoring();
  static const int kMScoringFieldNumber = 5;
  inline ::google::protobuf::int32 m_scoring() const;
  inline void set_m_scoring(::google::protobuf::int32 value);

  // optional string m_badge = 6;
  inline bool has_m_badge() const;
  inline void clear_m_badge();
  static const int kMBadgeFieldNumber = 6;
  inline const ::std::string& m_badge() const;
  inline void set_m_badge(const ::std::string& value);
  inline void set_m_badge(const char* value);
  inline void set_m_badge(const char* value, size_t size);
  inline ::std::string* mutable_m_badge();
  inline ::std::string* release_m_badge();
  inline void set_allocated_m_badge(::std::string* m_badge);

  // optional string m_showBadge = 7;
  inline bool has_m_showbadge() const;
  inline void clear_m_showbadge();
  static const int kMShowBadgeFieldNumber = 7;
  inline const ::std::string& m_showbadge() const;
  inline void set_m_showbadge(const ::std::string& value);
  inline void set_m_showbadge(const char* value);
  inline void set_m_showbadge(const char* value, size_t size);
  inline ::std::string* mutable_m_showbadge();
  inline ::std::string* release_m_showbadge();
  inline void set_allocated_m_showbadge(::std::string* m_showbadge);

  // optional int32 m_scoringAdd = 8;
  inline bool has_m_scoringadd() const;
  inline void clear_m_scoringadd();
  static const int kMScoringAddFieldNumber = 8;
  inline ::google::protobuf::int32 m_scoringadd() const;
  inline void set_m_scoringadd(::google::protobuf::int32 value);

  // optional int32 m_scoringCut = 9;
  inline bool has_m_scoringcut() const;
  inline void clear_m_scoringcut();
  static const int kMScoringCutFieldNumber = 9;
  inline ::google::protobuf::int32 m_scoringcut() const;
  inline void set_m_scoringcut(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_Pk3v3Level)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_starnum();
  inline void clear_has_m_starnum();
  inline void set_has_m_scoring();
  inline void clear_has_m_scoring();
  inline void set_has_m_badge();
  inline void clear_has_m_badge();
  inline void set_has_m_showbadge();
  inline void clear_has_m_showbadge();
  inline void set_has_m_scoringadd();
  inline void clear_has_m_scoringadd();
  inline void set_has_m_scoringcut();
  inline void clear_has_m_scoringcut();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_type_;
  ::std::string* m_name_;
  ::google::protobuf::int32 m_starnum_;
  ::google::protobuf::int32 m_scoring_;
  ::std::string* m_badge_;
  ::std::string* m_showbadge_;
  ::google::protobuf::int32 m_scoringadd_;
  ::google::protobuf::int32 m_scoringcut_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static E_Pk3v3Level* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_Pk3v3Level : public ::google::protobuf::Message {
 public:
  Sheet_Pk3v3Level();
  virtual ~Sheet_Pk3v3Level();

  Sheet_Pk3v3Level(const Sheet_Pk3v3Level& from);

  inline Sheet_Pk3v3Level& operator=(const Sheet_Pk3v3Level& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_Pk3v3Level& default_instance();

  void Swap(Sheet_Pk3v3Level* other);

  // implements Message ----------------------------------------------

  Sheet_Pk3v3Level* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_Pk3v3Level& from);
  void MergeFrom(const Sheet_Pk3v3Level& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_Pk3v3Level E_Pk3v3Level_List = 1;
  inline int e_pk3v3level_list_size() const;
  inline void clear_e_pk3v3level_list();
  static const int kEPk3V3LevelListFieldNumber = 1;
  inline const ::proto_ff::E_Pk3v3Level& e_pk3v3level_list(int index) const;
  inline ::proto_ff::E_Pk3v3Level* mutable_e_pk3v3level_list(int index);
  inline ::proto_ff::E_Pk3v3Level* add_e_pk3v3level_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Level >&
      e_pk3v3level_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Level >*
      mutable_e_pk3v3level_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_Pk3v3Level)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Level > e_pk3v3level_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static Sheet_Pk3v3Level* default_instance_;
};
// -------------------------------------------------------------------

class E_Pk3v3Reward : public ::google::protobuf::Message {
 public:
  E_Pk3v3Reward();
  virtual ~E_Pk3v3Reward();

  E_Pk3v3Reward(const E_Pk3v3Reward& from);

  inline E_Pk3v3Reward& operator=(const E_Pk3v3Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_Pk3v3Reward& default_instance();

  void Swap(E_Pk3v3Reward* other);

  // implements Message ----------------------------------------------

  E_Pk3v3Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_Pk3v3Reward& from);
  void MergeFrom(const E_Pk3v3Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_type = 2;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 2;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // optional int32 m_condition = 3;
  inline bool has_m_condition() const;
  inline void clear_m_condition();
  static const int kMConditionFieldNumber = 3;
  inline ::google::protobuf::int32 m_condition() const;
  inline void set_m_condition(::google::protobuf::int32 value);

  // optional int64 m_reward = 4;
  inline bool has_m_reward() const;
  inline void clear_m_reward();
  static const int kMRewardFieldNumber = 4;
  inline ::google::protobuf::int64 m_reward() const;
  inline void set_m_reward(::google::protobuf::int64 value);

  // repeated int32 m_param = 5;
  inline int m_param_size() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 5;
  inline ::google::protobuf::int32 m_param(int index) const;
  inline void set_m_param(int index, ::google::protobuf::int32 value);
  inline void add_m_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_param();

  // @@protoc_insertion_point(class_scope:proto_ff.E_Pk3v3Reward)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_type();
  inline void clear_has_m_type();
  inline void set_has_m_condition();
  inline void clear_has_m_condition();
  inline void set_has_m_reward();
  inline void clear_has_m_reward();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::int64 m_reward_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_param_;
  ::google::protobuf::int32 m_condition_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static E_Pk3v3Reward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_Pk3v3Reward : public ::google::protobuf::Message {
 public:
  Sheet_Pk3v3Reward();
  virtual ~Sheet_Pk3v3Reward();

  Sheet_Pk3v3Reward(const Sheet_Pk3v3Reward& from);

  inline Sheet_Pk3v3Reward& operator=(const Sheet_Pk3v3Reward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_Pk3v3Reward& default_instance();

  void Swap(Sheet_Pk3v3Reward* other);

  // implements Message ----------------------------------------------

  Sheet_Pk3v3Reward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_Pk3v3Reward& from);
  void MergeFrom(const Sheet_Pk3v3Reward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_Pk3v3Reward E_Pk3v3Reward_List = 1;
  inline int e_pk3v3reward_list_size() const;
  inline void clear_e_pk3v3reward_list();
  static const int kEPk3V3RewardListFieldNumber = 1;
  inline const ::proto_ff::E_Pk3v3Reward& e_pk3v3reward_list(int index) const;
  inline ::proto_ff::E_Pk3v3Reward* mutable_e_pk3v3reward_list(int index);
  inline ::proto_ff::E_Pk3v3Reward* add_e_pk3v3reward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Reward >&
      e_pk3v3reward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Reward >*
      mutable_e_pk3v3reward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_Pk3v3Reward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Reward > e_pk3v3reward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static Sheet_Pk3v3Reward* default_instance_;
};
// -------------------------------------------------------------------

class E_Pk3v3Badge : public ::google::protobuf::Message {
 public:
  E_Pk3v3Badge();
  virtual ~E_Pk3v3Badge();

  E_Pk3v3Badge(const E_Pk3v3Badge& from);

  inline E_Pk3v3Badge& operator=(const E_Pk3v3Badge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_Pk3v3Badge& default_instance();

  void Swap(E_Pk3v3Badge* other);

  // implements Message ----------------------------------------------

  E_Pk3v3Badge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_Pk3v3Badge& from);
  void MergeFrom(const E_Pk3v3Badge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional string m_name = 2;
  inline bool has_m_name() const;
  inline void clear_m_name();
  static const int kMNameFieldNumber = 2;
  inline const ::std::string& m_name() const;
  inline void set_m_name(const ::std::string& value);
  inline void set_m_name(const char* value);
  inline void set_m_name(const char* value, size_t size);
  inline ::std::string* mutable_m_name();
  inline ::std::string* release_m_name();
  inline void set_allocated_m_name(::std::string* m_name);

  // optional int32 m_type = 3;
  inline bool has_m_type() const;
  inline void clear_m_type();
  static const int kMTypeFieldNumber = 3;
  inline ::google::protobuf::int32 m_type() const;
  inline void set_m_type(::google::protobuf::int32 value);

  // repeated int32 m_param = 4;
  inline int m_param_size() const;
  inline void clear_m_param();
  static const int kMParamFieldNumber = 4;
  inline ::google::protobuf::int32 m_param(int index) const;
  inline void set_m_param(int index, ::google::protobuf::int32 value);
  inline void add_m_param(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_param() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_param();

  // @@protoc_insertion_point(class_scope:proto_ff.E_Pk3v3Badge)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_name();
  inline void clear_has_m_name();
  inline void set_has_m_type();
  inline void clear_has_m_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* m_name_;
  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_param_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static E_Pk3v3Badge* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_Pk3v3Badge : public ::google::protobuf::Message {
 public:
  Sheet_Pk3v3Badge();
  virtual ~Sheet_Pk3v3Badge();

  Sheet_Pk3v3Badge(const Sheet_Pk3v3Badge& from);

  inline Sheet_Pk3v3Badge& operator=(const Sheet_Pk3v3Badge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_Pk3v3Badge& default_instance();

  void Swap(Sheet_Pk3v3Badge* other);

  // implements Message ----------------------------------------------

  Sheet_Pk3v3Badge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_Pk3v3Badge& from);
  void MergeFrom(const Sheet_Pk3v3Badge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_Pk3v3Badge E_Pk3v3Badge_List = 1;
  inline int e_pk3v3badge_list_size() const;
  inline void clear_e_pk3v3badge_list();
  static const int kEPk3V3BadgeListFieldNumber = 1;
  inline const ::proto_ff::E_Pk3v3Badge& e_pk3v3badge_list(int index) const;
  inline ::proto_ff::E_Pk3v3Badge* mutable_e_pk3v3badge_list(int index);
  inline ::proto_ff::E_Pk3v3Badge* add_e_pk3v3badge_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Badge >&
      e_pk3v3badge_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Badge >*
      mutable_e_pk3v3badge_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_Pk3v3Badge)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Badge > e_pk3v3badge_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static Sheet_Pk3v3Badge* default_instance_;
};
// -------------------------------------------------------------------

class E_Pk3v3Constant : public ::google::protobuf::Message {
 public:
  E_Pk3v3Constant();
  virtual ~E_Pk3v3Constant();

  E_Pk3v3Constant(const E_Pk3v3Constant& from);

  inline E_Pk3v3Constant& operator=(const E_Pk3v3Constant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_Pk3v3Constant& default_instance();

  void Swap(E_Pk3v3Constant* other);

  // implements Message ----------------------------------------------

  E_Pk3v3Constant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_Pk3v3Constant& from);
  void MergeFrom(const E_Pk3v3Constant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_id = 1;
  inline bool has_m_id() const;
  inline void clear_m_id();
  static const int kMIdFieldNumber = 1;
  inline ::google::protobuf::int32 m_id() const;
  inline void set_m_id(::google::protobuf::int32 value);

  // optional int32 m_teamMember = 2;
  inline bool has_m_teammember() const;
  inline void clear_m_teammember();
  static const int kMTeamMemberFieldNumber = 2;
  inline ::google::protobuf::int32 m_teammember() const;
  inline void set_m_teammember(::google::protobuf::int32 value);

  // optional int32 m_teamToplimit = 3;
  inline bool has_m_teamtoplimit() const;
  inline void clear_m_teamtoplimit();
  static const int kMTeamToplimitFieldNumber = 3;
  inline ::google::protobuf::int32 m_teamtoplimit() const;
  inline void set_m_teamtoplimit(::google::protobuf::int32 value);

  // optional int32 m_cedeTime = 4;
  inline bool has_m_cedetime() const;
  inline void clear_m_cedetime();
  static const int kMCedeTimeFieldNumber = 4;
  inline ::google::protobuf::int32 m_cedetime() const;
  inline void set_m_cedetime(::google::protobuf::int32 value);

  // optional int32 m_punishTime = 5;
  inline bool has_m_punishtime() const;
  inline void clear_m_punishtime();
  static const int kMPunishTimeFieldNumber = 5;
  inline ::google::protobuf::int32 m_punishtime() const;
  inline void set_m_punishtime(::google::protobuf::int32 value);

  // optional int32 m_breakTime = 6;
  inline bool has_m_breaktime() const;
  inline void clear_m_breaktime();
  static const int kMBreakTimeFieldNumber = 6;
  inline ::google::protobuf::int32 m_breaktime() const;
  inline void set_m_breaktime(::google::protobuf::int32 value);

  // optional int32 m_entryReward = 7;
  inline bool has_m_entryreward() const;
  inline void clear_m_entryreward();
  static const int kMEntryRewardFieldNumber = 7;
  inline ::google::protobuf::int32 m_entryreward() const;
  inline void set_m_entryreward(::google::protobuf::int32 value);

  // optional int32 m_entrTimes = 8;
  inline bool has_m_entrtimes() const;
  inline void clear_m_entrtimes();
  static const int kMEntrTimesFieldNumber = 8;
  inline ::google::protobuf::int32 m_entrtimes() const;
  inline void set_m_entrtimes(::google::protobuf::int32 value);

  // optional int32 m_mvpReward = 9;
  inline bool has_m_mvpreward() const;
  inline void clear_m_mvpreward();
  static const int kMMvpRewardFieldNumber = 9;
  inline ::google::protobuf::int32 m_mvpreward() const;
  inline void set_m_mvpreward(::google::protobuf::int32 value);

  // optional int32 m_mvpTimes = 10;
  inline bool has_m_mvptimes() const;
  inline void clear_m_mvptimes();
  static const int kMMvpTimesFieldNumber = 10;
  inline ::google::protobuf::int32 m_mvptimes() const;
  inline void set_m_mvptimes(::google::protobuf::int32 value);

  // optional int32 m_matchTime = 11;
  inline bool has_m_matchtime() const;
  inline void clear_m_matchtime();
  static const int kMMatchTimeFieldNumber = 11;
  inline ::google::protobuf::int32 m_matchtime() const;
  inline void set_m_matchtime(::google::protobuf::int32 value);

  // optional int32 m_unitName = 12;
  inline bool has_m_unitname() const;
  inline void clear_m_unitname();
  static const int kMUnitNameFieldNumber = 12;
  inline ::google::protobuf::int32 m_unitname() const;
  inline void set_m_unitname(::google::protobuf::int32 value);

  // optional int32 m_unitCost = 13;
  inline bool has_m_unitcost() const;
  inline void clear_m_unitcost();
  static const int kMUnitCostFieldNumber = 13;
  inline ::google::protobuf::int32 m_unitcost() const;
  inline void set_m_unitcost(::google::protobuf::int32 value);

  // optional int32 m_initialZLid = 14;
  inline bool has_m_initialzlid() const;
  inline void clear_m_initialzlid();
  static const int kMInitialZLidFieldNumber = 14;
  inline ::google::protobuf::int32 m_initialzlid() const;
  inline void set_m_initialzlid(::google::protobuf::int32 value);

  // optional string m_initialZLName = 15;
  inline bool has_m_initialzlname() const;
  inline void clear_m_initialzlname();
  static const int kMInitialZLNameFieldNumber = 15;
  inline const ::std::string& m_initialzlname() const;
  inline void set_m_initialzlname(const ::std::string& value);
  inline void set_m_initialzlname(const char* value);
  inline void set_m_initialzlname(const char* value, size_t size);
  inline ::std::string* mutable_m_initialzlname();
  inline ::std::string* release_m_initialzlname();
  inline void set_allocated_m_initialzlname(::std::string* m_initialzlname);

  // optional string m_robotName = 16;
  inline bool has_m_robotname() const;
  inline void clear_m_robotname();
  static const int kMRobotNameFieldNumber = 16;
  inline const ::std::string& m_robotname() const;
  inline void set_m_robotname(const ::std::string& value);
  inline void set_m_robotname(const char* value);
  inline void set_m_robotname(const char* value, size_t size);
  inline ::std::string* mutable_m_robotname();
  inline ::std::string* release_m_robotname();
  inline void set_allocated_m_robotname(::std::string* m_robotname);

  // optional int32 m_mateTime = 17;
  inline bool has_m_matetime() const;
  inline void clear_m_matetime();
  static const int kMMateTimeFieldNumber = 17;
  inline ::google::protobuf::int32 m_matetime() const;
  inline void set_m_matetime(::google::protobuf::int32 value);

  // optional int32 m_addTime = 18;
  inline bool has_m_addtime() const;
  inline void clear_m_addtime();
  static const int kMAddTimeFieldNumber = 18;
  inline ::google::protobuf::int32 m_addtime() const;
  inline void set_m_addtime(::google::protobuf::int32 value);

  // optional string m_initialNotice = 19;
  inline bool has_m_initialnotice() const;
  inline void clear_m_initialnotice();
  static const int kMInitialNoticeFieldNumber = 19;
  inline const ::std::string& m_initialnotice() const;
  inline void set_m_initialnotice(const ::std::string& value);
  inline void set_m_initialnotice(const char* value);
  inline void set_m_initialnotice(const char* value, size_t size);
  inline ::std::string* mutable_m_initialnotice();
  inline ::std::string* release_m_initialnotice();
  inline void set_allocated_m_initialnotice(::std::string* m_initialnotice);

  // repeated int32 m_showReward = 20;
  inline int m_showreward_size() const;
  inline void clear_m_showreward();
  static const int kMShowRewardFieldNumber = 20;
  inline ::google::protobuf::int32 m_showreward(int index) const;
  inline void set_m_showreward(int index, ::google::protobuf::int32 value);
  inline void add_m_showreward(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      m_showreward() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_m_showreward();

  // @@protoc_insertion_point(class_scope:proto_ff.E_Pk3v3Constant)
 private:
  inline void set_has_m_id();
  inline void clear_has_m_id();
  inline void set_has_m_teammember();
  inline void clear_has_m_teammember();
  inline void set_has_m_teamtoplimit();
  inline void clear_has_m_teamtoplimit();
  inline void set_has_m_cedetime();
  inline void clear_has_m_cedetime();
  inline void set_has_m_punishtime();
  inline void clear_has_m_punishtime();
  inline void set_has_m_breaktime();
  inline void clear_has_m_breaktime();
  inline void set_has_m_entryreward();
  inline void clear_has_m_entryreward();
  inline void set_has_m_entrtimes();
  inline void clear_has_m_entrtimes();
  inline void set_has_m_mvpreward();
  inline void clear_has_m_mvpreward();
  inline void set_has_m_mvptimes();
  inline void clear_has_m_mvptimes();
  inline void set_has_m_matchtime();
  inline void clear_has_m_matchtime();
  inline void set_has_m_unitname();
  inline void clear_has_m_unitname();
  inline void set_has_m_unitcost();
  inline void clear_has_m_unitcost();
  inline void set_has_m_initialzlid();
  inline void clear_has_m_initialzlid();
  inline void set_has_m_initialzlname();
  inline void clear_has_m_initialzlname();
  inline void set_has_m_robotname();
  inline void clear_has_m_robotname();
  inline void set_has_m_matetime();
  inline void clear_has_m_matetime();
  inline void set_has_m_addtime();
  inline void clear_has_m_addtime();
  inline void set_has_m_initialnotice();
  inline void clear_has_m_initialnotice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_id_;
  ::google::protobuf::int32 m_teammember_;
  ::google::protobuf::int32 m_teamtoplimit_;
  ::google::protobuf::int32 m_cedetime_;
  ::google::protobuf::int32 m_punishtime_;
  ::google::protobuf::int32 m_breaktime_;
  ::google::protobuf::int32 m_entryreward_;
  ::google::protobuf::int32 m_entrtimes_;
  ::google::protobuf::int32 m_mvpreward_;
  ::google::protobuf::int32 m_mvptimes_;
  ::google::protobuf::int32 m_matchtime_;
  ::google::protobuf::int32 m_unitname_;
  ::google::protobuf::int32 m_unitcost_;
  ::google::protobuf::int32 m_initialzlid_;
  ::std::string* m_initialzlname_;
  ::std::string* m_robotname_;
  ::google::protobuf::int32 m_matetime_;
  ::google::protobuf::int32 m_addtime_;
  ::std::string* m_initialnotice_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > m_showreward_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static E_Pk3v3Constant* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_Pk3v3Constant : public ::google::protobuf::Message {
 public:
  Sheet_Pk3v3Constant();
  virtual ~Sheet_Pk3v3Constant();

  Sheet_Pk3v3Constant(const Sheet_Pk3v3Constant& from);

  inline Sheet_Pk3v3Constant& operator=(const Sheet_Pk3v3Constant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_Pk3v3Constant& default_instance();

  void Swap(Sheet_Pk3v3Constant* other);

  // implements Message ----------------------------------------------

  Sheet_Pk3v3Constant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_Pk3v3Constant& from);
  void MergeFrom(const Sheet_Pk3v3Constant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_Pk3v3Constant E_Pk3v3Constant_List = 1;
  inline int e_pk3v3constant_list_size() const;
  inline void clear_e_pk3v3constant_list();
  static const int kEPk3V3ConstantListFieldNumber = 1;
  inline const ::proto_ff::E_Pk3v3Constant& e_pk3v3constant_list(int index) const;
  inline ::proto_ff::E_Pk3v3Constant* mutable_e_pk3v3constant_list(int index);
  inline ::proto_ff::E_Pk3v3Constant* add_e_pk3v3constant_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Constant >&
      e_pk3v3constant_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Constant >*
      mutable_e_pk3v3constant_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_Pk3v3Constant)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Constant > e_pk3v3constant_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static Sheet_Pk3v3Constant* default_instance_;
};
// -------------------------------------------------------------------

class E_Pk3v3Exp : public ::google::protobuf::Message {
 public:
  E_Pk3v3Exp();
  virtual ~E_Pk3v3Exp();

  E_Pk3v3Exp(const E_Pk3v3Exp& from);

  inline E_Pk3v3Exp& operator=(const E_Pk3v3Exp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const E_Pk3v3Exp& default_instance();

  void Swap(E_Pk3v3Exp* other);

  // implements Message ----------------------------------------------

  E_Pk3v3Exp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const E_Pk3v3Exp& from);
  void MergeFrom(const E_Pk3v3Exp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 m_lv = 1;
  inline bool has_m_lv() const;
  inline void clear_m_lv();
  static const int kMLvFieldNumber = 1;
  inline ::google::protobuf::int32 m_lv() const;
  inline void set_m_lv(::google::protobuf::int32 value);

  // optional int32 m_mateExp = 2;
  inline bool has_m_mateexp() const;
  inline void clear_m_mateexp();
  static const int kMMateExpFieldNumber = 2;
  inline ::google::protobuf::int32 m_mateexp() const;
  inline void set_m_mateexp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.E_Pk3v3Exp)
 private:
  inline void set_has_m_lv();
  inline void clear_has_m_lv();
  inline void set_has_m_mateexp();
  inline void clear_has_m_mateexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 m_lv_;
  ::google::protobuf::int32 m_mateexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static E_Pk3v3Exp* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_Pk3v3Exp : public ::google::protobuf::Message {
 public:
  Sheet_Pk3v3Exp();
  virtual ~Sheet_Pk3v3Exp();

  Sheet_Pk3v3Exp(const Sheet_Pk3v3Exp& from);

  inline Sheet_Pk3v3Exp& operator=(const Sheet_Pk3v3Exp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_Pk3v3Exp& default_instance();

  void Swap(Sheet_Pk3v3Exp* other);

  // implements Message ----------------------------------------------

  Sheet_Pk3v3Exp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_Pk3v3Exp& from);
  void MergeFrom(const Sheet_Pk3v3Exp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.E_Pk3v3Exp E_Pk3v3Exp_List = 1;
  inline int e_pk3v3exp_list_size() const;
  inline void clear_e_pk3v3exp_list();
  static const int kEPk3V3ExpListFieldNumber = 1;
  inline const ::proto_ff::E_Pk3v3Exp& e_pk3v3exp_list(int index) const;
  inline ::proto_ff::E_Pk3v3Exp* mutable_e_pk3v3exp_list(int index);
  inline ::proto_ff::E_Pk3v3Exp* add_e_pk3v3exp_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Exp >&
      e_pk3v3exp_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Exp >*
      mutable_e_pk3v3exp_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_Pk3v3Exp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Exp > e_pk3v3exp_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_E_5fPk3v3_2eproto();
  friend void protobuf_AssignDesc_E_5fPk3v3_2eproto();
  friend void protobuf_ShutdownFile_E_5fPk3v3_2eproto();

  void InitAsDefaultInstance();
  static Sheet_Pk3v3Exp* default_instance_;
};
// ===================================================================


// ===================================================================

// E_Pk3v3Level

// optional int32 m_id = 1;
inline bool E_Pk3v3Level::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_Pk3v3Level::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_Pk3v3Level::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_Pk3v3Level::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_Pk3v3Level::m_id() const {
  return m_id_;
}
inline void E_Pk3v3Level::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_type = 2;
inline bool E_Pk3v3Level::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_Pk3v3Level::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_Pk3v3Level::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_Pk3v3Level::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_Pk3v3Level::m_type() const {
  return m_type_;
}
inline void E_Pk3v3Level::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional string m_name = 3;
inline bool E_Pk3v3Level::has_m_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_Pk3v3Level::set_has_m_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_Pk3v3Level::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_Pk3v3Level::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_Pk3v3Level::m_name() const {
  return *m_name_;
}
inline void E_Pk3v3Level::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_Pk3v3Level::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_Pk3v3Level::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_Pk3v3Level::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_Pk3v3Level::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_Pk3v3Level::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_starNum = 4;
inline bool E_Pk3v3Level::has_m_starnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_Pk3v3Level::set_has_m_starnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_Pk3v3Level::clear_has_m_starnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_Pk3v3Level::clear_m_starnum() {
  m_starnum_ = 0;
  clear_has_m_starnum();
}
inline ::google::protobuf::int32 E_Pk3v3Level::m_starnum() const {
  return m_starnum_;
}
inline void E_Pk3v3Level::set_m_starnum(::google::protobuf::int32 value) {
  set_has_m_starnum();
  m_starnum_ = value;
}

// optional int32 m_scoring = 5;
inline bool E_Pk3v3Level::has_m_scoring() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_Pk3v3Level::set_has_m_scoring() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_Pk3v3Level::clear_has_m_scoring() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_Pk3v3Level::clear_m_scoring() {
  m_scoring_ = 0;
  clear_has_m_scoring();
}
inline ::google::protobuf::int32 E_Pk3v3Level::m_scoring() const {
  return m_scoring_;
}
inline void E_Pk3v3Level::set_m_scoring(::google::protobuf::int32 value) {
  set_has_m_scoring();
  m_scoring_ = value;
}

// optional string m_badge = 6;
inline bool E_Pk3v3Level::has_m_badge() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_Pk3v3Level::set_has_m_badge() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_Pk3v3Level::clear_has_m_badge() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_Pk3v3Level::clear_m_badge() {
  if (m_badge_ != &::google::protobuf::internal::kEmptyString) {
    m_badge_->clear();
  }
  clear_has_m_badge();
}
inline const ::std::string& E_Pk3v3Level::m_badge() const {
  return *m_badge_;
}
inline void E_Pk3v3Level::set_m_badge(const ::std::string& value) {
  set_has_m_badge();
  if (m_badge_ == &::google::protobuf::internal::kEmptyString) {
    m_badge_ = new ::std::string;
  }
  m_badge_->assign(value);
}
inline void E_Pk3v3Level::set_m_badge(const char* value) {
  set_has_m_badge();
  if (m_badge_ == &::google::protobuf::internal::kEmptyString) {
    m_badge_ = new ::std::string;
  }
  m_badge_->assign(value);
}
inline void E_Pk3v3Level::set_m_badge(const char* value, size_t size) {
  set_has_m_badge();
  if (m_badge_ == &::google::protobuf::internal::kEmptyString) {
    m_badge_ = new ::std::string;
  }
  m_badge_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_Pk3v3Level::mutable_m_badge() {
  set_has_m_badge();
  if (m_badge_ == &::google::protobuf::internal::kEmptyString) {
    m_badge_ = new ::std::string;
  }
  return m_badge_;
}
inline ::std::string* E_Pk3v3Level::release_m_badge() {
  clear_has_m_badge();
  if (m_badge_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_badge_;
    m_badge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_Pk3v3Level::set_allocated_m_badge(::std::string* m_badge) {
  if (m_badge_ != &::google::protobuf::internal::kEmptyString) {
    delete m_badge_;
  }
  if (m_badge) {
    set_has_m_badge();
    m_badge_ = m_badge;
  } else {
    clear_has_m_badge();
    m_badge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_showBadge = 7;
inline bool E_Pk3v3Level::has_m_showbadge() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_Pk3v3Level::set_has_m_showbadge() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_Pk3v3Level::clear_has_m_showbadge() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_Pk3v3Level::clear_m_showbadge() {
  if (m_showbadge_ != &::google::protobuf::internal::kEmptyString) {
    m_showbadge_->clear();
  }
  clear_has_m_showbadge();
}
inline const ::std::string& E_Pk3v3Level::m_showbadge() const {
  return *m_showbadge_;
}
inline void E_Pk3v3Level::set_m_showbadge(const ::std::string& value) {
  set_has_m_showbadge();
  if (m_showbadge_ == &::google::protobuf::internal::kEmptyString) {
    m_showbadge_ = new ::std::string;
  }
  m_showbadge_->assign(value);
}
inline void E_Pk3v3Level::set_m_showbadge(const char* value) {
  set_has_m_showbadge();
  if (m_showbadge_ == &::google::protobuf::internal::kEmptyString) {
    m_showbadge_ = new ::std::string;
  }
  m_showbadge_->assign(value);
}
inline void E_Pk3v3Level::set_m_showbadge(const char* value, size_t size) {
  set_has_m_showbadge();
  if (m_showbadge_ == &::google::protobuf::internal::kEmptyString) {
    m_showbadge_ = new ::std::string;
  }
  m_showbadge_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_Pk3v3Level::mutable_m_showbadge() {
  set_has_m_showbadge();
  if (m_showbadge_ == &::google::protobuf::internal::kEmptyString) {
    m_showbadge_ = new ::std::string;
  }
  return m_showbadge_;
}
inline ::std::string* E_Pk3v3Level::release_m_showbadge() {
  clear_has_m_showbadge();
  if (m_showbadge_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_showbadge_;
    m_showbadge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_Pk3v3Level::set_allocated_m_showbadge(::std::string* m_showbadge) {
  if (m_showbadge_ != &::google::protobuf::internal::kEmptyString) {
    delete m_showbadge_;
  }
  if (m_showbadge) {
    set_has_m_showbadge();
    m_showbadge_ = m_showbadge;
  } else {
    clear_has_m_showbadge();
    m_showbadge_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_scoringAdd = 8;
inline bool E_Pk3v3Level::has_m_scoringadd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_Pk3v3Level::set_has_m_scoringadd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_Pk3v3Level::clear_has_m_scoringadd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_Pk3v3Level::clear_m_scoringadd() {
  m_scoringadd_ = 0;
  clear_has_m_scoringadd();
}
inline ::google::protobuf::int32 E_Pk3v3Level::m_scoringadd() const {
  return m_scoringadd_;
}
inline void E_Pk3v3Level::set_m_scoringadd(::google::protobuf::int32 value) {
  set_has_m_scoringadd();
  m_scoringadd_ = value;
}

// optional int32 m_scoringCut = 9;
inline bool E_Pk3v3Level::has_m_scoringcut() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_Pk3v3Level::set_has_m_scoringcut() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_Pk3v3Level::clear_has_m_scoringcut() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_Pk3v3Level::clear_m_scoringcut() {
  m_scoringcut_ = 0;
  clear_has_m_scoringcut();
}
inline ::google::protobuf::int32 E_Pk3v3Level::m_scoringcut() const {
  return m_scoringcut_;
}
inline void E_Pk3v3Level::set_m_scoringcut(::google::protobuf::int32 value) {
  set_has_m_scoringcut();
  m_scoringcut_ = value;
}

// -------------------------------------------------------------------

// Sheet_Pk3v3Level

// repeated .proto_ff.E_Pk3v3Level E_Pk3v3Level_List = 1;
inline int Sheet_Pk3v3Level::e_pk3v3level_list_size() const {
  return e_pk3v3level_list_.size();
}
inline void Sheet_Pk3v3Level::clear_e_pk3v3level_list() {
  e_pk3v3level_list_.Clear();
}
inline const ::proto_ff::E_Pk3v3Level& Sheet_Pk3v3Level::e_pk3v3level_list(int index) const {
  return e_pk3v3level_list_.Get(index);
}
inline ::proto_ff::E_Pk3v3Level* Sheet_Pk3v3Level::mutable_e_pk3v3level_list(int index) {
  return e_pk3v3level_list_.Mutable(index);
}
inline ::proto_ff::E_Pk3v3Level* Sheet_Pk3v3Level::add_e_pk3v3level_list() {
  return e_pk3v3level_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Level >&
Sheet_Pk3v3Level::e_pk3v3level_list() const {
  return e_pk3v3level_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Level >*
Sheet_Pk3v3Level::mutable_e_pk3v3level_list() {
  return &e_pk3v3level_list_;
}

// -------------------------------------------------------------------

// E_Pk3v3Reward

// optional int32 m_id = 1;
inline bool E_Pk3v3Reward::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_Pk3v3Reward::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_Pk3v3Reward::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_Pk3v3Reward::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_Pk3v3Reward::m_id() const {
  return m_id_;
}
inline void E_Pk3v3Reward::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_type = 2;
inline bool E_Pk3v3Reward::has_m_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_Pk3v3Reward::set_has_m_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_Pk3v3Reward::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_Pk3v3Reward::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_Pk3v3Reward::m_type() const {
  return m_type_;
}
inline void E_Pk3v3Reward::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// optional int32 m_condition = 3;
inline bool E_Pk3v3Reward::has_m_condition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_Pk3v3Reward::set_has_m_condition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_Pk3v3Reward::clear_has_m_condition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_Pk3v3Reward::clear_m_condition() {
  m_condition_ = 0;
  clear_has_m_condition();
}
inline ::google::protobuf::int32 E_Pk3v3Reward::m_condition() const {
  return m_condition_;
}
inline void E_Pk3v3Reward::set_m_condition(::google::protobuf::int32 value) {
  set_has_m_condition();
  m_condition_ = value;
}

// optional int64 m_reward = 4;
inline bool E_Pk3v3Reward::has_m_reward() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_Pk3v3Reward::set_has_m_reward() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_Pk3v3Reward::clear_has_m_reward() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_Pk3v3Reward::clear_m_reward() {
  m_reward_ = GOOGLE_LONGLONG(0);
  clear_has_m_reward();
}
inline ::google::protobuf::int64 E_Pk3v3Reward::m_reward() const {
  return m_reward_;
}
inline void E_Pk3v3Reward::set_m_reward(::google::protobuf::int64 value) {
  set_has_m_reward();
  m_reward_ = value;
}

// repeated int32 m_param = 5;
inline int E_Pk3v3Reward::m_param_size() const {
  return m_param_.size();
}
inline void E_Pk3v3Reward::clear_m_param() {
  m_param_.Clear();
}
inline ::google::protobuf::int32 E_Pk3v3Reward::m_param(int index) const {
  return m_param_.Get(index);
}
inline void E_Pk3v3Reward::set_m_param(int index, ::google::protobuf::int32 value) {
  m_param_.Set(index, value);
}
inline void E_Pk3v3Reward::add_m_param(::google::protobuf::int32 value) {
  m_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_Pk3v3Reward::m_param() const {
  return m_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_Pk3v3Reward::mutable_m_param() {
  return &m_param_;
}

// -------------------------------------------------------------------

// Sheet_Pk3v3Reward

// repeated .proto_ff.E_Pk3v3Reward E_Pk3v3Reward_List = 1;
inline int Sheet_Pk3v3Reward::e_pk3v3reward_list_size() const {
  return e_pk3v3reward_list_.size();
}
inline void Sheet_Pk3v3Reward::clear_e_pk3v3reward_list() {
  e_pk3v3reward_list_.Clear();
}
inline const ::proto_ff::E_Pk3v3Reward& Sheet_Pk3v3Reward::e_pk3v3reward_list(int index) const {
  return e_pk3v3reward_list_.Get(index);
}
inline ::proto_ff::E_Pk3v3Reward* Sheet_Pk3v3Reward::mutable_e_pk3v3reward_list(int index) {
  return e_pk3v3reward_list_.Mutable(index);
}
inline ::proto_ff::E_Pk3v3Reward* Sheet_Pk3v3Reward::add_e_pk3v3reward_list() {
  return e_pk3v3reward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Reward >&
Sheet_Pk3v3Reward::e_pk3v3reward_list() const {
  return e_pk3v3reward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Reward >*
Sheet_Pk3v3Reward::mutable_e_pk3v3reward_list() {
  return &e_pk3v3reward_list_;
}

// -------------------------------------------------------------------

// E_Pk3v3Badge

// optional int32 m_id = 1;
inline bool E_Pk3v3Badge::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_Pk3v3Badge::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_Pk3v3Badge::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_Pk3v3Badge::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_Pk3v3Badge::m_id() const {
  return m_id_;
}
inline void E_Pk3v3Badge::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional string m_name = 2;
inline bool E_Pk3v3Badge::has_m_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_Pk3v3Badge::set_has_m_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_Pk3v3Badge::clear_has_m_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_Pk3v3Badge::clear_m_name() {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    m_name_->clear();
  }
  clear_has_m_name();
}
inline const ::std::string& E_Pk3v3Badge::m_name() const {
  return *m_name_;
}
inline void E_Pk3v3Badge::set_m_name(const ::std::string& value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_Pk3v3Badge::set_m_name(const char* value) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(value);
}
inline void E_Pk3v3Badge::set_m_name(const char* value, size_t size) {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  m_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_Pk3v3Badge::mutable_m_name() {
  set_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    m_name_ = new ::std::string;
  }
  return m_name_;
}
inline ::std::string* E_Pk3v3Badge::release_m_name() {
  clear_has_m_name();
  if (m_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_name_;
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_Pk3v3Badge::set_allocated_m_name(::std::string* m_name) {
  if (m_name_ != &::google::protobuf::internal::kEmptyString) {
    delete m_name_;
  }
  if (m_name) {
    set_has_m_name();
    m_name_ = m_name;
  } else {
    clear_has_m_name();
    m_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_type = 3;
inline bool E_Pk3v3Badge::has_m_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_Pk3v3Badge::set_has_m_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_Pk3v3Badge::clear_has_m_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_Pk3v3Badge::clear_m_type() {
  m_type_ = 0;
  clear_has_m_type();
}
inline ::google::protobuf::int32 E_Pk3v3Badge::m_type() const {
  return m_type_;
}
inline void E_Pk3v3Badge::set_m_type(::google::protobuf::int32 value) {
  set_has_m_type();
  m_type_ = value;
}

// repeated int32 m_param = 4;
inline int E_Pk3v3Badge::m_param_size() const {
  return m_param_.size();
}
inline void E_Pk3v3Badge::clear_m_param() {
  m_param_.Clear();
}
inline ::google::protobuf::int32 E_Pk3v3Badge::m_param(int index) const {
  return m_param_.Get(index);
}
inline void E_Pk3v3Badge::set_m_param(int index, ::google::protobuf::int32 value) {
  m_param_.Set(index, value);
}
inline void E_Pk3v3Badge::add_m_param(::google::protobuf::int32 value) {
  m_param_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_Pk3v3Badge::m_param() const {
  return m_param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_Pk3v3Badge::mutable_m_param() {
  return &m_param_;
}

// -------------------------------------------------------------------

// Sheet_Pk3v3Badge

// repeated .proto_ff.E_Pk3v3Badge E_Pk3v3Badge_List = 1;
inline int Sheet_Pk3v3Badge::e_pk3v3badge_list_size() const {
  return e_pk3v3badge_list_.size();
}
inline void Sheet_Pk3v3Badge::clear_e_pk3v3badge_list() {
  e_pk3v3badge_list_.Clear();
}
inline const ::proto_ff::E_Pk3v3Badge& Sheet_Pk3v3Badge::e_pk3v3badge_list(int index) const {
  return e_pk3v3badge_list_.Get(index);
}
inline ::proto_ff::E_Pk3v3Badge* Sheet_Pk3v3Badge::mutable_e_pk3v3badge_list(int index) {
  return e_pk3v3badge_list_.Mutable(index);
}
inline ::proto_ff::E_Pk3v3Badge* Sheet_Pk3v3Badge::add_e_pk3v3badge_list() {
  return e_pk3v3badge_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Badge >&
Sheet_Pk3v3Badge::e_pk3v3badge_list() const {
  return e_pk3v3badge_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Badge >*
Sheet_Pk3v3Badge::mutable_e_pk3v3badge_list() {
  return &e_pk3v3badge_list_;
}

// -------------------------------------------------------------------

// E_Pk3v3Constant

// optional int32 m_id = 1;
inline bool E_Pk3v3Constant::has_m_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_Pk3v3Constant::clear_has_m_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_Pk3v3Constant::clear_m_id() {
  m_id_ = 0;
  clear_has_m_id();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_id() const {
  return m_id_;
}
inline void E_Pk3v3Constant::set_m_id(::google::protobuf::int32 value) {
  set_has_m_id();
  m_id_ = value;
}

// optional int32 m_teamMember = 2;
inline bool E_Pk3v3Constant::has_m_teammember() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_teammember() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_Pk3v3Constant::clear_has_m_teammember() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_Pk3v3Constant::clear_m_teammember() {
  m_teammember_ = 0;
  clear_has_m_teammember();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_teammember() const {
  return m_teammember_;
}
inline void E_Pk3v3Constant::set_m_teammember(::google::protobuf::int32 value) {
  set_has_m_teammember();
  m_teammember_ = value;
}

// optional int32 m_teamToplimit = 3;
inline bool E_Pk3v3Constant::has_m_teamtoplimit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_teamtoplimit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void E_Pk3v3Constant::clear_has_m_teamtoplimit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void E_Pk3v3Constant::clear_m_teamtoplimit() {
  m_teamtoplimit_ = 0;
  clear_has_m_teamtoplimit();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_teamtoplimit() const {
  return m_teamtoplimit_;
}
inline void E_Pk3v3Constant::set_m_teamtoplimit(::google::protobuf::int32 value) {
  set_has_m_teamtoplimit();
  m_teamtoplimit_ = value;
}

// optional int32 m_cedeTime = 4;
inline bool E_Pk3v3Constant::has_m_cedetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_cedetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void E_Pk3v3Constant::clear_has_m_cedetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void E_Pk3v3Constant::clear_m_cedetime() {
  m_cedetime_ = 0;
  clear_has_m_cedetime();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_cedetime() const {
  return m_cedetime_;
}
inline void E_Pk3v3Constant::set_m_cedetime(::google::protobuf::int32 value) {
  set_has_m_cedetime();
  m_cedetime_ = value;
}

// optional int32 m_punishTime = 5;
inline bool E_Pk3v3Constant::has_m_punishtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_punishtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void E_Pk3v3Constant::clear_has_m_punishtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void E_Pk3v3Constant::clear_m_punishtime() {
  m_punishtime_ = 0;
  clear_has_m_punishtime();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_punishtime() const {
  return m_punishtime_;
}
inline void E_Pk3v3Constant::set_m_punishtime(::google::protobuf::int32 value) {
  set_has_m_punishtime();
  m_punishtime_ = value;
}

// optional int32 m_breakTime = 6;
inline bool E_Pk3v3Constant::has_m_breaktime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_breaktime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void E_Pk3v3Constant::clear_has_m_breaktime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void E_Pk3v3Constant::clear_m_breaktime() {
  m_breaktime_ = 0;
  clear_has_m_breaktime();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_breaktime() const {
  return m_breaktime_;
}
inline void E_Pk3v3Constant::set_m_breaktime(::google::protobuf::int32 value) {
  set_has_m_breaktime();
  m_breaktime_ = value;
}

// optional int32 m_entryReward = 7;
inline bool E_Pk3v3Constant::has_m_entryreward() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_entryreward() {
  _has_bits_[0] |= 0x00000040u;
}
inline void E_Pk3v3Constant::clear_has_m_entryreward() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void E_Pk3v3Constant::clear_m_entryreward() {
  m_entryreward_ = 0;
  clear_has_m_entryreward();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_entryreward() const {
  return m_entryreward_;
}
inline void E_Pk3v3Constant::set_m_entryreward(::google::protobuf::int32 value) {
  set_has_m_entryreward();
  m_entryreward_ = value;
}

// optional int32 m_entrTimes = 8;
inline bool E_Pk3v3Constant::has_m_entrtimes() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_entrtimes() {
  _has_bits_[0] |= 0x00000080u;
}
inline void E_Pk3v3Constant::clear_has_m_entrtimes() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void E_Pk3v3Constant::clear_m_entrtimes() {
  m_entrtimes_ = 0;
  clear_has_m_entrtimes();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_entrtimes() const {
  return m_entrtimes_;
}
inline void E_Pk3v3Constant::set_m_entrtimes(::google::protobuf::int32 value) {
  set_has_m_entrtimes();
  m_entrtimes_ = value;
}

// optional int32 m_mvpReward = 9;
inline bool E_Pk3v3Constant::has_m_mvpreward() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_mvpreward() {
  _has_bits_[0] |= 0x00000100u;
}
inline void E_Pk3v3Constant::clear_has_m_mvpreward() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void E_Pk3v3Constant::clear_m_mvpreward() {
  m_mvpreward_ = 0;
  clear_has_m_mvpreward();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_mvpreward() const {
  return m_mvpreward_;
}
inline void E_Pk3v3Constant::set_m_mvpreward(::google::protobuf::int32 value) {
  set_has_m_mvpreward();
  m_mvpreward_ = value;
}

// optional int32 m_mvpTimes = 10;
inline bool E_Pk3v3Constant::has_m_mvptimes() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_mvptimes() {
  _has_bits_[0] |= 0x00000200u;
}
inline void E_Pk3v3Constant::clear_has_m_mvptimes() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void E_Pk3v3Constant::clear_m_mvptimes() {
  m_mvptimes_ = 0;
  clear_has_m_mvptimes();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_mvptimes() const {
  return m_mvptimes_;
}
inline void E_Pk3v3Constant::set_m_mvptimes(::google::protobuf::int32 value) {
  set_has_m_mvptimes();
  m_mvptimes_ = value;
}

// optional int32 m_matchTime = 11;
inline bool E_Pk3v3Constant::has_m_matchtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_matchtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void E_Pk3v3Constant::clear_has_m_matchtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void E_Pk3v3Constant::clear_m_matchtime() {
  m_matchtime_ = 0;
  clear_has_m_matchtime();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_matchtime() const {
  return m_matchtime_;
}
inline void E_Pk3v3Constant::set_m_matchtime(::google::protobuf::int32 value) {
  set_has_m_matchtime();
  m_matchtime_ = value;
}

// optional int32 m_unitName = 12;
inline bool E_Pk3v3Constant::has_m_unitname() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_unitname() {
  _has_bits_[0] |= 0x00000800u;
}
inline void E_Pk3v3Constant::clear_has_m_unitname() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void E_Pk3v3Constant::clear_m_unitname() {
  m_unitname_ = 0;
  clear_has_m_unitname();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_unitname() const {
  return m_unitname_;
}
inline void E_Pk3v3Constant::set_m_unitname(::google::protobuf::int32 value) {
  set_has_m_unitname();
  m_unitname_ = value;
}

// optional int32 m_unitCost = 13;
inline bool E_Pk3v3Constant::has_m_unitcost() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_unitcost() {
  _has_bits_[0] |= 0x00001000u;
}
inline void E_Pk3v3Constant::clear_has_m_unitcost() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void E_Pk3v3Constant::clear_m_unitcost() {
  m_unitcost_ = 0;
  clear_has_m_unitcost();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_unitcost() const {
  return m_unitcost_;
}
inline void E_Pk3v3Constant::set_m_unitcost(::google::protobuf::int32 value) {
  set_has_m_unitcost();
  m_unitcost_ = value;
}

// optional int32 m_initialZLid = 14;
inline bool E_Pk3v3Constant::has_m_initialzlid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_initialzlid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void E_Pk3v3Constant::clear_has_m_initialzlid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void E_Pk3v3Constant::clear_m_initialzlid() {
  m_initialzlid_ = 0;
  clear_has_m_initialzlid();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_initialzlid() const {
  return m_initialzlid_;
}
inline void E_Pk3v3Constant::set_m_initialzlid(::google::protobuf::int32 value) {
  set_has_m_initialzlid();
  m_initialzlid_ = value;
}

// optional string m_initialZLName = 15;
inline bool E_Pk3v3Constant::has_m_initialzlname() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_initialzlname() {
  _has_bits_[0] |= 0x00004000u;
}
inline void E_Pk3v3Constant::clear_has_m_initialzlname() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void E_Pk3v3Constant::clear_m_initialzlname() {
  if (m_initialzlname_ != &::google::protobuf::internal::kEmptyString) {
    m_initialzlname_->clear();
  }
  clear_has_m_initialzlname();
}
inline const ::std::string& E_Pk3v3Constant::m_initialzlname() const {
  return *m_initialzlname_;
}
inline void E_Pk3v3Constant::set_m_initialzlname(const ::std::string& value) {
  set_has_m_initialzlname();
  if (m_initialzlname_ == &::google::protobuf::internal::kEmptyString) {
    m_initialzlname_ = new ::std::string;
  }
  m_initialzlname_->assign(value);
}
inline void E_Pk3v3Constant::set_m_initialzlname(const char* value) {
  set_has_m_initialzlname();
  if (m_initialzlname_ == &::google::protobuf::internal::kEmptyString) {
    m_initialzlname_ = new ::std::string;
  }
  m_initialzlname_->assign(value);
}
inline void E_Pk3v3Constant::set_m_initialzlname(const char* value, size_t size) {
  set_has_m_initialzlname();
  if (m_initialzlname_ == &::google::protobuf::internal::kEmptyString) {
    m_initialzlname_ = new ::std::string;
  }
  m_initialzlname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_Pk3v3Constant::mutable_m_initialzlname() {
  set_has_m_initialzlname();
  if (m_initialzlname_ == &::google::protobuf::internal::kEmptyString) {
    m_initialzlname_ = new ::std::string;
  }
  return m_initialzlname_;
}
inline ::std::string* E_Pk3v3Constant::release_m_initialzlname() {
  clear_has_m_initialzlname();
  if (m_initialzlname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_initialzlname_;
    m_initialzlname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_Pk3v3Constant::set_allocated_m_initialzlname(::std::string* m_initialzlname) {
  if (m_initialzlname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_initialzlname_;
  }
  if (m_initialzlname) {
    set_has_m_initialzlname();
    m_initialzlname_ = m_initialzlname;
  } else {
    clear_has_m_initialzlname();
    m_initialzlname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string m_robotName = 16;
inline bool E_Pk3v3Constant::has_m_robotname() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_robotname() {
  _has_bits_[0] |= 0x00008000u;
}
inline void E_Pk3v3Constant::clear_has_m_robotname() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void E_Pk3v3Constant::clear_m_robotname() {
  if (m_robotname_ != &::google::protobuf::internal::kEmptyString) {
    m_robotname_->clear();
  }
  clear_has_m_robotname();
}
inline const ::std::string& E_Pk3v3Constant::m_robotname() const {
  return *m_robotname_;
}
inline void E_Pk3v3Constant::set_m_robotname(const ::std::string& value) {
  set_has_m_robotname();
  if (m_robotname_ == &::google::protobuf::internal::kEmptyString) {
    m_robotname_ = new ::std::string;
  }
  m_robotname_->assign(value);
}
inline void E_Pk3v3Constant::set_m_robotname(const char* value) {
  set_has_m_robotname();
  if (m_robotname_ == &::google::protobuf::internal::kEmptyString) {
    m_robotname_ = new ::std::string;
  }
  m_robotname_->assign(value);
}
inline void E_Pk3v3Constant::set_m_robotname(const char* value, size_t size) {
  set_has_m_robotname();
  if (m_robotname_ == &::google::protobuf::internal::kEmptyString) {
    m_robotname_ = new ::std::string;
  }
  m_robotname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_Pk3v3Constant::mutable_m_robotname() {
  set_has_m_robotname();
  if (m_robotname_ == &::google::protobuf::internal::kEmptyString) {
    m_robotname_ = new ::std::string;
  }
  return m_robotname_;
}
inline ::std::string* E_Pk3v3Constant::release_m_robotname() {
  clear_has_m_robotname();
  if (m_robotname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_robotname_;
    m_robotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_Pk3v3Constant::set_allocated_m_robotname(::std::string* m_robotname) {
  if (m_robotname_ != &::google::protobuf::internal::kEmptyString) {
    delete m_robotname_;
  }
  if (m_robotname) {
    set_has_m_robotname();
    m_robotname_ = m_robotname;
  } else {
    clear_has_m_robotname();
    m_robotname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 m_mateTime = 17;
inline bool E_Pk3v3Constant::has_m_matetime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_matetime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void E_Pk3v3Constant::clear_has_m_matetime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void E_Pk3v3Constant::clear_m_matetime() {
  m_matetime_ = 0;
  clear_has_m_matetime();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_matetime() const {
  return m_matetime_;
}
inline void E_Pk3v3Constant::set_m_matetime(::google::protobuf::int32 value) {
  set_has_m_matetime();
  m_matetime_ = value;
}

// optional int32 m_addTime = 18;
inline bool E_Pk3v3Constant::has_m_addtime() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_addtime() {
  _has_bits_[0] |= 0x00020000u;
}
inline void E_Pk3v3Constant::clear_has_m_addtime() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void E_Pk3v3Constant::clear_m_addtime() {
  m_addtime_ = 0;
  clear_has_m_addtime();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_addtime() const {
  return m_addtime_;
}
inline void E_Pk3v3Constant::set_m_addtime(::google::protobuf::int32 value) {
  set_has_m_addtime();
  m_addtime_ = value;
}

// optional string m_initialNotice = 19;
inline bool E_Pk3v3Constant::has_m_initialnotice() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void E_Pk3v3Constant::set_has_m_initialnotice() {
  _has_bits_[0] |= 0x00040000u;
}
inline void E_Pk3v3Constant::clear_has_m_initialnotice() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void E_Pk3v3Constant::clear_m_initialnotice() {
  if (m_initialnotice_ != &::google::protobuf::internal::kEmptyString) {
    m_initialnotice_->clear();
  }
  clear_has_m_initialnotice();
}
inline const ::std::string& E_Pk3v3Constant::m_initialnotice() const {
  return *m_initialnotice_;
}
inline void E_Pk3v3Constant::set_m_initialnotice(const ::std::string& value) {
  set_has_m_initialnotice();
  if (m_initialnotice_ == &::google::protobuf::internal::kEmptyString) {
    m_initialnotice_ = new ::std::string;
  }
  m_initialnotice_->assign(value);
}
inline void E_Pk3v3Constant::set_m_initialnotice(const char* value) {
  set_has_m_initialnotice();
  if (m_initialnotice_ == &::google::protobuf::internal::kEmptyString) {
    m_initialnotice_ = new ::std::string;
  }
  m_initialnotice_->assign(value);
}
inline void E_Pk3v3Constant::set_m_initialnotice(const char* value, size_t size) {
  set_has_m_initialnotice();
  if (m_initialnotice_ == &::google::protobuf::internal::kEmptyString) {
    m_initialnotice_ = new ::std::string;
  }
  m_initialnotice_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* E_Pk3v3Constant::mutable_m_initialnotice() {
  set_has_m_initialnotice();
  if (m_initialnotice_ == &::google::protobuf::internal::kEmptyString) {
    m_initialnotice_ = new ::std::string;
  }
  return m_initialnotice_;
}
inline ::std::string* E_Pk3v3Constant::release_m_initialnotice() {
  clear_has_m_initialnotice();
  if (m_initialnotice_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = m_initialnotice_;
    m_initialnotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void E_Pk3v3Constant::set_allocated_m_initialnotice(::std::string* m_initialnotice) {
  if (m_initialnotice_ != &::google::protobuf::internal::kEmptyString) {
    delete m_initialnotice_;
  }
  if (m_initialnotice) {
    set_has_m_initialnotice();
    m_initialnotice_ = m_initialnotice;
  } else {
    clear_has_m_initialnotice();
    m_initialnotice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 m_showReward = 20;
inline int E_Pk3v3Constant::m_showreward_size() const {
  return m_showreward_.size();
}
inline void E_Pk3v3Constant::clear_m_showreward() {
  m_showreward_.Clear();
}
inline ::google::protobuf::int32 E_Pk3v3Constant::m_showreward(int index) const {
  return m_showreward_.Get(index);
}
inline void E_Pk3v3Constant::set_m_showreward(int index, ::google::protobuf::int32 value) {
  m_showreward_.Set(index, value);
}
inline void E_Pk3v3Constant::add_m_showreward(::google::protobuf::int32 value) {
  m_showreward_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
E_Pk3v3Constant::m_showreward() const {
  return m_showreward_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
E_Pk3v3Constant::mutable_m_showreward() {
  return &m_showreward_;
}

// -------------------------------------------------------------------

// Sheet_Pk3v3Constant

// repeated .proto_ff.E_Pk3v3Constant E_Pk3v3Constant_List = 1;
inline int Sheet_Pk3v3Constant::e_pk3v3constant_list_size() const {
  return e_pk3v3constant_list_.size();
}
inline void Sheet_Pk3v3Constant::clear_e_pk3v3constant_list() {
  e_pk3v3constant_list_.Clear();
}
inline const ::proto_ff::E_Pk3v3Constant& Sheet_Pk3v3Constant::e_pk3v3constant_list(int index) const {
  return e_pk3v3constant_list_.Get(index);
}
inline ::proto_ff::E_Pk3v3Constant* Sheet_Pk3v3Constant::mutable_e_pk3v3constant_list(int index) {
  return e_pk3v3constant_list_.Mutable(index);
}
inline ::proto_ff::E_Pk3v3Constant* Sheet_Pk3v3Constant::add_e_pk3v3constant_list() {
  return e_pk3v3constant_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Constant >&
Sheet_Pk3v3Constant::e_pk3v3constant_list() const {
  return e_pk3v3constant_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Constant >*
Sheet_Pk3v3Constant::mutable_e_pk3v3constant_list() {
  return &e_pk3v3constant_list_;
}

// -------------------------------------------------------------------

// E_Pk3v3Exp

// optional int32 m_lv = 1;
inline bool E_Pk3v3Exp::has_m_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void E_Pk3v3Exp::set_has_m_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void E_Pk3v3Exp::clear_has_m_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void E_Pk3v3Exp::clear_m_lv() {
  m_lv_ = 0;
  clear_has_m_lv();
}
inline ::google::protobuf::int32 E_Pk3v3Exp::m_lv() const {
  return m_lv_;
}
inline void E_Pk3v3Exp::set_m_lv(::google::protobuf::int32 value) {
  set_has_m_lv();
  m_lv_ = value;
}

// optional int32 m_mateExp = 2;
inline bool E_Pk3v3Exp::has_m_mateexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void E_Pk3v3Exp::set_has_m_mateexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void E_Pk3v3Exp::clear_has_m_mateexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void E_Pk3v3Exp::clear_m_mateexp() {
  m_mateexp_ = 0;
  clear_has_m_mateexp();
}
inline ::google::protobuf::int32 E_Pk3v3Exp::m_mateexp() const {
  return m_mateexp_;
}
inline void E_Pk3v3Exp::set_m_mateexp(::google::protobuf::int32 value) {
  set_has_m_mateexp();
  m_mateexp_ = value;
}

// -------------------------------------------------------------------

// Sheet_Pk3v3Exp

// repeated .proto_ff.E_Pk3v3Exp E_Pk3v3Exp_List = 1;
inline int Sheet_Pk3v3Exp::e_pk3v3exp_list_size() const {
  return e_pk3v3exp_list_.size();
}
inline void Sheet_Pk3v3Exp::clear_e_pk3v3exp_list() {
  e_pk3v3exp_list_.Clear();
}
inline const ::proto_ff::E_Pk3v3Exp& Sheet_Pk3v3Exp::e_pk3v3exp_list(int index) const {
  return e_pk3v3exp_list_.Get(index);
}
inline ::proto_ff::E_Pk3v3Exp* Sheet_Pk3v3Exp::mutable_e_pk3v3exp_list(int index) {
  return e_pk3v3exp_list_.Mutable(index);
}
inline ::proto_ff::E_Pk3v3Exp* Sheet_Pk3v3Exp::add_e_pk3v3exp_list() {
  return e_pk3v3exp_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Exp >&
Sheet_Pk3v3Exp::e_pk3v3exp_list() const {
  return e_pk3v3exp_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::E_Pk3v3Exp >*
Sheet_Pk3v3Exp::mutable_e_pk3v3exp_list() {
  return &e_pk3v3exp_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_E_5fPk3v3_2eproto__INCLUDED
