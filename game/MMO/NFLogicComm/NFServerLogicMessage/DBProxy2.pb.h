// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProxy2.proto

#ifndef PROTOBUF_DBProxy2_2eproto__INCLUDED
#define PROTOBUF_DBProxy2_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "Com.pb.h"
#include "ComDefine.pb.h"
#include "DBProxy.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DBProxy2_2eproto();
void protobuf_AssignDesc_DBProxy2_2eproto();
void protobuf_ShutdownFile_DBProxy2_2eproto();

class dbServerMgr;
class GetRegisterNum_RoleDBData;
class RoleDBSnsSimple;
class MyFriendInfo;
class RoleDBSnsDetail;
class RoleEnterSceneData;
class RoleDBName;

// ===================================================================

class dbServerMgr : public ::google::protobuf::Message {
 public:
  dbServerMgr();
  virtual ~dbServerMgr();

  dbServerMgr(const dbServerMgr& from);

  inline dbServerMgr& operator=(const dbServerMgr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dbServerMgr& default_instance();

  void Swap(dbServerMgr* other);

  // implements Message ----------------------------------------------

  dbServerMgr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dbServerMgr& from);
  void MergeFrom(const dbServerMgr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional string contract = 2;
  inline bool has_contract() const;
  inline void clear_contract();
  static const int kContractFieldNumber = 2;
  inline const ::std::string& contract() const;
  inline void set_contract(const ::std::string& value);
  inline void set_contract(const char* value);
  inline void set_contract(const char* value, size_t size);
  inline ::std::string* mutable_contract();
  inline ::std::string* release_contract();
  inline void set_allocated_contract(::std::string* contract);

  // optional string machine_addr = 3;
  inline bool has_machine_addr() const;
  inline void clear_machine_addr();
  static const int kMachineAddrFieldNumber = 3;
  inline const ::std::string& machine_addr() const;
  inline void set_machine_addr(const ::std::string& value);
  inline void set_machine_addr(const char* value);
  inline void set_machine_addr(const char* value, size_t size);
  inline ::std::string* mutable_machine_addr();
  inline ::std::string* release_machine_addr();
  inline void set_allocated_machine_addr(::std::string* machine_addr);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional string bus_name = 5;
  inline bool has_bus_name() const;
  inline void clear_bus_name();
  static const int kBusNameFieldNumber = 5;
  inline const ::std::string& bus_name() const;
  inline void set_bus_name(const ::std::string& value);
  inline void set_bus_name(const char* value);
  inline void set_bus_name(const char* value, size_t size);
  inline ::std::string* mutable_bus_name();
  inline ::std::string* release_bus_name();
  inline void set_allocated_bus_name(::std::string* bus_name);

  // optional string server_desc = 6;
  inline bool has_server_desc() const;
  inline void clear_server_desc();
  static const int kServerDescFieldNumber = 6;
  inline const ::std::string& server_desc() const;
  inline void set_server_desc(const ::std::string& value);
  inline void set_server_desc(const char* value);
  inline void set_server_desc(const char* value, size_t size);
  inline ::std::string* mutable_server_desc();
  inline ::std::string* release_server_desc();
  inline void set_allocated_server_desc(::std::string* server_desc);

  // optional uint32 cur_count = 7;
  inline bool has_cur_count() const;
  inline void clear_cur_count();
  static const int kCurCountFieldNumber = 7;
  inline ::google::protobuf::uint32 cur_count() const;
  inline void set_cur_count(::google::protobuf::uint32 value);

  // optional uint64 last_login_time = 8;
  inline bool has_last_login_time() const;
  inline void clear_last_login_time();
  static const int kLastLoginTimeFieldNumber = 8;
  inline ::google::protobuf::uint64 last_login_time() const;
  inline void set_last_login_time(::google::protobuf::uint64 value);

  // optional uint64 last_logout_time = 9;
  inline bool has_last_logout_time() const;
  inline void clear_last_logout_time();
  static const int kLastLogoutTimeFieldNumber = 9;
  inline ::google::protobuf::uint64 last_logout_time() const;
  inline void set_last_logout_time(::google::protobuf::uint64 value);

  // repeated uint64 logout_time = 10;
  inline int logout_time_size() const;
  inline void clear_logout_time();
  static const int kLogoutTimeFieldNumber = 10;
  inline ::google::protobuf::uint64 logout_time(int index) const;
  inline void set_logout_time(int index, ::google::protobuf::uint64 value);
  inline void add_logout_time(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      logout_time() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_logout_time();

  // repeated string desc = 11;
  inline int desc_size() const;
  inline void clear_desc();
  static const int kDescFieldNumber = 11;
  inline const ::std::string& desc(int index) const;
  inline ::std::string* mutable_desc(int index);
  inline void set_desc(int index, const ::std::string& value);
  inline void set_desc(int index, const char* value);
  inline void set_desc(int index, const char* value, size_t size);
  inline ::std::string* add_desc();
  inline void add_desc(const ::std::string& value);
  inline void add_desc(const char* value);
  inline void add_desc(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& desc() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_desc();

  // repeated .proto_ff.ComPair pair = 12;
  inline int pair_size() const;
  inline void clear_pair();
  static const int kPairFieldNumber = 12;
  inline const ::proto_ff::ComPair& pair(int index) const;
  inline ::proto_ff::ComPair* mutable_pair(int index);
  inline ::proto_ff::ComPair* add_pair();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
      pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
      mutable_pair();

  // repeated .proto_ff.BestEQSlotInfo facade = 13;
  inline int facade_size() const;
  inline void clear_facade();
  static const int kFacadeFieldNumber = 13;
  inline const ::proto_ff::BestEQSlotInfo& facade(int index) const;
  inline ::proto_ff::BestEQSlotInfo* mutable_facade(int index);
  inline ::proto_ff::BestEQSlotInfo* add_facade();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >&
      facade() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >*
      mutable_facade();

  // @@protoc_insertion_point(class_scope:proto_ff.dbServerMgr)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_contract();
  inline void clear_has_contract();
  inline void set_has_machine_addr();
  inline void clear_has_machine_addr();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_bus_name();
  inline void clear_has_bus_name();
  inline void set_has_server_desc();
  inline void clear_has_server_desc();
  inline void set_has_cur_count();
  inline void clear_has_cur_count();
  inline void set_has_last_login_time();
  inline void clear_has_last_login_time();
  inline void set_has_last_logout_time();
  inline void clear_has_last_logout_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* contract_;
  ::std::string* machine_addr_;
  ::std::string* ip_;
  ::std::string* bus_name_;
  ::std::string* server_desc_;
  ::google::protobuf::uint64 last_login_time_;
  ::google::protobuf::uint64 last_logout_time_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > logout_time_;
  ::google::protobuf::RepeatedPtrField< ::std::string> desc_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair > pair_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo > facade_;
  ::google::protobuf::uint32 cur_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy2_2eproto();
  friend void protobuf_AssignDesc_DBProxy2_2eproto();
  friend void protobuf_ShutdownFile_DBProxy2_2eproto();

  void InitAsDefaultInstance();
  static dbServerMgr* default_instance_;
};
// -------------------------------------------------------------------

class GetRegisterNum_RoleDBData : public ::google::protobuf::Message {
 public:
  GetRegisterNum_RoleDBData();
  virtual ~GetRegisterNum_RoleDBData();

  GetRegisterNum_RoleDBData(const GetRegisterNum_RoleDBData& from);

  inline GetRegisterNum_RoleDBData& operator=(const GetRegisterNum_RoleDBData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetRegisterNum_RoleDBData& default_instance();

  void Swap(GetRegisterNum_RoleDBData* other);

  // implements Message ----------------------------------------------

  GetRegisterNum_RoleDBData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetRegisterNum_RoleDBData& from);
  void MergeFrom(const GetRegisterNum_RoleDBData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.GetRegisterNum_RoleDBData)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy2_2eproto();
  friend void protobuf_AssignDesc_DBProxy2_2eproto();
  friend void protobuf_ShutdownFile_DBProxy2_2eproto();

  void InitAsDefaultInstance();
  static GetRegisterNum_RoleDBData* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBSnsSimple : public ::google::protobuf::Message {
 public:
  RoleDBSnsSimple();
  virtual ~RoleDBSnsSimple();

  RoleDBSnsSimple(const RoleDBSnsSimple& from);

  inline RoleDBSnsSimple& operator=(const RoleDBSnsSimple& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBSnsSimple& default_instance();

  void Swap(RoleDBSnsSimple* other);

  // implements Message ----------------------------------------------

  RoleDBSnsSimple* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBSnsSimple& from);
  void MergeFrom(const RoleDBSnsSimple& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleDBBaseData base = 4;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 4;
  inline const ::proto_ff::RoleDBBaseData& base() const;
  inline ::proto_ff::RoleDBBaseData* mutable_base();
  inline ::proto_ff::RoleDBBaseData* release_base();
  inline void set_allocated_base(::proto_ff::RoleDBBaseData* base);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBSnsSimple)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_base();
  inline void clear_has_base();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 uid_;
  ::proto_ff::RoleDBBaseData* base_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy2_2eproto();
  friend void protobuf_AssignDesc_DBProxy2_2eproto();
  friend void protobuf_ShutdownFile_DBProxy2_2eproto();

  void InitAsDefaultInstance();
  static RoleDBSnsSimple* default_instance_;
};
// -------------------------------------------------------------------

class MyFriendInfo : public ::google::protobuf::Message {
 public:
  MyFriendInfo();
  virtual ~MyFriendInfo();

  MyFriendInfo(const MyFriendInfo& from);

  inline MyFriendInfo& operator=(const MyFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyFriendInfo& default_instance();

  void Swap(MyFriendInfo* other);

  // implements Message ----------------------------------------------

  MyFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MyFriendInfo& from);
  void MergeFrom(const MyFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.MyFriendInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_DBProxy2_2eproto();
  friend void protobuf_AssignDesc_DBProxy2_2eproto();
  friend void protobuf_ShutdownFile_DBProxy2_2eproto();

  void InitAsDefaultInstance();
  static MyFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBSnsDetail : public ::google::protobuf::Message {
 public:
  RoleDBSnsDetail();
  virtual ~RoleDBSnsDetail();

  RoleDBSnsDetail(const RoleDBSnsDetail& from);

  inline RoleDBSnsDetail& operator=(const RoleDBSnsDetail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBSnsDetail& default_instance();

  void Swap(RoleDBSnsDetail* other);

  // implements Message ----------------------------------------------

  RoleDBSnsDetail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBSnsDetail& from);
  void MergeFrom(const RoleDBSnsDetail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .proto_ff.MyFriendInfo friend_info = 4;
  inline bool has_friend_info() const;
  inline void clear_friend_info();
  static const int kFriendInfoFieldNumber = 4;
  inline const ::proto_ff::MyFriendInfo& friend_info() const;
  inline ::proto_ff::MyFriendInfo* mutable_friend_info();
  inline ::proto_ff::MyFriendInfo* release_friend_info();
  inline void set_allocated_friend_info(::proto_ff::MyFriendInfo* friend_info);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBSnsDetail)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_friend_info();
  inline void clear_has_friend_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 uid_;
  ::proto_ff::MyFriendInfo* friend_info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy2_2eproto();
  friend void protobuf_AssignDesc_DBProxy2_2eproto();
  friend void protobuf_ShutdownFile_DBProxy2_2eproto();

  void InitAsDefaultInstance();
  static RoleDBSnsDetail* default_instance_;
};
// -------------------------------------------------------------------

class RoleEnterSceneData : public ::google::protobuf::Message {
 public:
  RoleEnterSceneData();
  virtual ~RoleEnterSceneData();

  RoleEnterSceneData(const RoleEnterSceneData& from);

  inline RoleEnterSceneData& operator=(const RoleEnterSceneData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleEnterSceneData& default_instance();

  void Swap(RoleEnterSceneData* other);

  // implements Message ----------------------------------------------

  RoleEnterSceneData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleEnterSceneData& from);
  void MergeFrom(const RoleEnterSceneData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 zid = 2;
  inline bool has_zid() const;
  inline void clear_zid();
  static const int kZidFieldNumber = 2;
  inline ::google::protobuf::uint32 zid() const;
  inline void set_zid(::google::protobuf::uint32 value);

  // optional uint32 uid = 3;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 3;
  inline ::google::protobuf::uint32 uid() const;
  inline void set_uid(::google::protobuf::uint32 value);

  // optional .proto_ff.RoleDBBaseData base = 10;
  inline bool has_base() const;
  inline void clear_base();
  static const int kBaseFieldNumber = 10;
  inline const ::proto_ff::RoleDBBaseData& base() const;
  inline ::proto_ff::RoleDBBaseData* mutable_base();
  inline ::proto_ff::RoleDBBaseData* release_base();
  inline void set_allocated_base(::proto_ff::RoleDBBaseData* base);

  // optional .proto_ff.AttrDBData attr = 11;
  inline bool has_attr() const;
  inline void clear_attr();
  static const int kAttrFieldNumber = 11;
  inline const ::proto_ff::AttrDBData& attr() const;
  inline ::proto_ff::AttrDBData* mutable_attr();
  inline ::proto_ff::AttrDBData* release_attr();
  inline void set_allocated_attr(::proto_ff::AttrDBData* attr);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleEnterSceneData)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_zid();
  inline void clear_has_zid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_base();
  inline void clear_has_base();
  inline void set_has_attr();
  inline void clear_has_attr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 zid_;
  ::google::protobuf::uint32 uid_;
  ::proto_ff::RoleDBBaseData* base_;
  ::proto_ff::AttrDBData* attr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy2_2eproto();
  friend void protobuf_AssignDesc_DBProxy2_2eproto();
  friend void protobuf_ShutdownFile_DBProxy2_2eproto();

  void InitAsDefaultInstance();
  static RoleEnterSceneData* default_instance_;
};
// -------------------------------------------------------------------

class RoleDBName : public ::google::protobuf::Message {
 public:
  RoleDBName();
  virtual ~RoleDBName();

  RoleDBName(const RoleDBName& from);

  inline RoleDBName& operator=(const RoleDBName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleDBName& default_instance();

  void Swap(RoleDBName* other);

  // implements Message ----------------------------------------------

  RoleDBName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleDBName& from);
  void MergeFrom(const RoleDBName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:proto_ff.RoleDBName)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DBProxy2_2eproto();
  friend void protobuf_AssignDesc_DBProxy2_2eproto();
  friend void protobuf_ShutdownFile_DBProxy2_2eproto();

  void InitAsDefaultInstance();
  static RoleDBName* default_instance_;
};
// ===================================================================


// ===================================================================

// dbServerMgr

// optional uint64 id = 1;
inline bool dbServerMgr::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dbServerMgr::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dbServerMgr::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dbServerMgr::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 dbServerMgr::id() const {
  return id_;
}
inline void dbServerMgr::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional string contract = 2;
inline bool dbServerMgr::has_contract() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dbServerMgr::set_has_contract() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dbServerMgr::clear_has_contract() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dbServerMgr::clear_contract() {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    contract_->clear();
  }
  clear_has_contract();
}
inline const ::std::string& dbServerMgr::contract() const {
  return *contract_;
}
inline void dbServerMgr::set_contract(const ::std::string& value) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(value);
}
inline void dbServerMgr::set_contract(const char* value) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(value);
}
inline void dbServerMgr::set_contract(const char* value, size_t size) {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  contract_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dbServerMgr::mutable_contract() {
  set_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    contract_ = new ::std::string;
  }
  return contract_;
}
inline ::std::string* dbServerMgr::release_contract() {
  clear_has_contract();
  if (contract_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = contract_;
    contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dbServerMgr::set_allocated_contract(::std::string* contract) {
  if (contract_ != &::google::protobuf::internal::kEmptyString) {
    delete contract_;
  }
  if (contract) {
    set_has_contract();
    contract_ = contract;
  } else {
    clear_has_contract();
    contract_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string machine_addr = 3;
inline bool dbServerMgr::has_machine_addr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dbServerMgr::set_has_machine_addr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dbServerMgr::clear_has_machine_addr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dbServerMgr::clear_machine_addr() {
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    machine_addr_->clear();
  }
  clear_has_machine_addr();
}
inline const ::std::string& dbServerMgr::machine_addr() const {
  return *machine_addr_;
}
inline void dbServerMgr::set_machine_addr(const ::std::string& value) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(value);
}
inline void dbServerMgr::set_machine_addr(const char* value) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(value);
}
inline void dbServerMgr::set_machine_addr(const char* value, size_t size) {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  machine_addr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dbServerMgr::mutable_machine_addr() {
  set_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    machine_addr_ = new ::std::string;
  }
  return machine_addr_;
}
inline ::std::string* dbServerMgr::release_machine_addr() {
  clear_has_machine_addr();
  if (machine_addr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_addr_;
    machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dbServerMgr::set_allocated_machine_addr(::std::string* machine_addr) {
  if (machine_addr_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_addr_;
  }
  if (machine_addr) {
    set_has_machine_addr();
    machine_addr_ = machine_addr;
  } else {
    clear_has_machine_addr();
    machine_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string ip = 4;
inline bool dbServerMgr::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dbServerMgr::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dbServerMgr::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dbServerMgr::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& dbServerMgr::ip() const {
  return *ip_;
}
inline void dbServerMgr::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void dbServerMgr::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void dbServerMgr::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dbServerMgr::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* dbServerMgr::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dbServerMgr::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string bus_name = 5;
inline bool dbServerMgr::has_bus_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dbServerMgr::set_has_bus_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dbServerMgr::clear_has_bus_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dbServerMgr::clear_bus_name() {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    bus_name_->clear();
  }
  clear_has_bus_name();
}
inline const ::std::string& dbServerMgr::bus_name() const {
  return *bus_name_;
}
inline void dbServerMgr::set_bus_name(const ::std::string& value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void dbServerMgr::set_bus_name(const char* value) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(value);
}
inline void dbServerMgr::set_bus_name(const char* value, size_t size) {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  bus_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dbServerMgr::mutable_bus_name() {
  set_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    bus_name_ = new ::std::string;
  }
  return bus_name_;
}
inline ::std::string* dbServerMgr::release_bus_name() {
  clear_has_bus_name();
  if (bus_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bus_name_;
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dbServerMgr::set_allocated_bus_name(::std::string* bus_name) {
  if (bus_name_ != &::google::protobuf::internal::kEmptyString) {
    delete bus_name_;
  }
  if (bus_name) {
    set_has_bus_name();
    bus_name_ = bus_name;
  } else {
    clear_has_bus_name();
    bus_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string server_desc = 6;
inline bool dbServerMgr::has_server_desc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dbServerMgr::set_has_server_desc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dbServerMgr::clear_has_server_desc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dbServerMgr::clear_server_desc() {
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    server_desc_->clear();
  }
  clear_has_server_desc();
}
inline const ::std::string& dbServerMgr::server_desc() const {
  return *server_desc_;
}
inline void dbServerMgr::set_server_desc(const ::std::string& value) {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  server_desc_->assign(value);
}
inline void dbServerMgr::set_server_desc(const char* value) {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  server_desc_->assign(value);
}
inline void dbServerMgr::set_server_desc(const char* value, size_t size) {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  server_desc_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dbServerMgr::mutable_server_desc() {
  set_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    server_desc_ = new ::std::string;
  }
  return server_desc_;
}
inline ::std::string* dbServerMgr::release_server_desc() {
  clear_has_server_desc();
  if (server_desc_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_desc_;
    server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dbServerMgr::set_allocated_server_desc(::std::string* server_desc) {
  if (server_desc_ != &::google::protobuf::internal::kEmptyString) {
    delete server_desc_;
  }
  if (server_desc) {
    set_has_server_desc();
    server_desc_ = server_desc;
  } else {
    clear_has_server_desc();
    server_desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 cur_count = 7;
inline bool dbServerMgr::has_cur_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dbServerMgr::set_has_cur_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dbServerMgr::clear_has_cur_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dbServerMgr::clear_cur_count() {
  cur_count_ = 0u;
  clear_has_cur_count();
}
inline ::google::protobuf::uint32 dbServerMgr::cur_count() const {
  return cur_count_;
}
inline void dbServerMgr::set_cur_count(::google::protobuf::uint32 value) {
  set_has_cur_count();
  cur_count_ = value;
}

// optional uint64 last_login_time = 8;
inline bool dbServerMgr::has_last_login_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dbServerMgr::set_has_last_login_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dbServerMgr::clear_has_last_login_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dbServerMgr::clear_last_login_time() {
  last_login_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_login_time();
}
inline ::google::protobuf::uint64 dbServerMgr::last_login_time() const {
  return last_login_time_;
}
inline void dbServerMgr::set_last_login_time(::google::protobuf::uint64 value) {
  set_has_last_login_time();
  last_login_time_ = value;
}

// optional uint64 last_logout_time = 9;
inline bool dbServerMgr::has_last_logout_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dbServerMgr::set_has_last_logout_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dbServerMgr::clear_has_last_logout_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dbServerMgr::clear_last_logout_time() {
  last_logout_time_ = GOOGLE_ULONGLONG(0);
  clear_has_last_logout_time();
}
inline ::google::protobuf::uint64 dbServerMgr::last_logout_time() const {
  return last_logout_time_;
}
inline void dbServerMgr::set_last_logout_time(::google::protobuf::uint64 value) {
  set_has_last_logout_time();
  last_logout_time_ = value;
}

// repeated uint64 logout_time = 10;
inline int dbServerMgr::logout_time_size() const {
  return logout_time_.size();
}
inline void dbServerMgr::clear_logout_time() {
  logout_time_.Clear();
}
inline ::google::protobuf::uint64 dbServerMgr::logout_time(int index) const {
  return logout_time_.Get(index);
}
inline void dbServerMgr::set_logout_time(int index, ::google::protobuf::uint64 value) {
  logout_time_.Set(index, value);
}
inline void dbServerMgr::add_logout_time(::google::protobuf::uint64 value) {
  logout_time_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
dbServerMgr::logout_time() const {
  return logout_time_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
dbServerMgr::mutable_logout_time() {
  return &logout_time_;
}

// repeated string desc = 11;
inline int dbServerMgr::desc_size() const {
  return desc_.size();
}
inline void dbServerMgr::clear_desc() {
  desc_.Clear();
}
inline const ::std::string& dbServerMgr::desc(int index) const {
  return desc_.Get(index);
}
inline ::std::string* dbServerMgr::mutable_desc(int index) {
  return desc_.Mutable(index);
}
inline void dbServerMgr::set_desc(int index, const ::std::string& value) {
  desc_.Mutable(index)->assign(value);
}
inline void dbServerMgr::set_desc(int index, const char* value) {
  desc_.Mutable(index)->assign(value);
}
inline void dbServerMgr::set_desc(int index, const char* value, size_t size) {
  desc_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dbServerMgr::add_desc() {
  return desc_.Add();
}
inline void dbServerMgr::add_desc(const ::std::string& value) {
  desc_.Add()->assign(value);
}
inline void dbServerMgr::add_desc(const char* value) {
  desc_.Add()->assign(value);
}
inline void dbServerMgr::add_desc(const char* value, size_t size) {
  desc_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
dbServerMgr::desc() const {
  return desc_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
dbServerMgr::mutable_desc() {
  return &desc_;
}

// repeated .proto_ff.ComPair pair = 12;
inline int dbServerMgr::pair_size() const {
  return pair_.size();
}
inline void dbServerMgr::clear_pair() {
  pair_.Clear();
}
inline const ::proto_ff::ComPair& dbServerMgr::pair(int index) const {
  return pair_.Get(index);
}
inline ::proto_ff::ComPair* dbServerMgr::mutable_pair(int index) {
  return pair_.Mutable(index);
}
inline ::proto_ff::ComPair* dbServerMgr::add_pair() {
  return pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >&
dbServerMgr::pair() const {
  return pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::ComPair >*
dbServerMgr::mutable_pair() {
  return &pair_;
}

// repeated .proto_ff.BestEQSlotInfo facade = 13;
inline int dbServerMgr::facade_size() const {
  return facade_.size();
}
inline void dbServerMgr::clear_facade() {
  facade_.Clear();
}
inline const ::proto_ff::BestEQSlotInfo& dbServerMgr::facade(int index) const {
  return facade_.Get(index);
}
inline ::proto_ff::BestEQSlotInfo* dbServerMgr::mutable_facade(int index) {
  return facade_.Mutable(index);
}
inline ::proto_ff::BestEQSlotInfo* dbServerMgr::add_facade() {
  return facade_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >&
dbServerMgr::facade() const {
  return facade_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::BestEQSlotInfo >*
dbServerMgr::mutable_facade() {
  return &facade_;
}

// -------------------------------------------------------------------

// GetRegisterNum_RoleDBData

// optional uint32 num = 1;
inline bool GetRegisterNum_RoleDBData::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetRegisterNum_RoleDBData::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetRegisterNum_RoleDBData::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetRegisterNum_RoleDBData::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 GetRegisterNum_RoleDBData::num() const {
  return num_;
}
inline void GetRegisterNum_RoleDBData::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// RoleDBSnsSimple

// optional uint64 cid = 1;
inline bool RoleDBSnsSimple::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDBSnsSimple::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDBSnsSimple::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDBSnsSimple::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleDBSnsSimple::cid() const {
  return cid_;
}
inline void RoleDBSnsSimple::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 zid = 2;
inline bool RoleDBSnsSimple::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleDBSnsSimple::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleDBSnsSimple::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleDBSnsSimple::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 RoleDBSnsSimple::zid() const {
  return zid_;
}
inline void RoleDBSnsSimple::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint32 uid = 3;
inline bool RoleDBSnsSimple::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleDBSnsSimple::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleDBSnsSimple::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleDBSnsSimple::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RoleDBSnsSimple::uid() const {
  return uid_;
}
inline void RoleDBSnsSimple::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto_ff.RoleDBBaseData base = 4;
inline bool RoleDBSnsSimple::has_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleDBSnsSimple::set_has_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleDBSnsSimple::clear_has_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleDBSnsSimple::clear_base() {
  if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
  clear_has_base();
}
inline const ::proto_ff::RoleDBBaseData& RoleDBSnsSimple::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto_ff::RoleDBBaseData* RoleDBSnsSimple::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto_ff::RoleDBBaseData;
  return base_;
}
inline ::proto_ff::RoleDBBaseData* RoleDBSnsSimple::release_base() {
  clear_has_base();
  ::proto_ff::RoleDBBaseData* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RoleDBSnsSimple::set_allocated_base(::proto_ff::RoleDBBaseData* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// -------------------------------------------------------------------

// MyFriendInfo

// -------------------------------------------------------------------

// RoleDBSnsDetail

// optional uint64 cid = 1;
inline bool RoleDBSnsDetail::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDBSnsDetail::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDBSnsDetail::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDBSnsDetail::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleDBSnsDetail::cid() const {
  return cid_;
}
inline void RoleDBSnsDetail::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 zid = 2;
inline bool RoleDBSnsDetail::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleDBSnsDetail::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleDBSnsDetail::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleDBSnsDetail::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 RoleDBSnsDetail::zid() const {
  return zid_;
}
inline void RoleDBSnsDetail::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint32 uid = 3;
inline bool RoleDBSnsDetail::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleDBSnsDetail::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleDBSnsDetail::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleDBSnsDetail::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RoleDBSnsDetail::uid() const {
  return uid_;
}
inline void RoleDBSnsDetail::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto_ff.MyFriendInfo friend_info = 4;
inline bool RoleDBSnsDetail::has_friend_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleDBSnsDetail::set_has_friend_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleDBSnsDetail::clear_has_friend_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleDBSnsDetail::clear_friend_info() {
  if (friend_info_ != NULL) friend_info_->::proto_ff::MyFriendInfo::Clear();
  clear_has_friend_info();
}
inline const ::proto_ff::MyFriendInfo& RoleDBSnsDetail::friend_info() const {
  return friend_info_ != NULL ? *friend_info_ : *default_instance_->friend_info_;
}
inline ::proto_ff::MyFriendInfo* RoleDBSnsDetail::mutable_friend_info() {
  set_has_friend_info();
  if (friend_info_ == NULL) friend_info_ = new ::proto_ff::MyFriendInfo;
  return friend_info_;
}
inline ::proto_ff::MyFriendInfo* RoleDBSnsDetail::release_friend_info() {
  clear_has_friend_info();
  ::proto_ff::MyFriendInfo* temp = friend_info_;
  friend_info_ = NULL;
  return temp;
}
inline void RoleDBSnsDetail::set_allocated_friend_info(::proto_ff::MyFriendInfo* friend_info) {
  delete friend_info_;
  friend_info_ = friend_info;
  if (friend_info) {
    set_has_friend_info();
  } else {
    clear_has_friend_info();
  }
}

// -------------------------------------------------------------------

// RoleEnterSceneData

// optional uint64 cid = 1;
inline bool RoleEnterSceneData::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleEnterSceneData::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleEnterSceneData::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleEnterSceneData::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RoleEnterSceneData::cid() const {
  return cid_;
}
inline void RoleEnterSceneData::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 zid = 2;
inline bool RoleEnterSceneData::has_zid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleEnterSceneData::set_has_zid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleEnterSceneData::clear_has_zid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleEnterSceneData::clear_zid() {
  zid_ = 0u;
  clear_has_zid();
}
inline ::google::protobuf::uint32 RoleEnterSceneData::zid() const {
  return zid_;
}
inline void RoleEnterSceneData::set_zid(::google::protobuf::uint32 value) {
  set_has_zid();
  zid_ = value;
}

// optional uint32 uid = 3;
inline bool RoleEnterSceneData::has_uid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoleEnterSceneData::set_has_uid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoleEnterSceneData::clear_has_uid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoleEnterSceneData::clear_uid() {
  uid_ = 0u;
  clear_has_uid();
}
inline ::google::protobuf::uint32 RoleEnterSceneData::uid() const {
  return uid_;
}
inline void RoleEnterSceneData::set_uid(::google::protobuf::uint32 value) {
  set_has_uid();
  uid_ = value;
}

// optional .proto_ff.RoleDBBaseData base = 10;
inline bool RoleEnterSceneData::has_base() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoleEnterSceneData::set_has_base() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoleEnterSceneData::clear_has_base() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoleEnterSceneData::clear_base() {
  if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
  clear_has_base();
}
inline const ::proto_ff::RoleDBBaseData& RoleEnterSceneData::base() const {
  return base_ != NULL ? *base_ : *default_instance_->base_;
}
inline ::proto_ff::RoleDBBaseData* RoleEnterSceneData::mutable_base() {
  set_has_base();
  if (base_ == NULL) base_ = new ::proto_ff::RoleDBBaseData;
  return base_;
}
inline ::proto_ff::RoleDBBaseData* RoleEnterSceneData::release_base() {
  clear_has_base();
  ::proto_ff::RoleDBBaseData* temp = base_;
  base_ = NULL;
  return temp;
}
inline void RoleEnterSceneData::set_allocated_base(::proto_ff::RoleDBBaseData* base) {
  delete base_;
  base_ = base;
  if (base) {
    set_has_base();
  } else {
    clear_has_base();
  }
}

// optional .proto_ff.AttrDBData attr = 11;
inline bool RoleEnterSceneData::has_attr() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoleEnterSceneData::set_has_attr() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoleEnterSceneData::clear_has_attr() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoleEnterSceneData::clear_attr() {
  if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
  clear_has_attr();
}
inline const ::proto_ff::AttrDBData& RoleEnterSceneData::attr() const {
  return attr_ != NULL ? *attr_ : *default_instance_->attr_;
}
inline ::proto_ff::AttrDBData* RoleEnterSceneData::mutable_attr() {
  set_has_attr();
  if (attr_ == NULL) attr_ = new ::proto_ff::AttrDBData;
  return attr_;
}
inline ::proto_ff::AttrDBData* RoleEnterSceneData::release_attr() {
  clear_has_attr();
  ::proto_ff::AttrDBData* temp = attr_;
  attr_ = NULL;
  return temp;
}
inline void RoleEnterSceneData::set_allocated_attr(::proto_ff::AttrDBData* attr) {
  delete attr_;
  attr_ = attr;
  if (attr) {
    set_has_attr();
  } else {
    clear_has_attr();
  }
}

// -------------------------------------------------------------------

// RoleDBName

// optional bytes name = 1;
inline bool RoleDBName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleDBName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleDBName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleDBName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RoleDBName::name() const {
  return *name_;
}
inline void RoleDBName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleDBName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RoleDBName::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoleDBName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RoleDBName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoleDBName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DBProxy2_2eproto__INCLUDED
