// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pay.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pay.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* PayReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayOrderIdReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayOrderIdReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayOrderIdRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayOrderIdRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayProductNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayProductNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CL_PayDeliverNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CL_PayDeliverNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LC_PayDeliverFailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LC_PayDeliverFailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadPayDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadPayDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadPayDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadPayDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SavePayDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SavePayDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdatePayDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdatePayDBReq_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pay_2eproto() {
  protobuf_AddDesc_Pay_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pay.proto");
  GOOGLE_CHECK(file != NULL);
  PayReq_descriptor_ = file->message_type(0);
  static const int PayReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayReq, chanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayReq, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayReq, paystring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayReq, myoder_),
  };
  PayReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayReq_descriptor_,
      PayReq::default_instance_,
      PayReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayReq));
  PayRsp_descriptor_ = file->message_type(1);
  static const int PayRsp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayRsp, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayRsp, payret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayRsp, payrspstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayRsp, payretmsg_),
  };
  PayRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayRsp_descriptor_,
      PayRsp::default_instance_,
      PayRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayRsp));
  PayOrderIdReq_descriptor_ = file->message_type(2);
  static const int PayOrderIdReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdReq, channid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdReq, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdReq, orderstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdReq, productlst_),
  };
  PayOrderIdReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayOrderIdReq_descriptor_,
      PayOrderIdReq::default_instance_,
      PayOrderIdReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayOrderIdReq));
  PayOrderIdRsp_descriptor_ = file->message_type(3);
  static const int PayOrderIdRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdRsp, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdRsp, orderstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdRsp, cburl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdRsp, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdRsp, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdRsp, productlst_),
  };
  PayOrderIdRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayOrderIdRsp_descriptor_,
      PayOrderIdRsp::default_instance_,
      PayOrderIdRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayOrderIdRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayOrderIdRsp));
  PayProductNotify_descriptor_ = file->message_type(4);
  static const int PayProductNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProductNotify, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProductNotify, isfirst_),
  };
  PayProductNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayProductNotify_descriptor_,
      PayProductNotify::default_instance_,
      PayProductNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProductNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProductNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayProductNotify));
  PayProto_descriptor_ = file->message_type(5);
  static const int PayProto_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, channid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, order_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, dbid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, myorder_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, fakepay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, productlst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, paytime_),
  };
  PayProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayProto_descriptor_,
      PayProto::default_instance_,
      PayProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayProto));
  CL_PayDeliverNotify_descriptor_ = file->message_type(6);
  static const int CL_PayDeliverNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_PayDeliverNotify, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_PayDeliverNotify, zid_),
  };
  CL_PayDeliverNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CL_PayDeliverNotify_descriptor_,
      CL_PayDeliverNotify::default_instance_,
      CL_PayDeliverNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_PayDeliverNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CL_PayDeliverNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CL_PayDeliverNotify));
  LC_PayDeliverFailRsp_descriptor_ = file->message_type(7);
  static const int LC_PayDeliverFailRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_PayDeliverFailRsp, info_),
  };
  LC_PayDeliverFailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LC_PayDeliverFailRsp_descriptor_,
      LC_PayDeliverFailRsp::default_instance_,
      LC_PayDeliverFailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_PayDeliverFailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LC_PayDeliverFailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LC_PayDeliverFailRsp));
  LoadPayDBReq_descriptor_ = file->message_type(8);
  static const int LoadPayDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPayDBReq, cid_),
  };
  LoadPayDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadPayDBReq_descriptor_,
      LoadPayDBReq::default_instance_,
      LoadPayDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPayDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPayDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadPayDBReq));
  LoadPayDBRsp_descriptor_ = file->message_type(9);
  static const int LoadPayDBRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPayDBRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPayDBRsp, info_lst_),
  };
  LoadPayDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadPayDBRsp_descriptor_,
      LoadPayDBRsp::default_instance_,
      LoadPayDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPayDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadPayDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadPayDBRsp));
  SavePayDBReq_descriptor_ = file->message_type(10);
  static const int SavePayDBReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavePayDBReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavePayDBReq, info_),
  };
  SavePayDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SavePayDBReq_descriptor_,
      SavePayDBReq::default_instance_,
      SavePayDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavePayDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SavePayDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SavePayDBReq));
  UpdatePayDBReq_descriptor_ = file->message_type(11);
  static const int UpdatePayDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePayDBReq, dbid_),
  };
  UpdatePayDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdatePayDBReq_descriptor_,
      UpdatePayDBReq::default_instance_,
      UpdatePayDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePayDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdatePayDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdatePayDBReq));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pay_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayReq_descriptor_, &PayReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayRsp_descriptor_, &PayRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayOrderIdReq_descriptor_, &PayOrderIdReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayOrderIdRsp_descriptor_, &PayOrderIdRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayProductNotify_descriptor_, &PayProductNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayProto_descriptor_, &PayProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CL_PayDeliverNotify_descriptor_, &CL_PayDeliverNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LC_PayDeliverFailRsp_descriptor_, &LC_PayDeliverFailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadPayDBReq_descriptor_, &LoadPayDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadPayDBRsp_descriptor_, &LoadPayDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SavePayDBReq_descriptor_, &SavePayDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdatePayDBReq_descriptor_, &UpdatePayDBReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pay_2eproto() {
  delete PayReq::default_instance_;
  delete PayReq_reflection_;
  delete PayRsp::default_instance_;
  delete PayRsp_reflection_;
  delete PayOrderIdReq::default_instance_;
  delete PayOrderIdReq_reflection_;
  delete PayOrderIdRsp::default_instance_;
  delete PayOrderIdRsp_reflection_;
  delete PayProductNotify::default_instance_;
  delete PayProductNotify_reflection_;
  delete PayProto::default_instance_;
  delete PayProto_reflection_;
  delete CL_PayDeliverNotify::default_instance_;
  delete CL_PayDeliverNotify_reflection_;
  delete LC_PayDeliverFailRsp::default_instance_;
  delete LC_PayDeliverFailRsp_reflection_;
  delete LoadPayDBReq::default_instance_;
  delete LoadPayDBReq_reflection_;
  delete LoadPayDBRsp::default_instance_;
  delete LoadPayDBRsp_reflection_;
  delete SavePayDBReq::default_instance_;
  delete SavePayDBReq_reflection_;
  delete UpdatePayDBReq::default_instance_;
  delete UpdatePayDBReq_reflection_;
}

void protobuf_AddDesc_Pay_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tPay.proto\022\010proto_ff\032\tCom.proto\032\017ComDef"
    "ine.proto\"N\n\006PayReq\022\016\n\006chanId\030\001 \002(\r\022\021\n\tp"
    "roductId\030\002 \002(\t\022\021\n\tpayString\030\003 \002(\t\022\016\n\006myo"
    "der\030\004 \002(\t\"T\n\006PayRsp\022\021\n\tproductId\030\001 \002(\t\022\016"
    "\n\006payRet\030\002 \002(\r\022\024\n\014payRspString\030\003 \001(\t\022\021\n\t"
    "payRetMsg\030\004 \001(\t\"\\\n\rPayOrderIdReq\022\017\n\007chan"
    "nId\030\001 \002(\r\022\021\n\tproductId\030\002 \002(\t\022\023\n\013orderStr"
    "ing\030\003 \001(\t\022\022\n\nproductLst\030\004 \003(\t\"\212\001\n\rPayOrd"
    "erIdRsp\022\017\n\007retCode\030\001 \002(\r\022\r\n\005order\030\002 \001(\t\022"
    "\023\n\013orderString\030\003 \001(\t\022\r\n\005cbUrl\030\004 \001(\t\022\021\n\tp"
    "roductId\030\005 \001(\t\022\016\n\006retMsg\030\006 \001(\t\022\022\n\nproduc"
    "tLst\030\007 \003(\t\"6\n\020PayProductNotify\022\021\n\tproduc"
    "tId\030\001 \001(\t\022\017\n\007isfirst\030\002 \001(\005\"\310\001\n\010PayProto\022"
    "\013\n\003zid\030\001 \002(\r\022\017\n\007channId\030\002 \002(\r\022\013\n\003uid\030\003 \002"
    "(\r\022\013\n\003cid\030\004 \002(\004\022\021\n\tproductId\030\005 \002(\t\022\r\n\005mo"
    "ney\030\006 \002(\r\022\r\n\005order\030\007 \002(\t\022\014\n\004dbid\030\010 \001(\r\022\017"
    "\n\007myOrder\030\t \002(\t\022\017\n\007fakePay\030\n \002(\010\022\022\n\nprod"
    "uctLst\030\013 \003(\t\022\017\n\007payTime\030\014 \001(\003\"D\n\023CL_PayD"
    "eliverNotify\022 \n\004info\030\001 \002(\0132\022.proto_ff.Pa"
    "yProto\022\013\n\003zid\030\002 \002(\r\"8\n\024LC_PayDeliverFail"
    "Rsp\022 \n\004info\030\001 \002(\0132\022.proto_ff.PayProto\"\033\n"
    "\014LoadPayDBReq\022\013\n\003cid\030\001 \002(\004\"A\n\014LoadPayDBR"
    "sp\022\013\n\003cid\030\001 \002(\004\022$\n\010info_lst\030\002 \003(\0132\022.prot"
    "o_ff.PayProto\"=\n\014SavePayDBReq\022\013\n\003cid\030\001 \002"
    "(\004\022 \n\004info\030\002 \002(\0132\022.proto_ff.PayProto\"\036\n\016"
    "UpdatePayDBReq\022\014\n\004dbid\030\001 \003(\r", 1028);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pay.proto", &protobuf_RegisterTypes);
  PayReq::default_instance_ = new PayReq();
  PayRsp::default_instance_ = new PayRsp();
  PayOrderIdReq::default_instance_ = new PayOrderIdReq();
  PayOrderIdRsp::default_instance_ = new PayOrderIdRsp();
  PayProductNotify::default_instance_ = new PayProductNotify();
  PayProto::default_instance_ = new PayProto();
  CL_PayDeliverNotify::default_instance_ = new CL_PayDeliverNotify();
  LC_PayDeliverFailRsp::default_instance_ = new LC_PayDeliverFailRsp();
  LoadPayDBReq::default_instance_ = new LoadPayDBReq();
  LoadPayDBRsp::default_instance_ = new LoadPayDBRsp();
  SavePayDBReq::default_instance_ = new SavePayDBReq();
  UpdatePayDBReq::default_instance_ = new UpdatePayDBReq();
  PayReq::default_instance_->InitAsDefaultInstance();
  PayRsp::default_instance_->InitAsDefaultInstance();
  PayOrderIdReq::default_instance_->InitAsDefaultInstance();
  PayOrderIdRsp::default_instance_->InitAsDefaultInstance();
  PayProductNotify::default_instance_->InitAsDefaultInstance();
  PayProto::default_instance_->InitAsDefaultInstance();
  CL_PayDeliverNotify::default_instance_->InitAsDefaultInstance();
  LC_PayDeliverFailRsp::default_instance_->InitAsDefaultInstance();
  LoadPayDBReq::default_instance_->InitAsDefaultInstance();
  LoadPayDBRsp::default_instance_->InitAsDefaultInstance();
  SavePayDBReq::default_instance_->InitAsDefaultInstance();
  UpdatePayDBReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pay_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pay_2eproto {
  StaticDescriptorInitializer_Pay_2eproto() {
    protobuf_AddDesc_Pay_2eproto();
  }
} static_descriptor_initializer_Pay_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PayReq::kChanIdFieldNumber;
const int PayReq::kProductIdFieldNumber;
const int PayReq::kPayStringFieldNumber;
const int PayReq::kMyoderFieldNumber;
#endif  // !_MSC_VER

PayReq::PayReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayReq::InitAsDefaultInstance() {
}

PayReq::PayReq(const PayReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayReq::SharedCtor() {
  _cached_size_ = 0;
  chanid_ = 0u;
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paystring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  myoder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayReq::~PayReq() {
  SharedDtor();
}

void PayReq::SharedDtor() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (paystring_ != &::google::protobuf::internal::kEmptyString) {
    delete paystring_;
  }
  if (myoder_ != &::google::protobuf::internal::kEmptyString) {
    delete myoder_;
  }
  if (this != default_instance_) {
  }
}

void PayReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayReq_descriptor_;
}

const PayReq& PayReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

PayReq* PayReq::default_instance_ = NULL;

PayReq* PayReq::New() const {
  return new PayReq;
}

void PayReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chanid_ = 0u;
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    if (has_paystring()) {
      if (paystring_ != &::google::protobuf::internal::kEmptyString) {
        paystring_->clear();
      }
    }
    if (has_myoder()) {
      if (myoder_ != &::google::protobuf::internal::kEmptyString) {
        myoder_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 chanId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chanid_)));
          set_has_chanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_productId;
        break;
      }

      // required string productId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payString;
        break;
      }

      // required string payString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paystring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paystring().data(), this->paystring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_myoder;
        break;
      }

      // required string myoder = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myoder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myoder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->myoder().data(), this->myoder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 chanId = 1;
  if (has_chanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chanid(), output);
  }

  // required string productId = 2;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->productid(), output);
  }

  // required string payString = 3;
  if (has_paystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paystring().data(), this->paystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->paystring(), output);
  }

  // required string myoder = 4;
  if (has_myoder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myoder().data(), this->myoder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->myoder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 chanId = 1;
  if (has_chanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chanid(), target);
  }

  // required string productId = 2;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // required string payString = 3;
  if (has_paystring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paystring().data(), this->paystring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->paystring(), target);
  }

  // required string myoder = 4;
  if (has_myoder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myoder().data(), this->myoder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->myoder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 chanId = 1;
    if (has_chanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chanid());
    }

    // required string productId = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // required string payString = 3;
    if (has_paystring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paystring());
    }

    // required string myoder = 4;
    if (has_myoder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myoder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayReq::MergeFrom(const PayReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chanid()) {
      set_chanid(from.chanid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_paystring()) {
      set_paystring(from.paystring());
    }
    if (from.has_myoder()) {
      set_myoder(from.myoder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayReq::CopyFrom(const PayReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PayReq::Swap(PayReq* other) {
  if (other != this) {
    std::swap(chanid_, other->chanid_);
    std::swap(productid_, other->productid_);
    std::swap(paystring_, other->paystring_);
    std::swap(myoder_, other->myoder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayReq_descriptor_;
  metadata.reflection = PayReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayRsp::kProductIdFieldNumber;
const int PayRsp::kPayRetFieldNumber;
const int PayRsp::kPayRspStringFieldNumber;
const int PayRsp::kPayRetMsgFieldNumber;
#endif  // !_MSC_VER

PayRsp::PayRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayRsp::InitAsDefaultInstance() {
}

PayRsp::PayRsp(const PayRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayRsp::SharedCtor() {
  _cached_size_ = 0;
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payret_ = 0u;
  payrspstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payretmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayRsp::~PayRsp() {
  SharedDtor();
}

void PayRsp::SharedDtor() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (payrspstring_ != &::google::protobuf::internal::kEmptyString) {
    delete payrspstring_;
  }
  if (payretmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete payretmsg_;
  }
  if (this != default_instance_) {
  }
}

void PayRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayRsp_descriptor_;
}

const PayRsp& PayRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

PayRsp* PayRsp::default_instance_ = NULL;

PayRsp* PayRsp::New() const {
  return new PayRsp;
}

void PayRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    payret_ = 0u;
    if (has_payrspstring()) {
      if (payrspstring_ != &::google::protobuf::internal::kEmptyString) {
        payrspstring_->clear();
      }
    }
    if (has_payretmsg()) {
      if (payretmsg_ != &::google::protobuf::internal::kEmptyString) {
        payretmsg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string productId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_payRet;
        break;
      }

      // required uint32 payRet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payRet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &payret_)));
          set_has_payret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_payRspString;
        break;
      }

      // optional string payRspString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payRspString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payrspstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payrspstring().data(), this->payrspstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_payRetMsg;
        break;
      }

      // optional string payRetMsg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payRetMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payretmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payretmsg().data(), this->payretmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string productId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->productid(), output);
  }

  // required uint32 payRet = 2;
  if (has_payret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->payret(), output);
  }

  // optional string payRspString = 3;
  if (has_payrspstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payrspstring().data(), this->payrspstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->payrspstring(), output);
  }

  // optional string payRetMsg = 4;
  if (has_payretmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payretmsg().data(), this->payretmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->payretmsg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string productId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // required uint32 payRet = 2;
  if (has_payret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->payret(), target);
  }

  // optional string payRspString = 3;
  if (has_payrspstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payrspstring().data(), this->payrspstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->payrspstring(), target);
  }

  // optional string payRetMsg = 4;
  if (has_payretmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payretmsg().data(), this->payretmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->payretmsg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string productId = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // required uint32 payRet = 2;
    if (has_payret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->payret());
    }

    // optional string payRspString = 3;
    if (has_payrspstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payrspstring());
    }

    // optional string payRetMsg = 4;
    if (has_payretmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payretmsg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayRsp::MergeFrom(const PayRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_payret()) {
      set_payret(from.payret());
    }
    if (from.has_payrspstring()) {
      set_payrspstring(from.payrspstring());
    }
    if (from.has_payretmsg()) {
      set_payretmsg(from.payretmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayRsp::CopyFrom(const PayRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PayRsp::Swap(PayRsp* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(payret_, other->payret_);
    std::swap(payrspstring_, other->payrspstring_);
    std::swap(payretmsg_, other->payretmsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayRsp_descriptor_;
  metadata.reflection = PayRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayOrderIdReq::kChannIdFieldNumber;
const int PayOrderIdReq::kProductIdFieldNumber;
const int PayOrderIdReq::kOrderStringFieldNumber;
const int PayOrderIdReq::kProductLstFieldNumber;
#endif  // !_MSC_VER

PayOrderIdReq::PayOrderIdReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayOrderIdReq::InitAsDefaultInstance() {
}

PayOrderIdReq::PayOrderIdReq(const PayOrderIdReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayOrderIdReq::SharedCtor() {
  _cached_size_ = 0;
  channid_ = 0u;
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayOrderIdReq::~PayOrderIdReq() {
  SharedDtor();
}

void PayOrderIdReq::SharedDtor() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (orderstring_ != &::google::protobuf::internal::kEmptyString) {
    delete orderstring_;
  }
  if (this != default_instance_) {
  }
}

void PayOrderIdReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayOrderIdReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayOrderIdReq_descriptor_;
}

const PayOrderIdReq& PayOrderIdReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

PayOrderIdReq* PayOrderIdReq::default_instance_ = NULL;

PayOrderIdReq* PayOrderIdReq::New() const {
  return new PayOrderIdReq;
}

void PayOrderIdReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channid_ = 0u;
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    if (has_orderstring()) {
      if (orderstring_ != &::google::protobuf::internal::kEmptyString) {
        orderstring_->clear();
      }
    }
  }
  productlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayOrderIdReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 channId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channid_)));
          set_has_channid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_productId;
        break;
      }

      // required string productId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderString;
        break;
      }

      // optional string orderString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderstring().data(), this->orderstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_productLst;
        break;
      }

      // repeated string productLst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_productlst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productlst(this->productlst_size() - 1).data(),
            this->productlst(this->productlst_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_productLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayOrderIdReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 channId = 1;
  if (has_channid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channid(), output);
  }

  // required string productId = 2;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->productid(), output);
  }

  // optional string orderString = 3;
  if (has_orderstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderstring().data(), this->orderstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderstring(), output);
  }

  // repeated string productLst = 4;
  for (int i = 0; i < this->productlst_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->productlst(i).data(), this->productlst(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->productlst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayOrderIdReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 channId = 1;
  if (has_channid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channid(), target);
  }

  // required string productId = 2;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->productid(), target);
  }

  // optional string orderString = 3;
  if (has_orderstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderstring().data(), this->orderstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderstring(), target);
  }

  // repeated string productLst = 4;
  for (int i = 0; i < this->productlst_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productlst(i).data(), this->productlst(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->productlst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayOrderIdReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 channId = 1;
    if (has_channid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channid());
    }

    // required string productId = 2;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string orderString = 3;
    if (has_orderstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderstring());
    }

  }
  // repeated string productLst = 4;
  total_size += 1 * this->productlst_size();
  for (int i = 0; i < this->productlst_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->productlst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayOrderIdReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayOrderIdReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayOrderIdReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayOrderIdReq::MergeFrom(const PayOrderIdReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  productlst_.MergeFrom(from.productlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channid()) {
      set_channid(from.channid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_orderstring()) {
      set_orderstring(from.orderstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayOrderIdReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayOrderIdReq::CopyFrom(const PayOrderIdReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayOrderIdReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PayOrderIdReq::Swap(PayOrderIdReq* other) {
  if (other != this) {
    std::swap(channid_, other->channid_);
    std::swap(productid_, other->productid_);
    std::swap(orderstring_, other->orderstring_);
    productlst_.Swap(&other->productlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayOrderIdReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayOrderIdReq_descriptor_;
  metadata.reflection = PayOrderIdReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayOrderIdRsp::kRetCodeFieldNumber;
const int PayOrderIdRsp::kOrderFieldNumber;
const int PayOrderIdRsp::kOrderStringFieldNumber;
const int PayOrderIdRsp::kCbUrlFieldNumber;
const int PayOrderIdRsp::kProductIdFieldNumber;
const int PayOrderIdRsp::kRetMsgFieldNumber;
const int PayOrderIdRsp::kProductLstFieldNumber;
#endif  // !_MSC_VER

PayOrderIdRsp::PayOrderIdRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayOrderIdRsp::InitAsDefaultInstance() {
}

PayOrderIdRsp::PayOrderIdRsp(const PayOrderIdRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayOrderIdRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0u;
  order_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cburl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  retmsg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayOrderIdRsp::~PayOrderIdRsp() {
  SharedDtor();
}

void PayOrderIdRsp::SharedDtor() {
  if (order_ != &::google::protobuf::internal::kEmptyString) {
    delete order_;
  }
  if (orderstring_ != &::google::protobuf::internal::kEmptyString) {
    delete orderstring_;
  }
  if (cburl_ != &::google::protobuf::internal::kEmptyString) {
    delete cburl_;
  }
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (retmsg_ != &::google::protobuf::internal::kEmptyString) {
    delete retmsg_;
  }
  if (this != default_instance_) {
  }
}

void PayOrderIdRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayOrderIdRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayOrderIdRsp_descriptor_;
}

const PayOrderIdRsp& PayOrderIdRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

PayOrderIdRsp* PayOrderIdRsp::default_instance_ = NULL;

PayOrderIdRsp* PayOrderIdRsp::New() const {
  return new PayOrderIdRsp;
}

void PayOrderIdRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0u;
    if (has_order()) {
      if (order_ != &::google::protobuf::internal::kEmptyString) {
        order_->clear();
      }
    }
    if (has_orderstring()) {
      if (orderstring_ != &::google::protobuf::internal::kEmptyString) {
        orderstring_->clear();
      }
    }
    if (has_cburl()) {
      if (cburl_ != &::google::protobuf::internal::kEmptyString) {
        cburl_->clear();
      }
    }
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    if (has_retmsg()) {
      if (retmsg_ != &::google::protobuf::internal::kEmptyString) {
        retmsg_->clear();
      }
    }
  }
  productlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayOrderIdRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 retCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_order;
        break;
      }

      // optional string order = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order().data(), this->order().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderString;
        break;
      }

      // optional string orderString = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderstring().data(), this->orderstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_cbUrl;
        break;
      }

      // optional string cbUrl = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cbUrl:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cburl()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cburl().data(), this->cburl().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_productId;
        break;
      }

      // optional string productId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_retMsg;
        break;
      }

      // optional string retMsg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_retMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->retmsg().data(), this->retmsg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_productLst;
        break;
      }

      // repeated string productLst = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_productlst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productlst(this->productlst_size() - 1).data(),
            this->productlst(this->productlst_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_productLst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayOrderIdRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 retCode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->retcode(), output);
  }

  // optional string order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order().data(), this->order().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->order(), output);
  }

  // optional string orderString = 3;
  if (has_orderstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderstring().data(), this->orderstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderstring(), output);
  }

  // optional string cbUrl = 4;
  if (has_cburl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cburl().data(), this->cburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->cburl(), output);
  }

  // optional string productId = 5;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->productid(), output);
  }

  // optional string retMsg = 6;
  if (has_retmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retmsg().data(), this->retmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->retmsg(), output);
  }

  // repeated string productLst = 7;
  for (int i = 0; i < this->productlst_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->productlst(i).data(), this->productlst(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->productlst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayOrderIdRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 retCode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->retcode(), target);
  }

  // optional string order = 2;
  if (has_order()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order().data(), this->order().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->order(), target);
  }

  // optional string orderString = 3;
  if (has_orderstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderstring().data(), this->orderstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderstring(), target);
  }

  // optional string cbUrl = 4;
  if (has_cburl()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cburl().data(), this->cburl().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->cburl(), target);
  }

  // optional string productId = 5;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->productid(), target);
  }

  // optional string retMsg = 6;
  if (has_retmsg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->retmsg().data(), this->retmsg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->retmsg(), target);
  }

  // repeated string productLst = 7;
  for (int i = 0; i < this->productlst_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productlst(i).data(), this->productlst(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->productlst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayOrderIdRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 retCode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retcode());
    }

    // optional string order = 2;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order());
    }

    // optional string orderString = 3;
    if (has_orderstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderstring());
    }

    // optional string cbUrl = 4;
    if (has_cburl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cburl());
    }

    // optional string productId = 5;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional string retMsg = 6;
    if (has_retmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

  }
  // repeated string productLst = 7;
  total_size += 1 * this->productlst_size();
  for (int i = 0; i < this->productlst_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->productlst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayOrderIdRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayOrderIdRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayOrderIdRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayOrderIdRsp::MergeFrom(const PayOrderIdRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  productlst_.MergeFrom(from.productlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_orderstring()) {
      set_orderstring(from.orderstring());
    }
    if (from.has_cburl()) {
      set_cburl(from.cburl());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayOrderIdRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayOrderIdRsp::CopyFrom(const PayOrderIdRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayOrderIdRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PayOrderIdRsp::Swap(PayOrderIdRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(order_, other->order_);
    std::swap(orderstring_, other->orderstring_);
    std::swap(cburl_, other->cburl_);
    std::swap(productid_, other->productid_);
    std::swap(retmsg_, other->retmsg_);
    productlst_.Swap(&other->productlst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayOrderIdRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayOrderIdRsp_descriptor_;
  metadata.reflection = PayOrderIdRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayProductNotify::kProductIdFieldNumber;
const int PayProductNotify::kIsfirstFieldNumber;
#endif  // !_MSC_VER

PayProductNotify::PayProductNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayProductNotify::InitAsDefaultInstance() {
}

PayProductNotify::PayProductNotify(const PayProductNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayProductNotify::SharedCtor() {
  _cached_size_ = 0;
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isfirst_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayProductNotify::~PayProductNotify() {
  SharedDtor();
}

void PayProductNotify::SharedDtor() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (this != default_instance_) {
  }
}

void PayProductNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayProductNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayProductNotify_descriptor_;
}

const PayProductNotify& PayProductNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

PayProductNotify* PayProductNotify::default_instance_ = NULL;

PayProductNotify* PayProductNotify::New() const {
  return new PayProductNotify;
}

void PayProductNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    isfirst_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayProductNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string productId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isfirst;
        break;
      }

      // optional int32 isfirst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfirst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfirst_)));
          set_has_isfirst();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayProductNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string productId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->productid(), output);
  }

  // optional int32 isfirst = 2;
  if (has_isfirst()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isfirst(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayProductNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string productId = 1;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->productid(), target);
  }

  // optional int32 isfirst = 2;
  if (has_isfirst()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isfirst(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayProductNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string productId = 1;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // optional int32 isfirst = 2;
    if (has_isfirst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfirst());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayProductNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayProductNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayProductNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayProductNotify::MergeFrom(const PayProductNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_isfirst()) {
      set_isfirst(from.isfirst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayProductNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayProductNotify::CopyFrom(const PayProductNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayProductNotify::IsInitialized() const {

  return true;
}

void PayProductNotify::Swap(PayProductNotify* other) {
  if (other != this) {
    std::swap(productid_, other->productid_);
    std::swap(isfirst_, other->isfirst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayProductNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayProductNotify_descriptor_;
  metadata.reflection = PayProductNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayProto::kZidFieldNumber;
const int PayProto::kChannIdFieldNumber;
const int PayProto::kUidFieldNumber;
const int PayProto::kCidFieldNumber;
const int PayProto::kProductIdFieldNumber;
const int PayProto::kMoneyFieldNumber;
const int PayProto::kOrderFieldNumber;
const int PayProto::kDbidFieldNumber;
const int PayProto::kMyOrderFieldNumber;
const int PayProto::kFakePayFieldNumber;
const int PayProto::kProductLstFieldNumber;
const int PayProto::kPayTimeFieldNumber;
#endif  // !_MSC_VER

PayProto::PayProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayProto::InitAsDefaultInstance() {
}

PayProto::PayProto(const PayProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayProto::SharedCtor() {
  _cached_size_ = 0;
  zid_ = 0u;
  channid_ = 0u;
  uid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  productid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0u;
  order_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dbid_ = 0u;
  myorder_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fakepay_ = false;
  paytime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayProto::~PayProto() {
  SharedDtor();
}

void PayProto::SharedDtor() {
  if (productid_ != &::google::protobuf::internal::kEmptyString) {
    delete productid_;
  }
  if (order_ != &::google::protobuf::internal::kEmptyString) {
    delete order_;
  }
  if (myorder_ != &::google::protobuf::internal::kEmptyString) {
    delete myorder_;
  }
  if (this != default_instance_) {
  }
}

void PayProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayProto_descriptor_;
}

const PayProto& PayProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

PayProto* PayProto::default_instance_ = NULL;

PayProto* PayProto::New() const {
  return new PayProto;
}

void PayProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zid_ = 0u;
    channid_ = 0u;
    uid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_productid()) {
      if (productid_ != &::google::protobuf::internal::kEmptyString) {
        productid_->clear();
      }
    }
    money_ = 0u;
    if (has_order()) {
      if (order_ != &::google::protobuf::internal::kEmptyString) {
        order_->clear();
      }
    }
    dbid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_myorder()) {
      if (myorder_ != &::google::protobuf::internal::kEmptyString) {
        myorder_->clear();
      }
    }
    fakepay_ = false;
    paytime_ = GOOGLE_LONGLONG(0);
  }
  productlst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channId;
        break;
      }

      // required uint32 channId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channid_)));
          set_has_channid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // required uint64 cid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_productId;
        break;
      }

      // required string productId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_productid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productid().data(), this->productid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // required uint32 money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_order;
        break;
      }

      // required string order = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_order:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_order()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->order().data(), this->order().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dbid;
        break;
      }

      // optional uint32 dbid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dbid_)));
          set_has_dbid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_myOrder;
        break;
      }

      // required string myOrder = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_myorder()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->myorder().data(), this->myorder().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_fakePay;
        break;
      }

      // required bool fakePay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fakePay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fakepay_)));
          set_has_fakepay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_productLst;
        break;
      }

      // repeated string productLst = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_productLst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_productlst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->productlst(this->productlst_size() - 1).data(),
            this->productlst(this->productlst_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_productLst;
        if (input->ExpectTag(96)) goto parse_payTime;
        break;
      }

      // optional int64 payTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &paytime_)));
          set_has_paytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zid(), output);
  }

  // required uint32 channId = 2;
  if (has_channid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channid(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required uint64 cid = 4;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cid(), output);
  }

  // required string productId = 5;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->productid(), output);
  }

  // required uint32 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->money(), output);
  }

  // required string order = 7;
  if (has_order()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order().data(), this->order().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->order(), output);
  }

  // optional uint32 dbid = 8;
  if (has_dbid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->dbid(), output);
  }

  // required string myOrder = 9;
  if (has_myorder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myorder().data(), this->myorder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->myorder(), output);
  }

  // required bool fakePay = 10;
  if (has_fakepay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fakepay(), output);
  }

  // repeated string productLst = 11;
  for (int i = 0; i < this->productlst_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->productlst(i).data(), this->productlst(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->productlst(i), output);
  }

  // optional int64 payTime = 12;
  if (has_paytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->paytime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zid = 1;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zid(), target);
  }

  // required uint32 channId = 2;
  if (has_channid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channid(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required uint64 cid = 4;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cid(), target);
  }

  // required string productId = 5;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productid().data(), this->productid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->productid(), target);
  }

  // required uint32 money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->money(), target);
  }

  // required string order = 7;
  if (has_order()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->order().data(), this->order().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->order(), target);
  }

  // optional uint32 dbid = 8;
  if (has_dbid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->dbid(), target);
  }

  // required string myOrder = 9;
  if (has_myorder()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->myorder().data(), this->myorder().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->myorder(), target);
  }

  // required bool fakePay = 10;
  if (has_fakepay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->fakepay(), target);
  }

  // repeated string productLst = 11;
  for (int i = 0; i < this->productlst_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->productlst(i).data(), this->productlst(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(11, this->productlst(i), target);
  }

  // optional int64 payTime = 12;
  if (has_paytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->paytime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zid = 1;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint32 channId = 2;
    if (has_channid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channid());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint64 cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required string productId = 5;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->productid());
    }

    // required uint32 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required string order = 7;
    if (has_order()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->order());
    }

    // optional uint32 dbid = 8;
    if (has_dbid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dbid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string myOrder = 9;
    if (has_myorder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->myorder());
    }

    // required bool fakePay = 10;
    if (has_fakepay()) {
      total_size += 1 + 1;
    }

    // optional int64 payTime = 12;
    if (has_paytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->paytime());
    }

  }
  // repeated string productLst = 11;
  total_size += 1 * this->productlst_size();
  for (int i = 0; i < this->productlst_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->productlst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayProto::MergeFrom(const PayProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  productlst_.MergeFrom(from.productlst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_channid()) {
      set_channid(from.channid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_order()) {
      set_order(from.order());
    }
    if (from.has_dbid()) {
      set_dbid(from.dbid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_myorder()) {
      set_myorder(from.myorder());
    }
    if (from.has_fakepay()) {
      set_fakepay(from.fakepay());
    }
    if (from.has_paytime()) {
      set_paytime(from.paytime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayProto::CopyFrom(const PayProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000037f) != 0x0000037f) return false;

  return true;
}

void PayProto::Swap(PayProto* other) {
  if (other != this) {
    std::swap(zid_, other->zid_);
    std::swap(channid_, other->channid_);
    std::swap(uid_, other->uid_);
    std::swap(cid_, other->cid_);
    std::swap(productid_, other->productid_);
    std::swap(money_, other->money_);
    std::swap(order_, other->order_);
    std::swap(dbid_, other->dbid_);
    std::swap(myorder_, other->myorder_);
    std::swap(fakepay_, other->fakepay_);
    productlst_.Swap(&other->productlst_);
    std::swap(paytime_, other->paytime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayProto_descriptor_;
  metadata.reflection = PayProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CL_PayDeliverNotify::kInfoFieldNumber;
const int CL_PayDeliverNotify::kZidFieldNumber;
#endif  // !_MSC_VER

CL_PayDeliverNotify::CL_PayDeliverNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CL_PayDeliverNotify::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::PayProto*>(&::proto_ff::PayProto::default_instance());
}

CL_PayDeliverNotify::CL_PayDeliverNotify(const CL_PayDeliverNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CL_PayDeliverNotify::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CL_PayDeliverNotify::~CL_PayDeliverNotify() {
  SharedDtor();
}

void CL_PayDeliverNotify::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void CL_PayDeliverNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CL_PayDeliverNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CL_PayDeliverNotify_descriptor_;
}

const CL_PayDeliverNotify& CL_PayDeliverNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

CL_PayDeliverNotify* CL_PayDeliverNotify::default_instance_ = NULL;

CL_PayDeliverNotify* CL_PayDeliverNotify::New() const {
  return new CL_PayDeliverNotify;
}

void CL_PayDeliverNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::PayProto::Clear();
    }
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CL_PayDeliverNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.PayProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CL_PayDeliverNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.PayProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CL_PayDeliverNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.PayProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CL_PayDeliverNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.PayProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CL_PayDeliverNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CL_PayDeliverNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CL_PayDeliverNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CL_PayDeliverNotify::MergeFrom(const CL_PayDeliverNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::PayProto::MergeFrom(from.info());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CL_PayDeliverNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CL_PayDeliverNotify::CopyFrom(const CL_PayDeliverNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CL_PayDeliverNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void CL_PayDeliverNotify::Swap(CL_PayDeliverNotify* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CL_PayDeliverNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CL_PayDeliverNotify_descriptor_;
  metadata.reflection = CL_PayDeliverNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LC_PayDeliverFailRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

LC_PayDeliverFailRsp::LC_PayDeliverFailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LC_PayDeliverFailRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::PayProto*>(&::proto_ff::PayProto::default_instance());
}

LC_PayDeliverFailRsp::LC_PayDeliverFailRsp(const LC_PayDeliverFailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LC_PayDeliverFailRsp::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LC_PayDeliverFailRsp::~LC_PayDeliverFailRsp() {
  SharedDtor();
}

void LC_PayDeliverFailRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void LC_PayDeliverFailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LC_PayDeliverFailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LC_PayDeliverFailRsp_descriptor_;
}

const LC_PayDeliverFailRsp& LC_PayDeliverFailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

LC_PayDeliverFailRsp* LC_PayDeliverFailRsp::default_instance_ = NULL;

LC_PayDeliverFailRsp* LC_PayDeliverFailRsp::New() const {
  return new LC_PayDeliverFailRsp;
}

void LC_PayDeliverFailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::PayProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LC_PayDeliverFailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto_ff.PayProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LC_PayDeliverFailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto_ff.PayProto info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LC_PayDeliverFailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto_ff.PayProto info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LC_PayDeliverFailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto_ff.PayProto info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LC_PayDeliverFailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LC_PayDeliverFailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LC_PayDeliverFailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LC_PayDeliverFailRsp::MergeFrom(const LC_PayDeliverFailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::PayProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LC_PayDeliverFailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LC_PayDeliverFailRsp::CopyFrom(const LC_PayDeliverFailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LC_PayDeliverFailRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void LC_PayDeliverFailRsp::Swap(LC_PayDeliverFailRsp* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LC_PayDeliverFailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LC_PayDeliverFailRsp_descriptor_;
  metadata.reflection = LC_PayDeliverFailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadPayDBReq::kCidFieldNumber;
#endif  // !_MSC_VER

LoadPayDBReq::LoadPayDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadPayDBReq::InitAsDefaultInstance() {
}

LoadPayDBReq::LoadPayDBReq(const LoadPayDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadPayDBReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadPayDBReq::~LoadPayDBReq() {
  SharedDtor();
}

void LoadPayDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoadPayDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadPayDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadPayDBReq_descriptor_;
}

const LoadPayDBReq& LoadPayDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

LoadPayDBReq* LoadPayDBReq::default_instance_ = NULL;

LoadPayDBReq* LoadPayDBReq::New() const {
  return new LoadPayDBReq;
}

void LoadPayDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadPayDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadPayDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadPayDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadPayDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadPayDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadPayDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadPayDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadPayDBReq::MergeFrom(const LoadPayDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadPayDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPayDBReq::CopyFrom(const LoadPayDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPayDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoadPayDBReq::Swap(LoadPayDBReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadPayDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadPayDBReq_descriptor_;
  metadata.reflection = LoadPayDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadPayDBRsp::kCidFieldNumber;
const int LoadPayDBRsp::kInfoLstFieldNumber;
#endif  // !_MSC_VER

LoadPayDBRsp::LoadPayDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadPayDBRsp::InitAsDefaultInstance() {
}

LoadPayDBRsp::LoadPayDBRsp(const LoadPayDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadPayDBRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadPayDBRsp::~LoadPayDBRsp() {
  SharedDtor();
}

void LoadPayDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoadPayDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadPayDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadPayDBRsp_descriptor_;
}

const LoadPayDBRsp& LoadPayDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

LoadPayDBRsp* LoadPayDBRsp::default_instance_ = NULL;

LoadPayDBRsp* LoadPayDBRsp::New() const {
  return new LoadPayDBRsp;
}

void LoadPayDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadPayDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_lst;
        break;
      }

      // repeated .proto_ff.PayProto info_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadPayDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.PayProto info_lst = 2;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadPayDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.PayProto info_lst = 2;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadPayDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated .proto_ff.PayProto info_lst = 2;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadPayDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadPayDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadPayDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadPayDBRsp::MergeFrom(const LoadPayDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadPayDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadPayDBRsp::CopyFrom(const LoadPayDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadPayDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_lst_size(); i++) {
    if (!this->info_lst(i).IsInitialized()) return false;
  }
  return true;
}

void LoadPayDBRsp::Swap(LoadPayDBRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    info_lst_.Swap(&other->info_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadPayDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadPayDBRsp_descriptor_;
  metadata.reflection = LoadPayDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SavePayDBReq::kCidFieldNumber;
const int SavePayDBReq::kInfoFieldNumber;
#endif  // !_MSC_VER

SavePayDBReq::SavePayDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SavePayDBReq::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::PayProto*>(&::proto_ff::PayProto::default_instance());
}

SavePayDBReq::SavePayDBReq(const SavePayDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SavePayDBReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SavePayDBReq::~SavePayDBReq() {
  SharedDtor();
}

void SavePayDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SavePayDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SavePayDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SavePayDBReq_descriptor_;
}

const SavePayDBReq& SavePayDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

SavePayDBReq* SavePayDBReq::default_instance_ = NULL;

SavePayDBReq* SavePayDBReq::New() const {
  return new SavePayDBReq;
}

void SavePayDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::PayProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SavePayDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .proto_ff.PayProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SavePayDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required .proto_ff.PayProto info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SavePayDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required .proto_ff.PayProto info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SavePayDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required .proto_ff.PayProto info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SavePayDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SavePayDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SavePayDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SavePayDBReq::MergeFrom(const SavePayDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::PayProto::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SavePayDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SavePayDBReq::CopyFrom(const SavePayDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavePayDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SavePayDBReq::Swap(SavePayDBReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SavePayDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SavePayDBReq_descriptor_;
  metadata.reflection = SavePayDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdatePayDBReq::kDbidFieldNumber;
#endif  // !_MSC_VER

UpdatePayDBReq::UpdatePayDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdatePayDBReq::InitAsDefaultInstance() {
}

UpdatePayDBReq::UpdatePayDBReq(const UpdatePayDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdatePayDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdatePayDBReq::~UpdatePayDBReq() {
  SharedDtor();
}

void UpdatePayDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdatePayDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdatePayDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdatePayDBReq_descriptor_;
}

const UpdatePayDBReq& UpdatePayDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2eproto();
  return *default_instance_;
}

UpdatePayDBReq* UpdatePayDBReq::default_instance_ = NULL;

UpdatePayDBReq* UpdatePayDBReq::New() const {
  return new UpdatePayDBReq;
}

void UpdatePayDBReq::Clear() {
  dbid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdatePayDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 dbid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dbid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_dbid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dbid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_dbid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdatePayDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 dbid = 1;
  for (int i = 0; i < this->dbid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->dbid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdatePayDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 dbid = 1;
  for (int i = 0; i < this->dbid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->dbid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdatePayDBReq::ByteSize() const {
  int total_size = 0;

  // repeated uint32 dbid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dbid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dbid(i));
    }
    total_size += 1 * this->dbid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdatePayDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdatePayDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdatePayDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdatePayDBReq::MergeFrom(const UpdatePayDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  dbid_.MergeFrom(from.dbid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdatePayDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePayDBReq::CopyFrom(const UpdatePayDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePayDBReq::IsInitialized() const {

  return true;
}

void UpdatePayDBReq::Swap(UpdatePayDBReq* other) {
  if (other != this) {
    dbid_.Swap(&other->dbid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdatePayDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdatePayDBReq_descriptor_;
  metadata.reflection = UpdatePayDBReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
