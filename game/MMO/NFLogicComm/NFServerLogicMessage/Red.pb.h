// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Red.proto

#ifndef PROTOBUF_Red_2eproto__INCLUDED
#define PROTOBUF_Red_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
#include "common_logic.pb.h"
#include "Com.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Red_2eproto();
void protobuf_AssignDesc_Red_2eproto();
void protobuf_ShutdownFile_Red_2eproto();

class RedFetchProto;
class RedFetchListProto;
class RedDetailProto;
class RedListProto;
class RedSimpleProto;
class RedSimpleListProto;
class RedWaitProto;
class RedWaitListProto;
class RedNewProto;
class RedNewListProto;
class Red_LoginSyncInfoRsp;
class Red_UpdateRoleRsp;
class Red_UpdateRoleWaitRsp;
class Red_NewRedNotify;
class Red_SimpleListReq;
class Red_SimpleListRsp;
class Red_DetailReq;
class Red_DetailRsp;
class Red_FetchReq;
class Red_FetchRsp;
class Red_SendReq;
class Red_SendRsp;
class Red_FetchExtraReq;
class Red_FetchExtraRsp;
class Red_UpdateSendListRsp;
class Red_LCSendReq;
class Red_CLFetchRsp;
class Red_CLSendFailRsp;
class Red_LCRechargeRsp;

// ===================================================================

class RedFetchProto : public ::google::protobuf::Message {
 public:
  RedFetchProto();
  virtual ~RedFetchProto();

  RedFetchProto(const RedFetchProto& from);

  inline RedFetchProto& operator=(const RedFetchProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedFetchProto& default_instance();

  void Swap(RedFetchProto* other);

  // implements Message ----------------------------------------------

  RedFetchProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedFetchProto& from);
  void MergeFrom(const RedFetchProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 prof = 3;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 3;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional uint32 val = 4;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 4;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);

  // optional uint64 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint64 time() const;
  inline void set_time(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RedFetchProto)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_val();
  inline void clear_has_val();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::std::string* name_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::uint32 val_;
  ::google::protobuf::uint64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedFetchProto* default_instance_;
};
// -------------------------------------------------------------------

class RedFetchListProto : public ::google::protobuf::Message {
 public:
  RedFetchListProto();
  virtual ~RedFetchListProto();

  RedFetchListProto(const RedFetchListProto& from);

  inline RedFetchListProto& operator=(const RedFetchListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedFetchListProto& default_instance();

  void Swap(RedFetchListProto* other);

  // implements Message ----------------------------------------------

  RedFetchListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedFetchListProto& from);
  void MergeFrom(const RedFetchListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RedFetchProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::RedFetchProto& info(int index) const;
  inline ::proto_ff::RedFetchProto* mutable_info(int index);
  inline ::proto_ff::RedFetchProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.RedFetchListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedFetchListProto* default_instance_;
};
// -------------------------------------------------------------------

class RedDetailProto : public ::google::protobuf::Message {
 public:
  RedDetailProto();
  virtual ~RedDetailProto();

  RedDetailProto(const RedDetailProto& from);

  inline RedDetailProto& operator=(const RedDetailProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedDetailProto& default_instance();

  void Swap(RedDetailProto* other);

  // implements Message ----------------------------------------------

  RedDetailProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedDetailProto& from);
  void MergeFrom(const RedDetailProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // optional uint32 cfgid = 2;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 2;
  inline ::google::protobuf::uint32 cfgid() const;
  inline void set_cfgid(::google::protobuf::uint32 value);

  // optional uint64 sendcid = 3;
  inline bool has_sendcid() const;
  inline void clear_sendcid();
  static const int kSendcidFieldNumber = 3;
  inline ::google::protobuf::uint64 sendcid() const;
  inline void set_sendcid(::google::protobuf::uint64 value);

  // optional bytes sendname = 4;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendnameFieldNumber = 4;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const void* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  inline void set_allocated_sendname(::std::string* sendname);

  // optional int32 prof = 5;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 5;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional uint64 sendtime = 6;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendtimeFieldNumber = 6;
  inline ::google::protobuf::uint64 sendtime() const;
  inline void set_sendtime(::google::protobuf::uint64 value);

  // optional bytes word = 7;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 7;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const void* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // optional .proto_ff.RedFetchListProto fetch = 8;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 8;
  inline const ::proto_ff::RedFetchListProto& fetch() const;
  inline ::proto_ff::RedFetchListProto* mutable_fetch();
  inline ::proto_ff::RedFetchListProto* release_fetch();
  inline void set_allocated_fetch(::proto_ff::RedFetchListProto* fetch);

  // @@protoc_insertion_point(class_scope:proto_ff.RedDetailProto)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_sendcid();
  inline void clear_has_sendcid();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_word();
  inline void clear_has_word();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;
  ::google::protobuf::uint32 cfgid_;
  ::google::protobuf::uint64 sendcid_;
  ::std::string* sendname_;
  ::google::protobuf::uint64 sendtime_;
  ::std::string* word_;
  ::proto_ff::RedFetchListProto* fetch_;
  ::google::protobuf::int32 prof_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedDetailProto* default_instance_;
};
// -------------------------------------------------------------------

class RedListProto : public ::google::protobuf::Message {
 public:
  RedListProto();
  virtual ~RedListProto();

  RedListProto(const RedListProto& from);

  inline RedListProto& operator=(const RedListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedListProto& default_instance();

  void Swap(RedListProto* other);

  // implements Message ----------------------------------------------

  RedListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedListProto& from);
  void MergeFrom(const RedListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RedDetailProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::RedDetailProto& info(int index) const;
  inline ::proto_ff::RedDetailProto* mutable_info(int index);
  inline ::proto_ff::RedDetailProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDetailProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDetailProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.RedListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDetailProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedListProto* default_instance_;
};
// -------------------------------------------------------------------

class RedSimpleProto : public ::google::protobuf::Message {
 public:
  RedSimpleProto();
  virtual ~RedSimpleProto();

  RedSimpleProto(const RedSimpleProto& from);

  inline RedSimpleProto& operator=(const RedSimpleProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedSimpleProto& default_instance();

  void Swap(RedSimpleProto* other);

  // implements Message ----------------------------------------------

  RedSimpleProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedSimpleProto& from);
  void MergeFrom(const RedSimpleProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // optional uint32 cfgid = 2;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 2;
  inline ::google::protobuf::uint32 cfgid() const;
  inline void set_cfgid(::google::protobuf::uint32 value);

  // optional uint64 sendcid = 3;
  inline bool has_sendcid() const;
  inline void clear_sendcid();
  static const int kSendcidFieldNumber = 3;
  inline ::google::protobuf::uint64 sendcid() const;
  inline void set_sendcid(::google::protobuf::uint64 value);

  // optional bytes sendname = 4;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendnameFieldNumber = 4;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const void* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  inline void set_allocated_sendname(::std::string* sendname);

  // optional int32 prof = 5;
  inline bool has_prof() const;
  inline void clear_prof();
  static const int kProfFieldNumber = 5;
  inline ::google::protobuf::int32 prof() const;
  inline void set_prof(::google::protobuf::int32 value);

  // optional uint64 sendtime = 6;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendtimeFieldNumber = 6;
  inline ::google::protobuf::uint64 sendtime() const;
  inline void set_sendtime(::google::protobuf::uint64 value);

  // optional bytes word = 7;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 7;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const void* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // optional int32 state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RedSimpleProto)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_sendcid();
  inline void clear_has_sendcid();
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_prof();
  inline void clear_has_prof();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_word();
  inline void clear_has_word();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;
  ::google::protobuf::uint32 cfgid_;
  ::google::protobuf::uint64 sendcid_;
  ::std::string* sendname_;
  ::google::protobuf::uint64 sendtime_;
  ::google::protobuf::int32 prof_;
  ::google::protobuf::int32 state_;
  ::std::string* word_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedSimpleProto* default_instance_;
};
// -------------------------------------------------------------------

class RedSimpleListProto : public ::google::protobuf::Message {
 public:
  RedSimpleListProto();
  virtual ~RedSimpleListProto();

  RedSimpleListProto(const RedSimpleListProto& from);

  inline RedSimpleListProto& operator=(const RedSimpleListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedSimpleListProto& default_instance();

  void Swap(RedSimpleListProto* other);

  // implements Message ----------------------------------------------

  RedSimpleListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedSimpleListProto& from);
  void MergeFrom(const RedSimpleListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RedSimpleProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::RedSimpleProto& info(int index) const;
  inline ::proto_ff::RedSimpleProto* mutable_info(int index);
  inline ::proto_ff::RedSimpleProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSimpleProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSimpleProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.RedSimpleListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSimpleProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedSimpleListProto* default_instance_;
};
// -------------------------------------------------------------------

class RedWaitProto : public ::google::protobuf::Message {
 public:
  RedWaitProto();
  virtual ~RedWaitProto();

  RedWaitProto(const RedWaitProto& from);

  inline RedWaitProto& operator=(const RedWaitProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedWaitProto& default_instance();

  void Swap(RedWaitProto* other);

  // implements Message ----------------------------------------------

  RedWaitProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedWaitProto& from);
  void MergeFrom(const RedWaitProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // optional uint32 cfgid = 2;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 2;
  inline ::google::protobuf::uint32 cfgid() const;
  inline void set_cfgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RedWaitProto)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;
  ::google::protobuf::uint32 cfgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedWaitProto* default_instance_;
};
// -------------------------------------------------------------------

class RedWaitListProto : public ::google::protobuf::Message {
 public:
  RedWaitListProto();
  virtual ~RedWaitListProto();

  RedWaitListProto(const RedWaitListProto& from);

  inline RedWaitListProto& operator=(const RedWaitListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedWaitListProto& default_instance();

  void Swap(RedWaitListProto* other);

  // implements Message ----------------------------------------------

  RedWaitListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedWaitListProto& from);
  void MergeFrom(const RedWaitListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RedWaitProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::RedWaitProto& info(int index) const;
  inline ::proto_ff::RedWaitProto* mutable_info(int index);
  inline ::proto_ff::RedWaitProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.RedWaitListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedWaitListProto* default_instance_;
};
// -------------------------------------------------------------------

class RedNewProto : public ::google::protobuf::Message {
 public:
  RedNewProto();
  virtual ~RedNewProto();

  RedNewProto(const RedNewProto& from);

  inline RedNewProto& operator=(const RedNewProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedNewProto& default_instance();

  void Swap(RedNewProto* other);

  // implements Message ----------------------------------------------

  RedNewProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedNewProto& from);
  void MergeFrom(const RedNewProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // optional uint32 cfgid = 2;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 2;
  inline ::google::protobuf::uint32 cfgid() const;
  inline void set_cfgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.RedNewProto)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;
  ::google::protobuf::uint32 cfgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedNewProto* default_instance_;
};
// -------------------------------------------------------------------

class RedNewListProto : public ::google::protobuf::Message {
 public:
  RedNewListProto();
  virtual ~RedNewListProto();

  RedNewListProto(const RedNewListProto& from);

  inline RedNewListProto& operator=(const RedNewListProto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RedNewListProto& default_instance();

  void Swap(RedNewListProto* other);

  // implements Message ----------------------------------------------

  RedNewListProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedNewListProto& from);
  void MergeFrom(const RedNewListProto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.RedNewProto info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::proto_ff::RedNewProto& info(int index) const;
  inline ::proto_ff::RedNewProto* mutable_info(int index);
  inline ::proto_ff::RedNewProto* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedNewProto >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedNewProto >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:proto_ff.RedNewListProto)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::RedNewProto > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static RedNewListProto* default_instance_;
};
// -------------------------------------------------------------------

class Red_LoginSyncInfoRsp : public ::google::protobuf::Message {
 public:
  Red_LoginSyncInfoRsp();
  virtual ~Red_LoginSyncInfoRsp();

  Red_LoginSyncInfoRsp(const Red_LoginSyncInfoRsp& from);

  inline Red_LoginSyncInfoRsp& operator=(const Red_LoginSyncInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_LoginSyncInfoRsp& default_instance();

  void Swap(Red_LoginSyncInfoRsp* other);

  // implements Message ----------------------------------------------

  Red_LoginSyncInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_LoginSyncInfoRsp& from);
  void MergeFrom(const Red_LoginSyncInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bdia = 1;
  inline bool has_bdia() const;
  inline void clear_bdia();
  static const int kBdiaFieldNumber = 1;
  inline ::google::protobuf::uint32 bdia() const;
  inline void set_bdia(::google::protobuf::uint32 value);

  // optional uint32 magic = 2;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 2;
  inline ::google::protobuf::uint32 magic() const;
  inline void set_magic(::google::protobuf::uint32 value);

  // optional uint32 today_num = 3;
  inline bool has_today_num() const;
  inline void clear_today_num();
  static const int kTodayNumFieldNumber = 3;
  inline ::google::protobuf::uint32 today_num() const;
  inline void set_today_num(::google::protobuf::uint32 value);

  // optional uint32 today_magic = 4;
  inline bool has_today_magic() const;
  inline void clear_today_magic();
  static const int kTodayMagicFieldNumber = 4;
  inline ::google::protobuf::uint32 today_magic() const;
  inline void set_today_magic(::google::protobuf::uint32 value);

  // optional uint32 today_bdia = 5;
  inline bool has_today_bdia() const;
  inline void clear_today_bdia();
  static const int kTodayBdiaFieldNumber = 5;
  inline ::google::protobuf::uint32 today_bdia() const;
  inline void set_today_bdia(::google::protobuf::uint32 value);

  // optional .proto_ff.RedWaitListProto wait = 6;
  inline bool has_wait() const;
  inline void clear_wait();
  static const int kWaitFieldNumber = 6;
  inline const ::proto_ff::RedWaitListProto& wait() const;
  inline ::proto_ff::RedWaitListProto* mutable_wait();
  inline ::proto_ff::RedWaitListProto* release_wait();
  inline void set_allocated_wait(::proto_ff::RedWaitListProto* wait);

  // optional .proto_ff.RedNewListProto fetch = 7;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 7;
  inline const ::proto_ff::RedNewListProto& fetch() const;
  inline ::proto_ff::RedNewListProto* mutable_fetch();
  inline ::proto_ff::RedNewListProto* release_fetch();
  inline void set_allocated_fetch(::proto_ff::RedNewListProto* fetch);

  // repeated int32 cfgid_lst = 8;
  inline int cfgid_lst_size() const;
  inline void clear_cfgid_lst();
  static const int kCfgidLstFieldNumber = 8;
  inline ::google::protobuf::int32 cfgid_lst(int index) const;
  inline void set_cfgid_lst(int index, ::google::protobuf::int32 value);
  inline void add_cfgid_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cfgid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cfgid_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Red_LoginSyncInfoRsp)
 private:
  inline void set_has_bdia();
  inline void clear_has_bdia();
  inline void set_has_magic();
  inline void clear_has_magic();
  inline void set_has_today_num();
  inline void clear_has_today_num();
  inline void set_has_today_magic();
  inline void clear_has_today_magic();
  inline void set_has_today_bdia();
  inline void clear_has_today_bdia();
  inline void set_has_wait();
  inline void clear_has_wait();
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bdia_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 today_num_;
  ::google::protobuf::uint32 today_magic_;
  ::proto_ff::RedWaitListProto* wait_;
  ::proto_ff::RedNewListProto* fetch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cfgid_lst_;
  ::google::protobuf::uint32 today_bdia_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_LoginSyncInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_UpdateRoleRsp : public ::google::protobuf::Message {
 public:
  Red_UpdateRoleRsp();
  virtual ~Red_UpdateRoleRsp();

  Red_UpdateRoleRsp(const Red_UpdateRoleRsp& from);

  inline Red_UpdateRoleRsp& operator=(const Red_UpdateRoleRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_UpdateRoleRsp& default_instance();

  void Swap(Red_UpdateRoleRsp* other);

  // implements Message ----------------------------------------------

  Red_UpdateRoleRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_UpdateRoleRsp& from);
  void MergeFrom(const Red_UpdateRoleRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bdia = 1;
  inline bool has_bdia() const;
  inline void clear_bdia();
  static const int kBdiaFieldNumber = 1;
  inline ::google::protobuf::uint32 bdia() const;
  inline void set_bdia(::google::protobuf::uint32 value);

  // optional uint32 magic = 2;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 2;
  inline ::google::protobuf::uint32 magic() const;
  inline void set_magic(::google::protobuf::uint32 value);

  // optional uint32 today_num = 3;
  inline bool has_today_num() const;
  inline void clear_today_num();
  static const int kTodayNumFieldNumber = 3;
  inline ::google::protobuf::uint32 today_num() const;
  inline void set_today_num(::google::protobuf::uint32 value);

  // optional uint32 today_magic = 4;
  inline bool has_today_magic() const;
  inline void clear_today_magic();
  static const int kTodayMagicFieldNumber = 4;
  inline ::google::protobuf::uint32 today_magic() const;
  inline void set_today_magic(::google::protobuf::uint32 value);

  // optional uint32 today_bdia = 5;
  inline bool has_today_bdia() const;
  inline void clear_today_bdia();
  static const int kTodayBdiaFieldNumber = 5;
  inline ::google::protobuf::uint32 today_bdia() const;
  inline void set_today_bdia(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_UpdateRoleRsp)
 private:
  inline void set_has_bdia();
  inline void clear_has_bdia();
  inline void set_has_magic();
  inline void clear_has_magic();
  inline void set_has_today_num();
  inline void clear_has_today_num();
  inline void set_has_today_magic();
  inline void clear_has_today_magic();
  inline void set_has_today_bdia();
  inline void clear_has_today_bdia();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bdia_;
  ::google::protobuf::uint32 magic_;
  ::google::protobuf::uint32 today_num_;
  ::google::protobuf::uint32 today_magic_;
  ::google::protobuf::uint32 today_bdia_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_UpdateRoleRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_UpdateRoleWaitRsp : public ::google::protobuf::Message {
 public:
  Red_UpdateRoleWaitRsp();
  virtual ~Red_UpdateRoleWaitRsp();

  Red_UpdateRoleWaitRsp(const Red_UpdateRoleWaitRsp& from);

  inline Red_UpdateRoleWaitRsp& operator=(const Red_UpdateRoleWaitRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_UpdateRoleWaitRsp& default_instance();

  void Swap(Red_UpdateRoleWaitRsp* other);

  // implements Message ----------------------------------------------

  Red_UpdateRoleWaitRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_UpdateRoleWaitRsp& from);
  void MergeFrom(const Red_UpdateRoleWaitRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.RedWaitListProto wait = 1;
  inline bool has_wait() const;
  inline void clear_wait();
  static const int kWaitFieldNumber = 1;
  inline const ::proto_ff::RedWaitListProto& wait() const;
  inline ::proto_ff::RedWaitListProto* mutable_wait();
  inline ::proto_ff::RedWaitListProto* release_wait();
  inline void set_allocated_wait(::proto_ff::RedWaitListProto* wait);

  // repeated uint32 del_lst = 2;
  inline int del_lst_size() const;
  inline void clear_del_lst();
  static const int kDelLstFieldNumber = 2;
  inline ::google::protobuf::uint32 del_lst(int index) const;
  inline void set_del_lst(int index, ::google::protobuf::uint32 value);
  inline void add_del_lst(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      del_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_del_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Red_UpdateRoleWaitRsp)
 private:
  inline void set_has_wait();
  inline void clear_has_wait();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RedWaitListProto* wait_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > del_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_UpdateRoleWaitRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_NewRedNotify : public ::google::protobuf::Message {
 public:
  Red_NewRedNotify();
  virtual ~Red_NewRedNotify();

  Red_NewRedNotify(const Red_NewRedNotify& from);

  inline Red_NewRedNotify& operator=(const Red_NewRedNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_NewRedNotify& default_instance();

  void Swap(Red_NewRedNotify* other);

  // implements Message ----------------------------------------------

  Red_NewRedNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_NewRedNotify& from);
  void MergeFrom(const Red_NewRedNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .proto_ff.RedNewListProto fetch = 1;
  inline bool has_fetch() const;
  inline void clear_fetch();
  static const int kFetchFieldNumber = 1;
  inline const ::proto_ff::RedNewListProto& fetch() const;
  inline ::proto_ff::RedNewListProto* mutable_fetch();
  inline ::proto_ff::RedNewListProto* release_fetch();
  inline void set_allocated_fetch(::proto_ff::RedNewListProto* fetch);

  // repeated uint32 del_lst = 2;
  inline int del_lst_size() const;
  inline void clear_del_lst();
  static const int kDelLstFieldNumber = 2;
  inline ::google::protobuf::uint32 del_lst(int index) const;
  inline void set_del_lst(int index, ::google::protobuf::uint32 value);
  inline void add_del_lst(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      del_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_del_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Red_NewRedNotify)
 private:
  inline void set_has_fetch();
  inline void clear_has_fetch();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RedNewListProto* fetch_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > del_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_NewRedNotify* default_instance_;
};
// -------------------------------------------------------------------

class Red_SimpleListReq : public ::google::protobuf::Message {
 public:
  Red_SimpleListReq();
  virtual ~Red_SimpleListReq();

  Red_SimpleListReq(const Red_SimpleListReq& from);

  inline Red_SimpleListReq& operator=(const Red_SimpleListReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_SimpleListReq& default_instance();

  void Swap(Red_SimpleListReq* other);

  // implements Message ----------------------------------------------

  Red_SimpleListReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_SimpleListReq& from);
  void MergeFrom(const Red_SimpleListReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_SimpleListReq)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_SimpleListReq* default_instance_;
};
// -------------------------------------------------------------------

class Red_SimpleListRsp : public ::google::protobuf::Message {
 public:
  Red_SimpleListRsp();
  virtual ~Red_SimpleListRsp();

  Red_SimpleListRsp(const Red_SimpleListRsp& from);

  inline Red_SimpleListRsp& operator=(const Red_SimpleListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_SimpleListRsp& default_instance();

  void Swap(Red_SimpleListRsp* other);

  // implements Message ----------------------------------------------

  Red_SimpleListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_SimpleListRsp& from);
  void MergeFrom(const Red_SimpleListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .proto_ff.RedSimpleListProto simple = 3;
  inline bool has_simple() const;
  inline void clear_simple();
  static const int kSimpleFieldNumber = 3;
  inline const ::proto_ff::RedSimpleListProto& simple() const;
  inline ::proto_ff::RedSimpleListProto* mutable_simple();
  inline ::proto_ff::RedSimpleListProto* release_simple();
  inline void set_allocated_simple(::proto_ff::RedSimpleListProto* simple);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_SimpleListRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_simple();
  inline void clear_has_simple();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 type_;
  ::proto_ff::RedSimpleListProto* simple_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_SimpleListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_DetailReq : public ::google::protobuf::Message {
 public:
  Red_DetailReq();
  virtual ~Red_DetailReq();

  Red_DetailReq(const Red_DetailReq& from);

  inline Red_DetailReq& operator=(const Red_DetailReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_DetailReq& default_instance();

  void Swap(Red_DetailReq* other);

  // implements Message ----------------------------------------------

  Red_DetailReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_DetailReq& from);
  void MergeFrom(const Red_DetailReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_DetailReq)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_DetailReq* default_instance_;
};
// -------------------------------------------------------------------

class Red_DetailRsp : public ::google::protobuf::Message {
 public:
  Red_DetailRsp();
  virtual ~Red_DetailRsp();

  Red_DetailRsp(const Red_DetailRsp& from);

  inline Red_DetailRsp& operator=(const Red_DetailRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_DetailRsp& default_instance();

  void Swap(Red_DetailRsp* other);

  // implements Message ----------------------------------------------

  Red_DetailRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_DetailRsp& from);
  void MergeFrom(const Red_DetailRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.RedDetailProto detail = 2;
  inline bool has_detail() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 2;
  inline const ::proto_ff::RedDetailProto& detail() const;
  inline ::proto_ff::RedDetailProto* mutable_detail();
  inline ::proto_ff::RedDetailProto* release_detail();
  inline void set_allocated_detail(::proto_ff::RedDetailProto* detail);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_DetailRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_detail();
  inline void clear_has_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RedDetailProto* detail_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_DetailRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_FetchReq : public ::google::protobuf::Message {
 public:
  Red_FetchReq();
  virtual ~Red_FetchReq();

  Red_FetchReq(const Red_FetchReq& from);

  inline Red_FetchReq& operator=(const Red_FetchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_FetchReq& default_instance();

  void Swap(Red_FetchReq* other);

  // implements Message ----------------------------------------------

  Red_FetchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_FetchReq& from);
  void MergeFrom(const Red_FetchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_FetchReq)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_FetchReq* default_instance_;
};
// -------------------------------------------------------------------

class Red_FetchRsp : public ::google::protobuf::Message {
 public:
  Red_FetchRsp();
  virtual ~Red_FetchRsp();

  Red_FetchRsp(const Red_FetchRsp& from);

  inline Red_FetchRsp& operator=(const Red_FetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_FetchRsp& default_instance();

  void Swap(Red_FetchRsp* other);

  // implements Message ----------------------------------------------

  Red_FetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_FetchRsp& from);
  void MergeFrom(const Red_FetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.RedDetailProto detail = 2;
  inline bool has_detail() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 2;
  inline const ::proto_ff::RedDetailProto& detail() const;
  inline ::proto_ff::RedDetailProto* mutable_detail();
  inline ::proto_ff::RedDetailProto* release_detail();
  inline void set_allocated_detail(::proto_ff::RedDetailProto* detail);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_FetchRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_detail();
  inline void clear_has_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RedDetailProto* detail_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_FetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_SendReq : public ::google::protobuf::Message {
 public:
  Red_SendReq();
  virtual ~Red_SendReq();

  Red_SendReq(const Red_SendReq& from);

  inline Red_SendReq& operator=(const Red_SendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_SendReq& default_instance();

  void Swap(Red_SendReq* other);

  // implements Message ----------------------------------------------

  Red_SendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_SendReq& from);
  void MergeFrom(const Red_SendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 idx = 1;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 1;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // optional uint32 cfgid = 2;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 2;
  inline ::google::protobuf::uint32 cfgid() const;
  inline void set_cfgid(::google::protobuf::uint32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bytes word = 4;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 4;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const void* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_SendReq)
 private:
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_word();
  inline void clear_has_word();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 idx_;
  ::google::protobuf::uint32 cfgid_;
  ::std::string* word_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_SendReq* default_instance_;
};
// -------------------------------------------------------------------

class Red_SendRsp : public ::google::protobuf::Message {
 public:
  Red_SendRsp();
  virtual ~Red_SendRsp();

  Red_SendRsp(const Red_SendRsp& from);

  inline Red_SendRsp& operator=(const Red_SendRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_SendRsp& default_instance();

  void Swap(Red_SendRsp* other);

  // implements Message ----------------------------------------------

  Red_SendRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_SendRsp& from);
  void MergeFrom(const Red_SendRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .proto_ff.RedDetailProto detail = 2;
  inline bool has_detail() const;
  inline void clear_detail();
  static const int kDetailFieldNumber = 2;
  inline const ::proto_ff::RedDetailProto& detail() const;
  inline ::proto_ff::RedDetailProto* mutable_detail();
  inline ::proto_ff::RedDetailProto* release_detail();
  inline void set_allocated_detail(::proto_ff::RedDetailProto* detail);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_SendRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_detail();
  inline void clear_has_detail();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::proto_ff::RedDetailProto* detail_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_SendRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_FetchExtraReq : public ::google::protobuf::Message {
 public:
  Red_FetchExtraReq();
  virtual ~Red_FetchExtraReq();

  Red_FetchExtraReq(const Red_FetchExtraReq& from);

  inline Red_FetchExtraReq& operator=(const Red_FetchExtraReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_FetchExtraReq& default_instance();

  void Swap(Red_FetchExtraReq* other);

  // implements Message ----------------------------------------------

  Red_FetchExtraReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_FetchExtraReq& from);
  void MergeFrom(const Red_FetchExtraReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:proto_ff.Red_FetchExtraReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_FetchExtraReq* default_instance_;
};
// -------------------------------------------------------------------

class Red_FetchExtraRsp : public ::google::protobuf::Message {
 public:
  Red_FetchExtraRsp();
  virtual ~Red_FetchExtraRsp();

  Red_FetchExtraRsp(const Red_FetchExtraRsp& from);

  inline Red_FetchExtraRsp& operator=(const Red_FetchExtraRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_FetchExtraRsp& default_instance();

  void Swap(Red_FetchExtraRsp* other);

  // implements Message ----------------------------------------------

  Red_FetchExtraRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_FetchExtraRsp& from);
  void MergeFrom(const Red_FetchExtraRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_FetchExtraRsp)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_FetchExtraRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_UpdateSendListRsp : public ::google::protobuf::Message {
 public:
  Red_UpdateSendListRsp();
  virtual ~Red_UpdateSendListRsp();

  Red_UpdateSendListRsp(const Red_UpdateSendListRsp& from);

  inline Red_UpdateSendListRsp& operator=(const Red_UpdateSendListRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_UpdateSendListRsp& default_instance();

  void Swap(Red_UpdateSendListRsp* other);

  // implements Message ----------------------------------------------

  Red_UpdateSendListRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_UpdateSendListRsp& from);
  void MergeFrom(const Red_UpdateSendListRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 cfgid_lst = 1;
  inline int cfgid_lst_size() const;
  inline void clear_cfgid_lst();
  static const int kCfgidLstFieldNumber = 1;
  inline ::google::protobuf::int32 cfgid_lst(int index) const;
  inline void set_cfgid_lst(int index, ::google::protobuf::int32 value);
  inline void add_cfgid_lst(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      cfgid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_cfgid_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Red_UpdateSendListRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > cfgid_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_UpdateSendListRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_LCSendReq : public ::google::protobuf::Message {
 public:
  Red_LCSendReq();
  virtual ~Red_LCSendReq();

  Red_LCSendReq(const Red_LCSendReq& from);

  inline Red_LCSendReq& operator=(const Red_LCSendReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_LCSendReq& default_instance();

  void Swap(Red_LCSendReq* other);

  // implements Message ----------------------------------------------

  Red_LCSendReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_LCSendReq& from);
  void MergeFrom(const Red_LCSendReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 idx = 2;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 2;
  inline ::google::protobuf::uint32 idx() const;
  inline void set_idx(::google::protobuf::uint32 value);

  // optional uint32 cfgid = 3;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 3;
  inline ::google::protobuf::uint32 cfgid() const;
  inline void set_cfgid(::google::protobuf::uint32 value);

  // optional bytes word = 4;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 4;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const void* value, size_t size);
  inline ::std::string* mutable_word();
  inline ::std::string* release_word();
  inline void set_allocated_word(::std::string* word);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_LCSendReq)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_idx();
  inline void clear_has_idx();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();
  inline void set_has_word();
  inline void clear_has_word();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 idx_;
  ::google::protobuf::uint32 cfgid_;
  ::std::string* word_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_LCSendReq* default_instance_;
};
// -------------------------------------------------------------------

class Red_CLFetchRsp : public ::google::protobuf::Message {
 public:
  Red_CLFetchRsp();
  virtual ~Red_CLFetchRsp();

  Red_CLFetchRsp(const Red_CLFetchRsp& from);

  inline Red_CLFetchRsp& operator=(const Red_CLFetchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_CLFetchRsp& default_instance();

  void Swap(Red_CLFetchRsp* other);

  // implements Message ----------------------------------------------

  Red_CLFetchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_CLFetchRsp& from);
  void MergeFrom(const Red_CLFetchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional int64 bdia = 2;
  inline bool has_bdia() const;
  inline void clear_bdia();
  static const int kBdiaFieldNumber = 2;
  inline ::google::protobuf::int64 bdia() const;
  inline void set_bdia(::google::protobuf::int64 value);

  // optional int64 magic = 3;
  inline bool has_magic() const;
  inline void clear_magic();
  static const int kMagicFieldNumber = 3;
  inline ::google::protobuf::int64 magic() const;
  inline void set_magic(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_CLFetchRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_bdia();
  inline void clear_has_bdia();
  inline void set_has_magic();
  inline void clear_has_magic();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::int64 bdia_;
  ::google::protobuf::int64 magic_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_CLFetchRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_CLSendFailRsp : public ::google::protobuf::Message {
 public:
  Red_CLSendFailRsp();
  virtual ~Red_CLSendFailRsp();

  Red_CLSendFailRsp(const Red_CLSendFailRsp& from);

  inline Red_CLSendFailRsp& operator=(const Red_CLSendFailRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_CLSendFailRsp& default_instance();

  void Swap(Red_CLSendFailRsp* other);

  // implements Message ----------------------------------------------

  Red_CLSendFailRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_CLSendFailRsp& from);
  void MergeFrom(const Red_CLSendFailRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // optional uint32 cfgid = 2;
  inline bool has_cfgid() const;
  inline void clear_cfgid();
  static const int kCfgidFieldNumber = 2;
  inline ::google::protobuf::uint32 cfgid() const;
  inline void set_cfgid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.Red_CLSendFailRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_cfgid();
  inline void clear_has_cfgid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::uint32 cfgid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_CLSendFailRsp* default_instance_;
};
// -------------------------------------------------------------------

class Red_LCRechargeRsp : public ::google::protobuf::Message {
 public:
  Red_LCRechargeRsp();
  virtual ~Red_LCRechargeRsp();

  Red_LCRechargeRsp(const Red_LCRechargeRsp& from);

  inline Red_LCRechargeRsp& operator=(const Red_LCRechargeRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Red_LCRechargeRsp& default_instance();

  void Swap(Red_LCRechargeRsp* other);

  // implements Message ----------------------------------------------

  Red_LCRechargeRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Red_LCRechargeRsp& from);
  void MergeFrom(const Red_LCRechargeRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 cid = 1;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 1;
  inline ::google::protobuf::uint64 cid() const;
  inline void set_cid(::google::protobuf::uint64 value);

  // repeated uint32 cfgid_lst = 2;
  inline int cfgid_lst_size() const;
  inline void clear_cfgid_lst();
  static const int kCfgidLstFieldNumber = 2;
  inline ::google::protobuf::uint32 cfgid_lst(int index) const;
  inline void set_cfgid_lst(int index, ::google::protobuf::uint32 value);
  inline void add_cfgid_lst(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cfgid_lst() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cfgid_lst();

  // @@protoc_insertion_point(class_scope:proto_ff.Red_LCRechargeRsp)
 private:
  inline void set_has_cid();
  inline void clear_has_cid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 cid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cfgid_lst_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Red_2eproto();
  friend void protobuf_AssignDesc_Red_2eproto();
  friend void protobuf_ShutdownFile_Red_2eproto();

  void InitAsDefaultInstance();
  static Red_LCRechargeRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// RedFetchProto

// optional uint64 cid = 1;
inline bool RedFetchProto::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedFetchProto::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedFetchProto::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedFetchProto::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 RedFetchProto::cid() const {
  return cid_;
}
inline void RedFetchProto::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional bytes name = 2;
inline bool RedFetchProto::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedFetchProto::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedFetchProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedFetchProto::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RedFetchProto::name() const {
  return *name_;
}
inline void RedFetchProto::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RedFetchProto::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RedFetchProto::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedFetchProto::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RedFetchProto::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RedFetchProto::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prof = 3;
inline bool RedFetchProto::has_prof() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedFetchProto::set_has_prof() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedFetchProto::clear_has_prof() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedFetchProto::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 RedFetchProto::prof() const {
  return prof_;
}
inline void RedFetchProto::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional uint32 val = 4;
inline bool RedFetchProto::has_val() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RedFetchProto::set_has_val() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RedFetchProto::clear_has_val() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RedFetchProto::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 RedFetchProto::val() const {
  return val_;
}
inline void RedFetchProto::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// optional uint64 time = 5;
inline bool RedFetchProto::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RedFetchProto::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RedFetchProto::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RedFetchProto::clear_time() {
  time_ = GOOGLE_ULONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::uint64 RedFetchProto::time() const {
  return time_;
}
inline void RedFetchProto::set_time(::google::protobuf::uint64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// RedFetchListProto

// repeated .proto_ff.RedFetchProto info = 1;
inline int RedFetchListProto::info_size() const {
  return info_.size();
}
inline void RedFetchListProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::RedFetchProto& RedFetchListProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::RedFetchProto* RedFetchListProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::RedFetchProto* RedFetchListProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchProto >&
RedFetchListProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedFetchProto >*
RedFetchListProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// RedDetailProto

// optional uint32 idx = 1;
inline bool RedDetailProto::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedDetailProto::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedDetailProto::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedDetailProto::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 RedDetailProto::idx() const {
  return idx_;
}
inline void RedDetailProto::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// optional uint32 cfgid = 2;
inline bool RedDetailProto::has_cfgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedDetailProto::set_has_cfgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedDetailProto::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedDetailProto::clear_cfgid() {
  cfgid_ = 0u;
  clear_has_cfgid();
}
inline ::google::protobuf::uint32 RedDetailProto::cfgid() const {
  return cfgid_;
}
inline void RedDetailProto::set_cfgid(::google::protobuf::uint32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// optional uint64 sendcid = 3;
inline bool RedDetailProto::has_sendcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedDetailProto::set_has_sendcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedDetailProto::clear_has_sendcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedDetailProto::clear_sendcid() {
  sendcid_ = GOOGLE_ULONGLONG(0);
  clear_has_sendcid();
}
inline ::google::protobuf::uint64 RedDetailProto::sendcid() const {
  return sendcid_;
}
inline void RedDetailProto::set_sendcid(::google::protobuf::uint64 value) {
  set_has_sendcid();
  sendcid_ = value;
}

// optional bytes sendname = 4;
inline bool RedDetailProto::has_sendname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RedDetailProto::set_has_sendname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RedDetailProto::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RedDetailProto::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& RedDetailProto::sendname() const {
  return *sendname_;
}
inline void RedDetailProto::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void RedDetailProto::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void RedDetailProto::set_sendname(const void* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedDetailProto::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  return sendname_;
}
inline ::std::string* RedDetailProto::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RedDetailProto::set_allocated_sendname(::std::string* sendname) {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (sendname) {
    set_has_sendname();
    sendname_ = sendname;
  } else {
    clear_has_sendname();
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prof = 5;
inline bool RedDetailProto::has_prof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RedDetailProto::set_has_prof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RedDetailProto::clear_has_prof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RedDetailProto::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 RedDetailProto::prof() const {
  return prof_;
}
inline void RedDetailProto::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional uint64 sendtime = 6;
inline bool RedDetailProto::has_sendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RedDetailProto::set_has_sendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RedDetailProto::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RedDetailProto::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::uint64 RedDetailProto::sendtime() const {
  return sendtime_;
}
inline void RedDetailProto::set_sendtime(::google::protobuf::uint64 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// optional bytes word = 7;
inline bool RedDetailProto::has_word() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RedDetailProto::set_has_word() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RedDetailProto::clear_has_word() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RedDetailProto::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& RedDetailProto::word() const {
  return *word_;
}
inline void RedDetailProto::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void RedDetailProto::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void RedDetailProto::set_word(const void* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedDetailProto::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* RedDetailProto::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RedDetailProto::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .proto_ff.RedFetchListProto fetch = 8;
inline bool RedDetailProto::has_fetch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RedDetailProto::set_has_fetch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RedDetailProto::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RedDetailProto::clear_fetch() {
  if (fetch_ != NULL) fetch_->::proto_ff::RedFetchListProto::Clear();
  clear_has_fetch();
}
inline const ::proto_ff::RedFetchListProto& RedDetailProto::fetch() const {
  return fetch_ != NULL ? *fetch_ : *default_instance_->fetch_;
}
inline ::proto_ff::RedFetchListProto* RedDetailProto::mutable_fetch() {
  set_has_fetch();
  if (fetch_ == NULL) fetch_ = new ::proto_ff::RedFetchListProto;
  return fetch_;
}
inline ::proto_ff::RedFetchListProto* RedDetailProto::release_fetch() {
  clear_has_fetch();
  ::proto_ff::RedFetchListProto* temp = fetch_;
  fetch_ = NULL;
  return temp;
}
inline void RedDetailProto::set_allocated_fetch(::proto_ff::RedFetchListProto* fetch) {
  delete fetch_;
  fetch_ = fetch;
  if (fetch) {
    set_has_fetch();
  } else {
    clear_has_fetch();
  }
}

// -------------------------------------------------------------------

// RedListProto

// repeated .proto_ff.RedDetailProto info = 1;
inline int RedListProto::info_size() const {
  return info_.size();
}
inline void RedListProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::RedDetailProto& RedListProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::RedDetailProto* RedListProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::RedDetailProto* RedListProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDetailProto >&
RedListProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedDetailProto >*
RedListProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// RedSimpleProto

// optional uint32 idx = 1;
inline bool RedSimpleProto::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedSimpleProto::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedSimpleProto::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedSimpleProto::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 RedSimpleProto::idx() const {
  return idx_;
}
inline void RedSimpleProto::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// optional uint32 cfgid = 2;
inline bool RedSimpleProto::has_cfgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedSimpleProto::set_has_cfgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedSimpleProto::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedSimpleProto::clear_cfgid() {
  cfgid_ = 0u;
  clear_has_cfgid();
}
inline ::google::protobuf::uint32 RedSimpleProto::cfgid() const {
  return cfgid_;
}
inline void RedSimpleProto::set_cfgid(::google::protobuf::uint32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// optional uint64 sendcid = 3;
inline bool RedSimpleProto::has_sendcid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedSimpleProto::set_has_sendcid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedSimpleProto::clear_has_sendcid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedSimpleProto::clear_sendcid() {
  sendcid_ = GOOGLE_ULONGLONG(0);
  clear_has_sendcid();
}
inline ::google::protobuf::uint64 RedSimpleProto::sendcid() const {
  return sendcid_;
}
inline void RedSimpleProto::set_sendcid(::google::protobuf::uint64 value) {
  set_has_sendcid();
  sendcid_ = value;
}

// optional bytes sendname = 4;
inline bool RedSimpleProto::has_sendname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RedSimpleProto::set_has_sendname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RedSimpleProto::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RedSimpleProto::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& RedSimpleProto::sendname() const {
  return *sendname_;
}
inline void RedSimpleProto::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void RedSimpleProto::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void RedSimpleProto::set_sendname(const void* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedSimpleProto::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  return sendname_;
}
inline ::std::string* RedSimpleProto::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RedSimpleProto::set_allocated_sendname(::std::string* sendname) {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (sendname) {
    set_has_sendname();
    sendname_ = sendname;
  } else {
    clear_has_sendname();
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 prof = 5;
inline bool RedSimpleProto::has_prof() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RedSimpleProto::set_has_prof() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RedSimpleProto::clear_has_prof() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RedSimpleProto::clear_prof() {
  prof_ = 0;
  clear_has_prof();
}
inline ::google::protobuf::int32 RedSimpleProto::prof() const {
  return prof_;
}
inline void RedSimpleProto::set_prof(::google::protobuf::int32 value) {
  set_has_prof();
  prof_ = value;
}

// optional uint64 sendtime = 6;
inline bool RedSimpleProto::has_sendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RedSimpleProto::set_has_sendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RedSimpleProto::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RedSimpleProto::clear_sendtime() {
  sendtime_ = GOOGLE_ULONGLONG(0);
  clear_has_sendtime();
}
inline ::google::protobuf::uint64 RedSimpleProto::sendtime() const {
  return sendtime_;
}
inline void RedSimpleProto::set_sendtime(::google::protobuf::uint64 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// optional bytes word = 7;
inline bool RedSimpleProto::has_word() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RedSimpleProto::set_has_word() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RedSimpleProto::clear_has_word() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RedSimpleProto::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& RedSimpleProto::word() const {
  return *word_;
}
inline void RedSimpleProto::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void RedSimpleProto::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void RedSimpleProto::set_word(const void* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedSimpleProto::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* RedSimpleProto::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RedSimpleProto::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 8;
inline bool RedSimpleProto::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RedSimpleProto::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RedSimpleProto::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RedSimpleProto::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 RedSimpleProto::state() const {
  return state_;
}
inline void RedSimpleProto::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// RedSimpleListProto

// repeated .proto_ff.RedSimpleProto info = 1;
inline int RedSimpleListProto::info_size() const {
  return info_.size();
}
inline void RedSimpleListProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::RedSimpleProto& RedSimpleListProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::RedSimpleProto* RedSimpleListProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::RedSimpleProto* RedSimpleListProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSimpleProto >&
RedSimpleListProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedSimpleProto >*
RedSimpleListProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// RedWaitProto

// optional uint32 idx = 1;
inline bool RedWaitProto::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedWaitProto::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedWaitProto::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedWaitProto::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 RedWaitProto::idx() const {
  return idx_;
}
inline void RedWaitProto::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// optional uint32 cfgid = 2;
inline bool RedWaitProto::has_cfgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedWaitProto::set_has_cfgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedWaitProto::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedWaitProto::clear_cfgid() {
  cfgid_ = 0u;
  clear_has_cfgid();
}
inline ::google::protobuf::uint32 RedWaitProto::cfgid() const {
  return cfgid_;
}
inline void RedWaitProto::set_cfgid(::google::protobuf::uint32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// -------------------------------------------------------------------

// RedWaitListProto

// repeated .proto_ff.RedWaitProto info = 1;
inline int RedWaitListProto::info_size() const {
  return info_.size();
}
inline void RedWaitListProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::RedWaitProto& RedWaitListProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::RedWaitProto* RedWaitListProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::RedWaitProto* RedWaitListProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitProto >&
RedWaitListProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedWaitProto >*
RedWaitListProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// RedNewProto

// optional uint32 idx = 1;
inline bool RedNewProto::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedNewProto::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedNewProto::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedNewProto::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 RedNewProto::idx() const {
  return idx_;
}
inline void RedNewProto::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// optional uint32 cfgid = 2;
inline bool RedNewProto::has_cfgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedNewProto::set_has_cfgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedNewProto::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedNewProto::clear_cfgid() {
  cfgid_ = 0u;
  clear_has_cfgid();
}
inline ::google::protobuf::uint32 RedNewProto::cfgid() const {
  return cfgid_;
}
inline void RedNewProto::set_cfgid(::google::protobuf::uint32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// -------------------------------------------------------------------

// RedNewListProto

// repeated .proto_ff.RedNewProto info = 1;
inline int RedNewListProto::info_size() const {
  return info_.size();
}
inline void RedNewListProto::clear_info() {
  info_.Clear();
}
inline const ::proto_ff::RedNewProto& RedNewListProto::info(int index) const {
  return info_.Get(index);
}
inline ::proto_ff::RedNewProto* RedNewListProto::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::proto_ff::RedNewProto* RedNewListProto::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::RedNewProto >&
RedNewListProto::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::RedNewProto >*
RedNewListProto::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// Red_LoginSyncInfoRsp

// optional uint32 bdia = 1;
inline bool Red_LoginSyncInfoRsp::has_bdia() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_LoginSyncInfoRsp::set_has_bdia() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_LoginSyncInfoRsp::clear_has_bdia() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_LoginSyncInfoRsp::clear_bdia() {
  bdia_ = 0u;
  clear_has_bdia();
}
inline ::google::protobuf::uint32 Red_LoginSyncInfoRsp::bdia() const {
  return bdia_;
}
inline void Red_LoginSyncInfoRsp::set_bdia(::google::protobuf::uint32 value) {
  set_has_bdia();
  bdia_ = value;
}

// optional uint32 magic = 2;
inline bool Red_LoginSyncInfoRsp::has_magic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_LoginSyncInfoRsp::set_has_magic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_LoginSyncInfoRsp::clear_has_magic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_LoginSyncInfoRsp::clear_magic() {
  magic_ = 0u;
  clear_has_magic();
}
inline ::google::protobuf::uint32 Red_LoginSyncInfoRsp::magic() const {
  return magic_;
}
inline void Red_LoginSyncInfoRsp::set_magic(::google::protobuf::uint32 value) {
  set_has_magic();
  magic_ = value;
}

// optional uint32 today_num = 3;
inline bool Red_LoginSyncInfoRsp::has_today_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Red_LoginSyncInfoRsp::set_has_today_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Red_LoginSyncInfoRsp::clear_has_today_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Red_LoginSyncInfoRsp::clear_today_num() {
  today_num_ = 0u;
  clear_has_today_num();
}
inline ::google::protobuf::uint32 Red_LoginSyncInfoRsp::today_num() const {
  return today_num_;
}
inline void Red_LoginSyncInfoRsp::set_today_num(::google::protobuf::uint32 value) {
  set_has_today_num();
  today_num_ = value;
}

// optional uint32 today_magic = 4;
inline bool Red_LoginSyncInfoRsp::has_today_magic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Red_LoginSyncInfoRsp::set_has_today_magic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Red_LoginSyncInfoRsp::clear_has_today_magic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Red_LoginSyncInfoRsp::clear_today_magic() {
  today_magic_ = 0u;
  clear_has_today_magic();
}
inline ::google::protobuf::uint32 Red_LoginSyncInfoRsp::today_magic() const {
  return today_magic_;
}
inline void Red_LoginSyncInfoRsp::set_today_magic(::google::protobuf::uint32 value) {
  set_has_today_magic();
  today_magic_ = value;
}

// optional uint32 today_bdia = 5;
inline bool Red_LoginSyncInfoRsp::has_today_bdia() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Red_LoginSyncInfoRsp::set_has_today_bdia() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Red_LoginSyncInfoRsp::clear_has_today_bdia() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Red_LoginSyncInfoRsp::clear_today_bdia() {
  today_bdia_ = 0u;
  clear_has_today_bdia();
}
inline ::google::protobuf::uint32 Red_LoginSyncInfoRsp::today_bdia() const {
  return today_bdia_;
}
inline void Red_LoginSyncInfoRsp::set_today_bdia(::google::protobuf::uint32 value) {
  set_has_today_bdia();
  today_bdia_ = value;
}

// optional .proto_ff.RedWaitListProto wait = 6;
inline bool Red_LoginSyncInfoRsp::has_wait() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Red_LoginSyncInfoRsp::set_has_wait() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Red_LoginSyncInfoRsp::clear_has_wait() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Red_LoginSyncInfoRsp::clear_wait() {
  if (wait_ != NULL) wait_->::proto_ff::RedWaitListProto::Clear();
  clear_has_wait();
}
inline const ::proto_ff::RedWaitListProto& Red_LoginSyncInfoRsp::wait() const {
  return wait_ != NULL ? *wait_ : *default_instance_->wait_;
}
inline ::proto_ff::RedWaitListProto* Red_LoginSyncInfoRsp::mutable_wait() {
  set_has_wait();
  if (wait_ == NULL) wait_ = new ::proto_ff::RedWaitListProto;
  return wait_;
}
inline ::proto_ff::RedWaitListProto* Red_LoginSyncInfoRsp::release_wait() {
  clear_has_wait();
  ::proto_ff::RedWaitListProto* temp = wait_;
  wait_ = NULL;
  return temp;
}
inline void Red_LoginSyncInfoRsp::set_allocated_wait(::proto_ff::RedWaitListProto* wait) {
  delete wait_;
  wait_ = wait;
  if (wait) {
    set_has_wait();
  } else {
    clear_has_wait();
  }
}

// optional .proto_ff.RedNewListProto fetch = 7;
inline bool Red_LoginSyncInfoRsp::has_fetch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Red_LoginSyncInfoRsp::set_has_fetch() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Red_LoginSyncInfoRsp::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Red_LoginSyncInfoRsp::clear_fetch() {
  if (fetch_ != NULL) fetch_->::proto_ff::RedNewListProto::Clear();
  clear_has_fetch();
}
inline const ::proto_ff::RedNewListProto& Red_LoginSyncInfoRsp::fetch() const {
  return fetch_ != NULL ? *fetch_ : *default_instance_->fetch_;
}
inline ::proto_ff::RedNewListProto* Red_LoginSyncInfoRsp::mutable_fetch() {
  set_has_fetch();
  if (fetch_ == NULL) fetch_ = new ::proto_ff::RedNewListProto;
  return fetch_;
}
inline ::proto_ff::RedNewListProto* Red_LoginSyncInfoRsp::release_fetch() {
  clear_has_fetch();
  ::proto_ff::RedNewListProto* temp = fetch_;
  fetch_ = NULL;
  return temp;
}
inline void Red_LoginSyncInfoRsp::set_allocated_fetch(::proto_ff::RedNewListProto* fetch) {
  delete fetch_;
  fetch_ = fetch;
  if (fetch) {
    set_has_fetch();
  } else {
    clear_has_fetch();
  }
}

// repeated int32 cfgid_lst = 8;
inline int Red_LoginSyncInfoRsp::cfgid_lst_size() const {
  return cfgid_lst_.size();
}
inline void Red_LoginSyncInfoRsp::clear_cfgid_lst() {
  cfgid_lst_.Clear();
}
inline ::google::protobuf::int32 Red_LoginSyncInfoRsp::cfgid_lst(int index) const {
  return cfgid_lst_.Get(index);
}
inline void Red_LoginSyncInfoRsp::set_cfgid_lst(int index, ::google::protobuf::int32 value) {
  cfgid_lst_.Set(index, value);
}
inline void Red_LoginSyncInfoRsp::add_cfgid_lst(::google::protobuf::int32 value) {
  cfgid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Red_LoginSyncInfoRsp::cfgid_lst() const {
  return cfgid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Red_LoginSyncInfoRsp::mutable_cfgid_lst() {
  return &cfgid_lst_;
}

// -------------------------------------------------------------------

// Red_UpdateRoleRsp

// optional uint32 bdia = 1;
inline bool Red_UpdateRoleRsp::has_bdia() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_UpdateRoleRsp::set_has_bdia() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_UpdateRoleRsp::clear_has_bdia() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_UpdateRoleRsp::clear_bdia() {
  bdia_ = 0u;
  clear_has_bdia();
}
inline ::google::protobuf::uint32 Red_UpdateRoleRsp::bdia() const {
  return bdia_;
}
inline void Red_UpdateRoleRsp::set_bdia(::google::protobuf::uint32 value) {
  set_has_bdia();
  bdia_ = value;
}

// optional uint32 magic = 2;
inline bool Red_UpdateRoleRsp::has_magic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_UpdateRoleRsp::set_has_magic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_UpdateRoleRsp::clear_has_magic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_UpdateRoleRsp::clear_magic() {
  magic_ = 0u;
  clear_has_magic();
}
inline ::google::protobuf::uint32 Red_UpdateRoleRsp::magic() const {
  return magic_;
}
inline void Red_UpdateRoleRsp::set_magic(::google::protobuf::uint32 value) {
  set_has_magic();
  magic_ = value;
}

// optional uint32 today_num = 3;
inline bool Red_UpdateRoleRsp::has_today_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Red_UpdateRoleRsp::set_has_today_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Red_UpdateRoleRsp::clear_has_today_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Red_UpdateRoleRsp::clear_today_num() {
  today_num_ = 0u;
  clear_has_today_num();
}
inline ::google::protobuf::uint32 Red_UpdateRoleRsp::today_num() const {
  return today_num_;
}
inline void Red_UpdateRoleRsp::set_today_num(::google::protobuf::uint32 value) {
  set_has_today_num();
  today_num_ = value;
}

// optional uint32 today_magic = 4;
inline bool Red_UpdateRoleRsp::has_today_magic() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Red_UpdateRoleRsp::set_has_today_magic() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Red_UpdateRoleRsp::clear_has_today_magic() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Red_UpdateRoleRsp::clear_today_magic() {
  today_magic_ = 0u;
  clear_has_today_magic();
}
inline ::google::protobuf::uint32 Red_UpdateRoleRsp::today_magic() const {
  return today_magic_;
}
inline void Red_UpdateRoleRsp::set_today_magic(::google::protobuf::uint32 value) {
  set_has_today_magic();
  today_magic_ = value;
}

// optional uint32 today_bdia = 5;
inline bool Red_UpdateRoleRsp::has_today_bdia() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Red_UpdateRoleRsp::set_has_today_bdia() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Red_UpdateRoleRsp::clear_has_today_bdia() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Red_UpdateRoleRsp::clear_today_bdia() {
  today_bdia_ = 0u;
  clear_has_today_bdia();
}
inline ::google::protobuf::uint32 Red_UpdateRoleRsp::today_bdia() const {
  return today_bdia_;
}
inline void Red_UpdateRoleRsp::set_today_bdia(::google::protobuf::uint32 value) {
  set_has_today_bdia();
  today_bdia_ = value;
}

// -------------------------------------------------------------------

// Red_UpdateRoleWaitRsp

// optional .proto_ff.RedWaitListProto wait = 1;
inline bool Red_UpdateRoleWaitRsp::has_wait() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_UpdateRoleWaitRsp::set_has_wait() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_UpdateRoleWaitRsp::clear_has_wait() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_UpdateRoleWaitRsp::clear_wait() {
  if (wait_ != NULL) wait_->::proto_ff::RedWaitListProto::Clear();
  clear_has_wait();
}
inline const ::proto_ff::RedWaitListProto& Red_UpdateRoleWaitRsp::wait() const {
  return wait_ != NULL ? *wait_ : *default_instance_->wait_;
}
inline ::proto_ff::RedWaitListProto* Red_UpdateRoleWaitRsp::mutable_wait() {
  set_has_wait();
  if (wait_ == NULL) wait_ = new ::proto_ff::RedWaitListProto;
  return wait_;
}
inline ::proto_ff::RedWaitListProto* Red_UpdateRoleWaitRsp::release_wait() {
  clear_has_wait();
  ::proto_ff::RedWaitListProto* temp = wait_;
  wait_ = NULL;
  return temp;
}
inline void Red_UpdateRoleWaitRsp::set_allocated_wait(::proto_ff::RedWaitListProto* wait) {
  delete wait_;
  wait_ = wait;
  if (wait) {
    set_has_wait();
  } else {
    clear_has_wait();
  }
}

// repeated uint32 del_lst = 2;
inline int Red_UpdateRoleWaitRsp::del_lst_size() const {
  return del_lst_.size();
}
inline void Red_UpdateRoleWaitRsp::clear_del_lst() {
  del_lst_.Clear();
}
inline ::google::protobuf::uint32 Red_UpdateRoleWaitRsp::del_lst(int index) const {
  return del_lst_.Get(index);
}
inline void Red_UpdateRoleWaitRsp::set_del_lst(int index, ::google::protobuf::uint32 value) {
  del_lst_.Set(index, value);
}
inline void Red_UpdateRoleWaitRsp::add_del_lst(::google::protobuf::uint32 value) {
  del_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Red_UpdateRoleWaitRsp::del_lst() const {
  return del_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Red_UpdateRoleWaitRsp::mutable_del_lst() {
  return &del_lst_;
}

// -------------------------------------------------------------------

// Red_NewRedNotify

// optional .proto_ff.RedNewListProto fetch = 1;
inline bool Red_NewRedNotify::has_fetch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_NewRedNotify::set_has_fetch() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_NewRedNotify::clear_has_fetch() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_NewRedNotify::clear_fetch() {
  if (fetch_ != NULL) fetch_->::proto_ff::RedNewListProto::Clear();
  clear_has_fetch();
}
inline const ::proto_ff::RedNewListProto& Red_NewRedNotify::fetch() const {
  return fetch_ != NULL ? *fetch_ : *default_instance_->fetch_;
}
inline ::proto_ff::RedNewListProto* Red_NewRedNotify::mutable_fetch() {
  set_has_fetch();
  if (fetch_ == NULL) fetch_ = new ::proto_ff::RedNewListProto;
  return fetch_;
}
inline ::proto_ff::RedNewListProto* Red_NewRedNotify::release_fetch() {
  clear_has_fetch();
  ::proto_ff::RedNewListProto* temp = fetch_;
  fetch_ = NULL;
  return temp;
}
inline void Red_NewRedNotify::set_allocated_fetch(::proto_ff::RedNewListProto* fetch) {
  delete fetch_;
  fetch_ = fetch;
  if (fetch) {
    set_has_fetch();
  } else {
    clear_has_fetch();
  }
}

// repeated uint32 del_lst = 2;
inline int Red_NewRedNotify::del_lst_size() const {
  return del_lst_.size();
}
inline void Red_NewRedNotify::clear_del_lst() {
  del_lst_.Clear();
}
inline ::google::protobuf::uint32 Red_NewRedNotify::del_lst(int index) const {
  return del_lst_.Get(index);
}
inline void Red_NewRedNotify::set_del_lst(int index, ::google::protobuf::uint32 value) {
  del_lst_.Set(index, value);
}
inline void Red_NewRedNotify::add_del_lst(::google::protobuf::uint32 value) {
  del_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Red_NewRedNotify::del_lst() const {
  return del_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Red_NewRedNotify::mutable_del_lst() {
  return &del_lst_;
}

// -------------------------------------------------------------------

// Red_SimpleListReq

// optional int32 type = 1;
inline bool Red_SimpleListReq::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_SimpleListReq::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_SimpleListReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_SimpleListReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Red_SimpleListReq::type() const {
  return type_;
}
inline void Red_SimpleListReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// Red_SimpleListRsp

// required int32 ret = 1;
inline bool Red_SimpleListRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_SimpleListRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_SimpleListRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_SimpleListRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Red_SimpleListRsp::ret() const {
  return ret_;
}
inline void Red_SimpleListRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 type = 2;
inline bool Red_SimpleListRsp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_SimpleListRsp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_SimpleListRsp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_SimpleListRsp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Red_SimpleListRsp::type() const {
  return type_;
}
inline void Red_SimpleListRsp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .proto_ff.RedSimpleListProto simple = 3;
inline bool Red_SimpleListRsp::has_simple() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Red_SimpleListRsp::set_has_simple() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Red_SimpleListRsp::clear_has_simple() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Red_SimpleListRsp::clear_simple() {
  if (simple_ != NULL) simple_->::proto_ff::RedSimpleListProto::Clear();
  clear_has_simple();
}
inline const ::proto_ff::RedSimpleListProto& Red_SimpleListRsp::simple() const {
  return simple_ != NULL ? *simple_ : *default_instance_->simple_;
}
inline ::proto_ff::RedSimpleListProto* Red_SimpleListRsp::mutable_simple() {
  set_has_simple();
  if (simple_ == NULL) simple_ = new ::proto_ff::RedSimpleListProto;
  return simple_;
}
inline ::proto_ff::RedSimpleListProto* Red_SimpleListRsp::release_simple() {
  clear_has_simple();
  ::proto_ff::RedSimpleListProto* temp = simple_;
  simple_ = NULL;
  return temp;
}
inline void Red_SimpleListRsp::set_allocated_simple(::proto_ff::RedSimpleListProto* simple) {
  delete simple_;
  simple_ = simple;
  if (simple) {
    set_has_simple();
  } else {
    clear_has_simple();
  }
}

// -------------------------------------------------------------------

// Red_DetailReq

// optional uint32 idx = 1;
inline bool Red_DetailReq::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_DetailReq::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_DetailReq::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_DetailReq::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 Red_DetailReq::idx() const {
  return idx_;
}
inline void Red_DetailReq::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// -------------------------------------------------------------------

// Red_DetailRsp

// required int32 ret = 1;
inline bool Red_DetailRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_DetailRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_DetailRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_DetailRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Red_DetailRsp::ret() const {
  return ret_;
}
inline void Red_DetailRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.RedDetailProto detail = 2;
inline bool Red_DetailRsp::has_detail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_DetailRsp::set_has_detail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_DetailRsp::clear_has_detail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_DetailRsp::clear_detail() {
  if (detail_ != NULL) detail_->::proto_ff::RedDetailProto::Clear();
  clear_has_detail();
}
inline const ::proto_ff::RedDetailProto& Red_DetailRsp::detail() const {
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
inline ::proto_ff::RedDetailProto* Red_DetailRsp::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) detail_ = new ::proto_ff::RedDetailProto;
  return detail_;
}
inline ::proto_ff::RedDetailProto* Red_DetailRsp::release_detail() {
  clear_has_detail();
  ::proto_ff::RedDetailProto* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline void Red_DetailRsp::set_allocated_detail(::proto_ff::RedDetailProto* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
}

// -------------------------------------------------------------------

// Red_FetchReq

// optional uint32 idx = 1;
inline bool Red_FetchReq::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_FetchReq::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_FetchReq::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_FetchReq::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 Red_FetchReq::idx() const {
  return idx_;
}
inline void Red_FetchReq::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// -------------------------------------------------------------------

// Red_FetchRsp

// required int32 ret = 1;
inline bool Red_FetchRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_FetchRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_FetchRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_FetchRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Red_FetchRsp::ret() const {
  return ret_;
}
inline void Red_FetchRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.RedDetailProto detail = 2;
inline bool Red_FetchRsp::has_detail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_FetchRsp::set_has_detail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_FetchRsp::clear_has_detail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_FetchRsp::clear_detail() {
  if (detail_ != NULL) detail_->::proto_ff::RedDetailProto::Clear();
  clear_has_detail();
}
inline const ::proto_ff::RedDetailProto& Red_FetchRsp::detail() const {
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
inline ::proto_ff::RedDetailProto* Red_FetchRsp::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) detail_ = new ::proto_ff::RedDetailProto;
  return detail_;
}
inline ::proto_ff::RedDetailProto* Red_FetchRsp::release_detail() {
  clear_has_detail();
  ::proto_ff::RedDetailProto* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline void Red_FetchRsp::set_allocated_detail(::proto_ff::RedDetailProto* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
}

// -------------------------------------------------------------------

// Red_SendReq

// optional uint32 idx = 1;
inline bool Red_SendReq::has_idx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_SendReq::set_has_idx() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_SendReq::clear_has_idx() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_SendReq::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 Red_SendReq::idx() const {
  return idx_;
}
inline void Red_SendReq::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// optional uint32 cfgid = 2;
inline bool Red_SendReq::has_cfgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_SendReq::set_has_cfgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_SendReq::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_SendReq::clear_cfgid() {
  cfgid_ = 0u;
  clear_has_cfgid();
}
inline ::google::protobuf::uint32 Red_SendReq::cfgid() const {
  return cfgid_;
}
inline void Red_SendReq::set_cfgid(::google::protobuf::uint32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// optional int32 type = 3;
inline bool Red_SendReq::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Red_SendReq::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Red_SendReq::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Red_SendReq::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Red_SendReq::type() const {
  return type_;
}
inline void Red_SendReq::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bytes word = 4;
inline bool Red_SendReq::has_word() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Red_SendReq::set_has_word() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Red_SendReq::clear_has_word() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Red_SendReq::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& Red_SendReq::word() const {
  return *word_;
}
inline void Red_SendReq::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void Red_SendReq::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void Red_SendReq::set_word(const void* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Red_SendReq::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* Red_SendReq::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Red_SendReq::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Red_SendRsp

// required int32 ret = 1;
inline bool Red_SendRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_SendRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_SendRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_SendRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Red_SendRsp::ret() const {
  return ret_;
}
inline void Red_SendRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .proto_ff.RedDetailProto detail = 2;
inline bool Red_SendRsp::has_detail() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_SendRsp::set_has_detail() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_SendRsp::clear_has_detail() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_SendRsp::clear_detail() {
  if (detail_ != NULL) detail_->::proto_ff::RedDetailProto::Clear();
  clear_has_detail();
}
inline const ::proto_ff::RedDetailProto& Red_SendRsp::detail() const {
  return detail_ != NULL ? *detail_ : *default_instance_->detail_;
}
inline ::proto_ff::RedDetailProto* Red_SendRsp::mutable_detail() {
  set_has_detail();
  if (detail_ == NULL) detail_ = new ::proto_ff::RedDetailProto;
  return detail_;
}
inline ::proto_ff::RedDetailProto* Red_SendRsp::release_detail() {
  clear_has_detail();
  ::proto_ff::RedDetailProto* temp = detail_;
  detail_ = NULL;
  return temp;
}
inline void Red_SendRsp::set_allocated_detail(::proto_ff::RedDetailProto* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    set_has_detail();
  } else {
    clear_has_detail();
  }
}

// -------------------------------------------------------------------

// Red_FetchExtraReq

// -------------------------------------------------------------------

// Red_FetchExtraRsp

// required int32 ret = 1;
inline bool Red_FetchExtraRsp::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_FetchExtraRsp::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_FetchExtraRsp::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_FetchExtraRsp::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Red_FetchExtraRsp::ret() const {
  return ret_;
}
inline void Red_FetchExtraRsp::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Red_UpdateSendListRsp

// repeated int32 cfgid_lst = 1;
inline int Red_UpdateSendListRsp::cfgid_lst_size() const {
  return cfgid_lst_.size();
}
inline void Red_UpdateSendListRsp::clear_cfgid_lst() {
  cfgid_lst_.Clear();
}
inline ::google::protobuf::int32 Red_UpdateSendListRsp::cfgid_lst(int index) const {
  return cfgid_lst_.Get(index);
}
inline void Red_UpdateSendListRsp::set_cfgid_lst(int index, ::google::protobuf::int32 value) {
  cfgid_lst_.Set(index, value);
}
inline void Red_UpdateSendListRsp::add_cfgid_lst(::google::protobuf::int32 value) {
  cfgid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Red_UpdateSendListRsp::cfgid_lst() const {
  return cfgid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Red_UpdateSendListRsp::mutable_cfgid_lst() {
  return &cfgid_lst_;
}

// -------------------------------------------------------------------

// Red_LCSendReq

// optional uint64 cid = 1;
inline bool Red_LCSendReq::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_LCSendReq::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_LCSendReq::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_LCSendReq::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Red_LCSendReq::cid() const {
  return cid_;
}
inline void Red_LCSendReq::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 idx = 2;
inline bool Red_LCSendReq::has_idx() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_LCSendReq::set_has_idx() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_LCSendReq::clear_has_idx() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_LCSendReq::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 Red_LCSendReq::idx() const {
  return idx_;
}
inline void Red_LCSendReq::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
}

// optional uint32 cfgid = 3;
inline bool Red_LCSendReq::has_cfgid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Red_LCSendReq::set_has_cfgid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Red_LCSendReq::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Red_LCSendReq::clear_cfgid() {
  cfgid_ = 0u;
  clear_has_cfgid();
}
inline ::google::protobuf::uint32 Red_LCSendReq::cfgid() const {
  return cfgid_;
}
inline void Red_LCSendReq::set_cfgid(::google::protobuf::uint32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// optional bytes word = 4;
inline bool Red_LCSendReq::has_word() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Red_LCSendReq::set_has_word() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Red_LCSendReq::clear_has_word() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Red_LCSendReq::clear_word() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    word_->clear();
  }
  clear_has_word();
}
inline const ::std::string& Red_LCSendReq::word() const {
  return *word_;
}
inline void Red_LCSendReq::set_word(const ::std::string& value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void Red_LCSendReq::set_word(const char* value) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void Red_LCSendReq::set_word(const void* value, size_t size) {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Red_LCSendReq::mutable_word() {
  set_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    word_ = new ::std::string;
  }
  return word_;
}
inline ::std::string* Red_LCSendReq::release_word() {
  clear_has_word();
  if (word_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = word_;
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Red_LCSendReq::set_allocated_word(::std::string* word) {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (word) {
    set_has_word();
    word_ = word;
  } else {
    clear_has_word();
    word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Red_CLFetchRsp

// optional uint64 cid = 1;
inline bool Red_CLFetchRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_CLFetchRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_CLFetchRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_CLFetchRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Red_CLFetchRsp::cid() const {
  return cid_;
}
inline void Red_CLFetchRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional int64 bdia = 2;
inline bool Red_CLFetchRsp::has_bdia() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_CLFetchRsp::set_has_bdia() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_CLFetchRsp::clear_has_bdia() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_CLFetchRsp::clear_bdia() {
  bdia_ = GOOGLE_LONGLONG(0);
  clear_has_bdia();
}
inline ::google::protobuf::int64 Red_CLFetchRsp::bdia() const {
  return bdia_;
}
inline void Red_CLFetchRsp::set_bdia(::google::protobuf::int64 value) {
  set_has_bdia();
  bdia_ = value;
}

// optional int64 magic = 3;
inline bool Red_CLFetchRsp::has_magic() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Red_CLFetchRsp::set_has_magic() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Red_CLFetchRsp::clear_has_magic() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Red_CLFetchRsp::clear_magic() {
  magic_ = GOOGLE_LONGLONG(0);
  clear_has_magic();
}
inline ::google::protobuf::int64 Red_CLFetchRsp::magic() const {
  return magic_;
}
inline void Red_CLFetchRsp::set_magic(::google::protobuf::int64 value) {
  set_has_magic();
  magic_ = value;
}

// -------------------------------------------------------------------

// Red_CLSendFailRsp

// optional uint64 cid = 1;
inline bool Red_CLSendFailRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_CLSendFailRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_CLSendFailRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_CLSendFailRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Red_CLSendFailRsp::cid() const {
  return cid_;
}
inline void Red_CLSendFailRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// optional uint32 cfgid = 2;
inline bool Red_CLSendFailRsp::has_cfgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Red_CLSendFailRsp::set_has_cfgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Red_CLSendFailRsp::clear_has_cfgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Red_CLSendFailRsp::clear_cfgid() {
  cfgid_ = 0u;
  clear_has_cfgid();
}
inline ::google::protobuf::uint32 Red_CLSendFailRsp::cfgid() const {
  return cfgid_;
}
inline void Red_CLSendFailRsp::set_cfgid(::google::protobuf::uint32 value) {
  set_has_cfgid();
  cfgid_ = value;
}

// -------------------------------------------------------------------

// Red_LCRechargeRsp

// optional uint64 cid = 1;
inline bool Red_LCRechargeRsp::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Red_LCRechargeRsp::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Red_LCRechargeRsp::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Red_LCRechargeRsp::clear_cid() {
  cid_ = GOOGLE_ULONGLONG(0);
  clear_has_cid();
}
inline ::google::protobuf::uint64 Red_LCRechargeRsp::cid() const {
  return cid_;
}
inline void Red_LCRechargeRsp::set_cid(::google::protobuf::uint64 value) {
  set_has_cid();
  cid_ = value;
}

// repeated uint32 cfgid_lst = 2;
inline int Red_LCRechargeRsp::cfgid_lst_size() const {
  return cfgid_lst_.size();
}
inline void Red_LCRechargeRsp::clear_cfgid_lst() {
  cfgid_lst_.Clear();
}
inline ::google::protobuf::uint32 Red_LCRechargeRsp::cfgid_lst(int index) const {
  return cfgid_lst_.Get(index);
}
inline void Red_LCRechargeRsp::set_cfgid_lst(int index, ::google::protobuf::uint32 value) {
  cfgid_lst_.Set(index, value);
}
inline void Red_LCRechargeRsp::add_cfgid_lst(::google::protobuf::uint32 value) {
  cfgid_lst_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
Red_LCRechargeRsp::cfgid_lst() const {
  return cfgid_lst_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
Red_LCRechargeRsp::mutable_cfgid_lst() {
  return &cfgid_lst_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Red_2eproto__INCLUDED
