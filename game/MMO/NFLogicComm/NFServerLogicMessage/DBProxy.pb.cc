// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DBProxy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DBProxy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* RoleReliveProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleReliveProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBBaseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBBaseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagItemsDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagItemsDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BagDBSimpleData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BagDBSimpleData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBUnitBagData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBUnitBagData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBBagData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBBagData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBEquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBEquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBTaskData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBTaskData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowPartEntryDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowPartEntryDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowPartDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowPartDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GrowDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GrowDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayUseItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayUseItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterArenaData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterArenaData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MiniDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiniDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MountDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MountDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeityDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeityDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FacadeDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FacadeDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBAdvPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBAdvPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBAdvInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBAdvInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetSkillCdDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetSkillCdDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBTalentProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBTalentProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBTalent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBTalent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodRelicsActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodRelicsActivityData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MiniActivityDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiniActivityDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupGroupData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupGroupData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerDBRecordEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerDBRecordEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerDBRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerDBRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupTowerDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupTowerDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GhostDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GhostDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoyuDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoyuDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* YaoTaDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  YaoTaDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DupDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DupDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GhostDupRankDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GhostDupRankDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDBCdInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDBCdInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDBShieldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDBShieldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossSimpleInfoDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossSimpleInfoDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetDBRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetDBRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetGrowDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetGrowDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* PetDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PetDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConvoyData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConvoyData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArmorDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArmorDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AssistDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AssistDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvilCondDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvilCondDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvilMultCondDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvilMultCondDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvilTaskDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvilTaskDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GodEvilDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GodEvilDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBSalary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBSalary_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBDinner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBDinner_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBSkillProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBSkillProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBGuard_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBGuard_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleFactionDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleFactionDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleBestEQDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleBestEQDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AncientDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AncientDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleEmblemDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleEmblemDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Role1v1DBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Role1v1DBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RolePvpDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RolePvpDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleMarryExpress_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleMarryExpress_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleMarryDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleMarryDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EncylopediaDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncylopediaDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GVBPData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GVBPData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChargeDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChargeDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiftCondDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiftCondDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiftZeroDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiftZeroDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiftZeroLogDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiftZeroLogDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiftDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiftDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestSimpleDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestSimpleDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestShopDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestShopDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestSignDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestSignDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestGoldStoreDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestGoldStoreDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDigEggTaskDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDigEggTaskDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDigEggDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDigEggDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCandleDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCandleDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestBtDragonDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestBtDragonDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestRTurnableRechargeDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestRTurnableRechargeDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDailyTotalRechargeDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDailyTotalRechargeDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestTurnableDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestTurnableDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestOnlineDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestOnlineDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestCollectWordDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestCollectWordDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestBossFirstDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestBossFirstDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* FMarryRoleDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FMarryRoleDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* DayTotalRechargeDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DayTotalRechargeDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TotalRechargeDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TotalRechargeDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRewardDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRewardDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDetailDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDetailDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShadowDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShadowDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HaloDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HaloDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DragonDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DragonDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBTurnData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBTurnData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMADbData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMADbData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SoulDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SoulDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedWaitDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedWaitDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedTriggerDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedTriggerDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleRedDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRedDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedFetchDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedFetchDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedFetchListDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedFetchListDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedSendDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedSendDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleMirrorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleMirrorData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoleMirrorData_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* FactionMemDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMemDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMultMemDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMultMemDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionApplyDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionApplyDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMultApplyDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMultApplyDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRecordDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRecordDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMutRecordDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMutRecordDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionBeastHarmDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionBeastHarmDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionBeastDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionBeastDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionGuardHarmDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionGuardHarmDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionGuardDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionGuardDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionMoyu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionMoyu_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionAllDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionAllDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBMoyuRankEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBMoyuRankEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBMoyuRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBMoyuRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDBMoyuRankDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDBMoyuRankDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleListDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleListDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleListDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleListDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoleDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoleDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoleDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoleDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfoDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfoDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfoDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfoDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleInfoUpdateDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleInfoUpdateDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleChgNameDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleChgNameDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleChgNameDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleChgNameDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSimpleListDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSimpleListDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleSimpleListDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleSimpleListDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureTransLogicDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureTransLogicDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureTransLogicDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureTransLogicDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewMailDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewMailDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailDBOperateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailDBOperateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveMailDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveMailDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveMailDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveMailDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMailDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMailDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharacterMailDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharacterMailDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaxMailIDRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxMailIDRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaxMailIDResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaxMailIDResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteCharacterMail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteCharacterMail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneMailSaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneMailSaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneMailTransCharacterMailReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneMailTransCharacterMailReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneMailTransCharacterMailRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneMailTransCharacterMailRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebMailDBDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebMailDBDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WebMailDBDataRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WebMailDBDataRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllFriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllFriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllFriendDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllFriendDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveFriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveFriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelteFriendDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelteFriendDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBRequst_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBRequst_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalDBSetResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalDBSetResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalComData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalComData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalYaotaDupDBEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalYaotaDupDBEntry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GlobalYaotaDupDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GlobalYaotaDupDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActSaveDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActSaveDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllArenaDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllArenaDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaMoreDBInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaMoreDBInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllArenaDBResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllArenaDBResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveArenaDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveArenaDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteArenaDBRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteArenaDBRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleMirrorDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleMirrorDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleMirrorDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleMirrorDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDataDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDataDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDataDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDataDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionSaveDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionSaveDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionDelDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionDelDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRedDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRedDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRedDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRedDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRedSaveDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRedSaveDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionRedDelDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionRedDelDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleRedDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRedDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleRedDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleRedDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComLoadDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComLoadDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComLoadDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComLoadDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComLoadAllDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComLoadAllDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComLoadAllDBRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComLoadAllDBRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComSaveDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComSaveDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ComDelDBReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ComDelDBReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarrySimpleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarrySimpleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryDBLoadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryDBLoadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryDBLoadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryDBLoadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryDBSaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryDBSaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerRankDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerRankDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuardRankDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuardRankDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* GuardDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GuardDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* Rank1v1DBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Rank1v1DBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* Act1v1DBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Act1v1DBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceFactionDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceFactionDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceMatchDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceMatchDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* RaceDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RaceDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarRankDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarRankDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactionWarDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactionWarDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DigEggLogDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DigEggLogDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDigEggLogDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDigEggLogDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDigEggLogDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDigEggLogDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestRTurnableLogDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestRTurnableLogDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDonateDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDonateDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestDrawPizeLogDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestDrawPizeLogDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GoodsDB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GoodsDB_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoadGoodsReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoadGoodsReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDBLoadRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDBLoadRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketSaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketSaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketDelReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketDelReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandleHarmDBProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandleHarmDBProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CandleDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CandleDBData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DBProxy_2eproto() {
  protobuf_AddDesc_DBProxy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DBProxy.proto");
  GOOGLE_CHECK(file != NULL);
  RoleReliveProto_descriptor_ = file->message_type(0);
  static const int RoleReliveProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, tired_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, relive_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, is_tired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, map_relive_num_),
  };
  RoleReliveProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleReliveProto_descriptor_,
      RoleReliveProto::default_instance_,
      RoleReliveProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleReliveProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleReliveProto));
  RoleDBBaseData_descriptor_ = file->message_type(1);
  static const int RoleDBBaseData_offsets_[50] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, logouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enter_scene_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enter_map_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enterposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enterposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, enterposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastsceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastmapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, lastposz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, hanguptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, relive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, dia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, bdia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, arenacoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, godevil_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, godevil_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, login_day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, login_day_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, best_aq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, best_lj_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, day_prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, prestige_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, pt_stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, battlepass_xiance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, battlepass_baoding_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, findtreasure_shengfu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, findtreasure_battlesoul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, holybeast_build_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, magic_sum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, subpack_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, subpack_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, hunling_),
  };
  RoleDBBaseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBBaseData_descriptor_,
      RoleDBBaseData::default_instance_,
      RoleDBBaseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBaseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBBaseData));
  BagItemsDBData_descriptor_ = file->message_type(2);
  static const int BagItemsDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemsDBData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemsDBData, offset_),
  };
  BagItemsDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagItemsDBData_descriptor_,
      BagItemsDBData::default_instance_,
      BagItemsDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemsDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagItemsDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagItemsDBData));
  BagDBSimpleData_descriptor_ = file->message_type(3);
  static const int BagDBSimpleData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagDBSimpleData, package_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagDBSimpleData, expand_num_),
  };
  BagDBSimpleData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BagDBSimpleData_descriptor_,
      BagDBSimpleData::default_instance_,
      BagDBSimpleData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagDBSimpleData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BagDBSimpleData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BagDBSimpleData));
  RoleDBUnitBagData_descriptor_ = file->message_type(4);
  static const int RoleDBUnitBagData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, simple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, parts_),
  };
  RoleDBUnitBagData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBUnitBagData_descriptor_,
      RoleDBUnitBagData::default_instance_,
      RoleDBUnitBagData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBUnitBagData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBUnitBagData));
  RoleDBBagData_descriptor_ = file->message_type(5);
  static const int RoleDBBagData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBagData, bags_),
  };
  RoleDBBagData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBBagData_descriptor_,
      RoleDBBagData::default_instance_,
      RoleDBBagData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBagData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBBagData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBBagData));
  RoleDBEquipData_descriptor_ = file->message_type(6);
  static const int RoleDBEquipData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, lv_attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, stove_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, stove_exp_),
  };
  RoleDBEquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBEquipData_descriptor_,
      RoleDBEquipData::default_instance_,
      RoleDBEquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBEquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBEquipData));
  RoleDBTaskData_descriptor_ = file->message_type(7);
  static const int RoleDBTaskData_offsets_[1] = {
  };
  RoleDBTaskData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBTaskData_descriptor_,
      RoleDBTaskData::default_instance_,
      RoleDBTaskData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTaskData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTaskData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBTaskData));
  GrowPartEntryDBInfo_descriptor_ = file->message_type(8);
  static const int GrowPartEntryDBInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartEntryDBInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartEntryDBInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartEntryDBInfo, time_),
  };
  GrowPartEntryDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowPartEntryDBInfo_descriptor_,
      GrowPartEntryDBInfo::default_instance_,
      GrowPartEntryDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartEntryDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartEntryDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowPartEntryDBInfo));
  GrowPartDBData_descriptor_ = file->message_type(9);
  static const int GrowPartDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, curid_),
  };
  GrowPartDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowPartDBData_descriptor_,
      GrowPartDBData::default_instance_,
      GrowPartDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowPartDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowPartDBData));
  GrowDBData_descriptor_ = file->message_type(10);
  static const int GrowDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowDBData, parts_),
  };
  GrowDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GrowDBData_descriptor_,
      GrowDBData::default_instance_,
      GrowDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GrowDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GrowDBData));
  DayUseItemData_descriptor_ = file->message_type(11);
  static const int DayUseItemData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayUseItemData, info_),
  };
  DayUseItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayUseItemData_descriptor_,
      DayUseItemData::default_instance_,
      DayUseItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayUseItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayUseItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayUseItemData));
  CharacterArenaData_descriptor_ = file->message_type(12);
  static const int CharacterArenaData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, challengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, historyrankid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, buychallengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, chall_reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, allchallengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, rank_id_),
  };
  CharacterArenaData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterArenaData_descriptor_,
      CharacterArenaData::default_instance_,
      CharacterArenaData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterArenaData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterArenaData));
  MiniDBData_descriptor_ = file->message_type(13);
  static const int MiniDBData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, useitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, arena_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, use_item_add_attr_),
  };
  MiniDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiniDBData_descriptor_,
      MiniDBData::default_instance_,
      MiniDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiniDBData));
  FacadeDataInfo_descriptor_ = file->message_type(14);
  static const int FacadeDataInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, facade_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, facade_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, facade_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, facade_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, use_soul_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, use_facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, equip_fantasy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, fantasy_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, fragment_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, soul_data_),
  };
  FacadeDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeDataInfo_descriptor_,
      FacadeDataInfo::default_instance_,
      FacadeDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeDataInfo));
  MountDataInfo_descriptor_ = file->message_type(15);
  static const int MountDataInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, mount_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, mount_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, mount_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, use_facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, equip_fantasy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, fantasy_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, fragment_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, kun_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, blood_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, baby_slot_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, ride_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, mount_model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, last_mount_model_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, kun_change_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, equip_kun_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, equip_kun_change_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, fairy_land_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, fairy_slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, cur_fairy_land_),
  };
  MountDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MountDataInfo_descriptor_,
      MountDataInfo::default_instance_,
      MountDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MountDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MountDataInfo));
  DeityDataInfo_descriptor_ = file->message_type(16);
  static const int DeityDataInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, deity_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, deity_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, deity_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, fantasy_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, fragment_map_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, skill_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, battle_data_),
  };
  DeityDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeityDataInfo_descriptor_,
      DeityDataInfo::default_instance_,
      DeityDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeityDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeityDataInfo));
  FacadeDBData_descriptor_ = file->message_type(17);
  static const int FacadeDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDBData, data_),
  };
  FacadeDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FacadeDBData_descriptor_,
      FacadeDBData::default_instance_,
      FacadeDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FacadeDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FacadeDBData));
  SkillDBInfo_descriptor_ = file->message_type(18);
  static const int SkillDBInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, wakeup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, use_msc_),
  };
  SkillDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBInfo_descriptor_,
      SkillDBInfo::default_instance_,
      SkillDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBInfo));
  SkillDBPos_descriptor_ = file->message_type(19);
  static const int SkillDBPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, use_),
  };
  SkillDBPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBPos_descriptor_,
      SkillDBPos::default_instance_,
      SkillDBPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBPos));
  SkillDBAdvPos_descriptor_ = file->message_type(20);
  static const int SkillDBAdvPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, unlock_),
  };
  SkillDBAdvPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBAdvPos_descriptor_,
      SkillDBAdvPos::default_instance_,
      SkillDBAdvPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBAdvPos));
  SkillDBAdvInfo_descriptor_ = file->message_type(21);
  static const int SkillDBAdvInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvInfo, advance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvInfo, level_),
  };
  SkillDBAdvInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBAdvInfo_descriptor_,
      SkillDBAdvInfo::default_instance_,
      SkillDBAdvInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBAdvInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBAdvInfo));
  SkillDBGroup_descriptor_ = file->message_type(22);
  static const int SkillDBGroup_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, chg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, pos_lst_),
  };
  SkillDBGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBGroup_descriptor_,
      SkillDBGroup::default_instance_,
      SkillDBGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBGroup));
  PetSkillCdDB_descriptor_ = file->message_type(23);
  static const int PetSkillCdDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, skill_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, use_msec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, pet_instid_),
  };
  PetSkillCdDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetSkillCdDB_descriptor_,
      PetSkillCdDB::default_instance_,
      PetSkillCdDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetSkillCdDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetSkillCdDB));
  SkillDBTalentProto_descriptor_ = file->message_type(24);
  static const int SkillDBTalentProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBTalentProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBTalentProto, level_),
  };
  SkillDBTalentProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBTalentProto_descriptor_,
      SkillDBTalentProto::default_instance_,
      SkillDBTalentProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBTalentProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBTalentProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBTalentProto));
  SkillDBTalent_descriptor_ = file->message_type(25);
  static const int SkillDBTalent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBTalent, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBTalent, cnt_),
  };
  SkillDBTalent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBTalent_descriptor_,
      SkillDBTalent::default_instance_,
      SkillDBTalent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBTalent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBTalent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBTalent));
  SkillDBData_descriptor_ = file->message_type(26);
  static const int SkillDBData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, info_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, group_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, last_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, adv_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, adv_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, cur_advpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, pet_cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, anger_value_),
  };
  SkillDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillDBData_descriptor_,
      SkillDBData::default_instance_,
      SkillDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillDBData));
  GodRelicsActivityData_descriptor_ = file->message_type(27);
  static const int GodRelicsActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsActivityData, group_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsActivityData, cur_group_id_),
  };
  GodRelicsActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodRelicsActivityData_descriptor_,
      GodRelicsActivityData::default_instance_,
      GodRelicsActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodRelicsActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodRelicsActivityData));
  MiniActivityDBData_descriptor_ = file->message_type(28);
  static const int MiniActivityDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniActivityDBData, god_relics_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniActivityDBData, daily_data_),
  };
  MiniActivityDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiniActivityDBData_descriptor_,
      MiniActivityDBData::default_instance_,
      MiniActivityDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniActivityDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniActivityDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiniActivityDBData));
  DupRecord_descriptor_ = file->message_type(29);
  static const int DupRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupRecord, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupRecord, star_),
  };
  DupRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupRecord_descriptor_,
      DupRecord::default_instance_,
      DupRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupRecord));
  DupGroupData_descriptor_ = file->message_type(30);
  static const int DupGroupData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, enternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, usenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, lastfresh_),
  };
  DupGroupData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupGroupData_descriptor_,
      DupGroupData::default_instance_,
      DupGroupData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupGroupData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupGroupData));
  DupTowerDBRecordEntry_descriptor_ = file->message_type(31);
  static const int DupTowerDBRecordEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, cid_),
  };
  DupTowerDBRecordEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerDBRecordEntry_descriptor_,
      DupTowerDBRecordEntry::default_instance_,
      DupTowerDBRecordEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecordEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerDBRecordEntry));
  DupTowerDBRecord_descriptor_ = file->message_type(32);
  static const int DupTowerDBRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecord, entrys_),
  };
  DupTowerDBRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerDBRecord_descriptor_,
      DupTowerDBRecord::default_instance_,
      DupTowerDBRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerDBRecord));
  DupTowerDBData_descriptor_ = file->message_type(33);
  static const int DupTowerDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBData, ids_),
  };
  DupTowerDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupTowerDBData_descriptor_,
      DupTowerDBData::default_instance_,
      DupTowerDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupTowerDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupTowerDBData));
  GhostDBData_descriptor_ = file->message_type(34);
  static const int GhostDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDBData, wave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDBData, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDBData, recv_ids_),
  };
  GhostDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GhostDBData_descriptor_,
      GhostDBData::default_instance_,
      GhostDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GhostDBData));
  MoyuDBData_descriptor_ = file->message_type(35);
  static const int MoyuDBData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoyuDBData, recv_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoyuDBData, day_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoyuDBData, week_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoyuDBData, last_day_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoyuDBData, last_week_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoyuDBData, time_),
  };
  MoyuDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoyuDBData_descriptor_,
      MoyuDBData::default_instance_,
      MoyuDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoyuDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoyuDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoyuDBData));
  YaoTaDBData_descriptor_ = file->message_type(36);
  static const int YaoTaDBData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaDBData, pass_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaDBData, first_pass_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaDBData, pass_time_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaDBData, pass_duration_),
  };
  YaoTaDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      YaoTaDBData_descriptor_,
      YaoTaDBData::default_instance_,
      YaoTaDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YaoTaDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(YaoTaDBData));
  DupDBData_descriptor_ = file->message_type(37);
  static const int DupDBData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, groups_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, tower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, ghost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, moyu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, yaota_),
  };
  DupDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DupDBData_descriptor_,
      DupDBData::default_instance_,
      DupDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DupDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DupDBData));
  GhostDupRankDB_descriptor_ = file->message_type(38);
  static const int GhostDupRankDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDupRankDB, ranks_),
  };
  GhostDupRankDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GhostDupRankDB_descriptor_,
      GhostDupRankDB::default_instance_,
      GhostDupRankDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDupRankDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GhostDupRankDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GhostDupRankDB));
  BuffDBInfo_descriptor_ = file->message_type(39);
  static const int BuffDBInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, skilllev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, is_forever_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, startmsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, is_effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, param1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, param2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, extramsec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, is_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, param3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, param4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, param5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, param6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, param7_),
  };
  BuffDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDBInfo_descriptor_,
      BuffDBInfo::default_instance_,
      BuffDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDBInfo));
  BuffDBCdInfo_descriptor_ = file->message_type(40);
  static const int BuffDBCdInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBCdInfo, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBCdInfo, lastmsec_),
  };
  BuffDBCdInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDBCdInfo_descriptor_,
      BuffDBCdInfo::default_instance_,
      BuffDBCdInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBCdInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBCdInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDBCdInfo));
  BuffDBShieldInfo_descriptor_ = file->message_type(41);
  static const int BuffDBShieldInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBShieldInfo, god_shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBShieldInfo, mag_shield_),
  };
  BuffDBShieldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDBShieldInfo_descriptor_,
      BuffDBShieldInfo::default_instance_,
      BuffDBShieldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBShieldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBShieldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDBShieldInfo));
  BuffDBData_descriptor_ = file->message_type(42);
  static const int BuffDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBData, info_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBData, cd_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBData, shield_),
  };
  BuffDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffDBData_descriptor_,
      BuffDBData::default_instance_,
      BuffDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffDBData));
  BossSimpleInfoDB_descriptor_ = file->message_type(43);
  static const int BossSimpleInfoDB_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, boss_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, cur_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, back_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, back_max_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, enter_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, use_item_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, groupinfo_),
  };
  BossSimpleInfoDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossSimpleInfoDB_descriptor_,
      BossSimpleInfoDB::default_instance_,
      BossSimpleInfoDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossSimpleInfoDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossSimpleInfoDB));
  BossDBData_descriptor_ = file->message_type(44);
  static const int BossDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, attents_),
  };
  BossDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDBData_descriptor_,
      BossDBData::default_instance_,
      BossDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDBData));
  VipDBData_descriptor_ = file->message_type(45);
  static const int VipDBData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, expdiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, privilege_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, vip_hide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, active_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, outtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, last_recv_day_gift_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, lv_gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, zero_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, recv_zero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, add_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, recv_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, active_time_),
  };
  VipDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipDBData_descriptor_,
      VipDBData::default_instance_,
      VipDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipDBData));
  AttrDBData_descriptor_ = file->message_type(46);
  static const int AttrDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrDBData, attr_lst_),
  };
  AttrDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrDBData_descriptor_,
      AttrDBData::default_instance_,
      AttrDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrDBData));
  PetDBRecord_descriptor_ = file->message_type(47);
  static const int PetDBRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, costitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, costpet_),
  };
  PetDBRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetDBRecord_descriptor_,
      PetDBRecord::default_instance_,
      PetDBRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetDBRecord));
  PetGrowDB_descriptor_ = file->message_type(48);
  static const int PetGrowDB_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGrowDB, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGrowDB, stronglv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGrowDB, starlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGrowDB, starindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGrowDB, failnum_),
  };
  PetGrowDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetGrowDB_descriptor_,
      PetGrowDB::default_instance_,
      PetGrowDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGrowDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetGrowDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetGrowDB));
  PetDBData_descriptor_ = file->message_type(49);
  static const int PetDBData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, fetter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, pets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, hatchs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, records_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, cfgids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, grows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, yaohun_),
  };
  PetDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PetDBData_descriptor_,
      PetDBData::default_instance_,
      PetDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PetDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PetDBData));
  MallDBInfo_descriptor_ = file->message_type(50);
  static const int MallDBInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, time_),
  };
  MallDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallDBInfo_descriptor_,
      MallDBInfo::default_instance_,
      MallDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallDBInfo));
  MallDBData_descriptor_ = file->message_type(51);
  static const int MallDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, week_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, forever_),
  };
  MallDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallDBData_descriptor_,
      MallDBData::default_instance_,
      MallDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallDBData));
  ConvoyData_descriptor_ = file->message_type(52);
  static const int ConvoyData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, daynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, escortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, freenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, genescortid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, resettime_),
  };
  ConvoyData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConvoyData_descriptor_,
      ConvoyData::default_instance_,
      ConvoyData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConvoyData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConvoyData));
  ArmorDBData_descriptor_ = file->message_type(53);
  static const int ArmorDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorDBData, infos_),
  };
  ArmorDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArmorDBData_descriptor_,
      ArmorDBData::default_instance_,
      ArmorDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArmorDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArmorDBData));
  AssistDBData_descriptor_ = file->message_type(54);
  static const int AssistDBData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, dayprestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, sendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, helpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, allsendnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, allhelpnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, recvsendgiftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, recvhelpgiftnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, rewardids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, thanksinfo_),
  };
  AssistDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AssistDBData_descriptor_,
      AssistDBData::default_instance_,
      AssistDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AssistDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AssistDBData));
  TitleDBData_descriptor_ = file->message_type(55);
  static const int TitleDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDBData, cur_wearing_title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDBData, data_),
  };
  TitleDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleDBData_descriptor_,
      TitleDBData::default_instance_,
      TitleDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleDBData));
  GodEvilCondDBProto_descriptor_ = file->message_type(56);
  static const int GodEvilCondDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilCondDBProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilCondDBProto, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilCondDBProto, cur_),
  };
  GodEvilCondDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvilCondDBProto_descriptor_,
      GodEvilCondDBProto::default_instance_,
      GodEvilCondDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilCondDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilCondDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvilCondDBProto));
  GodEvilMultCondDBProto_descriptor_ = file->message_type(57);
  static const int GodEvilMultCondDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilMultCondDBProto, lst_),
  };
  GodEvilMultCondDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvilMultCondDBProto_descriptor_,
      GodEvilMultCondDBProto::default_instance_,
      GodEvilMultCondDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilMultCondDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilMultCondDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvilMultCondDBProto));
  GodEvilTaskDBProto_descriptor_ = file->message_type(58);
  static const int GodEvilTaskDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskDBProto, stage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskDBProto, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskDBProto, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskDBProto, accept_),
  };
  GodEvilTaskDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvilTaskDBProto_descriptor_,
      GodEvilTaskDBProto::default_instance_,
      GodEvilTaskDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilTaskDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvilTaskDBProto));
  GodEvilDBData_descriptor_ = file->message_type(59);
  static const int GodEvilDBData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, last_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, vessel_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, mirror_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, extra_exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, dress_),
  };
  GodEvilDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GodEvilDBData_descriptor_,
      GodEvilDBData::default_instance_,
      GodEvilDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GodEvilDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GodEvilDBData));
  PayDBData_descriptor_ = file->message_type(60);
  static const int PayDBData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, db_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, product_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, relrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, fakermb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, todayrmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, todaytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, sdkrmb_),
  };
  PayDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayDBData_descriptor_,
      PayDBData::default_instance_,
      PayDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayDBData));
  FactionDBSalary_descriptor_ = file->message_type(61);
  static const int FactionDBSalary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSalary, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSalary, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSalary, fetch_),
  };
  FactionDBSalary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBSalary_descriptor_,
      FactionDBSalary::default_instance_,
      FactionDBSalary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSalary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSalary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBSalary));
  FactionDBDinner_descriptor_ = file->message_type(62);
  static const int FactionDBDinner_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBDinner, trans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBDinner, meat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBDinner, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBDinner, contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBDinner, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBDinner, trans_time_),
  };
  FactionDBDinner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBDinner_descriptor_,
      FactionDBDinner::default_instance_,
      FactionDBDinner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBDinner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBDinner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBDinner));
  FactionDBSkillProto_descriptor_ = file->message_type(63);
  static const int FactionDBSkillProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSkillProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSkillProto, level_),
  };
  FactionDBSkillProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBSkillProto_descriptor_,
      FactionDBSkillProto::default_instance_,
      FactionDBSkillProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSkillProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSkillProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBSkillProto));
  FactionDBSkill_descriptor_ = file->message_type(64);
  static const int FactionDBSkill_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSkill, info_),
  };
  FactionDBSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBSkill_descriptor_,
      FactionDBSkill::default_instance_,
      FactionDBSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBSkill));
  FactionDBGuard_descriptor_ = file->message_type(65);
  static const int FactionDBGuard_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBGuard, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBGuard, contri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBGuard, cur_encouragement_gold_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBGuard, cur_encouragement_diamond_count_),
  };
  FactionDBGuard_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBGuard_descriptor_,
      FactionDBGuard::default_instance_,
      FactionDBGuard_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBGuard, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBGuard, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBGuard));
  RoleFactionDBData_descriptor_ = file->message_type(66);
  static const int RoleFactionDBData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, donate_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, donate_fresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, salary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, salary_fresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, dinner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, guard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, fetch_war_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, fetch_time_),
  };
  RoleFactionDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleFactionDBData_descriptor_,
      RoleFactionDBData::default_instance_,
      RoleFactionDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleFactionDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleFactionDBData));
  RoleBestEQDBData_descriptor_ = file->message_type(67);
  static const int RoleBestEQDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBestEQDBData, slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBestEQDBData, tasks_),
  };
  RoleBestEQDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleBestEQDBData_descriptor_,
      RoleBestEQDBData::default_instance_,
      RoleBestEQDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBestEQDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleBestEQDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleBestEQDBData));
  AncientDBData_descriptor_ = file->message_type(68);
  static const int AncientDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientDBData, unlock_star_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientDBData, infos_),
  };
  AncientDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AncientDBData_descriptor_,
      AncientDBData::default_instance_,
      AncientDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AncientDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AncientDBData));
  RoleEmblemDBInfo_descriptor_ = file->message_type(69);
  static const int RoleEmblemDBInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmblemDBInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmblemDBInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmblemDBInfo, star_),
  };
  RoleEmblemDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleEmblemDBInfo_descriptor_,
      RoleEmblemDBInfo::default_instance_,
      RoleEmblemDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmblemDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleEmblemDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleEmblemDBInfo));
  Role1v1DBInfo_descriptor_ = file->message_type(70);
  static const int Role1v1DBInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, match_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, conti_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, reward_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, already_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, reward_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, cur_conti_num_),
  };
  Role1v1DBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Role1v1DBInfo_descriptor_,
      Role1v1DBInfo::default_instance_,
      Role1v1DBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Role1v1DBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Role1v1DBInfo));
  RolePvpDBData_descriptor_ = file->message_type(71);
  static const int RolePvpDBData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePvpDBData, pkmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePvpDBData, chg_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePvpDBData, killvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePvpDBData, onlinesec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePvpDBData, emblem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePvpDBData, pk1v1_),
  };
  RolePvpDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RolePvpDBData_descriptor_,
      RolePvpDBData::default_instance_,
      RolePvpDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePvpDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RolePvpDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RolePvpDBData));
  RoleMarryExpress_descriptor_ = file->message_type(72);
  static const int RoleMarryExpress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryExpress, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryExpress, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryExpress, text_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryExpress, time_),
  };
  RoleMarryExpress_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleMarryExpress_descriptor_,
      RoleMarryExpress::default_instance_,
      RoleMarryExpress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryExpress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryExpress, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleMarryExpress));
  RoleMarryDBData_descriptor_ = file->message_type(73);
  static const int RoleMarryDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryDBData, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryDBData, toslef_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryDBData, toother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryDBData, dup_record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryDBData, lasttime_),
  };
  RoleMarryDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleMarryDBData_descriptor_,
      RoleMarryDBData::default_instance_,
      RoleMarryDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMarryDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleMarryDBData));
  EncylopediaDBData_descriptor_ = file->message_type(74);
  static const int EncylopediaDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncylopediaDBData, hand_book_),
  };
  EncylopediaDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncylopediaDBData_descriptor_,
      EncylopediaDBData::default_instance_,
      EncylopediaDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncylopediaDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncylopediaDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncylopediaDBData));
  GVBPData_descriptor_ = file->message_type(75);
  static const int GVBPData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPData, rewards_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPData, daily_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPData, record_time_),
  };
  GVBPData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GVBPData_descriptor_,
      GVBPData::default_instance_,
      GVBPData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GVBPData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GVBPData));
  ChargeDBData_descriptor_ = file->message_type(76);
  static const int ChargeDBData_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, first_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, first_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, dia_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, dia_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, star_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, star_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, king_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, king_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, second_rmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, second_fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, open_total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, open_total_fetch_),
  };
  ChargeDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChargeDBData_descriptor_,
      ChargeDBData::default_instance_,
      ChargeDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChargeDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChargeDBData));
  GiftCondDBProto_descriptor_ = file->message_type(77);
  static const int GiftCondDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCondDBProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCondDBProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCondDBProto, buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCondDBProto, close_),
  };
  GiftCondDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiftCondDBProto_descriptor_,
      GiftCondDBProto::default_instance_,
      GiftCondDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCondDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftCondDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiftCondDBProto));
  GiftZeroDBProto_descriptor_ = file->message_type(78);
  static const int GiftZeroDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroDBProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroDBProto, buy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroDBProto, fetch_),
  };
  GiftZeroDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiftZeroDBProto_descriptor_,
      GiftZeroDBProto::default_instance_,
      GiftZeroDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiftZeroDBProto));
  GiftZeroLogDBProto_descriptor_ = file->message_type(79);
  static const int GiftZeroLogDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroLogDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroLogDBProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroLogDBProto, value_),
  };
  GiftZeroLogDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiftZeroLogDBProto_descriptor_,
      GiftZeroLogDBProto::default_instance_,
      GiftZeroLogDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroLogDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftZeroLogDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiftZeroLogDBProto));
  GiftDBData_descriptor_ = file->message_type(80);
  static const int GiftDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftDBData, cond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftDBData, zero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftDBData, zero_log_),
  };
  GiftDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiftDBData_descriptor_,
      GiftDBData::default_instance_,
      GiftDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiftDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiftDBData));
  FestSimpleDBProto_descriptor_ = file->message_type(81);
  static const int FestSimpleDBProto_offsets_[1] = {
  };
  FestSimpleDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestSimpleDBProto_descriptor_,
      FestSimpleDBProto::default_instance_,
      FestSimpleDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSimpleDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestSimpleDBProto));
  FestShopDBProto_descriptor_ = file->message_type(82);
  static const int FestShopDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopDBProto, info_),
  };
  FestShopDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestShopDBProto_descriptor_,
      FestShopDBProto::default_instance_,
      FestShopDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestShopDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestShopDBProto));
  FestSignDBProto_descriptor_ = file->message_type(83);
  static const int FestSignDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSignDBProto, is_sign_),
  };
  FestSignDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestSignDBProto_descriptor_,
      FestSignDBProto::default_instance_,
      FestSignDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSignDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestSignDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestSignDBProto));
  FestGoldStoreDBProto_descriptor_ = file->message_type(84);
  static const int FestGoldStoreDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestGoldStoreDBProto, info_),
  };
  FestGoldStoreDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestGoldStoreDBProto_descriptor_,
      FestGoldStoreDBProto::default_instance_,
      FestGoldStoreDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestGoldStoreDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestGoldStoreDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestGoldStoreDBProto));
  FestDigEggTaskDBProto_descriptor_ = file->message_type(85);
  static const int FestDigEggTaskDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskDBProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskDBProto, cur_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskDBProto, fetch_),
  };
  FestDigEggTaskDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDigEggTaskDBProto_descriptor_,
      FestDigEggTaskDBProto::default_instance_,
      FestDigEggTaskDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggTaskDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDigEggTaskDBProto));
  FestDigEggDBProto_descriptor_ = file->message_type(86);
  static const int FestDigEggDBProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggDBProto, id_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggDBProto, free_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggDBProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggDBProto, auto_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggDBProto, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggDBProto, task_time_),
  };
  FestDigEggDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDigEggDBProto_descriptor_,
      FestDigEggDBProto::default_instance_,
      FestDigEggDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDigEggDBProto));
  FestCandleDBProto_descriptor_ = file->message_type(87);
  static const int FestCandleDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleDBProto, id_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleDBProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleDBProto, harm_),
  };
  FestCandleDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCandleDBProto_descriptor_,
      FestCandleDBProto::default_instance_,
      FestCandleDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCandleDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCandleDBProto));
  FestBtDragonDBProto_descriptor_ = file->message_type(88);
  static const int FestBtDragonDBProto_offsets_[1] = {
  };
  FestBtDragonDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestBtDragonDBProto_descriptor_,
      FestBtDragonDBProto::default_instance_,
      FestBtDragonDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBtDragonDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBtDragonDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestBtDragonDBProto));
  FestRTurnableRechargeDBProto_descriptor_ = file->message_type(89);
  static const int FestRTurnableRechargeDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeDBProto, info_),
  };
  FestRTurnableRechargeDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestRTurnableRechargeDBProto_descriptor_,
      FestRTurnableRechargeDBProto::default_instance_,
      FestRTurnableRechargeDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableRechargeDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestRTurnableRechargeDBProto));
  FestDailyTotalRechargeDBProto_descriptor_ = file->message_type(90);
  static const int FestDailyTotalRechargeDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDailyTotalRechargeDBProto, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDailyTotalRechargeDBProto, total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDailyTotalRechargeDBProto, flush_time_),
  };
  FestDailyTotalRechargeDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDailyTotalRechargeDBProto_descriptor_,
      FestDailyTotalRechargeDBProto::default_instance_,
      FestDailyTotalRechargeDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDailyTotalRechargeDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDailyTotalRechargeDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDailyTotalRechargeDBProto));
  FestTurnableDBProto_descriptor_ = file->message_type(91);
  static const int FestTurnableDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableDBProto, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableDBProto, left_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableDBProto, flush_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableDBProto, chou_jiang_ids_),
  };
  FestTurnableDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestTurnableDBProto_descriptor_,
      FestTurnableDBProto::default_instance_,
      FestTurnableDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestTurnableDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestTurnableDBProto));
  FestDonateDBProto_descriptor_ = file->message_type(92);
  static const int FestDonateDBProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBProto, single_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBProto, server_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBProto, single_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBProto, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBProto, flush_time_),
  };
  FestDonateDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateDBProto_descriptor_,
      FestDonateDBProto::default_instance_,
      FestDonateDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateDBProto));
  FestOnlineDBProto_descriptor_ = file->message_type(93);
  static const int FestOnlineDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineDBProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineDBProto, flush_time_),
  };
  FestOnlineDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestOnlineDBProto_descriptor_,
      FestOnlineDBProto::default_instance_,
      FestOnlineDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestOnlineDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestOnlineDBProto));
  FestCollectWordDBProto_descriptor_ = file->message_type(94);
  static const int FestCollectWordDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWordDBProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWordDBProto, flush_time_),
  };
  FestCollectWordDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestCollectWordDBProto_descriptor_,
      FestCollectWordDBProto::default_instance_,
      FestCollectWordDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWordDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestCollectWordDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestCollectWordDBProto));
  FestBossFirstDB_descriptor_ = file->message_type(95);
  static const int FestBossFirstDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossFirstDB, recv_kill_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossFirstDB, recv_red_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossFirstDB, m_kills_ids_),
  };
  FestBossFirstDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestBossFirstDB_descriptor_,
      FestBossFirstDB::default_instance_,
      FestBossFirstDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossFirstDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestBossFirstDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestBossFirstDB));
  FMarryRoleDB_descriptor_ = file->message_type(96);
  static const int FMarryRoleDB_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleDB, tasks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleDB, process_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleDB, score_),
  };
  FMarryRoleDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FMarryRoleDB_descriptor_,
      FMarryRoleDB::default_instance_,
      FMarryRoleDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FMarryRoleDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FMarryRoleDB));
  DayTotalRechargeDBProto_descriptor_ = file->message_type(97);
  static const int DayTotalRechargeDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTotalRechargeDBProto, fetch_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTotalRechargeDBProto, recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTotalRechargeDBProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTotalRechargeDBProto, reset_time_),
  };
  DayTotalRechargeDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DayTotalRechargeDBProto_descriptor_,
      DayTotalRechargeDBProto::default_instance_,
      DayTotalRechargeDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTotalRechargeDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DayTotalRechargeDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DayTotalRechargeDBProto));
  TotalRechargeDBProto_descriptor_ = file->message_type(98);
  static const int TotalRechargeDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRechargeDBProto, fetch_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRechargeDBProto, recharge_),
  };
  TotalRechargeDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TotalRechargeDBProto_descriptor_,
      TotalRechargeDBProto::default_instance_,
      TotalRechargeDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRechargeDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalRechargeDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TotalRechargeDBProto));
  LoginRewardDBProto_descriptor_ = file->message_type(99);
  static const int LoginRewardDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRewardDBProto, fetch_),
  };
  LoginRewardDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRewardDBProto_descriptor_,
      LoginRewardDBProto::default_instance_,
      LoginRewardDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRewardDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRewardDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRewardDBProto));
  FestDetailDBProto_descriptor_ = file->message_type(100);
  static const int FestDetailDBProto_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, period_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, shop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, daily_total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, gold_store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, dig_egg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, rturnable_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, turntable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, donate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, collect_word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, draw_pize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, server_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, hui_meng_xi_you_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, bt_dragon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, candle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, marry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, day_total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, total_recharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, login_),
  };
  FestDetailDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDetailDBProto_descriptor_,
      FestDetailDBProto::default_instance_,
      FestDetailDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDetailDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDetailDBProto));
  FestDBData_descriptor_ = file->message_type(101);
  static const int FestDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDBData, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDBData, close_),
  };
  FestDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDBData_descriptor_,
      FestDBData::default_instance_,
      FestDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDBData));
  ShadowDBProto_descriptor_ = file->message_type(102);
  static const int ShadowDBProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowDBProto, lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowDBProto, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowDBProto, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowDBProto, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowDBProto, frag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowDBProto, curstar_),
  };
  ShadowDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShadowDBProto_descriptor_,
      ShadowDBProto::default_instance_,
      ShadowDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShadowDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShadowDBProto));
  HaloDBProto_descriptor_ = file->message_type(103);
  static const int HaloDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloDBProto, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloDBProto, curid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloDBProto, curstar_),
  };
  HaloDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HaloDBProto_descriptor_,
      HaloDBProto::default_instance_,
      HaloDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HaloDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HaloDBProto));
  DragonDBData_descriptor_ = file->message_type(104);
  static const int DragonDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DragonDBData, shadow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DragonDBData, halo_),
  };
  DragonDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DragonDBData_descriptor_,
      DragonDBData::default_instance_,
      DragonDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DragonDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DragonDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DragonDBData));
  RoleDBTurnData_descriptor_ = file->message_type(105);
  static const int RoleDBTurnData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTurnData, entrys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTurnData, simple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTurnData, helper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTurnData, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTurnData, tasks_),
  };
  RoleDBTurnData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBTurnData_descriptor_,
      RoleDBTurnData::default_instance_,
      RoleDBTurnData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTurnData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBTurnData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBTurnData));
  GMADbData_descriptor_ = file->message_type(106);
  static const int GMADbData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADbData, remaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADbData, freetimeremain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADbData, freetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADbData, privilege_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADbData, recvfreetimeprev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADbData, exptotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADbData, expaccumulate_),
  };
  GMADbData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMADbData_descriptor_,
      GMADbData::default_instance_,
      GMADbData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADbData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMADbData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMADbData));
  SoulDBData_descriptor_ = file->message_type(107);
  static const int SoulDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulDBData, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulDBData, pool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulDBData, tasks_),
  };
  SoulDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SoulDBData_descriptor_,
      SoulDBData::default_instance_,
      SoulDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SoulDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SoulDBData));
  RoleDBData_descriptor_ = file->message_type(108);
  static const int RoleDBData_offsets_[52] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, bag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, unlockinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, grow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, mini_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, mini_activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, dup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, mount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, deity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, pet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, mall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, convoy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, assist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, godevil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, occupatoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, pay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, role_faction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, best_equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, achievement_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, ancient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, pvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, ptdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, role_marry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, encylopeddia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, gvb_pdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, psdatas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, dragon_soul_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, welfare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, daily_welfare_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, gift_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, find_treature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, fest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, dragon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, turn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, gma_datas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, soul_),
  };
  RoleDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleDBData_descriptor_,
      RoleDBData::default_instance_,
      RoleDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleDBData));
  RedWaitDBProto_descriptor_ = file->message_type(109);
  static const int RedWaitDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitDBProto, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitDBProto, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitDBProto, time_),
  };
  RedWaitDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedWaitDBProto_descriptor_,
      RedWaitDBProto::default_instance_,
      RedWaitDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedWaitDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedWaitDBProto));
  RedTriggerDBProto_descriptor_ = file->message_type(110);
  static const int RedTriggerDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedTriggerDBProto, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedTriggerDBProto, count_),
  };
  RedTriggerDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedTriggerDBProto_descriptor_,
      RedTriggerDBProto::default_instance_,
      RedTriggerDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedTriggerDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedTriggerDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedTriggerDBProto));
  RoleRedDBData_descriptor_ = file->message_type(111);
  static const int RoleRedDBData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, bdia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, magic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, todaynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, todaymagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, todaybdia_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, freshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, send_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, wait_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, trigger_lst_),
  };
  RoleRedDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRedDBData_descriptor_,
      RoleRedDBData::default_instance_,
      RoleRedDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRedDBData));
  RedFetchDBProto_descriptor_ = file->message_type(112);
  static const int RedFetchDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchDBProto, val_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchDBProto, time_),
  };
  RedFetchDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedFetchDBProto_descriptor_,
      RedFetchDBProto::default_instance_,
      RedFetchDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedFetchDBProto));
  RedFetchListDBProto_descriptor_ = file->message_type(113);
  static const int RedFetchListDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchListDBProto, info_),
  };
  RedFetchListDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedFetchListDBProto_descriptor_,
      RedFetchListDBProto::default_instance_,
      RedFetchListDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchListDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedFetchListDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedFetchListDBProto));
  RedSendDBProto_descriptor_ = file->message_type(114);
  static const int RedSendDBProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSendDBProto, idx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSendDBProto, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSendDBProto, sender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSendDBProto, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSendDBProto, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSendDBProto, finish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSendDBProto, fetch_),
  };
  RedSendDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedSendDBProto_descriptor_,
      RedSendDBProto::default_instance_,
      RedSendDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSendDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedSendDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedSendDBProto));
  RedDBData_descriptor_ = file->message_type(115);
  static const int RedDBData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDBData, wait_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDBData, trigger_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDBData, freshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDBData, send_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDBData, faction_id_),
  };
  RedDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedDBData_descriptor_,
      RedDBData::default_instance_,
      RedDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedDBData));
  RoleMirrorData_descriptor_ = file->message_type(116);
  static const int RoleMirrorData_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, beast_equips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, beast_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, campid_),
  };
  RoleMirrorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleMirrorData_descriptor_,
      RoleMirrorData::default_instance_,
      RoleMirrorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleMirrorData));
  RoleMirrorData_Type_descriptor_ = RoleMirrorData_descriptor_->enum_type(0);
  FactionMemDBProto_descriptor_ = file->message_type(117);
  static const int FactionMemDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, join_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, total_contri_),
  };
  FactionMemDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMemDBProto_descriptor_,
      FactionMemDBProto::default_instance_,
      FactionMemDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMemDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMemDBProto));
  FactionMultMemDBProto_descriptor_ = file->message_type(118);
  static const int FactionMultMemDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultMemDBProto, mem_lst_),
  };
  FactionMultMemDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMultMemDBProto_descriptor_,
      FactionMultMemDBProto::default_instance_,
      FactionMultMemDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultMemDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultMemDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMultMemDBProto));
  FactionApplyDBProto_descriptor_ = file->message_type(119);
  static const int FactionApplyDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyDBProto, time_),
  };
  FactionApplyDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionApplyDBProto_descriptor_,
      FactionApplyDBProto::default_instance_,
      FactionApplyDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionApplyDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionApplyDBProto));
  FactionMultApplyDBProto_descriptor_ = file->message_type(120);
  static const int FactionMultApplyDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultApplyDBProto, apply_lst_),
  };
  FactionMultApplyDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMultApplyDBProto_descriptor_,
      FactionMultApplyDBProto::default_instance_,
      FactionMultApplyDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultApplyDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMultApplyDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMultApplyDBProto));
  FactionRecordDBProto_descriptor_ = file->message_type(121);
  static const int FactionRecordDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, param1_),
  };
  FactionRecordDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRecordDBProto_descriptor_,
      FactionRecordDBProto::default_instance_,
      FactionRecordDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRecordDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRecordDBProto));
  FactionMutRecordDBProto_descriptor_ = file->message_type(122);
  static const int FactionMutRecordDBProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMutRecordDBProto, record_lst_),
  };
  FactionMutRecordDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMutRecordDBProto_descriptor_,
      FactionMutRecordDBProto::default_instance_,
      FactionMutRecordDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMutRecordDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMutRecordDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMutRecordDBProto));
  FactionDBBase_descriptor_ = file->message_type(123);
  static const int FactionDBBase_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, leader_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, last_notice_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, create_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, proxy_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, proxy_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, grade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, member_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, record_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, apply_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, apply_lev_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, apply_fight_),
  };
  FactionDBBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBBase_descriptor_,
      FactionDBBase::default_instance_,
      FactionDBBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBBase));
  FactionBeastHarmDBProto_descriptor_ = file->message_type(124);
  static const int FactionBeastHarmDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastHarmDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastHarmDBProto, harm_),
  };
  FactionBeastHarmDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionBeastHarmDBProto_descriptor_,
      FactionBeastHarmDBProto::default_instance_,
      FactionBeastHarmDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastHarmDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastHarmDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionBeastHarmDBProto));
  FactionBeastDBData_descriptor_ = file->message_type(125);
  static const int FactionBeastDBData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, is_open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, tribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, today_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, today_fresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, week_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, week_fresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, opentime_),
  };
  FactionBeastDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionBeastDBData_descriptor_,
      FactionBeastDBData::default_instance_,
      FactionBeastDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionBeastDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionBeastDBData));
  FactionGuardHarmDBProto_descriptor_ = file->message_type(126);
  static const int FactionGuardHarmDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardHarmDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardHarmDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardHarmDBProto, harm_),
  };
  FactionGuardHarmDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionGuardHarmDBProto_descriptor_,
      FactionGuardHarmDBProto::default_instance_,
      FactionGuardHarmDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardHarmDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardHarmDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionGuardHarmDBProto));
  FactionGuardDBData_descriptor_ = file->message_type(127);
  static const int FactionGuardDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardDBData, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardDBData, old_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardDBData, can_enter_),
  };
  FactionGuardDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionGuardDBData_descriptor_,
      FactionGuardDBData::default_instance_,
      FactionGuardDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionGuardDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionGuardDBData));
  FactionMoyu_descriptor_ = file->message_type(128);
  static const int FactionMoyu_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, week_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, last_week_harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, cur_layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, cur_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, max_hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, harm_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, refresh_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, pass_layer_),
  };
  FactionMoyu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionMoyu_descriptor_,
      FactionMoyu::default_instance_,
      FactionMoyu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionMoyu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionMoyu));
  FactionDBData_descriptor_ = file->message_type(129);
  static const int FactionDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBData, beast_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBData, guard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBData, moyu_),
  };
  FactionDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBData_descriptor_,
      FactionDBData::default_instance_,
      FactionDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBData));
  FactionAllDBData_descriptor_ = file->message_type(130);
  static const int FactionAllDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, base_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, data_),
  };
  FactionAllDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionAllDBData_descriptor_,
      FactionAllDBData::default_instance_,
      FactionAllDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionAllDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionAllDBData));
  FactionDBMoyuRankEntry_descriptor_ = file->message_type(131);
  static const int FactionDBMoyuRankEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankEntry, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankEntry, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankEntry, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankEntry, harm_time_),
  };
  FactionDBMoyuRankEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBMoyuRankEntry_descriptor_,
      FactionDBMoyuRankEntry::default_instance_,
      FactionDBMoyuRankEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBMoyuRankEntry));
  FactionDBMoyuRank_descriptor_ = file->message_type(132);
  static const int FactionDBMoyuRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRank, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRank, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRank, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRank, time_),
  };
  FactionDBMoyuRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBMoyuRank_descriptor_,
      FactionDBMoyuRank::default_instance_,
      FactionDBMoyuRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBMoyuRank));
  FactionDBMoyuRankDB_descriptor_ = file->message_type(133);
  static const int FactionDBMoyuRankDB_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankDB, infos_),
  };
  FactionDBMoyuRankDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDBMoyuRankDB_descriptor_,
      FactionDBMoyuRankDB::default_instance_,
      FactionDBMoyuRankDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDBMoyuRankDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDBMoyuRankDB));
  RoleListDBReq_descriptor_ = file->message_type(134);
  static const int RoleListDBReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, born_zid_),
  };
  RoleListDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleListDBReq_descriptor_,
      RoleListDBReq::default_instance_,
      RoleListDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleListDBReq));
  RoleListDBRsp_descriptor_ = file->message_type(135);
  static const int RoleListDBRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, role_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, regnum_),
  };
  RoleListDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleListDBRsp_descriptor_,
      RoleListDBRsp::default_instance_,
      RoleListDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleListDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleListDBRsp));
  CreateRoleDBReq_descriptor_ = file->message_type(136);
  static const int CreateRoleDBReq_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, channel_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, zone_mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, born_zid_),
  };
  CreateRoleDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoleDBReq_descriptor_,
      CreateRoleDBReq::default_instance_,
      CreateRoleDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoleDBReq));
  CreateRoleDBRsp_descriptor_ = file->message_type(137);
  static const int CreateRoleDBRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, born_zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, simple_),
  };
  CreateRoleDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoleDBRsp_descriptor_,
      CreateRoleDBRsp::default_instance_,
      CreateRoleDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoleDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoleDBRsp));
  RoleInfoDBReq_descriptor_ = file->message_type(138);
  static const int RoleInfoDBReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, change_),
  };
  RoleInfoDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleInfoDBReq_descriptor_,
      RoleInfoDBReq::default_instance_,
      RoleInfoDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleInfoDBReq));
  RoleInfoDBRsp_descriptor_ = file->message_type(139);
  static const int RoleInfoDBRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, reqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, info_),
  };
  RoleInfoDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleInfoDBRsp_descriptor_,
      RoleInfoDBRsp::default_instance_,
      RoleInfoDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleInfoDBRsp));
  RoleInfoUpdateDBReq_descriptor_ = file->message_type(140);
  static const int RoleInfoUpdateDBReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, info_),
  };
  RoleInfoUpdateDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleInfoUpdateDBReq_descriptor_,
      RoleInfoUpdateDBReq::default_instance_,
      RoleInfoUpdateDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleInfoUpdateDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleInfoUpdateDBReq));
  RoleChgNameDBReq_descriptor_ = file->message_type(141);
  static const int RoleChgNameDBReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBReq, name_),
  };
  RoleChgNameDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleChgNameDBReq_descriptor_,
      RoleChgNameDBReq::default_instance_,
      RoleChgNameDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleChgNameDBReq));
  RoleChgNameDBRsp_descriptor_ = file->message_type(142);
  static const int RoleChgNameDBRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, name_),
  };
  RoleChgNameDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleChgNameDBRsp_descriptor_,
      RoleChgNameDBRsp::default_instance_,
      RoleChgNameDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleChgNameDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleChgNameDBRsp));
  RoleSimpleListDBReq_descriptor_ = file->message_type(143);
  static const int RoleSimpleListDBReq_offsets_[1] = {
  };
  RoleSimpleListDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSimpleListDBReq_descriptor_,
      RoleSimpleListDBReq::default_instance_,
      RoleSimpleListDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSimpleListDBReq));
  RoleSimpleListDBRsp_descriptor_ = file->message_type(144);
  static const int RoleSimpleListDBRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, finish_flag_),
  };
  RoleSimpleListDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleSimpleListDBRsp_descriptor_,
      RoleSimpleListDBRsp::default_instance_,
      RoleSimpleListDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleSimpleListDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleSimpleListDBRsp));
  CreatureTransLogicDBReq_descriptor_ = file->message_type(145);
  static const int CreatureTransLogicDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBReq, trans_data_),
  };
  CreatureTransLogicDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureTransLogicDBReq_descriptor_,
      CreatureTransLogicDBReq::default_instance_,
      CreatureTransLogicDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureTransLogicDBReq));
  CreatureTransLogicDBRsp_descriptor_ = file->message_type(146);
  static const int CreatureTransLogicDBRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBRsp, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBRsp, cid_),
  };
  CreatureTransLogicDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureTransLogicDBRsp_descriptor_,
      CreatureTransLogicDBRsp::default_instance_,
      CreatureTransLogicDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureTransLogicDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureTransLogicDBRsp));
  NewMailDBInfo_descriptor_ = file->message_type(147);
  static const int NewMailDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMailDBInfo, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMailDBInfo, result_),
  };
  NewMailDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewMailDBInfo_descriptor_,
      NewMailDBInfo::default_instance_,
      NewMailDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMailDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewMailDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewMailDBInfo));
  MailDBOperateInfo_descriptor_ = file->message_type(148);
  static const int MailDBOperateInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBOperateInfo, mid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBOperateInfo, result_),
  };
  MailDBOperateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailDBOperateInfo_descriptor_,
      MailDBOperateInfo::default_instance_,
      MailDBOperateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBOperateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailDBOperateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailDBOperateInfo));
  SaveMailDBReq_descriptor_ = file->message_type(149);
  static const int SaveMailDBReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, notify_),
  };
  SaveMailDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveMailDBReq_descriptor_,
      SaveMailDBReq::default_instance_,
      SaveMailDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveMailDBReq));
  SaveMailDBRsp_descriptor_ = file->message_type(150);
  static const int SaveMailDBRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, del_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, notify_),
  };
  SaveMailDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveMailDBRsp_descriptor_,
      SaveMailDBRsp::default_instance_,
      SaveMailDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMailDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveMailDBRsp));
  CharacterMailDBRequest_descriptor_ = file->message_type(151);
  static const int CharacterMailDBRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, zone_mail_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, reqid_),
  };
  CharacterMailDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMailDBRequest_descriptor_,
      CharacterMailDBRequest::default_instance_,
      CharacterMailDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMailDBRequest));
  CharacterMailDBResponse_descriptor_ = file->message_type(152);
  static const int CharacterMailDBResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, zonemailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, reqid_),
  };
  CharacterMailDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharacterMailDBResponse_descriptor_,
      CharacterMailDBResponse::default_instance_,
      CharacterMailDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharacterMailDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharacterMailDBResponse));
  MaxMailIDRequest_descriptor_ = file->message_type(153);
  static const int MaxMailIDRequest_offsets_[1] = {
  };
  MaxMailIDRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxMailIDRequest_descriptor_,
      MaxMailIDRequest::default_instance_,
      MaxMailIDRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxMailIDRequest));
  MaxMailIDResponse_descriptor_ = file->message_type(154);
  static const int MaxMailIDResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, maxzonemailid_),
  };
  MaxMailIDResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaxMailIDResponse_descriptor_,
      MaxMailIDResponse::default_instance_,
      MaxMailIDResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaxMailIDResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaxMailIDResponse));
  DeleteCharacterMail_descriptor_ = file->message_type(155);
  static const int DeleteCharacterMail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharacterMail, charid_),
  };
  DeleteCharacterMail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteCharacterMail_descriptor_,
      DeleteCharacterMail::default_instance_,
      DeleteCharacterMail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharacterMail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteCharacterMail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteCharacterMail));
  ZoneMailSaveRsp_descriptor_ = file->message_type(156);
  static const int ZoneMailSaveRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailSaveRsp, mailid_),
  };
  ZoneMailSaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneMailSaveRsp_descriptor_,
      ZoneMailSaveRsp::default_instance_,
      ZoneMailSaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailSaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailSaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneMailSaveRsp));
  ZoneMailTransCharacterMailReq_descriptor_ = file->message_type(157);
  static const int ZoneMailTransCharacterMailReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailReq, mailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailReq, createtime_),
  };
  ZoneMailTransCharacterMailReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneMailTransCharacterMailReq_descriptor_,
      ZoneMailTransCharacterMailReq::default_instance_,
      ZoneMailTransCharacterMailReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneMailTransCharacterMailReq));
  ZoneMailTransCharacterMailRsp_descriptor_ = file->message_type(158);
  static const int ZoneMailTransCharacterMailRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailRsp, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailRsp, max_zone_mailid_),
  };
  ZoneMailTransCharacterMailRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneMailTransCharacterMailRsp_descriptor_,
      ZoneMailTransCharacterMailRsp::default_instance_,
      ZoneMailTransCharacterMailRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneMailTransCharacterMailRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneMailTransCharacterMailRsp));
  WebMailDBDataReq_descriptor_ = file->message_type(159);
  static const int WebMailDBDataReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, pernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, id_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, webid_),
  };
  WebMailDBDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebMailDBDataReq_descriptor_,
      WebMailDBDataReq::default_instance_,
      WebMailDBDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebMailDBDataReq));
  WebMailDBDataRsp_descriptor_ = file->message_type(160);
  static const int WebMailDBDataRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, op_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, curpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, id_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, info_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, webid_),
  };
  WebMailDBDataRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WebMailDBDataRsp_descriptor_,
      WebMailDBDataRsp::default_instance_,
      WebMailDBDataRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WebMailDBDataRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WebMailDBDataRsp));
  FriendDBInfo_descriptor_ = file->message_type(161);
  static const int FriendDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, data_),
  };
  FriendDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDBInfo_descriptor_,
      FriendDBInfo::default_instance_,
      FriendDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDBInfo));
  FriendDBRequest_descriptor_ = file->message_type(162);
  static const int FriendDBRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, dstid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, query_times_),
  };
  FriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDBRequest_descriptor_,
      FriendDBRequest::default_instance_,
      FriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDBRequest));
  FriendDBResponse_descriptor_ = file->message_type(163);
  static const int FriendDBResponse_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, info_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, last_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, query_times_),
  };
  FriendDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendDBResponse_descriptor_,
      FriendDBResponse::default_instance_,
      FriendDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendDBResponse));
  AllFriendDBRequest_descriptor_ = file->message_type(164);
  static const int AllFriendDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, offset_),
  };
  AllFriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllFriendDBRequest_descriptor_,
      AllFriendDBRequest::default_instance_,
      AllFriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllFriendDBRequest));
  AllFriendDBResponse_descriptor_ = file->message_type(165);
  static const int AllFriendDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, info_),
  };
  AllFriendDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllFriendDBResponse_descriptor_,
      AllFriendDBResponse::default_instance_,
      AllFriendDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllFriendDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllFriendDBResponse));
  SaveFriendDBRequest_descriptor_ = file->message_type(166);
  static const int SaveFriendDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFriendDBRequest, info_),
  };
  SaveFriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveFriendDBRequest_descriptor_,
      SaveFriendDBRequest::default_instance_,
      SaveFriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveFriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveFriendDBRequest));
  DelteFriendDBRequest_descriptor_ = file->message_type(167);
  static const int DelteFriendDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelteFriendDBRequest, charid_),
  };
  DelteFriendDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelteFriendDBRequest_descriptor_,
      DelteFriendDBRequest::default_instance_,
      DelteFriendDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelteFriendDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelteFriendDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelteFriendDBRequest));
  GlobalDBRequst_descriptor_ = file->message_type(168);
  static const int GlobalDBRequst_offsets_[1] = {
  };
  GlobalDBRequst_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBRequst_descriptor_,
      GlobalDBRequst::default_instance_,
      GlobalDBRequst_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBRequst, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBRequst, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBRequst));
  GlobalDBEntry_descriptor_ = file->message_type(169);
  static const int GlobalDBEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBEntry, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBEntry, data_),
  };
  GlobalDBEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBEntry_descriptor_,
      GlobalDBEntry::default_instance_,
      GlobalDBEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBEntry));
  GlobalDBResponse_descriptor_ = file->message_type(170);
  static const int GlobalDBResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, entry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, isfinish_),
  };
  GlobalDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBResponse_descriptor_,
      GlobalDBResponse::default_instance_,
      GlobalDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBResponse));
  GlobalDBSetRequest_descriptor_ = file->message_type(171);
  static const int GlobalDBSetRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, data_),
  };
  GlobalDBSetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBSetRequest_descriptor_,
      GlobalDBSetRequest::default_instance_,
      GlobalDBSetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBSetRequest));
  GlobalDBSetResponse_descriptor_ = file->message_type(172);
  static const int GlobalDBSetResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, type_id_),
  };
  GlobalDBSetResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalDBSetResponse_descriptor_,
      GlobalDBSetResponse::default_instance_,
      GlobalDBSetResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalDBSetResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalDBSetResponse));
  GlobalComData_descriptor_ = file->message_type(173);
  static const int GlobalComData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalComData, towerdupreward_),
  };
  GlobalComData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalComData_descriptor_,
      GlobalComData::default_instance_,
      GlobalComData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalComData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalComData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalComData));
  GlobalYaotaDupDBEntry_descriptor_ = file->message_type(174);
  static const int GlobalYaotaDupDBEntry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalYaotaDupDBEntry, dupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalYaotaDupDBEntry, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalYaotaDupDBEntry, time_),
  };
  GlobalYaotaDupDBEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalYaotaDupDBEntry_descriptor_,
      GlobalYaotaDupDBEntry::default_instance_,
      GlobalYaotaDupDBEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalYaotaDupDBEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalYaotaDupDBEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalYaotaDupDBEntry));
  GlobalYaotaDupDBData_descriptor_ = file->message_type(175);
  static const int GlobalYaotaDupDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalYaotaDupDBData, entrys_),
  };
  GlobalYaotaDupDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GlobalYaotaDupDBData_descriptor_,
      GlobalYaotaDupDBData::default_instance_,
      GlobalYaotaDupDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalYaotaDupDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GlobalYaotaDupDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GlobalYaotaDupDBData));
  ActDBProto_descriptor_ = file->message_type(176);
  static const int ActDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, finishtime_),
  };
  ActDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActDBProto_descriptor_,
      ActDBProto::default_instance_,
      ActDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActDBProto));
  ActDBReq_descriptor_ = file->message_type(177);
  static const int ActDBReq_offsets_[1] = {
  };
  ActDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActDBReq_descriptor_,
      ActDBReq::default_instance_,
      ActDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActDBReq));
  ActDBRsp_descriptor_ = file->message_type(178);
  static const int ActDBRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBRsp, lst_),
  };
  ActDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActDBRsp_descriptor_,
      ActDBRsp::default_instance_,
      ActDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActDBRsp));
  ActSaveDBReq_descriptor_ = file->message_type(179);
  static const int ActSaveDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActSaveDBReq, lst_),
  };
  ActSaveDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActSaveDBReq_descriptor_,
      ActSaveDBReq::default_instance_,
      ActSaveDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActSaveDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActSaveDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActSaveDBReq));
  AllArenaDBRequest_descriptor_ = file->message_type(180);
  static const int AllArenaDBRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBRequest, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBRequest, retnum_),
  };
  AllArenaDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllArenaDBRequest_descriptor_,
      AllArenaDBRequest::default_instance_,
      AllArenaDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllArenaDBRequest));
  ArenaDBInfo_descriptor_ = file->message_type(181);
  static const int ArenaDBInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDBInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDBInfo, rankid_),
  };
  ArenaDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaDBInfo_descriptor_,
      ArenaDBInfo::default_instance_,
      ArenaDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaDBInfo));
  ArenaMoreDBInfo_descriptor_ = file->message_type(182);
  static const int ArenaMoreDBInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, givereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, max_rank_),
  };
  ArenaMoreDBInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaMoreDBInfo_descriptor_,
      ArenaMoreDBInfo::default_instance_,
      ArenaMoreDBInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaMoreDBInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaMoreDBInfo));
  AllArenaDBResponse_descriptor_ = file->message_type(183);
  static const int AllArenaDBResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, info_),
  };
  AllArenaDBResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllArenaDBResponse_descriptor_,
      AllArenaDBResponse::default_instance_,
      AllArenaDBResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllArenaDBResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllArenaDBResponse));
  SaveArenaDBRequest_descriptor_ = file->message_type(184);
  static const int SaveArenaDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveArenaDBRequest, info_),
  };
  SaveArenaDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveArenaDBRequest_descriptor_,
      SaveArenaDBRequest::default_instance_,
      SaveArenaDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveArenaDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveArenaDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveArenaDBRequest));
  DeleteArenaDBRequest_descriptor_ = file->message_type(185);
  static const int DeleteArenaDBRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteArenaDBRequest, charid_),
  };
  DeleteArenaDBRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteArenaDBRequest_descriptor_,
      DeleteArenaDBRequest::default_instance_,
      DeleteArenaDBRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteArenaDBRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteArenaDBRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteArenaDBRequest));
  RoleMirrorDBReq_descriptor_ = file->message_type(186);
  static const int RoleMirrorDBReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, reqtype_),
  };
  RoleMirrorDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleMirrorDBReq_descriptor_,
      RoleMirrorDBReq::default_instance_,
      RoleMirrorDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleMirrorDBReq));
  RoleMirrorDBRsp_descriptor_ = file->message_type(187);
  static const int RoleMirrorDBRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, int_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, str_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, reqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, data_),
  };
  RoleMirrorDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleMirrorDBRsp_descriptor_,
      RoleMirrorDBRsp::default_instance_,
      RoleMirrorDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleMirrorDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleMirrorDBRsp));
  FactionDataDBReq_descriptor_ = file->message_type(188);
  static const int FactionDataDBReq_offsets_[1] = {
  };
  FactionDataDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDataDBReq_descriptor_,
      FactionDataDBReq::default_instance_,
      FactionDataDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDataDBReq));
  FactionDataDBRsp_descriptor_ = file->message_type(189);
  static const int FactionDataDBRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBRsp, data_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBRsp, finish_),
  };
  FactionDataDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDataDBRsp_descriptor_,
      FactionDataDBRsp::default_instance_,
      FactionDataDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDataDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDataDBRsp));
  FactionSaveDBReq_descriptor_ = file->message_type(190);
  static const int FactionSaveDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSaveDBReq, data_),
  };
  FactionSaveDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionSaveDBReq_descriptor_,
      FactionSaveDBReq::default_instance_,
      FactionSaveDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSaveDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionSaveDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionSaveDBReq));
  FactionDelDBReq_descriptor_ = file->message_type(191);
  static const int FactionDelDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDelDBReq, faction_id_),
  };
  FactionDelDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionDelDBReq_descriptor_,
      FactionDelDBReq::default_instance_,
      FactionDelDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDelDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionDelDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionDelDBReq));
  FactionRedDBReq_descriptor_ = file->message_type(192);
  static const int FactionRedDBReq_offsets_[1] = {
  };
  FactionRedDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRedDBReq_descriptor_,
      FactionRedDBReq::default_instance_,
      FactionRedDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRedDBReq));
  FactionRedDBRsp_descriptor_ = file->message_type(193);
  static const int FactionRedDBRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedDBRsp, data_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedDBRsp, finish_),
  };
  FactionRedDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRedDBRsp_descriptor_,
      FactionRedDBRsp::default_instance_,
      FactionRedDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRedDBRsp));
  FactionRedSaveDBReq_descriptor_ = file->message_type(194);
  static const int FactionRedSaveDBReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedSaveDBReq, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedSaveDBReq, data0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedSaveDBReq, data1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedSaveDBReq, data2_),
  };
  FactionRedSaveDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRedSaveDBReq_descriptor_,
      FactionRedSaveDBReq::default_instance_,
      FactionRedSaveDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedSaveDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedSaveDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRedSaveDBReq));
  FactionRedDelDBReq_descriptor_ = file->message_type(195);
  static const int FactionRedDelDBReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedDelDBReq, faction_id_),
  };
  FactionRedDelDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionRedDelDBReq_descriptor_,
      FactionRedDelDBReq::default_instance_,
      FactionRedDelDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedDelDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionRedDelDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionRedDelDBReq));
  RoleRedDBReq_descriptor_ = file->message_type(196);
  static const int RoleRedDBReq_offsets_[1] = {
  };
  RoleRedDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRedDBReq_descriptor_,
      RoleRedDBReq::default_instance_,
      RoleRedDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRedDBReq));
  RoleRedDBRsp_descriptor_ = file->message_type(197);
  static const int RoleRedDBRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBRsp, data_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBRsp, finish_),
  };
  RoleRedDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleRedDBRsp_descriptor_,
      RoleRedDBRsp::default_instance_,
      RoleRedDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleRedDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleRedDBRsp));
  ComLoadDBReq_descriptor_ = file->message_type(198);
  static const int ComLoadDBReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadDBReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadDBReq, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadDBReq, cmd_),
  };
  ComLoadDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComLoadDBReq_descriptor_,
      ComLoadDBReq::default_instance_,
      ComLoadDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComLoadDBReq));
  ComLoadDBRsp_descriptor_ = file->message_type(199);
  static const int ComLoadDBRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadDBRsp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadDBRsp, data_),
  };
  ComLoadDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComLoadDBRsp_descriptor_,
      ComLoadDBRsp::default_instance_,
      ComLoadDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComLoadDBRsp));
  ComLoadAllDBReq_descriptor_ = file->message_type(200);
  static const int ComLoadAllDBReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadAllDBReq, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadAllDBReq, cmd_),
  };
  ComLoadAllDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComLoadAllDBReq_descriptor_,
      ComLoadAllDBReq::default_instance_,
      ComLoadAllDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadAllDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadAllDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComLoadAllDBReq));
  ComDBProto_descriptor_ = file->message_type(201);
  static const int ComDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDBProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDBProto, data_),
  };
  ComDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComDBProto_descriptor_,
      ComDBProto::default_instance_,
      ComDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComDBProto));
  ComLoadAllDBRsp_descriptor_ = file->message_type(202);
  static const int ComLoadAllDBRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadAllDBRsp, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadAllDBRsp, is_finish_),
  };
  ComLoadAllDBRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComLoadAllDBRsp_descriptor_,
      ComLoadAllDBRsp::default_instance_,
      ComLoadAllDBRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadAllDBRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComLoadAllDBRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComLoadAllDBRsp));
  ComSaveDBReq_descriptor_ = file->message_type(203);
  static const int ComSaveDBReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComSaveDBReq, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComSaveDBReq, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComSaveDBReq, table_name_),
  };
  ComSaveDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComSaveDBReq_descriptor_,
      ComSaveDBReq::default_instance_,
      ComSaveDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComSaveDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComSaveDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComSaveDBReq));
  ComDelDBReq_descriptor_ = file->message_type(204);
  static const int ComDelDBReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDelDBReq, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDelDBReq, id_lst_),
  };
  ComDelDBReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ComDelDBReq_descriptor_,
      ComDelDBReq::default_instance_,
      ComDelDBReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDelDBReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComDelDBReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ComDelDBReq));
  MarryApply_descriptor_ = file->message_type(205);
  static const int MarryApply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApply, apply_dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApply, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApply, gear_),
  };
  MarryApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryApply_descriptor_,
      MarryApply::default_instance_,
      MarryApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryApply));
  MarrySimpleInfo_descriptor_ = file->message_type(206);
  static const int MarrySimpleInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySimpleInfo, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySimpleInfo, dst_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySimpleInfo, marry_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySimpleInfo, brief_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySimpleInfo, apply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySimpleInfo, state_),
  };
  MarrySimpleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarrySimpleInfo_descriptor_,
      MarrySimpleInfo::default_instance_,
      MarrySimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarrySimpleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarrySimpleInfo));
  MarryDBLoadReq_descriptor_ = file->message_type(207);
  static const int MarryDBLoadReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBLoadReq, offset_),
  };
  MarryDBLoadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryDBLoadReq_descriptor_,
      MarryDBLoadReq::default_instance_,
      MarryDBLoadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBLoadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBLoadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryDBLoadReq));
  MarryDBLoadRsp_descriptor_ = file->message_type(208);
  static const int MarryDBLoadRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBLoadRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBLoadRsp, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBLoadRsp, simple_),
  };
  MarryDBLoadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryDBLoadRsp_descriptor_,
      MarryDBLoadRsp::default_instance_,
      MarryDBLoadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBLoadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBLoadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryDBLoadRsp));
  MarryDBSaveReq_descriptor_ = file->message_type(209);
  static const int MarryDBSaveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBSaveReq, info_),
  };
  MarryDBSaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryDBSaveReq_descriptor_,
      MarryDBSaveReq::default_instance_,
      MarryDBSaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBSaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryDBSaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryDBSaveReq));
  AnswerRankDBProto_descriptor_ = file->message_type(210);
  static const int AnswerRankDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankDBProto, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankDBProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankDBProto, zid_),
  };
  AnswerRankDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerRankDBProto_descriptor_,
      AnswerRankDBProto::default_instance_,
      AnswerRankDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerRankDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerRankDBProto));
  AnswerDBData_descriptor_ = file->message_type(211);
  static const int AnswerDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerDBData, rank_),
  };
  AnswerDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerDBData_descriptor_,
      AnswerDBData::default_instance_,
      AnswerDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerDBData));
  GuardRankDBProto_descriptor_ = file->message_type(212);
  static const int GuardRankDBProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardRankDBProto, factionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardRankDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardRankDBProto, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardRankDBProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardRankDBProto, zid_),
  };
  GuardRankDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuardRankDBProto_descriptor_,
      GuardRankDBProto::default_instance_,
      GuardRankDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardRankDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardRankDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuardRankDBProto));
  GuardDBData_descriptor_ = file->message_type(213);
  static const int GuardDBData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardDBData, old_rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardDBData, cur_rank_),
  };
  GuardDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GuardDBData_descriptor_,
      GuardDBData::default_instance_,
      GuardDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GuardDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GuardDBData));
  Rank1v1DBProto_descriptor_ = file->message_type(214);
  static const int Rank1v1DBProto_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, prof_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, match_num_),
  };
  Rank1v1DBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Rank1v1DBProto_descriptor_,
      Rank1v1DBProto::default_instance_,
      Rank1v1DBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Rank1v1DBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Rank1v1DBProto));
  Act1v1DBData_descriptor_ = file->message_type(215);
  static const int Act1v1DBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Act1v1DBData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Act1v1DBData, reset_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Act1v1DBData, num_),
  };
  Act1v1DBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Act1v1DBData_descriptor_,
      Act1v1DBData::default_instance_,
      Act1v1DBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Act1v1DBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Act1v1DBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Act1v1DBData));
  RaceFactionDBProto_descriptor_ = file->message_type(216);
  static const int RaceFactionDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionDBProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionDBProto, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionDBProto, zid_),
  };
  RaceFactionDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceFactionDBProto_descriptor_,
      RaceFactionDBProto::default_instance_,
      RaceFactionDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceFactionDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceFactionDBProto));
  RaceMatchDBProto_descriptor_ = file->message_type(217);
  static const int RaceMatchDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchDBProto, faction_id1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchDBProto, faction_id2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchDBProto, faction_id_),
  };
  RaceMatchDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceMatchDBProto_descriptor_,
      RaceMatchDBProto::default_instance_,
      RaceMatchDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceMatchDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceMatchDBProto));
  RaceDBProto_descriptor_ = file->message_type(218);
  static const int RaceDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, info_lst_),
  };
  RaceDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RaceDBProto_descriptor_,
      RaceDBProto::default_instance_,
      RaceDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RaceDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RaceDBProto));
  WarRankDBProto_descriptor_ = file->message_type(219);
  static const int WarRankDBProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankDBProto, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankDBProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankDBProto, rank_),
  };
  WarRankDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarRankDBProto_descriptor_,
      WarRankDBProto::default_instance_,
      WarRankDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarRankDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarRankDBProto));
  FactionWarDBData_descriptor_ = file->message_type(220);
  static const int FactionWarDBData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarDBData, race_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarDBData, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarDBData, win_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarDBData, win_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarDBData, win_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarDBData, win_zid_),
  };
  FactionWarDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactionWarDBData_descriptor_,
      FactionWarDBData::default_instance_,
      FactionWarDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactionWarDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactionWarDBData));
  DigEggLogDBProto_descriptor_ = file->message_type(221);
  static const int DigEggLogDBProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigEggLogDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigEggLogDBProto, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigEggLogDBProto, cid_),
  };
  DigEggLogDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DigEggLogDBProto_descriptor_,
      DigEggLogDBProto::default_instance_,
      DigEggLogDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigEggLogDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DigEggLogDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DigEggLogDBProto));
  FestDigEggLogDBProto_descriptor_ = file->message_type(222);
  static const int FestDigEggLogDBProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogDBProto, template_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogDBProto, info_),
  };
  FestDigEggLogDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDigEggLogDBProto_descriptor_,
      FestDigEggLogDBProto::default_instance_,
      FestDigEggLogDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDigEggLogDBProto));
  FestDigEggLogDBData_descriptor_ = file->message_type(223);
  static const int FestDigEggLogDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogDBData, log_),
  };
  FestDigEggLogDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDigEggLogDBData_descriptor_,
      FestDigEggLogDBData::default_instance_,
      FestDigEggLogDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDigEggLogDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDigEggLogDBData));
  FestRTurnableLogDBData_descriptor_ = file->message_type(224);
  static const int FestRTurnableLogDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableLogDBData, log_),
  };
  FestRTurnableLogDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestRTurnableLogDBData_descriptor_,
      FestRTurnableLogDBData::default_instance_,
      FestRTurnableLogDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableLogDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestRTurnableLogDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestRTurnableLogDBData));
  FestDonateDBData_descriptor_ = file->message_type(225);
  static const int FestDonateDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBData, data_),
  };
  FestDonateDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDonateDBData_descriptor_,
      FestDonateDBData::default_instance_,
      FestDonateDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDonateDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDonateDBData));
  FestDrawPizeLogDBData_descriptor_ = file->message_type(226);
  static const int FestDrawPizeLogDBData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogDBData, log_),
  };
  FestDrawPizeLogDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestDrawPizeLogDBData_descriptor_,
      FestDrawPizeLogDBData::default_instance_,
      FestDrawPizeLogDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestDrawPizeLogDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestDrawPizeLogDBData));
  GoodsDB_descriptor_ = file->message_type(227);
  static const int GoodsDB_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, market_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, market_owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, role_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, start_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, end_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, vie_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, isdelete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, cmpt_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, cur_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, cmpt_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, buyer_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, vie_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, item_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, item_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, take_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, vie_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, ready_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, is_take_),
  };
  GoodsDB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GoodsDB_descriptor_,
      GoodsDB::default_instance_,
      GoodsDB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GoodsDB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GoodsDB));
  LoadGoodsReq_descriptor_ = file->message_type(228);
  static const int LoadGoodsReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadGoodsReq, start_time_),
  };
  LoadGoodsReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoadGoodsReq_descriptor_,
      LoadGoodsReq::default_instance_,
      LoadGoodsReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadGoodsReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoadGoodsReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoadGoodsReq));
  MarketDBLoadRsp_descriptor_ = file->message_type(229);
  static const int MarketDBLoadRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDBLoadRsp, infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDBLoadRsp, is_finish_),
  };
  MarketDBLoadRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDBLoadRsp_descriptor_,
      MarketDBLoadRsp::default_instance_,
      MarketDBLoadRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDBLoadRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDBLoadRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDBLoadRsp));
  MarketSaveReq_descriptor_ = file->message_type(230);
  static const int MarketSaveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSaveReq, info_),
  };
  MarketSaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketSaveReq_descriptor_,
      MarketSaveReq::default_instance_,
      MarketSaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketSaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketSaveReq));
  MarketDelReq_descriptor_ = file->message_type(231);
  static const int MarketDelReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDelReq, order_id_),
  };
  MarketDelReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketDelReq_descriptor_,
      MarketDelReq::default_instance_,
      MarketDelReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDelReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketDelReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketDelReq));
  CandleHarmDBProto_descriptor_ = file->message_type(232);
  static const int CandleHarmDBProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleHarmDBProto, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleHarmDBProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleHarmDBProto, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleHarmDBProto, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleHarmDBProto, rank_),
  };
  CandleHarmDBProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CandleHarmDBProto_descriptor_,
      CandleHarmDBProto::default_instance_,
      CandleHarmDBProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleHarmDBProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleHarmDBProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CandleHarmDBProto));
  CandleDBData_descriptor_ = file->message_type(233);
  static const int CandleDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleDBData, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleDBData, ham_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleDBData, time_),
  };
  CandleDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CandleDBData_descriptor_,
      CandleDBData::default_instance_,
      CandleDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CandleDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CandleDBData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DBProxy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleReliveProto_descriptor_, &RoleReliveProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBBaseData_descriptor_, &RoleDBBaseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagItemsDBData_descriptor_, &BagItemsDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BagDBSimpleData_descriptor_, &BagDBSimpleData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBUnitBagData_descriptor_, &RoleDBUnitBagData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBBagData_descriptor_, &RoleDBBagData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBEquipData_descriptor_, &RoleDBEquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBTaskData_descriptor_, &RoleDBTaskData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowPartEntryDBInfo_descriptor_, &GrowPartEntryDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowPartDBData_descriptor_, &GrowPartDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GrowDBData_descriptor_, &GrowDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayUseItemData_descriptor_, &DayUseItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterArenaData_descriptor_, &CharacterArenaData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiniDBData_descriptor_, &MiniDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeDataInfo_descriptor_, &FacadeDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MountDataInfo_descriptor_, &MountDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeityDataInfo_descriptor_, &DeityDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FacadeDBData_descriptor_, &FacadeDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBInfo_descriptor_, &SkillDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBPos_descriptor_, &SkillDBPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBAdvPos_descriptor_, &SkillDBAdvPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBAdvInfo_descriptor_, &SkillDBAdvInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBGroup_descriptor_, &SkillDBGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetSkillCdDB_descriptor_, &PetSkillCdDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBTalentProto_descriptor_, &SkillDBTalentProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBTalent_descriptor_, &SkillDBTalent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillDBData_descriptor_, &SkillDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodRelicsActivityData_descriptor_, &GodRelicsActivityData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiniActivityDBData_descriptor_, &MiniActivityDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupRecord_descriptor_, &DupRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupGroupData_descriptor_, &DupGroupData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerDBRecordEntry_descriptor_, &DupTowerDBRecordEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerDBRecord_descriptor_, &DupTowerDBRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupTowerDBData_descriptor_, &DupTowerDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GhostDBData_descriptor_, &GhostDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoyuDBData_descriptor_, &MoyuDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YaoTaDBData_descriptor_, &YaoTaDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DupDBData_descriptor_, &DupDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GhostDupRankDB_descriptor_, &GhostDupRankDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDBInfo_descriptor_, &BuffDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDBCdInfo_descriptor_, &BuffDBCdInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDBShieldInfo_descriptor_, &BuffDBShieldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffDBData_descriptor_, &BuffDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossSimpleInfoDB_descriptor_, &BossSimpleInfoDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDBData_descriptor_, &BossDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipDBData_descriptor_, &VipDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrDBData_descriptor_, &AttrDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetDBRecord_descriptor_, &PetDBRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetGrowDB_descriptor_, &PetGrowDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PetDBData_descriptor_, &PetDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallDBInfo_descriptor_, &MallDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallDBData_descriptor_, &MallDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConvoyData_descriptor_, &ConvoyData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArmorDBData_descriptor_, &ArmorDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AssistDBData_descriptor_, &AssistDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleDBData_descriptor_, &TitleDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvilCondDBProto_descriptor_, &GodEvilCondDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvilMultCondDBProto_descriptor_, &GodEvilMultCondDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvilTaskDBProto_descriptor_, &GodEvilTaskDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GodEvilDBData_descriptor_, &GodEvilDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayDBData_descriptor_, &PayDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBSalary_descriptor_, &FactionDBSalary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBDinner_descriptor_, &FactionDBDinner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBSkillProto_descriptor_, &FactionDBSkillProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBSkill_descriptor_, &FactionDBSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBGuard_descriptor_, &FactionDBGuard::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleFactionDBData_descriptor_, &RoleFactionDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleBestEQDBData_descriptor_, &RoleBestEQDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AncientDBData_descriptor_, &AncientDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleEmblemDBInfo_descriptor_, &RoleEmblemDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Role1v1DBInfo_descriptor_, &Role1v1DBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RolePvpDBData_descriptor_, &RolePvpDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleMarryExpress_descriptor_, &RoleMarryExpress::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleMarryDBData_descriptor_, &RoleMarryDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncylopediaDBData_descriptor_, &EncylopediaDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GVBPData_descriptor_, &GVBPData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChargeDBData_descriptor_, &ChargeDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiftCondDBProto_descriptor_, &GiftCondDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiftZeroDBProto_descriptor_, &GiftZeroDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiftZeroLogDBProto_descriptor_, &GiftZeroLogDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiftDBData_descriptor_, &GiftDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestSimpleDBProto_descriptor_, &FestSimpleDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestShopDBProto_descriptor_, &FestShopDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestSignDBProto_descriptor_, &FestSignDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestGoldStoreDBProto_descriptor_, &FestGoldStoreDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDigEggTaskDBProto_descriptor_, &FestDigEggTaskDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDigEggDBProto_descriptor_, &FestDigEggDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCandleDBProto_descriptor_, &FestCandleDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestBtDragonDBProto_descriptor_, &FestBtDragonDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestRTurnableRechargeDBProto_descriptor_, &FestRTurnableRechargeDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDailyTotalRechargeDBProto_descriptor_, &FestDailyTotalRechargeDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestTurnableDBProto_descriptor_, &FestTurnableDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateDBProto_descriptor_, &FestDonateDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestOnlineDBProto_descriptor_, &FestOnlineDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestCollectWordDBProto_descriptor_, &FestCollectWordDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestBossFirstDB_descriptor_, &FestBossFirstDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FMarryRoleDB_descriptor_, &FMarryRoleDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DayTotalRechargeDBProto_descriptor_, &DayTotalRechargeDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TotalRechargeDBProto_descriptor_, &TotalRechargeDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRewardDBProto_descriptor_, &LoginRewardDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDetailDBProto_descriptor_, &FestDetailDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDBData_descriptor_, &FestDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShadowDBProto_descriptor_, &ShadowDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HaloDBProto_descriptor_, &HaloDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DragonDBData_descriptor_, &DragonDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBTurnData_descriptor_, &RoleDBTurnData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMADbData_descriptor_, &GMADbData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SoulDBData_descriptor_, &SoulDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleDBData_descriptor_, &RoleDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedWaitDBProto_descriptor_, &RedWaitDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedTriggerDBProto_descriptor_, &RedTriggerDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRedDBData_descriptor_, &RoleRedDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedFetchDBProto_descriptor_, &RedFetchDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedFetchListDBProto_descriptor_, &RedFetchListDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedSendDBProto_descriptor_, &RedSendDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedDBData_descriptor_, &RedDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleMirrorData_descriptor_, &RoleMirrorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMemDBProto_descriptor_, &FactionMemDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMultMemDBProto_descriptor_, &FactionMultMemDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionApplyDBProto_descriptor_, &FactionApplyDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMultApplyDBProto_descriptor_, &FactionMultApplyDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRecordDBProto_descriptor_, &FactionRecordDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMutRecordDBProto_descriptor_, &FactionMutRecordDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBBase_descriptor_, &FactionDBBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionBeastHarmDBProto_descriptor_, &FactionBeastHarmDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionBeastDBData_descriptor_, &FactionBeastDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionGuardHarmDBProto_descriptor_, &FactionGuardHarmDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionGuardDBData_descriptor_, &FactionGuardDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionMoyu_descriptor_, &FactionMoyu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBData_descriptor_, &FactionDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionAllDBData_descriptor_, &FactionAllDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBMoyuRankEntry_descriptor_, &FactionDBMoyuRankEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBMoyuRank_descriptor_, &FactionDBMoyuRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDBMoyuRankDB_descriptor_, &FactionDBMoyuRankDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleListDBReq_descriptor_, &RoleListDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleListDBRsp_descriptor_, &RoleListDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoleDBReq_descriptor_, &CreateRoleDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoleDBRsp_descriptor_, &CreateRoleDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleInfoDBReq_descriptor_, &RoleInfoDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleInfoDBRsp_descriptor_, &RoleInfoDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleInfoUpdateDBReq_descriptor_, &RoleInfoUpdateDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleChgNameDBReq_descriptor_, &RoleChgNameDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleChgNameDBRsp_descriptor_, &RoleChgNameDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSimpleListDBReq_descriptor_, &RoleSimpleListDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleSimpleListDBRsp_descriptor_, &RoleSimpleListDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureTransLogicDBReq_descriptor_, &CreatureTransLogicDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureTransLogicDBRsp_descriptor_, &CreatureTransLogicDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewMailDBInfo_descriptor_, &NewMailDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailDBOperateInfo_descriptor_, &MailDBOperateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveMailDBReq_descriptor_, &SaveMailDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveMailDBRsp_descriptor_, &SaveMailDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMailDBRequest_descriptor_, &CharacterMailDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharacterMailDBResponse_descriptor_, &CharacterMailDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxMailIDRequest_descriptor_, &MaxMailIDRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaxMailIDResponse_descriptor_, &MaxMailIDResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteCharacterMail_descriptor_, &DeleteCharacterMail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneMailSaveRsp_descriptor_, &ZoneMailSaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneMailTransCharacterMailReq_descriptor_, &ZoneMailTransCharacterMailReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneMailTransCharacterMailRsp_descriptor_, &ZoneMailTransCharacterMailRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebMailDBDataReq_descriptor_, &WebMailDBDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WebMailDBDataRsp_descriptor_, &WebMailDBDataRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDBInfo_descriptor_, &FriendDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDBRequest_descriptor_, &FriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendDBResponse_descriptor_, &FriendDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllFriendDBRequest_descriptor_, &AllFriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllFriendDBResponse_descriptor_, &AllFriendDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveFriendDBRequest_descriptor_, &SaveFriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelteFriendDBRequest_descriptor_, &DelteFriendDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBRequst_descriptor_, &GlobalDBRequst::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBEntry_descriptor_, &GlobalDBEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBResponse_descriptor_, &GlobalDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBSetRequest_descriptor_, &GlobalDBSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalDBSetResponse_descriptor_, &GlobalDBSetResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalComData_descriptor_, &GlobalComData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalYaotaDupDBEntry_descriptor_, &GlobalYaotaDupDBEntry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GlobalYaotaDupDBData_descriptor_, &GlobalYaotaDupDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActDBProto_descriptor_, &ActDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActDBReq_descriptor_, &ActDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActDBRsp_descriptor_, &ActDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActSaveDBReq_descriptor_, &ActSaveDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllArenaDBRequest_descriptor_, &AllArenaDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaDBInfo_descriptor_, &ArenaDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaMoreDBInfo_descriptor_, &ArenaMoreDBInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllArenaDBResponse_descriptor_, &AllArenaDBResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveArenaDBRequest_descriptor_, &SaveArenaDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteArenaDBRequest_descriptor_, &DeleteArenaDBRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleMirrorDBReq_descriptor_, &RoleMirrorDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleMirrorDBRsp_descriptor_, &RoleMirrorDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDataDBReq_descriptor_, &FactionDataDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDataDBRsp_descriptor_, &FactionDataDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionSaveDBReq_descriptor_, &FactionSaveDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionDelDBReq_descriptor_, &FactionDelDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRedDBReq_descriptor_, &FactionRedDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRedDBRsp_descriptor_, &FactionRedDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRedSaveDBReq_descriptor_, &FactionRedSaveDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionRedDelDBReq_descriptor_, &FactionRedDelDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRedDBReq_descriptor_, &RoleRedDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleRedDBRsp_descriptor_, &RoleRedDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComLoadDBReq_descriptor_, &ComLoadDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComLoadDBRsp_descriptor_, &ComLoadDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComLoadAllDBReq_descriptor_, &ComLoadAllDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComDBProto_descriptor_, &ComDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComLoadAllDBRsp_descriptor_, &ComLoadAllDBRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComSaveDBReq_descriptor_, &ComSaveDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComDelDBReq_descriptor_, &ComDelDBReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryApply_descriptor_, &MarryApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarrySimpleInfo_descriptor_, &MarrySimpleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryDBLoadReq_descriptor_, &MarryDBLoadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryDBLoadRsp_descriptor_, &MarryDBLoadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryDBSaveReq_descriptor_, &MarryDBSaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerRankDBProto_descriptor_, &AnswerRankDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerDBData_descriptor_, &AnswerDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuardRankDBProto_descriptor_, &GuardRankDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GuardDBData_descriptor_, &GuardDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Rank1v1DBProto_descriptor_, &Rank1v1DBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Act1v1DBData_descriptor_, &Act1v1DBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceFactionDBProto_descriptor_, &RaceFactionDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceMatchDBProto_descriptor_, &RaceMatchDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RaceDBProto_descriptor_, &RaceDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarRankDBProto_descriptor_, &WarRankDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactionWarDBData_descriptor_, &FactionWarDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DigEggLogDBProto_descriptor_, &DigEggLogDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDigEggLogDBProto_descriptor_, &FestDigEggLogDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDigEggLogDBData_descriptor_, &FestDigEggLogDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestRTurnableLogDBData_descriptor_, &FestRTurnableLogDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDonateDBData_descriptor_, &FestDonateDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestDrawPizeLogDBData_descriptor_, &FestDrawPizeLogDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GoodsDB_descriptor_, &GoodsDB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoadGoodsReq_descriptor_, &LoadGoodsReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDBLoadRsp_descriptor_, &MarketDBLoadRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketSaveReq_descriptor_, &MarketSaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketDelReq_descriptor_, &MarketDelReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CandleHarmDBProto_descriptor_, &CandleHarmDBProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CandleDBData_descriptor_, &CandleDBData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DBProxy_2eproto() {
  delete RoleReliveProto::default_instance_;
  delete RoleReliveProto_reflection_;
  delete RoleDBBaseData::default_instance_;
  delete RoleDBBaseData_reflection_;
  delete BagItemsDBData::default_instance_;
  delete BagItemsDBData_reflection_;
  delete BagDBSimpleData::default_instance_;
  delete BagDBSimpleData_reflection_;
  delete RoleDBUnitBagData::default_instance_;
  delete RoleDBUnitBagData_reflection_;
  delete RoleDBBagData::default_instance_;
  delete RoleDBBagData_reflection_;
  delete RoleDBEquipData::default_instance_;
  delete RoleDBEquipData_reflection_;
  delete RoleDBTaskData::default_instance_;
  delete RoleDBTaskData_reflection_;
  delete GrowPartEntryDBInfo::default_instance_;
  delete GrowPartEntryDBInfo_reflection_;
  delete GrowPartDBData::default_instance_;
  delete GrowPartDBData_reflection_;
  delete GrowDBData::default_instance_;
  delete GrowDBData_reflection_;
  delete DayUseItemData::default_instance_;
  delete DayUseItemData_reflection_;
  delete CharacterArenaData::default_instance_;
  delete CharacterArenaData_reflection_;
  delete MiniDBData::default_instance_;
  delete MiniDBData_reflection_;
  delete FacadeDataInfo::default_instance_;
  delete FacadeDataInfo_reflection_;
  delete MountDataInfo::default_instance_;
  delete MountDataInfo_reflection_;
  delete DeityDataInfo::default_instance_;
  delete DeityDataInfo_reflection_;
  delete FacadeDBData::default_instance_;
  delete FacadeDBData_reflection_;
  delete SkillDBInfo::default_instance_;
  delete SkillDBInfo_reflection_;
  delete SkillDBPos::default_instance_;
  delete SkillDBPos_reflection_;
  delete SkillDBAdvPos::default_instance_;
  delete SkillDBAdvPos_reflection_;
  delete SkillDBAdvInfo::default_instance_;
  delete SkillDBAdvInfo_reflection_;
  delete SkillDBGroup::default_instance_;
  delete SkillDBGroup_reflection_;
  delete PetSkillCdDB::default_instance_;
  delete PetSkillCdDB_reflection_;
  delete SkillDBTalentProto::default_instance_;
  delete SkillDBTalentProto_reflection_;
  delete SkillDBTalent::default_instance_;
  delete SkillDBTalent_reflection_;
  delete SkillDBData::default_instance_;
  delete SkillDBData_reflection_;
  delete GodRelicsActivityData::default_instance_;
  delete GodRelicsActivityData_reflection_;
  delete MiniActivityDBData::default_instance_;
  delete MiniActivityDBData_reflection_;
  delete DupRecord::default_instance_;
  delete DupRecord_reflection_;
  delete DupGroupData::default_instance_;
  delete DupGroupData_reflection_;
  delete DupTowerDBRecordEntry::default_instance_;
  delete DupTowerDBRecordEntry_reflection_;
  delete DupTowerDBRecord::default_instance_;
  delete DupTowerDBRecord_reflection_;
  delete DupTowerDBData::default_instance_;
  delete DupTowerDBData_reflection_;
  delete GhostDBData::default_instance_;
  delete GhostDBData_reflection_;
  delete MoyuDBData::default_instance_;
  delete MoyuDBData_reflection_;
  delete YaoTaDBData::default_instance_;
  delete YaoTaDBData_reflection_;
  delete DupDBData::default_instance_;
  delete DupDBData_reflection_;
  delete GhostDupRankDB::default_instance_;
  delete GhostDupRankDB_reflection_;
  delete BuffDBInfo::default_instance_;
  delete BuffDBInfo_reflection_;
  delete BuffDBCdInfo::default_instance_;
  delete BuffDBCdInfo_reflection_;
  delete BuffDBShieldInfo::default_instance_;
  delete BuffDBShieldInfo_reflection_;
  delete BuffDBData::default_instance_;
  delete BuffDBData_reflection_;
  delete BossSimpleInfoDB::default_instance_;
  delete BossSimpleInfoDB_reflection_;
  delete BossDBData::default_instance_;
  delete BossDBData_reflection_;
  delete VipDBData::default_instance_;
  delete VipDBData_reflection_;
  delete AttrDBData::default_instance_;
  delete AttrDBData_reflection_;
  delete PetDBRecord::default_instance_;
  delete PetDBRecord_reflection_;
  delete PetGrowDB::default_instance_;
  delete PetGrowDB_reflection_;
  delete PetDBData::default_instance_;
  delete PetDBData_reflection_;
  delete MallDBInfo::default_instance_;
  delete MallDBInfo_reflection_;
  delete MallDBData::default_instance_;
  delete MallDBData_reflection_;
  delete ConvoyData::default_instance_;
  delete ConvoyData_reflection_;
  delete ArmorDBData::default_instance_;
  delete ArmorDBData_reflection_;
  delete AssistDBData::default_instance_;
  delete AssistDBData_reflection_;
  delete TitleDBData::default_instance_;
  delete TitleDBData_reflection_;
  delete GodEvilCondDBProto::default_instance_;
  delete GodEvilCondDBProto_reflection_;
  delete GodEvilMultCondDBProto::default_instance_;
  delete GodEvilMultCondDBProto_reflection_;
  delete GodEvilTaskDBProto::default_instance_;
  delete GodEvilTaskDBProto_reflection_;
  delete GodEvilDBData::default_instance_;
  delete GodEvilDBData_reflection_;
  delete PayDBData::default_instance_;
  delete PayDBData_reflection_;
  delete FactionDBSalary::default_instance_;
  delete FactionDBSalary_reflection_;
  delete FactionDBDinner::default_instance_;
  delete FactionDBDinner_reflection_;
  delete FactionDBSkillProto::default_instance_;
  delete FactionDBSkillProto_reflection_;
  delete FactionDBSkill::default_instance_;
  delete FactionDBSkill_reflection_;
  delete FactionDBGuard::default_instance_;
  delete FactionDBGuard_reflection_;
  delete RoleFactionDBData::default_instance_;
  delete RoleFactionDBData_reflection_;
  delete RoleBestEQDBData::default_instance_;
  delete RoleBestEQDBData_reflection_;
  delete AncientDBData::default_instance_;
  delete AncientDBData_reflection_;
  delete RoleEmblemDBInfo::default_instance_;
  delete RoleEmblemDBInfo_reflection_;
  delete Role1v1DBInfo::default_instance_;
  delete Role1v1DBInfo_reflection_;
  delete RolePvpDBData::default_instance_;
  delete RolePvpDBData_reflection_;
  delete RoleMarryExpress::default_instance_;
  delete RoleMarryExpress_reflection_;
  delete RoleMarryDBData::default_instance_;
  delete RoleMarryDBData_reflection_;
  delete EncylopediaDBData::default_instance_;
  delete EncylopediaDBData_reflection_;
  delete GVBPData::default_instance_;
  delete GVBPData_reflection_;
  delete ChargeDBData::default_instance_;
  delete ChargeDBData_reflection_;
  delete GiftCondDBProto::default_instance_;
  delete GiftCondDBProto_reflection_;
  delete GiftZeroDBProto::default_instance_;
  delete GiftZeroDBProto_reflection_;
  delete GiftZeroLogDBProto::default_instance_;
  delete GiftZeroLogDBProto_reflection_;
  delete GiftDBData::default_instance_;
  delete GiftDBData_reflection_;
  delete FestSimpleDBProto::default_instance_;
  delete FestSimpleDBProto_reflection_;
  delete FestShopDBProto::default_instance_;
  delete FestShopDBProto_reflection_;
  delete FestSignDBProto::default_instance_;
  delete FestSignDBProto_reflection_;
  delete FestGoldStoreDBProto::default_instance_;
  delete FestGoldStoreDBProto_reflection_;
  delete FestDigEggTaskDBProto::default_instance_;
  delete FestDigEggTaskDBProto_reflection_;
  delete FestDigEggDBProto::default_instance_;
  delete FestDigEggDBProto_reflection_;
  delete FestCandleDBProto::default_instance_;
  delete FestCandleDBProto_reflection_;
  delete FestBtDragonDBProto::default_instance_;
  delete FestBtDragonDBProto_reflection_;
  delete FestRTurnableRechargeDBProto::default_instance_;
  delete FestRTurnableRechargeDBProto_reflection_;
  delete FestDailyTotalRechargeDBProto::default_instance_;
  delete FestDailyTotalRechargeDBProto_reflection_;
  delete FestTurnableDBProto::default_instance_;
  delete FestTurnableDBProto_reflection_;
  delete FestDonateDBProto::default_instance_;
  delete FestDonateDBProto_reflection_;
  delete FestOnlineDBProto::default_instance_;
  delete FestOnlineDBProto_reflection_;
  delete FestCollectWordDBProto::default_instance_;
  delete FestCollectWordDBProto_reflection_;
  delete FestBossFirstDB::default_instance_;
  delete FestBossFirstDB_reflection_;
  delete FMarryRoleDB::default_instance_;
  delete FMarryRoleDB_reflection_;
  delete DayTotalRechargeDBProto::default_instance_;
  delete DayTotalRechargeDBProto_reflection_;
  delete TotalRechargeDBProto::default_instance_;
  delete TotalRechargeDBProto_reflection_;
  delete LoginRewardDBProto::default_instance_;
  delete LoginRewardDBProto_reflection_;
  delete FestDetailDBProto::default_instance_;
  delete FestDetailDBProto_reflection_;
  delete FestDBData::default_instance_;
  delete FestDBData_reflection_;
  delete ShadowDBProto::default_instance_;
  delete ShadowDBProto_reflection_;
  delete HaloDBProto::default_instance_;
  delete HaloDBProto_reflection_;
  delete DragonDBData::default_instance_;
  delete DragonDBData_reflection_;
  delete RoleDBTurnData::default_instance_;
  delete RoleDBTurnData_reflection_;
  delete GMADbData::default_instance_;
  delete GMADbData_reflection_;
  delete SoulDBData::default_instance_;
  delete SoulDBData_reflection_;
  delete RoleDBData::default_instance_;
  delete RoleDBData_reflection_;
  delete RedWaitDBProto::default_instance_;
  delete RedWaitDBProto_reflection_;
  delete RedTriggerDBProto::default_instance_;
  delete RedTriggerDBProto_reflection_;
  delete RoleRedDBData::default_instance_;
  delete RoleRedDBData_reflection_;
  delete RedFetchDBProto::default_instance_;
  delete RedFetchDBProto_reflection_;
  delete RedFetchListDBProto::default_instance_;
  delete RedFetchListDBProto_reflection_;
  delete RedSendDBProto::default_instance_;
  delete RedSendDBProto_reflection_;
  delete RedDBData::default_instance_;
  delete RedDBData_reflection_;
  delete RoleMirrorData::default_instance_;
  delete RoleMirrorData_reflection_;
  delete FactionMemDBProto::default_instance_;
  delete FactionMemDBProto_reflection_;
  delete FactionMultMemDBProto::default_instance_;
  delete FactionMultMemDBProto_reflection_;
  delete FactionApplyDBProto::default_instance_;
  delete FactionApplyDBProto_reflection_;
  delete FactionMultApplyDBProto::default_instance_;
  delete FactionMultApplyDBProto_reflection_;
  delete FactionRecordDBProto::default_instance_;
  delete FactionRecordDBProto_reflection_;
  delete FactionMutRecordDBProto::default_instance_;
  delete FactionMutRecordDBProto_reflection_;
  delete FactionDBBase::default_instance_;
  delete FactionDBBase_reflection_;
  delete FactionBeastHarmDBProto::default_instance_;
  delete FactionBeastHarmDBProto_reflection_;
  delete FactionBeastDBData::default_instance_;
  delete FactionBeastDBData_reflection_;
  delete FactionGuardHarmDBProto::default_instance_;
  delete FactionGuardHarmDBProto_reflection_;
  delete FactionGuardDBData::default_instance_;
  delete FactionGuardDBData_reflection_;
  delete FactionMoyu::default_instance_;
  delete FactionMoyu_reflection_;
  delete FactionDBData::default_instance_;
  delete FactionDBData_reflection_;
  delete FactionAllDBData::default_instance_;
  delete FactionAllDBData_reflection_;
  delete FactionDBMoyuRankEntry::default_instance_;
  delete FactionDBMoyuRankEntry_reflection_;
  delete FactionDBMoyuRank::default_instance_;
  delete FactionDBMoyuRank_reflection_;
  delete FactionDBMoyuRankDB::default_instance_;
  delete FactionDBMoyuRankDB_reflection_;
  delete RoleListDBReq::default_instance_;
  delete RoleListDBReq_reflection_;
  delete RoleListDBRsp::default_instance_;
  delete RoleListDBRsp_reflection_;
  delete CreateRoleDBReq::default_instance_;
  delete CreateRoleDBReq_reflection_;
  delete CreateRoleDBRsp::default_instance_;
  delete CreateRoleDBRsp_reflection_;
  delete RoleInfoDBReq::default_instance_;
  delete RoleInfoDBReq_reflection_;
  delete RoleInfoDBRsp::default_instance_;
  delete RoleInfoDBRsp_reflection_;
  delete RoleInfoUpdateDBReq::default_instance_;
  delete RoleInfoUpdateDBReq_reflection_;
  delete RoleChgNameDBReq::default_instance_;
  delete RoleChgNameDBReq_reflection_;
  delete RoleChgNameDBRsp::default_instance_;
  delete RoleChgNameDBRsp_reflection_;
  delete RoleSimpleListDBReq::default_instance_;
  delete RoleSimpleListDBReq_reflection_;
  delete RoleSimpleListDBRsp::default_instance_;
  delete RoleSimpleListDBRsp_reflection_;
  delete CreatureTransLogicDBReq::default_instance_;
  delete CreatureTransLogicDBReq_reflection_;
  delete CreatureTransLogicDBRsp::default_instance_;
  delete CreatureTransLogicDBRsp_reflection_;
  delete NewMailDBInfo::default_instance_;
  delete NewMailDBInfo_reflection_;
  delete MailDBOperateInfo::default_instance_;
  delete MailDBOperateInfo_reflection_;
  delete SaveMailDBReq::default_instance_;
  delete SaveMailDBReq_reflection_;
  delete SaveMailDBRsp::default_instance_;
  delete SaveMailDBRsp_reflection_;
  delete CharacterMailDBRequest::default_instance_;
  delete CharacterMailDBRequest_reflection_;
  delete CharacterMailDBResponse::default_instance_;
  delete CharacterMailDBResponse_reflection_;
  delete MaxMailIDRequest::default_instance_;
  delete MaxMailIDRequest_reflection_;
  delete MaxMailIDResponse::default_instance_;
  delete MaxMailIDResponse_reflection_;
  delete DeleteCharacterMail::default_instance_;
  delete DeleteCharacterMail_reflection_;
  delete ZoneMailSaveRsp::default_instance_;
  delete ZoneMailSaveRsp_reflection_;
  delete ZoneMailTransCharacterMailReq::default_instance_;
  delete ZoneMailTransCharacterMailReq_reflection_;
  delete ZoneMailTransCharacterMailRsp::default_instance_;
  delete ZoneMailTransCharacterMailRsp_reflection_;
  delete WebMailDBDataReq::default_instance_;
  delete WebMailDBDataReq_reflection_;
  delete WebMailDBDataRsp::default_instance_;
  delete WebMailDBDataRsp_reflection_;
  delete FriendDBInfo::default_instance_;
  delete FriendDBInfo_reflection_;
  delete FriendDBRequest::default_instance_;
  delete FriendDBRequest_reflection_;
  delete FriendDBResponse::default_instance_;
  delete FriendDBResponse_reflection_;
  delete AllFriendDBRequest::default_instance_;
  delete AllFriendDBRequest_reflection_;
  delete AllFriendDBResponse::default_instance_;
  delete AllFriendDBResponse_reflection_;
  delete SaveFriendDBRequest::default_instance_;
  delete SaveFriendDBRequest_reflection_;
  delete DelteFriendDBRequest::default_instance_;
  delete DelteFriendDBRequest_reflection_;
  delete GlobalDBRequst::default_instance_;
  delete GlobalDBRequst_reflection_;
  delete GlobalDBEntry::default_instance_;
  delete GlobalDBEntry_reflection_;
  delete GlobalDBResponse::default_instance_;
  delete GlobalDBResponse_reflection_;
  delete GlobalDBSetRequest::default_instance_;
  delete GlobalDBSetRequest_reflection_;
  delete GlobalDBSetResponse::default_instance_;
  delete GlobalDBSetResponse_reflection_;
  delete GlobalComData::default_instance_;
  delete GlobalComData_reflection_;
  delete GlobalYaotaDupDBEntry::default_instance_;
  delete GlobalYaotaDupDBEntry_reflection_;
  delete GlobalYaotaDupDBData::default_instance_;
  delete GlobalYaotaDupDBData_reflection_;
  delete ActDBProto::default_instance_;
  delete ActDBProto_reflection_;
  delete ActDBReq::default_instance_;
  delete ActDBReq_reflection_;
  delete ActDBRsp::default_instance_;
  delete ActDBRsp_reflection_;
  delete ActSaveDBReq::default_instance_;
  delete ActSaveDBReq_reflection_;
  delete AllArenaDBRequest::default_instance_;
  delete AllArenaDBRequest_reflection_;
  delete ArenaDBInfo::default_instance_;
  delete ArenaDBInfo_reflection_;
  delete ArenaMoreDBInfo::default_instance_;
  delete ArenaMoreDBInfo_reflection_;
  delete AllArenaDBResponse::default_instance_;
  delete AllArenaDBResponse_reflection_;
  delete SaveArenaDBRequest::default_instance_;
  delete SaveArenaDBRequest_reflection_;
  delete DeleteArenaDBRequest::default_instance_;
  delete DeleteArenaDBRequest_reflection_;
  delete RoleMirrorDBReq::default_instance_;
  delete RoleMirrorDBReq_reflection_;
  delete RoleMirrorDBRsp::default_instance_;
  delete RoleMirrorDBRsp_reflection_;
  delete FactionDataDBReq::default_instance_;
  delete FactionDataDBReq_reflection_;
  delete FactionDataDBRsp::default_instance_;
  delete FactionDataDBRsp_reflection_;
  delete FactionSaveDBReq::default_instance_;
  delete FactionSaveDBReq_reflection_;
  delete FactionDelDBReq::default_instance_;
  delete FactionDelDBReq_reflection_;
  delete FactionRedDBReq::default_instance_;
  delete FactionRedDBReq_reflection_;
  delete FactionRedDBRsp::default_instance_;
  delete FactionRedDBRsp_reflection_;
  delete FactionRedSaveDBReq::default_instance_;
  delete FactionRedSaveDBReq_reflection_;
  delete FactionRedDelDBReq::default_instance_;
  delete FactionRedDelDBReq_reflection_;
  delete RoleRedDBReq::default_instance_;
  delete RoleRedDBReq_reflection_;
  delete RoleRedDBRsp::default_instance_;
  delete RoleRedDBRsp_reflection_;
  delete ComLoadDBReq::default_instance_;
  delete ComLoadDBReq_reflection_;
  delete ComLoadDBRsp::default_instance_;
  delete ComLoadDBRsp_reflection_;
  delete ComLoadAllDBReq::default_instance_;
  delete ComLoadAllDBReq_reflection_;
  delete ComDBProto::default_instance_;
  delete ComDBProto_reflection_;
  delete ComLoadAllDBRsp::default_instance_;
  delete ComLoadAllDBRsp_reflection_;
  delete ComSaveDBReq::default_instance_;
  delete ComSaveDBReq_reflection_;
  delete ComDelDBReq::default_instance_;
  delete ComDelDBReq_reflection_;
  delete MarryApply::default_instance_;
  delete MarryApply_reflection_;
  delete MarrySimpleInfo::default_instance_;
  delete MarrySimpleInfo_reflection_;
  delete MarryDBLoadReq::default_instance_;
  delete MarryDBLoadReq_reflection_;
  delete MarryDBLoadRsp::default_instance_;
  delete MarryDBLoadRsp_reflection_;
  delete MarryDBSaveReq::default_instance_;
  delete MarryDBSaveReq_reflection_;
  delete AnswerRankDBProto::default_instance_;
  delete AnswerRankDBProto_reflection_;
  delete AnswerDBData::default_instance_;
  delete AnswerDBData_reflection_;
  delete GuardRankDBProto::default_instance_;
  delete GuardRankDBProto_reflection_;
  delete GuardDBData::default_instance_;
  delete GuardDBData_reflection_;
  delete Rank1v1DBProto::default_instance_;
  delete Rank1v1DBProto_reflection_;
  delete Act1v1DBData::default_instance_;
  delete Act1v1DBData_reflection_;
  delete RaceFactionDBProto::default_instance_;
  delete RaceFactionDBProto_reflection_;
  delete RaceMatchDBProto::default_instance_;
  delete RaceMatchDBProto_reflection_;
  delete RaceDBProto::default_instance_;
  delete RaceDBProto_reflection_;
  delete WarRankDBProto::default_instance_;
  delete WarRankDBProto_reflection_;
  delete FactionWarDBData::default_instance_;
  delete FactionWarDBData_reflection_;
  delete DigEggLogDBProto::default_instance_;
  delete DigEggLogDBProto_reflection_;
  delete FestDigEggLogDBProto::default_instance_;
  delete FestDigEggLogDBProto_reflection_;
  delete FestDigEggLogDBData::default_instance_;
  delete FestDigEggLogDBData_reflection_;
  delete FestRTurnableLogDBData::default_instance_;
  delete FestRTurnableLogDBData_reflection_;
  delete FestDonateDBData::default_instance_;
  delete FestDonateDBData_reflection_;
  delete FestDrawPizeLogDBData::default_instance_;
  delete FestDrawPizeLogDBData_reflection_;
  delete GoodsDB::default_instance_;
  delete GoodsDB_reflection_;
  delete LoadGoodsReq::default_instance_;
  delete LoadGoodsReq_reflection_;
  delete MarketDBLoadRsp::default_instance_;
  delete MarketDBLoadRsp_reflection_;
  delete MarketSaveReq::default_instance_;
  delete MarketSaveReq_reflection_;
  delete MarketDelReq::default_instance_;
  delete MarketDelReq_reflection_;
  delete CandleHarmDBProto::default_instance_;
  delete CandleHarmDBProto_reflection_;
  delete CandleDBData::default_instance_;
  delete CandleDBData_reflection_;
}

void protobuf_AddDesc_DBProxy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rDBProxy.proto\022\010proto_ff\032\025yd_fieldoptio"
    "ns.proto\032\tCom.proto\032\017ComDefine.proto\"r\n\017"
    "RoleReliveProto\022\022\n\ntired_time\030\001 \001(\004\022\022\n\nr"
    "elive_num\030\002 \001(\005\022\020\n\010is_tired\030\003 \001(\005\022\r\n\005map"
    "id\030\004 \001(\004\022\026\n\016map_relive_num\030\005 \001(\005\"\203\010\n\016Rol"
    "eDBBaseData\022\014\n\004name\030\001 \002(\014\022\014\n\004prof\030\002 \002(\r\022"
    "\r\n\005level\030\003 \002(\r\022\013\n\003exp\030\004 \002(\003\022\n\n\002hp\030\005 \002(\003\022"
    "\r\n\005fight\030\006 \002(\003\022\022\n\ncreateTime\030\007 \002(\004\022\021\n\tlo"
    "ginTime\030\010 \002(\004\022\022\n\nlogoutTime\030\t \002(\004\022\026\n\016ent"
    "er_scene_id\030\n \002(\004\022\024\n\014enter_map_id\030\013 \002(\004\022"
    "\021\n\tenterposx\030\014 \002(\002\022\021\n\tenterposy\030\r \002(\002\022\021\n"
    "\tenterposz\030\016 \002(\002\022\023\n\013lastsceneid\030\017 \001(\004\022\021\n"
    "\tlastmapid\030\020 \001(\004\022\020\n\010lastposx\030\021 \001(\002\022\020\n\010la"
    "stposy\030\022 \001(\002\022\020\n\010lastposz\030\023 \001(\002\022)\n\006facade"
    "\030\024 \001(\0132\031.proto_ff.RoleFacadeProto\022\021\n\tvip"
    "_level\030\025 \001(\r\022\r\n\005state\030\026 \001(\005\022\022\n\nhanguptim"
    "e\030\027 \001(\004\022)\n\006relive\030\030 \001(\0132\031.proto_ff.RoleR"
    "eliveProto\022\014\n\004gold\030\031 \001(\003\022\013\n\003dia\030\032 \001(\003\022\014\n"
    "\004bdia\030\033 \001(\003\022\r\n\005magic\030\034 \001(\003\022\020\n\010prestige\030\035"
    " \001(\003\022\016\n\006contri\030\036 \001(\005\022\021\n\tarenacoin\030\037 \001(\003\022"
    "\023\n\013godevil_exp\030  \001(\003\022\025\n\rgodevil_level\030! "
    "\001(\005\022\021\n\tlogin_day\030\" \001(\r\022\026\n\016login_day_time"
    "\030# \001(\004\022\017\n\007best_aq\030$ \001(\003\022\017\n\007best_lj\030% \001(\003"
    "\022\024\n\014day_prestige\030& \001(\r\022\025\n\rprestige_time\030"
    "\' \001(\004\022\020\n\010pt_stage\030( \001(\r\022\r\n\005guide\030) \001(\t\022\031"
    "\n\021battlepass_xiance\030* \001(\003\022\032\n\022battlepass_"
    "baoding\030+ \001(\003\022\034\n\024findtreasure_shengfu\030, "
    "\001(\003\022\037\n\027findtreasure_battlesoul\030- \001(\003\022\027\n\017"
    "holybeast_build\030. \001(\003\022\021\n\tmagic_sum\030/ \001(\003"
    "\022\024\n\014subpack_type\0300 \001(\005\022\025\n\rsubpack_fetch\030"
    "1 \001(\005\022\017\n\007hunling\0302 \001(\004\"G\n\016BagItemsDBData"
    "\022%\n\004data\030\001 \003(\0132\027.proto_ff.ItemProtoInfo\022"
    "\016\n\006offset\030\002 \001(\005\";\n\017BagDBSimpleData\022\024\n\014pa"
    "ckage_type\030\001 \001(\r\022\022\n\nexpand_num\030\002 \001(\r\"{\n\021"
    "RoleDBUnitBagData\022\022\n\ntable_name\030\001 \001(\014\022)\n"
    "\006simple\030\002 \001(\0132\031.proto_ff.BagDBSimpleData"
    "\022\'\n\005parts\030\003 \003(\0132\030.proto_ff.BagItemsDBDat"
    "a\":\n\rRoleDBBagData\022)\n\004bags\030\001 \003(\0132\033.proto"
    "_ff.RoleDBUnitBagData\"\211\001\n\017RoleDBEquipDat"
    "a\022\"\n\005infos\030\001 \003(\0132\023.proto_ff.EquipInfo\022*\n"
    "\007lv_attr\030\002 \003(\0132\031.proto_ff.EquipLvAttrInf"
    "o\022\023\n\013stove_level\030\003 \001(\r\022\021\n\tstove_exp\030\004 \001("
    "\004\"\020\n\016RoleDBTaskData\";\n\023GrowPartEntryDBIn"
    "fo\022\n\n\002id\030\001 \001(\003\022\n\n\002lv\030\002 \001(\005\022\014\n\004time\030\003 \001(\003"
    "\"\\\n\016GrowPartDBData\022\014\n\004type\030\001 \001(\005\022-\n\006entr"
    "ys\030\002 \003(\0132\035.proto_ff.GrowPartEntryDBInfo\022"
    "\r\n\005curId\030\003 \001(\003\"5\n\nGrowDBData\022\'\n\005parts\030\001 "
    "\003(\0132\030.proto_ff.GrowPartDBData\"3\n\016DayUseI"
    "temData\022!\n\004info\030\001 \003(\0132\023.proto_ff.ComPair"
    "64\"\203\002\n\022CharacterArenaData\022\026\n\016challengeTi"
    "mes\030\001 \001(\r\022\022\n\nupdateTime\030\002 \001(\004\022\034\n\rhistory"
    "RankId\030\003 \001(\r:\00520001\022\031\n\021buyChallengeTimes"
    "\030\004 \001(\r\022*\n\006result\030\005 \003(\0132\032.proto_ff.ArenaC"
    "hallResult\0220\n\014chall_reward\030\007 \003(\0132\032.proto"
    "_ff.ChallArenaReward\022\031\n\021allChallengeTime"
    "s\030\010 \001(\005\022\017\n\007rank_id\030\t \001(\005\"\253\001\n\nMiniDBData\022"
    "\020\n\010lastTime\030\001 \001(\004\022)\n\007useItem\030\002 \001(\0132\030.pro"
    "to_ff.DayUseItemData\0220\n\narena_data\030\003 \001(\013"
    "2\034.proto_ff.CharacterArenaData\022.\n\021use_it"
    "em_add_attr\030\004 \003(\0132\023.proto_ff.ComPair64\"\347"
    "\002\n\016FacadeDataInfo\022\023\n\013facade_type\030\001 \001(\r\022\021"
    "\n\tfacade_id\030\002 \001(\004\022\022\n\nfacade_lev\030\003 \001(\r\022\022\n"
    "\nfacade_exp\030\004 \001(\004\022\025\n\ruse_soul_item\030\005 \001(\010"
    "\022\022\n\nuse_facade\030\006 \001(\010\022\030\n\020equip_fantasy_id"
    "\030\007 \001(\004\0220\n\013fantasy_map\030\010 \003(\0132\033.proto_ff.F"
    "acadeFantasyData\0222\n\014fragment_map\030\t \003(\0132\034"
    ".proto_ff.FacadeFragmentData\022-\n\nskill_da"
    "ta\030\n \003(\0132\031.proto_ff.FacadeSkillData\022+\n\ts"
    "oul_data\030\013 \001(\0132\030.proto_ff.FacadeSoulData"
    "\"\273\005\n\rMountDataInfo\022\020\n\010mount_id\030\001 \001(\004\022\021\n\t"
    "mount_lev\030\002 \001(\r\022\021\n\tmount_exp\030\003 \001(\004\022\022\n\nus"
    "e_facade\030\004 \001(\010\022\030\n\020equip_fantasy_id\030\005 \001(\004"
    "\022/\n\013fantasy_map\030\006 \003(\0132\032.proto_ff.MountFa"
    "ntasyData\0221\n\014fragment_map\030\007 \003(\0132\033.proto_"
    "ff.MountFragmentData\022,\n\nskill_data\030\010 \003(\013"
    "2\030.proto_ff.MountSkillData\022(\n\010kun_data\030\t"
    " \003(\0132\026.proto_ff.MountKunData\022,\n\nblood_da"
    "ta\030\n \003(\0132\030.proto_ff.MountBloodData\0223\n\016ba"
    "by_slot_data\030\013 \003(\0132\033.proto_ff.MountBabyS"
    "lotData\022\022\n\nride_state\030\014 \001(\r\022\026\n\016mount_mod"
    "el_id\030\r \001(\004\022\033\n\023last_mount_model_id\030\016 \001(\004"
    "\0225\n\017kun_change_data\030\017 \003(\0132\034.proto_ff.Mou"
    "ntKunChangeData\022\024\n\014equip_kun_id\030\020 \001(\004\022\033\n"
    "\023equip_kun_change_id\030\021 \001(\004\022,\n\nfairy_land"
    "\030\022 \003(\0132\030.proto_ff.MountFairyLand\022,\n\nfair"
    "y_slot\030\023 \003(\0132\030.proto_ff.MountFairySlot\022\026"
    "\n\016cur_fairy_land\030\024 \001(\004\"\215\002\n\rDeityDataInfo"
    "\022\020\n\010deity_id\030\001 \001(\004\022\021\n\tdeity_lev\030\002 \001(\r\022\021\n"
    "\tdeity_exp\030\003 \001(\004\022/\n\013fantasy_map\030\004 \003(\0132\032."
    "proto_ff.DeityFantasyData\0221\n\014fragment_ma"
    "p\030\005 \003(\0132\033.proto_ff.DeityFragmentData\022,\n\n"
    "skill_data\030\006 \003(\0132\030.proto_ff.DeitySkillDa"
    "ta\0222\n\013battle_data\030\007 \003(\0132\035.proto_ff.Deity"
    "BattleSlotData\"6\n\014FacadeDBData\022&\n\004data\030\001"
    " \003(\0132\030.proto_ff.FacadeDataInfo\"O\n\013SkillD"
    "BInfo\022\020\n\010skill_id\030\001 \001(\004\022\r\n\005level\030\002 \001(\005\022\016"
    "\n\006wakeup\030\003 \001(\005\022\017\n\007use_msc\030\004 \001(\003\"8\n\nSkill"
    "DBPos\022\020\n\010skill_id\030\001 \001(\004\022\013\n\003pos\030\002 \001(\r\022\013\n\003"
    "use\030\003 \001(\005\"=\n\rSkillDBAdvPos\022\013\n\003pos\030\001 \001(\r\022"
    "\017\n\007advance\030\002 \001(\r\022\016\n\006unlock\030\003 \001(\r\"0\n\016Skil"
    "lDBAdvInfo\022\017\n\007advance\030\001 \001(\005\022\r\n\005level\030\002 \001"
    "(\005\"Q\n\014SkillDBGroup\022\r\n\005group\030\001 \001(\r\022\013\n\003chg"
    "\030\002 \001(\005\022%\n\007pos_lst\030\003 \003(\0132\024.proto_ff.Skill"
    "DBPos\"F\n\014PetSkillCdDB\022\020\n\010skill_id\030\001 \001(\004\022"
    "\020\n\010use_msec\030\002 \001(\004\022\022\n\npet_instid\030\003 \001(\003\"/\n"
    "\022SkillDBTalentProto\022\n\n\002id\030\001 \001(\005\022\r\n\005level"
    "\030\002 \001(\005\"H\n\rSkillDBTalent\022*\n\004info\030\001 \003(\0132\034."
    "proto_ff.SkillDBTalentProto\022\013\n\003cnt\030\002 \001(\r"
    "\"\324\002\n\013SkillDBData\022\'\n\010info_lst\030\001 \003(\0132\025.pro"
    "to_ff.SkillDBInfo\022)\n\tgroup_lst\030\002 \003(\0132\026.p"
    "roto_ff.SkillDBGroup\022\r\n\005group\030\003 \001(\r\022\022\n\nl"
    "ast_group\030\004 \001(\004\022(\n\007adv_pos\030\005 \003(\0132\027.proto"
    "_ff.SkillDBAdvPos\022*\n\010adv_info\030\006 \003(\0132\030.pr"
    "oto_ff.SkillDBAdvInfo\022\022\n\ncur_advpos\030\007 \001("
    "\r\022&\n\006pet_cd\030\010 \003(\0132\026.proto_ff.PetSkillCdD"
    "B\022\'\n\006talent\030\t \001(\0132\027.proto_ff.SkillDBTale"
    "nt\022\023\n\013anger_value\030\n \001(\r\"d\n\025GodRelicsActi"
    "vityData\0225\n\ngroup_data\030\001 \003(\0132!.proto_ff."
    "GodRelicsTaskGroupEntry\022\024\n\014cur_group_id\030"
    "\002 \001(\003\"~\n\022MiniActivityDBData\0228\n\017god_relic"
    "s_data\030\001 \001(\0132\037.proto_ff.GodRelicsActivit"
    "yData\022.\n\ndaily_data\030\002 \001(\0132\032.proto_ff.Dai"
    "lyTaskAllData\"(\n\tDupRecord\022\r\n\005dupId\030\001 \001("
    "\004\022\014\n\004star\030\002 \001(\005\"b\n\014DupGroupData\022\r\n\005group"
    "\030\001 \001(\005\022\020\n\010enterNum\030\002 \001(\005\022\016\n\006buyNum\030\003 \001(\005"
    "\022\016\n\006useNum\030\004 \001(\005\022\021\n\tlastFresh\030\005 \001(\004\"@\n\025D"
    "upTowerDBRecordEntry\022\014\n\004name\030\001 \001(\014\022\014\n\004ti"
    "me\030\002 \001(\004\022\013\n\003cid\030\003 \001(\004\"O\n\020DupTowerDBRecor"
    "d\022\n\n\002id\030\001 \001(\004\022/\n\006entrys\030\002 \003(\0132\037.proto_ff"
    ".DupTowerDBRecordEntry\"\035\n\016DupTowerDBData"
    "\022\013\n\003ids\030\001 \003(\004\";\n\013GhostDBData\022\014\n\004wave\030\001 \001"
    "(\005\022\014\n\004time\030\002 \001(\005\022\020\n\010recv_ids\030\003 \003(\005\"\202\001\n\nM"
    "oyuDBData\022\022\n\nrecv_layer\030\001 \003(\005\022\020\n\010day_har"
    "m\030\002 \001(\004\022\021\n\tweek_harm\030\003 \001(\004\022\025\n\rlast_day_h"
    "arm\030\004 \001(\004\022\026\n\016last_week_harm\030\005 \001(\004\022\014\n\004tim"
    "e\030\006 \001(\004\"g\n\013YaoTaDBData\022\020\n\010pass_ids\030\001 \003(\005"
    "\022\026\n\016first_pass_ids\030\002 \003(\005\022\027\n\017pass_time_po"
    "int\030\003 \001(\004\022\025\n\rpass_duration\030\004 \001(\005\"\361\001\n\tDup"
    "DBData\022#\n\006record\030\001 \003(\0132\023.proto_ff.DupRec"
    "ord\022&\n\006groups\030\002 \003(\0132\026.proto_ff.DupGroupD"
    "ata\022\'\n\005tower\030\003 \001(\0132\030.proto_ff.DupTowerDB"
    "Data\022$\n\005ghost\030\004 \001(\0132\025.proto_ff.GhostDBDa"
    "ta\022\"\n\004moyu\030\005 \001(\0132\024.proto_ff.MoyuDBData\022$"
    "\n\005yaota\030\006 \001(\0132\025.proto_ff.YaoTaDBData\";\n\016"
    "GhostDupRankDB\022)\n\005ranks\030\001 \003(\0132\032.proto_ff"
    ".GHostDupRankInfo\"\233\002\n\nBuffDBInfo\022\016\n\006buff"
    "id\030\001 \001(\004\022\r\n\005index\030\002 \001(\004\022\017\n\007skillid\030\003 \001(\004"
    "\022\020\n\010skilllev\030\004 \001(\r\022\022\n\nis_forever\030\005 \001(\010\022\021"
    "\n\tstartmsec\030\006 \001(\003\022\021\n\tis_effect\030\007 \001(\010\022\016\n\006"
    "param1\030\010 \001(\003\022\016\n\006param2\030\t \001(\003\022\021\n\textramse"
    "c\030\n \001(\003\022\016\n\006is_end\030\013 \001(\005\022\016\n\006param3\030\014 \001(\003\022"
    "\016\n\006param4\030\r \001(\003\022\016\n\006param5\030\016 \001(\003\022\016\n\006param"
    "6\030\017 \001(\003\022\016\n\006param7\030\020 \001(\003\"0\n\014BuffDBCdInfo\022"
    "\016\n\006buffid\030\001 \001(\004\022\020\n\010lastmsec\030\002 \001(\004\":\n\020Buf"
    "fDBShieldInfo\022\022\n\ngod_shield\030\001 \001(\003\022\022\n\nmag"
    "_shield\030\002 \001(\003\"\210\001\n\nBuffDBData\022&\n\010info_lst"
    "\030\001 \003(\0132\024.proto_ff.BuffDBInfo\022&\n\006cd_lst\030\002"
    " \003(\0132\026.proto_ff.BuffDBCdInfo\022*\n\006shield\030\003"
    " \001(\0132\032.proto_ff.BuffDBShieldInfo\"\255\001\n\020Bos"
    "sSimpleInfoDB\022\021\n\tboss_type\030\001 \001(\005\022\017\n\007cur_"
    "num\030\002 \001(\005\022\020\n\010back_num\030\004 \001(\005\022\024\n\014back_max_"
    "num\030\005 \001(\005\022\021\n\tenter_num\030\006 \001(\005\022\024\n\014use_item"
    "_num\030\007 \001(\005\022$\n\tgroupInfo\030\010 \003(\0132\021.proto_ff"
    ".ComPair\"Z\n\nBossDBData\022)\n\005infos\030\001 \003(\0132\032."
    "proto_ff.BossSimpleInfoDB\022\020\n\010lastTime\030\002 "
    "\001(\004\022\017\n\007attents\030\003 \003(\003\"\245\002\n\tVipDBData\022\016\n\006vi"
    "pExp\030\001 \001(\005\022\022\n\nexpDiamond\030\002 \001(\005\022\025\n\rprivil"
    "ege_ids\030\003 \003(\005\022\020\n\010vip_hide\030\004 \001(\005\022\023\n\013activ"
    "e_type\030\005 \001(\005\022\017\n\007outtime\030\006 \001(\004\022\037\n\027last_re"
    "cv_day_gift_time\030\007 \001(\004\022\017\n\007lv_gift\030\010 \003(\005\022"
    "\022\n\nzero_state\030\t \001(\005\022\021\n\trecv_zero\030\n \001(\005\022\017"
    "\n\007add_exp\030\013 \001(\004\022\020\n\010recv_exp\030\014 \001(\005\022\024\n\014ref"
    "resh_time\030\r \001(\004\022\023\n\013active_time\030\016 \001(\004\"0\n\n"
    "AttrDBData\022\"\n\010attr_lst\030\001 \003(\0132\020.proto_ff."
    "Attr64\"j\n\013PetDBRecord\022\016\n\006instId\030\001 \001(\005\022%\n"
    "\010costItem\030\002 \003(\0132\023.proto_ff.ComPair64\022$\n\007"
    "costPet\030\003 \003(\0132\023.proto_ff.ComPair64\"`\n\tPe"
    "tGrowDB\022\r\n\005cfgid\030\001 \001(\005\022\020\n\010stronglv\030\002 \001(\005"
    "\022\016\n\006starlv\030\003 \001(\005\022\021\n\tstarindex\030\004 \001(\005\022\017\n\007f"
    "ailnum\030\005 \001(\005\"\353\001\n\tPetDBData\022\016\n\006fetter\030\001 \003"
    "(\005\022\037\n\004pets\030\002 \003(\0132\021.proto_ff.PetInfo\022&\n\006h"
    "atchs\030\003 \003(\0132\026.proto_ff.PetHatchInfo\022&\n\007r"
    "ecords\030\004 \003(\0132\025.proto_ff.PetDBRecord\022\016\n\006c"
    "fgids\030\005 \003(\003\022\"\n\005grows\030\006 \003(\0132\023.proto_ff.Pe"
    "tGrowDB\022)\n\006yaohun\030\007 \001(\0132\031.proto_ff.PetYa"
    "oHunModule\"3\n\nMallDBInfo\022\n\n\002id\030\001 \001(\003\022\013\n\003"
    "num\030\002 \001(\r\022\014\n\004time\030\003 \001(\004\"z\n\nMallDBData\022!\n"
    "\003day\030\001 \003(\0132\024.proto_ff.MallDBInfo\022\"\n\004week"
    "\030\002 \003(\0132\024.proto_ff.MallDBInfo\022%\n\007forever\030"
    "\003 \003(\0132\024.proto_ff.MallDBInfo\"x\n\nConvoyDat"
    "a\022\016\n\006daynum\030\001 \001(\005\022\020\n\010escortid\030\002 \001(\005\022\017\n\007e"
    "ndTime\030\003 \001(\004\022\017\n\007freeNum\030\004 \001(\005\022\023\n\013genEsco"
    "rtId\030\005 \001(\005\022\021\n\tresetTime\030\006 \001(\004\"1\n\013ArmorDB"
    "Data\022\"\n\005infos\030\001 \003(\0132\023.proto_ff.ArmorInfo"
    "\"\356\001\n\014AssistDBData\022\021\n\tresetTime\030\001 \001(\004\022\023\n\013"
    "dayPrestige\030\002 \001(\005\022\017\n\007sendNum\030\003 \001(\005\022\017\n\007he"
    "lpNum\030\004 \001(\005\022\022\n\nallSendNum\030\005 \001(\005\022\022\n\nallHe"
    "lpNum\030\006 \001(\005\022\027\n\017recvSendGiftNum\030\007 \001(\005\022\027\n\017"
    "recvHelpGiftNum\030\010 \001(\005\022\021\n\trewardIds\030\t \003(\005"
    "\022\'\n\nthanksInfo\030\n \003(\0132\023.proto_ff.ComPair6"
    "4\"K\n\013TitleDBData\022\031\n\021cur_wearing_title\030\001 "
    "\001(\004\022!\n\004data\030\002 \003(\0132\023.proto_ff.TitleInfo\"<"
    "\n\022GodEvilCondDBProto\022\n\n\002id\030\001 \001(\005\022\r\n\005stat"
    "e\030\002 \001(\005\022\013\n\003cur\030\003 \001(\005\"C\n\026GodEvilMultCondD"
    "BProto\022)\n\003lst\030\001 \003(\0132\034.proto_ff.GodEvilCo"
    "ndDBProto\"s\n\022GodEvilTaskDBProto\022\r\n\005stage"
    "\030\001 \001(\005\022.\n\004cond\030\002 \001(\0132 .proto_ff.GodEvilM"
    "ultCondDBProto\022\016\n\006finish\030\003 \001(\005\022\016\n\006accept"
    "\030\004 \001(\005\"\366\001\n\rGodEvilDBData\022\r\n\005fetch\030\001 \001(\005\022"
    "*\n\004task\030\002 \001(\0132\034.proto_ff.GodEvilTaskDBPr"
    "oto\022\014\n\004type\030\003 \001(\005\022\021\n\tlast_time\030\004 \001(\004\022\022\n\n"
    "vessel_lev\030\005 \001(\005\022\022\n\nmirror_lev\030\006 \001(\005\022\021\n\t"
    "extra_exp\030\007 \001(\003\022&\n\005equip\030\010 \003(\0132\027.proto_f"
    "f.ItemProtoInfo\022&\n\005dress\030\t \003(\0132\027.proto_f"
    "f.ItemProtoInfo\"\216\001\n\tPayDBData\022\r\n\005db_id\030\001"
    " \003(\r\022\017\n\007product\030\002 \003(\014\022\016\n\006relrmb\030\003 \001(\r\022\013\n"
    "\003rmb\030\004 \001(\r\022\017\n\007fakermb\030\005 \001(\r\022\020\n\010todayrmb\030"
    "\006 \001(\r\022\021\n\ttodaytime\030\007 \001(\004\022\016\n\006sdkrmb\030\010 \001(\r"
    "\"9\n\017FactionDBSalary\022\n\n\002id\030\001 \001(\005\022\013\n\003cur\030\002"
    " \001(\005\022\r\n\005fetch\030\003 \001(\005\"m\n\017FactionDBDinner\022\r"
    "\n\005trans\030\001 \001(\005\022\014\n\004meat\030\002 \001(\005\022\013\n\003exp\030\003 \001(\r"
    "\022\016\n\006contri\030\004 \001(\r\022\014\n\004time\030\005 \001(\004\022\022\n\ntrans_"
    "time\030\006 \001(\004\"0\n\023FactionDBSkillProto\022\n\n\002id\030"
    "\001 \001(\005\022\r\n\005level\030\002 \001(\005\"=\n\016FactionDBSkill\022+"
    "\n\004info\030\001 \003(\0132\035.proto_ff.FactionDBSkillPr"
    "oto\"|\n\016FactionDBGuard\022\013\n\003exp\030\001 \001(\r\022\016\n\006co"
    "ntri\030\002 \001(\r\022$\n\034cur_encouragement_gold_cou"
    "nt\030\003 \001(\004\022\'\n\037cur_encouragement_diamond_co"
    "unt\030\004 \001(\004\"\242\002\n\021RoleFactionDBData\022\022\n\ndonat"
    "e_num\030\001 \001(\005\022\024\n\014donate_fresh\030\002 \001(\004\022)\n\006sal"
    "ary\030\003 \003(\0132\031.proto_ff.FactionDBSalary\022\024\n\014"
    "salary_fresh\030\004 \001(\004\022)\n\006dinner\030\005 \001(\0132\031.pro"
    "to_ff.FactionDBDinner\022\'\n\005skill\030\006 \001(\0132\030.p"
    "roto_ff.FactionDBSkill\022\'\n\005guard\030\007 \001(\0132\030."
    "proto_ff.FactionDBGuard\022\021\n\tfetch_war\030\010 \001"
    "(\005\022\022\n\nfetch_time\030\t \001(\004\"`\n\020RoleBestEQDBDa"
    "ta\022\'\n\005slots\030\001 \003(\0132\030.proto_ff.BestEQSlotI"
    "nfo\022#\n\005tasks\030\002 \003(\0132\024.proto_ff.BestEQTask"
    "\"M\n\rAncientDBData\022\026\n\016unlock_star_id\030\001 \001("
    "\005\022$\n\005infos\030\002 \003(\0132\025.proto_ff.AncientInfo\""
    "8\n\020RoleEmblemDBInfo\022\n\n\002id\030\001 \001(\005\022\n\n\002lv\030\002 "
    "\001(\005\022\014\n\004star\030\003 \001(\005\"\300\001\n\rRole1v1DBInfo\022\r\n\005s"
    "core\030\001 \001(\005\022\021\n\tmatch_num\030\002 \001(\005\022\017\n\007win_num"
    "\030\003 \001(\005\022\021\n\tconti_num\030\004 \001(\005\022\022\n\nreward_num\030"
    "\005 \001(\005\022\025\n\ralready_fetch\030\006 \003(\005\022\023\n\013reward_t"
    "ime\030\007 \001(\004\022\022\n\nreset_time\030\010 \001(\004\022\025\n\rcur_con"
    "ti_num\030\t \001(\005\"\253\001\n\rRolePvpDBData\022\016\n\006pkmode"
    "\030\001 \001(\005\022\020\n\010chg_time\030\002 \001(\005\022\021\n\tkillvalue\030\003 "
    "\001(\005\022\021\n\tonlinesec\030\004 \001(\005\022*\n\006emblem\030\005 \003(\0132\032"
    ".proto_ff.RoleEmblemDBInfo\022&\n\005pk1v1\030\006 \001("
    "\0132\027.proto_ff.Role1v1DBInfo\"M\n\020RoleMarryE"
    "xpress\022\014\n\004name\030\001 \001(\014\022\014\n\004item\030\002 \001(\004\022\017\n\007te"
    "xt_id\030\003 \001(\005\022\014\n\004time\030\004 \001(\004\"\325\001\n\017RoleMarryD"
    "BData\022%\n\004info\030\001 \001(\0132\027.proto_ff.MarrySelf"
    "Info\022*\n\006toSlef\030\002 \003(\0132\032.proto_ff.RoleMarr"
    "yExpress\022+\n\007toOther\030\003 \003(\0132\032.proto_ff.Rol"
    "eMarryExpress\0220\n\ndup_record\030\004 \001(\0132\034.prot"
    "o_ff.WeddingDupRoleInfo\022\020\n\010lastTime\030\005 \001("
    "\004\"@\n\021EncylopediaDBData\022+\n\thand_book\030\001 \001("
    "\0132\030.proto_ff.HandBookPBData\"K\n\010GVBPData\022"
    "\025\n\rrewards_state\030\001 \003(\r\022\023\n\013daily_score\030\002 "
    "\001(\r\022\023\n\013record_time\030\003 \001(\004\"\376\001\n\014ChargeDBDat"
    "a\022\021\n\tfirst_rmb\030\001 \001(\005\022\023\n\013first_fetch\030\002 \003("
    "\005\022\017\n\007dia_rmb\030\003 \001(\005\022\021\n\tdia_fetch\030\004 \003(\005\022\020\n"
    "\010star_rmb\030\005 \001(\005\022\022\n\nstar_fetch\030\006 \003(\005\022\020\n\010k"
    "ing_rmb\030\007 \001(\005\022\022\n\nking_fetch\030\010 \003(\005\022\022\n\nsec"
    "ond_rmb\030\t \001(\005\022\024\n\014second_fetch\030\n \003(\005\022\022\n\no"
    "pen_total\030\013 \001(\005\022\030\n\020open_total_fetch\030\014 \003("
    "\005\"G\n\017GiftCondDBProto\022\n\n\002id\030\001 \001(\005\022\014\n\004time"
    "\030\002 \001(\004\022\013\n\003buy\030\003 \001(\005\022\r\n\005close\030\004 \001(\005\"9\n\017Gi"
    "ftZeroDBProto\022\n\n\002id\030\001 \001(\005\022\013\n\003buy\030\002 \001(\005\022\r"
    "\n\005fetch\030\003 \001(\005\"\?\n\022GiftZeroLogDBProto\022\014\n\004n"
    "ame\030\001 \001(\014\022\014\n\004type\030\002 \001(\005\022\r\n\005value\030\003 \001(\005\"\216"
    "\001\n\nGiftDBData\022\'\n\004cond\030\001 \003(\0132\031.proto_ff.G"
    "iftCondDBProto\022\'\n\004zero\030\002 \003(\0132\031.proto_ff."
    "GiftZeroDBProto\022.\n\010zero_log\030\003 \003(\0132\034.prot"
    "o_ff.GiftZeroLogDBProto\"\023\n\021FestSimpleDBP"
    "roto\"2\n\017FestShopDBProto\022\037\n\004info\030\001 \003(\0132\021."
    "proto_ff.ComPair\"\"\n\017FestSignDBProto\022\017\n\007i"
    "s_sign\030\001 \001(\005\"7\n\024FestGoldStoreDBProto\022\037\n\004"
    "info\030\001 \003(\0132\021.proto_ff.ComPair\"\?\n\025FestDig"
    "EggTaskDBProto\022\n\n\002id\030\001 \001(\005\022\013\n\003cur\030\002 \001(\005\022"
    "\r\n\005fetch\030\003 \001(\005\"\247\001\n\021FestDigEggDBProto\022!\n\006"
    "id_lst\030\001 \003(\0132\021.proto_ff.ComPair\022\014\n\004free\030"
    "\002 \001(\005\022\014\n\004time\030\003 \001(\004\022\021\n\tauto_time\030\004 \001(\004\022-"
    "\n\004task\030\005 \003(\0132\037.proto_ff.FestDigEggTaskDB"
    "Proto\022\021\n\ttask_time\030\006 \001(\004\"\?\n\021FestCandleDB"
    "Proto\022\016\n\006id_lst\030\001 \003(\005\022\014\n\004time\030\002 \001(\004\022\014\n\004h"
    "arm\030\003 \001(\003\"\025\n\023FestBtDragonDBProto\"U\n\034Fest"
    "RTurnableRechargeDBProto\0225\n\004info\030\001 \003(\0132\'"
    ".proto_ff.FestRTurnableRechargeOneProto\""
    "\203\001\n\035FestDailyTotalRechargeDBProto\0226\n\004inf"
    "o\030\001 \003(\0132(.proto_ff.FestDailyTotalRecharg"
    "eOneProto\022\026\n\016total_recharge\030\002 \001(\r\022\022\n\nflu"
    "sh_time\030\003 \001(\004\"\202\001\n\023FestTurnableDBProto\022-\n"
    "\004task\030\001 \003(\0132\037.proto_ff.FestTurnableTaskP"
    "roto\022\020\n\010left_num\030\002 \001(\r\022\022\n\nflush_time\030\003 \001"
    "(\004\022\026\n\016chou_jiang_ids\030\005 \003(\005\"\312\001\n\021FestDonat"
    "eDBProto\022/\n\006single\030\001 \003(\0132\037.proto_ff.Fest"
    "DonateSingleProto\022/\n\006server\030\002 \003(\0132\037.prot"
    "o_ff.FestDonateServerProto\022\022\n\nsingle_num"
    "\030\003 \001(\r\022+\n\004task\030\004 \003(\0132\035.proto_ff.FestDona"
    "teTaskProto\022\022\n\nflush_time\030\005 \001(\004\"S\n\021FestO"
    "nlineDBProto\022*\n\004data\030\001 \003(\0132\034.proto_ff.Fe"
    "stOnlineOneProto\022\022\n\nflush_time\030\002 \001(\004\"]\n\026"
    "FestCollectWordDBProto\022/\n\004data\030\001 \003(\0132!.p"
    "roto_ff.FestCollectWordOneProto\022\022\n\nflush"
    "_time\030\002 \001(\004\"S\n\017FestBossFirstDB\022\025\n\rrecv_k"
    "ill_ids\030\001 \003(\005\022\024\n\014recv_red_ids\030\002 \003(\005\022\023\n\013m"
    "_kills_ids\030\003 \003(\005\"W\n\014FMarryRoleDB\022#\n\005task"
    "s\030\001 \003(\0132\024.proto_ff.FMarryTask\022\023\n\013process"
    "_ids\030\002 \003(\005\022\r\n\005score\030\003 \001(\005\"`\n\027DayTotalRec"
    "hargeDBProto\022\021\n\tfetch_lst\030\001 \003(\005\022\020\n\010recha"
    "rge\030\002 \001(\r\022\014\n\004time\030\003 \001(\004\022\022\n\nreset_time\030\004 "
    "\001(\004\";\n\024TotalRechargeDBProto\022\021\n\tfetch_lst"
    "\030\001 \003(\005\022\020\n\010recharge\030\002 \001(\r\"6\n\022LoginRewardD"
    "BProto\022 \n\005fetch\030\001 \003(\0132\021.proto_ff.ComPair"
    "\"\265\010\n\021FestDetailDBProto\022\023\n\013template_id\030\001 "
    "\002(\005\022\016\n\006period\030\002 \002(\005\022\021\n\tbegintime\030\003 \002(\004\022\'"
    "\n\004shop\030\004 \001(\0132\031.proto_ff.FestShopDBProto\022"
    "E\n\024daily_total_recharge\030\005 \001(\0132\'.proto_ff"
    ".FestDailyTotalRechargeDBProto\022\'\n\004sign\030\006"
    " \001(\0132\031.proto_ff.FestSignDBProto\0222\n\ngold_"
    "store\030\007 \001(\0132\036.proto_ff.FestGoldStoreDBPr"
    "oto\022,\n\007dig_egg\030\010 \001(\0132\033.proto_ff.FestDigE"
    "ggDBProto\022B\n\022rturnable_recharge\030\t \001(\0132&."
    "proto_ff.FestRTurnableRechargeDBProto\0220\n"
    "\tturntable\030\n \001(\0132\035.proto_ff.FestTurnable"
    "DBProto\022+\n\006donate\030\013 \001(\0132\033.proto_ff.FestD"
    "onateDBProto\022+\n\006online\030\014 \001(\0132\033.proto_ff."
    "FestOnlineDBProto\0226\n\014collect_word\030\r \001(\0132"
    " .proto_ff.FestCollectWordDBProto\022*\n\tdra"
    "w_pize\030\016 \001(\0132\027.proto_ff.DrawPizeProto\022-\n"
    "\013server_rank\030\017 \001(\0132\030.proto_ff.FestRankDB"
    "Data\022\'\n\004boss\030\020 \001(\0132\031.proto_ff.FestBossFi"
    "rstDB\0227\n\017hui_meng_xi_you\030\021 \001(\0132\036.proto_f"
    "f.FestHuiMengXiYouData\0220\n\tbt_dragon\030\022 \001("
    "\0132\035.proto_ff.FestBtDragonDBProto\022+\n\006cand"
    "le\030\023 \001(\0132\033.proto_ff.FestCandleDBProto\022%\n"
    "\005marry\030\024 \001(\0132\026.proto_ff.FMarryRoleDB\022=\n\022"
    "day_total_recharge\030\025 \001(\0132!.proto_ff.DayT"
    "otalRechargeDBProto\0226\n\016total_recharge\030\026 "
    "\001(\0132\036.proto_ff.TotalRechargeDBProto\022+\n\005l"
    "ogin\030\027 \001(\0132\034.proto_ff.LoginRewardDBProto"
    "\"F\n\nFestDBData\022)\n\004info\030\001 \003(\0132\033.proto_ff."
    "FestDetailDBProto\022\r\n\005close\030\002 \003(\005\"x\n\rShad"
    "owDBProto\022\013\n\003lev\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022\014\n\004s"
    "tar\030\003 \001(\005\022\r\n\005lucky\030\004 \001(\005\022\037\n\004frag\030\005 \003(\0132\021"
    ".proto_ff.ComPair\022\017\n\007curstar\030\006 \001(\005\"N\n\013Ha"
    "loDBProto\022\037\n\004info\030\001 \003(\0132\021.proto_ff.ComPa"
    "ir\022\r\n\005curid\030\002 \001(\005\022\017\n\007curstar\030\003 \001(\005\"\\\n\014Dr"
    "agonDBData\022\'\n\006shadow\030\001 \001(\0132\027.proto_ff.Sh"
    "adowDBProto\022#\n\004halo\030\002 \001(\0132\025.proto_ff.Hal"
    "oDBProto\"\272\001\n\016RoleDBTurnData\022#\n\006entrys\030\001 "
    "\003(\0132\023.proto_ff.TurnEntry\022$\n\006simple\030\002 \001(\013"
    "2\024.proto_ff.TurnSimple\022$\n\006helper\030\003 \003(\0132\024"
    ".proto_ff.TurnHelper\022\024\n\014refresh_time\030\004 \001"
    "(\004\022!\n\005tasks\030\005 \003(\0132\022.proto_ff.TurnTask\"\237\001"
    "\n\tGMADbData\022\022\n\nremainTime\030\001 \001(\r\022\026\n\016freeT"
    "imeRemain\030\002 \001(\r\022\020\n\010freeTime\030\003 \001(\r\022\021\n\tpri"
    "vilege\030\004 \001(\r\022\030\n\020recvFreeTimePrev\030\005 \001(\004\022\020"
    "\n\010expTotal\030\006 \001(\003\022\025\n\rexpAccumulate\030\007 \001(\003\""
    "t\n\nSoulDBData\022\"\n\005entry\030\001 \001(\0132\023.proto_ff."
    "SoulEntry\022 \n\004pool\030\002 \001(\0132\022.proto_ff.SoulP"
    "ool\022 \n\005tasks\030\003 \003(\0132\021.proto_ff.ComPair\"\207\020"
    "\n\nRoleDBData\022\021\n\003cid\030\001 \002(\004B\004\300\202\024\002\022\021\n\003zid\030\002"
    " \002(\rB\004\300\202\024\003\022\021\n\003uid\030\003 \001(\rB\004\300\202\024\003\022&\n\004base\030\004 "
    "\001(\0132\030.proto_ff.RoleDBBaseData\022$\n\003bag\030\005 \001"
    "(\0132\027.proto_ff.RoleDBBagData\022(\n\005equip\030\006 \001"
    "(\0132\031.proto_ff.RoleDBEquipData\022+\n\004task\030\007 "
    "\001(\0132\035.proto_ff.CharacterDBTaskData\0220\n\nun"
    "lockinfo\030\010 \001(\0132\034.proto_ff.FunctionUnlock"
    "Info\022\"\n\004grow\030\t \001(\0132\024.proto_ff.GrowDBData"
    "\022\"\n\004mini\030\n \001(\0132\024.proto_ff.MiniDBData\022&\n\006"
    "facade\030\013 \001(\0132\026.proto_ff.FacadeDBData\022$\n\005"
    "skill\030\014 \001(\0132\025.proto_ff.SkillDBData\0223\n\rmi"
    "ni_activity\030\r \001(\0132\034.proto_ff.MiniActivit"
    "yDBData\022 \n\003dup\030\016 \001(\0132\023.proto_ff.DupDBDat"
    "a\022\"\n\004buff\030\017 \001(\0132\024.proto_ff.BuffDBData\022\"\n"
    "\004boss\030\020 \001(\0132\024.proto_ff.BossDBData\022 \n\003vip"
    "\030\021 \001(\0132\023.proto_ff.VipDBData\022\"\n\004attr\030\022 \001("
    "\0132\024.proto_ff.AttrDBData\022&\n\005mount\030\023 \001(\0132\027"
    ".proto_ff.MountDataInfo\022&\n\005deity\030\024 \001(\0132\027"
    ".proto_ff.DeityDataInfo\022 \n\003pet\030\025 \001(\0132\023.p"
    "roto_ff.PetDBData\022\"\n\004mall\030\026 \001(\0132\024.proto_"
    "ff.MallDBData\022$\n\006convoy\030\027 \001(\0132\024.proto_ff"
    ".ConvoyData\022$\n\005armor\030\030 \001(\0132\025.proto_ff.Ar"
    "morDBData\022&\n\006assist\030\031 \001(\0132\026.proto_ff.Ass"
    "istDBData\022$\n\005title\030\032 \001(\0132\025.proto_ff.Titl"
    "eDBData\022(\n\007godevil\030\033 \001(\0132\027.proto_ff.GodE"
    "vilDBData\0223\n\noccupatoin\030\034 \001(\0132\037.proto_ff"
    ".OccupationMissionData\022 \n\003pay\030\035 \001(\0132\023.pr"
    "oto_ff.PayDBData\0221\n\014role_faction\030\036 \001(\0132\033"
    ".proto_ff.RoleFactionDBData\022.\n\nbest_equi"
    "p\030\037 \001(\0132\032.proto_ff.RoleBestEQDBData\022.\n\013a"
    "chievement\030  \001(\0132\031.proto_ff.AchievementD"
    "ata\022(\n\007ancient\030! \001(\0132\027.proto_ff.AncientD"
    "BData\022$\n\003pvp\030\" \001(\0132\027.proto_ff.RolePvpDBD"
    "ata\022,\n\006ptdata\030# \001(\0132\034.proto_ff.PracticeT"
    "rueDBData\022-\n\nrole_marry\030$ \001(\0132\031.proto_ff"
    ".RoleMarryDBData\0221\n\014encylopeddia\030% \001(\0132\033"
    ".proto_ff.EncylopediaDBData\022%\n\tgvb_pdata"
    "\030& \001(\0132\022.proto_ff.GVBPData\022\"\n\007psdatas\030\' "
    "\001(\0132\021.proto_ff.PSDatas\022-\n\013dragon_soul\030( "
    "\001(\0132\030.proto_ff.DragonSoulData\022(\n\007welfare"
    "\030) \001(\0132\027.proto_ff.WelfarePBData\0223\n\rdaily"
    "_welfare\030* \001(\0132\034.proto_ff.DailyWelfarePB"
    "Data\022&\n\006charge\030+ \001(\0132\026.proto_ff.ChargeDB"
    "Data\022\"\n\004gift\030, \001(\0132\024.proto_ff.GiftDBData"
    "\0223\n\rfind_treature\030- \001(\0132\034.proto_ff.FindT"
    "reatureDBData\022\"\n\004fest\030. \001(\0132\024.proto_ff.F"
    "estDBData\022&\n\006dragon\030/ \001(\0132\026.proto_ff.Dra"
    "gonDBData\022 \n\004star\0300 \001(\0132\022.proto_ff.StarD"
    "ata\022\016\n\006change\0301 \001(\005\022&\n\004turn\0302 \001(\0132\030.prot"
    "o_ff.RoleDBTurnData\022&\n\tgma_datas\0303 \001(\0132\023"
    ".proto_ff.GMADbData\022\"\n\004soul\0304 \001(\0132\024.prot"
    "o_ff.SoulDBData\":\n\016RedWaitDBProto\022\013\n\003idx"
    "\030\001 \001(\r\022\r\n\005cfgid\030\002 \001(\005\022\014\n\004time\030\003 \001(\004\"1\n\021R"
    "edTriggerDBProto\022\r\n\005cfgid\030\001 \001(\005\022\r\n\005count"
    "\030\002 \001(\005\"\365\001\n\rRoleRedDBData\022\014\n\004bdia\030\001 \001(\r\022\r"
    "\n\005magic\030\002 \001(\r\022\020\n\010todaynum\030\003 \001(\r\022\022\n\ntoday"
    "magic\030\004 \001(\r\022\021\n\ttodaybdia\030\005 \001(\r\022\021\n\tfresht"
    "ime\030\006 \001(\004\022\020\n\010send_lst\030\007 \003(\005\022*\n\010wait_lst\030"
    "\010 \003(\0132\030.proto_ff.RedWaitDBProto\022\013\n\003cid\030\t"
    " \001(\004\0220\n\013trigger_lst\030\n \003(\0132\033.proto_ff.Red"
    "TriggerDBProto\"9\n\017RedFetchDBProto\022\013\n\003cid"
    "\030\001 \001(\004\022\013\n\003val\030\002 \001(\r\022\014\n\004time\030\003 \001(\004\">\n\023Red"
    "FetchListDBProto\022\'\n\004info\030\001 \003(\0132\031.proto_f"
    "f.RedFetchDBProto\"\232\001\n\016RedSendDBProto\022\013\n\003"
    "idx\030\001 \001(\r\022\r\n\005cfgid\030\002 \001(\005\022\016\n\006sender\030\003 \001(\004"
    "\022\020\n\010sendtime\030\004 \001(\004\022\014\n\004word\030\005 \001(\014\022\016\n\006fini"
    "sh\030\006 \001(\005\022,\n\005fetch\030\007 \001(\0132\035.proto_ff.RedFe"
    "tchListDBProto\"\264\001\n\tRedDBData\022&\n\004wait\030\001 \003"
    "(\0132\030.proto_ff.RedWaitDBProto\0220\n\013trigger_"
    "lst\030\002 \003(\0132\033.proto_ff.RedTriggerDBProto\022\021"
    "\n\tfreshtime\030\003 \001(\004\022&\n\004send\030\004 \003(\0132\030.proto_"
    "ff.RedSendDBProto\022\022\n\nfaction_id\030\005 \001(\r\"\216\003"
    "\n\016RoleMirrorData\022\013\n\003cid\030\001 \001(\004\022\014\n\004type\030\002 "
    "\001(\005\022\016\n\006teamid\030\003 \001(\r\022\013\n\003zid\030\004 \001(\r\022\"\n\004attr"
    "\030\005 \001(\0132\024.proto_ff.AttrDBData\022$\n\005skill\030\006 "
    "\001(\0132\025.proto_ff.SkillDBData\022&\n\004base\030\007 \001(\013"
    "2\030.proto_ff.RoleDBBaseData\022(\n\005equip\030\010 \001("
    "\0132\031.proto_ff.RoleDBEquipData\022/\n\014beast_eq"
    "uips\030\t \003(\0132\031.proto_ff.BestEQEquipInfo\022-\n"
    "\013beast_slots\030\n \003(\0132\030.proto_ff.BestEQSlot"
    "Info\022\016\n\006campid\030\013 \001(\005\"8\n\004Type\022\010\n\004Role\020\001\022\t"
    "\n\005Rebot\020\002\022\014\n\010TeamRole\020\003\022\r\n\tTeamRebot\020\004\"W"
    "\n\021FactionMemDBProto\022\013\n\003cid\030\001 \001(\004\022\014\n\004duty"
    "\030\002 \001(\005\022\021\n\tjoin_time\030\003 \001(\004\022\024\n\014total_contr"
    "i\030\004 \001(\r\"E\n\025FactionMultMemDBProto\022,\n\007mem_"
    "lst\030\001 \003(\0132\033.proto_ff.FactionMemDBProto\"0"
    "\n\023FactionApplyDBProto\022\013\n\003cid\030\001 \001(\004\022\014\n\004ti"
    "me\030\002 \001(\004\"K\n\027FactionMultApplyDBProto\0220\n\ta"
    "pply_lst\030\001 \003(\0132\035.proto_ff.FactionApplyDB"
    "Proto\"M\n\024FactionRecordDBProto\022\013\n\003cid\030\001 \001"
    "(\004\022\014\n\004time\030\002 \001(\004\022\n\n\002op\030\003 \001(\005\022\016\n\006param1\030\004"
    " \001(\003\"M\n\027FactionMutRecordDBProto\0222\n\nrecor"
    "d_lst\030\001 \003(\0132\036.proto_ff.FactionRecordDBPr"
    "oto\"\265\003\n\rFactionDBBase\022\022\n\nfaction_id\030\001 \001("
    "\r\022\014\n\004name\030\002 \001(\014\022\021\n\tleader_id\030\003 \001(\004\022\r\n\005fi"
    "ght\030\004 \001(\004\022\016\n\006notice\030\005 \001(\014\022\030\n\020last_notice"
    "_time\030\006 \001(\004\022\r\n\005level\030\007 \001(\r\022\013\n\003exp\030\010 \001(\004\022"
    "\023\n\013create_time\030\t \001(\004\022\020\n\010proxy_id\030\n \001(\004\022\022"
    "\n\nproxy_time\030\013 \001(\004\022\r\n\005grade\030\014 \001(\005\022/\n\006mem"
    "ber\030\r \001(\0132\037.proto_ff.FactionMultMemDBPro"
    "to\0220\n\005apply\030\016 \001(\0132!.proto_ff.FactionMult"
    "ApplyDBProto\0221\n\006record\030\017 \001(\0132!.proto_ff."
    "FactionMutRecordDBProto\022\022\n\napply_type\030\020 "
    "\001(\005\022\021\n\tapply_lev\030\021 \001(\005\022\023\n\013apply_fight\030\022 "
    "\001(\004\"4\n\027FactionBeastHarmDBProto\022\013\n\003cid\030\001 "
    "\001(\004\022\014\n\004harm\030\002 \001(\003\"\350\001\n\022FactionBeastDBData"
    "\022/\n\004harm\030\001 \003(\0132!.proto_ff.FactionBeastHa"
    "rmDBProto\022\014\n\004star\030\002 \001(\r\022\017\n\007is_open\030\003 \001(\005"
    "\022\017\n\007tribute\030\004 \001(\r\022\023\n\013today_count\030\005 \001(\r\022\023"
    "\n\013today_fresh\030\006 \001(\004\022\022\n\nweek_count\030\007 \001(\r\022"
    "\022\n\nweek_fresh\030\010 \001(\004\022\r\n\005level\030\t \001(\005\022\020\n\010op"
    "entime\030\n \001(\004\"B\n\027FactionGuardHarmDBProto\022"
    "\013\n\003cid\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\014\n\004harm\030\003 \001(\003"
    "\"\215\001\n\022FactionGuardDBData\022/\n\004harm\030\001 \003(\0132!."
    "proto_ff.FactionGuardHarmDBProto\0223\n\010old_"
    "harm\030\002 \003(\0132!.proto_ff.FactionGuardHarmDB"
    "Proto\022\021\n\tcan_enter\030\003 \001(\010\"\250\001\n\013FactionMoyu"
    "\022\021\n\tweek_harm\030\001 \001(\004\022\026\n\016last_week_harm\030\002 "
    "\001(\004\022\021\n\tcur_layer\030\003 \001(\005\022\016\n\006cur_hp\030\004 \001(\004\022\016"
    "\n\006max_hp\030\005 \001(\004\022\021\n\tharm_time\030\006 \001(\004\022\024\n\014ref"
    "resh_time\030\007 \001(\004\022\022\n\npass_layer\030\010 \001(\005\"\216\001\n\r"
    "FactionDBData\022+\n\005beast\030\001 \001(\0132\034.proto_ff."
    "FactionBeastDBData\022+\n\005guard\030\002 \001(\0132\034.prot"
    "o_ff.FactionGuardDBData\022#\n\004moyu\030\003 \001(\0132\025."
    "proto_ff.FactionMoyu\"t\n\020FactionAllDBData"
    "\022\022\n\nfaction_id\030\001 \001(\r\022%\n\004base\030\002 \001(\0132\027.pro"
    "to_ff.FactionDBBase\022%\n\004data\030\003 \001(\0132\027.prot"
    "o_ff.FactionDBData\"`\n\026FactionDBMoyuRankE"
    "ntry\022\n\n\002id\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\013\n\003zid\030\003 "
    "\001(\005\022\014\n\004harm\030\004 \001(\004\022\021\n\tharm_time\030\005 \001(\004\"n\n\021"
    "FactionDBMoyuRank\022\014\n\004type\030\001 \001(\005\022\r\n\005group"
    "\030\002 \001(\005\022.\n\004rank\030\003 \003(\0132 .proto_ff.FactionD"
    "BMoyuRankEntry\022\014\n\004time\030\004 \001(\004\"A\n\023FactionD"
    "BMoyuRankDB\022*\n\005infos\030\001 \003(\0132\033.proto_ff.Fa"
    "ctionDBMoyuRank\"M\n\rRoleListDBReq\022\r\n\005reqi"
    "d\030\001 \002(\004\022\013\n\003uid\030\002 \002(\r\022\016\n\006gateid\030\003 \002(\r\022\020\n\010"
    "born_zid\030\004 \002(\r\"\205\001\n\rRoleListDBRsp\022\013\n\003ret\030"
    "\001 \002(\005\022\r\n\005reqid\030\002 \002(\004\022\013\n\003uid\030\003 \002(\r\022\016\n\006gat"
    "eid\030\004 \002(\r\022+\n\010role_lst\030\005 \003(\0132\031.proto_ff.R"
    "oleListDBProto\022\016\n\006regnum\030\006 \001(\r\"\246\001\n\017Creat"
    "eRoleDBReq\022\r\n\005reqid\030\001 \002(\004\022\013\n\003zid\030\002 \002(\r\022\016"
    "\n\006gateid\030\003 \002(\r\022\"\n\004data\030\004 \002(\0132\024.proto_ff."
    "RoleDBData\022\013\n\003uid\030\005 \001(\r\022\022\n\nchannel_id\030\006 "
    "\001(\r\022\020\n\010zone_mid\030\007 \001(\r\022\020\n\010born_zid\030\010 \001(\r\""
    "\260\001\n\017CreateRoleDBRsp\022\013\n\003ret\030\001 \002(\005\022\r\n\005reqi"
    "d\030\002 \002(\004\022\013\n\003uid\030\003 \002(\r\022\016\n\006gateid\030\004 \002(\r\022\'\n\004"
    "info\030\005 \001(\0132\031.proto_ff.RoleListDBProto\022\020\n"
    "\010born_zid\030\006 \001(\r\022)\n\006simple\030\007 \001(\0132\031.proto_"
    "ff.CenterRoleProto\";\n\rRoleInfoDBReq\022\r\n\005r"
    "eqid\030\001 \002(\004\022\013\n\003cid\030\002 \002(\004\022\016\n\006change\030\003 \001(\005\""
    "l\n\rRoleInfoDBRsp\022\013\n\003ret\030\001 \002(\005\022\r\n\005reqid\030\002"
    " \002(\004\022\013\n\003cid\030\003 \002(\004\022\016\n\006change\030\004 \001(\005\022\"\n\004inf"
    "o\030\005 \001(\0132\024.proto_ff.RoleDBData\"S\n\023RoleInf"
    "oUpdateDBReq\022\013\n\003cid\030\001 \002(\004\022\013\n\003uid\030\002 \002(\r\022\""
    "\n\004info\030\003 \001(\0132\024.proto_ff.RoleDBData\"-\n\020Ro"
    "leChgNameDBReq\022\013\n\003cid\030\001 \002(\004\022\014\n\004name\030\002 \002("
    "\014\":\n\020RoleChgNameDBRsp\022\013\n\003ret\030\001 \002(\005\022\013\n\003ci"
    "d\030\002 \002(\004\022\014\n\004name\030\003 \002(\014\"\025\n\023RoleSimpleListD"
    "BReq\"`\n\023RoleSimpleListDBRsp\022\013\n\003ret\030\001 \002(\005"
    "\022\'\n\004info\030\002 \003(\0132\031.proto_ff.CenterRoleProt"
    "o\022\023\n\013finish_flag\030\003 \001(\005\"-\n\027CreatureTransL"
    "ogicDBReq\022\022\n\ntrans_data\030\001 \001(\014\"7\n\027Creatur"
    "eTransLogicDBRsp\022\017\n\007retcode\030\001 \002(\005\022\013\n\003cid"
    "\030\002 \001(\004\"A\n\rNewMailDBInfo\022 \n\004data\030\001 \003(\0132\022."
    "proto_ff.MailInfo\022\016\n\006result\030\002 \001(\005\"4\n\021Mai"
    "lDBOperateInfo\022\017\n\007mid_lst\030\001 \003(\r\022\016\n\006resul"
    "t\030\002 \001(\005\"\327\001\n\rSaveMailDBReq\022\016\n\006charid\030\001 \002("
    "\004\022%\n\004info\030\002 \001(\0132\027.proto_ff.NewMailDBInfo"
    "\022(\n\003del\030\003 \001(\0132\033.proto_ff.MailDBOperateIn"
    "fo\022*\n\005fetch\030\004 \001(\0132\033.proto_ff.MailDBOpera"
    "teInfo\022)\n\004read\030\005 \001(\0132\033.proto_ff.MailDBOp"
    "erateInfo\022\016\n\006notify\030\006 \001(\005\"\327\001\n\rSaveMailDB"
    "Rsp\022\016\n\006charid\030\001 \002(\004\022%\n\004info\030\002 \001(\0132\027.prot"
    "o_ff.NewMailDBInfo\022(\n\003del\030\003 \001(\0132\033.proto_"
    "ff.MailDBOperateInfo\022*\n\005fetch\030\004 \001(\0132\033.pr"
    "oto_ff.MailDBOperateInfo\022)\n\004read\030\005 \001(\0132\033"
    ".proto_ff.MailDBOperateInfo\022\016\n\006notify\030\006 "
    "\001(\005\"_\n\026CharacterMailDBRequest\022\016\n\006charID\030"
    "\001 \001(\004\022\026\n\016zone_mail_flag\030\002 \001(\r\022\016\n\006offset\030"
    "\003 \001(\005\022\r\n\005reqid\030\004 \001(\r\"~\n\027CharacterMailDBR"
    "esponse\022\016\n\006charID\030\001 \001(\004\022 \n\004info\030\002 \003(\0132\022."
    "proto_ff.MailInfo\022\022\n\nzoneMailId\030\003 \001(\r\022\016\n"
    "\006offset\030\004 \001(\005\022\r\n\005reqid\030\005 \001(\r\"\022\n\020MaxMailI"
    "DRequest\"*\n\021MaxMailIDResponse\022\025\n\rmaxZone"
    "MailId\030\001 \002(\r\"%\n\023DeleteCharacterMail\022\016\n\006c"
    "harID\030\001 \002(\004\"!\n\017ZoneMailSaveRsp\022\016\n\006mailId"
    "\030\001 \002(\r\"P\n\035ZoneMailTransCharacterMailReq\022"
    "\016\n\006mailId\030\001 \002(\r\022\013\n\003cid\030\002 \002(\004\022\022\n\ncreateti"
    "me\030\003 \002(\004\"g\n\035ZoneMailTransCharacterMailRs"
    "p\022\013\n\003cid\030\001 \002(\004\022 \n\004data\030\002 \003(\0132\022.proto_ff."
    "MailInfo\022\027\n\017max_zone_mailid\030\003 \002(\r\"p\n\020Web"
    "MailDBDataReq\022\017\n\007op_type\030\001 \001(\005\022\013\n\003cid\030\002 "
    "\001(\004\022\016\n\006pernum\030\003 \001(\r\022\017\n\007curpage\030\004 \001(\r\022\016\n\006"
    "id_lst\030\005 \003(\r\022\r\n\005webId\030\006 \002(\014\"\242\001\n\020WebMailD"
    "BDataRsp\022\017\n\007op_type\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\022\017"
    "\n\007curpage\030\003 \001(\r\022\022\n\ntotalcount\030\004 \001(\r\022\016\n\006i"
    "d_lst\030\005 \003(\r\022,\n\010info_lst\030\006 \003(\0132\032.proto_ff"
    ".WebMailDataProto\022\r\n\005webId\030\007 \002(\014\"F\n\014Frie"
    "ndDBInfo\022\016\n\006charID\030\001 \001(\004\022&\n\004data\030\002 \001(\0132\030"
    ".proto_ff.RelationDBInfo\"m\n\017FriendDBRequ"
    "est\022\016\n\006charid\030\001 \001(\004\022\021\n\tdstid_lst\030\002 \003(\004\022\024"
    "\n\014operate_type\030\003 \001(\r\022\014\n\004data\030\004 \001(\014\022\023\n\013qu"
    "ery_times\030\005 \001(\r\"\250\001\n\020FriendDBResponse\022\017\n\007"
    "retcode\030\001 \001(\005\022\016\n\006charid\030\002 \001(\004\022\024\n\014operate"
    "_type\030\003 \001(\r\022(\n\010info_lst\030\004 \003(\0132\026.proto_ff"
    ".FriendDBInfo\022\020\n\010last_lst\030\005 \003(\004\022\014\n\004data\030"
    "\006 \001(\014\022\023\n\013query_times\030\007 \001(\r\"$\n\022AllFriendD"
    "BRequest\022\016\n\006offset\030\001 \002(\005\"\\\n\023AllFriendDBR"
    "esponse\022\017\n\007retcode\030\001 \002(\005\022\016\n\006offset\030\002 \002(\005"
    "\022$\n\004info\030\003 \003(\0132\026.proto_ff.FriendDBInfo\";"
    "\n\023SaveFriendDBRequest\022$\n\004info\030\001 \003(\0132\026.pr"
    "oto_ff.FriendDBInfo\"&\n\024DelteFriendDBRequ"
    "est\022\016\n\006charId\030\001 \001(\004\"\020\n\016GlobalDBRequst\".\n"
    "\rGlobalDBEntry\022\017\n\007type_id\030\001 \001(\005\022\014\n\004data\030"
    "\002 \001(\014\"L\n\020GlobalDBResponse\022&\n\005entry\030\001 \003(\013"
    "2\027.proto_ff.GlobalDBEntry\022\020\n\010isfinish\030\002 "
    "\001(\005\"3\n\022GlobalDBSetRequest\022\017\n\007type_id\030\001 \002"
    "(\005\022\014\n\004data\030\002 \001(\014\"7\n\023GlobalDBSetResponse\022"
    "\017\n\007retcode\030\001 \002(\005\022\017\n\007type_id\030\002 \002(\005\"C\n\rGlo"
    "balComData\0222\n\016towerDupReward\030\001 \003(\0132\032.pro"
    "to_ff.DupTowerDBRecord\"`\n\025GlobalYaotaDup"
    "DBEntry\022\r\n\005dupid\030\001 \001(\005\022*\n\004info\030\002 \003(\0132\034.p"
    "roto_ff.RolePlayerMiniInfo\022\014\n\004time\030\003 \001(\004"
    "\"G\n\024GlobalYaotaDupDBData\022/\n\006entrys\030\003 \003(\013"
    "2\037.proto_ff.GlobalYaotaDupDBEntry\"<\n\nAct"
    "DBProto\022\r\n\005actid\030\001 \001(\004\022\013\n\003zid\030\002 \001(\r\022\022\n\nf"
    "inishtime\030\003 \001(\004\"\n\n\010ActDBReq\"-\n\010ActDBRsp\022"
    "!\n\003lst\030\001 \003(\0132\024.proto_ff.ActDBProto\"1\n\014Ac"
    "tSaveDBReq\022!\n\003lst\030\001 \003(\0132\024.proto_ff.ActDB"
    "Proto\"3\n\021AllArenaDBRequest\022\016\n\006offset\030\001 \002"
    "(\005\022\016\n\006retnum\030\002 \002(\005\"-\n\013ArenaDBInfo\022\016\n\006cha"
    "rID\030\001 \001(\004\022\016\n\006rankId\030\002 \001(\r\"i\n\017ArenaMoreDB"
    "Info\022#\n\004info\030\001 \003(\0132\025.proto_ff.ArenaDBInf"
    "o\022\013\n\003day\030\002 \001(\r\022\022\n\ngiveReward\030\003 \001(\r\022\020\n\010ma"
    "x_rank\030\004 \001(\r\"Z\n\022AllArenaDBResponse\022\017\n\007re"
    "tcode\030\001 \002(\005\022\016\n\006offset\030\002 \002(\005\022#\n\004info\030\003 \003("
    "\0132\025.proto_ff.ArenaDBInfo\"9\n\022SaveArenaDBR"
    "equest\022#\n\004info\030\001 \003(\0132\025.proto_ff.ArenaDBI"
    "nfo\"&\n\024DeleteArenaDBRequest\022\016\n\006charId\030\001 "
    "\001(\004\"U\n\017RoleMirrorDBReq\022\013\n\003cid\030\001 \002(\004\022\021\n\ti"
    "nt_param\030\002 \002(\003\022\021\n\tstr_param\030\003 \002(\014\022\017\n\007req"
    "type\030\004 \002(\r\"\212\001\n\017RoleMirrorDBRsp\022\013\n\003ret\030\001 "
    "\002(\005\022\013\n\003cid\030\002 \002(\004\022\021\n\tint_param\030\003 \002(\003\022\021\n\ts"
    "tr_param\030\004 \002(\014\022\017\n\007reqtype\030\005 \002(\r\022&\n\004data\030"
    "\006 \001(\0132\030.proto_ff.RoleMirrorData\"\022\n\020Facti"
    "onDataDBReq\"P\n\020FactionDataDBRsp\022,\n\010data_"
    "lst\030\001 \003(\0132\032.proto_ff.FactionAllDBData\022\016\n"
    "\006finish\030\002 \001(\005\"<\n\020FactionSaveDBReq\022(\n\004dat"
    "a\030\001 \001(\0132\032.proto_ff.FactionAllDBData\"%\n\017F"
    "actionDelDBReq\022\022\n\nfaction_id\030\001 \001(\r\"\021\n\017Fa"
    "ctionRedDBReq\"H\n\017FactionRedDBRsp\022%\n\010data"
    "_lst\030\001 \003(\0132\023.proto_ff.RedDBData\022\016\n\006finis"
    "h\030\002 \001(\005\"\225\001\n\023FactionRedSaveDBReq\022\022\n\nfacti"
    "on_id\030\001 \002(\r\022\"\n\005data0\030\002 \002(\0132\023.proto_ff.Re"
    "dDBData\022\"\n\005data1\030\003 \002(\0132\023.proto_ff.RedDBD"
    "ata\022\"\n\005data2\030\004 \002(\0132\023.proto_ff.RedDBData\""
    "(\n\022FactionRedDelDBReq\022\022\n\nfaction_id\030\001 \002("
    "\r\"\016\n\014RoleRedDBReq\"I\n\014RoleRedDBRsp\022)\n\010dat"
    "a_lst\030\001 \003(\0132\027.proto_ff.RoleRedDBData\022\016\n\006"
    "finish\030\002 \001(\005\";\n\014ComLoadDBReq\022\n\n\002id\030\001 \002(\004"
    "\022\022\n\ntable_name\030\002 \002(\014\022\013\n\003cmd\030\003 \002(\r\"(\n\014Com"
    "LoadDBRsp\022\n\n\002id\030\001 \002(\004\022\014\n\004data\030\002 \002(\014\"2\n\017C"
    "omLoadAllDBReq\022\022\n\ntable_name\030\001 \002(\014\022\013\n\003cm"
    "d\030\002 \002(\r\"&\n\nComDBProto\022\n\n\002id\030\001 \002(\004\022\014\n\004dat"
    "a\030\002 \002(\014\"H\n\017ComLoadAllDBRsp\022\"\n\004data\030\001 \003(\013"
    "2\024.proto_ff.ComDBProto\022\021\n\tis_finish\030\002 \002("
    "\005\"<\n\014ComSaveDBReq\022\n\n\002id\030\001 \002(\004\022\014\n\004data\030\002 "
    "\002(\014\022\022\n\ntable_name\030\003 \002(\014\"1\n\013ComDelDBReq\022\022"
    "\n\ntable_name\030\001 \002(\014\022\016\n\006id_lst\030\002 \003(\004\">\n\nMa"
    "rryApply\022\024\n\014apply_dst_id\030\001 \001(\004\022\014\n\004time\030\002"
    " \001(\004\022\014\n\004gear\030\003 \001(\005\"\232\001\n\017MarrySimpleInfo\022\014"
    "\n\004m_id\030\001 \001(\004\022\016\n\006dst_id\030\002 \001(\004\022\020\n\010marry_id"
    "\030\003 \001(\r\022#\n\005brief\030\004 \001(\0132\024.proto_ff.MarryBr"
    "ief\022#\n\005apply\030\005 \001(\0132\024.proto_ff.MarryApply"
    "\022\r\n\005state\030\006 \001(\005\" \n\016MarryDBLoadReq\022\016\n\006off"
    "set\030\001 \001(\005\"X\n\016MarryDBLoadRsp\022\013\n\003ret\030\001 \001(\005"
    "\022\016\n\006offset\030\002 \001(\005\022)\n\006simple\030\003 \003(\0132\031.proto"
    "_ff.MarrySimpleInfo\"9\n\016MarryDBSaveReq\022\'\n"
    "\004info\030\001 \001(\0132\031.proto_ff.MarrySimpleInfo\"P"
    "\n\021AnswerRankDBProto\022\021\n\tfactionid\030\001 \001(\r\022\014"
    "\n\004name\030\002 \001(\014\022\r\n\005count\030\003 \001(\r\022\013\n\003zid\030\004 \001(\r"
    "\"9\n\014AnswerDBData\022)\n\004rank\030\001 \003(\0132\033.proto_f"
    "f.AnswerRankDBProto\"]\n\020GuardRankDBProto\022"
    "\021\n\tfactionid\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\r\n\005coun"
    "t\030\003 \001(\r\022\014\n\004time\030\004 \001(\004\022\013\n\003zid\030\005 \001(\r\"i\n\013Gu"
    "ardDBData\022,\n\010old_rank\030\001 \003(\0132\032.proto_ff.G"
    "uardRankDBProto\022,\n\010cur_rank\030\002 \003(\0132\032.prot"
    "o_ff.GuardRankDBProto\"\223\001\n\016Rank1v1DBProto"
    "\022\014\n\004rank\030\001 \001(\005\022\013\n\003cid\030\002 \001(\004\022\014\n\004name\030\003 \001("
    "\014\022\014\n\004prof\030\004 \001(\005\022\r\n\005fight\030\005 \001(\004\022\013\n\003zid\030\006 "
    "\001(\r\022\r\n\005score\030\007 \001(\005\022\014\n\004time\030\010 \001(\004\022\021\n\tmatc"
    "h_num\030\t \001(\005\"W\n\014Act1v1DBData\022&\n\004rank\030\001 \003("
    "\0132\030.proto_ff.Rank1v1DBProto\022\022\n\nreset_tim"
    "e\030\002 \001(\004\022\013\n\003num\030\003 \001(\005\"R\n\022RaceFactionDBPro"
    "to\022\022\n\nfaction_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\r\n\005"
    "fight\030\003 \001(\004\022\013\n\003zid\030\004 \001(\r\"P\n\020RaceMatchDBP"
    "roto\022\023\n\013faction_id1\030\001 \001(\r\022\023\n\013faction_id2"
    "\030\002 \001(\r\022\022\n\nfaction_id\030\003 \001(\r\"K\n\013RaceDBProt"
    "o\022\014\n\004race\030\001 \001(\005\022.\n\010info_lst\030\002 \003(\0132\034.prot"
    "o_ff.RaceFactionDBProto\"M\n\016WarRankDBProt"
    "o\022\022\n\nfaction_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\014\022\013\n\003z"
    "id\030\003 \001(\r\022\014\n\004rank\030\004 \001(\005\"\243\001\n\020FactionWarDBD"
    "ata\022#\n\004race\030\001 \003(\0132\025.proto_ff.RaceDBProto"
    "\022&\n\004rank\030\002 \003(\0132\030.proto_ff.WarRankDBProto"
    "\022\016\n\006win_id\030\003 \001(\r\022\020\n\010win_name\030\004 \001(\014\022\017\n\007wi"
    "n_num\030\005 \001(\005\022\017\n\007win_zid\030\006 \001(\r\"9\n\020DigEggLo"
    "gDBProto\022\014\n\004name\030\001 \001(\014\022\n\n\002id\030\002 \001(\005\022\013\n\003ci"
    "d\030\003 \001(\004\"U\n\024FestDigEggLogDBProto\022\023\n\013templ"
    "ate_id\030\001 \001(\005\022(\n\004info\030\002 \003(\0132\032.proto_ff.Di"
    "gEggLogDBProto\"B\n\023FestDigEggLogDBData\022+\n"
    "\003log\030\001 \003(\0132\036.proto_ff.FestDigEggLogDBPro"
    "to\"H\n\026FestRTurnableLogDBData\022.\n\003log\030\001 \003("
    "\0132!.proto_ff.FestRTurnableLogDBProto\"\?\n\020"
    "FestDonateDBData\022+\n\004data\030\001 \003(\0132\035.proto_f"
    "f.DonateServerDBProto\"F\n\025FestDrawPizeLog"
    "DBData\022-\n\003log\030\001 \003(\0132 .proto_ff.FestDrawP"
    "izeLogDBProto\"\226\003\n\007GoodsDB\022\020\n\010order_id\030\001 "
    "\001(\004\022\023\n\013market_type\030\002 \001(\005\022\024\n\014market_owner"
    "\030\003 \001(\004\022\017\n\007role_id\030\004 \001(\004\022\022\n\nstart_time\030\005 "
    "\001(\004\022\020\n\010end_time\030\006 \001(\004\022\016\n\006vie_id\030\007 \001(\004\022\r\n"
    "\005state\030\010 \001(\005\022\020\n\010isdelete\030\t \001(\005\022\021\n\tcmpt_t"
    "ime\030\n \001(\004\022\021\n\tcur_price\030\013 \001(\005\022\022\n\ncmpt_pri"
    "ce\030\014 \001(\005\022\020\n\010buyer_id\030\r \001(\004\022\020\n\010vie_time\030\016"
    " \001(\004\022*\n\titem_data\030\017 \001(\0132\027.proto_ff.ItemP"
    "rotoInfo\022\022\n\nitem_price\030\020 \001(\005\022\021\n\ttake_lis"
    "t\030\021 \001(\014\022\020\n\010vie_list\030\022 \001(\014\022\022\n\nready_time\030"
    "\023 \001(\004\022\017\n\007is_take\030\024 \001(\005\"\"\n\014LoadGoodsReq\022\022"
    "\n\nstart_time\030\001 \001(\003\"F\n\017MarketDBLoadRsp\022 \n"
    "\005infos\030\001 \003(\0132\021.proto_ff.GoodsDB\022\021\n\tis_fi"
    "nish\030\002 \001(\005\"0\n\rMarketSaveReq\022\037\n\004info\030\001 \001("
    "\0132\021.proto_ff.GoodsDB\" \n\014MarketDelReq\022\020\n\010"
    "order_id\030\001 \001(\004\"W\n\021CandleHarmDBProto\022\013\n\003c"
    "id\030\001 \001(\004\022\014\n\004name\030\002 \001(\014\022\014\n\004harm\030\003 \001(\004\022\013\n\003"
    "zid\030\004 \001(\r\022\014\n\004rank\030\005 \001(\005\"U\n\014CandleDBData\022"
    "\r\n\005index\030\001 \001(\005\022(\n\003ham\030\002 \003(\0132\033.proto_ff.C"
    "andleHarmDBProto\022\014\n\004time\030\003 \001(\004", 28030);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DBProxy.proto", &protobuf_RegisterTypes);
  RoleReliveProto::default_instance_ = new RoleReliveProto();
  RoleDBBaseData::default_instance_ = new RoleDBBaseData();
  BagItemsDBData::default_instance_ = new BagItemsDBData();
  BagDBSimpleData::default_instance_ = new BagDBSimpleData();
  RoleDBUnitBagData::default_instance_ = new RoleDBUnitBagData();
  RoleDBBagData::default_instance_ = new RoleDBBagData();
  RoleDBEquipData::default_instance_ = new RoleDBEquipData();
  RoleDBTaskData::default_instance_ = new RoleDBTaskData();
  GrowPartEntryDBInfo::default_instance_ = new GrowPartEntryDBInfo();
  GrowPartDBData::default_instance_ = new GrowPartDBData();
  GrowDBData::default_instance_ = new GrowDBData();
  DayUseItemData::default_instance_ = new DayUseItemData();
  CharacterArenaData::default_instance_ = new CharacterArenaData();
  MiniDBData::default_instance_ = new MiniDBData();
  FacadeDataInfo::default_instance_ = new FacadeDataInfo();
  MountDataInfo::default_instance_ = new MountDataInfo();
  DeityDataInfo::default_instance_ = new DeityDataInfo();
  FacadeDBData::default_instance_ = new FacadeDBData();
  SkillDBInfo::default_instance_ = new SkillDBInfo();
  SkillDBPos::default_instance_ = new SkillDBPos();
  SkillDBAdvPos::default_instance_ = new SkillDBAdvPos();
  SkillDBAdvInfo::default_instance_ = new SkillDBAdvInfo();
  SkillDBGroup::default_instance_ = new SkillDBGroup();
  PetSkillCdDB::default_instance_ = new PetSkillCdDB();
  SkillDBTalentProto::default_instance_ = new SkillDBTalentProto();
  SkillDBTalent::default_instance_ = new SkillDBTalent();
  SkillDBData::default_instance_ = new SkillDBData();
  GodRelicsActivityData::default_instance_ = new GodRelicsActivityData();
  MiniActivityDBData::default_instance_ = new MiniActivityDBData();
  DupRecord::default_instance_ = new DupRecord();
  DupGroupData::default_instance_ = new DupGroupData();
  DupTowerDBRecordEntry::default_instance_ = new DupTowerDBRecordEntry();
  DupTowerDBRecord::default_instance_ = new DupTowerDBRecord();
  DupTowerDBData::default_instance_ = new DupTowerDBData();
  GhostDBData::default_instance_ = new GhostDBData();
  MoyuDBData::default_instance_ = new MoyuDBData();
  YaoTaDBData::default_instance_ = new YaoTaDBData();
  DupDBData::default_instance_ = new DupDBData();
  GhostDupRankDB::default_instance_ = new GhostDupRankDB();
  BuffDBInfo::default_instance_ = new BuffDBInfo();
  BuffDBCdInfo::default_instance_ = new BuffDBCdInfo();
  BuffDBShieldInfo::default_instance_ = new BuffDBShieldInfo();
  BuffDBData::default_instance_ = new BuffDBData();
  BossSimpleInfoDB::default_instance_ = new BossSimpleInfoDB();
  BossDBData::default_instance_ = new BossDBData();
  VipDBData::default_instance_ = new VipDBData();
  AttrDBData::default_instance_ = new AttrDBData();
  PetDBRecord::default_instance_ = new PetDBRecord();
  PetGrowDB::default_instance_ = new PetGrowDB();
  PetDBData::default_instance_ = new PetDBData();
  MallDBInfo::default_instance_ = new MallDBInfo();
  MallDBData::default_instance_ = new MallDBData();
  ConvoyData::default_instance_ = new ConvoyData();
  ArmorDBData::default_instance_ = new ArmorDBData();
  AssistDBData::default_instance_ = new AssistDBData();
  TitleDBData::default_instance_ = new TitleDBData();
  GodEvilCondDBProto::default_instance_ = new GodEvilCondDBProto();
  GodEvilMultCondDBProto::default_instance_ = new GodEvilMultCondDBProto();
  GodEvilTaskDBProto::default_instance_ = new GodEvilTaskDBProto();
  GodEvilDBData::default_instance_ = new GodEvilDBData();
  PayDBData::default_instance_ = new PayDBData();
  FactionDBSalary::default_instance_ = new FactionDBSalary();
  FactionDBDinner::default_instance_ = new FactionDBDinner();
  FactionDBSkillProto::default_instance_ = new FactionDBSkillProto();
  FactionDBSkill::default_instance_ = new FactionDBSkill();
  FactionDBGuard::default_instance_ = new FactionDBGuard();
  RoleFactionDBData::default_instance_ = new RoleFactionDBData();
  RoleBestEQDBData::default_instance_ = new RoleBestEQDBData();
  AncientDBData::default_instance_ = new AncientDBData();
  RoleEmblemDBInfo::default_instance_ = new RoleEmblemDBInfo();
  Role1v1DBInfo::default_instance_ = new Role1v1DBInfo();
  RolePvpDBData::default_instance_ = new RolePvpDBData();
  RoleMarryExpress::default_instance_ = new RoleMarryExpress();
  RoleMarryDBData::default_instance_ = new RoleMarryDBData();
  EncylopediaDBData::default_instance_ = new EncylopediaDBData();
  GVBPData::default_instance_ = new GVBPData();
  ChargeDBData::default_instance_ = new ChargeDBData();
  GiftCondDBProto::default_instance_ = new GiftCondDBProto();
  GiftZeroDBProto::default_instance_ = new GiftZeroDBProto();
  GiftZeroLogDBProto::default_instance_ = new GiftZeroLogDBProto();
  GiftDBData::default_instance_ = new GiftDBData();
  FestSimpleDBProto::default_instance_ = new FestSimpleDBProto();
  FestShopDBProto::default_instance_ = new FestShopDBProto();
  FestSignDBProto::default_instance_ = new FestSignDBProto();
  FestGoldStoreDBProto::default_instance_ = new FestGoldStoreDBProto();
  FestDigEggTaskDBProto::default_instance_ = new FestDigEggTaskDBProto();
  FestDigEggDBProto::default_instance_ = new FestDigEggDBProto();
  FestCandleDBProto::default_instance_ = new FestCandleDBProto();
  FestBtDragonDBProto::default_instance_ = new FestBtDragonDBProto();
  FestRTurnableRechargeDBProto::default_instance_ = new FestRTurnableRechargeDBProto();
  FestDailyTotalRechargeDBProto::default_instance_ = new FestDailyTotalRechargeDBProto();
  FestTurnableDBProto::default_instance_ = new FestTurnableDBProto();
  FestDonateDBProto::default_instance_ = new FestDonateDBProto();
  FestOnlineDBProto::default_instance_ = new FestOnlineDBProto();
  FestCollectWordDBProto::default_instance_ = new FestCollectWordDBProto();
  FestBossFirstDB::default_instance_ = new FestBossFirstDB();
  FMarryRoleDB::default_instance_ = new FMarryRoleDB();
  DayTotalRechargeDBProto::default_instance_ = new DayTotalRechargeDBProto();
  TotalRechargeDBProto::default_instance_ = new TotalRechargeDBProto();
  LoginRewardDBProto::default_instance_ = new LoginRewardDBProto();
  FestDetailDBProto::default_instance_ = new FestDetailDBProto();
  FestDBData::default_instance_ = new FestDBData();
  ShadowDBProto::default_instance_ = new ShadowDBProto();
  HaloDBProto::default_instance_ = new HaloDBProto();
  DragonDBData::default_instance_ = new DragonDBData();
  RoleDBTurnData::default_instance_ = new RoleDBTurnData();
  GMADbData::default_instance_ = new GMADbData();
  SoulDBData::default_instance_ = new SoulDBData();
  RoleDBData::default_instance_ = new RoleDBData();
  RedWaitDBProto::default_instance_ = new RedWaitDBProto();
  RedTriggerDBProto::default_instance_ = new RedTriggerDBProto();
  RoleRedDBData::default_instance_ = new RoleRedDBData();
  RedFetchDBProto::default_instance_ = new RedFetchDBProto();
  RedFetchListDBProto::default_instance_ = new RedFetchListDBProto();
  RedSendDBProto::default_instance_ = new RedSendDBProto();
  RedDBData::default_instance_ = new RedDBData();
  RoleMirrorData::default_instance_ = new RoleMirrorData();
  FactionMemDBProto::default_instance_ = new FactionMemDBProto();
  FactionMultMemDBProto::default_instance_ = new FactionMultMemDBProto();
  FactionApplyDBProto::default_instance_ = new FactionApplyDBProto();
  FactionMultApplyDBProto::default_instance_ = new FactionMultApplyDBProto();
  FactionRecordDBProto::default_instance_ = new FactionRecordDBProto();
  FactionMutRecordDBProto::default_instance_ = new FactionMutRecordDBProto();
  FactionDBBase::default_instance_ = new FactionDBBase();
  FactionBeastHarmDBProto::default_instance_ = new FactionBeastHarmDBProto();
  FactionBeastDBData::default_instance_ = new FactionBeastDBData();
  FactionGuardHarmDBProto::default_instance_ = new FactionGuardHarmDBProto();
  FactionGuardDBData::default_instance_ = new FactionGuardDBData();
  FactionMoyu::default_instance_ = new FactionMoyu();
  FactionDBData::default_instance_ = new FactionDBData();
  FactionAllDBData::default_instance_ = new FactionAllDBData();
  FactionDBMoyuRankEntry::default_instance_ = new FactionDBMoyuRankEntry();
  FactionDBMoyuRank::default_instance_ = new FactionDBMoyuRank();
  FactionDBMoyuRankDB::default_instance_ = new FactionDBMoyuRankDB();
  RoleListDBReq::default_instance_ = new RoleListDBReq();
  RoleListDBRsp::default_instance_ = new RoleListDBRsp();
  CreateRoleDBReq::default_instance_ = new CreateRoleDBReq();
  CreateRoleDBRsp::default_instance_ = new CreateRoleDBRsp();
  RoleInfoDBReq::default_instance_ = new RoleInfoDBReq();
  RoleInfoDBRsp::default_instance_ = new RoleInfoDBRsp();
  RoleInfoUpdateDBReq::default_instance_ = new RoleInfoUpdateDBReq();
  RoleChgNameDBReq::default_instance_ = new RoleChgNameDBReq();
  RoleChgNameDBRsp::default_instance_ = new RoleChgNameDBRsp();
  RoleSimpleListDBReq::default_instance_ = new RoleSimpleListDBReq();
  RoleSimpleListDBRsp::default_instance_ = new RoleSimpleListDBRsp();
  CreatureTransLogicDBReq::default_instance_ = new CreatureTransLogicDBReq();
  CreatureTransLogicDBRsp::default_instance_ = new CreatureTransLogicDBRsp();
  NewMailDBInfo::default_instance_ = new NewMailDBInfo();
  MailDBOperateInfo::default_instance_ = new MailDBOperateInfo();
  SaveMailDBReq::default_instance_ = new SaveMailDBReq();
  SaveMailDBRsp::default_instance_ = new SaveMailDBRsp();
  CharacterMailDBRequest::default_instance_ = new CharacterMailDBRequest();
  CharacterMailDBResponse::default_instance_ = new CharacterMailDBResponse();
  MaxMailIDRequest::default_instance_ = new MaxMailIDRequest();
  MaxMailIDResponse::default_instance_ = new MaxMailIDResponse();
  DeleteCharacterMail::default_instance_ = new DeleteCharacterMail();
  ZoneMailSaveRsp::default_instance_ = new ZoneMailSaveRsp();
  ZoneMailTransCharacterMailReq::default_instance_ = new ZoneMailTransCharacterMailReq();
  ZoneMailTransCharacterMailRsp::default_instance_ = new ZoneMailTransCharacterMailRsp();
  WebMailDBDataReq::default_instance_ = new WebMailDBDataReq();
  WebMailDBDataRsp::default_instance_ = new WebMailDBDataRsp();
  FriendDBInfo::default_instance_ = new FriendDBInfo();
  FriendDBRequest::default_instance_ = new FriendDBRequest();
  FriendDBResponse::default_instance_ = new FriendDBResponse();
  AllFriendDBRequest::default_instance_ = new AllFriendDBRequest();
  AllFriendDBResponse::default_instance_ = new AllFriendDBResponse();
  SaveFriendDBRequest::default_instance_ = new SaveFriendDBRequest();
  DelteFriendDBRequest::default_instance_ = new DelteFriendDBRequest();
  GlobalDBRequst::default_instance_ = new GlobalDBRequst();
  GlobalDBEntry::default_instance_ = new GlobalDBEntry();
  GlobalDBResponse::default_instance_ = new GlobalDBResponse();
  GlobalDBSetRequest::default_instance_ = new GlobalDBSetRequest();
  GlobalDBSetResponse::default_instance_ = new GlobalDBSetResponse();
  GlobalComData::default_instance_ = new GlobalComData();
  GlobalYaotaDupDBEntry::default_instance_ = new GlobalYaotaDupDBEntry();
  GlobalYaotaDupDBData::default_instance_ = new GlobalYaotaDupDBData();
  ActDBProto::default_instance_ = new ActDBProto();
  ActDBReq::default_instance_ = new ActDBReq();
  ActDBRsp::default_instance_ = new ActDBRsp();
  ActSaveDBReq::default_instance_ = new ActSaveDBReq();
  AllArenaDBRequest::default_instance_ = new AllArenaDBRequest();
  ArenaDBInfo::default_instance_ = new ArenaDBInfo();
  ArenaMoreDBInfo::default_instance_ = new ArenaMoreDBInfo();
  AllArenaDBResponse::default_instance_ = new AllArenaDBResponse();
  SaveArenaDBRequest::default_instance_ = new SaveArenaDBRequest();
  DeleteArenaDBRequest::default_instance_ = new DeleteArenaDBRequest();
  RoleMirrorDBReq::default_instance_ = new RoleMirrorDBReq();
  RoleMirrorDBRsp::default_instance_ = new RoleMirrorDBRsp();
  FactionDataDBReq::default_instance_ = new FactionDataDBReq();
  FactionDataDBRsp::default_instance_ = new FactionDataDBRsp();
  FactionSaveDBReq::default_instance_ = new FactionSaveDBReq();
  FactionDelDBReq::default_instance_ = new FactionDelDBReq();
  FactionRedDBReq::default_instance_ = new FactionRedDBReq();
  FactionRedDBRsp::default_instance_ = new FactionRedDBRsp();
  FactionRedSaveDBReq::default_instance_ = new FactionRedSaveDBReq();
  FactionRedDelDBReq::default_instance_ = new FactionRedDelDBReq();
  RoleRedDBReq::default_instance_ = new RoleRedDBReq();
  RoleRedDBRsp::default_instance_ = new RoleRedDBRsp();
  ComLoadDBReq::default_instance_ = new ComLoadDBReq();
  ComLoadDBRsp::default_instance_ = new ComLoadDBRsp();
  ComLoadAllDBReq::default_instance_ = new ComLoadAllDBReq();
  ComDBProto::default_instance_ = new ComDBProto();
  ComLoadAllDBRsp::default_instance_ = new ComLoadAllDBRsp();
  ComSaveDBReq::default_instance_ = new ComSaveDBReq();
  ComDelDBReq::default_instance_ = new ComDelDBReq();
  MarryApply::default_instance_ = new MarryApply();
  MarrySimpleInfo::default_instance_ = new MarrySimpleInfo();
  MarryDBLoadReq::default_instance_ = new MarryDBLoadReq();
  MarryDBLoadRsp::default_instance_ = new MarryDBLoadRsp();
  MarryDBSaveReq::default_instance_ = new MarryDBSaveReq();
  AnswerRankDBProto::default_instance_ = new AnswerRankDBProto();
  AnswerDBData::default_instance_ = new AnswerDBData();
  GuardRankDBProto::default_instance_ = new GuardRankDBProto();
  GuardDBData::default_instance_ = new GuardDBData();
  Rank1v1DBProto::default_instance_ = new Rank1v1DBProto();
  Act1v1DBData::default_instance_ = new Act1v1DBData();
  RaceFactionDBProto::default_instance_ = new RaceFactionDBProto();
  RaceMatchDBProto::default_instance_ = new RaceMatchDBProto();
  RaceDBProto::default_instance_ = new RaceDBProto();
  WarRankDBProto::default_instance_ = new WarRankDBProto();
  FactionWarDBData::default_instance_ = new FactionWarDBData();
  DigEggLogDBProto::default_instance_ = new DigEggLogDBProto();
  FestDigEggLogDBProto::default_instance_ = new FestDigEggLogDBProto();
  FestDigEggLogDBData::default_instance_ = new FestDigEggLogDBData();
  FestRTurnableLogDBData::default_instance_ = new FestRTurnableLogDBData();
  FestDonateDBData::default_instance_ = new FestDonateDBData();
  FestDrawPizeLogDBData::default_instance_ = new FestDrawPizeLogDBData();
  GoodsDB::default_instance_ = new GoodsDB();
  LoadGoodsReq::default_instance_ = new LoadGoodsReq();
  MarketDBLoadRsp::default_instance_ = new MarketDBLoadRsp();
  MarketSaveReq::default_instance_ = new MarketSaveReq();
  MarketDelReq::default_instance_ = new MarketDelReq();
  CandleHarmDBProto::default_instance_ = new CandleHarmDBProto();
  CandleDBData::default_instance_ = new CandleDBData();
  RoleReliveProto::default_instance_->InitAsDefaultInstance();
  RoleDBBaseData::default_instance_->InitAsDefaultInstance();
  BagItemsDBData::default_instance_->InitAsDefaultInstance();
  BagDBSimpleData::default_instance_->InitAsDefaultInstance();
  RoleDBUnitBagData::default_instance_->InitAsDefaultInstance();
  RoleDBBagData::default_instance_->InitAsDefaultInstance();
  RoleDBEquipData::default_instance_->InitAsDefaultInstance();
  RoleDBTaskData::default_instance_->InitAsDefaultInstance();
  GrowPartEntryDBInfo::default_instance_->InitAsDefaultInstance();
  GrowPartDBData::default_instance_->InitAsDefaultInstance();
  GrowDBData::default_instance_->InitAsDefaultInstance();
  DayUseItemData::default_instance_->InitAsDefaultInstance();
  CharacterArenaData::default_instance_->InitAsDefaultInstance();
  MiniDBData::default_instance_->InitAsDefaultInstance();
  FacadeDataInfo::default_instance_->InitAsDefaultInstance();
  MountDataInfo::default_instance_->InitAsDefaultInstance();
  DeityDataInfo::default_instance_->InitAsDefaultInstance();
  FacadeDBData::default_instance_->InitAsDefaultInstance();
  SkillDBInfo::default_instance_->InitAsDefaultInstance();
  SkillDBPos::default_instance_->InitAsDefaultInstance();
  SkillDBAdvPos::default_instance_->InitAsDefaultInstance();
  SkillDBAdvInfo::default_instance_->InitAsDefaultInstance();
  SkillDBGroup::default_instance_->InitAsDefaultInstance();
  PetSkillCdDB::default_instance_->InitAsDefaultInstance();
  SkillDBTalentProto::default_instance_->InitAsDefaultInstance();
  SkillDBTalent::default_instance_->InitAsDefaultInstance();
  SkillDBData::default_instance_->InitAsDefaultInstance();
  GodRelicsActivityData::default_instance_->InitAsDefaultInstance();
  MiniActivityDBData::default_instance_->InitAsDefaultInstance();
  DupRecord::default_instance_->InitAsDefaultInstance();
  DupGroupData::default_instance_->InitAsDefaultInstance();
  DupTowerDBRecordEntry::default_instance_->InitAsDefaultInstance();
  DupTowerDBRecord::default_instance_->InitAsDefaultInstance();
  DupTowerDBData::default_instance_->InitAsDefaultInstance();
  GhostDBData::default_instance_->InitAsDefaultInstance();
  MoyuDBData::default_instance_->InitAsDefaultInstance();
  YaoTaDBData::default_instance_->InitAsDefaultInstance();
  DupDBData::default_instance_->InitAsDefaultInstance();
  GhostDupRankDB::default_instance_->InitAsDefaultInstance();
  BuffDBInfo::default_instance_->InitAsDefaultInstance();
  BuffDBCdInfo::default_instance_->InitAsDefaultInstance();
  BuffDBShieldInfo::default_instance_->InitAsDefaultInstance();
  BuffDBData::default_instance_->InitAsDefaultInstance();
  BossSimpleInfoDB::default_instance_->InitAsDefaultInstance();
  BossDBData::default_instance_->InitAsDefaultInstance();
  VipDBData::default_instance_->InitAsDefaultInstance();
  AttrDBData::default_instance_->InitAsDefaultInstance();
  PetDBRecord::default_instance_->InitAsDefaultInstance();
  PetGrowDB::default_instance_->InitAsDefaultInstance();
  PetDBData::default_instance_->InitAsDefaultInstance();
  MallDBInfo::default_instance_->InitAsDefaultInstance();
  MallDBData::default_instance_->InitAsDefaultInstance();
  ConvoyData::default_instance_->InitAsDefaultInstance();
  ArmorDBData::default_instance_->InitAsDefaultInstance();
  AssistDBData::default_instance_->InitAsDefaultInstance();
  TitleDBData::default_instance_->InitAsDefaultInstance();
  GodEvilCondDBProto::default_instance_->InitAsDefaultInstance();
  GodEvilMultCondDBProto::default_instance_->InitAsDefaultInstance();
  GodEvilTaskDBProto::default_instance_->InitAsDefaultInstance();
  GodEvilDBData::default_instance_->InitAsDefaultInstance();
  PayDBData::default_instance_->InitAsDefaultInstance();
  FactionDBSalary::default_instance_->InitAsDefaultInstance();
  FactionDBDinner::default_instance_->InitAsDefaultInstance();
  FactionDBSkillProto::default_instance_->InitAsDefaultInstance();
  FactionDBSkill::default_instance_->InitAsDefaultInstance();
  FactionDBGuard::default_instance_->InitAsDefaultInstance();
  RoleFactionDBData::default_instance_->InitAsDefaultInstance();
  RoleBestEQDBData::default_instance_->InitAsDefaultInstance();
  AncientDBData::default_instance_->InitAsDefaultInstance();
  RoleEmblemDBInfo::default_instance_->InitAsDefaultInstance();
  Role1v1DBInfo::default_instance_->InitAsDefaultInstance();
  RolePvpDBData::default_instance_->InitAsDefaultInstance();
  RoleMarryExpress::default_instance_->InitAsDefaultInstance();
  RoleMarryDBData::default_instance_->InitAsDefaultInstance();
  EncylopediaDBData::default_instance_->InitAsDefaultInstance();
  GVBPData::default_instance_->InitAsDefaultInstance();
  ChargeDBData::default_instance_->InitAsDefaultInstance();
  GiftCondDBProto::default_instance_->InitAsDefaultInstance();
  GiftZeroDBProto::default_instance_->InitAsDefaultInstance();
  GiftZeroLogDBProto::default_instance_->InitAsDefaultInstance();
  GiftDBData::default_instance_->InitAsDefaultInstance();
  FestSimpleDBProto::default_instance_->InitAsDefaultInstance();
  FestShopDBProto::default_instance_->InitAsDefaultInstance();
  FestSignDBProto::default_instance_->InitAsDefaultInstance();
  FestGoldStoreDBProto::default_instance_->InitAsDefaultInstance();
  FestDigEggTaskDBProto::default_instance_->InitAsDefaultInstance();
  FestDigEggDBProto::default_instance_->InitAsDefaultInstance();
  FestCandleDBProto::default_instance_->InitAsDefaultInstance();
  FestBtDragonDBProto::default_instance_->InitAsDefaultInstance();
  FestRTurnableRechargeDBProto::default_instance_->InitAsDefaultInstance();
  FestDailyTotalRechargeDBProto::default_instance_->InitAsDefaultInstance();
  FestTurnableDBProto::default_instance_->InitAsDefaultInstance();
  FestDonateDBProto::default_instance_->InitAsDefaultInstance();
  FestOnlineDBProto::default_instance_->InitAsDefaultInstance();
  FestCollectWordDBProto::default_instance_->InitAsDefaultInstance();
  FestBossFirstDB::default_instance_->InitAsDefaultInstance();
  FMarryRoleDB::default_instance_->InitAsDefaultInstance();
  DayTotalRechargeDBProto::default_instance_->InitAsDefaultInstance();
  TotalRechargeDBProto::default_instance_->InitAsDefaultInstance();
  LoginRewardDBProto::default_instance_->InitAsDefaultInstance();
  FestDetailDBProto::default_instance_->InitAsDefaultInstance();
  FestDBData::default_instance_->InitAsDefaultInstance();
  ShadowDBProto::default_instance_->InitAsDefaultInstance();
  HaloDBProto::default_instance_->InitAsDefaultInstance();
  DragonDBData::default_instance_->InitAsDefaultInstance();
  RoleDBTurnData::default_instance_->InitAsDefaultInstance();
  GMADbData::default_instance_->InitAsDefaultInstance();
  SoulDBData::default_instance_->InitAsDefaultInstance();
  RoleDBData::default_instance_->InitAsDefaultInstance();
  RedWaitDBProto::default_instance_->InitAsDefaultInstance();
  RedTriggerDBProto::default_instance_->InitAsDefaultInstance();
  RoleRedDBData::default_instance_->InitAsDefaultInstance();
  RedFetchDBProto::default_instance_->InitAsDefaultInstance();
  RedFetchListDBProto::default_instance_->InitAsDefaultInstance();
  RedSendDBProto::default_instance_->InitAsDefaultInstance();
  RedDBData::default_instance_->InitAsDefaultInstance();
  RoleMirrorData::default_instance_->InitAsDefaultInstance();
  FactionMemDBProto::default_instance_->InitAsDefaultInstance();
  FactionMultMemDBProto::default_instance_->InitAsDefaultInstance();
  FactionApplyDBProto::default_instance_->InitAsDefaultInstance();
  FactionMultApplyDBProto::default_instance_->InitAsDefaultInstance();
  FactionRecordDBProto::default_instance_->InitAsDefaultInstance();
  FactionMutRecordDBProto::default_instance_->InitAsDefaultInstance();
  FactionDBBase::default_instance_->InitAsDefaultInstance();
  FactionBeastHarmDBProto::default_instance_->InitAsDefaultInstance();
  FactionBeastDBData::default_instance_->InitAsDefaultInstance();
  FactionGuardHarmDBProto::default_instance_->InitAsDefaultInstance();
  FactionGuardDBData::default_instance_->InitAsDefaultInstance();
  FactionMoyu::default_instance_->InitAsDefaultInstance();
  FactionDBData::default_instance_->InitAsDefaultInstance();
  FactionAllDBData::default_instance_->InitAsDefaultInstance();
  FactionDBMoyuRankEntry::default_instance_->InitAsDefaultInstance();
  FactionDBMoyuRank::default_instance_->InitAsDefaultInstance();
  FactionDBMoyuRankDB::default_instance_->InitAsDefaultInstance();
  RoleListDBReq::default_instance_->InitAsDefaultInstance();
  RoleListDBRsp::default_instance_->InitAsDefaultInstance();
  CreateRoleDBReq::default_instance_->InitAsDefaultInstance();
  CreateRoleDBRsp::default_instance_->InitAsDefaultInstance();
  RoleInfoDBReq::default_instance_->InitAsDefaultInstance();
  RoleInfoDBRsp::default_instance_->InitAsDefaultInstance();
  RoleInfoUpdateDBReq::default_instance_->InitAsDefaultInstance();
  RoleChgNameDBReq::default_instance_->InitAsDefaultInstance();
  RoleChgNameDBRsp::default_instance_->InitAsDefaultInstance();
  RoleSimpleListDBReq::default_instance_->InitAsDefaultInstance();
  RoleSimpleListDBRsp::default_instance_->InitAsDefaultInstance();
  CreatureTransLogicDBReq::default_instance_->InitAsDefaultInstance();
  CreatureTransLogicDBRsp::default_instance_->InitAsDefaultInstance();
  NewMailDBInfo::default_instance_->InitAsDefaultInstance();
  MailDBOperateInfo::default_instance_->InitAsDefaultInstance();
  SaveMailDBReq::default_instance_->InitAsDefaultInstance();
  SaveMailDBRsp::default_instance_->InitAsDefaultInstance();
  CharacterMailDBRequest::default_instance_->InitAsDefaultInstance();
  CharacterMailDBResponse::default_instance_->InitAsDefaultInstance();
  MaxMailIDRequest::default_instance_->InitAsDefaultInstance();
  MaxMailIDResponse::default_instance_->InitAsDefaultInstance();
  DeleteCharacterMail::default_instance_->InitAsDefaultInstance();
  ZoneMailSaveRsp::default_instance_->InitAsDefaultInstance();
  ZoneMailTransCharacterMailReq::default_instance_->InitAsDefaultInstance();
  ZoneMailTransCharacterMailRsp::default_instance_->InitAsDefaultInstance();
  WebMailDBDataReq::default_instance_->InitAsDefaultInstance();
  WebMailDBDataRsp::default_instance_->InitAsDefaultInstance();
  FriendDBInfo::default_instance_->InitAsDefaultInstance();
  FriendDBRequest::default_instance_->InitAsDefaultInstance();
  FriendDBResponse::default_instance_->InitAsDefaultInstance();
  AllFriendDBRequest::default_instance_->InitAsDefaultInstance();
  AllFriendDBResponse::default_instance_->InitAsDefaultInstance();
  SaveFriendDBRequest::default_instance_->InitAsDefaultInstance();
  DelteFriendDBRequest::default_instance_->InitAsDefaultInstance();
  GlobalDBRequst::default_instance_->InitAsDefaultInstance();
  GlobalDBEntry::default_instance_->InitAsDefaultInstance();
  GlobalDBResponse::default_instance_->InitAsDefaultInstance();
  GlobalDBSetRequest::default_instance_->InitAsDefaultInstance();
  GlobalDBSetResponse::default_instance_->InitAsDefaultInstance();
  GlobalComData::default_instance_->InitAsDefaultInstance();
  GlobalYaotaDupDBEntry::default_instance_->InitAsDefaultInstance();
  GlobalYaotaDupDBData::default_instance_->InitAsDefaultInstance();
  ActDBProto::default_instance_->InitAsDefaultInstance();
  ActDBReq::default_instance_->InitAsDefaultInstance();
  ActDBRsp::default_instance_->InitAsDefaultInstance();
  ActSaveDBReq::default_instance_->InitAsDefaultInstance();
  AllArenaDBRequest::default_instance_->InitAsDefaultInstance();
  ArenaDBInfo::default_instance_->InitAsDefaultInstance();
  ArenaMoreDBInfo::default_instance_->InitAsDefaultInstance();
  AllArenaDBResponse::default_instance_->InitAsDefaultInstance();
  SaveArenaDBRequest::default_instance_->InitAsDefaultInstance();
  DeleteArenaDBRequest::default_instance_->InitAsDefaultInstance();
  RoleMirrorDBReq::default_instance_->InitAsDefaultInstance();
  RoleMirrorDBRsp::default_instance_->InitAsDefaultInstance();
  FactionDataDBReq::default_instance_->InitAsDefaultInstance();
  FactionDataDBRsp::default_instance_->InitAsDefaultInstance();
  FactionSaveDBReq::default_instance_->InitAsDefaultInstance();
  FactionDelDBReq::default_instance_->InitAsDefaultInstance();
  FactionRedDBReq::default_instance_->InitAsDefaultInstance();
  FactionRedDBRsp::default_instance_->InitAsDefaultInstance();
  FactionRedSaveDBReq::default_instance_->InitAsDefaultInstance();
  FactionRedDelDBReq::default_instance_->InitAsDefaultInstance();
  RoleRedDBReq::default_instance_->InitAsDefaultInstance();
  RoleRedDBRsp::default_instance_->InitAsDefaultInstance();
  ComLoadDBReq::default_instance_->InitAsDefaultInstance();
  ComLoadDBRsp::default_instance_->InitAsDefaultInstance();
  ComLoadAllDBReq::default_instance_->InitAsDefaultInstance();
  ComDBProto::default_instance_->InitAsDefaultInstance();
  ComLoadAllDBRsp::default_instance_->InitAsDefaultInstance();
  ComSaveDBReq::default_instance_->InitAsDefaultInstance();
  ComDelDBReq::default_instance_->InitAsDefaultInstance();
  MarryApply::default_instance_->InitAsDefaultInstance();
  MarrySimpleInfo::default_instance_->InitAsDefaultInstance();
  MarryDBLoadReq::default_instance_->InitAsDefaultInstance();
  MarryDBLoadRsp::default_instance_->InitAsDefaultInstance();
  MarryDBSaveReq::default_instance_->InitAsDefaultInstance();
  AnswerRankDBProto::default_instance_->InitAsDefaultInstance();
  AnswerDBData::default_instance_->InitAsDefaultInstance();
  GuardRankDBProto::default_instance_->InitAsDefaultInstance();
  GuardDBData::default_instance_->InitAsDefaultInstance();
  Rank1v1DBProto::default_instance_->InitAsDefaultInstance();
  Act1v1DBData::default_instance_->InitAsDefaultInstance();
  RaceFactionDBProto::default_instance_->InitAsDefaultInstance();
  RaceMatchDBProto::default_instance_->InitAsDefaultInstance();
  RaceDBProto::default_instance_->InitAsDefaultInstance();
  WarRankDBProto::default_instance_->InitAsDefaultInstance();
  FactionWarDBData::default_instance_->InitAsDefaultInstance();
  DigEggLogDBProto::default_instance_->InitAsDefaultInstance();
  FestDigEggLogDBProto::default_instance_->InitAsDefaultInstance();
  FestDigEggLogDBData::default_instance_->InitAsDefaultInstance();
  FestRTurnableLogDBData::default_instance_->InitAsDefaultInstance();
  FestDonateDBData::default_instance_->InitAsDefaultInstance();
  FestDrawPizeLogDBData::default_instance_->InitAsDefaultInstance();
  GoodsDB::default_instance_->InitAsDefaultInstance();
  LoadGoodsReq::default_instance_->InitAsDefaultInstance();
  MarketDBLoadRsp::default_instance_->InitAsDefaultInstance();
  MarketSaveReq::default_instance_->InitAsDefaultInstance();
  MarketDelReq::default_instance_->InitAsDefaultInstance();
  CandleHarmDBProto::default_instance_->InitAsDefaultInstance();
  CandleDBData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DBProxy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DBProxy_2eproto {
  StaticDescriptorInitializer_DBProxy_2eproto() {
    protobuf_AddDesc_DBProxy_2eproto();
  }
} static_descriptor_initializer_DBProxy_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RoleReliveProto::kTiredTimeFieldNumber;
const int RoleReliveProto::kReliveNumFieldNumber;
const int RoleReliveProto::kIsTiredFieldNumber;
const int RoleReliveProto::kMapidFieldNumber;
const int RoleReliveProto::kMapReliveNumFieldNumber;
#endif  // !_MSC_VER

RoleReliveProto::RoleReliveProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleReliveProto::InitAsDefaultInstance() {
}

RoleReliveProto::RoleReliveProto(const RoleReliveProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleReliveProto::SharedCtor() {
  _cached_size_ = 0;
  tired_time_ = GOOGLE_ULONGLONG(0);
  relive_num_ = 0;
  is_tired_ = 0;
  mapid_ = GOOGLE_ULONGLONG(0);
  map_relive_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleReliveProto::~RoleReliveProto() {
  SharedDtor();
}

void RoleReliveProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleReliveProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleReliveProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleReliveProto_descriptor_;
}

const RoleReliveProto& RoleReliveProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleReliveProto* RoleReliveProto::default_instance_ = NULL;

RoleReliveProto* RoleReliveProto::New() const {
  return new RoleReliveProto;
}

void RoleReliveProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tired_time_ = GOOGLE_ULONGLONG(0);
    relive_num_ = 0;
    is_tired_ = 0;
    mapid_ = GOOGLE_ULONGLONG(0);
    map_relive_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleReliveProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tired_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tired_time_)));
          set_has_tired_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_relive_num;
        break;
      }

      // optional int32 relive_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relive_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relive_num_)));
          set_has_relive_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_tired;
        break;
      }

      // optional int32 is_tired = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_tired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_tired_)));
          set_has_is_tired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_map_relive_num;
        break;
      }

      // optional int32 map_relive_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_map_relive_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &map_relive_num_)));
          set_has_map_relive_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleReliveProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 tired_time = 1;
  if (has_tired_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tired_time(), output);
  }

  // optional int32 relive_num = 2;
  if (has_relive_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relive_num(), output);
  }

  // optional int32 is_tired = 3;
  if (has_is_tired()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_tired(), output);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mapid(), output);
  }

  // optional int32 map_relive_num = 5;
  if (has_map_relive_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->map_relive_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleReliveProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 tired_time = 1;
  if (has_tired_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tired_time(), target);
  }

  // optional int32 relive_num = 2;
  if (has_relive_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relive_num(), target);
  }

  // optional int32 is_tired = 3;
  if (has_is_tired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_tired(), target);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mapid(), target);
  }

  // optional int32 map_relive_num = 5;
  if (has_map_relive_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->map_relive_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleReliveProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 tired_time = 1;
    if (has_tired_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tired_time());
    }

    // optional int32 relive_num = 2;
    if (has_relive_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relive_num());
    }

    // optional int32 is_tired = 3;
    if (has_is_tired()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_tired());
    }

    // optional uint64 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional int32 map_relive_num = 5;
    if (has_map_relive_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->map_relive_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleReliveProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleReliveProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleReliveProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleReliveProto::MergeFrom(const RoleReliveProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tired_time()) {
      set_tired_time(from.tired_time());
    }
    if (from.has_relive_num()) {
      set_relive_num(from.relive_num());
    }
    if (from.has_is_tired()) {
      set_is_tired(from.is_tired());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_map_relive_num()) {
      set_map_relive_num(from.map_relive_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleReliveProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleReliveProto::CopyFrom(const RoleReliveProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleReliveProto::IsInitialized() const {

  return true;
}

void RoleReliveProto::Swap(RoleReliveProto* other) {
  if (other != this) {
    std::swap(tired_time_, other->tired_time_);
    std::swap(relive_num_, other->relive_num_);
    std::swap(is_tired_, other->is_tired_);
    std::swap(mapid_, other->mapid_);
    std::swap(map_relive_num_, other->map_relive_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleReliveProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleReliveProto_descriptor_;
  metadata.reflection = RoleReliveProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBBaseData::kNameFieldNumber;
const int RoleDBBaseData::kProfFieldNumber;
const int RoleDBBaseData::kLevelFieldNumber;
const int RoleDBBaseData::kExpFieldNumber;
const int RoleDBBaseData::kHpFieldNumber;
const int RoleDBBaseData::kFightFieldNumber;
const int RoleDBBaseData::kCreateTimeFieldNumber;
const int RoleDBBaseData::kLoginTimeFieldNumber;
const int RoleDBBaseData::kLogoutTimeFieldNumber;
const int RoleDBBaseData::kEnterSceneIdFieldNumber;
const int RoleDBBaseData::kEnterMapIdFieldNumber;
const int RoleDBBaseData::kEnterposxFieldNumber;
const int RoleDBBaseData::kEnterposyFieldNumber;
const int RoleDBBaseData::kEnterposzFieldNumber;
const int RoleDBBaseData::kLastsceneidFieldNumber;
const int RoleDBBaseData::kLastmapidFieldNumber;
const int RoleDBBaseData::kLastposxFieldNumber;
const int RoleDBBaseData::kLastposyFieldNumber;
const int RoleDBBaseData::kLastposzFieldNumber;
const int RoleDBBaseData::kFacadeFieldNumber;
const int RoleDBBaseData::kVipLevelFieldNumber;
const int RoleDBBaseData::kStateFieldNumber;
const int RoleDBBaseData::kHanguptimeFieldNumber;
const int RoleDBBaseData::kReliveFieldNumber;
const int RoleDBBaseData::kGoldFieldNumber;
const int RoleDBBaseData::kDiaFieldNumber;
const int RoleDBBaseData::kBdiaFieldNumber;
const int RoleDBBaseData::kMagicFieldNumber;
const int RoleDBBaseData::kPrestigeFieldNumber;
const int RoleDBBaseData::kContriFieldNumber;
const int RoleDBBaseData::kArenacoinFieldNumber;
const int RoleDBBaseData::kGodevilExpFieldNumber;
const int RoleDBBaseData::kGodevilLevelFieldNumber;
const int RoleDBBaseData::kLoginDayFieldNumber;
const int RoleDBBaseData::kLoginDayTimeFieldNumber;
const int RoleDBBaseData::kBestAqFieldNumber;
const int RoleDBBaseData::kBestLjFieldNumber;
const int RoleDBBaseData::kDayPrestigeFieldNumber;
const int RoleDBBaseData::kPrestigeTimeFieldNumber;
const int RoleDBBaseData::kPtStageFieldNumber;
const int RoleDBBaseData::kGuideFieldNumber;
const int RoleDBBaseData::kBattlepassXianceFieldNumber;
const int RoleDBBaseData::kBattlepassBaodingFieldNumber;
const int RoleDBBaseData::kFindtreasureShengfuFieldNumber;
const int RoleDBBaseData::kFindtreasureBattlesoulFieldNumber;
const int RoleDBBaseData::kHolybeastBuildFieldNumber;
const int RoleDBBaseData::kMagicSumFieldNumber;
const int RoleDBBaseData::kSubpackTypeFieldNumber;
const int RoleDBBaseData::kSubpackFetchFieldNumber;
const int RoleDBBaseData::kHunlingFieldNumber;
#endif  // !_MSC_VER

RoleDBBaseData::RoleDBBaseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBBaseData::InitAsDefaultInstance() {
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
  relive_ = const_cast< ::proto_ff::RoleReliveProto*>(&::proto_ff::RoleReliveProto::default_instance());
}

RoleDBBaseData::RoleDBBaseData(const RoleDBBaseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBBaseData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0u;
  level_ = 0u;
  exp_ = GOOGLE_LONGLONG(0);
  hp_ = GOOGLE_LONGLONG(0);
  fight_ = GOOGLE_LONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  logintime_ = GOOGLE_ULONGLONG(0);
  logouttime_ = GOOGLE_ULONGLONG(0);
  enter_scene_id_ = GOOGLE_ULONGLONG(0);
  enter_map_id_ = GOOGLE_ULONGLONG(0);
  enterposx_ = 0;
  enterposy_ = 0;
  enterposz_ = 0;
  lastsceneid_ = GOOGLE_ULONGLONG(0);
  lastmapid_ = GOOGLE_ULONGLONG(0);
  lastposx_ = 0;
  lastposy_ = 0;
  lastposz_ = 0;
  facade_ = NULL;
  vip_level_ = 0u;
  state_ = 0;
  hanguptime_ = GOOGLE_ULONGLONG(0);
  relive_ = NULL;
  gold_ = GOOGLE_LONGLONG(0);
  dia_ = GOOGLE_LONGLONG(0);
  bdia_ = GOOGLE_LONGLONG(0);
  magic_ = GOOGLE_LONGLONG(0);
  prestige_ = GOOGLE_LONGLONG(0);
  contri_ = 0;
  arenacoin_ = GOOGLE_LONGLONG(0);
  godevil_exp_ = GOOGLE_LONGLONG(0);
  godevil_level_ = 0;
  login_day_ = 0u;
  login_day_time_ = GOOGLE_ULONGLONG(0);
  best_aq_ = GOOGLE_LONGLONG(0);
  best_lj_ = GOOGLE_LONGLONG(0);
  day_prestige_ = 0u;
  prestige_time_ = GOOGLE_ULONGLONG(0);
  pt_stage_ = 0u;
  guide_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  battlepass_xiance_ = GOOGLE_LONGLONG(0);
  battlepass_baoding_ = GOOGLE_LONGLONG(0);
  findtreasure_shengfu_ = GOOGLE_LONGLONG(0);
  findtreasure_battlesoul_ = GOOGLE_LONGLONG(0);
  holybeast_build_ = GOOGLE_LONGLONG(0);
  magic_sum_ = GOOGLE_LONGLONG(0);
  subpack_type_ = 0;
  subpack_fetch_ = 0;
  hunling_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBBaseData::~RoleDBBaseData() {
  SharedDtor();
}

void RoleDBBaseData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (guide_ != &::google::protobuf::internal::kEmptyString) {
    delete guide_;
  }
  if (this != default_instance_) {
    delete facade_;
    delete relive_;
  }
}

void RoleDBBaseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBBaseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBBaseData_descriptor_;
}

const RoleDBBaseData& RoleDBBaseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleDBBaseData* RoleDBBaseData::default_instance_ = NULL;

RoleDBBaseData* RoleDBBaseData::New() const {
  return new RoleDBBaseData;
}

void RoleDBBaseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0u;
    level_ = 0u;
    exp_ = GOOGLE_LONGLONG(0);
    hp_ = GOOGLE_LONGLONG(0);
    fight_ = GOOGLE_LONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
    logintime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logouttime_ = GOOGLE_ULONGLONG(0);
    enter_scene_id_ = GOOGLE_ULONGLONG(0);
    enter_map_id_ = GOOGLE_ULONGLONG(0);
    enterposx_ = 0;
    enterposy_ = 0;
    enterposz_ = 0;
    lastsceneid_ = GOOGLE_ULONGLONG(0);
    lastmapid_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    lastposx_ = 0;
    lastposy_ = 0;
    lastposz_ = 0;
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    vip_level_ = 0u;
    state_ = 0;
    hanguptime_ = GOOGLE_ULONGLONG(0);
    if (has_relive()) {
      if (relive_ != NULL) relive_->::proto_ff::RoleReliveProto::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    gold_ = GOOGLE_LONGLONG(0);
    dia_ = GOOGLE_LONGLONG(0);
    bdia_ = GOOGLE_LONGLONG(0);
    magic_ = GOOGLE_LONGLONG(0);
    prestige_ = GOOGLE_LONGLONG(0);
    contri_ = 0;
    arenacoin_ = GOOGLE_LONGLONG(0);
    godevil_exp_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    godevil_level_ = 0;
    login_day_ = 0u;
    login_day_time_ = GOOGLE_ULONGLONG(0);
    best_aq_ = GOOGLE_LONGLONG(0);
    best_lj_ = GOOGLE_LONGLONG(0);
    day_prestige_ = 0u;
    prestige_time_ = GOOGLE_ULONGLONG(0);
    pt_stage_ = 0u;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_guide()) {
      if (guide_ != &::google::protobuf::internal::kEmptyString) {
        guide_->clear();
      }
    }
    battlepass_xiance_ = GOOGLE_LONGLONG(0);
    battlepass_baoding_ = GOOGLE_LONGLONG(0);
    findtreasure_shengfu_ = GOOGLE_LONGLONG(0);
    findtreasure_battlesoul_ = GOOGLE_LONGLONG(0);
    holybeast_build_ = GOOGLE_LONGLONG(0);
    magic_sum_ = GOOGLE_LONGLONG(0);
    subpack_type_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    subpack_fetch_ = 0;
    hunling_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBBaseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prof;
        break;
      }

      // required uint32 prof = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // required uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // required int64 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // required int64 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight;
        break;
      }

      // required int64 fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_createTime;
        break;
      }

      // required uint64 createTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_loginTime;
        break;
      }

      // required uint64 loginTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_logoutTime;
        break;
      }

      // required uint64 logoutTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_logoutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &logouttime_)));
          set_has_logouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_enter_scene_id;
        break;
      }

      // required uint64 enter_scene_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_scene_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_scene_id_)));
          set_has_enter_scene_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_enter_map_id;
        break;
      }

      // required uint64 enter_map_id = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_map_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &enter_map_id_)));
          set_has_enter_map_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_enterposx;
        break;
      }

      // required float enterposx = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposx_)));
          set_has_enterposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_enterposy;
        break;
      }

      // required float enterposy = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposy_)));
          set_has_enterposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_enterposz;
        break;
      }

      // required float enterposz = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_enterposz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &enterposz_)));
          set_has_enterposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_lastsceneid;
        break;
      }

      // optional uint64 lastsceneid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastsceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsceneid_)));
          set_has_lastsceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_lastmapid;
        break;
      }

      // optional uint64 lastmapid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmapid_)));
          set_has_lastmapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_lastposx;
        break;
      }

      // optional float lastposx = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposx_)));
          set_has_lastposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_lastposy;
        break;
      }

      // optional float lastposy = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposy_)));
          set_has_lastposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_lastposz;
        break;
      }

      // optional float lastposz = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lastposz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lastposz_)));
          set_has_lastposz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_vip_level;
        break;
      }

      // optional uint32 vip_level = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vip_level_)));
          set_has_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_state;
        break;
      }

      // optional int32 state = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_hanguptime;
        break;
      }

      // optional uint64 hanguptime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hanguptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hanguptime_)));
          set_has_hanguptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_relive;
        break;
      }

      // optional .proto_ff.RoleReliveProto relive = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relive:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_gold;
        break;
      }

      // optional int64 gold = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_dia;
        break;
      }

      // optional int64 dia = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dia_)));
          set_has_dia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_bdia;
        break;
      }

      // optional int64 bdia = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bdia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &bdia_)));
          set_has_bdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_magic;
        break;
      }

      // optional int64 magic = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_prestige;
        break;
      }

      // optional int64 prestige = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_contri;
        break;
      }

      // optional int32 contri = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_arenacoin;
        break;
      }

      // optional int64 arenacoin = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_arenacoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &arenacoin_)));
          set_has_arenacoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_godevil_exp;
        break;
      }

      // optional int64 godevil_exp = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godevil_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &godevil_exp_)));
          set_has_godevil_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_godevil_level;
        break;
      }

      // optional int32 godevil_level = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_godevil_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &godevil_level_)));
          set_has_godevil_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_login_day;
        break;
      }

      // optional uint32 login_day = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &login_day_)));
          set_has_login_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_login_day_time;
        break;
      }

      // optional uint64 login_day_time = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_login_day_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &login_day_time_)));
          set_has_login_day_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_best_aq;
        break;
      }

      // optional int64 best_aq = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_aq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &best_aq_)));
          set_has_best_aq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_best_lj;
        break;
      }

      // optional int64 best_lj = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_best_lj:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &best_lj_)));
          set_has_best_lj();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_day_prestige;
        break;
      }

      // optional uint32 day_prestige = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_prestige_)));
          set_has_day_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_prestige_time;
        break;
      }

      // optional uint64 prestige_time = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prestige_time_)));
          set_has_prestige_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_pt_stage;
        break;
      }

      // optional uint32 pt_stage = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pt_stage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pt_stage_)));
          set_has_pt_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_guide;
        break;
      }

      // optional string guide = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guide:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guide()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guide().data(), this->guide().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_battlepass_xiance;
        break;
      }

      // optional int64 battlepass_xiance = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlepass_xiance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battlepass_xiance_)));
          set_has_battlepass_xiance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_battlepass_baoding;
        break;
      }

      // optional int64 battlepass_baoding = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlepass_baoding:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &battlepass_baoding_)));
          set_has_battlepass_baoding();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_findtreasure_shengfu;
        break;
      }

      // optional int64 findtreasure_shengfu = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_findtreasure_shengfu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &findtreasure_shengfu_)));
          set_has_findtreasure_shengfu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_findtreasure_battlesoul;
        break;
      }

      // optional int64 findtreasure_battlesoul = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_findtreasure_battlesoul:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &findtreasure_battlesoul_)));
          set_has_findtreasure_battlesoul();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_holybeast_build;
        break;
      }

      // optional int64 holybeast_build = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_holybeast_build:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &holybeast_build_)));
          set_has_holybeast_build();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_magic_sum;
        break;
      }

      // optional int64 magic_sum = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic_sum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &magic_sum_)));
          set_has_magic_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_subpack_type;
        break;
      }

      // optional int32 subpack_type = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subpack_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subpack_type_)));
          set_has_subpack_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_subpack_fetch;
        break;
      }

      // optional int32 subpack_fetch = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subpack_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subpack_fetch_)));
          set_has_subpack_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_hunling;
        break;
      }

      // optional uint64 hunling = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hunling:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hunling_)));
          set_has_hunling();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBBaseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // required uint32 prof = 2;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->prof(), output);
  }

  // required uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // required int64 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->exp(), output);
  }

  // required int64 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->hp(), output);
  }

  // required int64 fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->fight(), output);
  }

  // required uint64 createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->createtime(), output);
  }

  // required uint64 loginTime = 8;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->logintime(), output);
  }

  // required uint64 logoutTime = 9;
  if (has_logouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->logouttime(), output);
  }

  // required uint64 enter_scene_id = 10;
  if (has_enter_scene_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->enter_scene_id(), output);
  }

  // required uint64 enter_map_id = 11;
  if (has_enter_map_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->enter_map_id(), output);
  }

  // required float enterposx = 12;
  if (has_enterposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->enterposx(), output);
  }

  // required float enterposy = 13;
  if (has_enterposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->enterposy(), output);
  }

  // required float enterposz = 14;
  if (has_enterposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->enterposz(), output);
  }

  // optional uint64 lastsceneid = 15;
  if (has_lastsceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->lastsceneid(), output);
  }

  // optional uint64 lastmapid = 16;
  if (has_lastmapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->lastmapid(), output);
  }

  // optional float lastposx = 17;
  if (has_lastposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->lastposx(), output);
  }

  // optional float lastposy = 18;
  if (has_lastposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->lastposy(), output);
  }

  // optional float lastposz = 19;
  if (has_lastposz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->lastposz(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 20;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->facade(), output);
  }

  // optional uint32 vip_level = 21;
  if (has_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->vip_level(), output);
  }

  // optional int32 state = 22;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->state(), output);
  }

  // optional uint64 hanguptime = 23;
  if (has_hanguptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(23, this->hanguptime(), output);
  }

  // optional .proto_ff.RoleReliveProto relive = 24;
  if (has_relive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->relive(), output);
  }

  // optional int64 gold = 25;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(25, this->gold(), output);
  }

  // optional int64 dia = 26;
  if (has_dia()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(26, this->dia(), output);
  }

  // optional int64 bdia = 27;
  if (has_bdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(27, this->bdia(), output);
  }

  // optional int64 magic = 28;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(28, this->magic(), output);
  }

  // optional int64 prestige = 29;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->prestige(), output);
  }

  // optional int32 contri = 30;
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->contri(), output);
  }

  // optional int64 arenacoin = 31;
  if (has_arenacoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(31, this->arenacoin(), output);
  }

  // optional int64 godevil_exp = 32;
  if (has_godevil_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->godevil_exp(), output);
  }

  // optional int32 godevil_level = 33;
  if (has_godevil_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->godevil_level(), output);
  }

  // optional uint32 login_day = 34;
  if (has_login_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->login_day(), output);
  }

  // optional uint64 login_day_time = 35;
  if (has_login_day_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(35, this->login_day_time(), output);
  }

  // optional int64 best_aq = 36;
  if (has_best_aq()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->best_aq(), output);
  }

  // optional int64 best_lj = 37;
  if (has_best_lj()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->best_lj(), output);
  }

  // optional uint32 day_prestige = 38;
  if (has_day_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(38, this->day_prestige(), output);
  }

  // optional uint64 prestige_time = 39;
  if (has_prestige_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(39, this->prestige_time(), output);
  }

  // optional uint32 pt_stage = 40;
  if (has_pt_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(40, this->pt_stage(), output);
  }

  // optional string guide = 41;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guide().data(), this->guide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->guide(), output);
  }

  // optional int64 battlepass_xiance = 42;
  if (has_battlepass_xiance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(42, this->battlepass_xiance(), output);
  }

  // optional int64 battlepass_baoding = 43;
  if (has_battlepass_baoding()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(43, this->battlepass_baoding(), output);
  }

  // optional int64 findtreasure_shengfu = 44;
  if (has_findtreasure_shengfu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(44, this->findtreasure_shengfu(), output);
  }

  // optional int64 findtreasure_battlesoul = 45;
  if (has_findtreasure_battlesoul()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(45, this->findtreasure_battlesoul(), output);
  }

  // optional int64 holybeast_build = 46;
  if (has_holybeast_build()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->holybeast_build(), output);
  }

  // optional int64 magic_sum = 47;
  if (has_magic_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(47, this->magic_sum(), output);
  }

  // optional int32 subpack_type = 48;
  if (has_subpack_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->subpack_type(), output);
  }

  // optional int32 subpack_fetch = 49;
  if (has_subpack_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->subpack_fetch(), output);
  }

  // optional uint64 hunling = 50;
  if (has_hunling()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(50, this->hunling(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBBaseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // required uint32 prof = 2;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->prof(), target);
  }

  // required uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // required int64 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->exp(), target);
  }

  // required int64 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->hp(), target);
  }

  // required int64 fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->fight(), target);
  }

  // required uint64 createTime = 7;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->createtime(), target);
  }

  // required uint64 loginTime = 8;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->logintime(), target);
  }

  // required uint64 logoutTime = 9;
  if (has_logouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->logouttime(), target);
  }

  // required uint64 enter_scene_id = 10;
  if (has_enter_scene_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->enter_scene_id(), target);
  }

  // required uint64 enter_map_id = 11;
  if (has_enter_map_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->enter_map_id(), target);
  }

  // required float enterposx = 12;
  if (has_enterposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->enterposx(), target);
  }

  // required float enterposy = 13;
  if (has_enterposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->enterposy(), target);
  }

  // required float enterposz = 14;
  if (has_enterposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->enterposz(), target);
  }

  // optional uint64 lastsceneid = 15;
  if (has_lastsceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->lastsceneid(), target);
  }

  // optional uint64 lastmapid = 16;
  if (has_lastmapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->lastmapid(), target);
  }

  // optional float lastposx = 17;
  if (has_lastposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->lastposx(), target);
  }

  // optional float lastposy = 18;
  if (has_lastposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->lastposy(), target);
  }

  // optional float lastposz = 19;
  if (has_lastposz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->lastposz(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 20;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->facade(), target);
  }

  // optional uint32 vip_level = 21;
  if (has_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->vip_level(), target);
  }

  // optional int32 state = 22;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->state(), target);
  }

  // optional uint64 hanguptime = 23;
  if (has_hanguptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(23, this->hanguptime(), target);
  }

  // optional .proto_ff.RoleReliveProto relive = 24;
  if (has_relive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->relive(), target);
  }

  // optional int64 gold = 25;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(25, this->gold(), target);
  }

  // optional int64 dia = 26;
  if (has_dia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(26, this->dia(), target);
  }

  // optional int64 bdia = 27;
  if (has_bdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(27, this->bdia(), target);
  }

  // optional int64 magic = 28;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(28, this->magic(), target);
  }

  // optional int64 prestige = 29;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->prestige(), target);
  }

  // optional int32 contri = 30;
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->contri(), target);
  }

  // optional int64 arenacoin = 31;
  if (has_arenacoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(31, this->arenacoin(), target);
  }

  // optional int64 godevil_exp = 32;
  if (has_godevil_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->godevil_exp(), target);
  }

  // optional int32 godevil_level = 33;
  if (has_godevil_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->godevil_level(), target);
  }

  // optional uint32 login_day = 34;
  if (has_login_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->login_day(), target);
  }

  // optional uint64 login_day_time = 35;
  if (has_login_day_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(35, this->login_day_time(), target);
  }

  // optional int64 best_aq = 36;
  if (has_best_aq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->best_aq(), target);
  }

  // optional int64 best_lj = 37;
  if (has_best_lj()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->best_lj(), target);
  }

  // optional uint32 day_prestige = 38;
  if (has_day_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(38, this->day_prestige(), target);
  }

  // optional uint64 prestige_time = 39;
  if (has_prestige_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(39, this->prestige_time(), target);
  }

  // optional uint32 pt_stage = 40;
  if (has_pt_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(40, this->pt_stage(), target);
  }

  // optional string guide = 41;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guide().data(), this->guide().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->guide(), target);
  }

  // optional int64 battlepass_xiance = 42;
  if (has_battlepass_xiance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(42, this->battlepass_xiance(), target);
  }

  // optional int64 battlepass_baoding = 43;
  if (has_battlepass_baoding()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(43, this->battlepass_baoding(), target);
  }

  // optional int64 findtreasure_shengfu = 44;
  if (has_findtreasure_shengfu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(44, this->findtreasure_shengfu(), target);
  }

  // optional int64 findtreasure_battlesoul = 45;
  if (has_findtreasure_battlesoul()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(45, this->findtreasure_battlesoul(), target);
  }

  // optional int64 holybeast_build = 46;
  if (has_holybeast_build()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->holybeast_build(), target);
  }

  // optional int64 magic_sum = 47;
  if (has_magic_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(47, this->magic_sum(), target);
  }

  // optional int32 subpack_type = 48;
  if (has_subpack_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->subpack_type(), target);
  }

  // optional int32 subpack_fetch = 49;
  if (has_subpack_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->subpack_fetch(), target);
  }

  // optional uint64 hunling = 50;
  if (has_hunling()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(50, this->hunling(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBBaseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required uint32 prof = 2;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prof());
    }

    // required uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required int64 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // required int64 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hp());
    }

    // required int64 fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fight());
    }

    // required uint64 createTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

    // required uint64 loginTime = 8;
    if (has_logintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logintime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint64 logoutTime = 9;
    if (has_logouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->logouttime());
    }

    // required uint64 enter_scene_id = 10;
    if (has_enter_scene_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_scene_id());
    }

    // required uint64 enter_map_id = 11;
    if (has_enter_map_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->enter_map_id());
    }

    // required float enterposx = 12;
    if (has_enterposx()) {
      total_size += 1 + 4;
    }

    // required float enterposy = 13;
    if (has_enterposy()) {
      total_size += 1 + 4;
    }

    // required float enterposz = 14;
    if (has_enterposz()) {
      total_size += 1 + 4;
    }

    // optional uint64 lastsceneid = 15;
    if (has_lastsceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsceneid());
    }

    // optional uint64 lastmapid = 16;
    if (has_lastmapid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastmapid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float lastposx = 17;
    if (has_lastposx()) {
      total_size += 2 + 4;
    }

    // optional float lastposy = 18;
    if (has_lastposy()) {
      total_size += 2 + 4;
    }

    // optional float lastposz = 19;
    if (has_lastposz()) {
      total_size += 2 + 4;
    }

    // optional .proto_ff.RoleFacadeProto facade = 20;
    if (has_facade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional uint32 vip_level = 21;
    if (has_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vip_level());
    }

    // optional int32 state = 22;
    if (has_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional uint64 hanguptime = 23;
    if (has_hanguptime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hanguptime());
    }

    // optional .proto_ff.RoleReliveProto relive = 24;
    if (has_relive()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->relive());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int64 gold = 25;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->gold());
    }

    // optional int64 dia = 26;
    if (has_dia()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dia());
    }

    // optional int64 bdia = 27;
    if (has_bdia()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->bdia());
    }

    // optional int64 magic = 28;
    if (has_magic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->magic());
    }

    // optional int64 prestige = 29;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->prestige());
    }

    // optional int32 contri = 30;
    if (has_contri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contri());
    }

    // optional int64 arenacoin = 31;
    if (has_arenacoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->arenacoin());
    }

    // optional int64 godevil_exp = 32;
    if (has_godevil_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->godevil_exp());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 godevil_level = 33;
    if (has_godevil_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->godevil_level());
    }

    // optional uint32 login_day = 34;
    if (has_login_day()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->login_day());
    }

    // optional uint64 login_day_time = 35;
    if (has_login_day_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->login_day_time());
    }

    // optional int64 best_aq = 36;
    if (has_best_aq()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->best_aq());
    }

    // optional int64 best_lj = 37;
    if (has_best_lj()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->best_lj());
    }

    // optional uint32 day_prestige = 38;
    if (has_day_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day_prestige());
    }

    // optional uint64 prestige_time = 39;
    if (has_prestige_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->prestige_time());
    }

    // optional uint32 pt_stage = 40;
    if (has_pt_stage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pt_stage());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string guide = 41;
    if (has_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guide());
    }

    // optional int64 battlepass_xiance = 42;
    if (has_battlepass_xiance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battlepass_xiance());
    }

    // optional int64 battlepass_baoding = 43;
    if (has_battlepass_baoding()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->battlepass_baoding());
    }

    // optional int64 findtreasure_shengfu = 44;
    if (has_findtreasure_shengfu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->findtreasure_shengfu());
    }

    // optional int64 findtreasure_battlesoul = 45;
    if (has_findtreasure_battlesoul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->findtreasure_battlesoul());
    }

    // optional int64 holybeast_build = 46;
    if (has_holybeast_build()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->holybeast_build());
    }

    // optional int64 magic_sum = 47;
    if (has_magic_sum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->magic_sum());
    }

    // optional int32 subpack_type = 48;
    if (has_subpack_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subpack_type());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 subpack_fetch = 49;
    if (has_subpack_fetch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subpack_fetch());
    }

    // optional uint64 hunling = 50;
    if (has_hunling()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hunling());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBBaseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBBaseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBBaseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBBaseData::MergeFrom(const RoleDBBaseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logouttime()) {
      set_logouttime(from.logouttime());
    }
    if (from.has_enter_scene_id()) {
      set_enter_scene_id(from.enter_scene_id());
    }
    if (from.has_enter_map_id()) {
      set_enter_map_id(from.enter_map_id());
    }
    if (from.has_enterposx()) {
      set_enterposx(from.enterposx());
    }
    if (from.has_enterposy()) {
      set_enterposy(from.enterposy());
    }
    if (from.has_enterposz()) {
      set_enterposz(from.enterposz());
    }
    if (from.has_lastsceneid()) {
      set_lastsceneid(from.lastsceneid());
    }
    if (from.has_lastmapid()) {
      set_lastmapid(from.lastmapid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_lastposx()) {
      set_lastposx(from.lastposx());
    }
    if (from.has_lastposy()) {
      set_lastposy(from.lastposy());
    }
    if (from.has_lastposz()) {
      set_lastposz(from.lastposz());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_vip_level()) {
      set_vip_level(from.vip_level());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_hanguptime()) {
      set_hanguptime(from.hanguptime());
    }
    if (from.has_relive()) {
      mutable_relive()->::proto_ff::RoleReliveProto::MergeFrom(from.relive());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_dia()) {
      set_dia(from.dia());
    }
    if (from.has_bdia()) {
      set_bdia(from.bdia());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_contri()) {
      set_contri(from.contri());
    }
    if (from.has_arenacoin()) {
      set_arenacoin(from.arenacoin());
    }
    if (from.has_godevil_exp()) {
      set_godevil_exp(from.godevil_exp());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_godevil_level()) {
      set_godevil_level(from.godevil_level());
    }
    if (from.has_login_day()) {
      set_login_day(from.login_day());
    }
    if (from.has_login_day_time()) {
      set_login_day_time(from.login_day_time());
    }
    if (from.has_best_aq()) {
      set_best_aq(from.best_aq());
    }
    if (from.has_best_lj()) {
      set_best_lj(from.best_lj());
    }
    if (from.has_day_prestige()) {
      set_day_prestige(from.day_prestige());
    }
    if (from.has_prestige_time()) {
      set_prestige_time(from.prestige_time());
    }
    if (from.has_pt_stage()) {
      set_pt_stage(from.pt_stage());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_guide()) {
      set_guide(from.guide());
    }
    if (from.has_battlepass_xiance()) {
      set_battlepass_xiance(from.battlepass_xiance());
    }
    if (from.has_battlepass_baoding()) {
      set_battlepass_baoding(from.battlepass_baoding());
    }
    if (from.has_findtreasure_shengfu()) {
      set_findtreasure_shengfu(from.findtreasure_shengfu());
    }
    if (from.has_findtreasure_battlesoul()) {
      set_findtreasure_battlesoul(from.findtreasure_battlesoul());
    }
    if (from.has_holybeast_build()) {
      set_holybeast_build(from.holybeast_build());
    }
    if (from.has_magic_sum()) {
      set_magic_sum(from.magic_sum());
    }
    if (from.has_subpack_type()) {
      set_subpack_type(from.subpack_type());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_subpack_fetch()) {
      set_subpack_fetch(from.subpack_fetch());
    }
    if (from.has_hunling()) {
      set_hunling(from.hunling());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBBaseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBBaseData::CopyFrom(const RoleDBBaseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBBaseData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  return true;
}

void RoleDBBaseData::Swap(RoleDBBaseData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(hp_, other->hp_);
    std::swap(fight_, other->fight_);
    std::swap(createtime_, other->createtime_);
    std::swap(logintime_, other->logintime_);
    std::swap(logouttime_, other->logouttime_);
    std::swap(enter_scene_id_, other->enter_scene_id_);
    std::swap(enter_map_id_, other->enter_map_id_);
    std::swap(enterposx_, other->enterposx_);
    std::swap(enterposy_, other->enterposy_);
    std::swap(enterposz_, other->enterposz_);
    std::swap(lastsceneid_, other->lastsceneid_);
    std::swap(lastmapid_, other->lastmapid_);
    std::swap(lastposx_, other->lastposx_);
    std::swap(lastposy_, other->lastposy_);
    std::swap(lastposz_, other->lastposz_);
    std::swap(facade_, other->facade_);
    std::swap(vip_level_, other->vip_level_);
    std::swap(state_, other->state_);
    std::swap(hanguptime_, other->hanguptime_);
    std::swap(relive_, other->relive_);
    std::swap(gold_, other->gold_);
    std::swap(dia_, other->dia_);
    std::swap(bdia_, other->bdia_);
    std::swap(magic_, other->magic_);
    std::swap(prestige_, other->prestige_);
    std::swap(contri_, other->contri_);
    std::swap(arenacoin_, other->arenacoin_);
    std::swap(godevil_exp_, other->godevil_exp_);
    std::swap(godevil_level_, other->godevil_level_);
    std::swap(login_day_, other->login_day_);
    std::swap(login_day_time_, other->login_day_time_);
    std::swap(best_aq_, other->best_aq_);
    std::swap(best_lj_, other->best_lj_);
    std::swap(day_prestige_, other->day_prestige_);
    std::swap(prestige_time_, other->prestige_time_);
    std::swap(pt_stage_, other->pt_stage_);
    std::swap(guide_, other->guide_);
    std::swap(battlepass_xiance_, other->battlepass_xiance_);
    std::swap(battlepass_baoding_, other->battlepass_baoding_);
    std::swap(findtreasure_shengfu_, other->findtreasure_shengfu_);
    std::swap(findtreasure_battlesoul_, other->findtreasure_battlesoul_);
    std::swap(holybeast_build_, other->holybeast_build_);
    std::swap(magic_sum_, other->magic_sum_);
    std::swap(subpack_type_, other->subpack_type_);
    std::swap(subpack_fetch_, other->subpack_fetch_);
    std::swap(hunling_, other->hunling_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBBaseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBBaseData_descriptor_;
  metadata.reflection = RoleDBBaseData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagItemsDBData::kDataFieldNumber;
const int BagItemsDBData::kOffsetFieldNumber;
#endif  // !_MSC_VER

BagItemsDBData::BagItemsDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagItemsDBData::InitAsDefaultInstance() {
}

BagItemsDBData::BagItemsDBData(const BagItemsDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagItemsDBData::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagItemsDBData::~BagItemsDBData() {
  SharedDtor();
}

void BagItemsDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagItemsDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagItemsDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagItemsDBData_descriptor_;
}

const BagItemsDBData& BagItemsDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

BagItemsDBData* BagItemsDBData::default_instance_ = NULL;

BagItemsDBData* BagItemsDBData::New() const {
  return new BagItemsDBData;
}

void BagItemsDBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    offset_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagItemsDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ItemProtoInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagItemsDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ItemProtoInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagItemsDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ItemProtoInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagItemsDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .proto_ff.ItemProtoInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagItemsDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagItemsDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagItemsDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagItemsDBData::MergeFrom(const BagItemsDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagItemsDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagItemsDBData::CopyFrom(const BagItemsDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagItemsDBData::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void BagItemsDBData::Swap(BagItemsDBData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagItemsDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagItemsDBData_descriptor_;
  metadata.reflection = BagItemsDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BagDBSimpleData::kPackageTypeFieldNumber;
const int BagDBSimpleData::kExpandNumFieldNumber;
#endif  // !_MSC_VER

BagDBSimpleData::BagDBSimpleData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BagDBSimpleData::InitAsDefaultInstance() {
}

BagDBSimpleData::BagDBSimpleData(const BagDBSimpleData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BagDBSimpleData::SharedCtor() {
  _cached_size_ = 0;
  package_type_ = 0u;
  expand_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BagDBSimpleData::~BagDBSimpleData() {
  SharedDtor();
}

void BagDBSimpleData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BagDBSimpleData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BagDBSimpleData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BagDBSimpleData_descriptor_;
}

const BagDBSimpleData& BagDBSimpleData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

BagDBSimpleData* BagDBSimpleData::default_instance_ = NULL;

BagDBSimpleData* BagDBSimpleData::New() const {
  return new BagDBSimpleData;
}

void BagDBSimpleData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    package_type_ = 0u;
    expand_num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BagDBSimpleData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 package_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &package_type_)));
          set_has_package_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expand_num;
        break;
      }

      // optional uint32 expand_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expand_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &expand_num_)));
          set_has_expand_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BagDBSimpleData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 package_type = 1;
  if (has_package_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->package_type(), output);
  }

  // optional uint32 expand_num = 2;
  if (has_expand_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->expand_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BagDBSimpleData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 package_type = 1;
  if (has_package_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->package_type(), target);
  }

  // optional uint32 expand_num = 2;
  if (has_expand_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->expand_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BagDBSimpleData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 package_type = 1;
    if (has_package_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->package_type());
    }

    // optional uint32 expand_num = 2;
    if (has_expand_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->expand_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BagDBSimpleData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BagDBSimpleData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BagDBSimpleData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BagDBSimpleData::MergeFrom(const BagDBSimpleData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package_type()) {
      set_package_type(from.package_type());
    }
    if (from.has_expand_num()) {
      set_expand_num(from.expand_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BagDBSimpleData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BagDBSimpleData::CopyFrom(const BagDBSimpleData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BagDBSimpleData::IsInitialized() const {

  return true;
}

void BagDBSimpleData::Swap(BagDBSimpleData* other) {
  if (other != this) {
    std::swap(package_type_, other->package_type_);
    std::swap(expand_num_, other->expand_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BagDBSimpleData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BagDBSimpleData_descriptor_;
  metadata.reflection = BagDBSimpleData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBUnitBagData::kTableNameFieldNumber;
const int RoleDBUnitBagData::kSimpleFieldNumber;
const int RoleDBUnitBagData::kPartsFieldNumber;
#endif  // !_MSC_VER

RoleDBUnitBagData::RoleDBUnitBagData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBUnitBagData::InitAsDefaultInstance() {
  simple_ = const_cast< ::proto_ff::BagDBSimpleData*>(&::proto_ff::BagDBSimpleData::default_instance());
}

RoleDBUnitBagData::RoleDBUnitBagData(const RoleDBUnitBagData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBUnitBagData::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBUnitBagData::~RoleDBUnitBagData() {
  SharedDtor();
}

void RoleDBUnitBagData::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
    delete simple_;
  }
}

void RoleDBUnitBagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBUnitBagData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBUnitBagData_descriptor_;
}

const RoleDBUnitBagData& RoleDBUnitBagData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleDBUnitBagData* RoleDBUnitBagData::default_instance_ = NULL;

RoleDBUnitBagData* RoleDBUnitBagData::New() const {
  return new RoleDBUnitBagData;
}

void RoleDBUnitBagData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::BagDBSimpleData::Clear();
    }
  }
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBUnitBagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_simple;
        break;
      }

      // optional .proto_ff.BagDBSimpleData simple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        break;
      }

      // repeated .proto_ff.BagItemsDBData parts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBUnitBagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->table_name(), output);
  }

  // optional .proto_ff.BagDBSimpleData simple = 2;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple(), output);
  }

  // repeated .proto_ff.BagItemsDBData parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBUnitBagData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // optional .proto_ff.BagDBSimpleData simple = 2;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple(), target);
  }

  // repeated .proto_ff.BagItemsDBData parts = 3;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBUnitBagData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // optional .proto_ff.BagDBSimpleData simple = 2;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  // repeated .proto_ff.BagItemsDBData parts = 3;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBUnitBagData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBUnitBagData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBUnitBagData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBUnitBagData::MergeFrom(const RoleDBUnitBagData& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::BagDBSimpleData::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBUnitBagData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBUnitBagData::CopyFrom(const RoleDBUnitBagData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBUnitBagData::IsInitialized() const {

  for (int i = 0; i < parts_size(); i++) {
    if (!this->parts(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDBUnitBagData::Swap(RoleDBUnitBagData* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(simple_, other->simple_);
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBUnitBagData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBUnitBagData_descriptor_;
  metadata.reflection = RoleDBUnitBagData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBBagData::kBagsFieldNumber;
#endif  // !_MSC_VER

RoleDBBagData::RoleDBBagData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBBagData::InitAsDefaultInstance() {
}

RoleDBBagData::RoleDBBagData(const RoleDBBagData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBBagData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBBagData::~RoleDBBagData() {
  SharedDtor();
}

void RoleDBBagData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDBBagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBBagData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBBagData_descriptor_;
}

const RoleDBBagData& RoleDBBagData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleDBBagData* RoleDBBagData::default_instance_ = NULL;

RoleDBBagData* RoleDBBagData::New() const {
  return new RoleDBBagData;
}

void RoleDBBagData::Clear() {
  bags_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBBagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RoleDBUnitBagData bags = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bags()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_bags;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBBagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RoleDBUnitBagData bags = 1;
  for (int i = 0; i < this->bags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bags(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBBagData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RoleDBUnitBagData bags = 1;
  for (int i = 0; i < this->bags_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bags(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBBagData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RoleDBUnitBagData bags = 1;
  total_size += 1 * this->bags_size();
  for (int i = 0; i < this->bags_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bags(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBBagData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBBagData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBBagData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBBagData::MergeFrom(const RoleDBBagData& from) {
  GOOGLE_CHECK_NE(&from, this);
  bags_.MergeFrom(from.bags_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBBagData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBBagData::CopyFrom(const RoleDBBagData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBBagData::IsInitialized() const {

  for (int i = 0; i < bags_size(); i++) {
    if (!this->bags(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDBBagData::Swap(RoleDBBagData* other) {
  if (other != this) {
    bags_.Swap(&other->bags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBBagData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBBagData_descriptor_;
  metadata.reflection = RoleDBBagData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBEquipData::kInfosFieldNumber;
const int RoleDBEquipData::kLvAttrFieldNumber;
const int RoleDBEquipData::kStoveLevelFieldNumber;
const int RoleDBEquipData::kStoveExpFieldNumber;
#endif  // !_MSC_VER

RoleDBEquipData::RoleDBEquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBEquipData::InitAsDefaultInstance() {
}

RoleDBEquipData::RoleDBEquipData(const RoleDBEquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBEquipData::SharedCtor() {
  _cached_size_ = 0;
  stove_level_ = 0u;
  stove_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBEquipData::~RoleDBEquipData() {
  SharedDtor();
}

void RoleDBEquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDBEquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBEquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBEquipData_descriptor_;
}

const RoleDBEquipData& RoleDBEquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleDBEquipData* RoleDBEquipData::default_instance_ = NULL;

RoleDBEquipData* RoleDBEquipData::New() const {
  return new RoleDBEquipData;
}

void RoleDBEquipData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    stove_level_ = 0u;
    stove_exp_ = GOOGLE_ULONGLONG(0);
  }
  infos_.Clear();
  lv_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBEquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.EquipInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(18)) goto parse_lv_attr;
        break;
      }

      // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lv_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lv_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lv_attr;
        if (input->ExpectTag(24)) goto parse_stove_level;
        break;
      }

      // optional uint32 stove_level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stove_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stove_level_)));
          set_has_stove_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stove_exp;
        break;
      }

      // optional uint64 stove_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stove_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stove_exp_)));
          set_has_stove_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBEquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.EquipInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  for (int i = 0; i < this->lv_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lv_attr(i), output);
  }

  // optional uint32 stove_level = 3;
  if (has_stove_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stove_level(), output);
  }

  // optional uint64 stove_exp = 4;
  if (has_stove_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->stove_exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBEquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.EquipInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  for (int i = 0; i < this->lv_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lv_attr(i), target);
  }

  // optional uint32 stove_level = 3;
  if (has_stove_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stove_level(), target);
  }

  // optional uint64 stove_exp = 4;
  if (has_stove_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->stove_exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBEquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 stove_level = 3;
    if (has_stove_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stove_level());
    }

    // optional uint64 stove_exp = 4;
    if (has_stove_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stove_exp());
    }

  }
  // repeated .proto_ff.EquipInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated .proto_ff.EquipLvAttrInfo lv_attr = 2;
  total_size += 1 * this->lv_attr_size();
  for (int i = 0; i < this->lv_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lv_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBEquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBEquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBEquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBEquipData::MergeFrom(const RoleDBEquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  lv_attr_.MergeFrom(from.lv_attr_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_stove_level()) {
      set_stove_level(from.stove_level());
    }
    if (from.has_stove_exp()) {
      set_stove_exp(from.stove_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBEquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBEquipData::CopyFrom(const RoleDBEquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBEquipData::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDBEquipData::Swap(RoleDBEquipData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    lv_attr_.Swap(&other->lv_attr_);
    std::swap(stove_level_, other->stove_level_);
    std::swap(stove_exp_, other->stove_exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBEquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBEquipData_descriptor_;
  metadata.reflection = RoleDBEquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoleDBTaskData::RoleDBTaskData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBTaskData::InitAsDefaultInstance() {
}

RoleDBTaskData::RoleDBTaskData(const RoleDBTaskData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBTaskData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBTaskData::~RoleDBTaskData() {
  SharedDtor();
}

void RoleDBTaskData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleDBTaskData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBTaskData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBTaskData_descriptor_;
}

const RoleDBTaskData& RoleDBTaskData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleDBTaskData* RoleDBTaskData::default_instance_ = NULL;

RoleDBTaskData* RoleDBTaskData::New() const {
  return new RoleDBTaskData;
}

void RoleDBTaskData::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBTaskData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RoleDBTaskData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBTaskData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBTaskData::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBTaskData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBTaskData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBTaskData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBTaskData::MergeFrom(const RoleDBTaskData& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBTaskData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBTaskData::CopyFrom(const RoleDBTaskData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBTaskData::IsInitialized() const {

  return true;
}

void RoleDBTaskData::Swap(RoleDBTaskData* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBTaskData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBTaskData_descriptor_;
  metadata.reflection = RoleDBTaskData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowPartEntryDBInfo::kIdFieldNumber;
const int GrowPartEntryDBInfo::kLvFieldNumber;
const int GrowPartEntryDBInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

GrowPartEntryDBInfo::GrowPartEntryDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowPartEntryDBInfo::InitAsDefaultInstance() {
}

GrowPartEntryDBInfo::GrowPartEntryDBInfo(const GrowPartEntryDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowPartEntryDBInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowPartEntryDBInfo::~GrowPartEntryDBInfo() {
  SharedDtor();
}

void GrowPartEntryDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowPartEntryDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowPartEntryDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowPartEntryDBInfo_descriptor_;
}

const GrowPartEntryDBInfo& GrowPartEntryDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GrowPartEntryDBInfo* GrowPartEntryDBInfo::default_instance_ = NULL;

GrowPartEntryDBInfo* GrowPartEntryDBInfo::New() const {
  return new GrowPartEntryDBInfo;
}

void GrowPartEntryDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowPartEntryDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowPartEntryDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowPartEntryDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowPartEntryDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowPartEntryDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowPartEntryDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowPartEntryDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowPartEntryDBInfo::MergeFrom(const GrowPartEntryDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowPartEntryDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowPartEntryDBInfo::CopyFrom(const GrowPartEntryDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowPartEntryDBInfo::IsInitialized() const {

  return true;
}

void GrowPartEntryDBInfo::Swap(GrowPartEntryDBInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowPartEntryDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowPartEntryDBInfo_descriptor_;
  metadata.reflection = GrowPartEntryDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowPartDBData::kTypeFieldNumber;
const int GrowPartDBData::kEntrysFieldNumber;
const int GrowPartDBData::kCurIdFieldNumber;
#endif  // !_MSC_VER

GrowPartDBData::GrowPartDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowPartDBData::InitAsDefaultInstance() {
}

GrowPartDBData::GrowPartDBData(const GrowPartDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowPartDBData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  curid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowPartDBData::~GrowPartDBData() {
  SharedDtor();
}

void GrowPartDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowPartDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowPartDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowPartDBData_descriptor_;
}

const GrowPartDBData& GrowPartDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GrowPartDBData* GrowPartDBData::default_instance_ = NULL;

GrowPartDBData* GrowPartDBData::New() const {
  return new GrowPartDBData;
}

void GrowPartDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    curid_ = GOOGLE_LONGLONG(0);
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowPartDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectTag(24)) goto parse_curId;
        break;
      }

      // optional int64 curId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &curid_)));
          set_has_curid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowPartDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  // optional int64 curId = 3;
  if (has_curid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->curid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowPartDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  // optional int64 curId = 3;
  if (has_curid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->curid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowPartDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 curId = 3;
    if (has_curid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->curid());
    }

  }
  // repeated .proto_ff.GrowPartEntryDBInfo entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowPartDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowPartDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowPartDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowPartDBData::MergeFrom(const GrowPartDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_curid()) {
      set_curid(from.curid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowPartDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowPartDBData::CopyFrom(const GrowPartDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowPartDBData::IsInitialized() const {

  return true;
}

void GrowPartDBData::Swap(GrowPartDBData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    entrys_.Swap(&other->entrys_);
    std::swap(curid_, other->curid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowPartDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowPartDBData_descriptor_;
  metadata.reflection = GrowPartDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GrowDBData::kPartsFieldNumber;
#endif  // !_MSC_VER

GrowDBData::GrowDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GrowDBData::InitAsDefaultInstance() {
}

GrowDBData::GrowDBData(const GrowDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GrowDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GrowDBData::~GrowDBData() {
  SharedDtor();
}

void GrowDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GrowDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GrowDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GrowDBData_descriptor_;
}

const GrowDBData& GrowDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GrowDBData* GrowDBData::default_instance_ = NULL;

GrowDBData* GrowDBData::New() const {
  return new GrowDBData;
}

void GrowDBData::Clear() {
  parts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GrowDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GrowPartDBData parts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_parts;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GrowDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GrowPartDBData parts = 1;
  for (int i = 0; i < this->parts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->parts(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GrowDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GrowPartDBData parts = 1;
  for (int i = 0; i < this->parts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->parts(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GrowDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GrowPartDBData parts = 1;
  total_size += 1 * this->parts_size();
  for (int i = 0; i < this->parts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GrowDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GrowDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GrowDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GrowDBData::MergeFrom(const GrowDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  parts_.MergeFrom(from.parts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GrowDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GrowDBData::CopyFrom(const GrowDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GrowDBData::IsInitialized() const {

  return true;
}

void GrowDBData::Swap(GrowDBData* other) {
  if (other != this) {
    parts_.Swap(&other->parts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GrowDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GrowDBData_descriptor_;
  metadata.reflection = GrowDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayUseItemData::kInfoFieldNumber;
#endif  // !_MSC_VER

DayUseItemData::DayUseItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DayUseItemData::InitAsDefaultInstance() {
}

DayUseItemData::DayUseItemData(const DayUseItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DayUseItemData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayUseItemData::~DayUseItemData() {
  SharedDtor();
}

void DayUseItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayUseItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayUseItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayUseItemData_descriptor_;
}

const DayUseItemData& DayUseItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DayUseItemData* DayUseItemData::default_instance_ = NULL;

DayUseItemData* DayUseItemData::New() const {
  return new DayUseItemData;
}

void DayUseItemData::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayUseItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair64 info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DayUseItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair64 info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DayUseItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair64 info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DayUseItemData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair64 info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayUseItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayUseItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayUseItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayUseItemData::MergeFrom(const DayUseItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayUseItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayUseItemData::CopyFrom(const DayUseItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayUseItemData::IsInitialized() const {

  return true;
}

void DayUseItemData::Swap(DayUseItemData* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayUseItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayUseItemData_descriptor_;
  metadata.reflection = DayUseItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterArenaData::kChallengeTimesFieldNumber;
const int CharacterArenaData::kUpdateTimeFieldNumber;
const int CharacterArenaData::kHistoryRankIdFieldNumber;
const int CharacterArenaData::kBuyChallengeTimesFieldNumber;
const int CharacterArenaData::kResultFieldNumber;
const int CharacterArenaData::kChallRewardFieldNumber;
const int CharacterArenaData::kAllChallengeTimesFieldNumber;
const int CharacterArenaData::kRankIdFieldNumber;
#endif  // !_MSC_VER

CharacterArenaData::CharacterArenaData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterArenaData::InitAsDefaultInstance() {
}

CharacterArenaData::CharacterArenaData(const CharacterArenaData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterArenaData::SharedCtor() {
  _cached_size_ = 0;
  challengetimes_ = 0u;
  updatetime_ = GOOGLE_ULONGLONG(0);
  historyrankid_ = 20001u;
  buychallengetimes_ = 0u;
  allchallengetimes_ = 0;
  rank_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterArenaData::~CharacterArenaData() {
  SharedDtor();
}

void CharacterArenaData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterArenaData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterArenaData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterArenaData_descriptor_;
}

const CharacterArenaData& CharacterArenaData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

CharacterArenaData* CharacterArenaData::default_instance_ = NULL;

CharacterArenaData* CharacterArenaData::New() const {
  return new CharacterArenaData;
}

void CharacterArenaData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challengetimes_ = 0u;
    updatetime_ = GOOGLE_ULONGLONG(0);
    historyrankid_ = 20001u;
    buychallengetimes_ = 0u;
    allchallengetimes_ = 0;
    rank_id_ = 0;
  }
  result_.Clear();
  chall_reward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterArenaData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 challengeTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengetimes_)));
          set_has_challengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_updateTime;
        break;
      }

      // optional uint64 updateTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_historyRankId;
        break;
      }

      // optional uint32 historyRankId = 3 [default = 20001];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyRankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &historyrankid_)));
          set_has_historyrankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyChallengeTimes;
        break;
      }

      // optional uint32 buyChallengeTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyChallengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buychallengetimes_)));
          set_has_buychallengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_result;
        break;
      }

      // repeated .proto_ff.ArenaChallResult result = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_result;
        if (input->ExpectTag(58)) goto parse_chall_reward;
        break;
      }

      // repeated .proto_ff.ChallArenaReward chall_reward = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chall_reward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_chall_reward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_chall_reward;
        if (input->ExpectTag(64)) goto parse_allChallengeTimes;
        break;
      }

      // optional int32 allChallengeTimes = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allChallengeTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allchallengetimes_)));
          set_has_allchallengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rank_id;
        break;
      }

      // optional int32 rank_id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_id_)));
          set_has_rank_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterArenaData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 challengeTimes = 1;
  if (has_challengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->challengetimes(), output);
  }

  // optional uint64 updateTime = 2;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->updatetime(), output);
  }

  // optional uint32 historyRankId = 3 [default = 20001];
  if (has_historyrankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->historyrankid(), output);
  }

  // optional uint32 buyChallengeTimes = 4;
  if (has_buychallengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->buychallengetimes(), output);
  }

  // repeated .proto_ff.ArenaChallResult result = 5;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->result(i), output);
  }

  // repeated .proto_ff.ChallArenaReward chall_reward = 7;
  for (int i = 0; i < this->chall_reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->chall_reward(i), output);
  }

  // optional int32 allChallengeTimes = 8;
  if (has_allchallengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->allchallengetimes(), output);
  }

  // optional int32 rank_id = 9;
  if (has_rank_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->rank_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterArenaData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 challengeTimes = 1;
  if (has_challengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->challengetimes(), target);
  }

  // optional uint64 updateTime = 2;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->updatetime(), target);
  }

  // optional uint32 historyRankId = 3 [default = 20001];
  if (has_historyrankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->historyrankid(), target);
  }

  // optional uint32 buyChallengeTimes = 4;
  if (has_buychallengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->buychallengetimes(), target);
  }

  // repeated .proto_ff.ArenaChallResult result = 5;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->result(i), target);
  }

  // repeated .proto_ff.ChallArenaReward chall_reward = 7;
  for (int i = 0; i < this->chall_reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->chall_reward(i), target);
  }

  // optional int32 allChallengeTimes = 8;
  if (has_allchallengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->allchallengetimes(), target);
  }

  // optional int32 rank_id = 9;
  if (has_rank_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->rank_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterArenaData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 challengeTimes = 1;
    if (has_challengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengetimes());
    }

    // optional uint64 updateTime = 2;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->updatetime());
    }

    // optional uint32 historyRankId = 3 [default = 20001];
    if (has_historyrankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->historyrankid());
    }

    // optional uint32 buyChallengeTimes = 4;
    if (has_buychallengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buychallengetimes());
    }

    // optional int32 allChallengeTimes = 8;
    if (has_allchallengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allchallengetimes());
    }

    // optional int32 rank_id = 9;
    if (has_rank_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank_id());
    }

  }
  // repeated .proto_ff.ArenaChallResult result = 5;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  // repeated .proto_ff.ChallArenaReward chall_reward = 7;
  total_size += 1 * this->chall_reward_size();
  for (int i = 0; i < this->chall_reward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->chall_reward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterArenaData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterArenaData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterArenaData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterArenaData::MergeFrom(const CharacterArenaData& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  chall_reward_.MergeFrom(from.chall_reward_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengetimes()) {
      set_challengetimes(from.challengetimes());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_historyrankid()) {
      set_historyrankid(from.historyrankid());
    }
    if (from.has_buychallengetimes()) {
      set_buychallengetimes(from.buychallengetimes());
    }
    if (from.has_allchallengetimes()) {
      set_allchallengetimes(from.allchallengetimes());
    }
    if (from.has_rank_id()) {
      set_rank_id(from.rank_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterArenaData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterArenaData::CopyFrom(const CharacterArenaData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterArenaData::IsInitialized() const {

  return true;
}

void CharacterArenaData::Swap(CharacterArenaData* other) {
  if (other != this) {
    std::swap(challengetimes_, other->challengetimes_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(historyrankid_, other->historyrankid_);
    std::swap(buychallengetimes_, other->buychallengetimes_);
    result_.Swap(&other->result_);
    chall_reward_.Swap(&other->chall_reward_);
    std::swap(allchallengetimes_, other->allchallengetimes_);
    std::swap(rank_id_, other->rank_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterArenaData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterArenaData_descriptor_;
  metadata.reflection = CharacterArenaData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MiniDBData::kLastTimeFieldNumber;
const int MiniDBData::kUseItemFieldNumber;
const int MiniDBData::kArenaDataFieldNumber;
const int MiniDBData::kUseItemAddAttrFieldNumber;
#endif  // !_MSC_VER

MiniDBData::MiniDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MiniDBData::InitAsDefaultInstance() {
  useitem_ = const_cast< ::proto_ff::DayUseItemData*>(&::proto_ff::DayUseItemData::default_instance());
  arena_data_ = const_cast< ::proto_ff::CharacterArenaData*>(&::proto_ff::CharacterArenaData::default_instance());
}

MiniDBData::MiniDBData(const MiniDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MiniDBData::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_ULONGLONG(0);
  useitem_ = NULL;
  arena_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiniDBData::~MiniDBData() {
  SharedDtor();
}

void MiniDBData::SharedDtor() {
  if (this != default_instance_) {
    delete useitem_;
    delete arena_data_;
  }
}

void MiniDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiniDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiniDBData_descriptor_;
}

const MiniDBData& MiniDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MiniDBData* MiniDBData::default_instance_ = NULL;

MiniDBData* MiniDBData::New() const {
  return new MiniDBData;
}

void MiniDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lasttime_ = GOOGLE_ULONGLONG(0);
    if (has_useitem()) {
      if (useitem_ != NULL) useitem_->::proto_ff::DayUseItemData::Clear();
    }
    if (has_arena_data()) {
      if (arena_data_ != NULL) arena_data_->::proto_ff::CharacterArenaData::Clear();
    }
  }
  use_item_add_attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiniDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 lastTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_useItem;
        break;
      }

      // optional .proto_ff.DayUseItemData useItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_useItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_useitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_arena_data;
        break;
      }

      // optional .proto_ff.CharacterArenaData arena_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arena_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arena_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_use_item_add_attr;
        break;
      }

      // repeated .proto_ff.ComPair64 use_item_add_attr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_use_item_add_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_use_item_add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_use_item_add_attr;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MiniDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 lastTime = 1;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->lasttime(), output);
  }

  // optional .proto_ff.DayUseItemData useItem = 2;
  if (has_useitem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->useitem(), output);
  }

  // optional .proto_ff.CharacterArenaData arena_data = 3;
  if (has_arena_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->arena_data(), output);
  }

  // repeated .proto_ff.ComPair64 use_item_add_attr = 4;
  for (int i = 0; i < this->use_item_add_attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->use_item_add_attr(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MiniDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 lastTime = 1;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->lasttime(), target);
  }

  // optional .proto_ff.DayUseItemData useItem = 2;
  if (has_useitem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->useitem(), target);
  }

  // optional .proto_ff.CharacterArenaData arena_data = 3;
  if (has_arena_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->arena_data(), target);
  }

  // repeated .proto_ff.ComPair64 use_item_add_attr = 4;
  for (int i = 0; i < this->use_item_add_attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->use_item_add_attr(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MiniDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 lastTime = 1;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

    // optional .proto_ff.DayUseItemData useItem = 2;
    if (has_useitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->useitem());
    }

    // optional .proto_ff.CharacterArenaData arena_data = 3;
    if (has_arena_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arena_data());
    }

  }
  // repeated .proto_ff.ComPair64 use_item_add_attr = 4;
  total_size += 1 * this->use_item_add_attr_size();
  for (int i = 0; i < this->use_item_add_attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->use_item_add_attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiniDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiniDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiniDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiniDBData::MergeFrom(const MiniDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  use_item_add_attr_.MergeFrom(from.use_item_add_attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_useitem()) {
      mutable_useitem()->::proto_ff::DayUseItemData::MergeFrom(from.useitem());
    }
    if (from.has_arena_data()) {
      mutable_arena_data()->::proto_ff::CharacterArenaData::MergeFrom(from.arena_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiniDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiniDBData::CopyFrom(const MiniDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniDBData::IsInitialized() const {

  return true;
}

void MiniDBData::Swap(MiniDBData* other) {
  if (other != this) {
    std::swap(lasttime_, other->lasttime_);
    std::swap(useitem_, other->useitem_);
    std::swap(arena_data_, other->arena_data_);
    use_item_add_attr_.Swap(&other->use_item_add_attr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiniDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiniDBData_descriptor_;
  metadata.reflection = MiniDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeDataInfo::kFacadeTypeFieldNumber;
const int FacadeDataInfo::kFacadeIdFieldNumber;
const int FacadeDataInfo::kFacadeLevFieldNumber;
const int FacadeDataInfo::kFacadeExpFieldNumber;
const int FacadeDataInfo::kUseSoulItemFieldNumber;
const int FacadeDataInfo::kUseFacadeFieldNumber;
const int FacadeDataInfo::kEquipFantasyIdFieldNumber;
const int FacadeDataInfo::kFantasyMapFieldNumber;
const int FacadeDataInfo::kFragmentMapFieldNumber;
const int FacadeDataInfo::kSkillDataFieldNumber;
const int FacadeDataInfo::kSoulDataFieldNumber;
#endif  // !_MSC_VER

FacadeDataInfo::FacadeDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeDataInfo::InitAsDefaultInstance() {
  soul_data_ = const_cast< ::proto_ff::FacadeSoulData*>(&::proto_ff::FacadeSoulData::default_instance());
}

FacadeDataInfo::FacadeDataInfo(const FacadeDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeDataInfo::SharedCtor() {
  _cached_size_ = 0;
  facade_type_ = 0u;
  facade_id_ = GOOGLE_ULONGLONG(0);
  facade_lev_ = 0u;
  facade_exp_ = GOOGLE_ULONGLONG(0);
  use_soul_item_ = false;
  use_facade_ = false;
  equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  soul_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeDataInfo::~FacadeDataInfo() {
  SharedDtor();
}

void FacadeDataInfo::SharedDtor() {
  if (this != default_instance_) {
    delete soul_data_;
  }
}

void FacadeDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeDataInfo_descriptor_;
}

const FacadeDataInfo& FacadeDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FacadeDataInfo* FacadeDataInfo::default_instance_ = NULL;

FacadeDataInfo* FacadeDataInfo::New() const {
  return new FacadeDataInfo;
}

void FacadeDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    facade_type_ = 0u;
    facade_id_ = GOOGLE_ULONGLONG(0);
    facade_lev_ = 0u;
    facade_exp_ = GOOGLE_ULONGLONG(0);
    use_soul_item_ = false;
    use_facade_ = false;
    equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (has_soul_data()) {
      if (soul_data_ != NULL) soul_data_->::proto_ff::FacadeSoulData::Clear();
    }
  }
  fantasy_map_.Clear();
  fragment_map_.Clear();
  skill_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 facade_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_type_)));
          set_has_facade_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_facade_id;
        break;
      }

      // optional uint64 facade_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facade_id_)));
          set_has_facade_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_facade_lev;
        break;
      }

      // optional uint32 facade_lev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &facade_lev_)));
          set_has_facade_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_facade_exp;
        break;
      }

      // optional uint64 facade_exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facade_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &facade_exp_)));
          set_has_facade_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_use_soul_item;
        break;
      }

      // optional bool use_soul_item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_soul_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_soul_item_)));
          set_has_use_soul_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_use_facade;
        break;
      }

      // optional bool use_facade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_facade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_facade_)));
          set_has_use_facade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_equip_fantasy_id;
        break;
      }

      // optional uint64 equip_fantasy_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_fantasy_id_)));
          set_has_equip_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fantasy_map;
        break;
      }

      // repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fantasy_map;
        if (input->ExpectTag(74)) goto parse_fragment_map;
        break;
      }

      // repeated .proto_ff.FacadeFragmentData fragment_map = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragment_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fragment_map;
        if (input->ExpectTag(82)) goto parse_skill_data;
        break;
      }

      // repeated .proto_ff.FacadeSkillData skill_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_skill_data;
        if (input->ExpectTag(90)) goto parse_soul_data;
        break;
      }

      // optional .proto_ff.FacadeSoulData soul_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soul_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soul_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->facade_type(), output);
  }

  // optional uint64 facade_id = 2;
  if (has_facade_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->facade_id(), output);
  }

  // optional uint32 facade_lev = 3;
  if (has_facade_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->facade_lev(), output);
  }

  // optional uint64 facade_exp = 4;
  if (has_facade_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->facade_exp(), output);
  }

  // optional bool use_soul_item = 5;
  if (has_use_soul_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->use_soul_item(), output);
  }

  // optional bool use_facade = 6;
  if (has_use_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->use_facade(), output);
  }

  // optional uint64 equip_fantasy_id = 7;
  if (has_equip_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->equip_fantasy_id(), output);
  }

  // repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fantasy_map(i), output);
  }

  // repeated .proto_ff.FacadeFragmentData fragment_map = 9;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fragment_map(i), output);
  }

  // repeated .proto_ff.FacadeSkillData skill_data = 10;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->skill_data(i), output);
  }

  // optional .proto_ff.FacadeSoulData soul_data = 11;
  if (has_soul_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->soul_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 facade_type = 1;
  if (has_facade_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->facade_type(), target);
  }

  // optional uint64 facade_id = 2;
  if (has_facade_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->facade_id(), target);
  }

  // optional uint32 facade_lev = 3;
  if (has_facade_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->facade_lev(), target);
  }

  // optional uint64 facade_exp = 4;
  if (has_facade_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->facade_exp(), target);
  }

  // optional bool use_soul_item = 5;
  if (has_use_soul_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->use_soul_item(), target);
  }

  // optional bool use_facade = 6;
  if (has_use_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->use_facade(), target);
  }

  // optional uint64 equip_fantasy_id = 7;
  if (has_equip_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->equip_fantasy_id(), target);
  }

  // repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fantasy_map(i), target);
  }

  // repeated .proto_ff.FacadeFragmentData fragment_map = 9;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->fragment_map(i), target);
  }

  // repeated .proto_ff.FacadeSkillData skill_data = 10;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->skill_data(i), target);
  }

  // optional .proto_ff.FacadeSoulData soul_data = 11;
  if (has_soul_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->soul_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 facade_type = 1;
    if (has_facade_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_type());
    }

    // optional uint64 facade_id = 2;
    if (has_facade_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facade_id());
    }

    // optional uint32 facade_lev = 3;
    if (has_facade_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->facade_lev());
    }

    // optional uint64 facade_exp = 4;
    if (has_facade_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->facade_exp());
    }

    // optional bool use_soul_item = 5;
    if (has_use_soul_item()) {
      total_size += 1 + 1;
    }

    // optional bool use_facade = 6;
    if (has_use_facade()) {
      total_size += 1 + 1;
    }

    // optional uint64 equip_fantasy_id = 7;
    if (has_equip_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_fantasy_id());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional .proto_ff.FacadeSoulData soul_data = 11;
    if (has_soul_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soul_data());
    }

  }
  // repeated .proto_ff.FacadeFantasyData fantasy_map = 8;
  total_size += 1 * this->fantasy_map_size();
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_map(i));
  }

  // repeated .proto_ff.FacadeFragmentData fragment_map = 9;
  total_size += 1 * this->fragment_map_size();
  for (int i = 0; i < this->fragment_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment_map(i));
  }

  // repeated .proto_ff.FacadeSkillData skill_data = 10;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeDataInfo::MergeFrom(const FacadeDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasy_map_.MergeFrom(from.fantasy_map_);
  fragment_map_.MergeFrom(from.fragment_map_);
  skill_data_.MergeFrom(from.skill_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_facade_type()) {
      set_facade_type(from.facade_type());
    }
    if (from.has_facade_id()) {
      set_facade_id(from.facade_id());
    }
    if (from.has_facade_lev()) {
      set_facade_lev(from.facade_lev());
    }
    if (from.has_facade_exp()) {
      set_facade_exp(from.facade_exp());
    }
    if (from.has_use_soul_item()) {
      set_use_soul_item(from.use_soul_item());
    }
    if (from.has_use_facade()) {
      set_use_facade(from.use_facade());
    }
    if (from.has_equip_fantasy_id()) {
      set_equip_fantasy_id(from.equip_fantasy_id());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_soul_data()) {
      mutable_soul_data()->::proto_ff::FacadeSoulData::MergeFrom(from.soul_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeDataInfo::CopyFrom(const FacadeDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeDataInfo::IsInitialized() const {

  return true;
}

void FacadeDataInfo::Swap(FacadeDataInfo* other) {
  if (other != this) {
    std::swap(facade_type_, other->facade_type_);
    std::swap(facade_id_, other->facade_id_);
    std::swap(facade_lev_, other->facade_lev_);
    std::swap(facade_exp_, other->facade_exp_);
    std::swap(use_soul_item_, other->use_soul_item_);
    std::swap(use_facade_, other->use_facade_);
    std::swap(equip_fantasy_id_, other->equip_fantasy_id_);
    fantasy_map_.Swap(&other->fantasy_map_);
    fragment_map_.Swap(&other->fragment_map_);
    skill_data_.Swap(&other->skill_data_);
    std::swap(soul_data_, other->soul_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeDataInfo_descriptor_;
  metadata.reflection = FacadeDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MountDataInfo::kMountIdFieldNumber;
const int MountDataInfo::kMountLevFieldNumber;
const int MountDataInfo::kMountExpFieldNumber;
const int MountDataInfo::kUseFacadeFieldNumber;
const int MountDataInfo::kEquipFantasyIdFieldNumber;
const int MountDataInfo::kFantasyMapFieldNumber;
const int MountDataInfo::kFragmentMapFieldNumber;
const int MountDataInfo::kSkillDataFieldNumber;
const int MountDataInfo::kKunDataFieldNumber;
const int MountDataInfo::kBloodDataFieldNumber;
const int MountDataInfo::kBabySlotDataFieldNumber;
const int MountDataInfo::kRideStateFieldNumber;
const int MountDataInfo::kMountModelIdFieldNumber;
const int MountDataInfo::kLastMountModelIdFieldNumber;
const int MountDataInfo::kKunChangeDataFieldNumber;
const int MountDataInfo::kEquipKunIdFieldNumber;
const int MountDataInfo::kEquipKunChangeIdFieldNumber;
const int MountDataInfo::kFairyLandFieldNumber;
const int MountDataInfo::kFairySlotFieldNumber;
const int MountDataInfo::kCurFairyLandFieldNumber;
#endif  // !_MSC_VER

MountDataInfo::MountDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MountDataInfo::InitAsDefaultInstance() {
}

MountDataInfo::MountDataInfo(const MountDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MountDataInfo::SharedCtor() {
  _cached_size_ = 0;
  mount_id_ = GOOGLE_ULONGLONG(0);
  mount_lev_ = 0u;
  mount_exp_ = GOOGLE_ULONGLONG(0);
  use_facade_ = false;
  equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  ride_state_ = 0u;
  mount_model_id_ = GOOGLE_ULONGLONG(0);
  last_mount_model_id_ = GOOGLE_ULONGLONG(0);
  equip_kun_id_ = GOOGLE_ULONGLONG(0);
  equip_kun_change_id_ = GOOGLE_ULONGLONG(0);
  cur_fairy_land_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MountDataInfo::~MountDataInfo() {
  SharedDtor();
}

void MountDataInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MountDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MountDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MountDataInfo_descriptor_;
}

const MountDataInfo& MountDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MountDataInfo* MountDataInfo::default_instance_ = NULL;

MountDataInfo* MountDataInfo::New() const {
  return new MountDataInfo;
}

void MountDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mount_id_ = GOOGLE_ULONGLONG(0);
    mount_lev_ = 0u;
    mount_exp_ = GOOGLE_ULONGLONG(0);
    use_facade_ = false;
    equip_fantasy_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    ride_state_ = 0u;
    mount_model_id_ = GOOGLE_ULONGLONG(0);
    last_mount_model_id_ = GOOGLE_ULONGLONG(0);
    equip_kun_id_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    equip_kun_change_id_ = GOOGLE_ULONGLONG(0);
    cur_fairy_land_ = GOOGLE_ULONGLONG(0);
  }
  fantasy_map_.Clear();
  fragment_map_.Clear();
  skill_data_.Clear();
  kun_data_.Clear();
  blood_data_.Clear();
  baby_slot_data_.Clear();
  kun_change_data_.Clear();
  fairy_land_.Clear();
  fairy_slot_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MountDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 mount_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mount_id_)));
          set_has_mount_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mount_lev;
        break;
      }

      // optional uint32 mount_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mount_lev_)));
          set_has_mount_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mount_exp;
        break;
      }

      // optional uint64 mount_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mount_exp_)));
          set_has_mount_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_facade;
        break;
      }

      // optional bool use_facade = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_facade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_facade_)));
          set_has_use_facade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_equip_fantasy_id;
        break;
      }

      // optional uint64 equip_fantasy_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_fantasy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_fantasy_id_)));
          set_has_equip_fantasy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fantasy_map;
        break;
      }

      // repeated .proto_ff.MountFantasyData fantasy_map = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_fantasy_map;
        if (input->ExpectTag(58)) goto parse_fragment_map;
        break;
      }

      // repeated .proto_ff.MountFragmentData fragment_map = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragment_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fragment_map;
        if (input->ExpectTag(66)) goto parse_skill_data;
        break;
      }

      // repeated .proto_ff.MountSkillData skill_data = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_skill_data;
        if (input->ExpectTag(74)) goto parse_kun_data;
        break;
      }

      // repeated .proto_ff.MountKunData kun_data = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kun_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kun_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_kun_data;
        if (input->ExpectTag(82)) goto parse_blood_data;
        break;
      }

      // repeated .proto_ff.MountBloodData blood_data = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blood_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blood_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_blood_data;
        if (input->ExpectTag(90)) goto parse_baby_slot_data;
        break;
      }

      // repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baby_slot_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_baby_slot_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_baby_slot_data;
        if (input->ExpectTag(96)) goto parse_ride_state;
        break;
      }

      // optional uint32 ride_state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ride_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ride_state_)));
          set_has_ride_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mount_model_id;
        break;
      }

      // optional uint64 mount_model_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mount_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mount_model_id_)));
          set_has_mount_model_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_last_mount_model_id;
        break;
      }

      // optional uint64 last_mount_model_id = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_mount_model_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_mount_model_id_)));
          set_has_last_mount_model_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_kun_change_data;
        break;
      }

      // repeated .proto_ff.MountKunChangeData kun_change_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kun_change_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kun_change_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_kun_change_data;
        if (input->ExpectTag(128)) goto parse_equip_kun_id;
        break;
      }

      // optional uint64 equip_kun_id = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_kun_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_kun_id_)));
          set_has_equip_kun_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_equip_kun_change_id;
        break;
      }

      // optional uint64 equip_kun_change_id = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip_kun_change_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &equip_kun_change_id_)));
          set_has_equip_kun_change_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_fairy_land;
        break;
      }

      // repeated .proto_ff.MountFairyLand fairy_land = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fairy_land:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fairy_land()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_fairy_land;
        if (input->ExpectTag(154)) goto parse_fairy_slot;
        break;
      }

      // repeated .proto_ff.MountFairySlot fairy_slot = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fairy_slot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fairy_slot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_fairy_slot;
        if (input->ExpectTag(160)) goto parse_cur_fairy_land;
        break;
      }

      // optional uint64 cur_fairy_land = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_fairy_land:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_fairy_land_)));
          set_has_cur_fairy_land();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MountDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 mount_id = 1;
  if (has_mount_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->mount_id(), output);
  }

  // optional uint32 mount_lev = 2;
  if (has_mount_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mount_lev(), output);
  }

  // optional uint64 mount_exp = 3;
  if (has_mount_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mount_exp(), output);
  }

  // optional bool use_facade = 4;
  if (has_use_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->use_facade(), output);
  }

  // optional uint64 equip_fantasy_id = 5;
  if (has_equip_fantasy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->equip_fantasy_id(), output);
  }

  // repeated .proto_ff.MountFantasyData fantasy_map = 6;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->fantasy_map(i), output);
  }

  // repeated .proto_ff.MountFragmentData fragment_map = 7;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fragment_map(i), output);
  }

  // repeated .proto_ff.MountSkillData skill_data = 8;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->skill_data(i), output);
  }

  // repeated .proto_ff.MountKunData kun_data = 9;
  for (int i = 0; i < this->kun_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->kun_data(i), output);
  }

  // repeated .proto_ff.MountBloodData blood_data = 10;
  for (int i = 0; i < this->blood_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->blood_data(i), output);
  }

  // repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
  for (int i = 0; i < this->baby_slot_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->baby_slot_data(i), output);
  }

  // optional uint32 ride_state = 12;
  if (has_ride_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->ride_state(), output);
  }

  // optional uint64 mount_model_id = 13;
  if (has_mount_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->mount_model_id(), output);
  }

  // optional uint64 last_mount_model_id = 14;
  if (has_last_mount_model_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->last_mount_model_id(), output);
  }

  // repeated .proto_ff.MountKunChangeData kun_change_data = 15;
  for (int i = 0; i < this->kun_change_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->kun_change_data(i), output);
  }

  // optional uint64 equip_kun_id = 16;
  if (has_equip_kun_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->equip_kun_id(), output);
  }

  // optional uint64 equip_kun_change_id = 17;
  if (has_equip_kun_change_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->equip_kun_change_id(), output);
  }

  // repeated .proto_ff.MountFairyLand fairy_land = 18;
  for (int i = 0; i < this->fairy_land_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->fairy_land(i), output);
  }

  // repeated .proto_ff.MountFairySlot fairy_slot = 19;
  for (int i = 0; i < this->fairy_slot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->fairy_slot(i), output);
  }

  // optional uint64 cur_fairy_land = 20;
  if (has_cur_fairy_land()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->cur_fairy_land(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MountDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 mount_id = 1;
  if (has_mount_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->mount_id(), target);
  }

  // optional uint32 mount_lev = 2;
  if (has_mount_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mount_lev(), target);
  }

  // optional uint64 mount_exp = 3;
  if (has_mount_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mount_exp(), target);
  }

  // optional bool use_facade = 4;
  if (has_use_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->use_facade(), target);
  }

  // optional uint64 equip_fantasy_id = 5;
  if (has_equip_fantasy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->equip_fantasy_id(), target);
  }

  // repeated .proto_ff.MountFantasyData fantasy_map = 6;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->fantasy_map(i), target);
  }

  // repeated .proto_ff.MountFragmentData fragment_map = 7;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fragment_map(i), target);
  }

  // repeated .proto_ff.MountSkillData skill_data = 8;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->skill_data(i), target);
  }

  // repeated .proto_ff.MountKunData kun_data = 9;
  for (int i = 0; i < this->kun_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->kun_data(i), target);
  }

  // repeated .proto_ff.MountBloodData blood_data = 10;
  for (int i = 0; i < this->blood_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->blood_data(i), target);
  }

  // repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
  for (int i = 0; i < this->baby_slot_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->baby_slot_data(i), target);
  }

  // optional uint32 ride_state = 12;
  if (has_ride_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->ride_state(), target);
  }

  // optional uint64 mount_model_id = 13;
  if (has_mount_model_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->mount_model_id(), target);
  }

  // optional uint64 last_mount_model_id = 14;
  if (has_last_mount_model_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->last_mount_model_id(), target);
  }

  // repeated .proto_ff.MountKunChangeData kun_change_data = 15;
  for (int i = 0; i < this->kun_change_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->kun_change_data(i), target);
  }

  // optional uint64 equip_kun_id = 16;
  if (has_equip_kun_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->equip_kun_id(), target);
  }

  // optional uint64 equip_kun_change_id = 17;
  if (has_equip_kun_change_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->equip_kun_change_id(), target);
  }

  // repeated .proto_ff.MountFairyLand fairy_land = 18;
  for (int i = 0; i < this->fairy_land_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->fairy_land(i), target);
  }

  // repeated .proto_ff.MountFairySlot fairy_slot = 19;
  for (int i = 0; i < this->fairy_slot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->fairy_slot(i), target);
  }

  // optional uint64 cur_fairy_land = 20;
  if (has_cur_fairy_land()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->cur_fairy_land(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MountDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 mount_id = 1;
    if (has_mount_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mount_id());
    }

    // optional uint32 mount_lev = 2;
    if (has_mount_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mount_lev());
    }

    // optional uint64 mount_exp = 3;
    if (has_mount_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mount_exp());
    }

    // optional bool use_facade = 4;
    if (has_use_facade()) {
      total_size += 1 + 1;
    }

    // optional uint64 equip_fantasy_id = 5;
    if (has_equip_fantasy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_fantasy_id());
    }

  }
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional uint32 ride_state = 12;
    if (has_ride_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ride_state());
    }

    // optional uint64 mount_model_id = 13;
    if (has_mount_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mount_model_id());
    }

    // optional uint64 last_mount_model_id = 14;
    if (has_last_mount_model_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_mount_model_id());
    }

    // optional uint64 equip_kun_id = 16;
    if (has_equip_kun_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_kun_id());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint64 equip_kun_change_id = 17;
    if (has_equip_kun_change_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->equip_kun_change_id());
    }

    // optional uint64 cur_fairy_land = 20;
    if (has_cur_fairy_land()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_fairy_land());
    }

  }
  // repeated .proto_ff.MountFantasyData fantasy_map = 6;
  total_size += 1 * this->fantasy_map_size();
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_map(i));
  }

  // repeated .proto_ff.MountFragmentData fragment_map = 7;
  total_size += 1 * this->fragment_map_size();
  for (int i = 0; i < this->fragment_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment_map(i));
  }

  // repeated .proto_ff.MountSkillData skill_data = 8;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .proto_ff.MountKunData kun_data = 9;
  total_size += 1 * this->kun_data_size();
  for (int i = 0; i < this->kun_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kun_data(i));
  }

  // repeated .proto_ff.MountBloodData blood_data = 10;
  total_size += 1 * this->blood_data_size();
  for (int i = 0; i < this->blood_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blood_data(i));
  }

  // repeated .proto_ff.MountBabySlotData baby_slot_data = 11;
  total_size += 1 * this->baby_slot_data_size();
  for (int i = 0; i < this->baby_slot_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->baby_slot_data(i));
  }

  // repeated .proto_ff.MountKunChangeData kun_change_data = 15;
  total_size += 1 * this->kun_change_data_size();
  for (int i = 0; i < this->kun_change_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kun_change_data(i));
  }

  // repeated .proto_ff.MountFairyLand fairy_land = 18;
  total_size += 2 * this->fairy_land_size();
  for (int i = 0; i < this->fairy_land_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fairy_land(i));
  }

  // repeated .proto_ff.MountFairySlot fairy_slot = 19;
  total_size += 2 * this->fairy_slot_size();
  for (int i = 0; i < this->fairy_slot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fairy_slot(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MountDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MountDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MountDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MountDataInfo::MergeFrom(const MountDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasy_map_.MergeFrom(from.fantasy_map_);
  fragment_map_.MergeFrom(from.fragment_map_);
  skill_data_.MergeFrom(from.skill_data_);
  kun_data_.MergeFrom(from.kun_data_);
  blood_data_.MergeFrom(from.blood_data_);
  baby_slot_data_.MergeFrom(from.baby_slot_data_);
  kun_change_data_.MergeFrom(from.kun_change_data_);
  fairy_land_.MergeFrom(from.fairy_land_);
  fairy_slot_.MergeFrom(from.fairy_slot_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mount_id()) {
      set_mount_id(from.mount_id());
    }
    if (from.has_mount_lev()) {
      set_mount_lev(from.mount_lev());
    }
    if (from.has_mount_exp()) {
      set_mount_exp(from.mount_exp());
    }
    if (from.has_use_facade()) {
      set_use_facade(from.use_facade());
    }
    if (from.has_equip_fantasy_id()) {
      set_equip_fantasy_id(from.equip_fantasy_id());
    }
  }
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_ride_state()) {
      set_ride_state(from.ride_state());
    }
    if (from.has_mount_model_id()) {
      set_mount_model_id(from.mount_model_id());
    }
    if (from.has_last_mount_model_id()) {
      set_last_mount_model_id(from.last_mount_model_id());
    }
    if (from.has_equip_kun_id()) {
      set_equip_kun_id(from.equip_kun_id());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_equip_kun_change_id()) {
      set_equip_kun_change_id(from.equip_kun_change_id());
    }
    if (from.has_cur_fairy_land()) {
      set_cur_fairy_land(from.cur_fairy_land());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MountDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MountDataInfo::CopyFrom(const MountDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MountDataInfo::IsInitialized() const {

  for (int i = 0; i < kun_data_size(); i++) {
    if (!this->kun_data(i).IsInitialized()) return false;
  }
  return true;
}

void MountDataInfo::Swap(MountDataInfo* other) {
  if (other != this) {
    std::swap(mount_id_, other->mount_id_);
    std::swap(mount_lev_, other->mount_lev_);
    std::swap(mount_exp_, other->mount_exp_);
    std::swap(use_facade_, other->use_facade_);
    std::swap(equip_fantasy_id_, other->equip_fantasy_id_);
    fantasy_map_.Swap(&other->fantasy_map_);
    fragment_map_.Swap(&other->fragment_map_);
    skill_data_.Swap(&other->skill_data_);
    kun_data_.Swap(&other->kun_data_);
    blood_data_.Swap(&other->blood_data_);
    baby_slot_data_.Swap(&other->baby_slot_data_);
    std::swap(ride_state_, other->ride_state_);
    std::swap(mount_model_id_, other->mount_model_id_);
    std::swap(last_mount_model_id_, other->last_mount_model_id_);
    kun_change_data_.Swap(&other->kun_change_data_);
    std::swap(equip_kun_id_, other->equip_kun_id_);
    std::swap(equip_kun_change_id_, other->equip_kun_change_id_);
    fairy_land_.Swap(&other->fairy_land_);
    fairy_slot_.Swap(&other->fairy_slot_);
    std::swap(cur_fairy_land_, other->cur_fairy_land_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MountDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MountDataInfo_descriptor_;
  metadata.reflection = MountDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeityDataInfo::kDeityIdFieldNumber;
const int DeityDataInfo::kDeityLevFieldNumber;
const int DeityDataInfo::kDeityExpFieldNumber;
const int DeityDataInfo::kFantasyMapFieldNumber;
const int DeityDataInfo::kFragmentMapFieldNumber;
const int DeityDataInfo::kSkillDataFieldNumber;
const int DeityDataInfo::kBattleDataFieldNumber;
#endif  // !_MSC_VER

DeityDataInfo::DeityDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeityDataInfo::InitAsDefaultInstance() {
}

DeityDataInfo::DeityDataInfo(const DeityDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeityDataInfo::SharedCtor() {
  _cached_size_ = 0;
  deity_id_ = GOOGLE_ULONGLONG(0);
  deity_lev_ = 0u;
  deity_exp_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeityDataInfo::~DeityDataInfo() {
  SharedDtor();
}

void DeityDataInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeityDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeityDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeityDataInfo_descriptor_;
}

const DeityDataInfo& DeityDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DeityDataInfo* DeityDataInfo::default_instance_ = NULL;

DeityDataInfo* DeityDataInfo::New() const {
  return new DeityDataInfo;
}

void DeityDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    deity_id_ = GOOGLE_ULONGLONG(0);
    deity_lev_ = 0u;
    deity_exp_ = GOOGLE_ULONGLONG(0);
  }
  fantasy_map_.Clear();
  fragment_map_.Clear();
  skill_data_.Clear();
  battle_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeityDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 deity_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deity_id_)));
          set_has_deity_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_deity_lev;
        break;
      }

      // optional uint32 deity_lev = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deity_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deity_lev_)));
          set_has_deity_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_deity_exp;
        break;
      }

      // optional uint64 deity_exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deity_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &deity_exp_)));
          set_has_deity_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasy_map;
        break;
      }

      // repeated .proto_ff.DeityFantasyData fantasy_map = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fantasy_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fantasy_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fantasy_map;
        if (input->ExpectTag(42)) goto parse_fragment_map;
        break;
      }

      // repeated .proto_ff.DeityFragmentData fragment_map = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fragment_map:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fragment_map()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fragment_map;
        if (input->ExpectTag(50)) goto parse_skill_data;
        break;
      }

      // repeated .proto_ff.DeitySkillData skill_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skill_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill_data;
        if (input->ExpectTag(58)) goto parse_battle_data;
        break;
      }

      // repeated .proto_ff.DeityBattleSlotData battle_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battle_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_battle_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_battle_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeityDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 deity_id = 1;
  if (has_deity_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->deity_id(), output);
  }

  // optional uint32 deity_lev = 2;
  if (has_deity_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deity_lev(), output);
  }

  // optional uint64 deity_exp = 3;
  if (has_deity_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->deity_exp(), output);
  }

  // repeated .proto_ff.DeityFantasyData fantasy_map = 4;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fantasy_map(i), output);
  }

  // repeated .proto_ff.DeityFragmentData fragment_map = 5;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fragment_map(i), output);
  }

  // repeated .proto_ff.DeitySkillData skill_data = 6;
  for (int i = 0; i < this->skill_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skill_data(i), output);
  }

  // repeated .proto_ff.DeityBattleSlotData battle_data = 7;
  for (int i = 0; i < this->battle_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->battle_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeityDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 deity_id = 1;
  if (has_deity_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->deity_id(), target);
  }

  // optional uint32 deity_lev = 2;
  if (has_deity_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deity_lev(), target);
  }

  // optional uint64 deity_exp = 3;
  if (has_deity_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->deity_exp(), target);
  }

  // repeated .proto_ff.DeityFantasyData fantasy_map = 4;
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fantasy_map(i), target);
  }

  // repeated .proto_ff.DeityFragmentData fragment_map = 5;
  for (int i = 0; i < this->fragment_map_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fragment_map(i), target);
  }

  // repeated .proto_ff.DeitySkillData skill_data = 6;
  for (int i = 0; i < this->skill_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skill_data(i), target);
  }

  // repeated .proto_ff.DeityBattleSlotData battle_data = 7;
  for (int i = 0; i < this->battle_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->battle_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeityDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 deity_id = 1;
    if (has_deity_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deity_id());
    }

    // optional uint32 deity_lev = 2;
    if (has_deity_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deity_lev());
    }

    // optional uint64 deity_exp = 3;
    if (has_deity_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->deity_exp());
    }

  }
  // repeated .proto_ff.DeityFantasyData fantasy_map = 4;
  total_size += 1 * this->fantasy_map_size();
  for (int i = 0; i < this->fantasy_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fantasy_map(i));
  }

  // repeated .proto_ff.DeityFragmentData fragment_map = 5;
  total_size += 1 * this->fragment_map_size();
  for (int i = 0; i < this->fragment_map_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fragment_map(i));
  }

  // repeated .proto_ff.DeitySkillData skill_data = 6;
  total_size += 1 * this->skill_data_size();
  for (int i = 0; i < this->skill_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skill_data(i));
  }

  // repeated .proto_ff.DeityBattleSlotData battle_data = 7;
  total_size += 1 * this->battle_data_size();
  for (int i = 0; i < this->battle_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->battle_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeityDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeityDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeityDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeityDataInfo::MergeFrom(const DeityDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  fantasy_map_.MergeFrom(from.fantasy_map_);
  fragment_map_.MergeFrom(from.fragment_map_);
  skill_data_.MergeFrom(from.skill_data_);
  battle_data_.MergeFrom(from.battle_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_deity_id()) {
      set_deity_id(from.deity_id());
    }
    if (from.has_deity_lev()) {
      set_deity_lev(from.deity_lev());
    }
    if (from.has_deity_exp()) {
      set_deity_exp(from.deity_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeityDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeityDataInfo::CopyFrom(const DeityDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeityDataInfo::IsInitialized() const {

  for (int i = 0; i < fantasy_map_size(); i++) {
    if (!this->fantasy_map(i).IsInitialized()) return false;
  }
  return true;
}

void DeityDataInfo::Swap(DeityDataInfo* other) {
  if (other != this) {
    std::swap(deity_id_, other->deity_id_);
    std::swap(deity_lev_, other->deity_lev_);
    std::swap(deity_exp_, other->deity_exp_);
    fantasy_map_.Swap(&other->fantasy_map_);
    fragment_map_.Swap(&other->fragment_map_);
    skill_data_.Swap(&other->skill_data_);
    battle_data_.Swap(&other->battle_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeityDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeityDataInfo_descriptor_;
  metadata.reflection = DeityDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FacadeDBData::kDataFieldNumber;
#endif  // !_MSC_VER

FacadeDBData::FacadeDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FacadeDBData::InitAsDefaultInstance() {
}

FacadeDBData::FacadeDBData(const FacadeDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FacadeDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FacadeDBData::~FacadeDBData() {
  SharedDtor();
}

void FacadeDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FacadeDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FacadeDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FacadeDBData_descriptor_;
}

const FacadeDBData& FacadeDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FacadeDBData* FacadeDBData::default_instance_ = NULL;

FacadeDBData* FacadeDBData::New() const {
  return new FacadeDBData;
}

void FacadeDBData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FacadeDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FacadeDataInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FacadeDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FacadeDataInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FacadeDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FacadeDataInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FacadeDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FacadeDataInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FacadeDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FacadeDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FacadeDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FacadeDBData::MergeFrom(const FacadeDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FacadeDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FacadeDBData::CopyFrom(const FacadeDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacadeDBData::IsInitialized() const {

  return true;
}

void FacadeDBData::Swap(FacadeDBData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FacadeDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FacadeDBData_descriptor_;
  metadata.reflection = FacadeDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBInfo::kSkillIdFieldNumber;
const int SkillDBInfo::kLevelFieldNumber;
const int SkillDBInfo::kWakeupFieldNumber;
const int SkillDBInfo::kUseMscFieldNumber;
#endif  // !_MSC_VER

SkillDBInfo::SkillDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBInfo::InitAsDefaultInstance() {
}

SkillDBInfo::SkillDBInfo(const SkillDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBInfo::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  wakeup_ = 0;
  use_msc_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBInfo::~SkillDBInfo() {
  SharedDtor();
}

void SkillDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBInfo_descriptor_;
}

const SkillDBInfo& SkillDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SkillDBInfo* SkillDBInfo::default_instance_ = NULL;

SkillDBInfo* SkillDBInfo::New() const {
  return new SkillDBInfo;
}

void SkillDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    level_ = 0;
    wakeup_ = 0;
    use_msc_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wakeup;
        break;
      }

      // optional int32 wakeup = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wakeup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wakeup_)));
          set_has_wakeup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_use_msc;
        break;
      }

      // optional int64 use_msc = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_msc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &use_msc_)));
          set_has_use_msc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 wakeup = 3;
  if (has_wakeup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wakeup(), output);
  }

  // optional int64 use_msc = 4;
  if (has_use_msc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->use_msc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 wakeup = 3;
  if (has_wakeup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wakeup(), target);
  }

  // optional int64 use_msc = 4;
  if (has_use_msc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->use_msc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 wakeup = 3;
    if (has_wakeup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wakeup());
    }

    // optional int64 use_msc = 4;
    if (has_use_msc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->use_msc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBInfo::MergeFrom(const SkillDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_wakeup()) {
      set_wakeup(from.wakeup());
    }
    if (from.has_use_msc()) {
      set_use_msc(from.use_msc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBInfo::CopyFrom(const SkillDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBInfo::IsInitialized() const {

  return true;
}

void SkillDBInfo::Swap(SkillDBInfo* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(level_, other->level_);
    std::swap(wakeup_, other->wakeup_);
    std::swap(use_msc_, other->use_msc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBInfo_descriptor_;
  metadata.reflection = SkillDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBPos::kSkillIdFieldNumber;
const int SkillDBPos::kPosFieldNumber;
const int SkillDBPos::kUseFieldNumber;
#endif  // !_MSC_VER

SkillDBPos::SkillDBPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBPos::InitAsDefaultInstance() {
}

SkillDBPos::SkillDBPos(const SkillDBPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBPos::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  pos_ = 0u;
  use_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBPos::~SkillDBPos() {
  SharedDtor();
}

void SkillDBPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBPos_descriptor_;
}

const SkillDBPos& SkillDBPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SkillDBPos* SkillDBPos::default_instance_ = NULL;

SkillDBPos* SkillDBPos::New() const {
  return new SkillDBPos;
}

void SkillDBPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    pos_ = 0u;
    use_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_use;
        break;
      }

      // optional int32 use = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_)));
          set_has_use();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional int32 use = 3;
  if (has_use()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->use(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional int32 use = 3;
  if (has_use()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->use(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional int32 use = 3;
    if (has_use()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBPos::MergeFrom(const SkillDBPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_use()) {
      set_use(from.use());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBPos::CopyFrom(const SkillDBPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBPos::IsInitialized() const {

  return true;
}

void SkillDBPos::Swap(SkillDBPos* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(pos_, other->pos_);
    std::swap(use_, other->use_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBPos_descriptor_;
  metadata.reflection = SkillDBPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBAdvPos::kPosFieldNumber;
const int SkillDBAdvPos::kAdvanceFieldNumber;
const int SkillDBAdvPos::kUnlockFieldNumber;
#endif  // !_MSC_VER

SkillDBAdvPos::SkillDBAdvPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBAdvPos::InitAsDefaultInstance() {
}

SkillDBAdvPos::SkillDBAdvPos(const SkillDBAdvPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBAdvPos::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0u;
  advance_ = 0u;
  unlock_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBAdvPos::~SkillDBAdvPos() {
  SharedDtor();
}

void SkillDBAdvPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBAdvPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBAdvPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBAdvPos_descriptor_;
}

const SkillDBAdvPos& SkillDBAdvPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SkillDBAdvPos* SkillDBAdvPos::default_instance_ = NULL;

SkillDBAdvPos* SkillDBAdvPos::New() const {
  return new SkillDBAdvPos;
}

void SkillDBAdvPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0u;
    advance_ = 0u;
    unlock_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBAdvPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_advance;
        break;
      }

      // optional uint32 advance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unlock;
        break;
      }

      // optional uint32 unlock = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlock_)));
          set_has_unlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBAdvPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pos(), output);
  }

  // optional uint32 advance = 2;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->advance(), output);
  }

  // optional uint32 unlock = 3;
  if (has_unlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->unlock(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBAdvPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pos(), target);
  }

  // optional uint32 advance = 2;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->advance(), target);
  }

  // optional uint32 unlock = 3;
  if (has_unlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->unlock(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBAdvPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 advance = 2;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advance());
    }

    // optional uint32 unlock = 3;
    if (has_unlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlock());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBAdvPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBAdvPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBAdvPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBAdvPos::MergeFrom(const SkillDBAdvPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_unlock()) {
      set_unlock(from.unlock());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBAdvPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBAdvPos::CopyFrom(const SkillDBAdvPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBAdvPos::IsInitialized() const {

  return true;
}

void SkillDBAdvPos::Swap(SkillDBAdvPos* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(advance_, other->advance_);
    std::swap(unlock_, other->unlock_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBAdvPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBAdvPos_descriptor_;
  metadata.reflection = SkillDBAdvPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBAdvInfo::kAdvanceFieldNumber;
const int SkillDBAdvInfo::kLevelFieldNumber;
#endif  // !_MSC_VER

SkillDBAdvInfo::SkillDBAdvInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBAdvInfo::InitAsDefaultInstance() {
}

SkillDBAdvInfo::SkillDBAdvInfo(const SkillDBAdvInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBAdvInfo::SharedCtor() {
  _cached_size_ = 0;
  advance_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBAdvInfo::~SkillDBAdvInfo() {
  SharedDtor();
}

void SkillDBAdvInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBAdvInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBAdvInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBAdvInfo_descriptor_;
}

const SkillDBAdvInfo& SkillDBAdvInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SkillDBAdvInfo* SkillDBAdvInfo::default_instance_ = NULL;

SkillDBAdvInfo* SkillDBAdvInfo::New() const {
  return new SkillDBAdvInfo;
}

void SkillDBAdvInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    advance_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBAdvInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 advance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &advance_)));
          set_has_advance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBAdvInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 advance = 1;
  if (has_advance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->advance(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBAdvInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 advance = 1;
  if (has_advance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->advance(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBAdvInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 advance = 1;
    if (has_advance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->advance());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBAdvInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBAdvInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBAdvInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBAdvInfo::MergeFrom(const SkillDBAdvInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_advance()) {
      set_advance(from.advance());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBAdvInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBAdvInfo::CopyFrom(const SkillDBAdvInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBAdvInfo::IsInitialized() const {

  return true;
}

void SkillDBAdvInfo::Swap(SkillDBAdvInfo* other) {
  if (other != this) {
    std::swap(advance_, other->advance_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBAdvInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBAdvInfo_descriptor_;
  metadata.reflection = SkillDBAdvInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBGroup::kGroupFieldNumber;
const int SkillDBGroup::kChgFieldNumber;
const int SkillDBGroup::kPosLstFieldNumber;
#endif  // !_MSC_VER

SkillDBGroup::SkillDBGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBGroup::InitAsDefaultInstance() {
}

SkillDBGroup::SkillDBGroup(const SkillDBGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBGroup::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0u;
  chg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBGroup::~SkillDBGroup() {
  SharedDtor();
}

void SkillDBGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBGroup_descriptor_;
}

const SkillDBGroup& SkillDBGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SkillDBGroup* SkillDBGroup::default_instance_ = NULL;

SkillDBGroup* SkillDBGroup::New() const {
  return new SkillDBGroup;
}

void SkillDBGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0u;
    chg_ = 0;
  }
  pos_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chg;
        break;
      }

      // optional int32 chg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chg_)));
          set_has_chg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos_lst;
        break;
      }

      // repeated .proto_ff.SkillDBPos pos_lst = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_pos_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group(), output);
  }

  // optional int32 chg = 2;
  if (has_chg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chg(), output);
  }

  // repeated .proto_ff.SkillDBPos pos_lst = 3;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pos_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group(), target);
  }

  // optional int32 chg = 2;
  if (has_chg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chg(), target);
  }

  // repeated .proto_ff.SkillDBPos pos_lst = 3;
  for (int i = 0; i < this->pos_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pos_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBGroup::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional int32 chg = 2;
    if (has_chg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chg());
    }

  }
  // repeated .proto_ff.SkillDBPos pos_lst = 3;
  total_size += 1 * this->pos_lst_size();
  for (int i = 0; i < this->pos_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBGroup::MergeFrom(const SkillDBGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_lst_.MergeFrom(from.pos_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_chg()) {
      set_chg(from.chg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBGroup::CopyFrom(const SkillDBGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBGroup::IsInitialized() const {

  return true;
}

void SkillDBGroup::Swap(SkillDBGroup* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(chg_, other->chg_);
    pos_lst_.Swap(&other->pos_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBGroup_descriptor_;
  metadata.reflection = SkillDBGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetSkillCdDB::kSkillIdFieldNumber;
const int PetSkillCdDB::kUseMsecFieldNumber;
const int PetSkillCdDB::kPetInstidFieldNumber;
#endif  // !_MSC_VER

PetSkillCdDB::PetSkillCdDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetSkillCdDB::InitAsDefaultInstance() {
}

PetSkillCdDB::PetSkillCdDB(const PetSkillCdDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetSkillCdDB::SharedCtor() {
  _cached_size_ = 0;
  skill_id_ = GOOGLE_ULONGLONG(0);
  use_msec_ = GOOGLE_ULONGLONG(0);
  pet_instid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetSkillCdDB::~PetSkillCdDB() {
  SharedDtor();
}

void PetSkillCdDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetSkillCdDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetSkillCdDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetSkillCdDB_descriptor_;
}

const PetSkillCdDB& PetSkillCdDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

PetSkillCdDB* PetSkillCdDB::default_instance_ = NULL;

PetSkillCdDB* PetSkillCdDB::New() const {
  return new PetSkillCdDB;
}

void PetSkillCdDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skill_id_ = GOOGLE_ULONGLONG(0);
    use_msec_ = GOOGLE_ULONGLONG(0);
    pet_instid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetSkillCdDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 skill_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skill_id_)));
          set_has_skill_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_use_msec;
        break;
      }

      // optional uint64 use_msec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_msec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &use_msec_)));
          set_has_use_msec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pet_instid;
        break;
      }

      // optional int64 pet_instid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pet_instid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pet_instid_)));
          set_has_pet_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetSkillCdDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->skill_id(), output);
  }

  // optional uint64 use_msec = 2;
  if (has_use_msec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->use_msec(), output);
  }

  // optional int64 pet_instid = 3;
  if (has_pet_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->pet_instid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetSkillCdDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 skill_id = 1;
  if (has_skill_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->skill_id(), target);
  }

  // optional uint64 use_msec = 2;
  if (has_use_msec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->use_msec(), target);
  }

  // optional int64 pet_instid = 3;
  if (has_pet_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->pet_instid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetSkillCdDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 skill_id = 1;
    if (has_skill_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skill_id());
    }

    // optional uint64 use_msec = 2;
    if (has_use_msec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->use_msec());
    }

    // optional int64 pet_instid = 3;
    if (has_pet_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pet_instid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetSkillCdDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetSkillCdDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetSkillCdDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetSkillCdDB::MergeFrom(const PetSkillCdDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skill_id()) {
      set_skill_id(from.skill_id());
    }
    if (from.has_use_msec()) {
      set_use_msec(from.use_msec());
    }
    if (from.has_pet_instid()) {
      set_pet_instid(from.pet_instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetSkillCdDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetSkillCdDB::CopyFrom(const PetSkillCdDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetSkillCdDB::IsInitialized() const {

  return true;
}

void PetSkillCdDB::Swap(PetSkillCdDB* other) {
  if (other != this) {
    std::swap(skill_id_, other->skill_id_);
    std::swap(use_msec_, other->use_msec_);
    std::swap(pet_instid_, other->pet_instid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetSkillCdDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetSkillCdDB_descriptor_;
  metadata.reflection = PetSkillCdDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBTalentProto::kIdFieldNumber;
const int SkillDBTalentProto::kLevelFieldNumber;
#endif  // !_MSC_VER

SkillDBTalentProto::SkillDBTalentProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBTalentProto::InitAsDefaultInstance() {
}

SkillDBTalentProto::SkillDBTalentProto(const SkillDBTalentProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBTalentProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBTalentProto::~SkillDBTalentProto() {
  SharedDtor();
}

void SkillDBTalentProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBTalentProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBTalentProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBTalentProto_descriptor_;
}

const SkillDBTalentProto& SkillDBTalentProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SkillDBTalentProto* SkillDBTalentProto::default_instance_ = NULL;

SkillDBTalentProto* SkillDBTalentProto::New() const {
  return new SkillDBTalentProto;
}

void SkillDBTalentProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBTalentProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBTalentProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBTalentProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBTalentProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBTalentProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBTalentProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBTalentProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBTalentProto::MergeFrom(const SkillDBTalentProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBTalentProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBTalentProto::CopyFrom(const SkillDBTalentProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBTalentProto::IsInitialized() const {

  return true;
}

void SkillDBTalentProto::Swap(SkillDBTalentProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBTalentProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBTalentProto_descriptor_;
  metadata.reflection = SkillDBTalentProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBTalent::kInfoFieldNumber;
const int SkillDBTalent::kCntFieldNumber;
#endif  // !_MSC_VER

SkillDBTalent::SkillDBTalent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBTalent::InitAsDefaultInstance() {
}

SkillDBTalent::SkillDBTalent(const SkillDBTalent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBTalent::SharedCtor() {
  _cached_size_ = 0;
  cnt_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBTalent::~SkillDBTalent() {
  SharedDtor();
}

void SkillDBTalent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillDBTalent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBTalent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBTalent_descriptor_;
}

const SkillDBTalent& SkillDBTalent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SkillDBTalent* SkillDBTalent::default_instance_ = NULL;

SkillDBTalent* SkillDBTalent::New() const {
  return new SkillDBTalent;
}

void SkillDBTalent::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cnt_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBTalent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SkillDBTalentProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_cnt;
        break;
      }

      // optional uint32 cnt = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cnt_)));
          set_has_cnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBTalent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SkillDBTalentProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional uint32 cnt = 2;
  if (has_cnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cnt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBTalent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SkillDBTalentProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional uint32 cnt = 2;
  if (has_cnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cnt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBTalent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 cnt = 2;
    if (has_cnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cnt());
    }

  }
  // repeated .proto_ff.SkillDBTalentProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBTalent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBTalent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBTalent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBTalent::MergeFrom(const SkillDBTalent& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cnt()) {
      set_cnt(from.cnt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBTalent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBTalent::CopyFrom(const SkillDBTalent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBTalent::IsInitialized() const {

  return true;
}

void SkillDBTalent::Swap(SkillDBTalent* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(cnt_, other->cnt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBTalent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBTalent_descriptor_;
  metadata.reflection = SkillDBTalent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillDBData::kInfoLstFieldNumber;
const int SkillDBData::kGroupLstFieldNumber;
const int SkillDBData::kGroupFieldNumber;
const int SkillDBData::kLastGroupFieldNumber;
const int SkillDBData::kAdvPosFieldNumber;
const int SkillDBData::kAdvInfoFieldNumber;
const int SkillDBData::kCurAdvposFieldNumber;
const int SkillDBData::kPetCdFieldNumber;
const int SkillDBData::kTalentFieldNumber;
const int SkillDBData::kAngerValueFieldNumber;
#endif  // !_MSC_VER

SkillDBData::SkillDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillDBData::InitAsDefaultInstance() {
  talent_ = const_cast< ::proto_ff::SkillDBTalent*>(&::proto_ff::SkillDBTalent::default_instance());
}

SkillDBData::SkillDBData(const SkillDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillDBData::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0u;
  last_group_ = GOOGLE_ULONGLONG(0);
  cur_advpos_ = 0u;
  talent_ = NULL;
  anger_value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillDBData::~SkillDBData() {
  SharedDtor();
}

void SkillDBData::SharedDtor() {
  if (this != default_instance_) {
    delete talent_;
  }
}

void SkillDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillDBData_descriptor_;
}

const SkillDBData& SkillDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SkillDBData* SkillDBData::default_instance_ = NULL;

SkillDBData* SkillDBData::New() const {
  return new SkillDBData;
}

void SkillDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    group_ = 0u;
    last_group_ = GOOGLE_ULONGLONG(0);
    cur_advpos_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_talent()) {
      if (talent_ != NULL) talent_->::proto_ff::SkillDBTalent::Clear();
    }
    anger_value_ = 0u;
  }
  info_lst_.Clear();
  group_lst_.Clear();
  adv_pos_.Clear();
  adv_info_.Clear();
  pet_cd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.SkillDBInfo info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectTag(18)) goto parse_group_lst;
        break;
      }

      // repeated .proto_ff.SkillDBGroup group_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group_lst;
        if (input->ExpectTag(24)) goto parse_group;
        break;
      }

      // optional uint32 group = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_group;
        break;
      }

      // optional uint64 last_group = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_group_)));
          set_has_last_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_adv_pos;
        break;
      }

      // repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adv_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adv_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_adv_pos;
        if (input->ExpectTag(50)) goto parse_adv_info;
        break;
      }

      // repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_adv_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_adv_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_adv_info;
        if (input->ExpectTag(56)) goto parse_cur_advpos;
        break;
      }

      // optional uint32 cur_advpos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_advpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_advpos_)));
          set_has_cur_advpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pet_cd;
        break;
      }

      // repeated .proto_ff.PetSkillCdDB pet_cd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pet_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_pet_cd;
        if (input->ExpectTag(74)) goto parse_talent;
        break;
      }

      // optional .proto_ff.SkillDBTalent talent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_talent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_anger_value;
        break;
      }

      // optional uint32 anger_value = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_anger_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &anger_value_)));
          set_has_anger_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.SkillDBInfo info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  // repeated .proto_ff.SkillDBGroup group_lst = 2;
  for (int i = 0; i < this->group_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group_lst(i), output);
  }

  // optional uint32 group = 3;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->group(), output);
  }

  // optional uint64 last_group = 4;
  if (has_last_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_group(), output);
  }

  // repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
  for (int i = 0; i < this->adv_pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->adv_pos(i), output);
  }

  // repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
  for (int i = 0; i < this->adv_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->adv_info(i), output);
  }

  // optional uint32 cur_advpos = 7;
  if (has_cur_advpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cur_advpos(), output);
  }

  // repeated .proto_ff.PetSkillCdDB pet_cd = 8;
  for (int i = 0; i < this->pet_cd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->pet_cd(i), output);
  }

  // optional .proto_ff.SkillDBTalent talent = 9;
  if (has_talent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->talent(), output);
  }

  // optional uint32 anger_value = 10;
  if (has_anger_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->anger_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.SkillDBInfo info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  // repeated .proto_ff.SkillDBGroup group_lst = 2;
  for (int i = 0; i < this->group_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group_lst(i), target);
  }

  // optional uint32 group = 3;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->group(), target);
  }

  // optional uint64 last_group = 4;
  if (has_last_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_group(), target);
  }

  // repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
  for (int i = 0; i < this->adv_pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->adv_pos(i), target);
  }

  // repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
  for (int i = 0; i < this->adv_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->adv_info(i), target);
  }

  // optional uint32 cur_advpos = 7;
  if (has_cur_advpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cur_advpos(), target);
  }

  // repeated .proto_ff.PetSkillCdDB pet_cd = 8;
  for (int i = 0; i < this->pet_cd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->pet_cd(i), target);
  }

  // optional .proto_ff.SkillDBTalent talent = 9;
  if (has_talent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->talent(), target);
  }

  // optional uint32 anger_value = 10;
  if (has_anger_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->anger_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 group = 3;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group());
    }

    // optional uint64 last_group = 4;
    if (has_last_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_group());
    }

    // optional uint32 cur_advpos = 7;
    if (has_cur_advpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_advpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.SkillDBTalent talent = 9;
    if (has_talent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->talent());
    }

    // optional uint32 anger_value = 10;
    if (has_anger_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->anger_value());
    }

  }
  // repeated .proto_ff.SkillDBInfo info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  // repeated .proto_ff.SkillDBGroup group_lst = 2;
  total_size += 1 * this->group_lst_size();
  for (int i = 0; i < this->group_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_lst(i));
  }

  // repeated .proto_ff.SkillDBAdvPos adv_pos = 5;
  total_size += 1 * this->adv_pos_size();
  for (int i = 0; i < this->adv_pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adv_pos(i));
  }

  // repeated .proto_ff.SkillDBAdvInfo adv_info = 6;
  total_size += 1 * this->adv_info_size();
  for (int i = 0; i < this->adv_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->adv_info(i));
  }

  // repeated .proto_ff.PetSkillCdDB pet_cd = 8;
  total_size += 1 * this->pet_cd_size();
  for (int i = 0; i < this->pet_cd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pet_cd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillDBData::MergeFrom(const SkillDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  group_lst_.MergeFrom(from.group_lst_);
  adv_pos_.MergeFrom(from.adv_pos_);
  adv_info_.MergeFrom(from.adv_info_);
  pet_cd_.MergeFrom(from.pet_cd_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_last_group()) {
      set_last_group(from.last_group());
    }
    if (from.has_cur_advpos()) {
      set_cur_advpos(from.cur_advpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_talent()) {
      mutable_talent()->::proto_ff::SkillDBTalent::MergeFrom(from.talent());
    }
    if (from.has_anger_value()) {
      set_anger_value(from.anger_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillDBData::CopyFrom(const SkillDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillDBData::IsInitialized() const {

  return true;
}

void SkillDBData::Swap(SkillDBData* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    group_lst_.Swap(&other->group_lst_);
    std::swap(group_, other->group_);
    std::swap(last_group_, other->last_group_);
    adv_pos_.Swap(&other->adv_pos_);
    adv_info_.Swap(&other->adv_info_);
    std::swap(cur_advpos_, other->cur_advpos_);
    pet_cd_.Swap(&other->pet_cd_);
    std::swap(talent_, other->talent_);
    std::swap(anger_value_, other->anger_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillDBData_descriptor_;
  metadata.reflection = SkillDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodRelicsActivityData::kGroupDataFieldNumber;
const int GodRelicsActivityData::kCurGroupIdFieldNumber;
#endif  // !_MSC_VER

GodRelicsActivityData::GodRelicsActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodRelicsActivityData::InitAsDefaultInstance() {
}

GodRelicsActivityData::GodRelicsActivityData(const GodRelicsActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodRelicsActivityData::SharedCtor() {
  _cached_size_ = 0;
  cur_group_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodRelicsActivityData::~GodRelicsActivityData() {
  SharedDtor();
}

void GodRelicsActivityData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodRelicsActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodRelicsActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodRelicsActivityData_descriptor_;
}

const GodRelicsActivityData& GodRelicsActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GodRelicsActivityData* GodRelicsActivityData::default_instance_ = NULL;

GodRelicsActivityData* GodRelicsActivityData::New() const {
  return new GodRelicsActivityData;
}

void GodRelicsActivityData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    cur_group_id_ = GOOGLE_LONGLONG(0);
  }
  group_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodRelicsActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_group_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_group_data;
        if (input->ExpectTag(16)) goto parse_cur_group_id;
        break;
      }

      // optional int64 cur_group_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_group_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_group_id_)));
          set_has_cur_group_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodRelicsActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  for (int i = 0; i < this->group_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group_data(i), output);
  }

  // optional int64 cur_group_id = 2;
  if (has_cur_group_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->cur_group_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodRelicsActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  for (int i = 0; i < this->group_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group_data(i), target);
  }

  // optional int64 cur_group_id = 2;
  if (has_cur_group_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->cur_group_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodRelicsActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 cur_group_id = 2;
    if (has_cur_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_group_id());
    }

  }
  // repeated .proto_ff.GodRelicsTaskGroupEntry group_data = 1;
  total_size += 1 * this->group_data_size();
  for (int i = 0; i < this->group_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->group_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodRelicsActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodRelicsActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodRelicsActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodRelicsActivityData::MergeFrom(const GodRelicsActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  group_data_.MergeFrom(from.group_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_cur_group_id()) {
      set_cur_group_id(from.cur_group_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodRelicsActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodRelicsActivityData::CopyFrom(const GodRelicsActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodRelicsActivityData::IsInitialized() const {

  return true;
}

void GodRelicsActivityData::Swap(GodRelicsActivityData* other) {
  if (other != this) {
    group_data_.Swap(&other->group_data_);
    std::swap(cur_group_id_, other->cur_group_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodRelicsActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodRelicsActivityData_descriptor_;
  metadata.reflection = GodRelicsActivityData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MiniActivityDBData::kGodRelicsDataFieldNumber;
const int MiniActivityDBData::kDailyDataFieldNumber;
#endif  // !_MSC_VER

MiniActivityDBData::MiniActivityDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MiniActivityDBData::InitAsDefaultInstance() {
  god_relics_data_ = const_cast< ::proto_ff::GodRelicsActivityData*>(&::proto_ff::GodRelicsActivityData::default_instance());
  daily_data_ = const_cast< ::proto_ff::DailyTaskAllData*>(&::proto_ff::DailyTaskAllData::default_instance());
}

MiniActivityDBData::MiniActivityDBData(const MiniActivityDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MiniActivityDBData::SharedCtor() {
  _cached_size_ = 0;
  god_relics_data_ = NULL;
  daily_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiniActivityDBData::~MiniActivityDBData() {
  SharedDtor();
}

void MiniActivityDBData::SharedDtor() {
  if (this != default_instance_) {
    delete god_relics_data_;
    delete daily_data_;
  }
}

void MiniActivityDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiniActivityDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiniActivityDBData_descriptor_;
}

const MiniActivityDBData& MiniActivityDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MiniActivityDBData* MiniActivityDBData::default_instance_ = NULL;

MiniActivityDBData* MiniActivityDBData::New() const {
  return new MiniActivityDBData;
}

void MiniActivityDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_god_relics_data()) {
      if (god_relics_data_ != NULL) god_relics_data_->::proto_ff::GodRelicsActivityData::Clear();
    }
    if (has_daily_data()) {
      if (daily_data_ != NULL) daily_data_->::proto_ff::DailyTaskAllData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiniActivityDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_god_relics_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_daily_data;
        break;
      }

      // optional .proto_ff.DailyTaskAllData daily_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MiniActivityDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
  if (has_god_relics_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->god_relics_data(), output);
  }

  // optional .proto_ff.DailyTaskAllData daily_data = 2;
  if (has_daily_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->daily_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MiniActivityDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
  if (has_god_relics_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->god_relics_data(), target);
  }

  // optional .proto_ff.DailyTaskAllData daily_data = 2;
  if (has_daily_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->daily_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MiniActivityDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GodRelicsActivityData god_relics_data = 1;
    if (has_god_relics_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->god_relics_data());
    }

    // optional .proto_ff.DailyTaskAllData daily_data = 2;
    if (has_daily_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiniActivityDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiniActivityDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiniActivityDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiniActivityDBData::MergeFrom(const MiniActivityDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_god_relics_data()) {
      mutable_god_relics_data()->::proto_ff::GodRelicsActivityData::MergeFrom(from.god_relics_data());
    }
    if (from.has_daily_data()) {
      mutable_daily_data()->::proto_ff::DailyTaskAllData::MergeFrom(from.daily_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiniActivityDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiniActivityDBData::CopyFrom(const MiniActivityDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniActivityDBData::IsInitialized() const {

  return true;
}

void MiniActivityDBData::Swap(MiniActivityDBData* other) {
  if (other != this) {
    std::swap(god_relics_data_, other->god_relics_data_);
    std::swap(daily_data_, other->daily_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiniActivityDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiniActivityDBData_descriptor_;
  metadata.reflection = MiniActivityDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupRecord::kDupIdFieldNumber;
const int DupRecord::kStarFieldNumber;
#endif  // !_MSC_VER

DupRecord::DupRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupRecord::InitAsDefaultInstance() {
}

DupRecord::DupRecord(const DupRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupRecord::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = GOOGLE_ULONGLONG(0);
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupRecord::~DupRecord() {
  SharedDtor();
}

void DupRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupRecord_descriptor_;
}

const DupRecord& DupRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DupRecord* DupRecord::default_instance_ = NULL;

DupRecord* DupRecord::New() const {
  return new DupRecord;
}

void DupRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = GOOGLE_ULONGLONG(0);
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 dupId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional int32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->dupid(), output);
  }

  // optional int32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 dupId = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->dupid(), target);
  }

  // optional int32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 dupId = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dupid());
    }

    // optional int32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupRecord::MergeFrom(const DupRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupRecord::CopyFrom(const DupRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupRecord::IsInitialized() const {

  return true;
}

void DupRecord::Swap(DupRecord* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupRecord_descriptor_;
  metadata.reflection = DupRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupGroupData::kGroupFieldNumber;
const int DupGroupData::kEnterNumFieldNumber;
const int DupGroupData::kBuyNumFieldNumber;
const int DupGroupData::kUseNumFieldNumber;
const int DupGroupData::kLastFreshFieldNumber;
#endif  // !_MSC_VER

DupGroupData::DupGroupData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupGroupData::InitAsDefaultInstance() {
}

DupGroupData::DupGroupData(const DupGroupData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupGroupData::SharedCtor() {
  _cached_size_ = 0;
  group_ = 0;
  enternum_ = 0;
  buynum_ = 0;
  usenum_ = 0;
  lastfresh_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupGroupData::~DupGroupData() {
  SharedDtor();
}

void DupGroupData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupGroupData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupGroupData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupGroupData_descriptor_;
}

const DupGroupData& DupGroupData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DupGroupData* DupGroupData::default_instance_ = NULL;

DupGroupData* DupGroupData::New() const {
  return new DupGroupData;
}

void DupGroupData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    group_ = 0;
    enternum_ = 0;
    buynum_ = 0;
    usenum_ = 0;
    lastfresh_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupGroupData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enterNum;
        break;
      }

      // optional int32 enterNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enternum_)));
          set_has_enternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyNum;
        break;
      }

      // optional int32 buyNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_useNum;
        break;
      }

      // optional int32 useNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usenum_)));
          set_has_usenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastFresh;
        break;
      }

      // optional uint64 lastFresh = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastFresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastfresh_)));
          set_has_lastfresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupGroupData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->group(), output);
  }

  // optional int32 enterNum = 2;
  if (has_enternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->enternum(), output);
  }

  // optional int32 buyNum = 3;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buynum(), output);
  }

  // optional int32 useNum = 4;
  if (has_usenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->usenum(), output);
  }

  // optional uint64 lastFresh = 5;
  if (has_lastfresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lastfresh(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupGroupData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->group(), target);
  }

  // optional int32 enterNum = 2;
  if (has_enternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->enternum(), target);
  }

  // optional int32 buyNum = 3;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buynum(), target);
  }

  // optional int32 useNum = 4;
  if (has_usenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->usenum(), target);
  }

  // optional uint64 lastFresh = 5;
  if (has_lastfresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lastfresh(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupGroupData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 enterNum = 2;
    if (has_enternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enternum());
    }

    // optional int32 buyNum = 3;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

    // optional int32 useNum = 4;
    if (has_usenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usenum());
    }

    // optional uint64 lastFresh = 5;
    if (has_lastfresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastfresh());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupGroupData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupGroupData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupGroupData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupGroupData::MergeFrom(const DupGroupData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_enternum()) {
      set_enternum(from.enternum());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_usenum()) {
      set_usenum(from.usenum());
    }
    if (from.has_lastfresh()) {
      set_lastfresh(from.lastfresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupGroupData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupGroupData::CopyFrom(const DupGroupData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupGroupData::IsInitialized() const {

  return true;
}

void DupGroupData::Swap(DupGroupData* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(enternum_, other->enternum_);
    std::swap(buynum_, other->buynum_);
    std::swap(usenum_, other->usenum_);
    std::swap(lastfresh_, other->lastfresh_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupGroupData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupGroupData_descriptor_;
  metadata.reflection = DupGroupData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerDBRecordEntry::kNameFieldNumber;
const int DupTowerDBRecordEntry::kTimeFieldNumber;
const int DupTowerDBRecordEntry::kCidFieldNumber;
#endif  // !_MSC_VER

DupTowerDBRecordEntry::DupTowerDBRecordEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerDBRecordEntry::InitAsDefaultInstance() {
}

DupTowerDBRecordEntry::DupTowerDBRecordEntry(const DupTowerDBRecordEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerDBRecordEntry::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerDBRecordEntry::~DupTowerDBRecordEntry() {
  SharedDtor();
}

void DupTowerDBRecordEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DupTowerDBRecordEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerDBRecordEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerDBRecordEntry_descriptor_;
}

const DupTowerDBRecordEntry& DupTowerDBRecordEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DupTowerDBRecordEntry* DupTowerDBRecordEntry::default_instance_ = NULL;

DupTowerDBRecordEntry* DupTowerDBRecordEntry::New() const {
  return new DupTowerDBRecordEntry;
}

void DupTowerDBRecordEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    time_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerDBRecordEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerDBRecordEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerDBRecordEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerDBRecordEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerDBRecordEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerDBRecordEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerDBRecordEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerDBRecordEntry::MergeFrom(const DupTowerDBRecordEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerDBRecordEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerDBRecordEntry::CopyFrom(const DupTowerDBRecordEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerDBRecordEntry::IsInitialized() const {

  return true;
}

void DupTowerDBRecordEntry::Swap(DupTowerDBRecordEntry* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(time_, other->time_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerDBRecordEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerDBRecordEntry_descriptor_;
  metadata.reflection = DupTowerDBRecordEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerDBRecord::kIdFieldNumber;
const int DupTowerDBRecord::kEntrysFieldNumber;
#endif  // !_MSC_VER

DupTowerDBRecord::DupTowerDBRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerDBRecord::InitAsDefaultInstance() {
}

DupTowerDBRecord::DupTowerDBRecord(const DupTowerDBRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerDBRecord::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerDBRecord::~DupTowerDBRecord() {
  SharedDtor();
}

void DupTowerDBRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTowerDBRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerDBRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerDBRecord_descriptor_;
}

const DupTowerDBRecord& DupTowerDBRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DupTowerDBRecord* DupTowerDBRecord::default_instance_ = NULL;

DupTowerDBRecord* DupTowerDBRecord::New() const {
  return new DupTowerDBRecord;
}

void DupTowerDBRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerDBRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        break;
      }

      // repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerDBRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerDBRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerDBRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .proto_ff.DupTowerDBRecordEntry entrys = 2;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerDBRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerDBRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerDBRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerDBRecord::MergeFrom(const DupTowerDBRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerDBRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerDBRecord::CopyFrom(const DupTowerDBRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerDBRecord::IsInitialized() const {

  return true;
}

void DupTowerDBRecord::Swap(DupTowerDBRecord* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerDBRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerDBRecord_descriptor_;
  metadata.reflection = DupTowerDBRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupTowerDBData::kIdsFieldNumber;
#endif  // !_MSC_VER

DupTowerDBData::DupTowerDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupTowerDBData::InitAsDefaultInstance() {
}

DupTowerDBData::DupTowerDBData(const DupTowerDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupTowerDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupTowerDBData::~DupTowerDBData() {
  SharedDtor();
}

void DupTowerDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DupTowerDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupTowerDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupTowerDBData_descriptor_;
}

const DupTowerDBData& DupTowerDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DupTowerDBData* DupTowerDBData::default_instance_ = NULL;

DupTowerDBData* DupTowerDBData::New() const {
  return new DupTowerDBData;
}

void DupTowerDBData::Clear() {
  ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupTowerDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupTowerDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupTowerDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 ids = 1;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupTowerDBData::ByteSize() const {
  int total_size = 0;

  // repeated uint64 ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupTowerDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupTowerDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupTowerDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupTowerDBData::MergeFrom(const DupTowerDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ids_.MergeFrom(from.ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupTowerDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupTowerDBData::CopyFrom(const DupTowerDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupTowerDBData::IsInitialized() const {

  return true;
}

void DupTowerDBData::Swap(DupTowerDBData* other) {
  if (other != this) {
    ids_.Swap(&other->ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupTowerDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupTowerDBData_descriptor_;
  metadata.reflection = DupTowerDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GhostDBData::kWaveFieldNumber;
const int GhostDBData::kTimeFieldNumber;
const int GhostDBData::kRecvIdsFieldNumber;
#endif  // !_MSC_VER

GhostDBData::GhostDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GhostDBData::InitAsDefaultInstance() {
}

GhostDBData::GhostDBData(const GhostDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GhostDBData::SharedCtor() {
  _cached_size_ = 0;
  wave_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GhostDBData::~GhostDBData() {
  SharedDtor();
}

void GhostDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GhostDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GhostDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GhostDBData_descriptor_;
}

const GhostDBData& GhostDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GhostDBData* GhostDBData::default_instance_ = NULL;

GhostDBData* GhostDBData::New() const {
  return new GhostDBData;
}

void GhostDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wave_ = 0;
    time_ = 0;
  }
  recv_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GhostDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 wave = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wave_)));
          set_has_wave();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recv_ids;
        break;
      }

      // repeated int32 recv_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_recv_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recv_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GhostDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 wave = 1;
  if (has_wave()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wave(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // repeated int32 recv_ids = 3;
  for (int i = 0; i < this->recv_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->recv_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GhostDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 wave = 1;
  if (has_wave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wave(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  // repeated int32 recv_ids = 3;
  for (int i = 0; i < this->recv_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->recv_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GhostDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 wave = 1;
    if (has_wave()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wave());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  // repeated int32 recv_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_ids(i));
    }
    total_size += 1 * this->recv_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GhostDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GhostDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GhostDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GhostDBData::MergeFrom(const GhostDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_ids_.MergeFrom(from.recv_ids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wave()) {
      set_wave(from.wave());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GhostDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostDBData::CopyFrom(const GhostDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostDBData::IsInitialized() const {

  return true;
}

void GhostDBData::Swap(GhostDBData* other) {
  if (other != this) {
    std::swap(wave_, other->wave_);
    std::swap(time_, other->time_);
    recv_ids_.Swap(&other->recv_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GhostDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GhostDBData_descriptor_;
  metadata.reflection = GhostDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoyuDBData::kRecvLayerFieldNumber;
const int MoyuDBData::kDayHarmFieldNumber;
const int MoyuDBData::kWeekHarmFieldNumber;
const int MoyuDBData::kLastDayHarmFieldNumber;
const int MoyuDBData::kLastWeekHarmFieldNumber;
const int MoyuDBData::kTimeFieldNumber;
#endif  // !_MSC_VER

MoyuDBData::MoyuDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoyuDBData::InitAsDefaultInstance() {
}

MoyuDBData::MoyuDBData(const MoyuDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoyuDBData::SharedCtor() {
  _cached_size_ = 0;
  day_harm_ = GOOGLE_ULONGLONG(0);
  week_harm_ = GOOGLE_ULONGLONG(0);
  last_day_harm_ = GOOGLE_ULONGLONG(0);
  last_week_harm_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoyuDBData::~MoyuDBData() {
  SharedDtor();
}

void MoyuDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoyuDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoyuDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoyuDBData_descriptor_;
}

const MoyuDBData& MoyuDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MoyuDBData* MoyuDBData::default_instance_ = NULL;

MoyuDBData* MoyuDBData::New() const {
  return new MoyuDBData;
}

void MoyuDBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    day_harm_ = GOOGLE_ULONGLONG(0);
    week_harm_ = GOOGLE_ULONGLONG(0);
    last_day_harm_ = GOOGLE_ULONGLONG(0);
    last_week_harm_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
  }
  recv_layer_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoyuDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 recv_layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_recv_layer())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_layer())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_recv_layer;
        if (input->ExpectTag(16)) goto parse_day_harm;
        break;
      }

      // optional uint64 day_harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &day_harm_)));
          set_has_day_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_week_harm;
        break;
      }

      // optional uint64 week_harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_harm_)));
          set_has_week_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_day_harm;
        break;
      }

      // optional uint64 last_day_harm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_day_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_day_harm_)));
          set_has_last_day_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_week_harm;
        break;
      }

      // optional uint64 last_week_harm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_week_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_week_harm_)));
          set_has_last_week_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_time;
        break;
      }

      // optional uint64 time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoyuDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 recv_layer = 1;
  for (int i = 0; i < this->recv_layer_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->recv_layer(i), output);
  }

  // optional uint64 day_harm = 2;
  if (has_day_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->day_harm(), output);
  }

  // optional uint64 week_harm = 3;
  if (has_week_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->week_harm(), output);
  }

  // optional uint64 last_day_harm = 4;
  if (has_last_day_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_day_harm(), output);
  }

  // optional uint64 last_week_harm = 5;
  if (has_last_week_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->last_week_harm(), output);
  }

  // optional uint64 time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoyuDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 recv_layer = 1;
  for (int i = 0; i < this->recv_layer_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->recv_layer(i), target);
  }

  // optional uint64 day_harm = 2;
  if (has_day_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->day_harm(), target);
  }

  // optional uint64 week_harm = 3;
  if (has_week_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->week_harm(), target);
  }

  // optional uint64 last_day_harm = 4;
  if (has_last_day_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_day_harm(), target);
  }

  // optional uint64 last_week_harm = 5;
  if (has_last_week_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->last_week_harm(), target);
  }

  // optional uint64 time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoyuDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 day_harm = 2;
    if (has_day_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->day_harm());
    }

    // optional uint64 week_harm = 3;
    if (has_week_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_harm());
    }

    // optional uint64 last_day_harm = 4;
    if (has_last_day_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_day_harm());
    }

    // optional uint64 last_week_harm = 5;
    if (has_last_week_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_week_harm());
    }

    // optional uint64 time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated int32 recv_layer = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_layer_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_layer(i));
    }
    total_size += 1 * this->recv_layer_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoyuDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoyuDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoyuDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoyuDBData::MergeFrom(const MoyuDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_layer_.MergeFrom(from.recv_layer_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_day_harm()) {
      set_day_harm(from.day_harm());
    }
    if (from.has_week_harm()) {
      set_week_harm(from.week_harm());
    }
    if (from.has_last_day_harm()) {
      set_last_day_harm(from.last_day_harm());
    }
    if (from.has_last_week_harm()) {
      set_last_week_harm(from.last_week_harm());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoyuDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoyuDBData::CopyFrom(const MoyuDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoyuDBData::IsInitialized() const {

  return true;
}

void MoyuDBData::Swap(MoyuDBData* other) {
  if (other != this) {
    recv_layer_.Swap(&other->recv_layer_);
    std::swap(day_harm_, other->day_harm_);
    std::swap(week_harm_, other->week_harm_);
    std::swap(last_day_harm_, other->last_day_harm_);
    std::swap(last_week_harm_, other->last_week_harm_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoyuDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoyuDBData_descriptor_;
  metadata.reflection = MoyuDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YaoTaDBData::kPassIdsFieldNumber;
const int YaoTaDBData::kFirstPassIdsFieldNumber;
const int YaoTaDBData::kPassTimePointFieldNumber;
const int YaoTaDBData::kPassDurationFieldNumber;
#endif  // !_MSC_VER

YaoTaDBData::YaoTaDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void YaoTaDBData::InitAsDefaultInstance() {
}

YaoTaDBData::YaoTaDBData(const YaoTaDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void YaoTaDBData::SharedCtor() {
  _cached_size_ = 0;
  pass_time_point_ = GOOGLE_ULONGLONG(0);
  pass_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YaoTaDBData::~YaoTaDBData() {
  SharedDtor();
}

void YaoTaDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YaoTaDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* YaoTaDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YaoTaDBData_descriptor_;
}

const YaoTaDBData& YaoTaDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

YaoTaDBData* YaoTaDBData::default_instance_ = NULL;

YaoTaDBData* YaoTaDBData::New() const {
  return new YaoTaDBData;
}

void YaoTaDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    pass_time_point_ = GOOGLE_ULONGLONG(0);
    pass_duration_ = 0;
  }
  pass_ids_.Clear();
  first_pass_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YaoTaDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 pass_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_pass_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pass_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_pass_ids;
        if (input->ExpectTag(16)) goto parse_first_pass_ids;
        break;
      }

      // repeated int32 first_pass_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_pass_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_first_pass_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_pass_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_pass_ids;
        if (input->ExpectTag(24)) goto parse_pass_time_point;
        break;
      }

      // optional uint64 pass_time_point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_time_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pass_time_point_)));
          set_has_pass_time_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pass_duration;
        break;
      }

      // optional int32 pass_duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_duration_)));
          set_has_pass_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void YaoTaDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 pass_ids = 1;
  for (int i = 0; i < this->pass_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->pass_ids(i), output);
  }

  // repeated int32 first_pass_ids = 2;
  for (int i = 0; i < this->first_pass_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->first_pass_ids(i), output);
  }

  // optional uint64 pass_time_point = 3;
  if (has_pass_time_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->pass_time_point(), output);
  }

  // optional int32 pass_duration = 4;
  if (has_pass_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pass_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* YaoTaDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 pass_ids = 1;
  for (int i = 0; i < this->pass_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->pass_ids(i), target);
  }

  // repeated int32 first_pass_ids = 2;
  for (int i = 0; i < this->first_pass_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->first_pass_ids(i), target);
  }

  // optional uint64 pass_time_point = 3;
  if (has_pass_time_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->pass_time_point(), target);
  }

  // optional int32 pass_duration = 4;
  if (has_pass_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pass_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int YaoTaDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 pass_time_point = 3;
    if (has_pass_time_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pass_time_point());
    }

    // optional int32 pass_duration = 4;
    if (has_pass_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_duration());
    }

  }
  // repeated int32 pass_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->pass_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pass_ids(i));
    }
    total_size += 1 * this->pass_ids_size() + data_size;
  }

  // repeated int32 first_pass_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_pass_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_pass_ids(i));
    }
    total_size += 1 * this->first_pass_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YaoTaDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YaoTaDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const YaoTaDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YaoTaDBData::MergeFrom(const YaoTaDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  pass_ids_.MergeFrom(from.pass_ids_);
  first_pass_ids_.MergeFrom(from.first_pass_ids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_pass_time_point()) {
      set_pass_time_point(from.pass_time_point());
    }
    if (from.has_pass_duration()) {
      set_pass_duration(from.pass_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YaoTaDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YaoTaDBData::CopyFrom(const YaoTaDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YaoTaDBData::IsInitialized() const {

  return true;
}

void YaoTaDBData::Swap(YaoTaDBData* other) {
  if (other != this) {
    pass_ids_.Swap(&other->pass_ids_);
    first_pass_ids_.Swap(&other->first_pass_ids_);
    std::swap(pass_time_point_, other->pass_time_point_);
    std::swap(pass_duration_, other->pass_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata YaoTaDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = YaoTaDBData_descriptor_;
  metadata.reflection = YaoTaDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DupDBData::kRecordFieldNumber;
const int DupDBData::kGroupsFieldNumber;
const int DupDBData::kTowerFieldNumber;
const int DupDBData::kGhostFieldNumber;
const int DupDBData::kMoyuFieldNumber;
const int DupDBData::kYaotaFieldNumber;
#endif  // !_MSC_VER

DupDBData::DupDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DupDBData::InitAsDefaultInstance() {
  tower_ = const_cast< ::proto_ff::DupTowerDBData*>(&::proto_ff::DupTowerDBData::default_instance());
  ghost_ = const_cast< ::proto_ff::GhostDBData*>(&::proto_ff::GhostDBData::default_instance());
  moyu_ = const_cast< ::proto_ff::MoyuDBData*>(&::proto_ff::MoyuDBData::default_instance());
  yaota_ = const_cast< ::proto_ff::YaoTaDBData*>(&::proto_ff::YaoTaDBData::default_instance());
}

DupDBData::DupDBData(const DupDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DupDBData::SharedCtor() {
  _cached_size_ = 0;
  tower_ = NULL;
  ghost_ = NULL;
  moyu_ = NULL;
  yaota_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DupDBData::~DupDBData() {
  SharedDtor();
}

void DupDBData::SharedDtor() {
  if (this != default_instance_) {
    delete tower_;
    delete ghost_;
    delete moyu_;
    delete yaota_;
  }
}

void DupDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DupDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DupDBData_descriptor_;
}

const DupDBData& DupDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DupDBData* DupDBData::default_instance_ = NULL;

DupDBData* DupDBData::New() const {
  return new DupDBData;
}

void DupDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_tower()) {
      if (tower_ != NULL) tower_->::proto_ff::DupTowerDBData::Clear();
    }
    if (has_ghost()) {
      if (ghost_ != NULL) ghost_->::proto_ff::GhostDBData::Clear();
    }
    if (has_moyu()) {
      if (moyu_ != NULL) moyu_->::proto_ff::MoyuDBData::Clear();
    }
    if (has_yaota()) {
      if (yaota_ != NULL) yaota_->::proto_ff::YaoTaDBData::Clear();
    }
  }
  record_.Clear();
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DupDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DupRecord record = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record;
        if (input->ExpectTag(18)) goto parse_groups;
        break;
      }

      // repeated .proto_ff.DupGroupData groups = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groups;
        if (input->ExpectTag(26)) goto parse_tower;
        break;
      }

      // optional .proto_ff.DupTowerDBData tower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tower:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ghost;
        break;
      }

      // optional .proto_ff.GhostDBData ghost = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ghost:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ghost()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_moyu;
        break;
      }

      // optional .proto_ff.MoyuDBData moyu = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moyu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moyu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_yaota;
        break;
      }

      // optional .proto_ff.YaoTaDBData yaota = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yaota:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yaota()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DupDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DupRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record(i), output);
  }

  // repeated .proto_ff.DupGroupData groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->groups(i), output);
  }

  // optional .proto_ff.DupTowerDBData tower = 3;
  if (has_tower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tower(), output);
  }

  // optional .proto_ff.GhostDBData ghost = 4;
  if (has_ghost()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->ghost(), output);
  }

  // optional .proto_ff.MoyuDBData moyu = 5;
  if (has_moyu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->moyu(), output);
  }

  // optional .proto_ff.YaoTaDBData yaota = 6;
  if (has_yaota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->yaota(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DupDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DupRecord record = 1;
  for (int i = 0; i < this->record_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record(i), target);
  }

  // repeated .proto_ff.DupGroupData groups = 2;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->groups(i), target);
  }

  // optional .proto_ff.DupTowerDBData tower = 3;
  if (has_tower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tower(), target);
  }

  // optional .proto_ff.GhostDBData ghost = 4;
  if (has_ghost()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->ghost(), target);
  }

  // optional .proto_ff.MoyuDBData moyu = 5;
  if (has_moyu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->moyu(), target);
  }

  // optional .proto_ff.YaoTaDBData yaota = 6;
  if (has_yaota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->yaota(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DupDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .proto_ff.DupTowerDBData tower = 3;
    if (has_tower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tower());
    }

    // optional .proto_ff.GhostDBData ghost = 4;
    if (has_ghost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ghost());
    }

    // optional .proto_ff.MoyuDBData moyu = 5;
    if (has_moyu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moyu());
    }

    // optional .proto_ff.YaoTaDBData yaota = 6;
    if (has_yaota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yaota());
    }

  }
  // repeated .proto_ff.DupRecord record = 1;
  total_size += 1 * this->record_size();
  for (int i = 0; i < this->record_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record(i));
  }

  // repeated .proto_ff.DupGroupData groups = 2;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DupDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DupDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DupDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DupDBData::MergeFrom(const DupDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_.MergeFrom(from.record_);
  groups_.MergeFrom(from.groups_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_tower()) {
      mutable_tower()->::proto_ff::DupTowerDBData::MergeFrom(from.tower());
    }
    if (from.has_ghost()) {
      mutable_ghost()->::proto_ff::GhostDBData::MergeFrom(from.ghost());
    }
    if (from.has_moyu()) {
      mutable_moyu()->::proto_ff::MoyuDBData::MergeFrom(from.moyu());
    }
    if (from.has_yaota()) {
      mutable_yaota()->::proto_ff::YaoTaDBData::MergeFrom(from.yaota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DupDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DupDBData::CopyFrom(const DupDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DupDBData::IsInitialized() const {

  return true;
}

void DupDBData::Swap(DupDBData* other) {
  if (other != this) {
    record_.Swap(&other->record_);
    groups_.Swap(&other->groups_);
    std::swap(tower_, other->tower_);
    std::swap(ghost_, other->ghost_);
    std::swap(moyu_, other->moyu_);
    std::swap(yaota_, other->yaota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DupDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DupDBData_descriptor_;
  metadata.reflection = DupDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GhostDupRankDB::kRanksFieldNumber;
#endif  // !_MSC_VER

GhostDupRankDB::GhostDupRankDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GhostDupRankDB::InitAsDefaultInstance() {
}

GhostDupRankDB::GhostDupRankDB(const GhostDupRankDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GhostDupRankDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GhostDupRankDB::~GhostDupRankDB() {
  SharedDtor();
}

void GhostDupRankDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GhostDupRankDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GhostDupRankDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GhostDupRankDB_descriptor_;
}

const GhostDupRankDB& GhostDupRankDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GhostDupRankDB* GhostDupRankDB::default_instance_ = NULL;

GhostDupRankDB* GhostDupRankDB::New() const {
  return new GhostDupRankDB;
}

void GhostDupRankDB::Clear() {
  ranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GhostDupRankDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GHostDupRankInfo ranks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ranks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ranks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GhostDupRankDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GHostDupRankInfo ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GhostDupRankDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GHostDupRankInfo ranks = 1;
  for (int i = 0; i < this->ranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GhostDupRankDB::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GHostDupRankInfo ranks = 1;
  total_size += 1 * this->ranks_size();
  for (int i = 0; i < this->ranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GhostDupRankDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GhostDupRankDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GhostDupRankDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GhostDupRankDB::MergeFrom(const GhostDupRankDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  ranks_.MergeFrom(from.ranks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GhostDupRankDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GhostDupRankDB::CopyFrom(const GhostDupRankDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GhostDupRankDB::IsInitialized() const {

  return true;
}

void GhostDupRankDB::Swap(GhostDupRankDB* other) {
  if (other != this) {
    ranks_.Swap(&other->ranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GhostDupRankDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GhostDupRankDB_descriptor_;
  metadata.reflection = GhostDupRankDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDBInfo::kBuffidFieldNumber;
const int BuffDBInfo::kIndexFieldNumber;
const int BuffDBInfo::kSkillidFieldNumber;
const int BuffDBInfo::kSkilllevFieldNumber;
const int BuffDBInfo::kIsForeverFieldNumber;
const int BuffDBInfo::kStartmsecFieldNumber;
const int BuffDBInfo::kIsEffectFieldNumber;
const int BuffDBInfo::kParam1FieldNumber;
const int BuffDBInfo::kParam2FieldNumber;
const int BuffDBInfo::kExtramsecFieldNumber;
const int BuffDBInfo::kIsEndFieldNumber;
const int BuffDBInfo::kParam3FieldNumber;
const int BuffDBInfo::kParam4FieldNumber;
const int BuffDBInfo::kParam5FieldNumber;
const int BuffDBInfo::kParam6FieldNumber;
const int BuffDBInfo::kParam7FieldNumber;
#endif  // !_MSC_VER

BuffDBInfo::BuffDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffDBInfo::InitAsDefaultInstance() {
}

BuffDBInfo::BuffDBInfo(const BuffDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffDBInfo::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = GOOGLE_ULONGLONG(0);
  index_ = GOOGLE_ULONGLONG(0);
  skillid_ = GOOGLE_ULONGLONG(0);
  skilllev_ = 0u;
  is_forever_ = false;
  startmsec_ = GOOGLE_LONGLONG(0);
  is_effect_ = false;
  param1_ = GOOGLE_LONGLONG(0);
  param2_ = GOOGLE_LONGLONG(0);
  extramsec_ = GOOGLE_LONGLONG(0);
  is_end_ = 0;
  param3_ = GOOGLE_LONGLONG(0);
  param4_ = GOOGLE_LONGLONG(0);
  param5_ = GOOGLE_LONGLONG(0);
  param6_ = GOOGLE_LONGLONG(0);
  param7_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDBInfo::~BuffDBInfo() {
  SharedDtor();
}

void BuffDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDBInfo_descriptor_;
}

const BuffDBInfo& BuffDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

BuffDBInfo* BuffDBInfo::default_instance_ = NULL;

BuffDBInfo* BuffDBInfo::New() const {
  return new BuffDBInfo;
}

void BuffDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = GOOGLE_ULONGLONG(0);
    index_ = GOOGLE_ULONGLONG(0);
    skillid_ = GOOGLE_ULONGLONG(0);
    skilllev_ = 0u;
    is_forever_ = false;
    startmsec_ = GOOGLE_LONGLONG(0);
    is_effect_ = false;
    param1_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    param2_ = GOOGLE_LONGLONG(0);
    extramsec_ = GOOGLE_LONGLONG(0);
    is_end_ = 0;
    param3_ = GOOGLE_LONGLONG(0);
    param4_ = GOOGLE_LONGLONG(0);
    param5_ = GOOGLE_LONGLONG(0);
    param6_ = GOOGLE_LONGLONG(0);
    param7_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 buffid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // optional uint64 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // optional uint64 skillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_skilllev;
        break;
      }

      // optional uint32 skilllev = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skilllev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skilllev_)));
          set_has_skilllev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_forever;
        break;
      }

      // optional bool is_forever = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_forever:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_forever_)));
          set_has_is_forever();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_startmsec;
        break;
      }

      // optional int64 startmsec = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startmsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &startmsec_)));
          set_has_startmsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_effect;
        break;
      }

      // optional bool is_effect = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_effect_)));
          set_has_is_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_param2;
        break;
      }

      // optional int64 param2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param2_)));
          set_has_param2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_extramsec;
        break;
      }

      // optional int64 extramsec = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extramsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &extramsec_)));
          set_has_extramsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_end;
        break;
      }

      // optional int32 is_end = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_end_)));
          set_has_is_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_param3;
        break;
      }

      // optional int64 param3 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param3_)));
          set_has_param3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_param4;
        break;
      }

      // optional int64 param4 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param4_)));
          set_has_param4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_param5;
        break;
      }

      // optional int64 param5 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param5_)));
          set_has_param5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_param6;
        break;
      }

      // optional int64 param6 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param6_)));
          set_has_param6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_param7;
        break;
      }

      // optional int64 param7 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param7:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param7_)));
          set_has_param7();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 buffid = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buffid(), output);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->index(), output);
  }

  // optional uint64 skillid = 3;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->skillid(), output);
  }

  // optional uint32 skilllev = 4;
  if (has_skilllev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skilllev(), output);
  }

  // optional bool is_forever = 5;
  if (has_is_forever()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_forever(), output);
  }

  // optional int64 startmsec = 6;
  if (has_startmsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->startmsec(), output);
  }

  // optional bool is_effect = 7;
  if (has_is_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_effect(), output);
  }

  // optional int64 param1 = 8;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->param1(), output);
  }

  // optional int64 param2 = 9;
  if (has_param2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->param2(), output);
  }

  // optional int64 extramsec = 10;
  if (has_extramsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->extramsec(), output);
  }

  // optional int32 is_end = 11;
  if (has_is_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->is_end(), output);
  }

  // optional int64 param3 = 12;
  if (has_param3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->param3(), output);
  }

  // optional int64 param4 = 13;
  if (has_param4()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->param4(), output);
  }

  // optional int64 param5 = 14;
  if (has_param5()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->param5(), output);
  }

  // optional int64 param6 = 15;
  if (has_param6()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->param6(), output);
  }

  // optional int64 param7 = 16;
  if (has_param7()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->param7(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 buffid = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buffid(), target);
  }

  // optional uint64 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->index(), target);
  }

  // optional uint64 skillid = 3;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->skillid(), target);
  }

  // optional uint32 skilllev = 4;
  if (has_skilllev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skilllev(), target);
  }

  // optional bool is_forever = 5;
  if (has_is_forever()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_forever(), target);
  }

  // optional int64 startmsec = 6;
  if (has_startmsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->startmsec(), target);
  }

  // optional bool is_effect = 7;
  if (has_is_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_effect(), target);
  }

  // optional int64 param1 = 8;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->param1(), target);
  }

  // optional int64 param2 = 9;
  if (has_param2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->param2(), target);
  }

  // optional int64 extramsec = 10;
  if (has_extramsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->extramsec(), target);
  }

  // optional int32 is_end = 11;
  if (has_is_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->is_end(), target);
  }

  // optional int64 param3 = 12;
  if (has_param3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->param3(), target);
  }

  // optional int64 param4 = 13;
  if (has_param4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->param4(), target);
  }

  // optional int64 param5 = 14;
  if (has_param5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->param5(), target);
  }

  // optional int64 param6 = 15;
  if (has_param6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->param6(), target);
  }

  // optional int64 param7 = 16;
  if (has_param7()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->param7(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 buffid = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffid());
    }

    // optional uint64 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->index());
    }

    // optional uint64 skillid = 3;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->skillid());
    }

    // optional uint32 skilllev = 4;
    if (has_skilllev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skilllev());
    }

    // optional bool is_forever = 5;
    if (has_is_forever()) {
      total_size += 1 + 1;
    }

    // optional int64 startmsec = 6;
    if (has_startmsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->startmsec());
    }

    // optional bool is_effect = 7;
    if (has_is_effect()) {
      total_size += 1 + 1;
    }

    // optional int64 param1 = 8;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 param2 = 9;
    if (has_param2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param2());
    }

    // optional int64 extramsec = 10;
    if (has_extramsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->extramsec());
    }

    // optional int32 is_end = 11;
    if (has_is_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_end());
    }

    // optional int64 param3 = 12;
    if (has_param3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param3());
    }

    // optional int64 param4 = 13;
    if (has_param4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param4());
    }

    // optional int64 param5 = 14;
    if (has_param5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param5());
    }

    // optional int64 param6 = 15;
    if (has_param6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param6());
    }

    // optional int64 param7 = 16;
    if (has_param7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param7());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffDBInfo::MergeFrom(const BuffDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_skilllev()) {
      set_skilllev(from.skilllev());
    }
    if (from.has_is_forever()) {
      set_is_forever(from.is_forever());
    }
    if (from.has_startmsec()) {
      set_startmsec(from.startmsec());
    }
    if (from.has_is_effect()) {
      set_is_effect(from.is_effect());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_param2()) {
      set_param2(from.param2());
    }
    if (from.has_extramsec()) {
      set_extramsec(from.extramsec());
    }
    if (from.has_is_end()) {
      set_is_end(from.is_end());
    }
    if (from.has_param3()) {
      set_param3(from.param3());
    }
    if (from.has_param4()) {
      set_param4(from.param4());
    }
    if (from.has_param5()) {
      set_param5(from.param5());
    }
    if (from.has_param6()) {
      set_param6(from.param6());
    }
    if (from.has_param7()) {
      set_param7(from.param7());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDBInfo::CopyFrom(const BuffDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDBInfo::IsInitialized() const {

  return true;
}

void BuffDBInfo::Swap(BuffDBInfo* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(index_, other->index_);
    std::swap(skillid_, other->skillid_);
    std::swap(skilllev_, other->skilllev_);
    std::swap(is_forever_, other->is_forever_);
    std::swap(startmsec_, other->startmsec_);
    std::swap(is_effect_, other->is_effect_);
    std::swap(param1_, other->param1_);
    std::swap(param2_, other->param2_);
    std::swap(extramsec_, other->extramsec_);
    std::swap(is_end_, other->is_end_);
    std::swap(param3_, other->param3_);
    std::swap(param4_, other->param4_);
    std::swap(param5_, other->param5_);
    std::swap(param6_, other->param6_);
    std::swap(param7_, other->param7_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDBInfo_descriptor_;
  metadata.reflection = BuffDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDBCdInfo::kBuffidFieldNumber;
const int BuffDBCdInfo::kLastmsecFieldNumber;
#endif  // !_MSC_VER

BuffDBCdInfo::BuffDBCdInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffDBCdInfo::InitAsDefaultInstance() {
}

BuffDBCdInfo::BuffDBCdInfo(const BuffDBCdInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffDBCdInfo::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = GOOGLE_ULONGLONG(0);
  lastmsec_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDBCdInfo::~BuffDBCdInfo() {
  SharedDtor();
}

void BuffDBCdInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffDBCdInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDBCdInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDBCdInfo_descriptor_;
}

const BuffDBCdInfo& BuffDBCdInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

BuffDBCdInfo* BuffDBCdInfo::default_instance_ = NULL;

BuffDBCdInfo* BuffDBCdInfo::New() const {
  return new BuffDBCdInfo;
}

void BuffDBCdInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = GOOGLE_ULONGLONG(0);
    lastmsec_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffDBCdInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 buffid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastmsec;
        break;
      }

      // optional uint64 lastmsec = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastmsec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastmsec_)));
          set_has_lastmsec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffDBCdInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 buffid = 1;
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->buffid(), output);
  }

  // optional uint64 lastmsec = 2;
  if (has_lastmsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastmsec(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffDBCdInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 buffid = 1;
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->buffid(), target);
  }

  // optional uint64 lastmsec = 2;
  if (has_lastmsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastmsec(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffDBCdInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 buffid = 1;
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buffid());
    }

    // optional uint64 lastmsec = 2;
    if (has_lastmsec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastmsec());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDBCdInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDBCdInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDBCdInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffDBCdInfo::MergeFrom(const BuffDBCdInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_lastmsec()) {
      set_lastmsec(from.lastmsec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffDBCdInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDBCdInfo::CopyFrom(const BuffDBCdInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDBCdInfo::IsInitialized() const {

  return true;
}

void BuffDBCdInfo::Swap(BuffDBCdInfo* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(lastmsec_, other->lastmsec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffDBCdInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDBCdInfo_descriptor_;
  metadata.reflection = BuffDBCdInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDBShieldInfo::kGodShieldFieldNumber;
const int BuffDBShieldInfo::kMagShieldFieldNumber;
#endif  // !_MSC_VER

BuffDBShieldInfo::BuffDBShieldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffDBShieldInfo::InitAsDefaultInstance() {
}

BuffDBShieldInfo::BuffDBShieldInfo(const BuffDBShieldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffDBShieldInfo::SharedCtor() {
  _cached_size_ = 0;
  god_shield_ = GOOGLE_LONGLONG(0);
  mag_shield_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDBShieldInfo::~BuffDBShieldInfo() {
  SharedDtor();
}

void BuffDBShieldInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffDBShieldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDBShieldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDBShieldInfo_descriptor_;
}

const BuffDBShieldInfo& BuffDBShieldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

BuffDBShieldInfo* BuffDBShieldInfo::default_instance_ = NULL;

BuffDBShieldInfo* BuffDBShieldInfo::New() const {
  return new BuffDBShieldInfo;
}

void BuffDBShieldInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    god_shield_ = GOOGLE_LONGLONG(0);
    mag_shield_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffDBShieldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 god_shield = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &god_shield_)));
          set_has_god_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mag_shield;
        break;
      }

      // optional int64 mag_shield = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mag_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mag_shield_)));
          set_has_mag_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffDBShieldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 god_shield = 1;
  if (has_god_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->god_shield(), output);
  }

  // optional int64 mag_shield = 2;
  if (has_mag_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mag_shield(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffDBShieldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 god_shield = 1;
  if (has_god_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->god_shield(), target);
  }

  // optional int64 mag_shield = 2;
  if (has_mag_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mag_shield(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffDBShieldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 god_shield = 1;
    if (has_god_shield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->god_shield());
    }

    // optional int64 mag_shield = 2;
    if (has_mag_shield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mag_shield());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDBShieldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDBShieldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDBShieldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffDBShieldInfo::MergeFrom(const BuffDBShieldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_god_shield()) {
      set_god_shield(from.god_shield());
    }
    if (from.has_mag_shield()) {
      set_mag_shield(from.mag_shield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffDBShieldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDBShieldInfo::CopyFrom(const BuffDBShieldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDBShieldInfo::IsInitialized() const {

  return true;
}

void BuffDBShieldInfo::Swap(BuffDBShieldInfo* other) {
  if (other != this) {
    std::swap(god_shield_, other->god_shield_);
    std::swap(mag_shield_, other->mag_shield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffDBShieldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDBShieldInfo_descriptor_;
  metadata.reflection = BuffDBShieldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffDBData::kInfoLstFieldNumber;
const int BuffDBData::kCdLstFieldNumber;
const int BuffDBData::kShieldFieldNumber;
#endif  // !_MSC_VER

BuffDBData::BuffDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffDBData::InitAsDefaultInstance() {
  shield_ = const_cast< ::proto_ff::BuffDBShieldInfo*>(&::proto_ff::BuffDBShieldInfo::default_instance());
}

BuffDBData::BuffDBData(const BuffDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffDBData::SharedCtor() {
  _cached_size_ = 0;
  shield_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffDBData::~BuffDBData() {
  SharedDtor();
}

void BuffDBData::SharedDtor() {
  if (this != default_instance_) {
    delete shield_;
  }
}

void BuffDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffDBData_descriptor_;
}

const BuffDBData& BuffDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

BuffDBData* BuffDBData::default_instance_ = NULL;

BuffDBData* BuffDBData::New() const {
  return new BuffDBData;
}

void BuffDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_shield()) {
      if (shield_ != NULL) shield_->::proto_ff::BuffDBShieldInfo::Clear();
    }
  }
  info_lst_.Clear();
  cd_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BuffDBInfo info_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_lst;
        if (input->ExpectTag(18)) goto parse_cd_lst;
        break;
      }

      // repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cd_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cd_lst;
        if (input->ExpectTag(26)) goto parse_shield;
        break;
      }

      // optional .proto_ff.BuffDBShieldInfo shield = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shield:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shield()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BuffDBInfo info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_lst(i), output);
  }

  // repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
  for (int i = 0; i < this->cd_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cd_lst(i), output);
  }

  // optional .proto_ff.BuffDBShieldInfo shield = 3;
  if (has_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shield(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BuffDBInfo info_lst = 1;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_lst(i), target);
  }

  // repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
  for (int i = 0; i < this->cd_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cd_lst(i), target);
  }

  // optional .proto_ff.BuffDBShieldInfo shield = 3;
  if (has_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shield(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .proto_ff.BuffDBShieldInfo shield = 3;
    if (has_shield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shield());
    }

  }
  // repeated .proto_ff.BuffDBInfo info_lst = 1;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  // repeated .proto_ff.BuffDBCdInfo cd_lst = 2;
  total_size += 1 * this->cd_lst_size();
  for (int i = 0; i < this->cd_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cd_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffDBData::MergeFrom(const BuffDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  cd_lst_.MergeFrom(from.cd_lst_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_shield()) {
      mutable_shield()->::proto_ff::BuffDBShieldInfo::MergeFrom(from.shield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffDBData::CopyFrom(const BuffDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffDBData::IsInitialized() const {

  return true;
}

void BuffDBData::Swap(BuffDBData* other) {
  if (other != this) {
    info_lst_.Swap(&other->info_lst_);
    cd_lst_.Swap(&other->cd_lst_);
    std::swap(shield_, other->shield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffDBData_descriptor_;
  metadata.reflection = BuffDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossSimpleInfoDB::kBossTypeFieldNumber;
const int BossSimpleInfoDB::kCurNumFieldNumber;
const int BossSimpleInfoDB::kBackNumFieldNumber;
const int BossSimpleInfoDB::kBackMaxNumFieldNumber;
const int BossSimpleInfoDB::kEnterNumFieldNumber;
const int BossSimpleInfoDB::kUseItemNumFieldNumber;
const int BossSimpleInfoDB::kGroupInfoFieldNumber;
#endif  // !_MSC_VER

BossSimpleInfoDB::BossSimpleInfoDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossSimpleInfoDB::InitAsDefaultInstance() {
}

BossSimpleInfoDB::BossSimpleInfoDB(const BossSimpleInfoDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossSimpleInfoDB::SharedCtor() {
  _cached_size_ = 0;
  boss_type_ = 0;
  cur_num_ = 0;
  back_num_ = 0;
  back_max_num_ = 0;
  enter_num_ = 0;
  use_item_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossSimpleInfoDB::~BossSimpleInfoDB() {
  SharedDtor();
}

void BossSimpleInfoDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossSimpleInfoDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossSimpleInfoDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossSimpleInfoDB_descriptor_;
}

const BossSimpleInfoDB& BossSimpleInfoDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

BossSimpleInfoDB* BossSimpleInfoDB::default_instance_ = NULL;

BossSimpleInfoDB* BossSimpleInfoDB::New() const {
  return new BossSimpleInfoDB;
}

void BossSimpleInfoDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_type_ = 0;
    cur_num_ = 0;
    back_num_ = 0;
    back_max_num_ = 0;
    enter_num_ = 0;
    use_item_num_ = 0;
  }
  groupinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossSimpleInfoDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boss_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_type_)));
          set_has_boss_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur_num;
        break;
      }

      // optional int32 cur_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_num_)));
          set_has_cur_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_back_num;
        break;
      }

      // optional int32 back_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_num_)));
          set_has_back_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_back_max_num;
        break;
      }

      // optional int32 back_max_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_back_max_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &back_max_num_)));
          set_has_back_max_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_enter_num;
        break;
      }

      // optional int32 enter_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_num_)));
          set_has_enter_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_use_item_num;
        break;
      }

      // optional int32 use_item_num = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &use_item_num_)));
          set_has_use_item_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_groupInfo;
        break;
      }

      // repeated .proto_ff.ComPair groupInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_groupInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossSimpleInfoDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boss_type = 1;
  if (has_boss_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boss_type(), output);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur_num(), output);
  }

  // optional int32 back_num = 4;
  if (has_back_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->back_num(), output);
  }

  // optional int32 back_max_num = 5;
  if (has_back_max_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->back_max_num(), output);
  }

  // optional int32 enter_num = 6;
  if (has_enter_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->enter_num(), output);
  }

  // optional int32 use_item_num = 7;
  if (has_use_item_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->use_item_num(), output);
  }

  // repeated .proto_ff.ComPair groupInfo = 8;
  for (int i = 0; i < this->groupinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->groupinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossSimpleInfoDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boss_type = 1;
  if (has_boss_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boss_type(), target);
  }

  // optional int32 cur_num = 2;
  if (has_cur_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur_num(), target);
  }

  // optional int32 back_num = 4;
  if (has_back_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->back_num(), target);
  }

  // optional int32 back_max_num = 5;
  if (has_back_max_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->back_max_num(), target);
  }

  // optional int32 enter_num = 6;
  if (has_enter_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->enter_num(), target);
  }

  // optional int32 use_item_num = 7;
  if (has_use_item_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->use_item_num(), target);
  }

  // repeated .proto_ff.ComPair groupInfo = 8;
  for (int i = 0; i < this->groupinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->groupinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossSimpleInfoDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boss_type = 1;
    if (has_boss_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss_type());
    }

    // optional int32 cur_num = 2;
    if (has_cur_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_num());
    }

    // optional int32 back_num = 4;
    if (has_back_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->back_num());
    }

    // optional int32 back_max_num = 5;
    if (has_back_max_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->back_max_num());
    }

    // optional int32 enter_num = 6;
    if (has_enter_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter_num());
    }

    // optional int32 use_item_num = 7;
    if (has_use_item_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->use_item_num());
    }

  }
  // repeated .proto_ff.ComPair groupInfo = 8;
  total_size += 1 * this->groupinfo_size();
  for (int i = 0; i < this->groupinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossSimpleInfoDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossSimpleInfoDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossSimpleInfoDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossSimpleInfoDB::MergeFrom(const BossSimpleInfoDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupinfo_.MergeFrom(from.groupinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss_type()) {
      set_boss_type(from.boss_type());
    }
    if (from.has_cur_num()) {
      set_cur_num(from.cur_num());
    }
    if (from.has_back_num()) {
      set_back_num(from.back_num());
    }
    if (from.has_back_max_num()) {
      set_back_max_num(from.back_max_num());
    }
    if (from.has_enter_num()) {
      set_enter_num(from.enter_num());
    }
    if (from.has_use_item_num()) {
      set_use_item_num(from.use_item_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossSimpleInfoDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossSimpleInfoDB::CopyFrom(const BossSimpleInfoDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossSimpleInfoDB::IsInitialized() const {

  return true;
}

void BossSimpleInfoDB::Swap(BossSimpleInfoDB* other) {
  if (other != this) {
    std::swap(boss_type_, other->boss_type_);
    std::swap(cur_num_, other->cur_num_);
    std::swap(back_num_, other->back_num_);
    std::swap(back_max_num_, other->back_max_num_);
    std::swap(enter_num_, other->enter_num_);
    std::swap(use_item_num_, other->use_item_num_);
    groupinfo_.Swap(&other->groupinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossSimpleInfoDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossSimpleInfoDB_descriptor_;
  metadata.reflection = BossSimpleInfoDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDBData::kInfosFieldNumber;
const int BossDBData::kLastTimeFieldNumber;
const int BossDBData::kAttentsFieldNumber;
#endif  // !_MSC_VER

BossDBData::BossDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDBData::InitAsDefaultInstance() {
}

BossDBData::BossDBData(const BossDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDBData::SharedCtor() {
  _cached_size_ = 0;
  lasttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDBData::~BossDBData() {
  SharedDtor();
}

void BossDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDBData_descriptor_;
}

const BossDBData& BossDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

BossDBData* BossDBData::default_instance_ = NULL;

BossDBData* BossDBData::New() const {
  return new BossDBData;
}

void BossDBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    lasttime_ = GOOGLE_ULONGLONG(0);
  }
  infos_.Clear();
  attents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BossSimpleInfoDB infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_lastTime;
        break;
      }

      // optional uint64 lastTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attents;
        break;
      }

      // repeated int64 attents = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_attents())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_attents())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attents;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BossSimpleInfoDB infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // optional uint64 lastTime = 2;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lasttime(), output);
  }

  // repeated int64 attents = 3;
  for (int i = 0; i < this->attents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->attents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BossSimpleInfoDB infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // optional uint64 lastTime = 2;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lasttime(), target);
  }

  // repeated int64 attents = 3;
  for (int i = 0; i < this->attents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->attents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 lastTime = 2;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

  }
  // repeated .proto_ff.BossSimpleInfoDB infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  // repeated int64 attents = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->attents_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->attents(i));
    }
    total_size += 1 * this->attents_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDBData::MergeFrom(const BossDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  attents_.MergeFrom(from.attents_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDBData::CopyFrom(const BossDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDBData::IsInitialized() const {

  return true;
}

void BossDBData::Swap(BossDBData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(lasttime_, other->lasttime_);
    attents_.Swap(&other->attents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDBData_descriptor_;
  metadata.reflection = BossDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipDBData::kVipExpFieldNumber;
const int VipDBData::kExpDiamondFieldNumber;
const int VipDBData::kPrivilegeIdsFieldNumber;
const int VipDBData::kVipHideFieldNumber;
const int VipDBData::kActiveTypeFieldNumber;
const int VipDBData::kOuttimeFieldNumber;
const int VipDBData::kLastRecvDayGiftTimeFieldNumber;
const int VipDBData::kLvGiftFieldNumber;
const int VipDBData::kZeroStateFieldNumber;
const int VipDBData::kRecvZeroFieldNumber;
const int VipDBData::kAddExpFieldNumber;
const int VipDBData::kRecvExpFieldNumber;
const int VipDBData::kRefreshTimeFieldNumber;
const int VipDBData::kActiveTimeFieldNumber;
#endif  // !_MSC_VER

VipDBData::VipDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipDBData::InitAsDefaultInstance() {
}

VipDBData::VipDBData(const VipDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipDBData::SharedCtor() {
  _cached_size_ = 0;
  vipexp_ = 0;
  expdiamond_ = 0;
  vip_hide_ = 0;
  active_type_ = 0;
  outtime_ = GOOGLE_ULONGLONG(0);
  last_recv_day_gift_time_ = GOOGLE_ULONGLONG(0);
  zero_state_ = 0;
  recv_zero_ = 0;
  add_exp_ = GOOGLE_ULONGLONG(0);
  recv_exp_ = 0;
  refresh_time_ = GOOGLE_ULONGLONG(0);
  active_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipDBData::~VipDBData() {
  SharedDtor();
}

void VipDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipDBData_descriptor_;
}

const VipDBData& VipDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

VipDBData* VipDBData::default_instance_ = NULL;

VipDBData* VipDBData::New() const {
  return new VipDBData;
}

void VipDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    vipexp_ = 0;
    expdiamond_ = 0;
    vip_hide_ = 0;
    active_type_ = 0;
    outtime_ = GOOGLE_ULONGLONG(0);
    last_recv_day_gift_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    zero_state_ = 0;
    recv_zero_ = 0;
    add_exp_ = GOOGLE_ULONGLONG(0);
    recv_exp_ = 0;
    refresh_time_ = GOOGLE_ULONGLONG(0);
    active_time_ = GOOGLE_ULONGLONG(0);
  }
  privilege_ids_.Clear();
  lv_gift_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vipExp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_expDiamond;
        break;
      }

      // optional int32 expDiamond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expdiamond_)));
          set_has_expdiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_privilege_ids;
        break;
      }

      // repeated int32 privilege_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilege_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_privilege_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_privilege_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_privilege_ids;
        if (input->ExpectTag(32)) goto parse_vip_hide;
        break;
      }

      // optional int32 vip_hide = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_hide_)));
          set_has_vip_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_active_type;
        break;
      }

      // optional int32 active_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_type_)));
          set_has_active_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_outtime;
        break;
      }

      // optional uint64 outtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_outtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &outtime_)));
          set_has_outtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_last_recv_day_gift_time;
        break;
      }

      // optional uint64 last_recv_day_gift_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_recv_day_gift_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_recv_day_gift_time_)));
          set_has_last_recv_day_gift_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lv_gift;
        break;
      }

      // repeated int32 lv_gift = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv_gift:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_lv_gift())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lv_gift())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lv_gift;
        if (input->ExpectTag(72)) goto parse_zero_state;
        break;
      }

      // optional int32 zero_state = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zero_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zero_state_)));
          set_has_zero_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_recv_zero;
        break;
      }

      // optional int32 recv_zero = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_zero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_zero_)));
          set_has_recv_zero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_add_exp;
        break;
      }

      // optional uint64 add_exp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_add_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &add_exp_)));
          set_has_add_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_recv_exp;
        break;
      }

      // optional int32 recv_exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_exp_)));
          set_has_recv_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_refresh_time;
        break;
      }

      // optional uint64 refresh_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_active_time;
        break;
      }

      // optional uint64 active_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &active_time_)));
          set_has_active_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vipExp = 1;
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->vipexp(), output);
  }

  // optional int32 expDiamond = 2;
  if (has_expdiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->expdiamond(), output);
  }

  // repeated int32 privilege_ids = 3;
  for (int i = 0; i < this->privilege_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->privilege_ids(i), output);
  }

  // optional int32 vip_hide = 4;
  if (has_vip_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->vip_hide(), output);
  }

  // optional int32 active_type = 5;
  if (has_active_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->active_type(), output);
  }

  // optional uint64 outtime = 6;
  if (has_outtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->outtime(), output);
  }

  // optional uint64 last_recv_day_gift_time = 7;
  if (has_last_recv_day_gift_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->last_recv_day_gift_time(), output);
  }

  // repeated int32 lv_gift = 8;
  for (int i = 0; i < this->lv_gift_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->lv_gift(i), output);
  }

  // optional int32 zero_state = 9;
  if (has_zero_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->zero_state(), output);
  }

  // optional int32 recv_zero = 10;
  if (has_recv_zero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->recv_zero(), output);
  }

  // optional uint64 add_exp = 11;
  if (has_add_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->add_exp(), output);
  }

  // optional int32 recv_exp = 12;
  if (has_recv_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->recv_exp(), output);
  }

  // optional uint64 refresh_time = 13;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->refresh_time(), output);
  }

  // optional uint64 active_time = 14;
  if (has_active_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->active_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 vipExp = 1;
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->vipexp(), target);
  }

  // optional int32 expDiamond = 2;
  if (has_expdiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->expdiamond(), target);
  }

  // repeated int32 privilege_ids = 3;
  for (int i = 0; i < this->privilege_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->privilege_ids(i), target);
  }

  // optional int32 vip_hide = 4;
  if (has_vip_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->vip_hide(), target);
  }

  // optional int32 active_type = 5;
  if (has_active_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->active_type(), target);
  }

  // optional uint64 outtime = 6;
  if (has_outtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->outtime(), target);
  }

  // optional uint64 last_recv_day_gift_time = 7;
  if (has_last_recv_day_gift_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->last_recv_day_gift_time(), target);
  }

  // repeated int32 lv_gift = 8;
  for (int i = 0; i < this->lv_gift_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->lv_gift(i), target);
  }

  // optional int32 zero_state = 9;
  if (has_zero_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->zero_state(), target);
  }

  // optional int32 recv_zero = 10;
  if (has_recv_zero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->recv_zero(), target);
  }

  // optional uint64 add_exp = 11;
  if (has_add_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->add_exp(), target);
  }

  // optional int32 recv_exp = 12;
  if (has_recv_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->recv_exp(), target);
  }

  // optional uint64 refresh_time = 13;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->refresh_time(), target);
  }

  // optional uint64 active_time = 14;
  if (has_active_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->active_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vipExp = 1;
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexp());
    }

    // optional int32 expDiamond = 2;
    if (has_expdiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expdiamond());
    }

    // optional int32 vip_hide = 4;
    if (has_vip_hide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_hide());
    }

    // optional int32 active_type = 5;
    if (has_active_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_type());
    }

    // optional uint64 outtime = 6;
    if (has_outtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->outtime());
    }

    // optional uint64 last_recv_day_gift_time = 7;
    if (has_last_recv_day_gift_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_recv_day_gift_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 zero_state = 9;
    if (has_zero_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zero_state());
    }

    // optional int32 recv_zero = 10;
    if (has_recv_zero()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recv_zero());
    }

    // optional uint64 add_exp = 11;
    if (has_add_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->add_exp());
    }

    // optional int32 recv_exp = 12;
    if (has_recv_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recv_exp());
    }

    // optional uint64 refresh_time = 13;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refresh_time());
    }

    // optional uint64 active_time = 14;
    if (has_active_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->active_time());
    }

  }
  // repeated int32 privilege_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->privilege_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->privilege_ids(i));
    }
    total_size += 1 * this->privilege_ids_size() + data_size;
  }

  // repeated int32 lv_gift = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->lv_gift_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lv_gift(i));
    }
    total_size += 1 * this->lv_gift_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipDBData::MergeFrom(const VipDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  privilege_ids_.MergeFrom(from.privilege_ids_);
  lv_gift_.MergeFrom(from.lv_gift_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_expdiamond()) {
      set_expdiamond(from.expdiamond());
    }
    if (from.has_vip_hide()) {
      set_vip_hide(from.vip_hide());
    }
    if (from.has_active_type()) {
      set_active_type(from.active_type());
    }
    if (from.has_outtime()) {
      set_outtime(from.outtime());
    }
    if (from.has_last_recv_day_gift_time()) {
      set_last_recv_day_gift_time(from.last_recv_day_gift_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zero_state()) {
      set_zero_state(from.zero_state());
    }
    if (from.has_recv_zero()) {
      set_recv_zero(from.recv_zero());
    }
    if (from.has_add_exp()) {
      set_add_exp(from.add_exp());
    }
    if (from.has_recv_exp()) {
      set_recv_exp(from.recv_exp());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_active_time()) {
      set_active_time(from.active_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipDBData::CopyFrom(const VipDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipDBData::IsInitialized() const {

  return true;
}

void VipDBData::Swap(VipDBData* other) {
  if (other != this) {
    std::swap(vipexp_, other->vipexp_);
    std::swap(expdiamond_, other->expdiamond_);
    privilege_ids_.Swap(&other->privilege_ids_);
    std::swap(vip_hide_, other->vip_hide_);
    std::swap(active_type_, other->active_type_);
    std::swap(outtime_, other->outtime_);
    std::swap(last_recv_day_gift_time_, other->last_recv_day_gift_time_);
    lv_gift_.Swap(&other->lv_gift_);
    std::swap(zero_state_, other->zero_state_);
    std::swap(recv_zero_, other->recv_zero_);
    std::swap(add_exp_, other->add_exp_);
    std::swap(recv_exp_, other->recv_exp_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(active_time_, other->active_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipDBData_descriptor_;
  metadata.reflection = VipDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrDBData::kAttrLstFieldNumber;
#endif  // !_MSC_VER

AttrDBData::AttrDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrDBData::InitAsDefaultInstance() {
}

AttrDBData::AttrDBData(const AttrDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrDBData::~AttrDBData() {
  SharedDtor();
}

void AttrDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrDBData_descriptor_;
}

const AttrDBData& AttrDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

AttrDBData* AttrDBData::default_instance_ = NULL;

AttrDBData* AttrDBData::New() const {
  return new AttrDBData;
}

void AttrDBData::Clear() {
  attr_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Attr64 attr_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attr_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Attr64 attr_lst = 1;
  for (int i = 0; i < this->attr_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Attr64 attr_lst = 1;
  for (int i = 0; i < this->attr_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attr_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.Attr64 attr_lst = 1;
  total_size += 1 * this->attr_lst_size();
  for (int i = 0; i < this->attr_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrDBData::MergeFrom(const AttrDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_lst_.MergeFrom(from.attr_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrDBData::CopyFrom(const AttrDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrDBData::IsInitialized() const {

  for (int i = 0; i < attr_lst_size(); i++) {
    if (!this->attr_lst(i).IsInitialized()) return false;
  }
  return true;
}

void AttrDBData::Swap(AttrDBData* other) {
  if (other != this) {
    attr_lst_.Swap(&other->attr_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrDBData_descriptor_;
  metadata.reflection = AttrDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetDBRecord::kInstIdFieldNumber;
const int PetDBRecord::kCostItemFieldNumber;
const int PetDBRecord::kCostPetFieldNumber;
#endif  // !_MSC_VER

PetDBRecord::PetDBRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetDBRecord::InitAsDefaultInstance() {
}

PetDBRecord::PetDBRecord(const PetDBRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetDBRecord::SharedCtor() {
  _cached_size_ = 0;
  instid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetDBRecord::~PetDBRecord() {
  SharedDtor();
}

void PetDBRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetDBRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetDBRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetDBRecord_descriptor_;
}

const PetDBRecord& PetDBRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

PetDBRecord* PetDBRecord::default_instance_ = NULL;

PetDBRecord* PetDBRecord::New() const {
  return new PetDBRecord;
}

void PetDBRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instid_ = 0;
  }
  costitem_.Clear();
  costpet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetDBRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 instId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_costItem;
        break;
      }

      // repeated .proto_ff.ComPair64 costItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_costItem;
        if (input->ExpectTag(26)) goto parse_costPet;
        break;
      }

      // repeated .proto_ff.ComPair64 costPet = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_costPet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_costpet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_costPet;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetDBRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instid(), output);
  }

  // repeated .proto_ff.ComPair64 costItem = 2;
  for (int i = 0; i < this->costitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->costitem(i), output);
  }

  // repeated .proto_ff.ComPair64 costPet = 3;
  for (int i = 0; i < this->costpet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->costpet(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetDBRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 instId = 1;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instid(), target);
  }

  // repeated .proto_ff.ComPair64 costItem = 2;
  for (int i = 0; i < this->costitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->costitem(i), target);
  }

  // repeated .proto_ff.ComPair64 costPet = 3;
  for (int i = 0; i < this->costpet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->costpet(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetDBRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 instId = 1;
    if (has_instid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  // repeated .proto_ff.ComPair64 costItem = 2;
  total_size += 1 * this->costitem_size();
  for (int i = 0; i < this->costitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costitem(i));
  }

  // repeated .proto_ff.ComPair64 costPet = 3;
  total_size += 1 * this->costpet_size();
  for (int i = 0; i < this->costpet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->costpet(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetDBRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetDBRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetDBRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetDBRecord::MergeFrom(const PetDBRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  costitem_.MergeFrom(from.costitem_);
  costpet_.MergeFrom(from.costpet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetDBRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetDBRecord::CopyFrom(const PetDBRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetDBRecord::IsInitialized() const {

  return true;
}

void PetDBRecord::Swap(PetDBRecord* other) {
  if (other != this) {
    std::swap(instid_, other->instid_);
    costitem_.Swap(&other->costitem_);
    costpet_.Swap(&other->costpet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetDBRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetDBRecord_descriptor_;
  metadata.reflection = PetDBRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetGrowDB::kCfgidFieldNumber;
const int PetGrowDB::kStronglvFieldNumber;
const int PetGrowDB::kStarlvFieldNumber;
const int PetGrowDB::kStarindexFieldNumber;
const int PetGrowDB::kFailnumFieldNumber;
#endif  // !_MSC_VER

PetGrowDB::PetGrowDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetGrowDB::InitAsDefaultInstance() {
}

PetGrowDB::PetGrowDB(const PetGrowDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetGrowDB::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = 0;
  stronglv_ = 0;
  starlv_ = 0;
  starindex_ = 0;
  failnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetGrowDB::~PetGrowDB() {
  SharedDtor();
}

void PetGrowDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PetGrowDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetGrowDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetGrowDB_descriptor_;
}

const PetGrowDB& PetGrowDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

PetGrowDB* PetGrowDB::default_instance_ = NULL;

PetGrowDB* PetGrowDB::New() const {
  return new PetGrowDB;
}

void PetGrowDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = 0;
    stronglv_ = 0;
    starlv_ = 0;
    starindex_ = 0;
    failnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetGrowDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cfgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stronglv;
        break;
      }

      // optional int32 stronglv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stronglv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stronglv_)));
          set_has_stronglv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_starlv;
        break;
      }

      // optional int32 starlv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starlv_)));
          set_has_starlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_starindex;
        break;
      }

      // optional int32 starindex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starindex_)));
          set_has_starindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_failnum;
        break;
      }

      // optional int32 failnum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_failnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &failnum_)));
          set_has_failnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetGrowDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cfgid = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cfgid(), output);
  }

  // optional int32 stronglv = 2;
  if (has_stronglv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->stronglv(), output);
  }

  // optional int32 starlv = 3;
  if (has_starlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starlv(), output);
  }

  // optional int32 starindex = 4;
  if (has_starindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starindex(), output);
  }

  // optional int32 failnum = 5;
  if (has_failnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->failnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetGrowDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cfgid = 1;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cfgid(), target);
  }

  // optional int32 stronglv = 2;
  if (has_stronglv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->stronglv(), target);
  }

  // optional int32 starlv = 3;
  if (has_starlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starlv(), target);
  }

  // optional int32 starindex = 4;
  if (has_starindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starindex(), target);
  }

  // optional int32 failnum = 5;
  if (has_failnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->failnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetGrowDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cfgid = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfgid());
    }

    // optional int32 stronglv = 2;
    if (has_stronglv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stronglv());
    }

    // optional int32 starlv = 3;
    if (has_starlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starlv());
    }

    // optional int32 starindex = 4;
    if (has_starindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starindex());
    }

    // optional int32 failnum = 5;
    if (has_failnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->failnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetGrowDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetGrowDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetGrowDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetGrowDB::MergeFrom(const PetGrowDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_stronglv()) {
      set_stronglv(from.stronglv());
    }
    if (from.has_starlv()) {
      set_starlv(from.starlv());
    }
    if (from.has_starindex()) {
      set_starindex(from.starindex());
    }
    if (from.has_failnum()) {
      set_failnum(from.failnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetGrowDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetGrowDB::CopyFrom(const PetGrowDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetGrowDB::IsInitialized() const {

  return true;
}

void PetGrowDB::Swap(PetGrowDB* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(stronglv_, other->stronglv_);
    std::swap(starlv_, other->starlv_);
    std::swap(starindex_, other->starindex_);
    std::swap(failnum_, other->failnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetGrowDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetGrowDB_descriptor_;
  metadata.reflection = PetGrowDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PetDBData::kFetterFieldNumber;
const int PetDBData::kPetsFieldNumber;
const int PetDBData::kHatchsFieldNumber;
const int PetDBData::kRecordsFieldNumber;
const int PetDBData::kCfgidsFieldNumber;
const int PetDBData::kGrowsFieldNumber;
const int PetDBData::kYaohunFieldNumber;
#endif  // !_MSC_VER

PetDBData::PetDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PetDBData::InitAsDefaultInstance() {
  yaohun_ = const_cast< ::proto_ff::PetYaoHunModule*>(&::proto_ff::PetYaoHunModule::default_instance());
}

PetDBData::PetDBData(const PetDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PetDBData::SharedCtor() {
  _cached_size_ = 0;
  yaohun_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PetDBData::~PetDBData() {
  SharedDtor();
}

void PetDBData::SharedDtor() {
  if (this != default_instance_) {
    delete yaohun_;
  }
}

void PetDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PetDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PetDBData_descriptor_;
}

const PetDBData& PetDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

PetDBData* PetDBData::default_instance_ = NULL;

PetDBData* PetDBData::New() const {
  return new PetDBData;
}

void PetDBData::Clear() {
  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (has_yaohun()) {
      if (yaohun_ != NULL) yaohun_->::proto_ff::PetYaoHunModule::Clear();
    }
  }
  fetter_.Clear();
  pets_.Clear();
  hatchs_.Clear();
  records_.Clear();
  cfgids_.Clear();
  grows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PetDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fetter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fetter())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetter())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fetter;
        if (input->ExpectTag(18)) goto parse_pets;
        break;
      }

      // repeated .proto_ff.PetInfo pets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pets;
        if (input->ExpectTag(26)) goto parse_hatchs;
        break;
      }

      // repeated .proto_ff.PetHatchInfo hatchs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hatchs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hatchs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_hatchs;
        if (input->ExpectTag(34)) goto parse_records;
        break;
      }

      // repeated .proto_ff.PetDBRecord records = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_records:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_records()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_records;
        if (input->ExpectTag(40)) goto parse_cfgids;
        break;
      }

      // repeated int64 cfgids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_cfgids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cfgids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cfgids;
        if (input->ExpectTag(50)) goto parse_grows;
        break;
      }

      // repeated .proto_ff.PetGrowDB grows = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_grows;
        if (input->ExpectTag(58)) goto parse_yaohun;
        break;
      }

      // optional .proto_ff.PetYaoHunModule yaohun = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yaohun:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yaohun()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PetDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fetter = 1;
  for (int i = 0; i < this->fetter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fetter(i), output);
  }

  // repeated .proto_ff.PetInfo pets = 2;
  for (int i = 0; i < this->pets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pets(i), output);
  }

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  for (int i = 0; i < this->hatchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->hatchs(i), output);
  }

  // repeated .proto_ff.PetDBRecord records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->records(i), output);
  }

  // repeated int64 cfgids = 5;
  for (int i = 0; i < this->cfgids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->cfgids(i), output);
  }

  // repeated .proto_ff.PetGrowDB grows = 6;
  for (int i = 0; i < this->grows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->grows(i), output);
  }

  // optional .proto_ff.PetYaoHunModule yaohun = 7;
  if (has_yaohun()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->yaohun(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PetDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 fetter = 1;
  for (int i = 0; i < this->fetter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fetter(i), target);
  }

  // repeated .proto_ff.PetInfo pets = 2;
  for (int i = 0; i < this->pets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pets(i), target);
  }

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  for (int i = 0; i < this->hatchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->hatchs(i), target);
  }

  // repeated .proto_ff.PetDBRecord records = 4;
  for (int i = 0; i < this->records_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->records(i), target);
  }

  // repeated int64 cfgids = 5;
  for (int i = 0; i < this->cfgids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->cfgids(i), target);
  }

  // repeated .proto_ff.PetGrowDB grows = 6;
  for (int i = 0; i < this->grows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->grows(i), target);
  }

  // optional .proto_ff.PetYaoHunModule yaohun = 7;
  if (has_yaohun()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->yaohun(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PetDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    // optional .proto_ff.PetYaoHunModule yaohun = 7;
    if (has_yaohun()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yaohun());
    }

  }
  // repeated int32 fetter = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetter_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetter(i));
    }
    total_size += 1 * this->fetter_size() + data_size;
  }

  // repeated .proto_ff.PetInfo pets = 2;
  total_size += 1 * this->pets_size();
  for (int i = 0; i < this->pets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pets(i));
  }

  // repeated .proto_ff.PetHatchInfo hatchs = 3;
  total_size += 1 * this->hatchs_size();
  for (int i = 0; i < this->hatchs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hatchs(i));
  }

  // repeated .proto_ff.PetDBRecord records = 4;
  total_size += 1 * this->records_size();
  for (int i = 0; i < this->records_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->records(i));
  }

  // repeated int64 cfgids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->cfgids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cfgids(i));
    }
    total_size += 1 * this->cfgids_size() + data_size;
  }

  // repeated .proto_ff.PetGrowDB grows = 6;
  total_size += 1 * this->grows_size();
  for (int i = 0; i < this->grows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grows(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PetDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PetDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PetDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PetDBData::MergeFrom(const PetDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetter_.MergeFrom(from.fetter_);
  pets_.MergeFrom(from.pets_);
  hatchs_.MergeFrom(from.hatchs_);
  records_.MergeFrom(from.records_);
  cfgids_.MergeFrom(from.cfgids_);
  grows_.MergeFrom(from.grows_);
  if (from._has_bits_[6 / 32] & (0xffu << (6 % 32))) {
    if (from.has_yaohun()) {
      mutable_yaohun()->::proto_ff::PetYaoHunModule::MergeFrom(from.yaohun());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PetDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PetDBData::CopyFrom(const PetDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PetDBData::IsInitialized() const {

  if (has_yaohun()) {
    if (!this->yaohun().IsInitialized()) return false;
  }
  return true;
}

void PetDBData::Swap(PetDBData* other) {
  if (other != this) {
    fetter_.Swap(&other->fetter_);
    pets_.Swap(&other->pets_);
    hatchs_.Swap(&other->hatchs_);
    records_.Swap(&other->records_);
    cfgids_.Swap(&other->cfgids_);
    grows_.Swap(&other->grows_);
    std::swap(yaohun_, other->yaohun_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PetDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PetDBData_descriptor_;
  metadata.reflection = PetDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallDBInfo::kIdFieldNumber;
const int MallDBInfo::kNumFieldNumber;
const int MallDBInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

MallDBInfo::MallDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallDBInfo::InitAsDefaultInstance() {
}

MallDBInfo::MallDBInfo(const MallDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallDBInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  num_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallDBInfo::~MallDBInfo() {
  SharedDtor();
}

void MallDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallDBInfo_descriptor_;
}

const MallDBInfo& MallDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MallDBInfo* MallDBInfo::default_instance_ = NULL;

MallDBInfo* MallDBInfo::New() const {
  return new MallDBInfo;
}

void MallDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    num_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallDBInfo::MergeFrom(const MallDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallDBInfo::CopyFrom(const MallDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallDBInfo::IsInitialized() const {

  return true;
}

void MallDBInfo::Swap(MallDBInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallDBInfo_descriptor_;
  metadata.reflection = MallDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallDBData::kDayFieldNumber;
const int MallDBData::kWeekFieldNumber;
const int MallDBData::kForeverFieldNumber;
#endif  // !_MSC_VER

MallDBData::MallDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallDBData::InitAsDefaultInstance() {
}

MallDBData::MallDBData(const MallDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallDBData::~MallDBData() {
  SharedDtor();
}

void MallDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallDBData_descriptor_;
}

const MallDBData& MallDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MallDBData* MallDBData::default_instance_ = NULL;

MallDBData* MallDBData::New() const {
  return new MallDBData;
}

void MallDBData::Clear() {
  day_.Clear();
  week_.Clear();
  forever_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MallDBInfo day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_day()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_day;
        if (input->ExpectTag(18)) goto parse_week;
        break;
      }

      // repeated .proto_ff.MallDBInfo week = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_week:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_week()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_week;
        if (input->ExpectTag(26)) goto parse_forever;
        break;
      }

      // repeated .proto_ff.MallDBInfo forever = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forever:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_forever()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_forever;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MallDBInfo day = 1;
  for (int i = 0; i < this->day_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->day(i), output);
  }

  // repeated .proto_ff.MallDBInfo week = 2;
  for (int i = 0; i < this->week_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->week(i), output);
  }

  // repeated .proto_ff.MallDBInfo forever = 3;
  for (int i = 0; i < this->forever_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->forever(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MallDBInfo day = 1;
  for (int i = 0; i < this->day_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->day(i), target);
  }

  // repeated .proto_ff.MallDBInfo week = 2;
  for (int i = 0; i < this->week_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->week(i), target);
  }

  // repeated .proto_ff.MallDBInfo forever = 3;
  for (int i = 0; i < this->forever_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->forever(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.MallDBInfo day = 1;
  total_size += 1 * this->day_size();
  for (int i = 0; i < this->day_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->day(i));
  }

  // repeated .proto_ff.MallDBInfo week = 2;
  total_size += 1 * this->week_size();
  for (int i = 0; i < this->week_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->week(i));
  }

  // repeated .proto_ff.MallDBInfo forever = 3;
  total_size += 1 * this->forever_size();
  for (int i = 0; i < this->forever_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->forever(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallDBData::MergeFrom(const MallDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  day_.MergeFrom(from.day_);
  week_.MergeFrom(from.week_);
  forever_.MergeFrom(from.forever_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallDBData::CopyFrom(const MallDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallDBData::IsInitialized() const {

  return true;
}

void MallDBData::Swap(MallDBData* other) {
  if (other != this) {
    day_.Swap(&other->day_);
    week_.Swap(&other->week_);
    forever_.Swap(&other->forever_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallDBData_descriptor_;
  metadata.reflection = MallDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConvoyData::kDaynumFieldNumber;
const int ConvoyData::kEscortidFieldNumber;
const int ConvoyData::kEndTimeFieldNumber;
const int ConvoyData::kFreeNumFieldNumber;
const int ConvoyData::kGenEscortIdFieldNumber;
const int ConvoyData::kResetTimeFieldNumber;
#endif  // !_MSC_VER

ConvoyData::ConvoyData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConvoyData::InitAsDefaultInstance() {
}

ConvoyData::ConvoyData(const ConvoyData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConvoyData::SharedCtor() {
  _cached_size_ = 0;
  daynum_ = 0;
  escortid_ = 0;
  endtime_ = GOOGLE_ULONGLONG(0);
  freenum_ = 0;
  genescortid_ = 0;
  resettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConvoyData::~ConvoyData() {
  SharedDtor();
}

void ConvoyData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConvoyData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConvoyData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConvoyData_descriptor_;
}

const ConvoyData& ConvoyData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ConvoyData* ConvoyData::default_instance_ = NULL;

ConvoyData* ConvoyData::New() const {
  return new ConvoyData;
}

void ConvoyData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    daynum_ = 0;
    escortid_ = 0;
    endtime_ = GOOGLE_ULONGLONG(0);
    freenum_ = 0;
    genescortid_ = 0;
    resettime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConvoyData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 daynum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &daynum_)));
          set_has_daynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_escortid;
        break;
      }

      // optional int32 escortid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_escortid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &escortid_)));
          set_has_escortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional uint64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_freeNum;
        break;
      }

      // optional int32 freeNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freenum_)));
          set_has_freenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_genEscortId;
        break;
      }

      // optional int32 genEscortId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_genEscortId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &genescortid_)));
          set_has_genescortid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resetTime;
        break;
      }

      // optional uint64 resetTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConvoyData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 daynum = 1;
  if (has_daynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->daynum(), output);
  }

  // optional int32 escortid = 2;
  if (has_escortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->escortid(), output);
  }

  // optional uint64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->endtime(), output);
  }

  // optional int32 freeNum = 4;
  if (has_freenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->freenum(), output);
  }

  // optional int32 genEscortId = 5;
  if (has_genescortid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->genescortid(), output);
  }

  // optional uint64 resetTime = 6;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->resettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConvoyData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 daynum = 1;
  if (has_daynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->daynum(), target);
  }

  // optional int32 escortid = 2;
  if (has_escortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->escortid(), target);
  }

  // optional uint64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->endtime(), target);
  }

  // optional int32 freeNum = 4;
  if (has_freenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->freenum(), target);
  }

  // optional int32 genEscortId = 5;
  if (has_genescortid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->genescortid(), target);
  }

  // optional uint64 resetTime = 6;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->resettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConvoyData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 daynum = 1;
    if (has_daynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->daynum());
    }

    // optional int32 escortid = 2;
    if (has_escortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->escortid());
    }

    // optional uint64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->endtime());
    }

    // optional int32 freeNum = 4;
    if (has_freenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freenum());
    }

    // optional int32 genEscortId = 5;
    if (has_genescortid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->genescortid());
    }

    // optional uint64 resetTime = 6;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConvoyData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConvoyData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConvoyData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConvoyData::MergeFrom(const ConvoyData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_daynum()) {
      set_daynum(from.daynum());
    }
    if (from.has_escortid()) {
      set_escortid(from.escortid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_freenum()) {
      set_freenum(from.freenum());
    }
    if (from.has_genescortid()) {
      set_genescortid(from.genescortid());
    }
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConvoyData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConvoyData::CopyFrom(const ConvoyData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvoyData::IsInitialized() const {

  return true;
}

void ConvoyData::Swap(ConvoyData* other) {
  if (other != this) {
    std::swap(daynum_, other->daynum_);
    std::swap(escortid_, other->escortid_);
    std::swap(endtime_, other->endtime_);
    std::swap(freenum_, other->freenum_);
    std::swap(genescortid_, other->genescortid_);
    std::swap(resettime_, other->resettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConvoyData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConvoyData_descriptor_;
  metadata.reflection = ConvoyData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArmorDBData::kInfosFieldNumber;
#endif  // !_MSC_VER

ArmorDBData::ArmorDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArmorDBData::InitAsDefaultInstance() {
}

ArmorDBData::ArmorDBData(const ArmorDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArmorDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArmorDBData::~ArmorDBData() {
  SharedDtor();
}

void ArmorDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArmorDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArmorDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArmorDBData_descriptor_;
}

const ArmorDBData& ArmorDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ArmorDBData* ArmorDBData::default_instance_ = NULL;

ArmorDBData* ArmorDBData::New() const {
  return new ArmorDBData;
}

void ArmorDBData::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArmorDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ArmorInfo infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArmorDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ArmorInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArmorDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ArmorInfo infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArmorDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ArmorInfo infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArmorDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArmorDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArmorDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArmorDBData::MergeFrom(const ArmorDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArmorDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArmorDBData::CopyFrom(const ArmorDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArmorDBData::IsInitialized() const {

  return true;
}

void ArmorDBData::Swap(ArmorDBData* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArmorDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArmorDBData_descriptor_;
  metadata.reflection = ArmorDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AssistDBData::kResetTimeFieldNumber;
const int AssistDBData::kDayPrestigeFieldNumber;
const int AssistDBData::kSendNumFieldNumber;
const int AssistDBData::kHelpNumFieldNumber;
const int AssistDBData::kAllSendNumFieldNumber;
const int AssistDBData::kAllHelpNumFieldNumber;
const int AssistDBData::kRecvSendGiftNumFieldNumber;
const int AssistDBData::kRecvHelpGiftNumFieldNumber;
const int AssistDBData::kRewardIdsFieldNumber;
const int AssistDBData::kThanksInfoFieldNumber;
#endif  // !_MSC_VER

AssistDBData::AssistDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AssistDBData::InitAsDefaultInstance() {
}

AssistDBData::AssistDBData(const AssistDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AssistDBData::SharedCtor() {
  _cached_size_ = 0;
  resettime_ = GOOGLE_ULONGLONG(0);
  dayprestige_ = 0;
  sendnum_ = 0;
  helpnum_ = 0;
  allsendnum_ = 0;
  allhelpnum_ = 0;
  recvsendgiftnum_ = 0;
  recvhelpgiftnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AssistDBData::~AssistDBData() {
  SharedDtor();
}

void AssistDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AssistDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AssistDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AssistDBData_descriptor_;
}

const AssistDBData& AssistDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

AssistDBData* AssistDBData::default_instance_ = NULL;

AssistDBData* AssistDBData::New() const {
  return new AssistDBData;
}

void AssistDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resettime_ = GOOGLE_ULONGLONG(0);
    dayprestige_ = 0;
    sendnum_ = 0;
    helpnum_ = 0;
    allsendnum_ = 0;
    allhelpnum_ = 0;
    recvsendgiftnum_ = 0;
    recvhelpgiftnum_ = 0;
  }
  rewardids_.Clear();
  thanksinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AssistDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 resetTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &resettime_)));
          set_has_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dayPrestige;
        break;
      }

      // optional int32 dayPrestige = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayPrestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayprestige_)));
          set_has_dayprestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendNum;
        break;
      }

      // optional int32 sendNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendnum_)));
          set_has_sendnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_helpNum;
        break;
      }

      // optional int32 helpNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_helpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &helpnum_)));
          set_has_helpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_allSendNum;
        break;
      }

      // optional int32 allSendNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allSendNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allsendnum_)));
          set_has_allsendnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_allHelpNum;
        break;
      }

      // optional int32 allHelpNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allHelpNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &allhelpnum_)));
          set_has_allhelpnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_recvSendGiftNum;
        break;
      }

      // optional int32 recvSendGiftNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvSendGiftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvsendgiftnum_)));
          set_has_recvsendgiftnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_recvHelpGiftNum;
        break;
      }

      // optional int32 recvHelpGiftNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvHelpGiftNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvhelpgiftnum_)));
          set_has_recvhelpgiftnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rewardIds;
        break;
      }

      // repeated int32 rewardIds = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72, input, this->mutable_rewardids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rewardids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rewardIds;
        if (input->ExpectTag(82)) goto parse_thanksInfo;
        break;
      }

      // repeated .proto_ff.ComPair64 thanksInfo = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_thanksInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_thanksinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_thanksInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AssistDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 resetTime = 1;
  if (has_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->resettime(), output);
  }

  // optional int32 dayPrestige = 2;
  if (has_dayprestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dayprestige(), output);
  }

  // optional int32 sendNum = 3;
  if (has_sendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sendnum(), output);
  }

  // optional int32 helpNum = 4;
  if (has_helpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->helpnum(), output);
  }

  // optional int32 allSendNum = 5;
  if (has_allsendnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->allsendnum(), output);
  }

  // optional int32 allHelpNum = 6;
  if (has_allhelpnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->allhelpnum(), output);
  }

  // optional int32 recvSendGiftNum = 7;
  if (has_recvsendgiftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->recvsendgiftnum(), output);
  }

  // optional int32 recvHelpGiftNum = 8;
  if (has_recvhelpgiftnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->recvhelpgiftnum(), output);
  }

  // repeated int32 rewardIds = 9;
  for (int i = 0; i < this->rewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->rewardids(i), output);
  }

  // repeated .proto_ff.ComPair64 thanksInfo = 10;
  for (int i = 0; i < this->thanksinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->thanksinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AssistDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 resetTime = 1;
  if (has_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->resettime(), target);
  }

  // optional int32 dayPrestige = 2;
  if (has_dayprestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dayprestige(), target);
  }

  // optional int32 sendNum = 3;
  if (has_sendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sendnum(), target);
  }

  // optional int32 helpNum = 4;
  if (has_helpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->helpnum(), target);
  }

  // optional int32 allSendNum = 5;
  if (has_allsendnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->allsendnum(), target);
  }

  // optional int32 allHelpNum = 6;
  if (has_allhelpnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->allhelpnum(), target);
  }

  // optional int32 recvSendGiftNum = 7;
  if (has_recvsendgiftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->recvsendgiftnum(), target);
  }

  // optional int32 recvHelpGiftNum = 8;
  if (has_recvhelpgiftnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->recvhelpgiftnum(), target);
  }

  // repeated int32 rewardIds = 9;
  for (int i = 0; i < this->rewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(9, this->rewardids(i), target);
  }

  // repeated .proto_ff.ComPair64 thanksInfo = 10;
  for (int i = 0; i < this->thanksinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->thanksinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AssistDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 resetTime = 1;
    if (has_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->resettime());
    }

    // optional int32 dayPrestige = 2;
    if (has_dayprestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayprestige());
    }

    // optional int32 sendNum = 3;
    if (has_sendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sendnum());
    }

    // optional int32 helpNum = 4;
    if (has_helpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->helpnum());
    }

    // optional int32 allSendNum = 5;
    if (has_allsendnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allsendnum());
    }

    // optional int32 allHelpNum = 6;
    if (has_allhelpnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->allhelpnum());
    }

    // optional int32 recvSendGiftNum = 7;
    if (has_recvsendgiftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recvsendgiftnum());
    }

    // optional int32 recvHelpGiftNum = 8;
    if (has_recvhelpgiftnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recvhelpgiftnum());
    }

  }
  // repeated int32 rewardIds = 9;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rewardids(i));
    }
    total_size += 1 * this->rewardids_size() + data_size;
  }

  // repeated .proto_ff.ComPair64 thanksInfo = 10;
  total_size += 1 * this->thanksinfo_size();
  for (int i = 0; i < this->thanksinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->thanksinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AssistDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AssistDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AssistDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AssistDBData::MergeFrom(const AssistDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardids_.MergeFrom(from.rewardids_);
  thanksinfo_.MergeFrom(from.thanksinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_resettime()) {
      set_resettime(from.resettime());
    }
    if (from.has_dayprestige()) {
      set_dayprestige(from.dayprestige());
    }
    if (from.has_sendnum()) {
      set_sendnum(from.sendnum());
    }
    if (from.has_helpnum()) {
      set_helpnum(from.helpnum());
    }
    if (from.has_allsendnum()) {
      set_allsendnum(from.allsendnum());
    }
    if (from.has_allhelpnum()) {
      set_allhelpnum(from.allhelpnum());
    }
    if (from.has_recvsendgiftnum()) {
      set_recvsendgiftnum(from.recvsendgiftnum());
    }
    if (from.has_recvhelpgiftnum()) {
      set_recvhelpgiftnum(from.recvhelpgiftnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AssistDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AssistDBData::CopyFrom(const AssistDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AssistDBData::IsInitialized() const {

  return true;
}

void AssistDBData::Swap(AssistDBData* other) {
  if (other != this) {
    std::swap(resettime_, other->resettime_);
    std::swap(dayprestige_, other->dayprestige_);
    std::swap(sendnum_, other->sendnum_);
    std::swap(helpnum_, other->helpnum_);
    std::swap(allsendnum_, other->allsendnum_);
    std::swap(allhelpnum_, other->allhelpnum_);
    std::swap(recvsendgiftnum_, other->recvsendgiftnum_);
    std::swap(recvhelpgiftnum_, other->recvhelpgiftnum_);
    rewardids_.Swap(&other->rewardids_);
    thanksinfo_.Swap(&other->thanksinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AssistDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AssistDBData_descriptor_;
  metadata.reflection = AssistDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleDBData::kCurWearingTitleFieldNumber;
const int TitleDBData::kDataFieldNumber;
#endif  // !_MSC_VER

TitleDBData::TitleDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleDBData::InitAsDefaultInstance() {
}

TitleDBData::TitleDBData(const TitleDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleDBData::SharedCtor() {
  _cached_size_ = 0;
  cur_wearing_title_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleDBData::~TitleDBData() {
  SharedDtor();
}

void TitleDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleDBData_descriptor_;
}

const TitleDBData& TitleDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

TitleDBData* TitleDBData::default_instance_ = NULL;

TitleDBData* TitleDBData::New() const {
  return new TitleDBData;
}

void TitleDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cur_wearing_title_ = GOOGLE_ULONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cur_wearing_title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_wearing_title_)));
          set_has_cur_wearing_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .proto_ff.TitleInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cur_wearing_title = 1;
  if (has_cur_wearing_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cur_wearing_title(), output);
  }

  // repeated .proto_ff.TitleInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cur_wearing_title = 1;
  if (has_cur_wearing_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cur_wearing_title(), target);
  }

  // repeated .proto_ff.TitleInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cur_wearing_title = 1;
    if (has_cur_wearing_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_wearing_title());
    }

  }
  // repeated .proto_ff.TitleInfo data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleDBData::MergeFrom(const TitleDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cur_wearing_title()) {
      set_cur_wearing_title(from.cur_wearing_title());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleDBData::CopyFrom(const TitleDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleDBData::IsInitialized() const {

  return true;
}

void TitleDBData::Swap(TitleDBData* other) {
  if (other != this) {
    std::swap(cur_wearing_title_, other->cur_wearing_title_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleDBData_descriptor_;
  metadata.reflection = TitleDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvilCondDBProto::kIdFieldNumber;
const int GodEvilCondDBProto::kStateFieldNumber;
const int GodEvilCondDBProto::kCurFieldNumber;
#endif  // !_MSC_VER

GodEvilCondDBProto::GodEvilCondDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvilCondDBProto::InitAsDefaultInstance() {
}

GodEvilCondDBProto::GodEvilCondDBProto(const GodEvilCondDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvilCondDBProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  state_ = 0;
  cur_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvilCondDBProto::~GodEvilCondDBProto() {
  SharedDtor();
}

void GodEvilCondDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvilCondDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvilCondDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvilCondDBProto_descriptor_;
}

const GodEvilCondDBProto& GodEvilCondDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GodEvilCondDBProto* GodEvilCondDBProto::default_instance_ = NULL;

GodEvilCondDBProto* GodEvilCondDBProto::New() const {
  return new GodEvilCondDBProto;
}

void GodEvilCondDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    state_ = 0;
    cur_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvilCondDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // optional int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur;
        break;
      }

      // optional int32 cur = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvilCondDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // optional int32 cur = 3;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvilCondDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // optional int32 cur = 3;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvilCondDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 cur = 3;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvilCondDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvilCondDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvilCondDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvilCondDBProto::MergeFrom(const GodEvilCondDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvilCondDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvilCondDBProto::CopyFrom(const GodEvilCondDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvilCondDBProto::IsInitialized() const {

  return true;
}

void GodEvilCondDBProto::Swap(GodEvilCondDBProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(cur_, other->cur_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvilCondDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvilCondDBProto_descriptor_;
  metadata.reflection = GodEvilCondDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvilMultCondDBProto::kLstFieldNumber;
#endif  // !_MSC_VER

GodEvilMultCondDBProto::GodEvilMultCondDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvilMultCondDBProto::InitAsDefaultInstance() {
}

GodEvilMultCondDBProto::GodEvilMultCondDBProto(const GodEvilMultCondDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvilMultCondDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvilMultCondDBProto::~GodEvilMultCondDBProto() {
  SharedDtor();
}

void GodEvilMultCondDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GodEvilMultCondDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvilMultCondDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvilMultCondDBProto_descriptor_;
}

const GodEvilMultCondDBProto& GodEvilMultCondDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GodEvilMultCondDBProto* GodEvilMultCondDBProto::default_instance_ = NULL;

GodEvilMultCondDBProto* GodEvilMultCondDBProto::New() const {
  return new GodEvilMultCondDBProto;
}

void GodEvilMultCondDBProto::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvilMultCondDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GodEvilCondDBProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvilMultCondDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GodEvilCondDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvilMultCondDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GodEvilCondDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvilMultCondDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GodEvilCondDBProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvilMultCondDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvilMultCondDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvilMultCondDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvilMultCondDBProto::MergeFrom(const GodEvilMultCondDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvilMultCondDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvilMultCondDBProto::CopyFrom(const GodEvilMultCondDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvilMultCondDBProto::IsInitialized() const {

  return true;
}

void GodEvilMultCondDBProto::Swap(GodEvilMultCondDBProto* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvilMultCondDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvilMultCondDBProto_descriptor_;
  metadata.reflection = GodEvilMultCondDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvilTaskDBProto::kStageFieldNumber;
const int GodEvilTaskDBProto::kCondFieldNumber;
const int GodEvilTaskDBProto::kFinishFieldNumber;
const int GodEvilTaskDBProto::kAcceptFieldNumber;
#endif  // !_MSC_VER

GodEvilTaskDBProto::GodEvilTaskDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvilTaskDBProto::InitAsDefaultInstance() {
  cond_ = const_cast< ::proto_ff::GodEvilMultCondDBProto*>(&::proto_ff::GodEvilMultCondDBProto::default_instance());
}

GodEvilTaskDBProto::GodEvilTaskDBProto(const GodEvilTaskDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvilTaskDBProto::SharedCtor() {
  _cached_size_ = 0;
  stage_ = 0;
  cond_ = NULL;
  finish_ = 0;
  accept_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvilTaskDBProto::~GodEvilTaskDBProto() {
  SharedDtor();
}

void GodEvilTaskDBProto::SharedDtor() {
  if (this != default_instance_) {
    delete cond_;
  }
}

void GodEvilTaskDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvilTaskDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvilTaskDBProto_descriptor_;
}

const GodEvilTaskDBProto& GodEvilTaskDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GodEvilTaskDBProto* GodEvilTaskDBProto::default_instance_ = NULL;

GodEvilTaskDBProto* GodEvilTaskDBProto::New() const {
  return new GodEvilTaskDBProto;
}

void GodEvilTaskDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stage_ = 0;
    if (has_cond()) {
      if (cond_ != NULL) cond_->::proto_ff::GodEvilMultCondDBProto::Clear();
    }
    finish_ = 0;
    accept_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvilTaskDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 stage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stage_)));
          set_has_stage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cond;
        break;
      }

      // optional .proto_ff.GodEvilMultCondDBProto cond = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finish;
        break;
      }

      // optional int32 finish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accept;
        break;
      }

      // optional int32 accept = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accept:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvilTaskDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->stage(), output);
  }

  // optional .proto_ff.GodEvilMultCondDBProto cond = 2;
  if (has_cond()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cond(), output);
  }

  // optional int32 finish = 3;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finish(), output);
  }

  // optional int32 accept = 4;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->accept(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvilTaskDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 stage = 1;
  if (has_stage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->stage(), target);
  }

  // optional .proto_ff.GodEvilMultCondDBProto cond = 2;
  if (has_cond()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cond(), target);
  }

  // optional int32 finish = 3;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finish(), target);
  }

  // optional int32 accept = 4;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->accept(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvilTaskDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 stage = 1;
    if (has_stage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stage());
    }

    // optional .proto_ff.GodEvilMultCondDBProto cond = 2;
    if (has_cond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cond());
    }

    // optional int32 finish = 3;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }

    // optional int32 accept = 4;
    if (has_accept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accept());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvilTaskDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvilTaskDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvilTaskDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvilTaskDBProto::MergeFrom(const GodEvilTaskDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stage()) {
      set_stage(from.stage());
    }
    if (from.has_cond()) {
      mutable_cond()->::proto_ff::GodEvilMultCondDBProto::MergeFrom(from.cond());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_accept()) {
      set_accept(from.accept());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvilTaskDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvilTaskDBProto::CopyFrom(const GodEvilTaskDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvilTaskDBProto::IsInitialized() const {

  return true;
}

void GodEvilTaskDBProto::Swap(GodEvilTaskDBProto* other) {
  if (other != this) {
    std::swap(stage_, other->stage_);
    std::swap(cond_, other->cond_);
    std::swap(finish_, other->finish_);
    std::swap(accept_, other->accept_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvilTaskDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvilTaskDBProto_descriptor_;
  metadata.reflection = GodEvilTaskDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GodEvilDBData::kFetchFieldNumber;
const int GodEvilDBData::kTaskFieldNumber;
const int GodEvilDBData::kTypeFieldNumber;
const int GodEvilDBData::kLastTimeFieldNumber;
const int GodEvilDBData::kVesselLevFieldNumber;
const int GodEvilDBData::kMirrorLevFieldNumber;
const int GodEvilDBData::kExtraExpFieldNumber;
const int GodEvilDBData::kEquipFieldNumber;
const int GodEvilDBData::kDressFieldNumber;
#endif  // !_MSC_VER

GodEvilDBData::GodEvilDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GodEvilDBData::InitAsDefaultInstance() {
  task_ = const_cast< ::proto_ff::GodEvilTaskDBProto*>(&::proto_ff::GodEvilTaskDBProto::default_instance());
}

GodEvilDBData::GodEvilDBData(const GodEvilDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GodEvilDBData::SharedCtor() {
  _cached_size_ = 0;
  fetch_ = 0;
  task_ = NULL;
  type_ = 0;
  last_time_ = GOOGLE_ULONGLONG(0);
  vessel_lev_ = 0;
  mirror_lev_ = 0;
  extra_exp_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GodEvilDBData::~GodEvilDBData() {
  SharedDtor();
}

void GodEvilDBData::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
  }
}

void GodEvilDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GodEvilDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GodEvilDBData_descriptor_;
}

const GodEvilDBData& GodEvilDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GodEvilDBData* GodEvilDBData::default_instance_ = NULL;

GodEvilDBData* GodEvilDBData::New() const {
  return new GodEvilDBData;
}

void GodEvilDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fetch_ = 0;
    if (has_task()) {
      if (task_ != NULL) task_->::proto_ff::GodEvilTaskDBProto::Clear();
    }
    type_ = 0;
    last_time_ = GOOGLE_ULONGLONG(0);
    vessel_lev_ = 0;
    mirror_lev_ = 0;
    extra_exp_ = GOOGLE_LONGLONG(0);
  }
  equip_.Clear();
  dress_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GodEvilDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fetch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_task;
        break;
      }

      // optional .proto_ff.GodEvilTaskDBProto task = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_last_time;
        break;
      }

      // optional uint64 last_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_time_)));
          set_has_last_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vessel_lev;
        break;
      }

      // optional int32 vessel_lev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vessel_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vessel_lev_)));
          set_has_vessel_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mirror_lev;
        break;
      }

      // optional int32 mirror_lev = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirror_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mirror_lev_)));
          set_has_mirror_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_extra_exp;
        break;
      }

      // optional int64 extra_exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extra_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &extra_exp_)));
          set_has_extra_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo equip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip;
        if (input->ExpectTag(74)) goto parse_dress;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo dress = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dress()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_dress;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GodEvilDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fetch = 1;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fetch(), output);
  }

  // optional .proto_ff.GodEvilTaskDBProto task = 2;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->task(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->last_time(), output);
  }

  // optional int32 vessel_lev = 5;
  if (has_vessel_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->vessel_lev(), output);
  }

  // optional int32 mirror_lev = 6;
  if (has_mirror_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mirror_lev(), output);
  }

  // optional int64 extra_exp = 7;
  if (has_extra_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->extra_exp(), output);
  }

  // repeated .proto_ff.ItemProtoInfo equip = 8;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equip(i), output);
  }

  // repeated .proto_ff.ItemProtoInfo dress = 9;
  for (int i = 0; i < this->dress_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->dress(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GodEvilDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fetch = 1;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fetch(), target);
  }

  // optional .proto_ff.GodEvilTaskDBProto task = 2;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->task(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional uint64 last_time = 4;
  if (has_last_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->last_time(), target);
  }

  // optional int32 vessel_lev = 5;
  if (has_vessel_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->vessel_lev(), target);
  }

  // optional int32 mirror_lev = 6;
  if (has_mirror_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mirror_lev(), target);
  }

  // optional int64 extra_exp = 7;
  if (has_extra_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->extra_exp(), target);
  }

  // repeated .proto_ff.ItemProtoInfo equip = 8;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equip(i), target);
  }

  // repeated .proto_ff.ItemProtoInfo dress = 9;
  for (int i = 0; i < this->dress_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->dress(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GodEvilDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fetch = 1;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

    // optional .proto_ff.GodEvilTaskDBProto task = 2;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint64 last_time = 4;
    if (has_last_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_time());
    }

    // optional int32 vessel_lev = 5;
    if (has_vessel_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vessel_lev());
    }

    // optional int32 mirror_lev = 6;
    if (has_mirror_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mirror_lev());
    }

    // optional int64 extra_exp = 7;
    if (has_extra_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->extra_exp());
    }

  }
  // repeated .proto_ff.ItemProtoInfo equip = 8;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .proto_ff.ItemProtoInfo dress = 9;
  total_size += 1 * this->dress_size();
  for (int i = 0; i < this->dress_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dress(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GodEvilDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GodEvilDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GodEvilDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GodEvilDBData::MergeFrom(const GodEvilDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  dress_.MergeFrom(from.dress_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
    if (from.has_task()) {
      mutable_task()->::proto_ff::GodEvilTaskDBProto::MergeFrom(from.task());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_last_time()) {
      set_last_time(from.last_time());
    }
    if (from.has_vessel_lev()) {
      set_vessel_lev(from.vessel_lev());
    }
    if (from.has_mirror_lev()) {
      set_mirror_lev(from.mirror_lev());
    }
    if (from.has_extra_exp()) {
      set_extra_exp(from.extra_exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GodEvilDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GodEvilDBData::CopyFrom(const GodEvilDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GodEvilDBData::IsInitialized() const {

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  for (int i = 0; i < dress_size(); i++) {
    if (!this->dress(i).IsInitialized()) return false;
  }
  return true;
}

void GodEvilDBData::Swap(GodEvilDBData* other) {
  if (other != this) {
    std::swap(fetch_, other->fetch_);
    std::swap(task_, other->task_);
    std::swap(type_, other->type_);
    std::swap(last_time_, other->last_time_);
    std::swap(vessel_lev_, other->vessel_lev_);
    std::swap(mirror_lev_, other->mirror_lev_);
    std::swap(extra_exp_, other->extra_exp_);
    equip_.Swap(&other->equip_);
    dress_.Swap(&other->dress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GodEvilDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GodEvilDBData_descriptor_;
  metadata.reflection = GodEvilDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayDBData::kDbIdFieldNumber;
const int PayDBData::kProductFieldNumber;
const int PayDBData::kRelrmbFieldNumber;
const int PayDBData::kRmbFieldNumber;
const int PayDBData::kFakermbFieldNumber;
const int PayDBData::kTodayrmbFieldNumber;
const int PayDBData::kTodaytimeFieldNumber;
const int PayDBData::kSdkrmbFieldNumber;
#endif  // !_MSC_VER

PayDBData::PayDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayDBData::InitAsDefaultInstance() {
}

PayDBData::PayDBData(const PayDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayDBData::SharedCtor() {
  _cached_size_ = 0;
  relrmb_ = 0u;
  rmb_ = 0u;
  fakermb_ = 0u;
  todayrmb_ = 0u;
  todaytime_ = GOOGLE_ULONGLONG(0);
  sdkrmb_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayDBData::~PayDBData() {
  SharedDtor();
}

void PayDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PayDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayDBData_descriptor_;
}

const PayDBData& PayDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

PayDBData* PayDBData::default_instance_ = NULL;

PayDBData* PayDBData::New() const {
  return new PayDBData;
}

void PayDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    relrmb_ = 0u;
    rmb_ = 0u;
    fakermb_ = 0u;
    todayrmb_ = 0u;
    todaytime_ = GOOGLE_ULONGLONG(0);
    sdkrmb_ = 0u;
  }
  db_id_.Clear();
  product_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 db_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_db_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_db_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_db_id;
        if (input->ExpectTag(18)) goto parse_product;
        break;
      }

      // repeated bytes product = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_product;
        if (input->ExpectTag(24)) goto parse_relrmb;
        break;
      }

      // optional uint32 relrmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relrmb_)));
          set_has_relrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rmb;
        break;
      }

      // optional uint32 rmb = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rmb_)));
          set_has_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fakermb;
        break;
      }

      // optional uint32 fakermb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fakermb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fakermb_)));
          set_has_fakermb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_todayrmb;
        break;
      }

      // optional uint32 todayrmb = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todayrmb_)));
          set_has_todayrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_todaytime;
        break;
      }

      // optional uint64 todaytime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todaytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &todaytime_)));
          set_has_todaytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sdkrmb;
        break;
      }

      // optional uint32 sdkrmb = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sdkrmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdkrmb_)));
          set_has_sdkrmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 db_id = 1;
  for (int i = 0; i < this->db_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->db_id(i), output);
  }

  // repeated bytes product = 2;
  for (int i = 0; i < this->product_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->product(i), output);
  }

  // optional uint32 relrmb = 3;
  if (has_relrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->relrmb(), output);
  }

  // optional uint32 rmb = 4;
  if (has_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->rmb(), output);
  }

  // optional uint32 fakermb = 5;
  if (has_fakermb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->fakermb(), output);
  }

  // optional uint32 todayrmb = 6;
  if (has_todayrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->todayrmb(), output);
  }

  // optional uint64 todaytime = 7;
  if (has_todaytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->todaytime(), output);
  }

  // optional uint32 sdkrmb = 8;
  if (has_sdkrmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->sdkrmb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 db_id = 1;
  for (int i = 0; i < this->db_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->db_id(i), target);
  }

  // repeated bytes product = 2;
  for (int i = 0; i < this->product_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->product(i), target);
  }

  // optional uint32 relrmb = 3;
  if (has_relrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->relrmb(), target);
  }

  // optional uint32 rmb = 4;
  if (has_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->rmb(), target);
  }

  // optional uint32 fakermb = 5;
  if (has_fakermb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->fakermb(), target);
  }

  // optional uint32 todayrmb = 6;
  if (has_todayrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->todayrmb(), target);
  }

  // optional uint64 todaytime = 7;
  if (has_todaytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->todaytime(), target);
  }

  // optional uint32 sdkrmb = 8;
  if (has_sdkrmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->sdkrmb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 relrmb = 3;
    if (has_relrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relrmb());
    }

    // optional uint32 rmb = 4;
    if (has_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rmb());
    }

    // optional uint32 fakermb = 5;
    if (has_fakermb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fakermb());
    }

    // optional uint32 todayrmb = 6;
    if (has_todayrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todayrmb());
    }

    // optional uint64 todaytime = 7;
    if (has_todaytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->todaytime());
    }

    // optional uint32 sdkrmb = 8;
    if (has_sdkrmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sdkrmb());
    }

  }
  // repeated uint32 db_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->db_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->db_id(i));
    }
    total_size += 1 * this->db_id_size() + data_size;
  }

  // repeated bytes product = 2;
  total_size += 1 * this->product_size();
  for (int i = 0; i < this->product_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->product(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayDBData::MergeFrom(const PayDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  db_id_.MergeFrom(from.db_id_);
  product_.MergeFrom(from.product_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_relrmb()) {
      set_relrmb(from.relrmb());
    }
    if (from.has_rmb()) {
      set_rmb(from.rmb());
    }
    if (from.has_fakermb()) {
      set_fakermb(from.fakermb());
    }
    if (from.has_todayrmb()) {
      set_todayrmb(from.todayrmb());
    }
    if (from.has_todaytime()) {
      set_todaytime(from.todaytime());
    }
    if (from.has_sdkrmb()) {
      set_sdkrmb(from.sdkrmb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayDBData::CopyFrom(const PayDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayDBData::IsInitialized() const {

  return true;
}

void PayDBData::Swap(PayDBData* other) {
  if (other != this) {
    db_id_.Swap(&other->db_id_);
    product_.Swap(&other->product_);
    std::swap(relrmb_, other->relrmb_);
    std::swap(rmb_, other->rmb_);
    std::swap(fakermb_, other->fakermb_);
    std::swap(todayrmb_, other->todayrmb_);
    std::swap(todaytime_, other->todaytime_);
    std::swap(sdkrmb_, other->sdkrmb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayDBData_descriptor_;
  metadata.reflection = PayDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBSalary::kIdFieldNumber;
const int FactionDBSalary::kCurFieldNumber;
const int FactionDBSalary::kFetchFieldNumber;
#endif  // !_MSC_VER

FactionDBSalary::FactionDBSalary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBSalary::InitAsDefaultInstance() {
}

FactionDBSalary::FactionDBSalary(const FactionDBSalary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBSalary::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cur_ = 0;
  fetch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBSalary::~FactionDBSalary() {
  SharedDtor();
}

void FactionDBSalary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDBSalary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBSalary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBSalary_descriptor_;
}

const FactionDBSalary& FactionDBSalary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBSalary* FactionDBSalary::default_instance_ = NULL;

FactionDBSalary* FactionDBSalary::New() const {
  return new FactionDBSalary;
}

void FactionDBSalary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cur_ = 0;
    fetch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBSalary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur;
        break;
      }

      // optional int32 cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBSalary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur(), output);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fetch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBSalary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur(), target);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fetch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBSalary::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 cur = 2;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }

    // optional int32 fetch = 3;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBSalary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBSalary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBSalary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBSalary::MergeFrom(const FactionDBSalary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBSalary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBSalary::CopyFrom(const FactionDBSalary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBSalary::IsInitialized() const {

  return true;
}

void FactionDBSalary::Swap(FactionDBSalary* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cur_, other->cur_);
    std::swap(fetch_, other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBSalary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBSalary_descriptor_;
  metadata.reflection = FactionDBSalary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBDinner::kTransFieldNumber;
const int FactionDBDinner::kMeatFieldNumber;
const int FactionDBDinner::kExpFieldNumber;
const int FactionDBDinner::kContriFieldNumber;
const int FactionDBDinner::kTimeFieldNumber;
const int FactionDBDinner::kTransTimeFieldNumber;
#endif  // !_MSC_VER

FactionDBDinner::FactionDBDinner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBDinner::InitAsDefaultInstance() {
}

FactionDBDinner::FactionDBDinner(const FactionDBDinner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBDinner::SharedCtor() {
  _cached_size_ = 0;
  trans_ = 0;
  meat_ = 0;
  exp_ = 0u;
  contri_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  trans_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBDinner::~FactionDBDinner() {
  SharedDtor();
}

void FactionDBDinner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDBDinner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBDinner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBDinner_descriptor_;
}

const FactionDBDinner& FactionDBDinner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBDinner* FactionDBDinner::default_instance_ = NULL;

FactionDBDinner* FactionDBDinner::New() const {
  return new FactionDBDinner;
}

void FactionDBDinner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    trans_ = 0;
    meat_ = 0;
    exp_ = 0u;
    contri_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    trans_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBDinner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 trans = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trans_)));
          set_has_trans();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_meat;
        break;
      }

      // optional int32 meat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_meat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meat_)));
          set_has_meat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contri;
        break;
      }

      // optional uint32 contri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_trans_time;
        break;
      }

      // optional uint64 trans_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_trans_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &trans_time_)));
          set_has_trans_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBDinner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 trans = 1;
  if (has_trans()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trans(), output);
  }

  // optional int32 meat = 2;
  if (has_meat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->meat(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 contri = 4;
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->contri(), output);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time(), output);
  }

  // optional uint64 trans_time = 6;
  if (has_trans_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->trans_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBDinner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 trans = 1;
  if (has_trans()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trans(), target);
  }

  // optional int32 meat = 2;
  if (has_meat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->meat(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 contri = 4;
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->contri(), target);
  }

  // optional uint64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time(), target);
  }

  // optional uint64 trans_time = 6;
  if (has_trans_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->trans_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBDinner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 trans = 1;
    if (has_trans()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trans());
    }

    // optional int32 meat = 2;
    if (has_meat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meat());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 contri = 4;
    if (has_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contri());
    }

    // optional uint64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 trans_time = 6;
    if (has_trans_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->trans_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBDinner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBDinner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBDinner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBDinner::MergeFrom(const FactionDBDinner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans()) {
      set_trans(from.trans());
    }
    if (from.has_meat()) {
      set_meat(from.meat());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_contri()) {
      set_contri(from.contri());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_trans_time()) {
      set_trans_time(from.trans_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBDinner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBDinner::CopyFrom(const FactionDBDinner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBDinner::IsInitialized() const {

  return true;
}

void FactionDBDinner::Swap(FactionDBDinner* other) {
  if (other != this) {
    std::swap(trans_, other->trans_);
    std::swap(meat_, other->meat_);
    std::swap(exp_, other->exp_);
    std::swap(contri_, other->contri_);
    std::swap(time_, other->time_);
    std::swap(trans_time_, other->trans_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBDinner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBDinner_descriptor_;
  metadata.reflection = FactionDBDinner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBSkillProto::kIdFieldNumber;
const int FactionDBSkillProto::kLevelFieldNumber;
#endif  // !_MSC_VER

FactionDBSkillProto::FactionDBSkillProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBSkillProto::InitAsDefaultInstance() {
}

FactionDBSkillProto::FactionDBSkillProto(const FactionDBSkillProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBSkillProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBSkillProto::~FactionDBSkillProto() {
  SharedDtor();
}

void FactionDBSkillProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDBSkillProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBSkillProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBSkillProto_descriptor_;
}

const FactionDBSkillProto& FactionDBSkillProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBSkillProto* FactionDBSkillProto::default_instance_ = NULL;

FactionDBSkillProto* FactionDBSkillProto::New() const {
  return new FactionDBSkillProto;
}

void FactionDBSkillProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBSkillProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBSkillProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBSkillProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBSkillProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBSkillProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBSkillProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBSkillProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBSkillProto::MergeFrom(const FactionDBSkillProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBSkillProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBSkillProto::CopyFrom(const FactionDBSkillProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBSkillProto::IsInitialized() const {

  return true;
}

void FactionDBSkillProto::Swap(FactionDBSkillProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBSkillProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBSkillProto_descriptor_;
  metadata.reflection = FactionDBSkillProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBSkill::kInfoFieldNumber;
#endif  // !_MSC_VER

FactionDBSkill::FactionDBSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBSkill::InitAsDefaultInstance() {
}

FactionDBSkill::FactionDBSkill(const FactionDBSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBSkill::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBSkill::~FactionDBSkill() {
  SharedDtor();
}

void FactionDBSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDBSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBSkill_descriptor_;
}

const FactionDBSkill& FactionDBSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBSkill* FactionDBSkill::default_instance_ = NULL;

FactionDBSkill* FactionDBSkill::New() const {
  return new FactionDBSkill;
}

void FactionDBSkill::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionDBSkillProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionDBSkillProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionDBSkillProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBSkill::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionDBSkillProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBSkill::MergeFrom(const FactionDBSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBSkill::CopyFrom(const FactionDBSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBSkill::IsInitialized() const {

  return true;
}

void FactionDBSkill::Swap(FactionDBSkill* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBSkill_descriptor_;
  metadata.reflection = FactionDBSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBGuard::kExpFieldNumber;
const int FactionDBGuard::kContriFieldNumber;
const int FactionDBGuard::kCurEncouragementGoldCountFieldNumber;
const int FactionDBGuard::kCurEncouragementDiamondCountFieldNumber;
#endif  // !_MSC_VER

FactionDBGuard::FactionDBGuard()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBGuard::InitAsDefaultInstance() {
}

FactionDBGuard::FactionDBGuard(const FactionDBGuard& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBGuard::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0u;
  contri_ = 0u;
  cur_encouragement_gold_count_ = GOOGLE_ULONGLONG(0);
  cur_encouragement_diamond_count_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBGuard::~FactionDBGuard() {
  SharedDtor();
}

void FactionDBGuard::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDBGuard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBGuard::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBGuard_descriptor_;
}

const FactionDBGuard& FactionDBGuard::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBGuard* FactionDBGuard::default_instance_ = NULL;

FactionDBGuard* FactionDBGuard::New() const {
  return new FactionDBGuard;
}

void FactionDBGuard::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0u;
    contri_ = 0u;
    cur_encouragement_gold_count_ = GOOGLE_ULONGLONG(0);
    cur_encouragement_diamond_count_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBGuard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contri;
        break;
      }

      // optional uint32 contri = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_encouragement_gold_count;
        break;
      }

      // optional uint64 cur_encouragement_gold_count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_encouragement_gold_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_encouragement_gold_count_)));
          set_has_cur_encouragement_gold_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_encouragement_diamond_count;
        break;
      }

      // optional uint64 cur_encouragement_diamond_count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_encouragement_diamond_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_encouragement_diamond_count_)));
          set_has_cur_encouragement_diamond_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBGuard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->exp(), output);
  }

  // optional uint32 contri = 2;
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contri(), output);
  }

  // optional uint64 cur_encouragement_gold_count = 3;
  if (has_cur_encouragement_gold_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cur_encouragement_gold_count(), output);
  }

  // optional uint64 cur_encouragement_diamond_count = 4;
  if (has_cur_encouragement_diamond_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cur_encouragement_diamond_count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBGuard::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->exp(), target);
  }

  // optional uint32 contri = 2;
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contri(), target);
  }

  // optional uint64 cur_encouragement_gold_count = 3;
  if (has_cur_encouragement_gold_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cur_encouragement_gold_count(), target);
  }

  // optional uint64 cur_encouragement_diamond_count = 4;
  if (has_cur_encouragement_diamond_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cur_encouragement_diamond_count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBGuard::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 contri = 2;
    if (has_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contri());
    }

    // optional uint64 cur_encouragement_gold_count = 3;
    if (has_cur_encouragement_gold_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_encouragement_gold_count());
    }

    // optional uint64 cur_encouragement_diamond_count = 4;
    if (has_cur_encouragement_diamond_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_encouragement_diamond_count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBGuard::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBGuard* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBGuard*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBGuard::MergeFrom(const FactionDBGuard& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_contri()) {
      set_contri(from.contri());
    }
    if (from.has_cur_encouragement_gold_count()) {
      set_cur_encouragement_gold_count(from.cur_encouragement_gold_count());
    }
    if (from.has_cur_encouragement_diamond_count()) {
      set_cur_encouragement_diamond_count(from.cur_encouragement_diamond_count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBGuard::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBGuard::CopyFrom(const FactionDBGuard& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBGuard::IsInitialized() const {

  return true;
}

void FactionDBGuard::Swap(FactionDBGuard* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(contri_, other->contri_);
    std::swap(cur_encouragement_gold_count_, other->cur_encouragement_gold_count_);
    std::swap(cur_encouragement_diamond_count_, other->cur_encouragement_diamond_count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBGuard::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBGuard_descriptor_;
  metadata.reflection = FactionDBGuard_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleFactionDBData::kDonateNumFieldNumber;
const int RoleFactionDBData::kDonateFreshFieldNumber;
const int RoleFactionDBData::kSalaryFieldNumber;
const int RoleFactionDBData::kSalaryFreshFieldNumber;
const int RoleFactionDBData::kDinnerFieldNumber;
const int RoleFactionDBData::kSkillFieldNumber;
const int RoleFactionDBData::kGuardFieldNumber;
const int RoleFactionDBData::kFetchWarFieldNumber;
const int RoleFactionDBData::kFetchTimeFieldNumber;
#endif  // !_MSC_VER

RoleFactionDBData::RoleFactionDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleFactionDBData::InitAsDefaultInstance() {
  dinner_ = const_cast< ::proto_ff::FactionDBDinner*>(&::proto_ff::FactionDBDinner::default_instance());
  skill_ = const_cast< ::proto_ff::FactionDBSkill*>(&::proto_ff::FactionDBSkill::default_instance());
  guard_ = const_cast< ::proto_ff::FactionDBGuard*>(&::proto_ff::FactionDBGuard::default_instance());
}

RoleFactionDBData::RoleFactionDBData(const RoleFactionDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleFactionDBData::SharedCtor() {
  _cached_size_ = 0;
  donate_num_ = 0;
  donate_fresh_ = GOOGLE_ULONGLONG(0);
  salary_fresh_ = GOOGLE_ULONGLONG(0);
  dinner_ = NULL;
  skill_ = NULL;
  guard_ = NULL;
  fetch_war_ = 0;
  fetch_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleFactionDBData::~RoleFactionDBData() {
  SharedDtor();
}

void RoleFactionDBData::SharedDtor() {
  if (this != default_instance_) {
    delete dinner_;
    delete skill_;
    delete guard_;
  }
}

void RoleFactionDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleFactionDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleFactionDBData_descriptor_;
}

const RoleFactionDBData& RoleFactionDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleFactionDBData* RoleFactionDBData::default_instance_ = NULL;

RoleFactionDBData* RoleFactionDBData::New() const {
  return new RoleFactionDBData;
}

void RoleFactionDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    donate_num_ = 0;
    donate_fresh_ = GOOGLE_ULONGLONG(0);
    salary_fresh_ = GOOGLE_ULONGLONG(0);
    if (has_dinner()) {
      if (dinner_ != NULL) dinner_->::proto_ff::FactionDBDinner::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::proto_ff::FactionDBSkill::Clear();
    }
    if (has_guard()) {
      if (guard_ != NULL) guard_->::proto_ff::FactionDBGuard::Clear();
    }
    fetch_war_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fetch_time_ = GOOGLE_ULONGLONG(0);
  }
  salary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleFactionDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 donate_num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &donate_num_)));
          set_has_donate_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_donate_fresh;
        break;
      }

      // optional uint64 donate_fresh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_donate_fresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &donate_fresh_)));
          set_has_donate_fresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_salary;
        break;
      }

      // repeated .proto_ff.FactionDBSalary salary = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_salary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_salary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_salary;
        if (input->ExpectTag(32)) goto parse_salary_fresh;
        break;
      }

      // optional uint64 salary_fresh = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_salary_fresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &salary_fresh_)));
          set_has_salary_fresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dinner;
        break;
      }

      // optional .proto_ff.FactionDBDinner dinner = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dinner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dinner()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill;
        break;
      }

      // optional .proto_ff.FactionDBSkill skill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_guard;
        break;
      }

      // optional .proto_ff.FactionDBGuard guard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fetch_war;
        break;
      }

      // optional int32 fetch_war = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_war:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_war_)));
          set_has_fetch_war();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fetch_time;
        break;
      }

      // optional uint64 fetch_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fetch_time_)));
          set_has_fetch_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleFactionDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 donate_num = 1;
  if (has_donate_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->donate_num(), output);
  }

  // optional uint64 donate_fresh = 2;
  if (has_donate_fresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->donate_fresh(), output);
  }

  // repeated .proto_ff.FactionDBSalary salary = 3;
  for (int i = 0; i < this->salary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->salary(i), output);
  }

  // optional uint64 salary_fresh = 4;
  if (has_salary_fresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->salary_fresh(), output);
  }

  // optional .proto_ff.FactionDBDinner dinner = 5;
  if (has_dinner()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->dinner(), output);
  }

  // optional .proto_ff.FactionDBSkill skill = 6;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skill(), output);
  }

  // optional .proto_ff.FactionDBGuard guard = 7;
  if (has_guard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->guard(), output);
  }

  // optional int32 fetch_war = 8;
  if (has_fetch_war()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fetch_war(), output);
  }

  // optional uint64 fetch_time = 9;
  if (has_fetch_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->fetch_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleFactionDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 donate_num = 1;
  if (has_donate_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->donate_num(), target);
  }

  // optional uint64 donate_fresh = 2;
  if (has_donate_fresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->donate_fresh(), target);
  }

  // repeated .proto_ff.FactionDBSalary salary = 3;
  for (int i = 0; i < this->salary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->salary(i), target);
  }

  // optional uint64 salary_fresh = 4;
  if (has_salary_fresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->salary_fresh(), target);
  }

  // optional .proto_ff.FactionDBDinner dinner = 5;
  if (has_dinner()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->dinner(), target);
  }

  // optional .proto_ff.FactionDBSkill skill = 6;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skill(), target);
  }

  // optional .proto_ff.FactionDBGuard guard = 7;
  if (has_guard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->guard(), target);
  }

  // optional int32 fetch_war = 8;
  if (has_fetch_war()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->fetch_war(), target);
  }

  // optional uint64 fetch_time = 9;
  if (has_fetch_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->fetch_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleFactionDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 donate_num = 1;
    if (has_donate_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->donate_num());
    }

    // optional uint64 donate_fresh = 2;
    if (has_donate_fresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->donate_fresh());
    }

    // optional uint64 salary_fresh = 4;
    if (has_salary_fresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->salary_fresh());
    }

    // optional .proto_ff.FactionDBDinner dinner = 5;
    if (has_dinner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dinner());
    }

    // optional .proto_ff.FactionDBSkill skill = 6;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .proto_ff.FactionDBGuard guard = 7;
    if (has_guard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guard());
    }

    // optional int32 fetch_war = 8;
    if (has_fetch_war()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch_war());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 fetch_time = 9;
    if (has_fetch_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fetch_time());
    }

  }
  // repeated .proto_ff.FactionDBSalary salary = 3;
  total_size += 1 * this->salary_size();
  for (int i = 0; i < this->salary_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->salary(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleFactionDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleFactionDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleFactionDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleFactionDBData::MergeFrom(const RoleFactionDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  salary_.MergeFrom(from.salary_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_donate_num()) {
      set_donate_num(from.donate_num());
    }
    if (from.has_donate_fresh()) {
      set_donate_fresh(from.donate_fresh());
    }
    if (from.has_salary_fresh()) {
      set_salary_fresh(from.salary_fresh());
    }
    if (from.has_dinner()) {
      mutable_dinner()->::proto_ff::FactionDBDinner::MergeFrom(from.dinner());
    }
    if (from.has_skill()) {
      mutable_skill()->::proto_ff::FactionDBSkill::MergeFrom(from.skill());
    }
    if (from.has_guard()) {
      mutable_guard()->::proto_ff::FactionDBGuard::MergeFrom(from.guard());
    }
    if (from.has_fetch_war()) {
      set_fetch_war(from.fetch_war());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fetch_time()) {
      set_fetch_time(from.fetch_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleFactionDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleFactionDBData::CopyFrom(const RoleFactionDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleFactionDBData::IsInitialized() const {

  return true;
}

void RoleFactionDBData::Swap(RoleFactionDBData* other) {
  if (other != this) {
    std::swap(donate_num_, other->donate_num_);
    std::swap(donate_fresh_, other->donate_fresh_);
    salary_.Swap(&other->salary_);
    std::swap(salary_fresh_, other->salary_fresh_);
    std::swap(dinner_, other->dinner_);
    std::swap(skill_, other->skill_);
    std::swap(guard_, other->guard_);
    std::swap(fetch_war_, other->fetch_war_);
    std::swap(fetch_time_, other->fetch_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleFactionDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleFactionDBData_descriptor_;
  metadata.reflection = RoleFactionDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleBestEQDBData::kSlotsFieldNumber;
const int RoleBestEQDBData::kTasksFieldNumber;
#endif  // !_MSC_VER

RoleBestEQDBData::RoleBestEQDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleBestEQDBData::InitAsDefaultInstance() {
}

RoleBestEQDBData::RoleBestEQDBData(const RoleBestEQDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleBestEQDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleBestEQDBData::~RoleBestEQDBData() {
  SharedDtor();
}

void RoleBestEQDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleBestEQDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleBestEQDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleBestEQDBData_descriptor_;
}

const RoleBestEQDBData& RoleBestEQDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleBestEQDBData* RoleBestEQDBData::default_instance_ = NULL;

RoleBestEQDBData* RoleBestEQDBData::New() const {
  return new RoleBestEQDBData;
}

void RoleBestEQDBData::Clear() {
  slots_.Clear();
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleBestEQDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.BestEQSlotInfo slots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_slots;
        if (input->ExpectTag(18)) goto parse_tasks;
        break;
      }

      // repeated .proto_ff.BestEQTask tasks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleBestEQDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.BestEQSlotInfo slots = 1;
  for (int i = 0; i < this->slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->slots(i), output);
  }

  // repeated .proto_ff.BestEQTask tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleBestEQDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.BestEQSlotInfo slots = 1;
  for (int i = 0; i < this->slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->slots(i), target);
  }

  // repeated .proto_ff.BestEQTask tasks = 2;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleBestEQDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.BestEQSlotInfo slots = 1;
  total_size += 1 * this->slots_size();
  for (int i = 0; i < this->slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slots(i));
  }

  // repeated .proto_ff.BestEQTask tasks = 2;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleBestEQDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleBestEQDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleBestEQDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleBestEQDBData::MergeFrom(const RoleBestEQDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  slots_.MergeFrom(from.slots_);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleBestEQDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleBestEQDBData::CopyFrom(const RoleBestEQDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleBestEQDBData::IsInitialized() const {

  for (int i = 0; i < slots_size(); i++) {
    if (!this->slots(i).IsInitialized()) return false;
  }
  return true;
}

void RoleBestEQDBData::Swap(RoleBestEQDBData* other) {
  if (other != this) {
    slots_.Swap(&other->slots_);
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleBestEQDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleBestEQDBData_descriptor_;
  metadata.reflection = RoleBestEQDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AncientDBData::kUnlockStarIdFieldNumber;
const int AncientDBData::kInfosFieldNumber;
#endif  // !_MSC_VER

AncientDBData::AncientDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AncientDBData::InitAsDefaultInstance() {
}

AncientDBData::AncientDBData(const AncientDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AncientDBData::SharedCtor() {
  _cached_size_ = 0;
  unlock_star_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AncientDBData::~AncientDBData() {
  SharedDtor();
}

void AncientDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AncientDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AncientDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AncientDBData_descriptor_;
}

const AncientDBData& AncientDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

AncientDBData* AncientDBData::default_instance_ = NULL;

AncientDBData* AncientDBData::New() const {
  return new AncientDBData;
}

void AncientDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unlock_star_id_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AncientDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 unlock_star_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unlock_star_id_)));
          set_has_unlock_star_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        break;
      }

      // repeated .proto_ff.AncientInfo infos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AncientDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 unlock_star_id = 1;
  if (has_unlock_star_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->unlock_star_id(), output);
  }

  // repeated .proto_ff.AncientInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AncientDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 unlock_star_id = 1;
  if (has_unlock_star_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->unlock_star_id(), target);
  }

  // repeated .proto_ff.AncientInfo infos = 2;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AncientDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 unlock_star_id = 1;
    if (has_unlock_star_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->unlock_star_id());
    }

  }
  // repeated .proto_ff.AncientInfo infos = 2;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AncientDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AncientDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AncientDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AncientDBData::MergeFrom(const AncientDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unlock_star_id()) {
      set_unlock_star_id(from.unlock_star_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AncientDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AncientDBData::CopyFrom(const AncientDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AncientDBData::IsInitialized() const {

  return true;
}

void AncientDBData::Swap(AncientDBData* other) {
  if (other != this) {
    std::swap(unlock_star_id_, other->unlock_star_id_);
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AncientDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AncientDBData_descriptor_;
  metadata.reflection = AncientDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleEmblemDBInfo::kIdFieldNumber;
const int RoleEmblemDBInfo::kLvFieldNumber;
const int RoleEmblemDBInfo::kStarFieldNumber;
#endif  // !_MSC_VER

RoleEmblemDBInfo::RoleEmblemDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleEmblemDBInfo::InitAsDefaultInstance() {
}

RoleEmblemDBInfo::RoleEmblemDBInfo(const RoleEmblemDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleEmblemDBInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  star_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleEmblemDBInfo::~RoleEmblemDBInfo() {
  SharedDtor();
}

void RoleEmblemDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleEmblemDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleEmblemDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleEmblemDBInfo_descriptor_;
}

const RoleEmblemDBInfo& RoleEmblemDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleEmblemDBInfo* RoleEmblemDBInfo::default_instance_ = NULL;

RoleEmblemDBInfo* RoleEmblemDBInfo::New() const {
  return new RoleEmblemDBInfo;
}

void RoleEmblemDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
    star_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleEmblemDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lv;
        break;
      }

      // optional int32 lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleEmblemDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleEmblemDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleEmblemDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleEmblemDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleEmblemDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleEmblemDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleEmblemDBInfo::MergeFrom(const RoleEmblemDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleEmblemDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleEmblemDBInfo::CopyFrom(const RoleEmblemDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleEmblemDBInfo::IsInitialized() const {

  return true;
}

void RoleEmblemDBInfo::Swap(RoleEmblemDBInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(star_, other->star_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleEmblemDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleEmblemDBInfo_descriptor_;
  metadata.reflection = RoleEmblemDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Role1v1DBInfo::kScoreFieldNumber;
const int Role1v1DBInfo::kMatchNumFieldNumber;
const int Role1v1DBInfo::kWinNumFieldNumber;
const int Role1v1DBInfo::kContiNumFieldNumber;
const int Role1v1DBInfo::kRewardNumFieldNumber;
const int Role1v1DBInfo::kAlreadyFetchFieldNumber;
const int Role1v1DBInfo::kRewardTimeFieldNumber;
const int Role1v1DBInfo::kResetTimeFieldNumber;
const int Role1v1DBInfo::kCurContiNumFieldNumber;
#endif  // !_MSC_VER

Role1v1DBInfo::Role1v1DBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Role1v1DBInfo::InitAsDefaultInstance() {
}

Role1v1DBInfo::Role1v1DBInfo(const Role1v1DBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Role1v1DBInfo::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  match_num_ = 0;
  win_num_ = 0;
  conti_num_ = 0;
  reward_num_ = 0;
  reward_time_ = GOOGLE_ULONGLONG(0);
  reset_time_ = GOOGLE_ULONGLONG(0);
  cur_conti_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Role1v1DBInfo::~Role1v1DBInfo() {
  SharedDtor();
}

void Role1v1DBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Role1v1DBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role1v1DBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Role1v1DBInfo_descriptor_;
}

const Role1v1DBInfo& Role1v1DBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

Role1v1DBInfo* Role1v1DBInfo::default_instance_ = NULL;

Role1v1DBInfo* Role1v1DBInfo::New() const {
  return new Role1v1DBInfo;
}

void Role1v1DBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    score_ = 0;
    match_num_ = 0;
    win_num_ = 0;
    conti_num_ = 0;
    reward_num_ = 0;
    reward_time_ = GOOGLE_ULONGLONG(0);
    reset_time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cur_conti_num_ = 0;
  }
  already_fetch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Role1v1DBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 score = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_match_num;
        break;
      }

      // optional int32 match_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_num_)));
          set_has_match_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_conti_num;
        break;
      }

      // optional int32 conti_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conti_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &conti_num_)));
          set_has_conti_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reward_num;
        break;
      }

      // optional int32 reward_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_num_)));
          set_has_reward_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_already_fetch;
        break;
      }

      // repeated int32 already_fetch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_already_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_already_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_already_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_already_fetch;
        if (input->ExpectTag(56)) goto parse_reward_time;
        break;
      }

      // optional uint64 reward_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reward_time_)));
          set_has_reward_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_reset_time;
        break;
      }

      // optional uint64 reset_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reset_time_)));
          set_has_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cur_conti_num;
        break;
      }

      // optional int32 cur_conti_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_conti_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_conti_num_)));
          set_has_cur_conti_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Role1v1DBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 score = 1;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->score(), output);
  }

  // optional int32 match_num = 2;
  if (has_match_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->match_num(), output);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->win_num(), output);
  }

  // optional int32 conti_num = 4;
  if (has_conti_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->conti_num(), output);
  }

  // optional int32 reward_num = 5;
  if (has_reward_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reward_num(), output);
  }

  // repeated int32 already_fetch = 6;
  for (int i = 0; i < this->already_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->already_fetch(i), output);
  }

  // optional uint64 reward_time = 7;
  if (has_reward_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->reward_time(), output);
  }

  // optional uint64 reset_time = 8;
  if (has_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->reset_time(), output);
  }

  // optional int32 cur_conti_num = 9;
  if (has_cur_conti_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cur_conti_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Role1v1DBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 score = 1;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->score(), target);
  }

  // optional int32 match_num = 2;
  if (has_match_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->match_num(), target);
  }

  // optional int32 win_num = 3;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->win_num(), target);
  }

  // optional int32 conti_num = 4;
  if (has_conti_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->conti_num(), target);
  }

  // optional int32 reward_num = 5;
  if (has_reward_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reward_num(), target);
  }

  // repeated int32 already_fetch = 6;
  for (int i = 0; i < this->already_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->already_fetch(i), target);
  }

  // optional uint64 reward_time = 7;
  if (has_reward_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->reward_time(), target);
  }

  // optional uint64 reset_time = 8;
  if (has_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->reset_time(), target);
  }

  // optional int32 cur_conti_num = 9;
  if (has_cur_conti_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cur_conti_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Role1v1DBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 score = 1;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 match_num = 2;
    if (has_match_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_num());
    }

    // optional int32 win_num = 3;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional int32 conti_num = 4;
    if (has_conti_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->conti_num());
    }

    // optional int32 reward_num = 5;
    if (has_reward_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward_num());
    }

    // optional uint64 reward_time = 7;
    if (has_reward_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reward_time());
    }

    // optional uint64 reset_time = 8;
    if (has_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reset_time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cur_conti_num = 9;
    if (has_cur_conti_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_conti_num());
    }

  }
  // repeated int32 already_fetch = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->already_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->already_fetch(i));
    }
    total_size += 1 * this->already_fetch_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role1v1DBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Role1v1DBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Role1v1DBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Role1v1DBInfo::MergeFrom(const Role1v1DBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  already_fetch_.MergeFrom(from.already_fetch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_match_num()) {
      set_match_num(from.match_num());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_conti_num()) {
      set_conti_num(from.conti_num());
    }
    if (from.has_reward_num()) {
      set_reward_num(from.reward_num());
    }
    if (from.has_reward_time()) {
      set_reward_time(from.reward_time());
    }
    if (from.has_reset_time()) {
      set_reset_time(from.reset_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_conti_num()) {
      set_cur_conti_num(from.cur_conti_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Role1v1DBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role1v1DBInfo::CopyFrom(const Role1v1DBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role1v1DBInfo::IsInitialized() const {

  return true;
}

void Role1v1DBInfo::Swap(Role1v1DBInfo* other) {
  if (other != this) {
    std::swap(score_, other->score_);
    std::swap(match_num_, other->match_num_);
    std::swap(win_num_, other->win_num_);
    std::swap(conti_num_, other->conti_num_);
    std::swap(reward_num_, other->reward_num_);
    already_fetch_.Swap(&other->already_fetch_);
    std::swap(reward_time_, other->reward_time_);
    std::swap(reset_time_, other->reset_time_);
    std::swap(cur_conti_num_, other->cur_conti_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Role1v1DBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Role1v1DBInfo_descriptor_;
  metadata.reflection = Role1v1DBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RolePvpDBData::kPkmodeFieldNumber;
const int RolePvpDBData::kChgTimeFieldNumber;
const int RolePvpDBData::kKillvalueFieldNumber;
const int RolePvpDBData::kOnlinesecFieldNumber;
const int RolePvpDBData::kEmblemFieldNumber;
const int RolePvpDBData::kPk1V1FieldNumber;
#endif  // !_MSC_VER

RolePvpDBData::RolePvpDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RolePvpDBData::InitAsDefaultInstance() {
  pk1v1_ = const_cast< ::proto_ff::Role1v1DBInfo*>(&::proto_ff::Role1v1DBInfo::default_instance());
}

RolePvpDBData::RolePvpDBData(const RolePvpDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RolePvpDBData::SharedCtor() {
  _cached_size_ = 0;
  pkmode_ = 0;
  chg_time_ = 0;
  killvalue_ = 0;
  onlinesec_ = 0;
  pk1v1_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RolePvpDBData::~RolePvpDBData() {
  SharedDtor();
}

void RolePvpDBData::SharedDtor() {
  if (this != default_instance_) {
    delete pk1v1_;
  }
}

void RolePvpDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RolePvpDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RolePvpDBData_descriptor_;
}

const RolePvpDBData& RolePvpDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RolePvpDBData* RolePvpDBData::default_instance_ = NULL;

RolePvpDBData* RolePvpDBData::New() const {
  return new RolePvpDBData;
}

void RolePvpDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pkmode_ = 0;
    chg_time_ = 0;
    killvalue_ = 0;
    onlinesec_ = 0;
    if (has_pk1v1()) {
      if (pk1v1_ != NULL) pk1v1_->::proto_ff::Role1v1DBInfo::Clear();
    }
  }
  emblem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RolePvpDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 pkmode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkmode_)));
          set_has_pkmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chg_time;
        break;
      }

      // optional int32 chg_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chg_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chg_time_)));
          set_has_chg_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_killvalue;
        break;
      }

      // optional int32 killvalue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killvalue_)));
          set_has_killvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_onlinesec;
        break;
      }

      // optional int32 onlinesec = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlinesec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinesec_)));
          set_has_onlinesec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_emblem;
        break;
      }

      // repeated .proto_ff.RoleEmblemDBInfo emblem = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emblem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emblem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_emblem;
        if (input->ExpectTag(50)) goto parse_pk1v1;
        break;
      }

      // optional .proto_ff.Role1v1DBInfo pk1v1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pk1v1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pk1v1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RolePvpDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 pkmode = 1;
  if (has_pkmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pkmode(), output);
  }

  // optional int32 chg_time = 2;
  if (has_chg_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chg_time(), output);
  }

  // optional int32 killvalue = 3;
  if (has_killvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->killvalue(), output);
  }

  // optional int32 onlinesec = 4;
  if (has_onlinesec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->onlinesec(), output);
  }

  // repeated .proto_ff.RoleEmblemDBInfo emblem = 5;
  for (int i = 0; i < this->emblem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->emblem(i), output);
  }

  // optional .proto_ff.Role1v1DBInfo pk1v1 = 6;
  if (has_pk1v1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->pk1v1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RolePvpDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 pkmode = 1;
  if (has_pkmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pkmode(), target);
  }

  // optional int32 chg_time = 2;
  if (has_chg_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chg_time(), target);
  }

  // optional int32 killvalue = 3;
  if (has_killvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->killvalue(), target);
  }

  // optional int32 onlinesec = 4;
  if (has_onlinesec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->onlinesec(), target);
  }

  // repeated .proto_ff.RoleEmblemDBInfo emblem = 5;
  for (int i = 0; i < this->emblem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->emblem(i), target);
  }

  // optional .proto_ff.Role1v1DBInfo pk1v1 = 6;
  if (has_pk1v1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->pk1v1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RolePvpDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 pkmode = 1;
    if (has_pkmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkmode());
    }

    // optional int32 chg_time = 2;
    if (has_chg_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chg_time());
    }

    // optional int32 killvalue = 3;
    if (has_killvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killvalue());
    }

    // optional int32 onlinesec = 4;
    if (has_onlinesec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinesec());
    }

    // optional .proto_ff.Role1v1DBInfo pk1v1 = 6;
    if (has_pk1v1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pk1v1());
    }

  }
  // repeated .proto_ff.RoleEmblemDBInfo emblem = 5;
  total_size += 1 * this->emblem_size();
  for (int i = 0; i < this->emblem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->emblem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RolePvpDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RolePvpDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RolePvpDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RolePvpDBData::MergeFrom(const RolePvpDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  emblem_.MergeFrom(from.emblem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pkmode()) {
      set_pkmode(from.pkmode());
    }
    if (from.has_chg_time()) {
      set_chg_time(from.chg_time());
    }
    if (from.has_killvalue()) {
      set_killvalue(from.killvalue());
    }
    if (from.has_onlinesec()) {
      set_onlinesec(from.onlinesec());
    }
    if (from.has_pk1v1()) {
      mutable_pk1v1()->::proto_ff::Role1v1DBInfo::MergeFrom(from.pk1v1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RolePvpDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RolePvpDBData::CopyFrom(const RolePvpDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RolePvpDBData::IsInitialized() const {

  return true;
}

void RolePvpDBData::Swap(RolePvpDBData* other) {
  if (other != this) {
    std::swap(pkmode_, other->pkmode_);
    std::swap(chg_time_, other->chg_time_);
    std::swap(killvalue_, other->killvalue_);
    std::swap(onlinesec_, other->onlinesec_);
    emblem_.Swap(&other->emblem_);
    std::swap(pk1v1_, other->pk1v1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RolePvpDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RolePvpDBData_descriptor_;
  metadata.reflection = RolePvpDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleMarryExpress::kNameFieldNumber;
const int RoleMarryExpress::kItemFieldNumber;
const int RoleMarryExpress::kTextIdFieldNumber;
const int RoleMarryExpress::kTimeFieldNumber;
#endif  // !_MSC_VER

RoleMarryExpress::RoleMarryExpress()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleMarryExpress::InitAsDefaultInstance() {
}

RoleMarryExpress::RoleMarryExpress(const RoleMarryExpress& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleMarryExpress::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  item_ = GOOGLE_ULONGLONG(0);
  text_id_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleMarryExpress::~RoleMarryExpress() {
  SharedDtor();
}

void RoleMarryExpress::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoleMarryExpress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleMarryExpress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMarryExpress_descriptor_;
}

const RoleMarryExpress& RoleMarryExpress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleMarryExpress* RoleMarryExpress::default_instance_ = NULL;

RoleMarryExpress* RoleMarryExpress::New() const {
  return new RoleMarryExpress;
}

void RoleMarryExpress::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    item_ = GOOGLE_ULONGLONG(0);
    text_id_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleMarryExpress::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_item;
        break;
      }

      // optional uint64 item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_text_id;
        break;
      }

      // optional int32 text_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_text_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_id_)));
          set_has_text_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleMarryExpress::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional uint64 item = 2;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item(), output);
  }

  // optional int32 text_id = 3;
  if (has_text_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->text_id(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleMarryExpress::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional uint64 item = 2;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item(), target);
  }

  // optional int32 text_id = 3;
  if (has_text_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->text_id(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleMarryExpress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 item = 2;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item());
    }

    // optional int32 text_id = 3;
    if (has_text_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_id());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleMarryExpress::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleMarryExpress* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleMarryExpress*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleMarryExpress::MergeFrom(const RoleMarryExpress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_text_id()) {
      set_text_id(from.text_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleMarryExpress::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMarryExpress::CopyFrom(const RoleMarryExpress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMarryExpress::IsInitialized() const {

  return true;
}

void RoleMarryExpress::Swap(RoleMarryExpress* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(item_, other->item_);
    std::swap(text_id_, other->text_id_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleMarryExpress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleMarryExpress_descriptor_;
  metadata.reflection = RoleMarryExpress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleMarryDBData::kInfoFieldNumber;
const int RoleMarryDBData::kToSlefFieldNumber;
const int RoleMarryDBData::kToOtherFieldNumber;
const int RoleMarryDBData::kDupRecordFieldNumber;
const int RoleMarryDBData::kLastTimeFieldNumber;
#endif  // !_MSC_VER

RoleMarryDBData::RoleMarryDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleMarryDBData::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::MarrySelfInfo*>(&::proto_ff::MarrySelfInfo::default_instance());
  dup_record_ = const_cast< ::proto_ff::WeddingDupRoleInfo*>(&::proto_ff::WeddingDupRoleInfo::default_instance());
}

RoleMarryDBData::RoleMarryDBData(const RoleMarryDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleMarryDBData::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  dup_record_ = NULL;
  lasttime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleMarryDBData::~RoleMarryDBData() {
  SharedDtor();
}

void RoleMarryDBData::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete dup_record_;
  }
}

void RoleMarryDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleMarryDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMarryDBData_descriptor_;
}

const RoleMarryDBData& RoleMarryDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleMarryDBData* RoleMarryDBData::default_instance_ = NULL;

RoleMarryDBData* RoleMarryDBData::New() const {
  return new RoleMarryDBData;
}

void RoleMarryDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::MarrySelfInfo::Clear();
    }
    if (has_dup_record()) {
      if (dup_record_ != NULL) dup_record_->::proto_ff::WeddingDupRoleInfo::Clear();
    }
    lasttime_ = GOOGLE_ULONGLONG(0);
  }
  toslef_.Clear();
  toother_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleMarryDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.MarrySelfInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toSlef;
        break;
      }

      // repeated .proto_ff.RoleMarryExpress toSlef = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toSlef:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toslef()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_toSlef;
        if (input->ExpectTag(26)) goto parse_toOther;
        break;
      }

      // repeated .proto_ff.RoleMarryExpress toOther = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_toOther:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_toother()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_toOther;
        if (input->ExpectTag(34)) goto parse_dup_record;
        break;
      }

      // optional .proto_ff.WeddingDupRoleInfo dup_record = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dup_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dup_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lastTime;
        break;
      }

      // optional uint64 lastTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleMarryDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.MarrySelfInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // repeated .proto_ff.RoleMarryExpress toSlef = 2;
  for (int i = 0; i < this->toslef_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->toslef(i), output);
  }

  // repeated .proto_ff.RoleMarryExpress toOther = 3;
  for (int i = 0; i < this->toother_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->toother(i), output);
  }

  // optional .proto_ff.WeddingDupRoleInfo dup_record = 4;
  if (has_dup_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dup_record(), output);
  }

  // optional uint64 lastTime = 5;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->lasttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleMarryDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.MarrySelfInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // repeated .proto_ff.RoleMarryExpress toSlef = 2;
  for (int i = 0; i < this->toslef_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->toslef(i), target);
  }

  // repeated .proto_ff.RoleMarryExpress toOther = 3;
  for (int i = 0; i < this->toother_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->toother(i), target);
  }

  // optional .proto_ff.WeddingDupRoleInfo dup_record = 4;
  if (has_dup_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dup_record(), target);
  }

  // optional uint64 lastTime = 5;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->lasttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleMarryDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.MarrySelfInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .proto_ff.WeddingDupRoleInfo dup_record = 4;
    if (has_dup_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dup_record());
    }

    // optional uint64 lastTime = 5;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lasttime());
    }

  }
  // repeated .proto_ff.RoleMarryExpress toSlef = 2;
  total_size += 1 * this->toslef_size();
  for (int i = 0; i < this->toslef_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toslef(i));
  }

  // repeated .proto_ff.RoleMarryExpress toOther = 3;
  total_size += 1 * this->toother_size();
  for (int i = 0; i < this->toother_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->toother(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleMarryDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleMarryDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleMarryDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleMarryDBData::MergeFrom(const RoleMarryDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  toslef_.MergeFrom(from.toslef_);
  toother_.MergeFrom(from.toother_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::MarrySelfInfo::MergeFrom(from.info());
    }
    if (from.has_dup_record()) {
      mutable_dup_record()->::proto_ff::WeddingDupRoleInfo::MergeFrom(from.dup_record());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleMarryDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMarryDBData::CopyFrom(const RoleMarryDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMarryDBData::IsInitialized() const {

  return true;
}

void RoleMarryDBData::Swap(RoleMarryDBData* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    toslef_.Swap(&other->toslef_);
    toother_.Swap(&other->toother_);
    std::swap(dup_record_, other->dup_record_);
    std::swap(lasttime_, other->lasttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleMarryDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleMarryDBData_descriptor_;
  metadata.reflection = RoleMarryDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EncylopediaDBData::kHandBookFieldNumber;
#endif  // !_MSC_VER

EncylopediaDBData::EncylopediaDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EncylopediaDBData::InitAsDefaultInstance() {
  hand_book_ = const_cast< ::proto_ff::HandBookPBData*>(&::proto_ff::HandBookPBData::default_instance());
}

EncylopediaDBData::EncylopediaDBData(const EncylopediaDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EncylopediaDBData::SharedCtor() {
  _cached_size_ = 0;
  hand_book_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncylopediaDBData::~EncylopediaDBData() {
  SharedDtor();
}

void EncylopediaDBData::SharedDtor() {
  if (this != default_instance_) {
    delete hand_book_;
  }
}

void EncylopediaDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncylopediaDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncylopediaDBData_descriptor_;
}

const EncylopediaDBData& EncylopediaDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

EncylopediaDBData* EncylopediaDBData::default_instance_ = NULL;

EncylopediaDBData* EncylopediaDBData::New() const {
  return new EncylopediaDBData;
}

void EncylopediaDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hand_book()) {
      if (hand_book_ != NULL) hand_book_->::proto_ff::HandBookPBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncylopediaDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.HandBookPBData hand_book = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hand_book()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EncylopediaDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.HandBookPBData hand_book = 1;
  if (has_hand_book()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->hand_book(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EncylopediaDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.HandBookPBData hand_book = 1;
  if (has_hand_book()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->hand_book(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EncylopediaDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.HandBookPBData hand_book = 1;
    if (has_hand_book()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hand_book());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncylopediaDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncylopediaDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncylopediaDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncylopediaDBData::MergeFrom(const EncylopediaDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hand_book()) {
      mutable_hand_book()->::proto_ff::HandBookPBData::MergeFrom(from.hand_book());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncylopediaDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncylopediaDBData::CopyFrom(const EncylopediaDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncylopediaDBData::IsInitialized() const {

  if (has_hand_book()) {
    if (!this->hand_book().IsInitialized()) return false;
  }
  return true;
}

void EncylopediaDBData::Swap(EncylopediaDBData* other) {
  if (other != this) {
    std::swap(hand_book_, other->hand_book_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncylopediaDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncylopediaDBData_descriptor_;
  metadata.reflection = EncylopediaDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GVBPData::kRewardsStateFieldNumber;
const int GVBPData::kDailyScoreFieldNumber;
const int GVBPData::kRecordTimeFieldNumber;
#endif  // !_MSC_VER

GVBPData::GVBPData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GVBPData::InitAsDefaultInstance() {
}

GVBPData::GVBPData(const GVBPData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GVBPData::SharedCtor() {
  _cached_size_ = 0;
  daily_score_ = 0u;
  record_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GVBPData::~GVBPData() {
  SharedDtor();
}

void GVBPData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GVBPData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GVBPData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GVBPData_descriptor_;
}

const GVBPData& GVBPData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GVBPData* GVBPData::default_instance_ = NULL;

GVBPData* GVBPData::New() const {
  return new GVBPData;
}

void GVBPData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    daily_score_ = 0u;
    record_time_ = GOOGLE_ULONGLONG(0);
  }
  rewards_state_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GVBPData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 rewards_state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewards_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_rewards_state())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewards_state())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rewards_state;
        if (input->ExpectTag(16)) goto parse_daily_score;
        break;
      }

      // optional uint32 daily_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_daily_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &daily_score_)));
          set_has_daily_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_record_time;
        break;
      }

      // optional uint64 record_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_record_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &record_time_)));
          set_has_record_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GVBPData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 rewards_state = 1;
  for (int i = 0; i < this->rewards_state_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->rewards_state(i), output);
  }

  // optional uint32 daily_score = 2;
  if (has_daily_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->daily_score(), output);
  }

  // optional uint64 record_time = 3;
  if (has_record_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->record_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GVBPData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 rewards_state = 1;
  for (int i = 0; i < this->rewards_state_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->rewards_state(i), target);
  }

  // optional uint32 daily_score = 2;
  if (has_daily_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->daily_score(), target);
  }

  // optional uint64 record_time = 3;
  if (has_record_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->record_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GVBPData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 daily_score = 2;
    if (has_daily_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->daily_score());
    }

    // optional uint64 record_time = 3;
    if (has_record_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->record_time());
    }

  }
  // repeated uint32 rewards_state = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewards_state_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewards_state(i));
    }
    total_size += 1 * this->rewards_state_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GVBPData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GVBPData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GVBPData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GVBPData::MergeFrom(const GVBPData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewards_state_.MergeFrom(from.rewards_state_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_daily_score()) {
      set_daily_score(from.daily_score());
    }
    if (from.has_record_time()) {
      set_record_time(from.record_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GVBPData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GVBPData::CopyFrom(const GVBPData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GVBPData::IsInitialized() const {

  return true;
}

void GVBPData::Swap(GVBPData* other) {
  if (other != this) {
    rewards_state_.Swap(&other->rewards_state_);
    std::swap(daily_score_, other->daily_score_);
    std::swap(record_time_, other->record_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GVBPData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GVBPData_descriptor_;
  metadata.reflection = GVBPData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChargeDBData::kFirstRmbFieldNumber;
const int ChargeDBData::kFirstFetchFieldNumber;
const int ChargeDBData::kDiaRmbFieldNumber;
const int ChargeDBData::kDiaFetchFieldNumber;
const int ChargeDBData::kStarRmbFieldNumber;
const int ChargeDBData::kStarFetchFieldNumber;
const int ChargeDBData::kKingRmbFieldNumber;
const int ChargeDBData::kKingFetchFieldNumber;
const int ChargeDBData::kSecondRmbFieldNumber;
const int ChargeDBData::kSecondFetchFieldNumber;
const int ChargeDBData::kOpenTotalFieldNumber;
const int ChargeDBData::kOpenTotalFetchFieldNumber;
#endif  // !_MSC_VER

ChargeDBData::ChargeDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChargeDBData::InitAsDefaultInstance() {
}

ChargeDBData::ChargeDBData(const ChargeDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChargeDBData::SharedCtor() {
  _cached_size_ = 0;
  first_rmb_ = 0;
  dia_rmb_ = 0;
  star_rmb_ = 0;
  king_rmb_ = 0;
  second_rmb_ = 0;
  open_total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChargeDBData::~ChargeDBData() {
  SharedDtor();
}

void ChargeDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChargeDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChargeDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChargeDBData_descriptor_;
}

const ChargeDBData& ChargeDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ChargeDBData* ChargeDBData::default_instance_ = NULL;

ChargeDBData* ChargeDBData::New() const {
  return new ChargeDBData;
}

void ChargeDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    first_rmb_ = 0;
    dia_rmb_ = 0;
    star_rmb_ = 0;
    king_rmb_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    second_rmb_ = 0;
    open_total_ = 0;
  }
  first_fetch_.Clear();
  dia_fetch_.Clear();
  star_fetch_.Clear();
  king_fetch_.Clear();
  second_fetch_.Clear();
  open_total_fetch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChargeDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 first_rmb = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &first_rmb_)));
          set_has_first_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_fetch;
        break;
      }

      // repeated int32 first_fetch = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_first_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_first_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_first_fetch;
        if (input->ExpectTag(24)) goto parse_dia_rmb;
        break;
      }

      // optional int32 dia_rmb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dia_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dia_rmb_)));
          set_has_dia_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dia_fetch;
        break;
      }

      // repeated int32 dia_fetch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dia_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_dia_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dia_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dia_fetch;
        if (input->ExpectTag(40)) goto parse_star_rmb;
        break;
      }

      // optional int32 star_rmb = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_rmb_)));
          set_has_star_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star_fetch;
        break;
      }

      // repeated int32 star_fetch = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_star_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_star_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_star_fetch;
        if (input->ExpectTag(56)) goto parse_king_rmb;
        break;
      }

      // optional int32 king_rmb = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &king_rmb_)));
          set_has_king_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_fetch;
        break;
      }

      // repeated int32 king_fetch = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_king_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_king_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_king_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_king_fetch;
        if (input->ExpectTag(72)) goto parse_second_rmb;
        break;
      }

      // optional int32 second_rmb = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_rmb:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_rmb_)));
          set_has_second_rmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_second_fetch;
        break;
      }

      // repeated int32 second_fetch = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_second_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_second_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_second_fetch;
        if (input->ExpectTag(88)) goto parse_open_total;
        break;
      }

      // optional int32 open_total = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &open_total_)));
          set_has_open_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_open_total_fetch;
        break;
      }

      // repeated int32 open_total_fetch = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_open_total_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96, input, this->mutable_open_total_fetch())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_open_total_fetch())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_open_total_fetch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChargeDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 first_rmb = 1;
  if (has_first_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first_rmb(), output);
  }

  // repeated int32 first_fetch = 2;
  for (int i = 0; i < this->first_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->first_fetch(i), output);
  }

  // optional int32 dia_rmb = 3;
  if (has_dia_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dia_rmb(), output);
  }

  // repeated int32 dia_fetch = 4;
  for (int i = 0; i < this->dia_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->dia_fetch(i), output);
  }

  // optional int32 star_rmb = 5;
  if (has_star_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->star_rmb(), output);
  }

  // repeated int32 star_fetch = 6;
  for (int i = 0; i < this->star_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->star_fetch(i), output);
  }

  // optional int32 king_rmb = 7;
  if (has_king_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->king_rmb(), output);
  }

  // repeated int32 king_fetch = 8;
  for (int i = 0; i < this->king_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->king_fetch(i), output);
  }

  // optional int32 second_rmb = 9;
  if (has_second_rmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->second_rmb(), output);
  }

  // repeated int32 second_fetch = 10;
  for (int i = 0; i < this->second_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->second_fetch(i), output);
  }

  // optional int32 open_total = 11;
  if (has_open_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->open_total(), output);
  }

  // repeated int32 open_total_fetch = 12;
  for (int i = 0; i < this->open_total_fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->open_total_fetch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChargeDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 first_rmb = 1;
  if (has_first_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first_rmb(), target);
  }

  // repeated int32 first_fetch = 2;
  for (int i = 0; i < this->first_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->first_fetch(i), target);
  }

  // optional int32 dia_rmb = 3;
  if (has_dia_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dia_rmb(), target);
  }

  // repeated int32 dia_fetch = 4;
  for (int i = 0; i < this->dia_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->dia_fetch(i), target);
  }

  // optional int32 star_rmb = 5;
  if (has_star_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->star_rmb(), target);
  }

  // repeated int32 star_fetch = 6;
  for (int i = 0; i < this->star_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->star_fetch(i), target);
  }

  // optional int32 king_rmb = 7;
  if (has_king_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->king_rmb(), target);
  }

  // repeated int32 king_fetch = 8;
  for (int i = 0; i < this->king_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->king_fetch(i), target);
  }

  // optional int32 second_rmb = 9;
  if (has_second_rmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->second_rmb(), target);
  }

  // repeated int32 second_fetch = 10;
  for (int i = 0; i < this->second_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->second_fetch(i), target);
  }

  // optional int32 open_total = 11;
  if (has_open_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->open_total(), target);
  }

  // repeated int32 open_total_fetch = 12;
  for (int i = 0; i < this->open_total_fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(12, this->open_total_fetch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChargeDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 first_rmb = 1;
    if (has_first_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->first_rmb());
    }

    // optional int32 dia_rmb = 3;
    if (has_dia_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dia_rmb());
    }

    // optional int32 star_rmb = 5;
    if (has_star_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star_rmb());
    }

    // optional int32 king_rmb = 7;
    if (has_king_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->king_rmb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 second_rmb = 9;
    if (has_second_rmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second_rmb());
    }

    // optional int32 open_total = 11;
    if (has_open_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->open_total());
    }

  }
  // repeated int32 first_fetch = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->first_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->first_fetch(i));
    }
    total_size += 1 * this->first_fetch_size() + data_size;
  }

  // repeated int32 dia_fetch = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->dia_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dia_fetch(i));
    }
    total_size += 1 * this->dia_fetch_size() + data_size;
  }

  // repeated int32 star_fetch = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->star_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->star_fetch(i));
    }
    total_size += 1 * this->star_fetch_size() + data_size;
  }

  // repeated int32 king_fetch = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->king_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->king_fetch(i));
    }
    total_size += 1 * this->king_fetch_size() + data_size;
  }

  // repeated int32 second_fetch = 10;
  {
    int data_size = 0;
    for (int i = 0; i < this->second_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->second_fetch(i));
    }
    total_size += 1 * this->second_fetch_size() + data_size;
  }

  // repeated int32 open_total_fetch = 12;
  {
    int data_size = 0;
    for (int i = 0; i < this->open_total_fetch_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->open_total_fetch(i));
    }
    total_size += 1 * this->open_total_fetch_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChargeDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChargeDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChargeDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChargeDBData::MergeFrom(const ChargeDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  first_fetch_.MergeFrom(from.first_fetch_);
  dia_fetch_.MergeFrom(from.dia_fetch_);
  star_fetch_.MergeFrom(from.star_fetch_);
  king_fetch_.MergeFrom(from.king_fetch_);
  second_fetch_.MergeFrom(from.second_fetch_);
  open_total_fetch_.MergeFrom(from.open_total_fetch_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_first_rmb()) {
      set_first_rmb(from.first_rmb());
    }
    if (from.has_dia_rmb()) {
      set_dia_rmb(from.dia_rmb());
    }
    if (from.has_star_rmb()) {
      set_star_rmb(from.star_rmb());
    }
    if (from.has_king_rmb()) {
      set_king_rmb(from.king_rmb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_second_rmb()) {
      set_second_rmb(from.second_rmb());
    }
    if (from.has_open_total()) {
      set_open_total(from.open_total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChargeDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChargeDBData::CopyFrom(const ChargeDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChargeDBData::IsInitialized() const {

  return true;
}

void ChargeDBData::Swap(ChargeDBData* other) {
  if (other != this) {
    std::swap(first_rmb_, other->first_rmb_);
    first_fetch_.Swap(&other->first_fetch_);
    std::swap(dia_rmb_, other->dia_rmb_);
    dia_fetch_.Swap(&other->dia_fetch_);
    std::swap(star_rmb_, other->star_rmb_);
    star_fetch_.Swap(&other->star_fetch_);
    std::swap(king_rmb_, other->king_rmb_);
    king_fetch_.Swap(&other->king_fetch_);
    std::swap(second_rmb_, other->second_rmb_);
    second_fetch_.Swap(&other->second_fetch_);
    std::swap(open_total_, other->open_total_);
    open_total_fetch_.Swap(&other->open_total_fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChargeDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChargeDBData_descriptor_;
  metadata.reflection = ChargeDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiftCondDBProto::kIdFieldNumber;
const int GiftCondDBProto::kTimeFieldNumber;
const int GiftCondDBProto::kBuyFieldNumber;
const int GiftCondDBProto::kCloseFieldNumber;
#endif  // !_MSC_VER

GiftCondDBProto::GiftCondDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GiftCondDBProto::InitAsDefaultInstance() {
}

GiftCondDBProto::GiftCondDBProto(const GiftCondDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GiftCondDBProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  buy_ = 0;
  close_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftCondDBProto::~GiftCondDBProto() {
  SharedDtor();
}

void GiftCondDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GiftCondDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiftCondDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiftCondDBProto_descriptor_;
}

const GiftCondDBProto& GiftCondDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GiftCondDBProto* GiftCondDBProto::default_instance_ = NULL;

GiftCondDBProto* GiftCondDBProto::New() const {
  return new GiftCondDBProto;
}

void GiftCondDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
    buy_ = 0;
    close_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiftCondDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buy;
        break;
      }

      // optional int32 buy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_)));
          set_has_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_close;
        break;
      }

      // optional int32 close = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &close_)));
          set_has_close();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftCondDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional int32 buy = 3;
  if (has_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buy(), output);
  }

  // optional int32 close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->close(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GiftCondDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional int32 buy = 3;
  if (has_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buy(), target);
  }

  // optional int32 close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->close(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GiftCondDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 buy = 3;
    if (has_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy());
    }

    // optional int32 close = 4;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->close());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftCondDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiftCondDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiftCondDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiftCondDBProto::MergeFrom(const GiftCondDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_buy()) {
      set_buy(from.buy());
    }
    if (from.has_close()) {
      set_close(from.close());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiftCondDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftCondDBProto::CopyFrom(const GiftCondDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftCondDBProto::IsInitialized() const {

  return true;
}

void GiftCondDBProto::Swap(GiftCondDBProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(time_, other->time_);
    std::swap(buy_, other->buy_);
    std::swap(close_, other->close_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiftCondDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiftCondDBProto_descriptor_;
  metadata.reflection = GiftCondDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiftZeroDBProto::kIdFieldNumber;
const int GiftZeroDBProto::kBuyFieldNumber;
const int GiftZeroDBProto::kFetchFieldNumber;
#endif  // !_MSC_VER

GiftZeroDBProto::GiftZeroDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GiftZeroDBProto::InitAsDefaultInstance() {
}

GiftZeroDBProto::GiftZeroDBProto(const GiftZeroDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GiftZeroDBProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  buy_ = 0;
  fetch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftZeroDBProto::~GiftZeroDBProto() {
  SharedDtor();
}

void GiftZeroDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GiftZeroDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiftZeroDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiftZeroDBProto_descriptor_;
}

const GiftZeroDBProto& GiftZeroDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GiftZeroDBProto* GiftZeroDBProto::default_instance_ = NULL;

GiftZeroDBProto* GiftZeroDBProto::New() const {
  return new GiftZeroDBProto;
}

void GiftZeroDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    buy_ = 0;
    fetch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiftZeroDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buy;
        break;
      }

      // optional int32 buy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buy_)));
          set_has_buy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftZeroDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 buy = 2;
  if (has_buy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buy(), output);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fetch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GiftZeroDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 buy = 2;
  if (has_buy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buy(), target);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fetch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GiftZeroDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 buy = 2;
    if (has_buy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buy());
    }

    // optional int32 fetch = 3;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftZeroDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiftZeroDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiftZeroDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiftZeroDBProto::MergeFrom(const GiftZeroDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_buy()) {
      set_buy(from.buy());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiftZeroDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftZeroDBProto::CopyFrom(const GiftZeroDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftZeroDBProto::IsInitialized() const {

  return true;
}

void GiftZeroDBProto::Swap(GiftZeroDBProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(buy_, other->buy_);
    std::swap(fetch_, other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiftZeroDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiftZeroDBProto_descriptor_;
  metadata.reflection = GiftZeroDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiftZeroLogDBProto::kNameFieldNumber;
const int GiftZeroLogDBProto::kTypeFieldNumber;
const int GiftZeroLogDBProto::kValueFieldNumber;
#endif  // !_MSC_VER

GiftZeroLogDBProto::GiftZeroLogDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GiftZeroLogDBProto::InitAsDefaultInstance() {
}

GiftZeroLogDBProto::GiftZeroLogDBProto(const GiftZeroLogDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GiftZeroLogDBProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftZeroLogDBProto::~GiftZeroLogDBProto() {
  SharedDtor();
}

void GiftZeroLogDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GiftZeroLogDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiftZeroLogDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiftZeroLogDBProto_descriptor_;
}

const GiftZeroLogDBProto& GiftZeroLogDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GiftZeroLogDBProto* GiftZeroLogDBProto::default_instance_ = NULL;

GiftZeroLogDBProto* GiftZeroLogDBProto::New() const {
  return new GiftZeroLogDBProto;
}

void GiftZeroLogDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiftZeroLogDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftZeroLogDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GiftZeroLogDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GiftZeroLogDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftZeroLogDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiftZeroLogDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiftZeroLogDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiftZeroLogDBProto::MergeFrom(const GiftZeroLogDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiftZeroLogDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftZeroLogDBProto::CopyFrom(const GiftZeroLogDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftZeroLogDBProto::IsInitialized() const {

  return true;
}

void GiftZeroLogDBProto::Swap(GiftZeroLogDBProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiftZeroLogDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiftZeroLogDBProto_descriptor_;
  metadata.reflection = GiftZeroLogDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiftDBData::kCondFieldNumber;
const int GiftDBData::kZeroFieldNumber;
const int GiftDBData::kZeroLogFieldNumber;
#endif  // !_MSC_VER

GiftDBData::GiftDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GiftDBData::InitAsDefaultInstance() {
}

GiftDBData::GiftDBData(const GiftDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GiftDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiftDBData::~GiftDBData() {
  SharedDtor();
}

void GiftDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GiftDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiftDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiftDBData_descriptor_;
}

const GiftDBData& GiftDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GiftDBData* GiftDBData::default_instance_ = NULL;

GiftDBData* GiftDBData::New() const {
  return new GiftDBData;
}

void GiftDBData::Clear() {
  cond_.Clear();
  zero_.Clear();
  zero_log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiftDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GiftCondDBProto cond = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cond:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cond()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cond;
        if (input->ExpectTag(18)) goto parse_zero;
        break;
      }

      // repeated .proto_ff.GiftZeroDBProto zero = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zero:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zero()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_zero;
        if (input->ExpectTag(26)) goto parse_zero_log;
        break;
      }

      // repeated .proto_ff.GiftZeroLogDBProto zero_log = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zero_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_zero_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zero_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiftDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GiftCondDBProto cond = 1;
  for (int i = 0; i < this->cond_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cond(i), output);
  }

  // repeated .proto_ff.GiftZeroDBProto zero = 2;
  for (int i = 0; i < this->zero_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->zero(i), output);
  }

  // repeated .proto_ff.GiftZeroLogDBProto zero_log = 3;
  for (int i = 0; i < this->zero_log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->zero_log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GiftDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GiftCondDBProto cond = 1;
  for (int i = 0; i < this->cond_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cond(i), target);
  }

  // repeated .proto_ff.GiftZeroDBProto zero = 2;
  for (int i = 0; i < this->zero_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->zero(i), target);
  }

  // repeated .proto_ff.GiftZeroLogDBProto zero_log = 3;
  for (int i = 0; i < this->zero_log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->zero_log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GiftDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GiftCondDBProto cond = 1;
  total_size += 1 * this->cond_size();
  for (int i = 0; i < this->cond_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cond(i));
  }

  // repeated .proto_ff.GiftZeroDBProto zero = 2;
  total_size += 1 * this->zero_size();
  for (int i = 0; i < this->zero_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zero(i));
  }

  // repeated .proto_ff.GiftZeroLogDBProto zero_log = 3;
  total_size += 1 * this->zero_log_size();
  for (int i = 0; i < this->zero_log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->zero_log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiftDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiftDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiftDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiftDBData::MergeFrom(const GiftDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  cond_.MergeFrom(from.cond_);
  zero_.MergeFrom(from.zero_);
  zero_log_.MergeFrom(from.zero_log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiftDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiftDBData::CopyFrom(const GiftDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiftDBData::IsInitialized() const {

  return true;
}

void GiftDBData::Swap(GiftDBData* other) {
  if (other != this) {
    cond_.Swap(&other->cond_);
    zero_.Swap(&other->zero_);
    zero_log_.Swap(&other->zero_log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiftDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiftDBData_descriptor_;
  metadata.reflection = GiftDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FestSimpleDBProto::FestSimpleDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestSimpleDBProto::InitAsDefaultInstance() {
}

FestSimpleDBProto::FestSimpleDBProto(const FestSimpleDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestSimpleDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestSimpleDBProto::~FestSimpleDBProto() {
  SharedDtor();
}

void FestSimpleDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestSimpleDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestSimpleDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestSimpleDBProto_descriptor_;
}

const FestSimpleDBProto& FestSimpleDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestSimpleDBProto* FestSimpleDBProto::default_instance_ = NULL;

FestSimpleDBProto* FestSimpleDBProto::New() const {
  return new FestSimpleDBProto;
}

void FestSimpleDBProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestSimpleDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FestSimpleDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestSimpleDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestSimpleDBProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestSimpleDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestSimpleDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestSimpleDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestSimpleDBProto::MergeFrom(const FestSimpleDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestSimpleDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestSimpleDBProto::CopyFrom(const FestSimpleDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestSimpleDBProto::IsInitialized() const {

  return true;
}

void FestSimpleDBProto::Swap(FestSimpleDBProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestSimpleDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestSimpleDBProto_descriptor_;
  metadata.reflection = FestSimpleDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestShopDBProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FestShopDBProto::FestShopDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestShopDBProto::InitAsDefaultInstance() {
}

FestShopDBProto::FestShopDBProto(const FestShopDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestShopDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestShopDBProto::~FestShopDBProto() {
  SharedDtor();
}

void FestShopDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestShopDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestShopDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestShopDBProto_descriptor_;
}

const FestShopDBProto& FestShopDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestShopDBProto* FestShopDBProto::default_instance_ = NULL;

FestShopDBProto* FestShopDBProto::New() const {
  return new FestShopDBProto;
}

void FestShopDBProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestShopDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestShopDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestShopDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestShopDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestShopDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestShopDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestShopDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestShopDBProto::MergeFrom(const FestShopDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestShopDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestShopDBProto::CopyFrom(const FestShopDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestShopDBProto::IsInitialized() const {

  return true;
}

void FestShopDBProto::Swap(FestShopDBProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestShopDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestShopDBProto_descriptor_;
  metadata.reflection = FestShopDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestSignDBProto::kIsSignFieldNumber;
#endif  // !_MSC_VER

FestSignDBProto::FestSignDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestSignDBProto::InitAsDefaultInstance() {
}

FestSignDBProto::FestSignDBProto(const FestSignDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestSignDBProto::SharedCtor() {
  _cached_size_ = 0;
  is_sign_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestSignDBProto::~FestSignDBProto() {
  SharedDtor();
}

void FestSignDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestSignDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestSignDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestSignDBProto_descriptor_;
}

const FestSignDBProto& FestSignDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestSignDBProto* FestSignDBProto::default_instance_ = NULL;

FestSignDBProto* FestSignDBProto::New() const {
  return new FestSignDBProto;
}

void FestSignDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    is_sign_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestSignDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 is_sign = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_sign_)));
          set_has_is_sign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestSignDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 is_sign = 1;
  if (has_is_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->is_sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestSignDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 is_sign = 1;
  if (has_is_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->is_sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestSignDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 is_sign = 1;
    if (has_is_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestSignDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestSignDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestSignDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestSignDBProto::MergeFrom(const FestSignDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_is_sign()) {
      set_is_sign(from.is_sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestSignDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestSignDBProto::CopyFrom(const FestSignDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestSignDBProto::IsInitialized() const {

  return true;
}

void FestSignDBProto::Swap(FestSignDBProto* other) {
  if (other != this) {
    std::swap(is_sign_, other->is_sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestSignDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestSignDBProto_descriptor_;
  metadata.reflection = FestSignDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestGoldStoreDBProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FestGoldStoreDBProto::FestGoldStoreDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestGoldStoreDBProto::InitAsDefaultInstance() {
}

FestGoldStoreDBProto::FestGoldStoreDBProto(const FestGoldStoreDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestGoldStoreDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestGoldStoreDBProto::~FestGoldStoreDBProto() {
  SharedDtor();
}

void FestGoldStoreDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestGoldStoreDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestGoldStoreDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestGoldStoreDBProto_descriptor_;
}

const FestGoldStoreDBProto& FestGoldStoreDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestGoldStoreDBProto* FestGoldStoreDBProto::default_instance_ = NULL;

FestGoldStoreDBProto* FestGoldStoreDBProto::New() const {
  return new FestGoldStoreDBProto;
}

void FestGoldStoreDBProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestGoldStoreDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestGoldStoreDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestGoldStoreDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestGoldStoreDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestGoldStoreDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestGoldStoreDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestGoldStoreDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestGoldStoreDBProto::MergeFrom(const FestGoldStoreDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestGoldStoreDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestGoldStoreDBProto::CopyFrom(const FestGoldStoreDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestGoldStoreDBProto::IsInitialized() const {

  return true;
}

void FestGoldStoreDBProto::Swap(FestGoldStoreDBProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestGoldStoreDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestGoldStoreDBProto_descriptor_;
  metadata.reflection = FestGoldStoreDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDigEggTaskDBProto::kIdFieldNumber;
const int FestDigEggTaskDBProto::kCurFieldNumber;
const int FestDigEggTaskDBProto::kFetchFieldNumber;
#endif  // !_MSC_VER

FestDigEggTaskDBProto::FestDigEggTaskDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDigEggTaskDBProto::InitAsDefaultInstance() {
}

FestDigEggTaskDBProto::FestDigEggTaskDBProto(const FestDigEggTaskDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDigEggTaskDBProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  cur_ = 0;
  fetch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDigEggTaskDBProto::~FestDigEggTaskDBProto() {
  SharedDtor();
}

void FestDigEggTaskDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDigEggTaskDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDigEggTaskDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDigEggTaskDBProto_descriptor_;
}

const FestDigEggTaskDBProto& FestDigEggTaskDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDigEggTaskDBProto* FestDigEggTaskDBProto::default_instance_ = NULL;

FestDigEggTaskDBProto* FestDigEggTaskDBProto::New() const {
  return new FestDigEggTaskDBProto;
}

void FestDigEggTaskDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    cur_ = 0;
    fetch_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDigEggTaskDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cur;
        break;
      }

      // optional int32 cur = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_)));
          set_has_cur();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetch;
        break;
      }

      // optional int32 fetch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDigEggTaskDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cur(), output);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fetch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDigEggTaskDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 cur = 2;
  if (has_cur()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cur(), target);
  }

  // optional int32 fetch = 3;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fetch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDigEggTaskDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 cur = 2;
    if (has_cur()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur());
    }

    // optional int32 fetch = 3;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDigEggTaskDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDigEggTaskDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDigEggTaskDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDigEggTaskDBProto::MergeFrom(const FestDigEggTaskDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cur()) {
      set_cur(from.cur());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDigEggTaskDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDigEggTaskDBProto::CopyFrom(const FestDigEggTaskDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDigEggTaskDBProto::IsInitialized() const {

  return true;
}

void FestDigEggTaskDBProto::Swap(FestDigEggTaskDBProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(cur_, other->cur_);
    std::swap(fetch_, other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDigEggTaskDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDigEggTaskDBProto_descriptor_;
  metadata.reflection = FestDigEggTaskDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDigEggDBProto::kIdLstFieldNumber;
const int FestDigEggDBProto::kFreeFieldNumber;
const int FestDigEggDBProto::kTimeFieldNumber;
const int FestDigEggDBProto::kAutoTimeFieldNumber;
const int FestDigEggDBProto::kTaskFieldNumber;
const int FestDigEggDBProto::kTaskTimeFieldNumber;
#endif  // !_MSC_VER

FestDigEggDBProto::FestDigEggDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDigEggDBProto::InitAsDefaultInstance() {
}

FestDigEggDBProto::FestDigEggDBProto(const FestDigEggDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDigEggDBProto::SharedCtor() {
  _cached_size_ = 0;
  free_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  auto_time_ = GOOGLE_ULONGLONG(0);
  task_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDigEggDBProto::~FestDigEggDBProto() {
  SharedDtor();
}

void FestDigEggDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDigEggDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDigEggDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDigEggDBProto_descriptor_;
}

const FestDigEggDBProto& FestDigEggDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDigEggDBProto* FestDigEggDBProto::default_instance_ = NULL;

FestDigEggDBProto* FestDigEggDBProto::New() const {
  return new FestDigEggDBProto;
}

void FestDigEggDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    free_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
    auto_time_ = GOOGLE_ULONGLONG(0);
    task_time_ = GOOGLE_ULONGLONG(0);
  }
  id_lst_.Clear();
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDigEggDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair id_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_id_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_id_lst;
        if (input->ExpectTag(16)) goto parse_free;
        break;
      }

      // optional int32 free = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_free:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &free_)));
          set_has_free();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_auto_time;
        break;
      }

      // optional uint64 auto_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_auto_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &auto_time_)));
          set_has_auto_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_task;
        break;
      }

      // repeated .proto_ff.FestDigEggTaskDBProto task = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_task;
        if (input->ExpectTag(48)) goto parse_task_time;
        break;
      }

      // optional uint64 task_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &task_time_)));
          set_has_task_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDigEggDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair id_lst = 1;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id_lst(i), output);
  }

  // optional int32 free = 2;
  if (has_free()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->free(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional uint64 auto_time = 4;
  if (has_auto_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->auto_time(), output);
  }

  // repeated .proto_ff.FestDigEggTaskDBProto task = 5;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->task(i), output);
  }

  // optional uint64 task_time = 6;
  if (has_task_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->task_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDigEggDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair id_lst = 1;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id_lst(i), target);
  }

  // optional int32 free = 2;
  if (has_free()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->free(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional uint64 auto_time = 4;
  if (has_auto_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->auto_time(), target);
  }

  // repeated .proto_ff.FestDigEggTaskDBProto task = 5;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->task(i), target);
  }

  // optional uint64 task_time = 6;
  if (has_task_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->task_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDigEggDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 free = 2;
    if (has_free()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->free());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 auto_time = 4;
    if (has_auto_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->auto_time());
    }

    // optional uint64 task_time = 6;
    if (has_task_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->task_time());
    }

  }
  // repeated .proto_ff.ComPair id_lst = 1;
  total_size += 1 * this->id_lst_size();
  for (int i = 0; i < this->id_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->id_lst(i));
  }

  // repeated .proto_ff.FestDigEggTaskDBProto task = 5;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDigEggDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDigEggDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDigEggDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDigEggDBProto::MergeFrom(const FestDigEggDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_free()) {
      set_free(from.free());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_auto_time()) {
      set_auto_time(from.auto_time());
    }
    if (from.has_task_time()) {
      set_task_time(from.task_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDigEggDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDigEggDBProto::CopyFrom(const FestDigEggDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDigEggDBProto::IsInitialized() const {

  return true;
}

void FestDigEggDBProto::Swap(FestDigEggDBProto* other) {
  if (other != this) {
    id_lst_.Swap(&other->id_lst_);
    std::swap(free_, other->free_);
    std::swap(time_, other->time_);
    std::swap(auto_time_, other->auto_time_);
    task_.Swap(&other->task_);
    std::swap(task_time_, other->task_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDigEggDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDigEggDBProto_descriptor_;
  metadata.reflection = FestDigEggDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCandleDBProto::kIdLstFieldNumber;
const int FestCandleDBProto::kTimeFieldNumber;
const int FestCandleDBProto::kHarmFieldNumber;
#endif  // !_MSC_VER

FestCandleDBProto::FestCandleDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCandleDBProto::InitAsDefaultInstance() {
}

FestCandleDBProto::FestCandleDBProto(const FestCandleDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCandleDBProto::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  harm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCandleDBProto::~FestCandleDBProto() {
  SharedDtor();
}

void FestCandleDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCandleDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCandleDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCandleDBProto_descriptor_;
}

const FestCandleDBProto& FestCandleDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestCandleDBProto* FestCandleDBProto::default_instance_ = NULL;

FestCandleDBProto* FestCandleDBProto::New() const {
  return new FestCandleDBProto;
}

void FestCandleDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    time_ = GOOGLE_ULONGLONG(0);
    harm_ = GOOGLE_LONGLONG(0);
  }
  id_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCandleDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id_lst;
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm;
        break;
      }

      // optional int64 harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCandleDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id_lst = 1;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id_lst(i), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCandleDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id_lst = 1;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id_lst(i), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCandleDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int64 harm = 3;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

  }
  // repeated int32 id_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCandleDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCandleDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCandleDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCandleDBProto::MergeFrom(const FestCandleDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCandleDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCandleDBProto::CopyFrom(const FestCandleDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCandleDBProto::IsInitialized() const {

  return true;
}

void FestCandleDBProto::Swap(FestCandleDBProto* other) {
  if (other != this) {
    id_lst_.Swap(&other->id_lst_);
    std::swap(time_, other->time_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCandleDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCandleDBProto_descriptor_;
  metadata.reflection = FestCandleDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FestBtDragonDBProto::FestBtDragonDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestBtDragonDBProto::InitAsDefaultInstance() {
}

FestBtDragonDBProto::FestBtDragonDBProto(const FestBtDragonDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestBtDragonDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestBtDragonDBProto::~FestBtDragonDBProto() {
  SharedDtor();
}

void FestBtDragonDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestBtDragonDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestBtDragonDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestBtDragonDBProto_descriptor_;
}

const FestBtDragonDBProto& FestBtDragonDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestBtDragonDBProto* FestBtDragonDBProto::default_instance_ = NULL;

FestBtDragonDBProto* FestBtDragonDBProto::New() const {
  return new FestBtDragonDBProto;
}

void FestBtDragonDBProto::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestBtDragonDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FestBtDragonDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestBtDragonDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestBtDragonDBProto::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestBtDragonDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestBtDragonDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestBtDragonDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestBtDragonDBProto::MergeFrom(const FestBtDragonDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestBtDragonDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestBtDragonDBProto::CopyFrom(const FestBtDragonDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestBtDragonDBProto::IsInitialized() const {

  return true;
}

void FestBtDragonDBProto::Swap(FestBtDragonDBProto* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestBtDragonDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestBtDragonDBProto_descriptor_;
  metadata.reflection = FestBtDragonDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestRTurnableRechargeDBProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FestRTurnableRechargeDBProto::FestRTurnableRechargeDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestRTurnableRechargeDBProto::InitAsDefaultInstance() {
}

FestRTurnableRechargeDBProto::FestRTurnableRechargeDBProto(const FestRTurnableRechargeDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestRTurnableRechargeDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestRTurnableRechargeDBProto::~FestRTurnableRechargeDBProto() {
  SharedDtor();
}

void FestRTurnableRechargeDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestRTurnableRechargeDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestRTurnableRechargeDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestRTurnableRechargeDBProto_descriptor_;
}

const FestRTurnableRechargeDBProto& FestRTurnableRechargeDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestRTurnableRechargeDBProto* FestRTurnableRechargeDBProto::default_instance_ = NULL;

FestRTurnableRechargeDBProto* FestRTurnableRechargeDBProto::New() const {
  return new FestRTurnableRechargeDBProto;
}

void FestRTurnableRechargeDBProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestRTurnableRechargeDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestRTurnableRechargeDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestRTurnableRechargeDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestRTurnableRechargeDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestRTurnableRechargeOneProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestRTurnableRechargeDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestRTurnableRechargeDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestRTurnableRechargeDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestRTurnableRechargeDBProto::MergeFrom(const FestRTurnableRechargeDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestRTurnableRechargeDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestRTurnableRechargeDBProto::CopyFrom(const FestRTurnableRechargeDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestRTurnableRechargeDBProto::IsInitialized() const {

  return true;
}

void FestRTurnableRechargeDBProto::Swap(FestRTurnableRechargeDBProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestRTurnableRechargeDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestRTurnableRechargeDBProto_descriptor_;
  metadata.reflection = FestRTurnableRechargeDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDailyTotalRechargeDBProto::kInfoFieldNumber;
const int FestDailyTotalRechargeDBProto::kTotalRechargeFieldNumber;
const int FestDailyTotalRechargeDBProto::kFlushTimeFieldNumber;
#endif  // !_MSC_VER

FestDailyTotalRechargeDBProto::FestDailyTotalRechargeDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDailyTotalRechargeDBProto::InitAsDefaultInstance() {
}

FestDailyTotalRechargeDBProto::FestDailyTotalRechargeDBProto(const FestDailyTotalRechargeDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDailyTotalRechargeDBProto::SharedCtor() {
  _cached_size_ = 0;
  total_recharge_ = 0u;
  flush_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDailyTotalRechargeDBProto::~FestDailyTotalRechargeDBProto() {
  SharedDtor();
}

void FestDailyTotalRechargeDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDailyTotalRechargeDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDailyTotalRechargeDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDailyTotalRechargeDBProto_descriptor_;
}

const FestDailyTotalRechargeDBProto& FestDailyTotalRechargeDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDailyTotalRechargeDBProto* FestDailyTotalRechargeDBProto::default_instance_ = NULL;

FestDailyTotalRechargeDBProto* FestDailyTotalRechargeDBProto::New() const {
  return new FestDailyTotalRechargeDBProto;
}

void FestDailyTotalRechargeDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    total_recharge_ = 0u;
    flush_time_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDailyTotalRechargeDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDailyTotalRechargeOneProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_total_recharge;
        break;
      }

      // optional uint32 total_recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_recharge_)));
          set_has_total_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flush_time;
        break;
      }

      // optional uint64 flush_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flush_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_time_)));
          set_has_flush_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDailyTotalRechargeDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDailyTotalRechargeOneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional uint32 total_recharge = 2;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_recharge(), output);
  }

  // optional uint64 flush_time = 3;
  if (has_flush_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->flush_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDailyTotalRechargeDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDailyTotalRechargeOneProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional uint32 total_recharge = 2;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_recharge(), target);
  }

  // optional uint64 flush_time = 3;
  if (has_flush_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->flush_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDailyTotalRechargeDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 total_recharge = 2;
    if (has_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_recharge());
    }

    // optional uint64 flush_time = 3;
    if (has_flush_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flush_time());
    }

  }
  // repeated .proto_ff.FestDailyTotalRechargeOneProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDailyTotalRechargeDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDailyTotalRechargeDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDailyTotalRechargeDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDailyTotalRechargeDBProto::MergeFrom(const FestDailyTotalRechargeDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_total_recharge()) {
      set_total_recharge(from.total_recharge());
    }
    if (from.has_flush_time()) {
      set_flush_time(from.flush_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDailyTotalRechargeDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDailyTotalRechargeDBProto::CopyFrom(const FestDailyTotalRechargeDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDailyTotalRechargeDBProto::IsInitialized() const {

  return true;
}

void FestDailyTotalRechargeDBProto::Swap(FestDailyTotalRechargeDBProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(total_recharge_, other->total_recharge_);
    std::swap(flush_time_, other->flush_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDailyTotalRechargeDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDailyTotalRechargeDBProto_descriptor_;
  metadata.reflection = FestDailyTotalRechargeDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestTurnableDBProto::kTaskFieldNumber;
const int FestTurnableDBProto::kLeftNumFieldNumber;
const int FestTurnableDBProto::kFlushTimeFieldNumber;
const int FestTurnableDBProto::kChouJiangIdsFieldNumber;
#endif  // !_MSC_VER

FestTurnableDBProto::FestTurnableDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestTurnableDBProto::InitAsDefaultInstance() {
}

FestTurnableDBProto::FestTurnableDBProto(const FestTurnableDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestTurnableDBProto::SharedCtor() {
  _cached_size_ = 0;
  left_num_ = 0u;
  flush_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestTurnableDBProto::~FestTurnableDBProto() {
  SharedDtor();
}

void FestTurnableDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestTurnableDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestTurnableDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestTurnableDBProto_descriptor_;
}

const FestTurnableDBProto& FestTurnableDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestTurnableDBProto* FestTurnableDBProto::default_instance_ = NULL;

FestTurnableDBProto* FestTurnableDBProto::New() const {
  return new FestTurnableDBProto;
}

void FestTurnableDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    left_num_ = 0u;
    flush_time_ = GOOGLE_ULONGLONG(0);
  }
  task_.Clear();
  chou_jiang_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestTurnableDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestTurnableTaskProto task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_task;
        if (input->ExpectTag(16)) goto parse_left_num;
        break;
      }

      // optional uint32 left_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &left_num_)));
          set_has_left_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flush_time;
        break;
      }

      // optional uint64 flush_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flush_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_time_)));
          set_has_flush_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chou_jiang_ids;
        break;
      }

      // repeated int32 chou_jiang_ids = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chou_jiang_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_chou_jiang_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_chou_jiang_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_chou_jiang_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestTurnableDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestTurnableTaskProto task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(i), output);
  }

  // optional uint32 left_num = 2;
  if (has_left_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->left_num(), output);
  }

  // optional uint64 flush_time = 3;
  if (has_flush_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->flush_time(), output);
  }

  // repeated int32 chou_jiang_ids = 5;
  for (int i = 0; i < this->chou_jiang_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->chou_jiang_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestTurnableDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestTurnableTaskProto task = 1;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(i), target);
  }

  // optional uint32 left_num = 2;
  if (has_left_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->left_num(), target);
  }

  // optional uint64 flush_time = 3;
  if (has_flush_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->flush_time(), target);
  }

  // repeated int32 chou_jiang_ids = 5;
  for (int i = 0; i < this->chou_jiang_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->chou_jiang_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestTurnableDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 left_num = 2;
    if (has_left_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->left_num());
    }

    // optional uint64 flush_time = 3;
    if (has_flush_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flush_time());
    }

  }
  // repeated .proto_ff.FestTurnableTaskProto task = 1;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  // repeated int32 chou_jiang_ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->chou_jiang_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->chou_jiang_ids(i));
    }
    total_size += 1 * this->chou_jiang_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestTurnableDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestTurnableDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestTurnableDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestTurnableDBProto::MergeFrom(const FestTurnableDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  task_.MergeFrom(from.task_);
  chou_jiang_ids_.MergeFrom(from.chou_jiang_ids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_left_num()) {
      set_left_num(from.left_num());
    }
    if (from.has_flush_time()) {
      set_flush_time(from.flush_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestTurnableDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestTurnableDBProto::CopyFrom(const FestTurnableDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestTurnableDBProto::IsInitialized() const {

  return true;
}

void FestTurnableDBProto::Swap(FestTurnableDBProto* other) {
  if (other != this) {
    task_.Swap(&other->task_);
    std::swap(left_num_, other->left_num_);
    std::swap(flush_time_, other->flush_time_);
    chou_jiang_ids_.Swap(&other->chou_jiang_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestTurnableDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestTurnableDBProto_descriptor_;
  metadata.reflection = FestTurnableDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateDBProto::kSingleFieldNumber;
const int FestDonateDBProto::kServerFieldNumber;
const int FestDonateDBProto::kSingleNumFieldNumber;
const int FestDonateDBProto::kTaskFieldNumber;
const int FestDonateDBProto::kFlushTimeFieldNumber;
#endif  // !_MSC_VER

FestDonateDBProto::FestDonateDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateDBProto::InitAsDefaultInstance() {
}

FestDonateDBProto::FestDonateDBProto(const FestDonateDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateDBProto::SharedCtor() {
  _cached_size_ = 0;
  single_num_ = 0u;
  flush_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateDBProto::~FestDonateDBProto() {
  SharedDtor();
}

void FestDonateDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateDBProto_descriptor_;
}

const FestDonateDBProto& FestDonateDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDonateDBProto* FestDonateDBProto::default_instance_ = NULL;

FestDonateDBProto* FestDonateDBProto::New() const {
  return new FestDonateDBProto;
}

void FestDonateDBProto::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    single_num_ = 0u;
    flush_time_ = GOOGLE_ULONGLONG(0);
  }
  single_.Clear();
  server_.Clear();
  task_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDonateSingleProto single = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_single:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_single()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_single;
        if (input->ExpectTag(18)) goto parse_server;
        break;
      }

      // repeated .proto_ff.FestDonateServerProto server = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_server()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_server;
        if (input->ExpectTag(24)) goto parse_single_num;
        break;
      }

      // optional uint32 single_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &single_num_)));
          set_has_single_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task;
        break;
      }

      // repeated .proto_ff.FestDonateTaskProto task = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_task;
        if (input->ExpectTag(40)) goto parse_flush_time;
        break;
      }

      // optional uint64 flush_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flush_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_time_)));
          set_has_flush_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDonateSingleProto single = 1;
  for (int i = 0; i < this->single_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->single(i), output);
  }

  // repeated .proto_ff.FestDonateServerProto server = 2;
  for (int i = 0; i < this->server_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->server(i), output);
  }

  // optional uint32 single_num = 3;
  if (has_single_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->single_num(), output);
  }

  // repeated .proto_ff.FestDonateTaskProto task = 4;
  for (int i = 0; i < this->task_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->task(i), output);
  }

  // optional uint64 flush_time = 5;
  if (has_flush_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->flush_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDonateSingleProto single = 1;
  for (int i = 0; i < this->single_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->single(i), target);
  }

  // repeated .proto_ff.FestDonateServerProto server = 2;
  for (int i = 0; i < this->server_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->server(i), target);
  }

  // optional uint32 single_num = 3;
  if (has_single_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->single_num(), target);
  }

  // repeated .proto_ff.FestDonateTaskProto task = 4;
  for (int i = 0; i < this->task_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->task(i), target);
  }

  // optional uint64 flush_time = 5;
  if (has_flush_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->flush_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 single_num = 3;
    if (has_single_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->single_num());
    }

    // optional uint64 flush_time = 5;
    if (has_flush_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flush_time());
    }

  }
  // repeated .proto_ff.FestDonateSingleProto single = 1;
  total_size += 1 * this->single_size();
  for (int i = 0; i < this->single_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->single(i));
  }

  // repeated .proto_ff.FestDonateServerProto server = 2;
  total_size += 1 * this->server_size();
  for (int i = 0; i < this->server_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->server(i));
  }

  // repeated .proto_ff.FestDonateTaskProto task = 4;
  total_size += 1 * this->task_size();
  for (int i = 0; i < this->task_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->task(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateDBProto::MergeFrom(const FestDonateDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  single_.MergeFrom(from.single_);
  server_.MergeFrom(from.server_);
  task_.MergeFrom(from.task_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_single_num()) {
      set_single_num(from.single_num());
    }
    if (from.has_flush_time()) {
      set_flush_time(from.flush_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateDBProto::CopyFrom(const FestDonateDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateDBProto::IsInitialized() const {

  return true;
}

void FestDonateDBProto::Swap(FestDonateDBProto* other) {
  if (other != this) {
    single_.Swap(&other->single_);
    server_.Swap(&other->server_);
    std::swap(single_num_, other->single_num_);
    task_.Swap(&other->task_);
    std::swap(flush_time_, other->flush_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateDBProto_descriptor_;
  metadata.reflection = FestDonateDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestOnlineDBProto::kDataFieldNumber;
const int FestOnlineDBProto::kFlushTimeFieldNumber;
#endif  // !_MSC_VER

FestOnlineDBProto::FestOnlineDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestOnlineDBProto::InitAsDefaultInstance() {
}

FestOnlineDBProto::FestOnlineDBProto(const FestOnlineDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestOnlineDBProto::SharedCtor() {
  _cached_size_ = 0;
  flush_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestOnlineDBProto::~FestOnlineDBProto() {
  SharedDtor();
}

void FestOnlineDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestOnlineDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestOnlineDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestOnlineDBProto_descriptor_;
}

const FestOnlineDBProto& FestOnlineDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestOnlineDBProto* FestOnlineDBProto::default_instance_ = NULL;

FestOnlineDBProto* FestOnlineDBProto::New() const {
  return new FestOnlineDBProto;
}

void FestOnlineDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    flush_time_ = GOOGLE_ULONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestOnlineDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestOnlineOneProto data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_flush_time;
        break;
      }

      // optional uint64 flush_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flush_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_time_)));
          set_has_flush_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestOnlineDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestOnlineOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint64 flush_time = 2;
  if (has_flush_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->flush_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestOnlineDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestOnlineOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint64 flush_time = 2;
  if (has_flush_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->flush_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestOnlineDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 flush_time = 2;
    if (has_flush_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flush_time());
    }

  }
  // repeated .proto_ff.FestOnlineOneProto data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestOnlineDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestOnlineDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestOnlineDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestOnlineDBProto::MergeFrom(const FestOnlineDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flush_time()) {
      set_flush_time(from.flush_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestOnlineDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestOnlineDBProto::CopyFrom(const FestOnlineDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestOnlineDBProto::IsInitialized() const {

  return true;
}

void FestOnlineDBProto::Swap(FestOnlineDBProto* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(flush_time_, other->flush_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestOnlineDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestOnlineDBProto_descriptor_;
  metadata.reflection = FestOnlineDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestCollectWordDBProto::kDataFieldNumber;
const int FestCollectWordDBProto::kFlushTimeFieldNumber;
#endif  // !_MSC_VER

FestCollectWordDBProto::FestCollectWordDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestCollectWordDBProto::InitAsDefaultInstance() {
}

FestCollectWordDBProto::FestCollectWordDBProto(const FestCollectWordDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestCollectWordDBProto::SharedCtor() {
  _cached_size_ = 0;
  flush_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestCollectWordDBProto::~FestCollectWordDBProto() {
  SharedDtor();
}

void FestCollectWordDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestCollectWordDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestCollectWordDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestCollectWordDBProto_descriptor_;
}

const FestCollectWordDBProto& FestCollectWordDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestCollectWordDBProto* FestCollectWordDBProto::default_instance_ = NULL;

FestCollectWordDBProto* FestCollectWordDBProto::New() const {
  return new FestCollectWordDBProto;
}

void FestCollectWordDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    flush_time_ = GOOGLE_ULONGLONG(0);
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestCollectWordDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestCollectWordOneProto data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_flush_time;
        break;
      }

      // optional uint64 flush_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flush_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &flush_time_)));
          set_has_flush_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestCollectWordDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestCollectWordOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional uint64 flush_time = 2;
  if (has_flush_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->flush_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestCollectWordDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestCollectWordOneProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional uint64 flush_time = 2;
  if (has_flush_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->flush_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestCollectWordDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 flush_time = 2;
    if (has_flush_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->flush_time());
    }

  }
  // repeated .proto_ff.FestCollectWordOneProto data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestCollectWordDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestCollectWordDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestCollectWordDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestCollectWordDBProto::MergeFrom(const FestCollectWordDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_flush_time()) {
      set_flush_time(from.flush_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestCollectWordDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestCollectWordDBProto::CopyFrom(const FestCollectWordDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestCollectWordDBProto::IsInitialized() const {

  return true;
}

void FestCollectWordDBProto::Swap(FestCollectWordDBProto* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(flush_time_, other->flush_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestCollectWordDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestCollectWordDBProto_descriptor_;
  metadata.reflection = FestCollectWordDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestBossFirstDB::kRecvKillIdsFieldNumber;
const int FestBossFirstDB::kRecvRedIdsFieldNumber;
const int FestBossFirstDB::kMKillsIdsFieldNumber;
#endif  // !_MSC_VER

FestBossFirstDB::FestBossFirstDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestBossFirstDB::InitAsDefaultInstance() {
}

FestBossFirstDB::FestBossFirstDB(const FestBossFirstDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestBossFirstDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestBossFirstDB::~FestBossFirstDB() {
  SharedDtor();
}

void FestBossFirstDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestBossFirstDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestBossFirstDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestBossFirstDB_descriptor_;
}

const FestBossFirstDB& FestBossFirstDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestBossFirstDB* FestBossFirstDB::default_instance_ = NULL;

FestBossFirstDB* FestBossFirstDB::New() const {
  return new FestBossFirstDB;
}

void FestBossFirstDB::Clear() {
  recv_kill_ids_.Clear();
  recv_red_ids_.Clear();
  m_kills_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestBossFirstDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 recv_kill_ids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_kill_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_recv_kill_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_kill_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_recv_kill_ids;
        if (input->ExpectTag(16)) goto parse_recv_red_ids;
        break;
      }

      // repeated int32 recv_red_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_red_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_recv_red_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_recv_red_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recv_red_ids;
        if (input->ExpectTag(24)) goto parse_m_kills_ids;
        break;
      }

      // repeated int32 m_kills_ids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_kills_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_m_kills_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_kills_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_kills_ids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestBossFirstDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 recv_kill_ids = 1;
  for (int i = 0; i < this->recv_kill_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->recv_kill_ids(i), output);
  }

  // repeated int32 recv_red_ids = 2;
  for (int i = 0; i < this->recv_red_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->recv_red_ids(i), output);
  }

  // repeated int32 m_kills_ids = 3;
  for (int i = 0; i < this->m_kills_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->m_kills_ids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestBossFirstDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 recv_kill_ids = 1;
  for (int i = 0; i < this->recv_kill_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->recv_kill_ids(i), target);
  }

  // repeated int32 recv_red_ids = 2;
  for (int i = 0; i < this->recv_red_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->recv_red_ids(i), target);
  }

  // repeated int32 m_kills_ids = 3;
  for (int i = 0; i < this->m_kills_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->m_kills_ids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestBossFirstDB::ByteSize() const {
  int total_size = 0;

  // repeated int32 recv_kill_ids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_kill_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_kill_ids(i));
    }
    total_size += 1 * this->recv_kill_ids_size() + data_size;
  }

  // repeated int32 recv_red_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->recv_red_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->recv_red_ids(i));
    }
    total_size += 1 * this->recv_red_ids_size() + data_size;
  }

  // repeated int32 m_kills_ids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_kills_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_kills_ids(i));
    }
    total_size += 1 * this->m_kills_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestBossFirstDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestBossFirstDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestBossFirstDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestBossFirstDB::MergeFrom(const FestBossFirstDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  recv_kill_ids_.MergeFrom(from.recv_kill_ids_);
  recv_red_ids_.MergeFrom(from.recv_red_ids_);
  m_kills_ids_.MergeFrom(from.m_kills_ids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestBossFirstDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestBossFirstDB::CopyFrom(const FestBossFirstDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestBossFirstDB::IsInitialized() const {

  return true;
}

void FestBossFirstDB::Swap(FestBossFirstDB* other) {
  if (other != this) {
    recv_kill_ids_.Swap(&other->recv_kill_ids_);
    recv_red_ids_.Swap(&other->recv_red_ids_);
    m_kills_ids_.Swap(&other->m_kills_ids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestBossFirstDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestBossFirstDB_descriptor_;
  metadata.reflection = FestBossFirstDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FMarryRoleDB::kTasksFieldNumber;
const int FMarryRoleDB::kProcessIdsFieldNumber;
const int FMarryRoleDB::kScoreFieldNumber;
#endif  // !_MSC_VER

FMarryRoleDB::FMarryRoleDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FMarryRoleDB::InitAsDefaultInstance() {
}

FMarryRoleDB::FMarryRoleDB(const FMarryRoleDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FMarryRoleDB::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FMarryRoleDB::~FMarryRoleDB() {
  SharedDtor();
}

void FMarryRoleDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FMarryRoleDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FMarryRoleDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FMarryRoleDB_descriptor_;
}

const FMarryRoleDB& FMarryRoleDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FMarryRoleDB* FMarryRoleDB::default_instance_ = NULL;

FMarryRoleDB* FMarryRoleDB::New() const {
  return new FMarryRoleDB;
}

void FMarryRoleDB::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    score_ = 0;
  }
  tasks_.Clear();
  process_ids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FMarryRoleDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FMarryTask tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectTag(16)) goto parse_process_ids;
        break;
      }

      // repeated int32 process_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_process_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_process_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_process_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_process_ids;
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional int32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FMarryRoleDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FMarryTask tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  // repeated int32 process_ids = 2;
  for (int i = 0; i < this->process_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->process_ids(i), output);
  }

  // optional int32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FMarryRoleDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FMarryTask tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  // repeated int32 process_ids = 2;
  for (int i = 0; i < this->process_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->process_ids(i), target);
  }

  // optional int32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FMarryRoleDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  // repeated .proto_ff.FMarryTask tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  // repeated int32 process_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->process_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->process_ids(i));
    }
    total_size += 1 * this->process_ids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FMarryRoleDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FMarryRoleDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FMarryRoleDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FMarryRoleDB::MergeFrom(const FMarryRoleDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  process_ids_.MergeFrom(from.process_ids_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FMarryRoleDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FMarryRoleDB::CopyFrom(const FMarryRoleDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FMarryRoleDB::IsInitialized() const {

  return true;
}

void FMarryRoleDB::Swap(FMarryRoleDB* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    process_ids_.Swap(&other->process_ids_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FMarryRoleDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FMarryRoleDB_descriptor_;
  metadata.reflection = FMarryRoleDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DayTotalRechargeDBProto::kFetchLstFieldNumber;
const int DayTotalRechargeDBProto::kRechargeFieldNumber;
const int DayTotalRechargeDBProto::kTimeFieldNumber;
const int DayTotalRechargeDBProto::kResetTimeFieldNumber;
#endif  // !_MSC_VER

DayTotalRechargeDBProto::DayTotalRechargeDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DayTotalRechargeDBProto::InitAsDefaultInstance() {
}

DayTotalRechargeDBProto::DayTotalRechargeDBProto(const DayTotalRechargeDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DayTotalRechargeDBProto::SharedCtor() {
  _cached_size_ = 0;
  recharge_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  reset_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DayTotalRechargeDBProto::~DayTotalRechargeDBProto() {
  SharedDtor();
}

void DayTotalRechargeDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DayTotalRechargeDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DayTotalRechargeDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DayTotalRechargeDBProto_descriptor_;
}

const DayTotalRechargeDBProto& DayTotalRechargeDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DayTotalRechargeDBProto* DayTotalRechargeDBProto::default_instance_ = NULL;

DayTotalRechargeDBProto* DayTotalRechargeDBProto::New() const {
  return new DayTotalRechargeDBProto;
}

void DayTotalRechargeDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    recharge_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    reset_time_ = GOOGLE_ULONGLONG(0);
  }
  fetch_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DayTotalRechargeDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fetch_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fetch_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetch_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fetch_lst;
        if (input->ExpectTag(16)) goto parse_recharge;
        break;
      }

      // optional uint32 recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reset_time;
        break;
      }

      // optional uint64 reset_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reset_time_)));
          set_has_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DayTotalRechargeDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fetch_lst = 1;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fetch_lst(i), output);
  }

  // optional uint32 recharge = 2;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recharge(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  // optional uint64 reset_time = 4;
  if (has_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->reset_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DayTotalRechargeDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 fetch_lst = 1;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fetch_lst(i), target);
  }

  // optional uint32 recharge = 2;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recharge(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  // optional uint64 reset_time = 4;
  if (has_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->reset_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DayTotalRechargeDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 recharge = 2;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint64 reset_time = 4;
    if (has_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reset_time());
    }

  }
  // repeated int32 fetch_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetch_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetch_lst(i));
    }
    total_size += 1 * this->fetch_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DayTotalRechargeDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DayTotalRechargeDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DayTotalRechargeDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DayTotalRechargeDBProto::MergeFrom(const DayTotalRechargeDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_lst_.MergeFrom(from.fetch_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reset_time()) {
      set_reset_time(from.reset_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DayTotalRechargeDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayTotalRechargeDBProto::CopyFrom(const DayTotalRechargeDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayTotalRechargeDBProto::IsInitialized() const {

  return true;
}

void DayTotalRechargeDBProto::Swap(DayTotalRechargeDBProto* other) {
  if (other != this) {
    fetch_lst_.Swap(&other->fetch_lst_);
    std::swap(recharge_, other->recharge_);
    std::swap(time_, other->time_);
    std::swap(reset_time_, other->reset_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DayTotalRechargeDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DayTotalRechargeDBProto_descriptor_;
  metadata.reflection = DayTotalRechargeDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TotalRechargeDBProto::kFetchLstFieldNumber;
const int TotalRechargeDBProto::kRechargeFieldNumber;
#endif  // !_MSC_VER

TotalRechargeDBProto::TotalRechargeDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TotalRechargeDBProto::InitAsDefaultInstance() {
}

TotalRechargeDBProto::TotalRechargeDBProto(const TotalRechargeDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TotalRechargeDBProto::SharedCtor() {
  _cached_size_ = 0;
  recharge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TotalRechargeDBProto::~TotalRechargeDBProto() {
  SharedDtor();
}

void TotalRechargeDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TotalRechargeDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TotalRechargeDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotalRechargeDBProto_descriptor_;
}

const TotalRechargeDBProto& TotalRechargeDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

TotalRechargeDBProto* TotalRechargeDBProto::default_instance_ = NULL;

TotalRechargeDBProto* TotalRechargeDBProto::New() const {
  return new TotalRechargeDBProto;
}

void TotalRechargeDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    recharge_ = 0u;
  }
  fetch_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TotalRechargeDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 fetch_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_fetch_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetch_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_fetch_lst;
        if (input->ExpectTag(16)) goto parse_recharge;
        break;
      }

      // optional uint32 recharge = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recharge_)));
          set_has_recharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TotalRechargeDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 fetch_lst = 1;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->fetch_lst(i), output);
  }

  // optional uint32 recharge = 2;
  if (has_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->recharge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TotalRechargeDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 fetch_lst = 1;
  for (int i = 0; i < this->fetch_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->fetch_lst(i), target);
  }

  // optional uint32 recharge = 2;
  if (has_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->recharge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TotalRechargeDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 recharge = 2;
    if (has_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->recharge());
    }

  }
  // repeated int32 fetch_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetch_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetch_lst(i));
    }
    total_size += 1 * this->fetch_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TotalRechargeDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TotalRechargeDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TotalRechargeDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TotalRechargeDBProto::MergeFrom(const TotalRechargeDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_lst_.MergeFrom(from.fetch_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_recharge()) {
      set_recharge(from.recharge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TotalRechargeDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotalRechargeDBProto::CopyFrom(const TotalRechargeDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalRechargeDBProto::IsInitialized() const {

  return true;
}

void TotalRechargeDBProto::Swap(TotalRechargeDBProto* other) {
  if (other != this) {
    fetch_lst_.Swap(&other->fetch_lst_);
    std::swap(recharge_, other->recharge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TotalRechargeDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TotalRechargeDBProto_descriptor_;
  metadata.reflection = TotalRechargeDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRewardDBProto::kFetchFieldNumber;
#endif  // !_MSC_VER

LoginRewardDBProto::LoginRewardDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRewardDBProto::InitAsDefaultInstance() {
}

LoginRewardDBProto::LoginRewardDBProto(const LoginRewardDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRewardDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRewardDBProto::~LoginRewardDBProto() {
  SharedDtor();
}

void LoginRewardDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRewardDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRewardDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRewardDBProto_descriptor_;
}

const LoginRewardDBProto& LoginRewardDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

LoginRewardDBProto* LoginRewardDBProto::default_instance_ = NULL;

LoginRewardDBProto* LoginRewardDBProto::New() const {
  return new LoginRewardDBProto;
}

void LoginRewardDBProto::Clear() {
  fetch_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRewardDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair fetch = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_fetch;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRewardDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair fetch = 1;
  for (int i = 0; i < this->fetch_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fetch(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRewardDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair fetch = 1;
  for (int i = 0; i < this->fetch_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fetch(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRewardDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ComPair fetch = 1;
  total_size += 1 * this->fetch_size();
  for (int i = 0; i < this->fetch_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fetch(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRewardDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRewardDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRewardDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRewardDBProto::MergeFrom(const LoginRewardDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetch_.MergeFrom(from.fetch_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRewardDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRewardDBProto::CopyFrom(const LoginRewardDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRewardDBProto::IsInitialized() const {

  return true;
}

void LoginRewardDBProto::Swap(LoginRewardDBProto* other) {
  if (other != this) {
    fetch_.Swap(&other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRewardDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRewardDBProto_descriptor_;
  metadata.reflection = LoginRewardDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDetailDBProto::kTemplateIdFieldNumber;
const int FestDetailDBProto::kPeriodFieldNumber;
const int FestDetailDBProto::kBegintimeFieldNumber;
const int FestDetailDBProto::kShopFieldNumber;
const int FestDetailDBProto::kDailyTotalRechargeFieldNumber;
const int FestDetailDBProto::kSignFieldNumber;
const int FestDetailDBProto::kGoldStoreFieldNumber;
const int FestDetailDBProto::kDigEggFieldNumber;
const int FestDetailDBProto::kRturnableRechargeFieldNumber;
const int FestDetailDBProto::kTurntableFieldNumber;
const int FestDetailDBProto::kDonateFieldNumber;
const int FestDetailDBProto::kOnlineFieldNumber;
const int FestDetailDBProto::kCollectWordFieldNumber;
const int FestDetailDBProto::kDrawPizeFieldNumber;
const int FestDetailDBProto::kServerRankFieldNumber;
const int FestDetailDBProto::kBossFieldNumber;
const int FestDetailDBProto::kHuiMengXiYouFieldNumber;
const int FestDetailDBProto::kBtDragonFieldNumber;
const int FestDetailDBProto::kCandleFieldNumber;
const int FestDetailDBProto::kMarryFieldNumber;
const int FestDetailDBProto::kDayTotalRechargeFieldNumber;
const int FestDetailDBProto::kTotalRechargeFieldNumber;
const int FestDetailDBProto::kLoginFieldNumber;
#endif  // !_MSC_VER

FestDetailDBProto::FestDetailDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDetailDBProto::InitAsDefaultInstance() {
  shop_ = const_cast< ::proto_ff::FestShopDBProto*>(&::proto_ff::FestShopDBProto::default_instance());
  daily_total_recharge_ = const_cast< ::proto_ff::FestDailyTotalRechargeDBProto*>(&::proto_ff::FestDailyTotalRechargeDBProto::default_instance());
  sign_ = const_cast< ::proto_ff::FestSignDBProto*>(&::proto_ff::FestSignDBProto::default_instance());
  gold_store_ = const_cast< ::proto_ff::FestGoldStoreDBProto*>(&::proto_ff::FestGoldStoreDBProto::default_instance());
  dig_egg_ = const_cast< ::proto_ff::FestDigEggDBProto*>(&::proto_ff::FestDigEggDBProto::default_instance());
  rturnable_recharge_ = const_cast< ::proto_ff::FestRTurnableRechargeDBProto*>(&::proto_ff::FestRTurnableRechargeDBProto::default_instance());
  turntable_ = const_cast< ::proto_ff::FestTurnableDBProto*>(&::proto_ff::FestTurnableDBProto::default_instance());
  donate_ = const_cast< ::proto_ff::FestDonateDBProto*>(&::proto_ff::FestDonateDBProto::default_instance());
  online_ = const_cast< ::proto_ff::FestOnlineDBProto*>(&::proto_ff::FestOnlineDBProto::default_instance());
  collect_word_ = const_cast< ::proto_ff::FestCollectWordDBProto*>(&::proto_ff::FestCollectWordDBProto::default_instance());
  draw_pize_ = const_cast< ::proto_ff::DrawPizeProto*>(&::proto_ff::DrawPizeProto::default_instance());
  server_rank_ = const_cast< ::proto_ff::FestRankDBData*>(&::proto_ff::FestRankDBData::default_instance());
  boss_ = const_cast< ::proto_ff::FestBossFirstDB*>(&::proto_ff::FestBossFirstDB::default_instance());
  hui_meng_xi_you_ = const_cast< ::proto_ff::FestHuiMengXiYouData*>(&::proto_ff::FestHuiMengXiYouData::default_instance());
  bt_dragon_ = const_cast< ::proto_ff::FestBtDragonDBProto*>(&::proto_ff::FestBtDragonDBProto::default_instance());
  candle_ = const_cast< ::proto_ff::FestCandleDBProto*>(&::proto_ff::FestCandleDBProto::default_instance());
  marry_ = const_cast< ::proto_ff::FMarryRoleDB*>(&::proto_ff::FMarryRoleDB::default_instance());
  day_total_recharge_ = const_cast< ::proto_ff::DayTotalRechargeDBProto*>(&::proto_ff::DayTotalRechargeDBProto::default_instance());
  total_recharge_ = const_cast< ::proto_ff::TotalRechargeDBProto*>(&::proto_ff::TotalRechargeDBProto::default_instance());
  login_ = const_cast< ::proto_ff::LoginRewardDBProto*>(&::proto_ff::LoginRewardDBProto::default_instance());
}

FestDetailDBProto::FestDetailDBProto(const FestDetailDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDetailDBProto::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  period_ = 0;
  begintime_ = GOOGLE_ULONGLONG(0);
  shop_ = NULL;
  daily_total_recharge_ = NULL;
  sign_ = NULL;
  gold_store_ = NULL;
  dig_egg_ = NULL;
  rturnable_recharge_ = NULL;
  turntable_ = NULL;
  donate_ = NULL;
  online_ = NULL;
  collect_word_ = NULL;
  draw_pize_ = NULL;
  server_rank_ = NULL;
  boss_ = NULL;
  hui_meng_xi_you_ = NULL;
  bt_dragon_ = NULL;
  candle_ = NULL;
  marry_ = NULL;
  day_total_recharge_ = NULL;
  total_recharge_ = NULL;
  login_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDetailDBProto::~FestDetailDBProto() {
  SharedDtor();
}

void FestDetailDBProto::SharedDtor() {
  if (this != default_instance_) {
    delete shop_;
    delete daily_total_recharge_;
    delete sign_;
    delete gold_store_;
    delete dig_egg_;
    delete rturnable_recharge_;
    delete turntable_;
    delete donate_;
    delete online_;
    delete collect_word_;
    delete draw_pize_;
    delete server_rank_;
    delete boss_;
    delete hui_meng_xi_you_;
    delete bt_dragon_;
    delete candle_;
    delete marry_;
    delete day_total_recharge_;
    delete total_recharge_;
    delete login_;
  }
}

void FestDetailDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDetailDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDetailDBProto_descriptor_;
}

const FestDetailDBProto& FestDetailDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDetailDBProto* FestDetailDBProto::default_instance_ = NULL;

FestDetailDBProto* FestDetailDBProto::New() const {
  return new FestDetailDBProto;
}

void FestDetailDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
    period_ = 0;
    begintime_ = GOOGLE_ULONGLONG(0);
    if (has_shop()) {
      if (shop_ != NULL) shop_->::proto_ff::FestShopDBProto::Clear();
    }
    if (has_daily_total_recharge()) {
      if (daily_total_recharge_ != NULL) daily_total_recharge_->::proto_ff::FestDailyTotalRechargeDBProto::Clear();
    }
    if (has_sign()) {
      if (sign_ != NULL) sign_->::proto_ff::FestSignDBProto::Clear();
    }
    if (has_gold_store()) {
      if (gold_store_ != NULL) gold_store_->::proto_ff::FestGoldStoreDBProto::Clear();
    }
    if (has_dig_egg()) {
      if (dig_egg_ != NULL) dig_egg_->::proto_ff::FestDigEggDBProto::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_rturnable_recharge()) {
      if (rturnable_recharge_ != NULL) rturnable_recharge_->::proto_ff::FestRTurnableRechargeDBProto::Clear();
    }
    if (has_turntable()) {
      if (turntable_ != NULL) turntable_->::proto_ff::FestTurnableDBProto::Clear();
    }
    if (has_donate()) {
      if (donate_ != NULL) donate_->::proto_ff::FestDonateDBProto::Clear();
    }
    if (has_online()) {
      if (online_ != NULL) online_->::proto_ff::FestOnlineDBProto::Clear();
    }
    if (has_collect_word()) {
      if (collect_word_ != NULL) collect_word_->::proto_ff::FestCollectWordDBProto::Clear();
    }
    if (has_draw_pize()) {
      if (draw_pize_ != NULL) draw_pize_->::proto_ff::DrawPizeProto::Clear();
    }
    if (has_server_rank()) {
      if (server_rank_ != NULL) server_rank_->::proto_ff::FestRankDBData::Clear();
    }
    if (has_boss()) {
      if (boss_ != NULL) boss_->::proto_ff::FestBossFirstDB::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_hui_meng_xi_you()) {
      if (hui_meng_xi_you_ != NULL) hui_meng_xi_you_->::proto_ff::FestHuiMengXiYouData::Clear();
    }
    if (has_bt_dragon()) {
      if (bt_dragon_ != NULL) bt_dragon_->::proto_ff::FestBtDragonDBProto::Clear();
    }
    if (has_candle()) {
      if (candle_ != NULL) candle_->::proto_ff::FestCandleDBProto::Clear();
    }
    if (has_marry()) {
      if (marry_ != NULL) marry_->::proto_ff::FMarryRoleDB::Clear();
    }
    if (has_day_total_recharge()) {
      if (day_total_recharge_ != NULL) day_total_recharge_->::proto_ff::DayTotalRechargeDBProto::Clear();
    }
    if (has_total_recharge()) {
      if (total_recharge_ != NULL) total_recharge_->::proto_ff::TotalRechargeDBProto::Clear();
    }
    if (has_login()) {
      if (login_ != NULL) login_->::proto_ff::LoginRewardDBProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDetailDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_period;
        break;
      }

      // required int32 period = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_period:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &period_)));
          set_has_period();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_begintime;
        break;
      }

      // required uint64 begintime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_shop;
        break;
      }

      // optional .proto_ff.FestShopDBProto shop = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_daily_total_recharge;
        break;
      }

      // optional .proto_ff.FestDailyTotalRechargeDBProto daily_total_recharge = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_total_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_total_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sign;
        break;
      }

      // optional .proto_ff.FestSignDBProto sign = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sign()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_gold_store;
        break;
      }

      // optional .proto_ff.FestGoldStoreDBProto gold_store = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gold_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gold_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dig_egg;
        break;
      }

      // optional .proto_ff.FestDigEggDBProto dig_egg = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dig_egg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dig_egg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rturnable_recharge;
        break;
      }

      // optional .proto_ff.FestRTurnableRechargeDBProto rturnable_recharge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rturnable_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rturnable_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_turntable;
        break;
      }

      // optional .proto_ff.FestTurnableDBProto turntable = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_turntable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turntable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_donate;
        break;
      }

      // optional .proto_ff.FestDonateDBProto donate = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_donate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_donate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_online;
        break;
      }

      // optional .proto_ff.FestOnlineDBProto online = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_online:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_online()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_collect_word;
        break;
      }

      // optional .proto_ff.FestCollectWordDBProto collect_word = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collect_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collect_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_draw_pize;
        break;
      }

      // optional .proto_ff.DrawPizeProto draw_pize = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_draw_pize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_draw_pize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_server_rank;
        break;
      }

      // optional .proto_ff.FestRankDBData server_rank = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_boss;
        break;
      }

      // optional .proto_ff.FestBossFirstDB boss = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_hui_meng_xi_you;
        break;
      }

      // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hui_meng_xi_you:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_hui_meng_xi_you()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_bt_dragon;
        break;
      }

      // optional .proto_ff.FestBtDragonDBProto bt_dragon = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bt_dragon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bt_dragon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_candle;
        break;
      }

      // optional .proto_ff.FestCandleDBProto candle = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_candle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_candle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_marry;
        break;
      }

      // optional .proto_ff.FMarryRoleDB marry = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_day_total_recharge;
        break;
      }

      // optional .proto_ff.DayTotalRechargeDBProto day_total_recharge = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_day_total_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_day_total_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_total_recharge;
        break;
      }

      // optional .proto_ff.TotalRechargeDBProto total_recharge = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_total_recharge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_total_recharge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_login;
        break;
      }

      // optional .proto_ff.LoginRewardDBProto login = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_login:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_login()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDetailDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // required int32 period = 2;
  if (has_period()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->period(), output);
  }

  // required uint64 begintime = 3;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->begintime(), output);
  }

  // optional .proto_ff.FestShopDBProto shop = 4;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->shop(), output);
  }

  // optional .proto_ff.FestDailyTotalRechargeDBProto daily_total_recharge = 5;
  if (has_daily_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->daily_total_recharge(), output);
  }

  // optional .proto_ff.FestSignDBProto sign = 6;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->sign(), output);
  }

  // optional .proto_ff.FestGoldStoreDBProto gold_store = 7;
  if (has_gold_store()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->gold_store(), output);
  }

  // optional .proto_ff.FestDigEggDBProto dig_egg = 8;
  if (has_dig_egg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->dig_egg(), output);
  }

  // optional .proto_ff.FestRTurnableRechargeDBProto rturnable_recharge = 9;
  if (has_rturnable_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rturnable_recharge(), output);
  }

  // optional .proto_ff.FestTurnableDBProto turntable = 10;
  if (has_turntable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->turntable(), output);
  }

  // optional .proto_ff.FestDonateDBProto donate = 11;
  if (has_donate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->donate(), output);
  }

  // optional .proto_ff.FestOnlineDBProto online = 12;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->online(), output);
  }

  // optional .proto_ff.FestCollectWordDBProto collect_word = 13;
  if (has_collect_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->collect_word(), output);
  }

  // optional .proto_ff.DrawPizeProto draw_pize = 14;
  if (has_draw_pize()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->draw_pize(), output);
  }

  // optional .proto_ff.FestRankDBData server_rank = 15;
  if (has_server_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->server_rank(), output);
  }

  // optional .proto_ff.FestBossFirstDB boss = 16;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->boss(), output);
  }

  // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 17;
  if (has_hui_meng_xi_you()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->hui_meng_xi_you(), output);
  }

  // optional .proto_ff.FestBtDragonDBProto bt_dragon = 18;
  if (has_bt_dragon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->bt_dragon(), output);
  }

  // optional .proto_ff.FestCandleDBProto candle = 19;
  if (has_candle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->candle(), output);
  }

  // optional .proto_ff.FMarryRoleDB marry = 20;
  if (has_marry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->marry(), output);
  }

  // optional .proto_ff.DayTotalRechargeDBProto day_total_recharge = 21;
  if (has_day_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->day_total_recharge(), output);
  }

  // optional .proto_ff.TotalRechargeDBProto total_recharge = 22;
  if (has_total_recharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->total_recharge(), output);
  }

  // optional .proto_ff.LoginRewardDBProto login = 23;
  if (has_login()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->login(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDetailDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // required int32 period = 2;
  if (has_period()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->period(), target);
  }

  // required uint64 begintime = 3;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->begintime(), target);
  }

  // optional .proto_ff.FestShopDBProto shop = 4;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->shop(), target);
  }

  // optional .proto_ff.FestDailyTotalRechargeDBProto daily_total_recharge = 5;
  if (has_daily_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->daily_total_recharge(), target);
  }

  // optional .proto_ff.FestSignDBProto sign = 6;
  if (has_sign()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->sign(), target);
  }

  // optional .proto_ff.FestGoldStoreDBProto gold_store = 7;
  if (has_gold_store()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->gold_store(), target);
  }

  // optional .proto_ff.FestDigEggDBProto dig_egg = 8;
  if (has_dig_egg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->dig_egg(), target);
  }

  // optional .proto_ff.FestRTurnableRechargeDBProto rturnable_recharge = 9;
  if (has_rturnable_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rturnable_recharge(), target);
  }

  // optional .proto_ff.FestTurnableDBProto turntable = 10;
  if (has_turntable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->turntable(), target);
  }

  // optional .proto_ff.FestDonateDBProto donate = 11;
  if (has_donate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->donate(), target);
  }

  // optional .proto_ff.FestOnlineDBProto online = 12;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->online(), target);
  }

  // optional .proto_ff.FestCollectWordDBProto collect_word = 13;
  if (has_collect_word()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->collect_word(), target);
  }

  // optional .proto_ff.DrawPizeProto draw_pize = 14;
  if (has_draw_pize()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->draw_pize(), target);
  }

  // optional .proto_ff.FestRankDBData server_rank = 15;
  if (has_server_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->server_rank(), target);
  }

  // optional .proto_ff.FestBossFirstDB boss = 16;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->boss(), target);
  }

  // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 17;
  if (has_hui_meng_xi_you()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->hui_meng_xi_you(), target);
  }

  // optional .proto_ff.FestBtDragonDBProto bt_dragon = 18;
  if (has_bt_dragon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->bt_dragon(), target);
  }

  // optional .proto_ff.FestCandleDBProto candle = 19;
  if (has_candle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->candle(), target);
  }

  // optional .proto_ff.FMarryRoleDB marry = 20;
  if (has_marry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->marry(), target);
  }

  // optional .proto_ff.DayTotalRechargeDBProto day_total_recharge = 21;
  if (has_day_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->day_total_recharge(), target);
  }

  // optional .proto_ff.TotalRechargeDBProto total_recharge = 22;
  if (has_total_recharge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->total_recharge(), target);
  }

  // optional .proto_ff.LoginRewardDBProto login = 23;
  if (has_login()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->login(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDetailDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

    // required int32 period = 2;
    if (has_period()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->period());
    }

    // required uint64 begintime = 3;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begintime());
    }

    // optional .proto_ff.FestShopDBProto shop = 4;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

    // optional .proto_ff.FestDailyTotalRechargeDBProto daily_total_recharge = 5;
    if (has_daily_total_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_total_recharge());
    }

    // optional .proto_ff.FestSignDBProto sign = 6;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sign());
    }

    // optional .proto_ff.FestGoldStoreDBProto gold_store = 7;
    if (has_gold_store()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gold_store());
    }

    // optional .proto_ff.FestDigEggDBProto dig_egg = 8;
    if (has_dig_egg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dig_egg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.FestRTurnableRechargeDBProto rturnable_recharge = 9;
    if (has_rturnable_recharge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rturnable_recharge());
    }

    // optional .proto_ff.FestTurnableDBProto turntable = 10;
    if (has_turntable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->turntable());
    }

    // optional .proto_ff.FestDonateDBProto donate = 11;
    if (has_donate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->donate());
    }

    // optional .proto_ff.FestOnlineDBProto online = 12;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->online());
    }

    // optional .proto_ff.FestCollectWordDBProto collect_word = 13;
    if (has_collect_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collect_word());
    }

    // optional .proto_ff.DrawPizeProto draw_pize = 14;
    if (has_draw_pize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->draw_pize());
    }

    // optional .proto_ff.FestRankDBData server_rank = 15;
    if (has_server_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->server_rank());
    }

    // optional .proto_ff.FestBossFirstDB boss = 16;
    if (has_boss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .proto_ff.FestHuiMengXiYouData hui_meng_xi_you = 17;
    if (has_hui_meng_xi_you()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->hui_meng_xi_you());
    }

    // optional .proto_ff.FestBtDragonDBProto bt_dragon = 18;
    if (has_bt_dragon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bt_dragon());
    }

    // optional .proto_ff.FestCandleDBProto candle = 19;
    if (has_candle()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->candle());
    }

    // optional .proto_ff.FMarryRoleDB marry = 20;
    if (has_marry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marry());
    }

    // optional .proto_ff.DayTotalRechargeDBProto day_total_recharge = 21;
    if (has_day_total_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->day_total_recharge());
    }

    // optional .proto_ff.TotalRechargeDBProto total_recharge = 22;
    if (has_total_recharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->total_recharge());
    }

    // optional .proto_ff.LoginRewardDBProto login = 23;
    if (has_login()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->login());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDetailDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDetailDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDetailDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDetailDBProto::MergeFrom(const FestDetailDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
    if (from.has_period()) {
      set_period(from.period());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_shop()) {
      mutable_shop()->::proto_ff::FestShopDBProto::MergeFrom(from.shop());
    }
    if (from.has_daily_total_recharge()) {
      mutable_daily_total_recharge()->::proto_ff::FestDailyTotalRechargeDBProto::MergeFrom(from.daily_total_recharge());
    }
    if (from.has_sign()) {
      mutable_sign()->::proto_ff::FestSignDBProto::MergeFrom(from.sign());
    }
    if (from.has_gold_store()) {
      mutable_gold_store()->::proto_ff::FestGoldStoreDBProto::MergeFrom(from.gold_store());
    }
    if (from.has_dig_egg()) {
      mutable_dig_egg()->::proto_ff::FestDigEggDBProto::MergeFrom(from.dig_egg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rturnable_recharge()) {
      mutable_rturnable_recharge()->::proto_ff::FestRTurnableRechargeDBProto::MergeFrom(from.rturnable_recharge());
    }
    if (from.has_turntable()) {
      mutable_turntable()->::proto_ff::FestTurnableDBProto::MergeFrom(from.turntable());
    }
    if (from.has_donate()) {
      mutable_donate()->::proto_ff::FestDonateDBProto::MergeFrom(from.donate());
    }
    if (from.has_online()) {
      mutable_online()->::proto_ff::FestOnlineDBProto::MergeFrom(from.online());
    }
    if (from.has_collect_word()) {
      mutable_collect_word()->::proto_ff::FestCollectWordDBProto::MergeFrom(from.collect_word());
    }
    if (from.has_draw_pize()) {
      mutable_draw_pize()->::proto_ff::DrawPizeProto::MergeFrom(from.draw_pize());
    }
    if (from.has_server_rank()) {
      mutable_server_rank()->::proto_ff::FestRankDBData::MergeFrom(from.server_rank());
    }
    if (from.has_boss()) {
      mutable_boss()->::proto_ff::FestBossFirstDB::MergeFrom(from.boss());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_hui_meng_xi_you()) {
      mutable_hui_meng_xi_you()->::proto_ff::FestHuiMengXiYouData::MergeFrom(from.hui_meng_xi_you());
    }
    if (from.has_bt_dragon()) {
      mutable_bt_dragon()->::proto_ff::FestBtDragonDBProto::MergeFrom(from.bt_dragon());
    }
    if (from.has_candle()) {
      mutable_candle()->::proto_ff::FestCandleDBProto::MergeFrom(from.candle());
    }
    if (from.has_marry()) {
      mutable_marry()->::proto_ff::FMarryRoleDB::MergeFrom(from.marry());
    }
    if (from.has_day_total_recharge()) {
      mutable_day_total_recharge()->::proto_ff::DayTotalRechargeDBProto::MergeFrom(from.day_total_recharge());
    }
    if (from.has_total_recharge()) {
      mutable_total_recharge()->::proto_ff::TotalRechargeDBProto::MergeFrom(from.total_recharge());
    }
    if (from.has_login()) {
      mutable_login()->::proto_ff::LoginRewardDBProto::MergeFrom(from.login());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDetailDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDetailDBProto::CopyFrom(const FestDetailDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDetailDBProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FestDetailDBProto::Swap(FestDetailDBProto* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    std::swap(period_, other->period_);
    std::swap(begintime_, other->begintime_);
    std::swap(shop_, other->shop_);
    std::swap(daily_total_recharge_, other->daily_total_recharge_);
    std::swap(sign_, other->sign_);
    std::swap(gold_store_, other->gold_store_);
    std::swap(dig_egg_, other->dig_egg_);
    std::swap(rturnable_recharge_, other->rturnable_recharge_);
    std::swap(turntable_, other->turntable_);
    std::swap(donate_, other->donate_);
    std::swap(online_, other->online_);
    std::swap(collect_word_, other->collect_word_);
    std::swap(draw_pize_, other->draw_pize_);
    std::swap(server_rank_, other->server_rank_);
    std::swap(boss_, other->boss_);
    std::swap(hui_meng_xi_you_, other->hui_meng_xi_you_);
    std::swap(bt_dragon_, other->bt_dragon_);
    std::swap(candle_, other->candle_);
    std::swap(marry_, other->marry_);
    std::swap(day_total_recharge_, other->day_total_recharge_);
    std::swap(total_recharge_, other->total_recharge_);
    std::swap(login_, other->login_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDetailDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDetailDBProto_descriptor_;
  metadata.reflection = FestDetailDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDBData::kInfoFieldNumber;
const int FestDBData::kCloseFieldNumber;
#endif  // !_MSC_VER

FestDBData::FestDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDBData::InitAsDefaultInstance() {
}

FestDBData::FestDBData(const FestDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDBData::~FestDBData() {
  SharedDtor();
}

void FestDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDBData_descriptor_;
}

const FestDBData& FestDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDBData* FestDBData::default_instance_ = NULL;

FestDBData* FestDBData::New() const {
  return new FestDBData;
}

void FestDBData::Clear() {
  info_.Clear();
  close_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDetailDBProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_close;
        break;
      }

      // repeated int32 close = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_close:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_close())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_close())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_close;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDetailDBProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // repeated int32 close = 2;
  for (int i = 0; i < this->close_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->close(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDetailDBProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // repeated int32 close = 2;
  for (int i = 0; i < this->close_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->close(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestDetailDBProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  // repeated int32 close = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->close_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->close(i));
    }
    total_size += 1 * this->close_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDBData::MergeFrom(const FestDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  close_.MergeFrom(from.close_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDBData::CopyFrom(const FestDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDBData::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void FestDBData::Swap(FestDBData* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    close_.Swap(&other->close_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDBData_descriptor_;
  metadata.reflection = FestDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShadowDBProto::kLevFieldNumber;
const int ShadowDBProto::kExpFieldNumber;
const int ShadowDBProto::kStarFieldNumber;
const int ShadowDBProto::kLuckyFieldNumber;
const int ShadowDBProto::kFragFieldNumber;
const int ShadowDBProto::kCurstarFieldNumber;
#endif  // !_MSC_VER

ShadowDBProto::ShadowDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ShadowDBProto::InitAsDefaultInstance() {
}

ShadowDBProto::ShadowDBProto(const ShadowDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ShadowDBProto::SharedCtor() {
  _cached_size_ = 0;
  lev_ = 0;
  exp_ = 0;
  star_ = 0;
  lucky_ = 0;
  curstar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShadowDBProto::~ShadowDBProto() {
  SharedDtor();
}

void ShadowDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShadowDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShadowDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShadowDBProto_descriptor_;
}

const ShadowDBProto& ShadowDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ShadowDBProto* ShadowDBProto::default_instance_ = NULL;

ShadowDBProto* ShadowDBProto::New() const {
  return new ShadowDBProto;
}

void ShadowDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lev_ = 0;
    exp_ = 0;
    star_ = 0;
    lucky_ = 0;
    curstar_ = 0;
  }
  frag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShadowDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lev = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lev_)));
          set_has_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_star;
        break;
      }

      // optional int32 star = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lucky;
        break;
      }

      // optional int32 lucky = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_frag;
        break;
      }

      // repeated .proto_ff.ComPair frag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_frag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_frag;
        if (input->ExpectTag(48)) goto parse_curstar;
        break;
      }

      // optional int32 curstar = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curstar_)));
          set_has_curstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ShadowDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 lev = 1;
  if (has_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lev(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 star = 3;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->star(), output);
  }

  // optional int32 lucky = 4;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lucky(), output);
  }

  // repeated .proto_ff.ComPair frag = 5;
  for (int i = 0; i < this->frag_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->frag(i), output);
  }

  // optional int32 curstar = 6;
  if (has_curstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->curstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ShadowDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 lev = 1;
  if (has_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lev(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 star = 3;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->star(), target);
  }

  // optional int32 lucky = 4;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lucky(), target);
  }

  // repeated .proto_ff.ComPair frag = 5;
  for (int i = 0; i < this->frag_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->frag(i), target);
  }

  // optional int32 curstar = 6;
  if (has_curstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->curstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ShadowDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 lev = 1;
    if (has_lev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lev());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 star = 3;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional int32 lucky = 4;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lucky());
    }

    // optional int32 curstar = 6;
    if (has_curstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curstar());
    }

  }
  // repeated .proto_ff.ComPair frag = 5;
  total_size += 1 * this->frag_size();
  for (int i = 0; i < this->frag_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->frag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShadowDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShadowDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShadowDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShadowDBProto::MergeFrom(const ShadowDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  frag_.MergeFrom(from.frag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lev()) {
      set_lev(from.lev());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_curstar()) {
      set_curstar(from.curstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShadowDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShadowDBProto::CopyFrom(const ShadowDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShadowDBProto::IsInitialized() const {

  return true;
}

void ShadowDBProto::Swap(ShadowDBProto* other) {
  if (other != this) {
    std::swap(lev_, other->lev_);
    std::swap(exp_, other->exp_);
    std::swap(star_, other->star_);
    std::swap(lucky_, other->lucky_);
    frag_.Swap(&other->frag_);
    std::swap(curstar_, other->curstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShadowDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShadowDBProto_descriptor_;
  metadata.reflection = ShadowDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HaloDBProto::kInfoFieldNumber;
const int HaloDBProto::kCuridFieldNumber;
const int HaloDBProto::kCurstarFieldNumber;
#endif  // !_MSC_VER

HaloDBProto::HaloDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HaloDBProto::InitAsDefaultInstance() {
}

HaloDBProto::HaloDBProto(const HaloDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HaloDBProto::SharedCtor() {
  _cached_size_ = 0;
  curid_ = 0;
  curstar_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HaloDBProto::~HaloDBProto() {
  SharedDtor();
}

void HaloDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HaloDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HaloDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HaloDBProto_descriptor_;
}

const HaloDBProto& HaloDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

HaloDBProto* HaloDBProto::default_instance_ = NULL;

HaloDBProto* HaloDBProto::New() const {
  return new HaloDBProto;
}

void HaloDBProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    curid_ = 0;
    curstar_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HaloDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComPair info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_curid;
        break;
      }

      // optional int32 curid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curid_)));
          set_has_curid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curstar;
        break;
      }

      // optional int32 curstar = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curstar_)));
          set_has_curstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HaloDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional int32 curid = 2;
  if (has_curid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curid(), output);
  }

  // optional int32 curstar = 3;
  if (has_curstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->curstar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HaloDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComPair info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional int32 curid = 2;
  if (has_curid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curid(), target);
  }

  // optional int32 curstar = 3;
  if (has_curstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->curstar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HaloDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 curid = 2;
    if (has_curid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curid());
    }

    // optional int32 curstar = 3;
    if (has_curstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curstar());
    }

  }
  // repeated .proto_ff.ComPair info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HaloDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HaloDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HaloDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HaloDBProto::MergeFrom(const HaloDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curid()) {
      set_curid(from.curid());
    }
    if (from.has_curstar()) {
      set_curstar(from.curstar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HaloDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HaloDBProto::CopyFrom(const HaloDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HaloDBProto::IsInitialized() const {

  return true;
}

void HaloDBProto::Swap(HaloDBProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(curid_, other->curid_);
    std::swap(curstar_, other->curstar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HaloDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HaloDBProto_descriptor_;
  metadata.reflection = HaloDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DragonDBData::kShadowFieldNumber;
const int DragonDBData::kHaloFieldNumber;
#endif  // !_MSC_VER

DragonDBData::DragonDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DragonDBData::InitAsDefaultInstance() {
  shadow_ = const_cast< ::proto_ff::ShadowDBProto*>(&::proto_ff::ShadowDBProto::default_instance());
  halo_ = const_cast< ::proto_ff::HaloDBProto*>(&::proto_ff::HaloDBProto::default_instance());
}

DragonDBData::DragonDBData(const DragonDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DragonDBData::SharedCtor() {
  _cached_size_ = 0;
  shadow_ = NULL;
  halo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DragonDBData::~DragonDBData() {
  SharedDtor();
}

void DragonDBData::SharedDtor() {
  if (this != default_instance_) {
    delete shadow_;
    delete halo_;
  }
}

void DragonDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DragonDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DragonDBData_descriptor_;
}

const DragonDBData& DragonDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DragonDBData* DragonDBData::default_instance_ = NULL;

DragonDBData* DragonDBData::New() const {
  return new DragonDBData;
}

void DragonDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shadow()) {
      if (shadow_ != NULL) shadow_->::proto_ff::ShadowDBProto::Clear();
    }
    if (has_halo()) {
      if (halo_ != NULL) halo_->::proto_ff::HaloDBProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DragonDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ShadowDBProto shadow = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shadow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_halo;
        break;
      }

      // optional .proto_ff.HaloDBProto halo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_halo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_halo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DragonDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ShadowDBProto shadow = 1;
  if (has_shadow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shadow(), output);
  }

  // optional .proto_ff.HaloDBProto halo = 2;
  if (has_halo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->halo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DragonDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ShadowDBProto shadow = 1;
  if (has_shadow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shadow(), target);
  }

  // optional .proto_ff.HaloDBProto halo = 2;
  if (has_halo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->halo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DragonDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ShadowDBProto shadow = 1;
    if (has_shadow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shadow());
    }

    // optional .proto_ff.HaloDBProto halo = 2;
    if (has_halo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->halo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DragonDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DragonDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DragonDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DragonDBData::MergeFrom(const DragonDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shadow()) {
      mutable_shadow()->::proto_ff::ShadowDBProto::MergeFrom(from.shadow());
    }
    if (from.has_halo()) {
      mutable_halo()->::proto_ff::HaloDBProto::MergeFrom(from.halo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DragonDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DragonDBData::CopyFrom(const DragonDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DragonDBData::IsInitialized() const {

  return true;
}

void DragonDBData::Swap(DragonDBData* other) {
  if (other != this) {
    std::swap(shadow_, other->shadow_);
    std::swap(halo_, other->halo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DragonDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DragonDBData_descriptor_;
  metadata.reflection = DragonDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBTurnData::kEntrysFieldNumber;
const int RoleDBTurnData::kSimpleFieldNumber;
const int RoleDBTurnData::kHelperFieldNumber;
const int RoleDBTurnData::kRefreshTimeFieldNumber;
const int RoleDBTurnData::kTasksFieldNumber;
#endif  // !_MSC_VER

RoleDBTurnData::RoleDBTurnData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBTurnData::InitAsDefaultInstance() {
  simple_ = const_cast< ::proto_ff::TurnSimple*>(&::proto_ff::TurnSimple::default_instance());
}

RoleDBTurnData::RoleDBTurnData(const RoleDBTurnData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBTurnData::SharedCtor() {
  _cached_size_ = 0;
  simple_ = NULL;
  refresh_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBTurnData::~RoleDBTurnData() {
  SharedDtor();
}

void RoleDBTurnData::SharedDtor() {
  if (this != default_instance_) {
    delete simple_;
  }
}

void RoleDBTurnData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBTurnData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBTurnData_descriptor_;
}

const RoleDBTurnData& RoleDBTurnData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleDBTurnData* RoleDBTurnData::default_instance_ = NULL;

RoleDBTurnData* RoleDBTurnData::New() const {
  return new RoleDBTurnData;
}

void RoleDBTurnData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::TurnSimple::Clear();
    }
    refresh_time_ = GOOGLE_ULONGLONG(0);
  }
  entrys_.Clear();
  helper_.Clear();
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBTurnData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.TurnEntry entrys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entrys;
        if (input->ExpectTag(18)) goto parse_simple;
        break;
      }

      // optional .proto_ff.TurnSimple simple = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_helper;
        break;
      }

      // repeated .proto_ff.TurnHelper helper = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_helper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_helper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_helper;
        if (input->ExpectTag(32)) goto parse_refresh_time;
        break;
      }

      // optional uint64 refresh_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tasks;
        break;
      }

      // repeated .proto_ff.TurnTask tasks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBTurnData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.TurnEntry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entrys(i), output);
  }

  // optional .proto_ff.TurnSimple simple = 2;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->simple(), output);
  }

  // repeated .proto_ff.TurnHelper helper = 3;
  for (int i = 0; i < this->helper_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->helper(i), output);
  }

  // optional uint64 refresh_time = 4;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->refresh_time(), output);
  }

  // repeated .proto_ff.TurnTask tasks = 5;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBTurnData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.TurnEntry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entrys(i), target);
  }

  // optional .proto_ff.TurnSimple simple = 2;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->simple(), target);
  }

  // repeated .proto_ff.TurnHelper helper = 3;
  for (int i = 0; i < this->helper_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->helper(i), target);
  }

  // optional uint64 refresh_time = 4;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->refresh_time(), target);
  }

  // repeated .proto_ff.TurnTask tasks = 5;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBTurnData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .proto_ff.TurnSimple simple = 2;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

    // optional uint64 refresh_time = 4;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refresh_time());
    }

  }
  // repeated .proto_ff.TurnEntry entrys = 1;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  // repeated .proto_ff.TurnHelper helper = 3;
  total_size += 1 * this->helper_size();
  for (int i = 0; i < this->helper_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->helper(i));
  }

  // repeated .proto_ff.TurnTask tasks = 5;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBTurnData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBTurnData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBTurnData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBTurnData::MergeFrom(const RoleDBTurnData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  helper_.MergeFrom(from.helper_);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::TurnSimple::MergeFrom(from.simple());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBTurnData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBTurnData::CopyFrom(const RoleDBTurnData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBTurnData::IsInitialized() const {

  for (int i = 0; i < entrys_size(); i++) {
    if (!this->entrys(i).IsInitialized()) return false;
  }
  return true;
}

void RoleDBTurnData::Swap(RoleDBTurnData* other) {
  if (other != this) {
    entrys_.Swap(&other->entrys_);
    std::swap(simple_, other->simple_);
    helper_.Swap(&other->helper_);
    std::swap(refresh_time_, other->refresh_time_);
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBTurnData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBTurnData_descriptor_;
  metadata.reflection = RoleDBTurnData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMADbData::kRemainTimeFieldNumber;
const int GMADbData::kFreeTimeRemainFieldNumber;
const int GMADbData::kFreeTimeFieldNumber;
const int GMADbData::kPrivilegeFieldNumber;
const int GMADbData::kRecvFreeTimePrevFieldNumber;
const int GMADbData::kExpTotalFieldNumber;
const int GMADbData::kExpAccumulateFieldNumber;
#endif  // !_MSC_VER

GMADbData::GMADbData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMADbData::InitAsDefaultInstance() {
}

GMADbData::GMADbData(const GMADbData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMADbData::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0u;
  freetimeremain_ = 0u;
  freetime_ = 0u;
  privilege_ = 0u;
  recvfreetimeprev_ = GOOGLE_ULONGLONG(0);
  exptotal_ = GOOGLE_LONGLONG(0);
  expaccumulate_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMADbData::~GMADbData() {
  SharedDtor();
}

void GMADbData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMADbData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMADbData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMADbData_descriptor_;
}

const GMADbData& GMADbData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GMADbData* GMADbData::default_instance_ = NULL;

GMADbData* GMADbData::New() const {
  return new GMADbData;
}

void GMADbData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remaintime_ = 0u;
    freetimeremain_ = 0u;
    freetime_ = 0u;
    privilege_ = 0u;
    recvfreetimeprev_ = GOOGLE_ULONGLONG(0);
    exptotal_ = GOOGLE_LONGLONG(0);
    expaccumulate_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMADbData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 remainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_freeTimeRemain;
        break;
      }

      // optional uint32 freeTimeRemain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeTimeRemain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetimeremain_)));
          set_has_freetimeremain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_freeTime;
        break;
      }

      // optional uint32 freeTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetime_)));
          set_has_freetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_privilege;
        break;
      }

      // optional uint32 privilege = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_privilege:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &privilege_)));
          set_has_privilege();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_recvFreeTimePrev;
        break;
      }

      // optional uint64 recvFreeTimePrev = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recvFreeTimePrev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &recvfreetimeprev_)));
          set_has_recvfreetimeprev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_expTotal;
        break;
      }

      // optional int64 expTotal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expTotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exptotal_)));
          set_has_exptotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_expAccumulate;
        break;
      }

      // optional int64 expAccumulate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expAccumulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expaccumulate_)));
          set_has_expaccumulate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMADbData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaintime(), output);
  }

  // optional uint32 freeTimeRemain = 2;
  if (has_freetimeremain()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->freetimeremain(), output);
  }

  // optional uint32 freeTime = 3;
  if (has_freetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->freetime(), output);
  }

  // optional uint32 privilege = 4;
  if (has_privilege()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->privilege(), output);
  }

  // optional uint64 recvFreeTimePrev = 5;
  if (has_recvfreetimeprev()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->recvfreetimeprev(), output);
  }

  // optional int64 expTotal = 6;
  if (has_exptotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->exptotal(), output);
  }

  // optional int64 expAccumulate = 7;
  if (has_expaccumulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->expaccumulate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMADbData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaintime(), target);
  }

  // optional uint32 freeTimeRemain = 2;
  if (has_freetimeremain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->freetimeremain(), target);
  }

  // optional uint32 freeTime = 3;
  if (has_freetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->freetime(), target);
  }

  // optional uint32 privilege = 4;
  if (has_privilege()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->privilege(), target);
  }

  // optional uint64 recvFreeTimePrev = 5;
  if (has_recvfreetimeprev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->recvfreetimeprev(), target);
  }

  // optional int64 expTotal = 6;
  if (has_exptotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->exptotal(), target);
  }

  // optional int64 expAccumulate = 7;
  if (has_expaccumulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->expaccumulate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMADbData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 remainTime = 1;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

    // optional uint32 freeTimeRemain = 2;
    if (has_freetimeremain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freetimeremain());
    }

    // optional uint32 freeTime = 3;
    if (has_freetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freetime());
    }

    // optional uint32 privilege = 4;
    if (has_privilege()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->privilege());
    }

    // optional uint64 recvFreeTimePrev = 5;
    if (has_recvfreetimeprev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->recvfreetimeprev());
    }

    // optional int64 expTotal = 6;
    if (has_exptotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exptotal());
    }

    // optional int64 expAccumulate = 7;
    if (has_expaccumulate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->expaccumulate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMADbData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMADbData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMADbData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMADbData::MergeFrom(const GMADbData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
    if (from.has_freetimeremain()) {
      set_freetimeremain(from.freetimeremain());
    }
    if (from.has_freetime()) {
      set_freetime(from.freetime());
    }
    if (from.has_privilege()) {
      set_privilege(from.privilege());
    }
    if (from.has_recvfreetimeprev()) {
      set_recvfreetimeprev(from.recvfreetimeprev());
    }
    if (from.has_exptotal()) {
      set_exptotal(from.exptotal());
    }
    if (from.has_expaccumulate()) {
      set_expaccumulate(from.expaccumulate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMADbData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMADbData::CopyFrom(const GMADbData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMADbData::IsInitialized() const {

  return true;
}

void GMADbData::Swap(GMADbData* other) {
  if (other != this) {
    std::swap(remaintime_, other->remaintime_);
    std::swap(freetimeremain_, other->freetimeremain_);
    std::swap(freetime_, other->freetime_);
    std::swap(privilege_, other->privilege_);
    std::swap(recvfreetimeprev_, other->recvfreetimeprev_);
    std::swap(exptotal_, other->exptotal_);
    std::swap(expaccumulate_, other->expaccumulate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMADbData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMADbData_descriptor_;
  metadata.reflection = GMADbData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SoulDBData::kEntryFieldNumber;
const int SoulDBData::kPoolFieldNumber;
const int SoulDBData::kTasksFieldNumber;
#endif  // !_MSC_VER

SoulDBData::SoulDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SoulDBData::InitAsDefaultInstance() {
  entry_ = const_cast< ::proto_ff::SoulEntry*>(&::proto_ff::SoulEntry::default_instance());
  pool_ = const_cast< ::proto_ff::SoulPool*>(&::proto_ff::SoulPool::default_instance());
}

SoulDBData::SoulDBData(const SoulDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SoulDBData::SharedCtor() {
  _cached_size_ = 0;
  entry_ = NULL;
  pool_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SoulDBData::~SoulDBData() {
  SharedDtor();
}

void SoulDBData::SharedDtor() {
  if (this != default_instance_) {
    delete entry_;
    delete pool_;
  }
}

void SoulDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SoulDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SoulDBData_descriptor_;
}

const SoulDBData& SoulDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SoulDBData* SoulDBData::default_instance_ = NULL;

SoulDBData* SoulDBData::New() const {
  return new SoulDBData;
}

void SoulDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_entry()) {
      if (entry_ != NULL) entry_->::proto_ff::SoulEntry::Clear();
    }
    if (has_pool()) {
      if (pool_ != NULL) pool_->::proto_ff::SoulPool::Clear();
    }
  }
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SoulDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.SoulEntry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pool;
        break;
      }

      // optional .proto_ff.SoulPool pool = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pool:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pool()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tasks;
        break;
      }

      // repeated .proto_ff.ComPair tasks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SoulDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.SoulEntry entry = 1;
  if (has_entry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(), output);
  }

  // optional .proto_ff.SoulPool pool = 2;
  if (has_pool()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pool(), output);
  }

  // repeated .proto_ff.ComPair tasks = 3;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SoulDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.SoulEntry entry = 1;
  if (has_entry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(), target);
  }

  // optional .proto_ff.SoulPool pool = 2;
  if (has_pool()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pool(), target);
  }

  // repeated .proto_ff.ComPair tasks = 3;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SoulDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.SoulEntry entry = 1;
    if (has_entry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->entry());
    }

    // optional .proto_ff.SoulPool pool = 2;
    if (has_pool()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pool());
    }

  }
  // repeated .proto_ff.ComPair tasks = 3;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SoulDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SoulDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SoulDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SoulDBData::MergeFrom(const SoulDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry()) {
      mutable_entry()->::proto_ff::SoulEntry::MergeFrom(from.entry());
    }
    if (from.has_pool()) {
      mutable_pool()->::proto_ff::SoulPool::MergeFrom(from.pool());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SoulDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SoulDBData::CopyFrom(const SoulDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SoulDBData::IsInitialized() const {

  return true;
}

void SoulDBData::Swap(SoulDBData* other) {
  if (other != this) {
    std::swap(entry_, other->entry_);
    std::swap(pool_, other->pool_);
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SoulDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SoulDBData_descriptor_;
  metadata.reflection = SoulDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleDBData::kCidFieldNumber;
const int RoleDBData::kZidFieldNumber;
const int RoleDBData::kUidFieldNumber;
const int RoleDBData::kBaseFieldNumber;
const int RoleDBData::kBagFieldNumber;
const int RoleDBData::kEquipFieldNumber;
const int RoleDBData::kTaskFieldNumber;
const int RoleDBData::kUnlockinfoFieldNumber;
const int RoleDBData::kGrowFieldNumber;
const int RoleDBData::kMiniFieldNumber;
const int RoleDBData::kFacadeFieldNumber;
const int RoleDBData::kSkillFieldNumber;
const int RoleDBData::kMiniActivityFieldNumber;
const int RoleDBData::kDupFieldNumber;
const int RoleDBData::kBuffFieldNumber;
const int RoleDBData::kBossFieldNumber;
const int RoleDBData::kVipFieldNumber;
const int RoleDBData::kAttrFieldNumber;
const int RoleDBData::kMountFieldNumber;
const int RoleDBData::kDeityFieldNumber;
const int RoleDBData::kPetFieldNumber;
const int RoleDBData::kMallFieldNumber;
const int RoleDBData::kConvoyFieldNumber;
const int RoleDBData::kArmorFieldNumber;
const int RoleDBData::kAssistFieldNumber;
const int RoleDBData::kTitleFieldNumber;
const int RoleDBData::kGodevilFieldNumber;
const int RoleDBData::kOccupatoinFieldNumber;
const int RoleDBData::kPayFieldNumber;
const int RoleDBData::kRoleFactionFieldNumber;
const int RoleDBData::kBestEquipFieldNumber;
const int RoleDBData::kAchievementFieldNumber;
const int RoleDBData::kAncientFieldNumber;
const int RoleDBData::kPvpFieldNumber;
const int RoleDBData::kPtdataFieldNumber;
const int RoleDBData::kRoleMarryFieldNumber;
const int RoleDBData::kEncylopeddiaFieldNumber;
const int RoleDBData::kGvbPdataFieldNumber;
const int RoleDBData::kPsdatasFieldNumber;
const int RoleDBData::kDragonSoulFieldNumber;
const int RoleDBData::kWelfareFieldNumber;
const int RoleDBData::kDailyWelfareFieldNumber;
const int RoleDBData::kChargeFieldNumber;
const int RoleDBData::kGiftFieldNumber;
const int RoleDBData::kFindTreatureFieldNumber;
const int RoleDBData::kFestFieldNumber;
const int RoleDBData::kDragonFieldNumber;
const int RoleDBData::kStarFieldNumber;
const int RoleDBData::kChangeFieldNumber;
const int RoleDBData::kTurnFieldNumber;
const int RoleDBData::kGmaDatasFieldNumber;
const int RoleDBData::kSoulFieldNumber;
#endif  // !_MSC_VER

RoleDBData::RoleDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleDBData::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
  bag_ = const_cast< ::proto_ff::RoleDBBagData*>(&::proto_ff::RoleDBBagData::default_instance());
  equip_ = const_cast< ::proto_ff::RoleDBEquipData*>(&::proto_ff::RoleDBEquipData::default_instance());
  task_ = const_cast< ::proto_ff::CharacterDBTaskData*>(&::proto_ff::CharacterDBTaskData::default_instance());
  unlockinfo_ = const_cast< ::proto_ff::FunctionUnlockInfo*>(&::proto_ff::FunctionUnlockInfo::default_instance());
  grow_ = const_cast< ::proto_ff::GrowDBData*>(&::proto_ff::GrowDBData::default_instance());
  mini_ = const_cast< ::proto_ff::MiniDBData*>(&::proto_ff::MiniDBData::default_instance());
  facade_ = const_cast< ::proto_ff::FacadeDBData*>(&::proto_ff::FacadeDBData::default_instance());
  skill_ = const_cast< ::proto_ff::SkillDBData*>(&::proto_ff::SkillDBData::default_instance());
  mini_activity_ = const_cast< ::proto_ff::MiniActivityDBData*>(&::proto_ff::MiniActivityDBData::default_instance());
  dup_ = const_cast< ::proto_ff::DupDBData*>(&::proto_ff::DupDBData::default_instance());
  buff_ = const_cast< ::proto_ff::BuffDBData*>(&::proto_ff::BuffDBData::default_instance());
  boss_ = const_cast< ::proto_ff::BossDBData*>(&::proto_ff::BossDBData::default_instance());
  vip_ = const_cast< ::proto_ff::VipDBData*>(&::proto_ff::VipDBData::default_instance());
  attr_ = const_cast< ::proto_ff::AttrDBData*>(&::proto_ff::AttrDBData::default_instance());
  mount_ = const_cast< ::proto_ff::MountDataInfo*>(&::proto_ff::MountDataInfo::default_instance());
  deity_ = const_cast< ::proto_ff::DeityDataInfo*>(&::proto_ff::DeityDataInfo::default_instance());
  pet_ = const_cast< ::proto_ff::PetDBData*>(&::proto_ff::PetDBData::default_instance());
  mall_ = const_cast< ::proto_ff::MallDBData*>(&::proto_ff::MallDBData::default_instance());
  convoy_ = const_cast< ::proto_ff::ConvoyData*>(&::proto_ff::ConvoyData::default_instance());
  armor_ = const_cast< ::proto_ff::ArmorDBData*>(&::proto_ff::ArmorDBData::default_instance());
  assist_ = const_cast< ::proto_ff::AssistDBData*>(&::proto_ff::AssistDBData::default_instance());
  title_ = const_cast< ::proto_ff::TitleDBData*>(&::proto_ff::TitleDBData::default_instance());
  godevil_ = const_cast< ::proto_ff::GodEvilDBData*>(&::proto_ff::GodEvilDBData::default_instance());
  occupatoin_ = const_cast< ::proto_ff::OccupationMissionData*>(&::proto_ff::OccupationMissionData::default_instance());
  pay_ = const_cast< ::proto_ff::PayDBData*>(&::proto_ff::PayDBData::default_instance());
  role_faction_ = const_cast< ::proto_ff::RoleFactionDBData*>(&::proto_ff::RoleFactionDBData::default_instance());
  best_equip_ = const_cast< ::proto_ff::RoleBestEQDBData*>(&::proto_ff::RoleBestEQDBData::default_instance());
  achievement_ = const_cast< ::proto_ff::AchievementData*>(&::proto_ff::AchievementData::default_instance());
  ancient_ = const_cast< ::proto_ff::AncientDBData*>(&::proto_ff::AncientDBData::default_instance());
  pvp_ = const_cast< ::proto_ff::RolePvpDBData*>(&::proto_ff::RolePvpDBData::default_instance());
  ptdata_ = const_cast< ::proto_ff::PracticeTrueDBData*>(&::proto_ff::PracticeTrueDBData::default_instance());
  role_marry_ = const_cast< ::proto_ff::RoleMarryDBData*>(&::proto_ff::RoleMarryDBData::default_instance());
  encylopeddia_ = const_cast< ::proto_ff::EncylopediaDBData*>(&::proto_ff::EncylopediaDBData::default_instance());
  gvb_pdata_ = const_cast< ::proto_ff::GVBPData*>(&::proto_ff::GVBPData::default_instance());
  psdatas_ = const_cast< ::proto_ff::PSDatas*>(&::proto_ff::PSDatas::default_instance());
  dragon_soul_ = const_cast< ::proto_ff::DragonSoulData*>(&::proto_ff::DragonSoulData::default_instance());
  welfare_ = const_cast< ::proto_ff::WelfarePBData*>(&::proto_ff::WelfarePBData::default_instance());
  daily_welfare_ = const_cast< ::proto_ff::DailyWelfarePBData*>(&::proto_ff::DailyWelfarePBData::default_instance());
  charge_ = const_cast< ::proto_ff::ChargeDBData*>(&::proto_ff::ChargeDBData::default_instance());
  gift_ = const_cast< ::proto_ff::GiftDBData*>(&::proto_ff::GiftDBData::default_instance());
  find_treature_ = const_cast< ::proto_ff::FindTreatureDBData*>(&::proto_ff::FindTreatureDBData::default_instance());
  fest_ = const_cast< ::proto_ff::FestDBData*>(&::proto_ff::FestDBData::default_instance());
  dragon_ = const_cast< ::proto_ff::DragonDBData*>(&::proto_ff::DragonDBData::default_instance());
  star_ = const_cast< ::proto_ff::StarData*>(&::proto_ff::StarData::default_instance());
  turn_ = const_cast< ::proto_ff::RoleDBTurnData*>(&::proto_ff::RoleDBTurnData::default_instance());
  gma_datas_ = const_cast< ::proto_ff::GMADbData*>(&::proto_ff::GMADbData::default_instance());
  soul_ = const_cast< ::proto_ff::SoulDBData*>(&::proto_ff::SoulDBData::default_instance());
}

RoleDBData::RoleDBData(const RoleDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleDBData::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  uid_ = 0u;
  base_ = NULL;
  bag_ = NULL;
  equip_ = NULL;
  task_ = NULL;
  unlockinfo_ = NULL;
  grow_ = NULL;
  mini_ = NULL;
  facade_ = NULL;
  skill_ = NULL;
  mini_activity_ = NULL;
  dup_ = NULL;
  buff_ = NULL;
  boss_ = NULL;
  vip_ = NULL;
  attr_ = NULL;
  mount_ = NULL;
  deity_ = NULL;
  pet_ = NULL;
  mall_ = NULL;
  convoy_ = NULL;
  armor_ = NULL;
  assist_ = NULL;
  title_ = NULL;
  godevil_ = NULL;
  occupatoin_ = NULL;
  pay_ = NULL;
  role_faction_ = NULL;
  best_equip_ = NULL;
  achievement_ = NULL;
  ancient_ = NULL;
  pvp_ = NULL;
  ptdata_ = NULL;
  role_marry_ = NULL;
  encylopeddia_ = NULL;
  gvb_pdata_ = NULL;
  psdatas_ = NULL;
  dragon_soul_ = NULL;
  welfare_ = NULL;
  daily_welfare_ = NULL;
  charge_ = NULL;
  gift_ = NULL;
  find_treature_ = NULL;
  fest_ = NULL;
  dragon_ = NULL;
  star_ = NULL;
  change_ = 0;
  turn_ = NULL;
  gma_datas_ = NULL;
  soul_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleDBData::~RoleDBData() {
  SharedDtor();
}

void RoleDBData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete bag_;
    delete equip_;
    delete task_;
    delete unlockinfo_;
    delete grow_;
    delete mini_;
    delete facade_;
    delete skill_;
    delete mini_activity_;
    delete dup_;
    delete buff_;
    delete boss_;
    delete vip_;
    delete attr_;
    delete mount_;
    delete deity_;
    delete pet_;
    delete mall_;
    delete convoy_;
    delete armor_;
    delete assist_;
    delete title_;
    delete godevil_;
    delete occupatoin_;
    delete pay_;
    delete role_faction_;
    delete best_equip_;
    delete achievement_;
    delete ancient_;
    delete pvp_;
    delete ptdata_;
    delete role_marry_;
    delete encylopeddia_;
    delete gvb_pdata_;
    delete psdatas_;
    delete dragon_soul_;
    delete welfare_;
    delete daily_welfare_;
    delete charge_;
    delete gift_;
    delete find_treature_;
    delete fest_;
    delete dragon_;
    delete star_;
    delete turn_;
    delete gma_datas_;
    delete soul_;
  }
}

void RoleDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleDBData_descriptor_;
}

const RoleDBData& RoleDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleDBData* RoleDBData::default_instance_ = NULL;

RoleDBData* RoleDBData::New() const {
  return new RoleDBData;
}

void RoleDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    uid_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
    if (has_bag()) {
      if (bag_ != NULL) bag_->::proto_ff::RoleDBBagData::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto_ff::RoleDBEquipData::Clear();
    }
    if (has_task()) {
      if (task_ != NULL) task_->::proto_ff::CharacterDBTaskData::Clear();
    }
    if (has_unlockinfo()) {
      if (unlockinfo_ != NULL) unlockinfo_->::proto_ff::FunctionUnlockInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_grow()) {
      if (grow_ != NULL) grow_->::proto_ff::GrowDBData::Clear();
    }
    if (has_mini()) {
      if (mini_ != NULL) mini_->::proto_ff::MiniDBData::Clear();
    }
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::FacadeDBData::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::proto_ff::SkillDBData::Clear();
    }
    if (has_mini_activity()) {
      if (mini_activity_ != NULL) mini_activity_->::proto_ff::MiniActivityDBData::Clear();
    }
    if (has_dup()) {
      if (dup_ != NULL) dup_->::proto_ff::DupDBData::Clear();
    }
    if (has_buff()) {
      if (buff_ != NULL) buff_->::proto_ff::BuffDBData::Clear();
    }
    if (has_boss()) {
      if (boss_ != NULL) boss_->::proto_ff::BossDBData::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_vip()) {
      if (vip_ != NULL) vip_->::proto_ff::VipDBData::Clear();
    }
    if (has_attr()) {
      if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
    }
    if (has_mount()) {
      if (mount_ != NULL) mount_->::proto_ff::MountDataInfo::Clear();
    }
    if (has_deity()) {
      if (deity_ != NULL) deity_->::proto_ff::DeityDataInfo::Clear();
    }
    if (has_pet()) {
      if (pet_ != NULL) pet_->::proto_ff::PetDBData::Clear();
    }
    if (has_mall()) {
      if (mall_ != NULL) mall_->::proto_ff::MallDBData::Clear();
    }
    if (has_convoy()) {
      if (convoy_ != NULL) convoy_->::proto_ff::ConvoyData::Clear();
    }
    if (has_armor()) {
      if (armor_ != NULL) armor_->::proto_ff::ArmorDBData::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_assist()) {
      if (assist_ != NULL) assist_->::proto_ff::AssistDBData::Clear();
    }
    if (has_title()) {
      if (title_ != NULL) title_->::proto_ff::TitleDBData::Clear();
    }
    if (has_godevil()) {
      if (godevil_ != NULL) godevil_->::proto_ff::GodEvilDBData::Clear();
    }
    if (has_occupatoin()) {
      if (occupatoin_ != NULL) occupatoin_->::proto_ff::OccupationMissionData::Clear();
    }
    if (has_pay()) {
      if (pay_ != NULL) pay_->::proto_ff::PayDBData::Clear();
    }
    if (has_role_faction()) {
      if (role_faction_ != NULL) role_faction_->::proto_ff::RoleFactionDBData::Clear();
    }
    if (has_best_equip()) {
      if (best_equip_ != NULL) best_equip_->::proto_ff::RoleBestEQDBData::Clear();
    }
    if (has_achievement()) {
      if (achievement_ != NULL) achievement_->::proto_ff::AchievementData::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_ancient()) {
      if (ancient_ != NULL) ancient_->::proto_ff::AncientDBData::Clear();
    }
    if (has_pvp()) {
      if (pvp_ != NULL) pvp_->::proto_ff::RolePvpDBData::Clear();
    }
    if (has_ptdata()) {
      if (ptdata_ != NULL) ptdata_->::proto_ff::PracticeTrueDBData::Clear();
    }
    if (has_role_marry()) {
      if (role_marry_ != NULL) role_marry_->::proto_ff::RoleMarryDBData::Clear();
    }
    if (has_encylopeddia()) {
      if (encylopeddia_ != NULL) encylopeddia_->::proto_ff::EncylopediaDBData::Clear();
    }
    if (has_gvb_pdata()) {
      if (gvb_pdata_ != NULL) gvb_pdata_->::proto_ff::GVBPData::Clear();
    }
    if (has_psdatas()) {
      if (psdatas_ != NULL) psdatas_->::proto_ff::PSDatas::Clear();
    }
    if (has_dragon_soul()) {
      if (dragon_soul_ != NULL) dragon_soul_->::proto_ff::DragonSoulData::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_welfare()) {
      if (welfare_ != NULL) welfare_->::proto_ff::WelfarePBData::Clear();
    }
    if (has_daily_welfare()) {
      if (daily_welfare_ != NULL) daily_welfare_->::proto_ff::DailyWelfarePBData::Clear();
    }
    if (has_charge()) {
      if (charge_ != NULL) charge_->::proto_ff::ChargeDBData::Clear();
    }
    if (has_gift()) {
      if (gift_ != NULL) gift_->::proto_ff::GiftDBData::Clear();
    }
    if (has_find_treature()) {
      if (find_treature_ != NULL) find_treature_->::proto_ff::FindTreatureDBData::Clear();
    }
    if (has_fest()) {
      if (fest_ != NULL) fest_->::proto_ff::FestDBData::Clear();
    }
    if (has_dragon()) {
      if (dragon_ != NULL) dragon_->::proto_ff::DragonDBData::Clear();
    }
    if (has_star()) {
      if (star_ != NULL) star_->::proto_ff::StarData::Clear();
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    change_ = 0;
    if (has_turn()) {
      if (turn_ != NULL) turn_->::proto_ff::RoleDBTurnData::Clear();
    }
    if (has_gma_datas()) {
      if (gma_datas_ != NULL) gma_datas_->::proto_ff::GMADbData::Clear();
    }
    if (has_soul()) {
      if (soul_ != NULL) soul_->::proto_ff::SoulDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bag;
        break;
      }

      // optional .proto_ff.RoleDBBagData bag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bag()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_equip;
        break;
      }

      // optional .proto_ff.RoleDBEquipData equip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_task;
        break;
      }

      // optional .proto_ff.CharacterDBTaskData task = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_unlockinfo;
        break;
      }

      // optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unlockinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unlockinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_grow;
        break;
      }

      // optional .proto_ff.GrowDBData grow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_grow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_mini;
        break;
      }

      // optional .proto_ff.MiniDBData mini = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mini:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mini()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_facade;
        break;
      }

      // optional .proto_ff.FacadeDBData facade = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_skill;
        break;
      }

      // optional .proto_ff.SkillDBData skill = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_mini_activity;
        break;
      }

      // optional .proto_ff.MiniActivityDBData mini_activity = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mini_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mini_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_dup;
        break;
      }

      // optional .proto_ff.DupDBData dup = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_buff;
        break;
      }

      // optional .proto_ff.BuffDBData buff = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_boss;
        break;
      }

      // optional .proto_ff.BossDBData boss = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_boss:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boss()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_vip;
        break;
      }

      // optional .proto_ff.VipDBData vip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_attr;
        break;
      }

      // optional .proto_ff.AttrDBData attr = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_mount;
        break;
      }

      // optional .proto_ff.MountDataInfo mount = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_deity;
        break;
      }

      // optional .proto_ff.DeityDataInfo deity = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_deity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_pet;
        break;
      }

      // optional .proto_ff.PetDBData pet = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_mall;
        break;
      }

      // optional .proto_ff.MallDBData mall = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mall()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_convoy;
        break;
      }

      // optional .proto_ff.ConvoyData convoy = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_convoy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_convoy()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_armor;
        break;
      }

      // optional .proto_ff.ArmorDBData armor = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_armor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_armor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_assist;
        break;
      }

      // optional .proto_ff.AssistDBData assist = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_assist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_assist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_title;
        break;
      }

      // optional .proto_ff.TitleDBData title = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_godevil;
        break;
      }

      // optional .proto_ff.GodEvilDBData godevil = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_godevil:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_godevil()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_occupatoin;
        break;
      }

      // optional .proto_ff.OccupationMissionData occupatoin = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_occupatoin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_occupatoin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_pay;
        break;
      }

      // optional .proto_ff.PayDBData pay = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pay()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_role_faction;
        break;
      }

      // optional .proto_ff.RoleFactionDBData role_faction = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_faction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_faction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_best_equip;
        break;
      }

      // optional .proto_ff.RoleBestEQDBData best_equip = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_best_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_best_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_achievement;
        break;
      }

      // optional .proto_ff.AchievementData achievement = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_achievement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievement()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_ancient;
        break;
      }

      // optional .proto_ff.AncientDBData ancient = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ancient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ancient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_pvp;
        break;
      }

      // optional .proto_ff.RolePvpDBData pvp = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pvp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pvp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_ptdata;
        break;
      }

      // optional .proto_ff.PracticeTrueDBData ptdata = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ptdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ptdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_role_marry;
        break;
      }

      // optional .proto_ff.RoleMarryDBData role_marry = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_marry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_role_marry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_encylopeddia;
        break;
      }

      // optional .proto_ff.EncylopediaDBData encylopeddia = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_encylopeddia:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_encylopeddia()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_gvb_pdata;
        break;
      }

      // optional .proto_ff.GVBPData gvb_pdata = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gvb_pdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gvb_pdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_psdatas;
        break;
      }

      // optional .proto_ff.PSDatas psdatas = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_psdatas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_psdatas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_dragon_soul;
        break;
      }

      // optional .proto_ff.DragonSoulData dragon_soul = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dragon_soul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dragon_soul()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_welfare;
        break;
      }

      // optional .proto_ff.WelfarePBData welfare = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_welfare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_welfare()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_daily_welfare;
        break;
      }

      // optional .proto_ff.DailyWelfarePBData daily_welfare = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily_welfare:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_daily_welfare()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_charge;
        break;
      }

      // optional .proto_ff.ChargeDBData charge = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_charge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_gift;
        break;
      }

      // optional .proto_ff.GiftDBData gift = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gift:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gift()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_find_treature;
        break;
      }

      // optional .proto_ff.FindTreatureDBData find_treature = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_find_treature:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_find_treature()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_fest;
        break;
      }

      // optional .proto_ff.FestDBData fest = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_dragon;
        break;
      }

      // optional .proto_ff.DragonDBData dragon = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dragon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dragon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_star;
        break;
      }

      // optional .proto_ff.StarData star = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_star:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_star()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_change;
        break;
      }

      // optional int32 change = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_turn;
        break;
      }

      // optional .proto_ff.RoleDBTurnData turn = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_turn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_turn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_gma_datas;
        break;
      }

      // optional .proto_ff.GMADbData gma_datas = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gma_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gma_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_soul;
        break;
      }

      // optional .proto_ff.SoulDBData soul = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_soul:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_soul()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->base(), output);
  }

  // optional .proto_ff.RoleDBBagData bag = 5;
  if (has_bag()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->bag(), output);
  }

  // optional .proto_ff.RoleDBEquipData equip = 6;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->equip(), output);
  }

  // optional .proto_ff.CharacterDBTaskData task = 7;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->task(), output);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
  if (has_unlockinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->unlockinfo(), output);
  }

  // optional .proto_ff.GrowDBData grow = 9;
  if (has_grow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->grow(), output);
  }

  // optional .proto_ff.MiniDBData mini = 10;
  if (has_mini()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->mini(), output);
  }

  // optional .proto_ff.FacadeDBData facade = 11;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->facade(), output);
  }

  // optional .proto_ff.SkillDBData skill = 12;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->skill(), output);
  }

  // optional .proto_ff.MiniActivityDBData mini_activity = 13;
  if (has_mini_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->mini_activity(), output);
  }

  // optional .proto_ff.DupDBData dup = 14;
  if (has_dup()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->dup(), output);
  }

  // optional .proto_ff.BuffDBData buff = 15;
  if (has_buff()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->buff(), output);
  }

  // optional .proto_ff.BossDBData boss = 16;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->boss(), output);
  }

  // optional .proto_ff.VipDBData vip = 17;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->vip(), output);
  }

  // optional .proto_ff.AttrDBData attr = 18;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->attr(), output);
  }

  // optional .proto_ff.MountDataInfo mount = 19;
  if (has_mount()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->mount(), output);
  }

  // optional .proto_ff.DeityDataInfo deity = 20;
  if (has_deity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->deity(), output);
  }

  // optional .proto_ff.PetDBData pet = 21;
  if (has_pet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->pet(), output);
  }

  // optional .proto_ff.MallDBData mall = 22;
  if (has_mall()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->mall(), output);
  }

  // optional .proto_ff.ConvoyData convoy = 23;
  if (has_convoy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->convoy(), output);
  }

  // optional .proto_ff.ArmorDBData armor = 24;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->armor(), output);
  }

  // optional .proto_ff.AssistDBData assist = 25;
  if (has_assist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->assist(), output);
  }

  // optional .proto_ff.TitleDBData title = 26;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->title(), output);
  }

  // optional .proto_ff.GodEvilDBData godevil = 27;
  if (has_godevil()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->godevil(), output);
  }

  // optional .proto_ff.OccupationMissionData occupatoin = 28;
  if (has_occupatoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->occupatoin(), output);
  }

  // optional .proto_ff.PayDBData pay = 29;
  if (has_pay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->pay(), output);
  }

  // optional .proto_ff.RoleFactionDBData role_faction = 30;
  if (has_role_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->role_faction(), output);
  }

  // optional .proto_ff.RoleBestEQDBData best_equip = 31;
  if (has_best_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->best_equip(), output);
  }

  // optional .proto_ff.AchievementData achievement = 32;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->achievement(), output);
  }

  // optional .proto_ff.AncientDBData ancient = 33;
  if (has_ancient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->ancient(), output);
  }

  // optional .proto_ff.RolePvpDBData pvp = 34;
  if (has_pvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->pvp(), output);
  }

  // optional .proto_ff.PracticeTrueDBData ptdata = 35;
  if (has_ptdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->ptdata(), output);
  }

  // optional .proto_ff.RoleMarryDBData role_marry = 36;
  if (has_role_marry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->role_marry(), output);
  }

  // optional .proto_ff.EncylopediaDBData encylopeddia = 37;
  if (has_encylopeddia()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->encylopeddia(), output);
  }

  // optional .proto_ff.GVBPData gvb_pdata = 38;
  if (has_gvb_pdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->gvb_pdata(), output);
  }

  // optional .proto_ff.PSDatas psdatas = 39;
  if (has_psdatas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->psdatas(), output);
  }

  // optional .proto_ff.DragonSoulData dragon_soul = 40;
  if (has_dragon_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->dragon_soul(), output);
  }

  // optional .proto_ff.WelfarePBData welfare = 41;
  if (has_welfare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->welfare(), output);
  }

  // optional .proto_ff.DailyWelfarePBData daily_welfare = 42;
  if (has_daily_welfare()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->daily_welfare(), output);
  }

  // optional .proto_ff.ChargeDBData charge = 43;
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->charge(), output);
  }

  // optional .proto_ff.GiftDBData gift = 44;
  if (has_gift()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->gift(), output);
  }

  // optional .proto_ff.FindTreatureDBData find_treature = 45;
  if (has_find_treature()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->find_treature(), output);
  }

  // optional .proto_ff.FestDBData fest = 46;
  if (has_fest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->fest(), output);
  }

  // optional .proto_ff.DragonDBData dragon = 47;
  if (has_dragon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      47, this->dragon(), output);
  }

  // optional .proto_ff.StarData star = 48;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      48, this->star(), output);
  }

  // optional int32 change = 49;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->change(), output);
  }

  // optional .proto_ff.RoleDBTurnData turn = 50;
  if (has_turn()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->turn(), output);
  }

  // optional .proto_ff.GMADbData gma_datas = 51;
  if (has_gma_datas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->gma_datas(), output);
  }

  // optional .proto_ff.SoulDBData soul = 52;
  if (has_soul()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->soul(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 4;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->base(), target);
  }

  // optional .proto_ff.RoleDBBagData bag = 5;
  if (has_bag()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->bag(), target);
  }

  // optional .proto_ff.RoleDBEquipData equip = 6;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->equip(), target);
  }

  // optional .proto_ff.CharacterDBTaskData task = 7;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->task(), target);
  }

  // optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
  if (has_unlockinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->unlockinfo(), target);
  }

  // optional .proto_ff.GrowDBData grow = 9;
  if (has_grow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->grow(), target);
  }

  // optional .proto_ff.MiniDBData mini = 10;
  if (has_mini()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->mini(), target);
  }

  // optional .proto_ff.FacadeDBData facade = 11;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->facade(), target);
  }

  // optional .proto_ff.SkillDBData skill = 12;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->skill(), target);
  }

  // optional .proto_ff.MiniActivityDBData mini_activity = 13;
  if (has_mini_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->mini_activity(), target);
  }

  // optional .proto_ff.DupDBData dup = 14;
  if (has_dup()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->dup(), target);
  }

  // optional .proto_ff.BuffDBData buff = 15;
  if (has_buff()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->buff(), target);
  }

  // optional .proto_ff.BossDBData boss = 16;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->boss(), target);
  }

  // optional .proto_ff.VipDBData vip = 17;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->vip(), target);
  }

  // optional .proto_ff.AttrDBData attr = 18;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->attr(), target);
  }

  // optional .proto_ff.MountDataInfo mount = 19;
  if (has_mount()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->mount(), target);
  }

  // optional .proto_ff.DeityDataInfo deity = 20;
  if (has_deity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->deity(), target);
  }

  // optional .proto_ff.PetDBData pet = 21;
  if (has_pet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->pet(), target);
  }

  // optional .proto_ff.MallDBData mall = 22;
  if (has_mall()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->mall(), target);
  }

  // optional .proto_ff.ConvoyData convoy = 23;
  if (has_convoy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->convoy(), target);
  }

  // optional .proto_ff.ArmorDBData armor = 24;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->armor(), target);
  }

  // optional .proto_ff.AssistDBData assist = 25;
  if (has_assist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->assist(), target);
  }

  // optional .proto_ff.TitleDBData title = 26;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->title(), target);
  }

  // optional .proto_ff.GodEvilDBData godevil = 27;
  if (has_godevil()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->godevil(), target);
  }

  // optional .proto_ff.OccupationMissionData occupatoin = 28;
  if (has_occupatoin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->occupatoin(), target);
  }

  // optional .proto_ff.PayDBData pay = 29;
  if (has_pay()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->pay(), target);
  }

  // optional .proto_ff.RoleFactionDBData role_faction = 30;
  if (has_role_faction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->role_faction(), target);
  }

  // optional .proto_ff.RoleBestEQDBData best_equip = 31;
  if (has_best_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->best_equip(), target);
  }

  // optional .proto_ff.AchievementData achievement = 32;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->achievement(), target);
  }

  // optional .proto_ff.AncientDBData ancient = 33;
  if (has_ancient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->ancient(), target);
  }

  // optional .proto_ff.RolePvpDBData pvp = 34;
  if (has_pvp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->pvp(), target);
  }

  // optional .proto_ff.PracticeTrueDBData ptdata = 35;
  if (has_ptdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->ptdata(), target);
  }

  // optional .proto_ff.RoleMarryDBData role_marry = 36;
  if (has_role_marry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->role_marry(), target);
  }

  // optional .proto_ff.EncylopediaDBData encylopeddia = 37;
  if (has_encylopeddia()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->encylopeddia(), target);
  }

  // optional .proto_ff.GVBPData gvb_pdata = 38;
  if (has_gvb_pdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->gvb_pdata(), target);
  }

  // optional .proto_ff.PSDatas psdatas = 39;
  if (has_psdatas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->psdatas(), target);
  }

  // optional .proto_ff.DragonSoulData dragon_soul = 40;
  if (has_dragon_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->dragon_soul(), target);
  }

  // optional .proto_ff.WelfarePBData welfare = 41;
  if (has_welfare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->welfare(), target);
  }

  // optional .proto_ff.DailyWelfarePBData daily_welfare = 42;
  if (has_daily_welfare()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->daily_welfare(), target);
  }

  // optional .proto_ff.ChargeDBData charge = 43;
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->charge(), target);
  }

  // optional .proto_ff.GiftDBData gift = 44;
  if (has_gift()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->gift(), target);
  }

  // optional .proto_ff.FindTreatureDBData find_treature = 45;
  if (has_find_treature()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->find_treature(), target);
  }

  // optional .proto_ff.FestDBData fest = 46;
  if (has_fest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->fest(), target);
  }

  // optional .proto_ff.DragonDBData dragon = 47;
  if (has_dragon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        47, this->dragon(), target);
  }

  // optional .proto_ff.StarData star = 48;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        48, this->star(), target);
  }

  // optional int32 change = 49;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->change(), target);
  }

  // optional .proto_ff.RoleDBTurnData turn = 50;
  if (has_turn()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->turn(), target);
  }

  // optional .proto_ff.GMADbData gma_datas = 51;
  if (has_gma_datas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->gma_datas(), target);
  }

  // optional .proto_ff.SoulDBData soul = 52;
  if (has_soul()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->soul(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBBaseData base = 4;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .proto_ff.RoleDBBagData bag = 5;
    if (has_bag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bag());
    }

    // optional .proto_ff.RoleDBEquipData equip = 6;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional .proto_ff.CharacterDBTaskData task = 7;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }

    // optional .proto_ff.FunctionUnlockInfo unlockinfo = 8;
    if (has_unlockinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unlockinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .proto_ff.GrowDBData grow = 9;
    if (has_grow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->grow());
    }

    // optional .proto_ff.MiniDBData mini = 10;
    if (has_mini()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mini());
    }

    // optional .proto_ff.FacadeDBData facade = 11;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional .proto_ff.SkillDBData skill = 12;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .proto_ff.MiniActivityDBData mini_activity = 13;
    if (has_mini_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mini_activity());
    }

    // optional .proto_ff.DupDBData dup = 14;
    if (has_dup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dup());
    }

    // optional .proto_ff.BuffDBData buff = 15;
    if (has_buff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buff());
    }

    // optional .proto_ff.BossDBData boss = 16;
    if (has_boss()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boss());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .proto_ff.VipDBData vip = 17;
    if (has_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vip());
    }

    // optional .proto_ff.AttrDBData attr = 18;
    if (has_attr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // optional .proto_ff.MountDataInfo mount = 19;
    if (has_mount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mount());
    }

    // optional .proto_ff.DeityDataInfo deity = 20;
    if (has_deity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->deity());
    }

    // optional .proto_ff.PetDBData pet = 21;
    if (has_pet()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pet());
    }

    // optional .proto_ff.MallDBData mall = 22;
    if (has_mall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mall());
    }

    // optional .proto_ff.ConvoyData convoy = 23;
    if (has_convoy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->convoy());
    }

    // optional .proto_ff.ArmorDBData armor = 24;
    if (has_armor()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->armor());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .proto_ff.AssistDBData assist = 25;
    if (has_assist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->assist());
    }

    // optional .proto_ff.TitleDBData title = 26;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // optional .proto_ff.GodEvilDBData godevil = 27;
    if (has_godevil()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->godevil());
    }

    // optional .proto_ff.OccupationMissionData occupatoin = 28;
    if (has_occupatoin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->occupatoin());
    }

    // optional .proto_ff.PayDBData pay = 29;
    if (has_pay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pay());
    }

    // optional .proto_ff.RoleFactionDBData role_faction = 30;
    if (has_role_faction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_faction());
    }

    // optional .proto_ff.RoleBestEQDBData best_equip = 31;
    if (has_best_equip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->best_equip());
    }

    // optional .proto_ff.AchievementData achievement = 32;
    if (has_achievement()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievement());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .proto_ff.AncientDBData ancient = 33;
    if (has_ancient()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ancient());
    }

    // optional .proto_ff.RolePvpDBData pvp = 34;
    if (has_pvp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pvp());
    }

    // optional .proto_ff.PracticeTrueDBData ptdata = 35;
    if (has_ptdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ptdata());
    }

    // optional .proto_ff.RoleMarryDBData role_marry = 36;
    if (has_role_marry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->role_marry());
    }

    // optional .proto_ff.EncylopediaDBData encylopeddia = 37;
    if (has_encylopeddia()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->encylopeddia());
    }

    // optional .proto_ff.GVBPData gvb_pdata = 38;
    if (has_gvb_pdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gvb_pdata());
    }

    // optional .proto_ff.PSDatas psdatas = 39;
    if (has_psdatas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->psdatas());
    }

    // optional .proto_ff.DragonSoulData dragon_soul = 40;
    if (has_dragon_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dragon_soul());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .proto_ff.WelfarePBData welfare = 41;
    if (has_welfare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->welfare());
    }

    // optional .proto_ff.DailyWelfarePBData daily_welfare = 42;
    if (has_daily_welfare()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->daily_welfare());
    }

    // optional .proto_ff.ChargeDBData charge = 43;
    if (has_charge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->charge());
    }

    // optional .proto_ff.GiftDBData gift = 44;
    if (has_gift()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gift());
    }

    // optional .proto_ff.FindTreatureDBData find_treature = 45;
    if (has_find_treature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->find_treature());
    }

    // optional .proto_ff.FestDBData fest = 46;
    if (has_fest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fest());
    }

    // optional .proto_ff.DragonDBData dragon = 47;
    if (has_dragon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dragon());
    }

    // optional .proto_ff.StarData star = 48;
    if (has_star()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->star());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 change = 49;
    if (has_change()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

    // optional .proto_ff.RoleDBTurnData turn = 50;
    if (has_turn()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->turn());
    }

    // optional .proto_ff.GMADbData gma_datas = 51;
    if (has_gma_datas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gma_datas());
    }

    // optional .proto_ff.SoulDBData soul = 52;
    if (has_soul()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->soul());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleDBData::MergeFrom(const RoleDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
    if (from.has_bag()) {
      mutable_bag()->::proto_ff::RoleDBBagData::MergeFrom(from.bag());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto_ff::RoleDBEquipData::MergeFrom(from.equip());
    }
    if (from.has_task()) {
      mutable_task()->::proto_ff::CharacterDBTaskData::MergeFrom(from.task());
    }
    if (from.has_unlockinfo()) {
      mutable_unlockinfo()->::proto_ff::FunctionUnlockInfo::MergeFrom(from.unlockinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_grow()) {
      mutable_grow()->::proto_ff::GrowDBData::MergeFrom(from.grow());
    }
    if (from.has_mini()) {
      mutable_mini()->::proto_ff::MiniDBData::MergeFrom(from.mini());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::FacadeDBData::MergeFrom(from.facade());
    }
    if (from.has_skill()) {
      mutable_skill()->::proto_ff::SkillDBData::MergeFrom(from.skill());
    }
    if (from.has_mini_activity()) {
      mutable_mini_activity()->::proto_ff::MiniActivityDBData::MergeFrom(from.mini_activity());
    }
    if (from.has_dup()) {
      mutable_dup()->::proto_ff::DupDBData::MergeFrom(from.dup());
    }
    if (from.has_buff()) {
      mutable_buff()->::proto_ff::BuffDBData::MergeFrom(from.buff());
    }
    if (from.has_boss()) {
      mutable_boss()->::proto_ff::BossDBData::MergeFrom(from.boss());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_vip()) {
      mutable_vip()->::proto_ff::VipDBData::MergeFrom(from.vip());
    }
    if (from.has_attr()) {
      mutable_attr()->::proto_ff::AttrDBData::MergeFrom(from.attr());
    }
    if (from.has_mount()) {
      mutable_mount()->::proto_ff::MountDataInfo::MergeFrom(from.mount());
    }
    if (from.has_deity()) {
      mutable_deity()->::proto_ff::DeityDataInfo::MergeFrom(from.deity());
    }
    if (from.has_pet()) {
      mutable_pet()->::proto_ff::PetDBData::MergeFrom(from.pet());
    }
    if (from.has_mall()) {
      mutable_mall()->::proto_ff::MallDBData::MergeFrom(from.mall());
    }
    if (from.has_convoy()) {
      mutable_convoy()->::proto_ff::ConvoyData::MergeFrom(from.convoy());
    }
    if (from.has_armor()) {
      mutable_armor()->::proto_ff::ArmorDBData::MergeFrom(from.armor());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_assist()) {
      mutable_assist()->::proto_ff::AssistDBData::MergeFrom(from.assist());
    }
    if (from.has_title()) {
      mutable_title()->::proto_ff::TitleDBData::MergeFrom(from.title());
    }
    if (from.has_godevil()) {
      mutable_godevil()->::proto_ff::GodEvilDBData::MergeFrom(from.godevil());
    }
    if (from.has_occupatoin()) {
      mutable_occupatoin()->::proto_ff::OccupationMissionData::MergeFrom(from.occupatoin());
    }
    if (from.has_pay()) {
      mutable_pay()->::proto_ff::PayDBData::MergeFrom(from.pay());
    }
    if (from.has_role_faction()) {
      mutable_role_faction()->::proto_ff::RoleFactionDBData::MergeFrom(from.role_faction());
    }
    if (from.has_best_equip()) {
      mutable_best_equip()->::proto_ff::RoleBestEQDBData::MergeFrom(from.best_equip());
    }
    if (from.has_achievement()) {
      mutable_achievement()->::proto_ff::AchievementData::MergeFrom(from.achievement());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_ancient()) {
      mutable_ancient()->::proto_ff::AncientDBData::MergeFrom(from.ancient());
    }
    if (from.has_pvp()) {
      mutable_pvp()->::proto_ff::RolePvpDBData::MergeFrom(from.pvp());
    }
    if (from.has_ptdata()) {
      mutable_ptdata()->::proto_ff::PracticeTrueDBData::MergeFrom(from.ptdata());
    }
    if (from.has_role_marry()) {
      mutable_role_marry()->::proto_ff::RoleMarryDBData::MergeFrom(from.role_marry());
    }
    if (from.has_encylopeddia()) {
      mutable_encylopeddia()->::proto_ff::EncylopediaDBData::MergeFrom(from.encylopeddia());
    }
    if (from.has_gvb_pdata()) {
      mutable_gvb_pdata()->::proto_ff::GVBPData::MergeFrom(from.gvb_pdata());
    }
    if (from.has_psdatas()) {
      mutable_psdatas()->::proto_ff::PSDatas::MergeFrom(from.psdatas());
    }
    if (from.has_dragon_soul()) {
      mutable_dragon_soul()->::proto_ff::DragonSoulData::MergeFrom(from.dragon_soul());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_welfare()) {
      mutable_welfare()->::proto_ff::WelfarePBData::MergeFrom(from.welfare());
    }
    if (from.has_daily_welfare()) {
      mutable_daily_welfare()->::proto_ff::DailyWelfarePBData::MergeFrom(from.daily_welfare());
    }
    if (from.has_charge()) {
      mutable_charge()->::proto_ff::ChargeDBData::MergeFrom(from.charge());
    }
    if (from.has_gift()) {
      mutable_gift()->::proto_ff::GiftDBData::MergeFrom(from.gift());
    }
    if (from.has_find_treature()) {
      mutable_find_treature()->::proto_ff::FindTreatureDBData::MergeFrom(from.find_treature());
    }
    if (from.has_fest()) {
      mutable_fest()->::proto_ff::FestDBData::MergeFrom(from.fest());
    }
    if (from.has_dragon()) {
      mutable_dragon()->::proto_ff::DragonDBData::MergeFrom(from.dragon());
    }
    if (from.has_star()) {
      mutable_star()->::proto_ff::StarData::MergeFrom(from.star());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_change()) {
      set_change(from.change());
    }
    if (from.has_turn()) {
      mutable_turn()->::proto_ff::RoleDBTurnData::MergeFrom(from.turn());
    }
    if (from.has_gma_datas()) {
      mutable_gma_datas()->::proto_ff::GMADbData::MergeFrom(from.gma_datas());
    }
    if (from.has_soul()) {
      mutable_soul()->::proto_ff::SoulDBData::MergeFrom(from.soul());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleDBData::CopyFrom(const RoleDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleDBData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_bag()) {
    if (!this->bag().IsInitialized()) return false;
  }
  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  if (has_mount()) {
    if (!this->mount().IsInitialized()) return false;
  }
  if (has_deity()) {
    if (!this->deity().IsInitialized()) return false;
  }
  if (has_pet()) {
    if (!this->pet().IsInitialized()) return false;
  }
  if (has_godevil()) {
    if (!this->godevil().IsInitialized()) return false;
  }
  if (has_best_equip()) {
    if (!this->best_equip().IsInitialized()) return false;
  }
  if (has_ptdata()) {
    if (!this->ptdata().IsInitialized()) return false;
  }
  if (has_encylopeddia()) {
    if (!this->encylopeddia().IsInitialized()) return false;
  }
  if (has_psdatas()) {
    if (!this->psdatas().IsInitialized()) return false;
  }
  if (has_dragon_soul()) {
    if (!this->dragon_soul().IsInitialized()) return false;
  }
  if (has_fest()) {
    if (!this->fest().IsInitialized()) return false;
  }
  if (has_star()) {
    if (!this->star().IsInitialized()) return false;
  }
  if (has_turn()) {
    if (!this->turn().IsInitialized()) return false;
  }
  return true;
}

void RoleDBData::Swap(RoleDBData* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(zid_, other->zid_);
    std::swap(uid_, other->uid_);
    std::swap(base_, other->base_);
    std::swap(bag_, other->bag_);
    std::swap(equip_, other->equip_);
    std::swap(task_, other->task_);
    std::swap(unlockinfo_, other->unlockinfo_);
    std::swap(grow_, other->grow_);
    std::swap(mini_, other->mini_);
    std::swap(facade_, other->facade_);
    std::swap(skill_, other->skill_);
    std::swap(mini_activity_, other->mini_activity_);
    std::swap(dup_, other->dup_);
    std::swap(buff_, other->buff_);
    std::swap(boss_, other->boss_);
    std::swap(vip_, other->vip_);
    std::swap(attr_, other->attr_);
    std::swap(mount_, other->mount_);
    std::swap(deity_, other->deity_);
    std::swap(pet_, other->pet_);
    std::swap(mall_, other->mall_);
    std::swap(convoy_, other->convoy_);
    std::swap(armor_, other->armor_);
    std::swap(assist_, other->assist_);
    std::swap(title_, other->title_);
    std::swap(godevil_, other->godevil_);
    std::swap(occupatoin_, other->occupatoin_);
    std::swap(pay_, other->pay_);
    std::swap(role_faction_, other->role_faction_);
    std::swap(best_equip_, other->best_equip_);
    std::swap(achievement_, other->achievement_);
    std::swap(ancient_, other->ancient_);
    std::swap(pvp_, other->pvp_);
    std::swap(ptdata_, other->ptdata_);
    std::swap(role_marry_, other->role_marry_);
    std::swap(encylopeddia_, other->encylopeddia_);
    std::swap(gvb_pdata_, other->gvb_pdata_);
    std::swap(psdatas_, other->psdatas_);
    std::swap(dragon_soul_, other->dragon_soul_);
    std::swap(welfare_, other->welfare_);
    std::swap(daily_welfare_, other->daily_welfare_);
    std::swap(charge_, other->charge_);
    std::swap(gift_, other->gift_);
    std::swap(find_treature_, other->find_treature_);
    std::swap(fest_, other->fest_);
    std::swap(dragon_, other->dragon_);
    std::swap(star_, other->star_);
    std::swap(change_, other->change_);
    std::swap(turn_, other->turn_);
    std::swap(gma_datas_, other->gma_datas_);
    std::swap(soul_, other->soul_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleDBData_descriptor_;
  metadata.reflection = RoleDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedWaitDBProto::kIdxFieldNumber;
const int RedWaitDBProto::kCfgidFieldNumber;
const int RedWaitDBProto::kTimeFieldNumber;
#endif  // !_MSC_VER

RedWaitDBProto::RedWaitDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedWaitDBProto::InitAsDefaultInstance() {
}

RedWaitDBProto::RedWaitDBProto(const RedWaitDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedWaitDBProto::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  cfgid_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedWaitDBProto::~RedWaitDBProto() {
  SharedDtor();
}

void RedWaitDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedWaitDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedWaitDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedWaitDBProto_descriptor_;
}

const RedWaitDBProto& RedWaitDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RedWaitDBProto* RedWaitDBProto::default_instance_ = NULL;

RedWaitDBProto* RedWaitDBProto::New() const {
  return new RedWaitDBProto;
}

void RedWaitDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    cfgid_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedWaitDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // optional int32 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedWaitDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional int32 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cfgid(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedWaitDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional int32 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cfgid(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedWaitDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional int32 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfgid());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedWaitDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedWaitDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedWaitDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedWaitDBProto::MergeFrom(const RedWaitDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedWaitDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedWaitDBProto::CopyFrom(const RedWaitDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedWaitDBProto::IsInitialized() const {

  return true;
}

void RedWaitDBProto::Swap(RedWaitDBProto* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedWaitDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedWaitDBProto_descriptor_;
  metadata.reflection = RedWaitDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedTriggerDBProto::kCfgidFieldNumber;
const int RedTriggerDBProto::kCountFieldNumber;
#endif  // !_MSC_VER

RedTriggerDBProto::RedTriggerDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedTriggerDBProto::InitAsDefaultInstance() {
}

RedTriggerDBProto::RedTriggerDBProto(const RedTriggerDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedTriggerDBProto::SharedCtor() {
  _cached_size_ = 0;
  cfgid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedTriggerDBProto::~RedTriggerDBProto() {
  SharedDtor();
}

void RedTriggerDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedTriggerDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedTriggerDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedTriggerDBProto_descriptor_;
}

const RedTriggerDBProto& RedTriggerDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RedTriggerDBProto* RedTriggerDBProto::default_instance_ = NULL;

RedTriggerDBProto* RedTriggerDBProto::New() const {
  return new RedTriggerDBProto;
}

void RedTriggerDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cfgid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedTriggerDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cfgid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedTriggerDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cfgid = 1;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cfgid(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedTriggerDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cfgid = 1;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cfgid(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedTriggerDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cfgid = 1;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfgid());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedTriggerDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedTriggerDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedTriggerDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedTriggerDBProto::MergeFrom(const RedTriggerDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedTriggerDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedTriggerDBProto::CopyFrom(const RedTriggerDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedTriggerDBProto::IsInitialized() const {

  return true;
}

void RedTriggerDBProto::Swap(RedTriggerDBProto* other) {
  if (other != this) {
    std::swap(cfgid_, other->cfgid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedTriggerDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedTriggerDBProto_descriptor_;
  metadata.reflection = RedTriggerDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleRedDBData::kBdiaFieldNumber;
const int RoleRedDBData::kMagicFieldNumber;
const int RoleRedDBData::kTodaynumFieldNumber;
const int RoleRedDBData::kTodaymagicFieldNumber;
const int RoleRedDBData::kTodaybdiaFieldNumber;
const int RoleRedDBData::kFreshtimeFieldNumber;
const int RoleRedDBData::kSendLstFieldNumber;
const int RoleRedDBData::kWaitLstFieldNumber;
const int RoleRedDBData::kCidFieldNumber;
const int RoleRedDBData::kTriggerLstFieldNumber;
#endif  // !_MSC_VER

RoleRedDBData::RoleRedDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRedDBData::InitAsDefaultInstance() {
}

RoleRedDBData::RoleRedDBData(const RoleRedDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRedDBData::SharedCtor() {
  _cached_size_ = 0;
  bdia_ = 0u;
  magic_ = 0u;
  todaynum_ = 0u;
  todaymagic_ = 0u;
  todaybdia_ = 0u;
  freshtime_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRedDBData::~RoleRedDBData() {
  SharedDtor();
}

void RoleRedDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRedDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRedDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRedDBData_descriptor_;
}

const RoleRedDBData& RoleRedDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleRedDBData* RoleRedDBData::default_instance_ = NULL;

RoleRedDBData* RoleRedDBData::New() const {
  return new RoleRedDBData;
}

void RoleRedDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bdia_ = 0u;
    magic_ = 0u;
    todaynum_ = 0u;
    todaymagic_ = 0u;
    todaybdia_ = 0u;
    freshtime_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
  }
  send_lst_.Clear();
  wait_lst_.Clear();
  trigger_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRedDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 bdia = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bdia_)));
          set_has_bdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_magic;
        break;
      }

      // optional uint32 magic = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &magic_)));
          set_has_magic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_todaynum;
        break;
      }

      // optional uint32 todaynum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todaynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaynum_)));
          set_has_todaynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_todaymagic;
        break;
      }

      // optional uint32 todaymagic = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todaymagic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaymagic_)));
          set_has_todaymagic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_todaybdia;
        break;
      }

      // optional uint32 todaybdia = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todaybdia:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaybdia_)));
          set_has_todaybdia();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_freshtime;
        break;
      }

      // optional uint64 freshtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freshtime_)));
          set_has_freshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_send_lst;
        break;
      }

      // repeated int32 send_lst = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_send_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_send_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_send_lst;
        if (input->ExpectTag(66)) goto parse_wait_lst;
        break;
      }

      // repeated .proto_ff.RedWaitDBProto wait_lst = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wait_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wait_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_wait_lst;
        if (input->ExpectTag(72)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_trigger_lst;
        break;
      }

      // repeated .proto_ff.RedTriggerDBProto trigger_lst = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trigger_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_trigger_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleRedDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 bdia = 1;
  if (has_bdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->bdia(), output);
  }

  // optional uint32 magic = 2;
  if (has_magic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->magic(), output);
  }

  // optional uint32 todaynum = 3;
  if (has_todaynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->todaynum(), output);
  }

  // optional uint32 todaymagic = 4;
  if (has_todaymagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->todaymagic(), output);
  }

  // optional uint32 todaybdia = 5;
  if (has_todaybdia()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->todaybdia(), output);
  }

  // optional uint64 freshtime = 6;
  if (has_freshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->freshtime(), output);
  }

  // repeated int32 send_lst = 7;
  for (int i = 0; i < this->send_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->send_lst(i), output);
  }

  // repeated .proto_ff.RedWaitDBProto wait_lst = 8;
  for (int i = 0; i < this->wait_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->wait_lst(i), output);
  }

  // optional uint64 cid = 9;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->cid(), output);
  }

  // repeated .proto_ff.RedTriggerDBProto trigger_lst = 10;
  for (int i = 0; i < this->trigger_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->trigger_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRedDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 bdia = 1;
  if (has_bdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->bdia(), target);
  }

  // optional uint32 magic = 2;
  if (has_magic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->magic(), target);
  }

  // optional uint32 todaynum = 3;
  if (has_todaynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->todaynum(), target);
  }

  // optional uint32 todaymagic = 4;
  if (has_todaymagic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->todaymagic(), target);
  }

  // optional uint32 todaybdia = 5;
  if (has_todaybdia()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->todaybdia(), target);
  }

  // optional uint64 freshtime = 6;
  if (has_freshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->freshtime(), target);
  }

  // repeated int32 send_lst = 7;
  for (int i = 0; i < this->send_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->send_lst(i), target);
  }

  // repeated .proto_ff.RedWaitDBProto wait_lst = 8;
  for (int i = 0; i < this->wait_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->wait_lst(i), target);
  }

  // optional uint64 cid = 9;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->cid(), target);
  }

  // repeated .proto_ff.RedTriggerDBProto trigger_lst = 10;
  for (int i = 0; i < this->trigger_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->trigger_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRedDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 bdia = 1;
    if (has_bdia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bdia());
    }

    // optional uint32 magic = 2;
    if (has_magic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->magic());
    }

    // optional uint32 todaynum = 3;
    if (has_todaynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaynum());
    }

    // optional uint32 todaymagic = 4;
    if (has_todaymagic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaymagic());
    }

    // optional uint32 todaybdia = 5;
    if (has_todaybdia()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaybdia());
    }

    // optional uint64 freshtime = 6;
    if (has_freshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freshtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 cid = 9;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  // repeated int32 send_lst = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->send_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->send_lst(i));
    }
    total_size += 1 * this->send_lst_size() + data_size;
  }

  // repeated .proto_ff.RedWaitDBProto wait_lst = 8;
  total_size += 1 * this->wait_lst_size();
  for (int i = 0; i < this->wait_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wait_lst(i));
  }

  // repeated .proto_ff.RedTriggerDBProto trigger_lst = 10;
  total_size += 1 * this->trigger_lst_size();
  for (int i = 0; i < this->trigger_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trigger_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRedDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRedDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRedDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRedDBData::MergeFrom(const RoleRedDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  send_lst_.MergeFrom(from.send_lst_);
  wait_lst_.MergeFrom(from.wait_lst_);
  trigger_lst_.MergeFrom(from.trigger_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bdia()) {
      set_bdia(from.bdia());
    }
    if (from.has_magic()) {
      set_magic(from.magic());
    }
    if (from.has_todaynum()) {
      set_todaynum(from.todaynum());
    }
    if (from.has_todaymagic()) {
      set_todaymagic(from.todaymagic());
    }
    if (from.has_todaybdia()) {
      set_todaybdia(from.todaybdia());
    }
    if (from.has_freshtime()) {
      set_freshtime(from.freshtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRedDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRedDBData::CopyFrom(const RoleRedDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRedDBData::IsInitialized() const {

  return true;
}

void RoleRedDBData::Swap(RoleRedDBData* other) {
  if (other != this) {
    std::swap(bdia_, other->bdia_);
    std::swap(magic_, other->magic_);
    std::swap(todaynum_, other->todaynum_);
    std::swap(todaymagic_, other->todaymagic_);
    std::swap(todaybdia_, other->todaybdia_);
    std::swap(freshtime_, other->freshtime_);
    send_lst_.Swap(&other->send_lst_);
    wait_lst_.Swap(&other->wait_lst_);
    std::swap(cid_, other->cid_);
    trigger_lst_.Swap(&other->trigger_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRedDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRedDBData_descriptor_;
  metadata.reflection = RoleRedDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedFetchDBProto::kCidFieldNumber;
const int RedFetchDBProto::kValFieldNumber;
const int RedFetchDBProto::kTimeFieldNumber;
#endif  // !_MSC_VER

RedFetchDBProto::RedFetchDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedFetchDBProto::InitAsDefaultInstance() {
}

RedFetchDBProto::RedFetchDBProto(const RedFetchDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedFetchDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  val_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedFetchDBProto::~RedFetchDBProto() {
  SharedDtor();
}

void RedFetchDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedFetchDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedFetchDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedFetchDBProto_descriptor_;
}

const RedFetchDBProto& RedFetchDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RedFetchDBProto* RedFetchDBProto::default_instance_ = NULL;

RedFetchDBProto* RedFetchDBProto::New() const {
  return new RedFetchDBProto;
}

void RedFetchDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    val_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedFetchDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_val;
        break;
      }

      // optional uint32 val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_val:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &val_)));
          set_has_val();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedFetchDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->val(), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedFetchDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 val = 2;
  if (has_val()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->val(), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedFetchDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->val());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedFetchDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedFetchDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedFetchDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedFetchDBProto::MergeFrom(const RedFetchDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedFetchDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedFetchDBProto::CopyFrom(const RedFetchDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedFetchDBProto::IsInitialized() const {

  return true;
}

void RedFetchDBProto::Swap(RedFetchDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(val_, other->val_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedFetchDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedFetchDBProto_descriptor_;
  metadata.reflection = RedFetchDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedFetchListDBProto::kInfoFieldNumber;
#endif  // !_MSC_VER

RedFetchListDBProto::RedFetchListDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedFetchListDBProto::InitAsDefaultInstance() {
}

RedFetchListDBProto::RedFetchListDBProto(const RedFetchListDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedFetchListDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedFetchListDBProto::~RedFetchListDBProto() {
  SharedDtor();
}

void RedFetchListDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedFetchListDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedFetchListDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedFetchListDBProto_descriptor_;
}

const RedFetchListDBProto& RedFetchListDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RedFetchListDBProto* RedFetchListDBProto::default_instance_ = NULL;

RedFetchListDBProto* RedFetchListDBProto::New() const {
  return new RedFetchListDBProto;
}

void RedFetchListDBProto::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedFetchListDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RedFetchDBProto info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedFetchListDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RedFetchDBProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedFetchListDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RedFetchDBProto info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedFetchListDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.RedFetchDBProto info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedFetchListDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedFetchListDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedFetchListDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedFetchListDBProto::MergeFrom(const RedFetchListDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedFetchListDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedFetchListDBProto::CopyFrom(const RedFetchListDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedFetchListDBProto::IsInitialized() const {

  return true;
}

void RedFetchListDBProto::Swap(RedFetchListDBProto* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedFetchListDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedFetchListDBProto_descriptor_;
  metadata.reflection = RedFetchListDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedSendDBProto::kIdxFieldNumber;
const int RedSendDBProto::kCfgidFieldNumber;
const int RedSendDBProto::kSenderFieldNumber;
const int RedSendDBProto::kSendtimeFieldNumber;
const int RedSendDBProto::kWordFieldNumber;
const int RedSendDBProto::kFinishFieldNumber;
const int RedSendDBProto::kFetchFieldNumber;
#endif  // !_MSC_VER

RedSendDBProto::RedSendDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedSendDBProto::InitAsDefaultInstance() {
  fetch_ = const_cast< ::proto_ff::RedFetchListDBProto*>(&::proto_ff::RedFetchListDBProto::default_instance());
}

RedSendDBProto::RedSendDBProto(const RedSendDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedSendDBProto::SharedCtor() {
  _cached_size_ = 0;
  idx_ = 0u;
  cfgid_ = 0;
  sender_ = GOOGLE_ULONGLONG(0);
  sendtime_ = GOOGLE_ULONGLONG(0);
  word_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  finish_ = 0;
  fetch_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedSendDBProto::~RedSendDBProto() {
  SharedDtor();
}

void RedSendDBProto::SharedDtor() {
  if (word_ != &::google::protobuf::internal::kEmptyString) {
    delete word_;
  }
  if (this != default_instance_) {
    delete fetch_;
  }
}

void RedSendDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedSendDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedSendDBProto_descriptor_;
}

const RedSendDBProto& RedSendDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RedSendDBProto* RedSendDBProto::default_instance_ = NULL;

RedSendDBProto* RedSendDBProto::New() const {
  return new RedSendDBProto;
}

void RedSendDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idx_ = 0u;
    cfgid_ = 0;
    sender_ = GOOGLE_ULONGLONG(0);
    sendtime_ = GOOGLE_ULONGLONG(0);
    if (has_word()) {
      if (word_ != &::google::protobuf::internal::kEmptyString) {
        word_->clear();
      }
    }
    finish_ = 0;
    if (has_fetch()) {
      if (fetch_ != NULL) fetch_->::proto_ff::RedFetchListDBProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedSendDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 idx = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &idx_)));
          set_has_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // optional int32 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sender;
        break;
      }

      // optional uint64 sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sender_)));
          set_has_sender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sendtime;
        break;
      }

      // optional uint64 sendtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_word;
        break;
      }

      // optional bytes word = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_word:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_word()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_finish;
        break;
      }

      // optional int32 finish = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fetch;
        break;
      }

      // optional .proto_ff.RedFetchListDBProto fetch = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedSendDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->idx(), output);
  }

  // optional int32 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cfgid(), output);
  }

  // optional uint64 sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sender(), output);
  }

  // optional uint64 sendtime = 4;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->sendtime(), output);
  }

  // optional bytes word = 5;
  if (has_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->word(), output);
  }

  // optional int32 finish = 6;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->finish(), output);
  }

  // optional .proto_ff.RedFetchListDBProto fetch = 7;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->fetch(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedSendDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 idx = 1;
  if (has_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->idx(), target);
  }

  // optional int32 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cfgid(), target);
  }

  // optional uint64 sender = 3;
  if (has_sender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sender(), target);
  }

  // optional uint64 sendtime = 4;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->sendtime(), target);
  }

  // optional bytes word = 5;
  if (has_word()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->word(), target);
  }

  // optional int32 finish = 6;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->finish(), target);
  }

  // optional .proto_ff.RedFetchListDBProto fetch = 7;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->fetch(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedSendDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 idx = 1;
    if (has_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->idx());
    }

    // optional int32 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfgid());
    }

    // optional uint64 sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sender());
    }

    // optional uint64 sendtime = 4;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

    // optional bytes word = 5;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->word());
    }

    // optional int32 finish = 6;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }

    // optional .proto_ff.RedFetchListDBProto fetch = 7;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedSendDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedSendDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedSendDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedSendDBProto::MergeFrom(const RedSendDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idx()) {
      set_idx(from.idx());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
    if (from.has_fetch()) {
      mutable_fetch()->::proto_ff::RedFetchListDBProto::MergeFrom(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedSendDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedSendDBProto::CopyFrom(const RedSendDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedSendDBProto::IsInitialized() const {

  return true;
}

void RedSendDBProto::Swap(RedSendDBProto* other) {
  if (other != this) {
    std::swap(idx_, other->idx_);
    std::swap(cfgid_, other->cfgid_);
    std::swap(sender_, other->sender_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(word_, other->word_);
    std::swap(finish_, other->finish_);
    std::swap(fetch_, other->fetch_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedSendDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedSendDBProto_descriptor_;
  metadata.reflection = RedSendDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedDBData::kWaitFieldNumber;
const int RedDBData::kTriggerLstFieldNumber;
const int RedDBData::kFreshtimeFieldNumber;
const int RedDBData::kSendFieldNumber;
const int RedDBData::kFactionIdFieldNumber;
#endif  // !_MSC_VER

RedDBData::RedDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedDBData::InitAsDefaultInstance() {
}

RedDBData::RedDBData(const RedDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedDBData::SharedCtor() {
  _cached_size_ = 0;
  freshtime_ = GOOGLE_ULONGLONG(0);
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedDBData::~RedDBData() {
  SharedDtor();
}

void RedDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RedDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedDBData_descriptor_;
}

const RedDBData& RedDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RedDBData* RedDBData::default_instance_ = NULL;

RedDBData* RedDBData::New() const {
  return new RedDBData;
}

void RedDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    freshtime_ = GOOGLE_ULONGLONG(0);
    faction_id_ = 0u;
  }
  wait_.Clear();
  trigger_lst_.Clear();
  send_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RedWaitDBProto wait = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wait:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wait()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_wait;
        if (input->ExpectTag(18)) goto parse_trigger_lst;
        break;
      }

      // repeated .proto_ff.RedTriggerDBProto trigger_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trigger_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trigger_lst;
        if (input->ExpectTag(24)) goto parse_freshtime;
        break;
      }

      // optional uint64 freshtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_freshtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &freshtime_)));
          set_has_freshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_send;
        break;
      }

      // repeated .proto_ff.RedSendDBProto send = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_send:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_send()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_send;
        if (input->ExpectTag(40)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RedWaitDBProto wait = 1;
  for (int i = 0; i < this->wait_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wait(i), output);
  }

  // repeated .proto_ff.RedTriggerDBProto trigger_lst = 2;
  for (int i = 0; i < this->trigger_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trigger_lst(i), output);
  }

  // optional uint64 freshtime = 3;
  if (has_freshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->freshtime(), output);
  }

  // repeated .proto_ff.RedSendDBProto send = 4;
  for (int i = 0; i < this->send_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->send(i), output);
  }

  // optional uint32 faction_id = 5;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RedWaitDBProto wait = 1;
  for (int i = 0; i < this->wait_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wait(i), target);
  }

  // repeated .proto_ff.RedTriggerDBProto trigger_lst = 2;
  for (int i = 0; i < this->trigger_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trigger_lst(i), target);
  }

  // optional uint64 freshtime = 3;
  if (has_freshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->freshtime(), target);
  }

  // repeated .proto_ff.RedSendDBProto send = 4;
  for (int i = 0; i < this->send_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->send(i), target);
  }

  // optional uint32 faction_id = 5;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint64 freshtime = 3;
    if (has_freshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->freshtime());
    }

    // optional uint32 faction_id = 5;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  // repeated .proto_ff.RedWaitDBProto wait = 1;
  total_size += 1 * this->wait_size();
  for (int i = 0; i < this->wait_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wait(i));
  }

  // repeated .proto_ff.RedTriggerDBProto trigger_lst = 2;
  total_size += 1 * this->trigger_lst_size();
  for (int i = 0; i < this->trigger_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trigger_lst(i));
  }

  // repeated .proto_ff.RedSendDBProto send = 4;
  total_size += 1 * this->send_size();
  for (int i = 0; i < this->send_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->send(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedDBData::MergeFrom(const RedDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  wait_.MergeFrom(from.wait_);
  trigger_lst_.MergeFrom(from.trigger_lst_);
  send_.MergeFrom(from.send_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_freshtime()) {
      set_freshtime(from.freshtime());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedDBData::CopyFrom(const RedDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedDBData::IsInitialized() const {

  return true;
}

void RedDBData::Swap(RedDBData* other) {
  if (other != this) {
    wait_.Swap(&other->wait_);
    trigger_lst_.Swap(&other->trigger_lst_);
    std::swap(freshtime_, other->freshtime_);
    send_.Swap(&other->send_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedDBData_descriptor_;
  metadata.reflection = RedDBData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* RoleMirrorData_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMirrorData_Type_descriptor_;
}
bool RoleMirrorData_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RoleMirrorData_Type RoleMirrorData::Role;
const RoleMirrorData_Type RoleMirrorData::Rebot;
const RoleMirrorData_Type RoleMirrorData::TeamRole;
const RoleMirrorData_Type RoleMirrorData::TeamRebot;
const RoleMirrorData_Type RoleMirrorData::Type_MIN;
const RoleMirrorData_Type RoleMirrorData::Type_MAX;
const int RoleMirrorData::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RoleMirrorData::kCidFieldNumber;
const int RoleMirrorData::kTypeFieldNumber;
const int RoleMirrorData::kTeamidFieldNumber;
const int RoleMirrorData::kZidFieldNumber;
const int RoleMirrorData::kAttrFieldNumber;
const int RoleMirrorData::kSkillFieldNumber;
const int RoleMirrorData::kBaseFieldNumber;
const int RoleMirrorData::kEquipFieldNumber;
const int RoleMirrorData::kBeastEquipsFieldNumber;
const int RoleMirrorData::kBeastSlotsFieldNumber;
const int RoleMirrorData::kCampidFieldNumber;
#endif  // !_MSC_VER

RoleMirrorData::RoleMirrorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleMirrorData::InitAsDefaultInstance() {
  attr_ = const_cast< ::proto_ff::AttrDBData*>(&::proto_ff::AttrDBData::default_instance());
  skill_ = const_cast< ::proto_ff::SkillDBData*>(&::proto_ff::SkillDBData::default_instance());
  base_ = const_cast< ::proto_ff::RoleDBBaseData*>(&::proto_ff::RoleDBBaseData::default_instance());
  equip_ = const_cast< ::proto_ff::RoleDBEquipData*>(&::proto_ff::RoleDBEquipData::default_instance());
}

RoleMirrorData::RoleMirrorData(const RoleMirrorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleMirrorData::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  teamid_ = 0u;
  zid_ = 0u;
  attr_ = NULL;
  skill_ = NULL;
  base_ = NULL;
  equip_ = NULL;
  campid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleMirrorData::~RoleMirrorData() {
  SharedDtor();
}

void RoleMirrorData::SharedDtor() {
  if (this != default_instance_) {
    delete attr_;
    delete skill_;
    delete base_;
    delete equip_;
  }
}

void RoleMirrorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleMirrorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMirrorData_descriptor_;
}

const RoleMirrorData& RoleMirrorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleMirrorData* RoleMirrorData::default_instance_ = NULL;

RoleMirrorData* RoleMirrorData::New() const {
  return new RoleMirrorData;
}

void RoleMirrorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
    teamid_ = 0u;
    zid_ = 0u;
    if (has_attr()) {
      if (attr_ != NULL) attr_->::proto_ff::AttrDBData::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::proto_ff::SkillDBData::Clear();
    }
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::RoleDBBaseData::Clear();
    }
    if (has_equip()) {
      if (equip_ != NULL) equip_->::proto_ff::RoleDBEquipData::Clear();
    }
  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    campid_ = 0;
  }
  beast_equips_.Clear();
  beast_slots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleMirrorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional uint32 teamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_attr;
        break;
      }

      // optional .proto_ff.AttrDBData attr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_skill;
        break;
      }

      // optional .proto_ff.SkillDBData skill = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_base;
        break;
      }

      // optional .proto_ff.RoleDBBaseData base = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_equip;
        break;
      }

      // optional .proto_ff.RoleDBEquipData equip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_beast_equips;
        break;
      }

      // repeated .proto_ff.BestEQEquipInfo beast_equips = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beast_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beast_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_beast_equips;
        if (input->ExpectTag(82)) goto parse_beast_slots;
        break;
      }

      // repeated .proto_ff.BestEQSlotInfo beast_slots = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beast_slots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beast_slots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_beast_slots;
        if (input->ExpectTag(88)) goto parse_campid;
        break;
      }

      // optional int32 campid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_campid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &campid_)));
          set_has_campid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleMirrorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional uint32 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamid(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  // optional .proto_ff.AttrDBData attr = 5;
  if (has_attr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->attr(), output);
  }

  // optional .proto_ff.SkillDBData skill = 6;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->skill(), output);
  }

  // optional .proto_ff.RoleDBBaseData base = 7;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->base(), output);
  }

  // optional .proto_ff.RoleDBEquipData equip = 8;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->equip(), output);
  }

  // repeated .proto_ff.BestEQEquipInfo beast_equips = 9;
  for (int i = 0; i < this->beast_equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->beast_equips(i), output);
  }

  // repeated .proto_ff.BestEQSlotInfo beast_slots = 10;
  for (int i = 0; i < this->beast_slots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->beast_slots(i), output);
  }

  // optional int32 campid = 11;
  if (has_campid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->campid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleMirrorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional uint32 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamid(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  // optional .proto_ff.AttrDBData attr = 5;
  if (has_attr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->attr(), target);
  }

  // optional .proto_ff.SkillDBData skill = 6;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->skill(), target);
  }

  // optional .proto_ff.RoleDBBaseData base = 7;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->base(), target);
  }

  // optional .proto_ff.RoleDBEquipData equip = 8;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->equip(), target);
  }

  // repeated .proto_ff.BestEQEquipInfo beast_equips = 9;
  for (int i = 0; i < this->beast_equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->beast_equips(i), target);
  }

  // repeated .proto_ff.BestEQSlotInfo beast_slots = 10;
  for (int i = 0; i < this->beast_slots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->beast_slots(i), target);
  }

  // optional int32 campid = 11;
  if (has_campid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->campid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleMirrorData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional uint32 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional .proto_ff.AttrDBData attr = 5;
    if (has_attr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attr());
    }

    // optional .proto_ff.SkillDBData skill = 6;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .proto_ff.RoleDBBaseData base = 7;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .proto_ff.RoleDBEquipData equip = 8;
    if (has_equip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

  }
  if (_has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    // optional int32 campid = 11;
    if (has_campid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->campid());
    }

  }
  // repeated .proto_ff.BestEQEquipInfo beast_equips = 9;
  total_size += 1 * this->beast_equips_size();
  for (int i = 0; i < this->beast_equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beast_equips(i));
  }

  // repeated .proto_ff.BestEQSlotInfo beast_slots = 10;
  total_size += 1 * this->beast_slots_size();
  for (int i = 0; i < this->beast_slots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beast_slots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleMirrorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleMirrorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleMirrorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleMirrorData::MergeFrom(const RoleMirrorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  beast_equips_.MergeFrom(from.beast_equips_);
  beast_slots_.MergeFrom(from.beast_slots_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_attr()) {
      mutable_attr()->::proto_ff::AttrDBData::MergeFrom(from.attr());
    }
    if (from.has_skill()) {
      mutable_skill()->::proto_ff::SkillDBData::MergeFrom(from.skill());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::RoleDBBaseData::MergeFrom(from.base());
    }
    if (from.has_equip()) {
      mutable_equip()->::proto_ff::RoleDBEquipData::MergeFrom(from.equip());
    }
  }
  if (from._has_bits_[10 / 32] & (0xffu << (10 % 32))) {
    if (from.has_campid()) {
      set_campid(from.campid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleMirrorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMirrorData::CopyFrom(const RoleMirrorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMirrorData::IsInitialized() const {

  if (has_attr()) {
    if (!this->attr().IsInitialized()) return false;
  }
  if (has_base()) {
    if (!this->base().IsInitialized()) return false;
  }
  if (has_equip()) {
    if (!this->equip().IsInitialized()) return false;
  }
  for (int i = 0; i < beast_slots_size(); i++) {
    if (!this->beast_slots(i).IsInitialized()) return false;
  }
  return true;
}

void RoleMirrorData::Swap(RoleMirrorData* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(teamid_, other->teamid_);
    std::swap(zid_, other->zid_);
    std::swap(attr_, other->attr_);
    std::swap(skill_, other->skill_);
    std::swap(base_, other->base_);
    std::swap(equip_, other->equip_);
    beast_equips_.Swap(&other->beast_equips_);
    beast_slots_.Swap(&other->beast_slots_);
    std::swap(campid_, other->campid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleMirrorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleMirrorData_descriptor_;
  metadata.reflection = RoleMirrorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMemDBProto::kCidFieldNumber;
const int FactionMemDBProto::kDutyFieldNumber;
const int FactionMemDBProto::kJoinTimeFieldNumber;
const int FactionMemDBProto::kTotalContriFieldNumber;
#endif  // !_MSC_VER

FactionMemDBProto::FactionMemDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMemDBProto::InitAsDefaultInstance() {
}

FactionMemDBProto::FactionMemDBProto(const FactionMemDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMemDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  duty_ = 0;
  join_time_ = GOOGLE_ULONGLONG(0);
  total_contri_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMemDBProto::~FactionMemDBProto() {
  SharedDtor();
}

void FactionMemDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMemDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMemDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMemDBProto_descriptor_;
}

const FactionMemDBProto& FactionMemDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionMemDBProto* FactionMemDBProto::default_instance_ = NULL;

FactionMemDBProto* FactionMemDBProto::New() const {
  return new FactionMemDBProto;
}

void FactionMemDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    duty_ = 0;
    join_time_ = GOOGLE_ULONGLONG(0);
    total_contri_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMemDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_duty;
        break;
      }

      // optional int32 duty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_join_time;
        break;
      }

      // optional uint64 join_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_join_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &join_time_)));
          set_has_join_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_total_contri;
        break;
      }

      // optional uint32 total_contri = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_contri_)));
          set_has_total_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMemDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->duty(), output);
  }

  // optional uint64 join_time = 3;
  if (has_join_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->join_time(), output);
  }

  // optional uint32 total_contri = 4;
  if (has_total_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->total_contri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMemDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 duty = 2;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->duty(), target);
  }

  // optional uint64 join_time = 3;
  if (has_join_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->join_time(), target);
  }

  // optional uint32 total_contri = 4;
  if (has_total_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->total_contri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMemDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 duty = 2;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

    // optional uint64 join_time = 3;
    if (has_join_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->join_time());
    }

    // optional uint32 total_contri = 4;
    if (has_total_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_contri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMemDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMemDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMemDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMemDBProto::MergeFrom(const FactionMemDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
    if (from.has_join_time()) {
      set_join_time(from.join_time());
    }
    if (from.has_total_contri()) {
      set_total_contri(from.total_contri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMemDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMemDBProto::CopyFrom(const FactionMemDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMemDBProto::IsInitialized() const {

  return true;
}

void FactionMemDBProto::Swap(FactionMemDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(duty_, other->duty_);
    std::swap(join_time_, other->join_time_);
    std::swap(total_contri_, other->total_contri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMemDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMemDBProto_descriptor_;
  metadata.reflection = FactionMemDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMultMemDBProto::kMemLstFieldNumber;
#endif  // !_MSC_VER

FactionMultMemDBProto::FactionMultMemDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMultMemDBProto::InitAsDefaultInstance() {
}

FactionMultMemDBProto::FactionMultMemDBProto(const FactionMultMemDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMultMemDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMultMemDBProto::~FactionMultMemDBProto() {
  SharedDtor();
}

void FactionMultMemDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMultMemDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMultMemDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMultMemDBProto_descriptor_;
}

const FactionMultMemDBProto& FactionMultMemDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionMultMemDBProto* FactionMultMemDBProto::default_instance_ = NULL;

FactionMultMemDBProto* FactionMultMemDBProto::New() const {
  return new FactionMultMemDBProto;
}

void FactionMultMemDBProto::Clear() {
  mem_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMultMemDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionMemDBProto mem_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mem_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mem_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mem_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMultMemDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionMemDBProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mem_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMultMemDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionMemDBProto mem_lst = 1;
  for (int i = 0; i < this->mem_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mem_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMultMemDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionMemDBProto mem_lst = 1;
  total_size += 1 * this->mem_lst_size();
  for (int i = 0; i < this->mem_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mem_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMultMemDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMultMemDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMultMemDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMultMemDBProto::MergeFrom(const FactionMultMemDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  mem_lst_.MergeFrom(from.mem_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMultMemDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMultMemDBProto::CopyFrom(const FactionMultMemDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMultMemDBProto::IsInitialized() const {

  return true;
}

void FactionMultMemDBProto::Swap(FactionMultMemDBProto* other) {
  if (other != this) {
    mem_lst_.Swap(&other->mem_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMultMemDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMultMemDBProto_descriptor_;
  metadata.reflection = FactionMultMemDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionApplyDBProto::kCidFieldNumber;
const int FactionApplyDBProto::kTimeFieldNumber;
#endif  // !_MSC_VER

FactionApplyDBProto::FactionApplyDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionApplyDBProto::InitAsDefaultInstance() {
}

FactionApplyDBProto::FactionApplyDBProto(const FactionApplyDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionApplyDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionApplyDBProto::~FactionApplyDBProto() {
  SharedDtor();
}

void FactionApplyDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionApplyDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionApplyDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionApplyDBProto_descriptor_;
}

const FactionApplyDBProto& FactionApplyDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionApplyDBProto* FactionApplyDBProto::default_instance_ = NULL;

FactionApplyDBProto* FactionApplyDBProto::New() const {
  return new FactionApplyDBProto;
}

void FactionApplyDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionApplyDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionApplyDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionApplyDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionApplyDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionApplyDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionApplyDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionApplyDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionApplyDBProto::MergeFrom(const FactionApplyDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionApplyDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionApplyDBProto::CopyFrom(const FactionApplyDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionApplyDBProto::IsInitialized() const {

  return true;
}

void FactionApplyDBProto::Swap(FactionApplyDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionApplyDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionApplyDBProto_descriptor_;
  metadata.reflection = FactionApplyDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMultApplyDBProto::kApplyLstFieldNumber;
#endif  // !_MSC_VER

FactionMultApplyDBProto::FactionMultApplyDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMultApplyDBProto::InitAsDefaultInstance() {
}

FactionMultApplyDBProto::FactionMultApplyDBProto(const FactionMultApplyDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMultApplyDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMultApplyDBProto::~FactionMultApplyDBProto() {
  SharedDtor();
}

void FactionMultApplyDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMultApplyDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMultApplyDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMultApplyDBProto_descriptor_;
}

const FactionMultApplyDBProto& FactionMultApplyDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionMultApplyDBProto* FactionMultApplyDBProto::default_instance_ = NULL;

FactionMultApplyDBProto* FactionMultApplyDBProto::New() const {
  return new FactionMultApplyDBProto;
}

void FactionMultApplyDBProto::Clear() {
  apply_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMultApplyDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_apply_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_apply_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMultApplyDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->apply_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMultApplyDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
  for (int i = 0; i < this->apply_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->apply_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMultApplyDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionApplyDBProto apply_lst = 1;
  total_size += 1 * this->apply_lst_size();
  for (int i = 0; i < this->apply_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->apply_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMultApplyDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMultApplyDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMultApplyDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMultApplyDBProto::MergeFrom(const FactionMultApplyDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  apply_lst_.MergeFrom(from.apply_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMultApplyDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMultApplyDBProto::CopyFrom(const FactionMultApplyDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMultApplyDBProto::IsInitialized() const {

  return true;
}

void FactionMultApplyDBProto::Swap(FactionMultApplyDBProto* other) {
  if (other != this) {
    apply_lst_.Swap(&other->apply_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMultApplyDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMultApplyDBProto_descriptor_;
  metadata.reflection = FactionMultApplyDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionRecordDBProto::kCidFieldNumber;
const int FactionRecordDBProto::kTimeFieldNumber;
const int FactionRecordDBProto::kOpFieldNumber;
const int FactionRecordDBProto::kParam1FieldNumber;
#endif  // !_MSC_VER

FactionRecordDBProto::FactionRecordDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRecordDBProto::InitAsDefaultInstance() {
}

FactionRecordDBProto::FactionRecordDBProto(const FactionRecordDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRecordDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  op_ = 0;
  param1_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRecordDBProto::~FactionRecordDBProto() {
  SharedDtor();
}

void FactionRecordDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionRecordDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRecordDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRecordDBProto_descriptor_;
}

const FactionRecordDBProto& FactionRecordDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionRecordDBProto* FactionRecordDBProto::default_instance_ = NULL;

FactionRecordDBProto* FactionRecordDBProto::New() const {
  return new FactionRecordDBProto;
}

void FactionRecordDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
    op_ = 0;
    param1_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRecordDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // optional int32 op = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_param1;
        break;
      }

      // optional int64 param1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &param1_)));
          set_has_param1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionRecordDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional int32 op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->op(), output);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->param1(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRecordDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional int32 op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->op(), target);
  }

  // optional int64 param1 = 4;
  if (has_param1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->param1(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRecordDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional int64 param1 = 4;
    if (has_param1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->param1());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRecordDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRecordDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRecordDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRecordDBProto::MergeFrom(const FactionRecordDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_param1()) {
      set_param1(from.param1());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRecordDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRecordDBProto::CopyFrom(const FactionRecordDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRecordDBProto::IsInitialized() const {

  return true;
}

void FactionRecordDBProto::Swap(FactionRecordDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(time_, other->time_);
    std::swap(op_, other->op_);
    std::swap(param1_, other->param1_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRecordDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRecordDBProto_descriptor_;
  metadata.reflection = FactionRecordDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMutRecordDBProto::kRecordLstFieldNumber;
#endif  // !_MSC_VER

FactionMutRecordDBProto::FactionMutRecordDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMutRecordDBProto::InitAsDefaultInstance() {
}

FactionMutRecordDBProto::FactionMutRecordDBProto(const FactionMutRecordDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMutRecordDBProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMutRecordDBProto::~FactionMutRecordDBProto() {
  SharedDtor();
}

void FactionMutRecordDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMutRecordDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMutRecordDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMutRecordDBProto_descriptor_;
}

const FactionMutRecordDBProto& FactionMutRecordDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionMutRecordDBProto* FactionMutRecordDBProto::default_instance_ = NULL;

FactionMutRecordDBProto* FactionMutRecordDBProto::New() const {
  return new FactionMutRecordDBProto;
}

void FactionMutRecordDBProto::Clear() {
  record_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMutRecordDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionRecordDBProto record_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_record_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_record_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMutRecordDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionRecordDBProto record_lst = 1;
  for (int i = 0; i < this->record_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->record_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMutRecordDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionRecordDBProto record_lst = 1;
  for (int i = 0; i < this->record_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->record_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMutRecordDBProto::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionRecordDBProto record_lst = 1;
  total_size += 1 * this->record_lst_size();
  for (int i = 0; i < this->record_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->record_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMutRecordDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMutRecordDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMutRecordDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMutRecordDBProto::MergeFrom(const FactionMutRecordDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  record_lst_.MergeFrom(from.record_lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMutRecordDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMutRecordDBProto::CopyFrom(const FactionMutRecordDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMutRecordDBProto::IsInitialized() const {

  return true;
}

void FactionMutRecordDBProto::Swap(FactionMutRecordDBProto* other) {
  if (other != this) {
    record_lst_.Swap(&other->record_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMutRecordDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMutRecordDBProto_descriptor_;
  metadata.reflection = FactionMutRecordDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBBase::kFactionIdFieldNumber;
const int FactionDBBase::kNameFieldNumber;
const int FactionDBBase::kLeaderIdFieldNumber;
const int FactionDBBase::kFightFieldNumber;
const int FactionDBBase::kNoticeFieldNumber;
const int FactionDBBase::kLastNoticeTimeFieldNumber;
const int FactionDBBase::kLevelFieldNumber;
const int FactionDBBase::kExpFieldNumber;
const int FactionDBBase::kCreateTimeFieldNumber;
const int FactionDBBase::kProxyIdFieldNumber;
const int FactionDBBase::kProxyTimeFieldNumber;
const int FactionDBBase::kGradeFieldNumber;
const int FactionDBBase::kMemberFieldNumber;
const int FactionDBBase::kApplyFieldNumber;
const int FactionDBBase::kRecordFieldNumber;
const int FactionDBBase::kApplyTypeFieldNumber;
const int FactionDBBase::kApplyLevFieldNumber;
const int FactionDBBase::kApplyFightFieldNumber;
#endif  // !_MSC_VER

FactionDBBase::FactionDBBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBBase::InitAsDefaultInstance() {
  member_ = const_cast< ::proto_ff::FactionMultMemDBProto*>(&::proto_ff::FactionMultMemDBProto::default_instance());
  apply_ = const_cast< ::proto_ff::FactionMultApplyDBProto*>(&::proto_ff::FactionMultApplyDBProto::default_instance());
  record_ = const_cast< ::proto_ff::FactionMutRecordDBProto*>(&::proto_ff::FactionMutRecordDBProto::default_instance());
}

FactionDBBase::FactionDBBase(const FactionDBBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBBase::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leader_id_ = GOOGLE_ULONGLONG(0);
  fight_ = GOOGLE_ULONGLONG(0);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  last_notice_time_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  exp_ = GOOGLE_ULONGLONG(0);
  create_time_ = GOOGLE_ULONGLONG(0);
  proxy_id_ = GOOGLE_ULONGLONG(0);
  proxy_time_ = GOOGLE_ULONGLONG(0);
  grade_ = 0;
  member_ = NULL;
  apply_ = NULL;
  record_ = NULL;
  apply_type_ = 0;
  apply_lev_ = 0;
  apply_fight_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBBase::~FactionDBBase() {
  SharedDtor();
}

void FactionDBBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
    delete member_;
    delete apply_;
    delete record_;
  }
}

void FactionDBBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBBase_descriptor_;
}

const FactionDBBase& FactionDBBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBBase* FactionDBBase::default_instance_ = NULL;

FactionDBBase* FactionDBBase::New() const {
  return new FactionDBBase;
}

void FactionDBBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    leader_id_ = GOOGLE_ULONGLONG(0);
    fight_ = GOOGLE_ULONGLONG(0);
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    last_notice_time_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
    exp_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    create_time_ = GOOGLE_ULONGLONG(0);
    proxy_id_ = GOOGLE_ULONGLONG(0);
    proxy_time_ = GOOGLE_ULONGLONG(0);
    grade_ = 0;
    if (has_member()) {
      if (member_ != NULL) member_->::proto_ff::FactionMultMemDBProto::Clear();
    }
    if (has_apply()) {
      if (apply_ != NULL) apply_->::proto_ff::FactionMultApplyDBProto::Clear();
    }
    if (has_record()) {
      if (record_ != NULL) record_->::proto_ff::FactionMutRecordDBProto::Clear();
    }
    apply_type_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    apply_lev_ = 0;
    apply_fight_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_leader_id;
        break;
      }

      // optional uint64 leader_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leader_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leader_id_)));
          set_has_leader_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_notice;
        break;
      }

      // optional bytes notice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_last_notice_time;
        break;
      }

      // optional uint64 last_notice_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_notice_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_notice_time_)));
          set_has_last_notice_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_level;
        break;
      }

      // optional uint32 level = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_exp;
        break;
      }

      // optional uint64 exp = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_create_time;
        break;
      }

      // optional uint64 create_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &create_time_)));
          set_has_create_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_proxy_id;
        break;
      }

      // optional uint64 proxy_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proxy_id_)));
          set_has_proxy_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_proxy_time;
        break;
      }

      // optional uint64 proxy_time = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proxy_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proxy_time_)));
          set_has_proxy_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_grade;
        break;
      }

      // optional int32 grade = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_grade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grade_)));
          set_has_grade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_member;
        break;
      }

      // optional .proto_ff.FactionMultMemDBProto member = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_apply;
        break;
      }

      // optional .proto_ff.FactionMultApplyDBProto apply = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_record;
        break;
      }

      // optional .proto_ff.FactionMutRecordDBProto record = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_record:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_record()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_apply_type;
        break;
      }

      // optional int32 apply_type = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_type_)));
          set_has_apply_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_apply_lev;
        break;
      }

      // optional int32 apply_lev = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_lev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apply_lev_)));
          set_has_apply_lev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_apply_fight;
        break;
      }

      // optional uint64 apply_fight = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_apply_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_fight_)));
          set_has_apply_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint64 leader_id = 3;
  if (has_leader_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->leader_id(), output);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->fight(), output);
  }

  // optional bytes notice = 5;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->notice(), output);
  }

  // optional uint64 last_notice_time = 6;
  if (has_last_notice_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->last_notice_time(), output);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->level(), output);
  }

  // optional uint64 exp = 8;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->exp(), output);
  }

  // optional uint64 create_time = 9;
  if (has_create_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->create_time(), output);
  }

  // optional uint64 proxy_id = 10;
  if (has_proxy_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->proxy_id(), output);
  }

  // optional uint64 proxy_time = 11;
  if (has_proxy_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->proxy_time(), output);
  }

  // optional int32 grade = 12;
  if (has_grade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->grade(), output);
  }

  // optional .proto_ff.FactionMultMemDBProto member = 13;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->member(), output);
  }

  // optional .proto_ff.FactionMultApplyDBProto apply = 14;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->apply(), output);
  }

  // optional .proto_ff.FactionMutRecordDBProto record = 15;
  if (has_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->record(), output);
  }

  // optional int32 apply_type = 16;
  if (has_apply_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->apply_type(), output);
  }

  // optional int32 apply_lev = 17;
  if (has_apply_lev()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->apply_lev(), output);
  }

  // optional uint64 apply_fight = 18;
  if (has_apply_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->apply_fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint64 leader_id = 3;
  if (has_leader_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->leader_id(), target);
  }

  // optional uint64 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->fight(), target);
  }

  // optional bytes notice = 5;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->notice(), target);
  }

  // optional uint64 last_notice_time = 6;
  if (has_last_notice_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->last_notice_time(), target);
  }

  // optional uint32 level = 7;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->level(), target);
  }

  // optional uint64 exp = 8;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->exp(), target);
  }

  // optional uint64 create_time = 9;
  if (has_create_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->create_time(), target);
  }

  // optional uint64 proxy_id = 10;
  if (has_proxy_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->proxy_id(), target);
  }

  // optional uint64 proxy_time = 11;
  if (has_proxy_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->proxy_time(), target);
  }

  // optional int32 grade = 12;
  if (has_grade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->grade(), target);
  }

  // optional .proto_ff.FactionMultMemDBProto member = 13;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->member(), target);
  }

  // optional .proto_ff.FactionMultApplyDBProto apply = 14;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->apply(), target);
  }

  // optional .proto_ff.FactionMutRecordDBProto record = 15;
  if (has_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->record(), target);
  }

  // optional int32 apply_type = 16;
  if (has_apply_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->apply_type(), target);
  }

  // optional int32 apply_lev = 17;
  if (has_apply_lev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->apply_lev(), target);
  }

  // optional uint64 apply_fight = 18;
  if (has_apply_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->apply_fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 leader_id = 3;
    if (has_leader_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->leader_id());
    }

    // optional uint64 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional bytes notice = 5;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

    // optional uint64 last_notice_time = 6;
    if (has_last_notice_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_notice_time());
    }

    // optional uint32 level = 7;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint64 exp = 8;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->exp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint64 create_time = 9;
    if (has_create_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->create_time());
    }

    // optional uint64 proxy_id = 10;
    if (has_proxy_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proxy_id());
    }

    // optional uint64 proxy_time = 11;
    if (has_proxy_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proxy_time());
    }

    // optional int32 grade = 12;
    if (has_grade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grade());
    }

    // optional .proto_ff.FactionMultMemDBProto member = 13;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

    // optional .proto_ff.FactionMultApplyDBProto apply = 14;
    if (has_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply());
    }

    // optional .proto_ff.FactionMutRecordDBProto record = 15;
    if (has_record()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->record());
    }

    // optional int32 apply_type = 16;
    if (has_apply_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_type());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 apply_lev = 17;
    if (has_apply_lev()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->apply_lev());
    }

    // optional uint64 apply_fight = 18;
    if (has_apply_fight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBBase::MergeFrom(const FactionDBBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_leader_id()) {
      set_leader_id(from.leader_id());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_last_notice_time()) {
      set_last_notice_time(from.last_notice_time());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_create_time()) {
      set_create_time(from.create_time());
    }
    if (from.has_proxy_id()) {
      set_proxy_id(from.proxy_id());
    }
    if (from.has_proxy_time()) {
      set_proxy_time(from.proxy_time());
    }
    if (from.has_grade()) {
      set_grade(from.grade());
    }
    if (from.has_member()) {
      mutable_member()->::proto_ff::FactionMultMemDBProto::MergeFrom(from.member());
    }
    if (from.has_apply()) {
      mutable_apply()->::proto_ff::FactionMultApplyDBProto::MergeFrom(from.apply());
    }
    if (from.has_record()) {
      mutable_record()->::proto_ff::FactionMutRecordDBProto::MergeFrom(from.record());
    }
    if (from.has_apply_type()) {
      set_apply_type(from.apply_type());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_apply_lev()) {
      set_apply_lev(from.apply_lev());
    }
    if (from.has_apply_fight()) {
      set_apply_fight(from.apply_fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBBase::CopyFrom(const FactionDBBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBBase::IsInitialized() const {

  return true;
}

void FactionDBBase::Swap(FactionDBBase* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(leader_id_, other->leader_id_);
    std::swap(fight_, other->fight_);
    std::swap(notice_, other->notice_);
    std::swap(last_notice_time_, other->last_notice_time_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(create_time_, other->create_time_);
    std::swap(proxy_id_, other->proxy_id_);
    std::swap(proxy_time_, other->proxy_time_);
    std::swap(grade_, other->grade_);
    std::swap(member_, other->member_);
    std::swap(apply_, other->apply_);
    std::swap(record_, other->record_);
    std::swap(apply_type_, other->apply_type_);
    std::swap(apply_lev_, other->apply_lev_);
    std::swap(apply_fight_, other->apply_fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBBase_descriptor_;
  metadata.reflection = FactionDBBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionBeastHarmDBProto::kCidFieldNumber;
const int FactionBeastHarmDBProto::kHarmFieldNumber;
#endif  // !_MSC_VER

FactionBeastHarmDBProto::FactionBeastHarmDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionBeastHarmDBProto::InitAsDefaultInstance() {
}

FactionBeastHarmDBProto::FactionBeastHarmDBProto(const FactionBeastHarmDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionBeastHarmDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  harm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionBeastHarmDBProto::~FactionBeastHarmDBProto() {
  SharedDtor();
}

void FactionBeastHarmDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionBeastHarmDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionBeastHarmDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionBeastHarmDBProto_descriptor_;
}

const FactionBeastHarmDBProto& FactionBeastHarmDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionBeastHarmDBProto* FactionBeastHarmDBProto::default_instance_ = NULL;

FactionBeastHarmDBProto* FactionBeastHarmDBProto::New() const {
  return new FactionBeastHarmDBProto;
}

void FactionBeastHarmDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    harm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionBeastHarmDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_harm;
        break;
      }

      // optional int64 harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionBeastHarmDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int64 harm = 2;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionBeastHarmDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int64 harm = 2;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionBeastHarmDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int64 harm = 2;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionBeastHarmDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionBeastHarmDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionBeastHarmDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionBeastHarmDBProto::MergeFrom(const FactionBeastHarmDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionBeastHarmDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionBeastHarmDBProto::CopyFrom(const FactionBeastHarmDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionBeastHarmDBProto::IsInitialized() const {

  return true;
}

void FactionBeastHarmDBProto::Swap(FactionBeastHarmDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionBeastHarmDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionBeastHarmDBProto_descriptor_;
  metadata.reflection = FactionBeastHarmDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionBeastDBData::kHarmFieldNumber;
const int FactionBeastDBData::kStarFieldNumber;
const int FactionBeastDBData::kIsOpenFieldNumber;
const int FactionBeastDBData::kTributeFieldNumber;
const int FactionBeastDBData::kTodayCountFieldNumber;
const int FactionBeastDBData::kTodayFreshFieldNumber;
const int FactionBeastDBData::kWeekCountFieldNumber;
const int FactionBeastDBData::kWeekFreshFieldNumber;
const int FactionBeastDBData::kLevelFieldNumber;
const int FactionBeastDBData::kOpentimeFieldNumber;
#endif  // !_MSC_VER

FactionBeastDBData::FactionBeastDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionBeastDBData::InitAsDefaultInstance() {
}

FactionBeastDBData::FactionBeastDBData(const FactionBeastDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionBeastDBData::SharedCtor() {
  _cached_size_ = 0;
  star_ = 0u;
  is_open_ = 0;
  tribute_ = 0u;
  today_count_ = 0u;
  today_fresh_ = GOOGLE_ULONGLONG(0);
  week_count_ = 0u;
  week_fresh_ = GOOGLE_ULONGLONG(0);
  level_ = 0;
  opentime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionBeastDBData::~FactionBeastDBData() {
  SharedDtor();
}

void FactionBeastDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionBeastDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionBeastDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionBeastDBData_descriptor_;
}

const FactionBeastDBData& FactionBeastDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionBeastDBData* FactionBeastDBData::default_instance_ = NULL;

FactionBeastDBData* FactionBeastDBData::New() const {
  return new FactionBeastDBData;
}

void FactionBeastDBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    star_ = 0u;
    is_open_ = 0;
    tribute_ = 0u;
    today_count_ = 0u;
    today_fresh_ = GOOGLE_ULONGLONG(0);
    week_count_ = 0u;
    week_fresh_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    level_ = 0;
    opentime_ = GOOGLE_ULONGLONG(0);
  }
  harm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionBeastDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionBeastHarmDBProto harm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_harm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_harm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_harm;
        if (input->ExpectTag(16)) goto parse_star;
        break;
      }

      // optional uint32 star = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_open;
        break;
      }

      // optional int32 is_open = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_open:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_open_)));
          set_has_is_open();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_tribute;
        break;
      }

      // optional uint32 tribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tribute_)));
          set_has_tribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_today_count;
        break;
      }

      // optional uint32 today_count = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &today_count_)));
          set_has_today_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_today_fresh;
        break;
      }

      // optional uint64 today_fresh = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_today_fresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &today_fresh_)));
          set_has_today_fresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_week_count;
        break;
      }

      // optional uint32 week_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &week_count_)));
          set_has_week_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_week_fresh;
        break;
      }

      // optional uint64 week_fresh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_week_fresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_fresh_)));
          set_has_week_fresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_level;
        break;
      }

      // optional int32 level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_opentime;
        break;
      }

      // optional uint64 opentime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opentime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionBeastDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionBeastHarmDBProto harm = 1;
  for (int i = 0; i < this->harm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->harm(i), output);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->star(), output);
  }

  // optional int32 is_open = 3;
  if (has_is_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->is_open(), output);
  }

  // optional uint32 tribute = 4;
  if (has_tribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tribute(), output);
  }

  // optional uint32 today_count = 5;
  if (has_today_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->today_count(), output);
  }

  // optional uint64 today_fresh = 6;
  if (has_today_fresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->today_fresh(), output);
  }

  // optional uint32 week_count = 7;
  if (has_week_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->week_count(), output);
  }

  // optional uint64 week_fresh = 8;
  if (has_week_fresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->week_fresh(), output);
  }

  // optional int32 level = 9;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->level(), output);
  }

  // optional uint64 opentime = 10;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->opentime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionBeastDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionBeastHarmDBProto harm = 1;
  for (int i = 0; i < this->harm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->harm(i), target);
  }

  // optional uint32 star = 2;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->star(), target);
  }

  // optional int32 is_open = 3;
  if (has_is_open()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->is_open(), target);
  }

  // optional uint32 tribute = 4;
  if (has_tribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tribute(), target);
  }

  // optional uint32 today_count = 5;
  if (has_today_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->today_count(), target);
  }

  // optional uint64 today_fresh = 6;
  if (has_today_fresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->today_fresh(), target);
  }

  // optional uint32 week_count = 7;
  if (has_week_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->week_count(), target);
  }

  // optional uint64 week_fresh = 8;
  if (has_week_fresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->week_fresh(), target);
  }

  // optional int32 level = 9;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->level(), target);
  }

  // optional uint64 opentime = 10;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->opentime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionBeastDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 star = 2;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->star());
    }

    // optional int32 is_open = 3;
    if (has_is_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_open());
    }

    // optional uint32 tribute = 4;
    if (has_tribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tribute());
    }

    // optional uint32 today_count = 5;
    if (has_today_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->today_count());
    }

    // optional uint64 today_fresh = 6;
    if (has_today_fresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->today_fresh());
    }

    // optional uint32 week_count = 7;
    if (has_week_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->week_count());
    }

    // optional uint64 week_fresh = 8;
    if (has_week_fresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_fresh());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 level = 9;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional uint64 opentime = 10;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->opentime());
    }

  }
  // repeated .proto_ff.FactionBeastHarmDBProto harm = 1;
  total_size += 1 * this->harm_size();
  for (int i = 0; i < this->harm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->harm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionBeastDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionBeastDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionBeastDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionBeastDBData::MergeFrom(const FactionBeastDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  harm_.MergeFrom(from.harm_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_is_open()) {
      set_is_open(from.is_open());
    }
    if (from.has_tribute()) {
      set_tribute(from.tribute());
    }
    if (from.has_today_count()) {
      set_today_count(from.today_count());
    }
    if (from.has_today_fresh()) {
      set_today_fresh(from.today_fresh());
    }
    if (from.has_week_count()) {
      set_week_count(from.week_count());
    }
    if (from.has_week_fresh()) {
      set_week_fresh(from.week_fresh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionBeastDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionBeastDBData::CopyFrom(const FactionBeastDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionBeastDBData::IsInitialized() const {

  return true;
}

void FactionBeastDBData::Swap(FactionBeastDBData* other) {
  if (other != this) {
    harm_.Swap(&other->harm_);
    std::swap(star_, other->star_);
    std::swap(is_open_, other->is_open_);
    std::swap(tribute_, other->tribute_);
    std::swap(today_count_, other->today_count_);
    std::swap(today_fresh_, other->today_fresh_);
    std::swap(week_count_, other->week_count_);
    std::swap(week_fresh_, other->week_fresh_);
    std::swap(level_, other->level_);
    std::swap(opentime_, other->opentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionBeastDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionBeastDBData_descriptor_;
  metadata.reflection = FactionBeastDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionGuardHarmDBProto::kCidFieldNumber;
const int FactionGuardHarmDBProto::kNameFieldNumber;
const int FactionGuardHarmDBProto::kHarmFieldNumber;
#endif  // !_MSC_VER

FactionGuardHarmDBProto::FactionGuardHarmDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionGuardHarmDBProto::InitAsDefaultInstance() {
}

FactionGuardHarmDBProto::FactionGuardHarmDBProto(const FactionGuardHarmDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionGuardHarmDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  harm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionGuardHarmDBProto::~FactionGuardHarmDBProto() {
  SharedDtor();
}

void FactionGuardHarmDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionGuardHarmDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionGuardHarmDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionGuardHarmDBProto_descriptor_;
}

const FactionGuardHarmDBProto& FactionGuardHarmDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionGuardHarmDBProto* FactionGuardHarmDBProto::default_instance_ = NULL;

FactionGuardHarmDBProto* FactionGuardHarmDBProto::New() const {
  return new FactionGuardHarmDBProto;
}

void FactionGuardHarmDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    harm_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionGuardHarmDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm;
        break;
      }

      // optional int64 harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionGuardHarmDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionGuardHarmDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int64 harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionGuardHarmDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int64 harm = 3;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->harm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionGuardHarmDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionGuardHarmDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionGuardHarmDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionGuardHarmDBProto::MergeFrom(const FactionGuardHarmDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionGuardHarmDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionGuardHarmDBProto::CopyFrom(const FactionGuardHarmDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionGuardHarmDBProto::IsInitialized() const {

  return true;
}

void FactionGuardHarmDBProto::Swap(FactionGuardHarmDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionGuardHarmDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionGuardHarmDBProto_descriptor_;
  metadata.reflection = FactionGuardHarmDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionGuardDBData::kHarmFieldNumber;
const int FactionGuardDBData::kOldHarmFieldNumber;
const int FactionGuardDBData::kCanEnterFieldNumber;
#endif  // !_MSC_VER

FactionGuardDBData::FactionGuardDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionGuardDBData::InitAsDefaultInstance() {
}

FactionGuardDBData::FactionGuardDBData(const FactionGuardDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionGuardDBData::SharedCtor() {
  _cached_size_ = 0;
  can_enter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionGuardDBData::~FactionGuardDBData() {
  SharedDtor();
}

void FactionGuardDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionGuardDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionGuardDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionGuardDBData_descriptor_;
}

const FactionGuardDBData& FactionGuardDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionGuardDBData* FactionGuardDBData::default_instance_ = NULL;

FactionGuardDBData* FactionGuardDBData::New() const {
  return new FactionGuardDBData;
}

void FactionGuardDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    can_enter_ = false;
  }
  harm_.Clear();
  old_harm_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionGuardDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionGuardHarmDBProto harm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_harm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_harm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_harm;
        if (input->ExpectTag(18)) goto parse_old_harm;
        break;
      }

      // repeated .proto_ff.FactionGuardHarmDBProto old_harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_harm:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_harm()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_old_harm;
        if (input->ExpectTag(24)) goto parse_can_enter;
        break;
      }

      // optional bool can_enter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_can_enter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_enter_)));
          set_has_can_enter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionGuardDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionGuardHarmDBProto harm = 1;
  for (int i = 0; i < this->harm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->harm(i), output);
  }

  // repeated .proto_ff.FactionGuardHarmDBProto old_harm = 2;
  for (int i = 0; i < this->old_harm_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->old_harm(i), output);
  }

  // optional bool can_enter = 3;
  if (has_can_enter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_enter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionGuardDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionGuardHarmDBProto harm = 1;
  for (int i = 0; i < this->harm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->harm(i), target);
  }

  // repeated .proto_ff.FactionGuardHarmDBProto old_harm = 2;
  for (int i = 0; i < this->old_harm_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->old_harm(i), target);
  }

  // optional bool can_enter = 3;
  if (has_can_enter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_enter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionGuardDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool can_enter = 3;
    if (has_can_enter()) {
      total_size += 1 + 1;
    }

  }
  // repeated .proto_ff.FactionGuardHarmDBProto harm = 1;
  total_size += 1 * this->harm_size();
  for (int i = 0; i < this->harm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->harm(i));
  }

  // repeated .proto_ff.FactionGuardHarmDBProto old_harm = 2;
  total_size += 1 * this->old_harm_size();
  for (int i = 0; i < this->old_harm_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_harm(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionGuardDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionGuardDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionGuardDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionGuardDBData::MergeFrom(const FactionGuardDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  harm_.MergeFrom(from.harm_);
  old_harm_.MergeFrom(from.old_harm_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_can_enter()) {
      set_can_enter(from.can_enter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionGuardDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionGuardDBData::CopyFrom(const FactionGuardDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionGuardDBData::IsInitialized() const {

  return true;
}

void FactionGuardDBData::Swap(FactionGuardDBData* other) {
  if (other != this) {
    harm_.Swap(&other->harm_);
    old_harm_.Swap(&other->old_harm_);
    std::swap(can_enter_, other->can_enter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionGuardDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionGuardDBData_descriptor_;
  metadata.reflection = FactionGuardDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionMoyu::kWeekHarmFieldNumber;
const int FactionMoyu::kLastWeekHarmFieldNumber;
const int FactionMoyu::kCurLayerFieldNumber;
const int FactionMoyu::kCurHpFieldNumber;
const int FactionMoyu::kMaxHpFieldNumber;
const int FactionMoyu::kHarmTimeFieldNumber;
const int FactionMoyu::kRefreshTimeFieldNumber;
const int FactionMoyu::kPassLayerFieldNumber;
#endif  // !_MSC_VER

FactionMoyu::FactionMoyu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionMoyu::InitAsDefaultInstance() {
}

FactionMoyu::FactionMoyu(const FactionMoyu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionMoyu::SharedCtor() {
  _cached_size_ = 0;
  week_harm_ = GOOGLE_ULONGLONG(0);
  last_week_harm_ = GOOGLE_ULONGLONG(0);
  cur_layer_ = 0;
  cur_hp_ = GOOGLE_ULONGLONG(0);
  max_hp_ = GOOGLE_ULONGLONG(0);
  harm_time_ = GOOGLE_ULONGLONG(0);
  refresh_time_ = GOOGLE_ULONGLONG(0);
  pass_layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionMoyu::~FactionMoyu() {
  SharedDtor();
}

void FactionMoyu::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionMoyu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionMoyu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionMoyu_descriptor_;
}

const FactionMoyu& FactionMoyu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionMoyu* FactionMoyu::default_instance_ = NULL;

FactionMoyu* FactionMoyu::New() const {
  return new FactionMoyu;
}

void FactionMoyu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    week_harm_ = GOOGLE_ULONGLONG(0);
    last_week_harm_ = GOOGLE_ULONGLONG(0);
    cur_layer_ = 0;
    cur_hp_ = GOOGLE_ULONGLONG(0);
    max_hp_ = GOOGLE_ULONGLONG(0);
    harm_time_ = GOOGLE_ULONGLONG(0);
    refresh_time_ = GOOGLE_ULONGLONG(0);
    pass_layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionMoyu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 week_harm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &week_harm_)));
          set_has_week_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_last_week_harm;
        break;
      }

      // optional uint64 last_week_harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_week_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &last_week_harm_)));
          set_has_last_week_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_layer;
        break;
      }

      // optional int32 cur_layer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_layer_)));
          set_has_cur_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cur_hp;
        break;
      }

      // optional uint64 cur_hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cur_hp_)));
          set_has_cur_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_max_hp;
        break;
      }

      // optional uint64 max_hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &max_hp_)));
          set_has_max_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_harm_time;
        break;
      }

      // optional uint64 harm_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_time_)));
          set_has_harm_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_refresh_time;
        break;
      }

      // optional uint64 refresh_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refresh_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &refresh_time_)));
          set_has_refresh_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pass_layer;
        break;
      }

      // optional int32 pass_layer = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_layer_)));
          set_has_pass_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionMoyu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 week_harm = 1;
  if (has_week_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->week_harm(), output);
  }

  // optional uint64 last_week_harm = 2;
  if (has_last_week_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->last_week_harm(), output);
  }

  // optional int32 cur_layer = 3;
  if (has_cur_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cur_layer(), output);
  }

  // optional uint64 cur_hp = 4;
  if (has_cur_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->cur_hp(), output);
  }

  // optional uint64 max_hp = 5;
  if (has_max_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->max_hp(), output);
  }

  // optional uint64 harm_time = 6;
  if (has_harm_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->harm_time(), output);
  }

  // optional uint64 refresh_time = 7;
  if (has_refresh_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->refresh_time(), output);
  }

  // optional int32 pass_layer = 8;
  if (has_pass_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pass_layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionMoyu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 week_harm = 1;
  if (has_week_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->week_harm(), target);
  }

  // optional uint64 last_week_harm = 2;
  if (has_last_week_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->last_week_harm(), target);
  }

  // optional int32 cur_layer = 3;
  if (has_cur_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cur_layer(), target);
  }

  // optional uint64 cur_hp = 4;
  if (has_cur_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->cur_hp(), target);
  }

  // optional uint64 max_hp = 5;
  if (has_max_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->max_hp(), target);
  }

  // optional uint64 harm_time = 6;
  if (has_harm_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->harm_time(), target);
  }

  // optional uint64 refresh_time = 7;
  if (has_refresh_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->refresh_time(), target);
  }

  // optional int32 pass_layer = 8;
  if (has_pass_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pass_layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionMoyu::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 week_harm = 1;
    if (has_week_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->week_harm());
    }

    // optional uint64 last_week_harm = 2;
    if (has_last_week_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->last_week_harm());
    }

    // optional int32 cur_layer = 3;
    if (has_cur_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_layer());
    }

    // optional uint64 cur_hp = 4;
    if (has_cur_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cur_hp());
    }

    // optional uint64 max_hp = 5;
    if (has_max_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->max_hp());
    }

    // optional uint64 harm_time = 6;
    if (has_harm_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm_time());
    }

    // optional uint64 refresh_time = 7;
    if (has_refresh_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->refresh_time());
    }

    // optional int32 pass_layer = 8;
    if (has_pass_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass_layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionMoyu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionMoyu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionMoyu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionMoyu::MergeFrom(const FactionMoyu& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_week_harm()) {
      set_week_harm(from.week_harm());
    }
    if (from.has_last_week_harm()) {
      set_last_week_harm(from.last_week_harm());
    }
    if (from.has_cur_layer()) {
      set_cur_layer(from.cur_layer());
    }
    if (from.has_cur_hp()) {
      set_cur_hp(from.cur_hp());
    }
    if (from.has_max_hp()) {
      set_max_hp(from.max_hp());
    }
    if (from.has_harm_time()) {
      set_harm_time(from.harm_time());
    }
    if (from.has_refresh_time()) {
      set_refresh_time(from.refresh_time());
    }
    if (from.has_pass_layer()) {
      set_pass_layer(from.pass_layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionMoyu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionMoyu::CopyFrom(const FactionMoyu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionMoyu::IsInitialized() const {

  return true;
}

void FactionMoyu::Swap(FactionMoyu* other) {
  if (other != this) {
    std::swap(week_harm_, other->week_harm_);
    std::swap(last_week_harm_, other->last_week_harm_);
    std::swap(cur_layer_, other->cur_layer_);
    std::swap(cur_hp_, other->cur_hp_);
    std::swap(max_hp_, other->max_hp_);
    std::swap(harm_time_, other->harm_time_);
    std::swap(refresh_time_, other->refresh_time_);
    std::swap(pass_layer_, other->pass_layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionMoyu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionMoyu_descriptor_;
  metadata.reflection = FactionMoyu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBData::kBeastFieldNumber;
const int FactionDBData::kGuardFieldNumber;
const int FactionDBData::kMoyuFieldNumber;
#endif  // !_MSC_VER

FactionDBData::FactionDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBData::InitAsDefaultInstance() {
  beast_ = const_cast< ::proto_ff::FactionBeastDBData*>(&::proto_ff::FactionBeastDBData::default_instance());
  guard_ = const_cast< ::proto_ff::FactionGuardDBData*>(&::proto_ff::FactionGuardDBData::default_instance());
  moyu_ = const_cast< ::proto_ff::FactionMoyu*>(&::proto_ff::FactionMoyu::default_instance());
}

FactionDBData::FactionDBData(const FactionDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBData::SharedCtor() {
  _cached_size_ = 0;
  beast_ = NULL;
  guard_ = NULL;
  moyu_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBData::~FactionDBData() {
  SharedDtor();
}

void FactionDBData::SharedDtor() {
  if (this != default_instance_) {
    delete beast_;
    delete guard_;
    delete moyu_;
  }
}

void FactionDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBData_descriptor_;
}

const FactionDBData& FactionDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBData* FactionDBData::default_instance_ = NULL;

FactionDBData* FactionDBData::New() const {
  return new FactionDBData;
}

void FactionDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_beast()) {
      if (beast_ != NULL) beast_->::proto_ff::FactionBeastDBData::Clear();
    }
    if (has_guard()) {
      if (guard_ != NULL) guard_->::proto_ff::FactionGuardDBData::Clear();
    }
    if (has_moyu()) {
      if (moyu_ != NULL) moyu_->::proto_ff::FactionMoyu::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionBeastDBData beast = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_beast()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guard;
        break;
      }

      // optional .proto_ff.FactionGuardDBData guard = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guard:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_guard()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_moyu;
        break;
      }

      // optional .proto_ff.FactionMoyu moyu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moyu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moyu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionBeastDBData beast = 1;
  if (has_beast()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->beast(), output);
  }

  // optional .proto_ff.FactionGuardDBData guard = 2;
  if (has_guard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->guard(), output);
  }

  // optional .proto_ff.FactionMoyu moyu = 3;
  if (has_moyu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->moyu(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionBeastDBData beast = 1;
  if (has_beast()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->beast(), target);
  }

  // optional .proto_ff.FactionGuardDBData guard = 2;
  if (has_guard()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->guard(), target);
  }

  // optional .proto_ff.FactionMoyu moyu = 3;
  if (has_moyu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->moyu(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionBeastDBData beast = 1;
    if (has_beast()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->beast());
    }

    // optional .proto_ff.FactionGuardDBData guard = 2;
    if (has_guard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->guard());
    }

    // optional .proto_ff.FactionMoyu moyu = 3;
    if (has_moyu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moyu());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBData::MergeFrom(const FactionDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beast()) {
      mutable_beast()->::proto_ff::FactionBeastDBData::MergeFrom(from.beast());
    }
    if (from.has_guard()) {
      mutable_guard()->::proto_ff::FactionGuardDBData::MergeFrom(from.guard());
    }
    if (from.has_moyu()) {
      mutable_moyu()->::proto_ff::FactionMoyu::MergeFrom(from.moyu());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBData::CopyFrom(const FactionDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBData::IsInitialized() const {

  return true;
}

void FactionDBData::Swap(FactionDBData* other) {
  if (other != this) {
    std::swap(beast_, other->beast_);
    std::swap(guard_, other->guard_);
    std::swap(moyu_, other->moyu_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBData_descriptor_;
  metadata.reflection = FactionDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionAllDBData::kFactionIdFieldNumber;
const int FactionAllDBData::kBaseFieldNumber;
const int FactionAllDBData::kDataFieldNumber;
#endif  // !_MSC_VER

FactionAllDBData::FactionAllDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionAllDBData::InitAsDefaultInstance() {
  base_ = const_cast< ::proto_ff::FactionDBBase*>(&::proto_ff::FactionDBBase::default_instance());
  data_ = const_cast< ::proto_ff::FactionDBData*>(&::proto_ff::FactionDBData::default_instance());
}

FactionAllDBData::FactionAllDBData(const FactionAllDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionAllDBData::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  base_ = NULL;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionAllDBData::~FactionAllDBData() {
  SharedDtor();
}

void FactionAllDBData::SharedDtor() {
  if (this != default_instance_) {
    delete base_;
    delete data_;
  }
}

void FactionAllDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionAllDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionAllDBData_descriptor_;
}

const FactionAllDBData& FactionAllDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionAllDBData* FactionAllDBData::default_instance_ = NULL;

FactionAllDBData* FactionAllDBData::New() const {
  return new FactionAllDBData;
}

void FactionAllDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_base()) {
      if (base_ != NULL) base_->::proto_ff::FactionDBBase::Clear();
    }
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FactionDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionAllDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_base;
        break;
      }

      // optional .proto_ff.FactionDBBase base = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_base:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_base()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }

      // optional .proto_ff.FactionDBData data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionAllDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional .proto_ff.FactionDBBase base = 2;
  if (has_base()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->base(), output);
  }

  // optional .proto_ff.FactionDBData data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionAllDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional .proto_ff.FactionDBBase base = 2;
  if (has_base()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->base(), target);
  }

  // optional .proto_ff.FactionDBData data = 3;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionAllDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional .proto_ff.FactionDBBase base = 2;
    if (has_base()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->base());
    }

    // optional .proto_ff.FactionDBData data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionAllDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionAllDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionAllDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionAllDBData::MergeFrom(const FactionAllDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_base()) {
      mutable_base()->::proto_ff::FactionDBBase::MergeFrom(from.base());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::FactionDBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionAllDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionAllDBData::CopyFrom(const FactionAllDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionAllDBData::IsInitialized() const {

  return true;
}

void FactionAllDBData::Swap(FactionAllDBData* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(base_, other->base_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionAllDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionAllDBData_descriptor_;
  metadata.reflection = FactionAllDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBMoyuRankEntry::kIdFieldNumber;
const int FactionDBMoyuRankEntry::kNameFieldNumber;
const int FactionDBMoyuRankEntry::kZidFieldNumber;
const int FactionDBMoyuRankEntry::kHarmFieldNumber;
const int FactionDBMoyuRankEntry::kHarmTimeFieldNumber;
#endif  // !_MSC_VER

FactionDBMoyuRankEntry::FactionDBMoyuRankEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBMoyuRankEntry::InitAsDefaultInstance() {
}

FactionDBMoyuRankEntry::FactionDBMoyuRankEntry(const FactionDBMoyuRankEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBMoyuRankEntry::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0;
  harm_ = GOOGLE_ULONGLONG(0);
  harm_time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBMoyuRankEntry::~FactionDBMoyuRankEntry() {
  SharedDtor();
}

void FactionDBMoyuRankEntry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void FactionDBMoyuRankEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBMoyuRankEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBMoyuRankEntry_descriptor_;
}

const FactionDBMoyuRankEntry& FactionDBMoyuRankEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBMoyuRankEntry* FactionDBMoyuRankEntry::default_instance_ = NULL;

FactionDBMoyuRankEntry* FactionDBMoyuRankEntry::New() const {
  return new FactionDBMoyuRankEntry;
}

void FactionDBMoyuRankEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0;
    harm_ = GOOGLE_ULONGLONG(0);
    harm_time_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBMoyuRankEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional int32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_harm;
        break;
      }

      // optional uint64 harm = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_harm_time;
        break;
      }

      // optional uint64 harm_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_time_)));
          set_has_harm_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBMoyuRankEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->zid(), output);
  }

  // optional uint64 harm = 4;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->harm(), output);
  }

  // optional uint64 harm_time = 5;
  if (has_harm_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->harm_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBMoyuRankEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->zid(), target);
  }

  // optional uint64 harm = 4;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->harm(), target);
  }

  // optional uint64 harm_time = 5;
  if (has_harm_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->harm_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBMoyuRankEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zid());
    }

    // optional uint64 harm = 4;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

    // optional uint64 harm_time = 5;
    if (has_harm_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBMoyuRankEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBMoyuRankEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBMoyuRankEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBMoyuRankEntry::MergeFrom(const FactionDBMoyuRankEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_harm_time()) {
      set_harm_time(from.harm_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBMoyuRankEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBMoyuRankEntry::CopyFrom(const FactionDBMoyuRankEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBMoyuRankEntry::IsInitialized() const {

  return true;
}

void FactionDBMoyuRankEntry::Swap(FactionDBMoyuRankEntry* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(harm_, other->harm_);
    std::swap(harm_time_, other->harm_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBMoyuRankEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBMoyuRankEntry_descriptor_;
  metadata.reflection = FactionDBMoyuRankEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBMoyuRank::kTypeFieldNumber;
const int FactionDBMoyuRank::kGroupFieldNumber;
const int FactionDBMoyuRank::kRankFieldNumber;
const int FactionDBMoyuRank::kTimeFieldNumber;
#endif  // !_MSC_VER

FactionDBMoyuRank::FactionDBMoyuRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBMoyuRank::InitAsDefaultInstance() {
}

FactionDBMoyuRank::FactionDBMoyuRank(const FactionDBMoyuRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBMoyuRank::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  group_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBMoyuRank::~FactionDBMoyuRank() {
  SharedDtor();
}

void FactionDBMoyuRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDBMoyuRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBMoyuRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBMoyuRank_descriptor_;
}

const FactionDBMoyuRank& FactionDBMoyuRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBMoyuRank* FactionDBMoyuRank::default_instance_ = NULL;

FactionDBMoyuRank* FactionDBMoyuRank::New() const {
  return new FactionDBMoyuRank;
}

void FactionDBMoyuRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    group_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBMoyuRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_group;
        break;
      }

      // optional int32 group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank;
        break;
      }

      // repeated .proto_ff.FactionDBMoyuRankEntry rank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rank;
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBMoyuRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->group(), output);
  }

  // repeated .proto_ff.FactionDBMoyuRankEntry rank = 3;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rank(i), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBMoyuRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->group(), target);
  }

  // repeated .proto_ff.FactionDBMoyuRankEntry rank = 3;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rank(i), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBMoyuRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated .proto_ff.FactionDBMoyuRankEntry rank = 3;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBMoyuRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBMoyuRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBMoyuRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBMoyuRank::MergeFrom(const FactionDBMoyuRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBMoyuRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBMoyuRank::CopyFrom(const FactionDBMoyuRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBMoyuRank::IsInitialized() const {

  return true;
}

void FactionDBMoyuRank::Swap(FactionDBMoyuRank* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(group_, other->group_);
    rank_.Swap(&other->rank_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBMoyuRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBMoyuRank_descriptor_;
  metadata.reflection = FactionDBMoyuRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDBMoyuRankDB::kInfosFieldNumber;
#endif  // !_MSC_VER

FactionDBMoyuRankDB::FactionDBMoyuRankDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDBMoyuRankDB::InitAsDefaultInstance() {
}

FactionDBMoyuRankDB::FactionDBMoyuRankDB(const FactionDBMoyuRankDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDBMoyuRankDB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDBMoyuRankDB::~FactionDBMoyuRankDB() {
  SharedDtor();
}

void FactionDBMoyuRankDB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDBMoyuRankDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDBMoyuRankDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDBMoyuRankDB_descriptor_;
}

const FactionDBMoyuRankDB& FactionDBMoyuRankDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDBMoyuRankDB* FactionDBMoyuRankDB::default_instance_ = NULL;

FactionDBMoyuRankDB* FactionDBMoyuRankDB::New() const {
  return new FactionDBMoyuRankDB;
}

void FactionDBMoyuRankDB::Clear() {
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDBMoyuRankDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionDBMoyuRank infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDBMoyuRankDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionDBMoyuRank infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDBMoyuRankDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionDBMoyuRank infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDBMoyuRankDB::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FactionDBMoyuRank infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDBMoyuRankDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDBMoyuRankDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDBMoyuRankDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDBMoyuRankDB::MergeFrom(const FactionDBMoyuRankDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDBMoyuRankDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDBMoyuRankDB::CopyFrom(const FactionDBMoyuRankDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDBMoyuRankDB::IsInitialized() const {

  return true;
}

void FactionDBMoyuRankDB::Swap(FactionDBMoyuRankDB* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDBMoyuRankDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDBMoyuRankDB_descriptor_;
  metadata.reflection = FactionDBMoyuRankDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleListDBReq::kReqidFieldNumber;
const int RoleListDBReq::kUidFieldNumber;
const int RoleListDBReq::kGateidFieldNumber;
const int RoleListDBReq::kBornZidFieldNumber;
#endif  // !_MSC_VER

RoleListDBReq::RoleListDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleListDBReq::InitAsDefaultInstance() {
}

RoleListDBReq::RoleListDBReq(const RoleListDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleListDBReq::SharedCtor() {
  _cached_size_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  gateid_ = 0u;
  born_zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleListDBReq::~RoleListDBReq() {
  SharedDtor();
}

void RoleListDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleListDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleListDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleListDBReq_descriptor_;
}

const RoleListDBReq& RoleListDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleListDBReq* RoleListDBReq::default_instance_ = NULL;

RoleListDBReq* RoleListDBReq::New() const {
  return new RoleListDBReq;
}

void RoleListDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    gateid_ = 0u;
    born_zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleListDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 reqid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_born_zid;
        break;
      }

      // required uint32 born_zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_zid_)));
          set_has_born_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleListDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reqid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // required uint32 gateid = 3;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gateid(), output);
  }

  // required uint32 born_zid = 4;
  if (has_born_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->born_zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleListDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reqid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // required uint32 gateid = 3;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gateid(), target);
  }

  // required uint32 born_zid = 4;
  if (has_born_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->born_zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleListDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 reqid = 1;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 gateid = 3;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required uint32 born_zid = 4;
    if (has_born_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born_zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleListDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleListDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleListDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleListDBReq::MergeFrom(const RoleListDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_born_zid()) {
      set_born_zid(from.born_zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleListDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleListDBReq::CopyFrom(const RoleListDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RoleListDBReq::Swap(RoleListDBReq* other) {
  if (other != this) {
    std::swap(reqid_, other->reqid_);
    std::swap(uid_, other->uid_);
    std::swap(gateid_, other->gateid_);
    std::swap(born_zid_, other->born_zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleListDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleListDBReq_descriptor_;
  metadata.reflection = RoleListDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleListDBRsp::kRetFieldNumber;
const int RoleListDBRsp::kReqidFieldNumber;
const int RoleListDBRsp::kUidFieldNumber;
const int RoleListDBRsp::kGateidFieldNumber;
const int RoleListDBRsp::kRoleLstFieldNumber;
const int RoleListDBRsp::kRegnumFieldNumber;
#endif  // !_MSC_VER

RoleListDBRsp::RoleListDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleListDBRsp::InitAsDefaultInstance() {
}

RoleListDBRsp::RoleListDBRsp(const RoleListDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleListDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  gateid_ = 0u;
  regnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleListDBRsp::~RoleListDBRsp() {
  SharedDtor();
}

void RoleListDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleListDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleListDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleListDBRsp_descriptor_;
}

const RoleListDBRsp& RoleListDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleListDBRsp* RoleListDBRsp::default_instance_ = NULL;

RoleListDBRsp* RoleListDBRsp::New() const {
  return new RoleListDBRsp;
}

void RoleListDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    reqid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    gateid_ = 0u;
    regnum_ = 0u;
  }
  role_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleListDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint64 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_lst;
        break;
      }

      // repeated .proto_ff.RoleListDBProto role_lst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_role_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_role_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_role_lst;
        if (input->ExpectTag(48)) goto parse_regnum;
        break;
      }

      // optional uint32 regnum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_regnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &regnum_)));
          set_has_regnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleListDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->reqid(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required uint32 gateid = 4;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gateid(), output);
  }

  // repeated .proto_ff.RoleListDBProto role_lst = 5;
  for (int i = 0; i < this->role_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->role_lst(i), output);
  }

  // optional uint32 regnum = 6;
  if (has_regnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->regnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleListDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->reqid(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required uint32 gateid = 4;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gateid(), target);
  }

  // repeated .proto_ff.RoleListDBProto role_lst = 5;
  for (int i = 0; i < this->role_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->role_lst(i), target);
  }

  // optional uint32 regnum = 6;
  if (has_regnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->regnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleListDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 gateid = 4;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional uint32 regnum = 6;
    if (has_regnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->regnum());
    }

  }
  // repeated .proto_ff.RoleListDBProto role_lst = 5;
  total_size += 1 * this->role_lst_size();
  for (int i = 0; i < this->role_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->role_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleListDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleListDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleListDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleListDBRsp::MergeFrom(const RoleListDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  role_lst_.MergeFrom(from.role_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_regnum()) {
      set_regnum(from.regnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleListDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleListDBRsp::CopyFrom(const RoleListDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleListDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < role_lst_size(); i++) {
    if (!this->role_lst(i).IsInitialized()) return false;
  }
  return true;
}

void RoleListDBRsp::Swap(RoleListDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(reqid_, other->reqid_);
    std::swap(uid_, other->uid_);
    std::swap(gateid_, other->gateid_);
    role_lst_.Swap(&other->role_lst_);
    std::swap(regnum_, other->regnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleListDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleListDBRsp_descriptor_;
  metadata.reflection = RoleListDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoleDBReq::kReqidFieldNumber;
const int CreateRoleDBReq::kZidFieldNumber;
const int CreateRoleDBReq::kGateidFieldNumber;
const int CreateRoleDBReq::kDataFieldNumber;
const int CreateRoleDBReq::kUidFieldNumber;
const int CreateRoleDBReq::kChannelIdFieldNumber;
const int CreateRoleDBReq::kZoneMidFieldNumber;
const int CreateRoleDBReq::kBornZidFieldNumber;
#endif  // !_MSC_VER

CreateRoleDBReq::CreateRoleDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoleDBReq::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::RoleDBData*>(&::proto_ff::RoleDBData::default_instance());
}

CreateRoleDBReq::CreateRoleDBReq(const CreateRoleDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoleDBReq::SharedCtor() {
  _cached_size_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  gateid_ = 0u;
  data_ = NULL;
  uid_ = 0u;
  channel_id_ = 0u;
  zone_mid_ = 0u;
  born_zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoleDBReq::~CreateRoleDBReq() {
  SharedDtor();
}

void CreateRoleDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void CreateRoleDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoleDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoleDBReq_descriptor_;
}

const CreateRoleDBReq& CreateRoleDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

CreateRoleDBReq* CreateRoleDBReq::default_instance_ = NULL;

CreateRoleDBReq* CreateRoleDBReq::New() const {
  return new CreateRoleDBReq;
}

void CreateRoleDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    gateid_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::RoleDBData::Clear();
    }
    uid_ = 0u;
    channel_id_ = 0u;
    zone_mid_ = 0u;
    born_zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoleDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 reqid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // required uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // required .proto_ff.RoleDBData data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_channel_id;
        break;
      }

      // optional uint32 channel_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_id_)));
          set_has_channel_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_zone_mid;
        break;
      }

      // optional uint32 zone_mid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_mid_)));
          set_has_zone_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_born_zid;
        break;
      }

      // optional uint32 born_zid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_zid_)));
          set_has_born_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoleDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reqid(), output);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // required uint32 gateid = 3;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->gateid(), output);
  }

  // required .proto_ff.RoleDBData data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data(), output);
  }

  // optional uint32 uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uid(), output);
  }

  // optional uint32 channel_id = 6;
  if (has_channel_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->channel_id(), output);
  }

  // optional uint32 zone_mid = 7;
  if (has_zone_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->zone_mid(), output);
  }

  // optional uint32 born_zid = 8;
  if (has_born_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->born_zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoleDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reqid(), target);
  }

  // required uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // required uint32 gateid = 3;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->gateid(), target);
  }

  // required .proto_ff.RoleDBData data = 4;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data(), target);
  }

  // optional uint32 uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uid(), target);
  }

  // optional uint32 channel_id = 6;
  if (has_channel_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->channel_id(), target);
  }

  // optional uint32 zone_mid = 7;
  if (has_zone_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->zone_mid(), target);
  }

  // optional uint32 born_zid = 8;
  if (has_born_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->born_zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoleDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 reqid = 1;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // required uint32 gateid = 3;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // required .proto_ff.RoleDBData data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional uint32 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint32 channel_id = 6;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_id());
    }

    // optional uint32 zone_mid = 7;
    if (has_zone_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_mid());
    }

    // optional uint32 born_zid = 8;
    if (has_born_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born_zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoleDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoleDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoleDBReq::MergeFrom(const CreateRoleDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::RoleDBData::MergeFrom(from.data());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_channel_id()) {
      set_channel_id(from.channel_id());
    }
    if (from.has_zone_mid()) {
      set_zone_mid(from.zone_mid());
    }
    if (from.has_born_zid()) {
      set_born_zid(from.born_zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoleDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleDBReq::CopyFrom(const CreateRoleDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void CreateRoleDBReq::Swap(CreateRoleDBReq* other) {
  if (other != this) {
    std::swap(reqid_, other->reqid_);
    std::swap(zid_, other->zid_);
    std::swap(gateid_, other->gateid_);
    std::swap(data_, other->data_);
    std::swap(uid_, other->uid_);
    std::swap(channel_id_, other->channel_id_);
    std::swap(zone_mid_, other->zone_mid_);
    std::swap(born_zid_, other->born_zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoleDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoleDBReq_descriptor_;
  metadata.reflection = CreateRoleDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoleDBRsp::kRetFieldNumber;
const int CreateRoleDBRsp::kReqidFieldNumber;
const int CreateRoleDBRsp::kUidFieldNumber;
const int CreateRoleDBRsp::kGateidFieldNumber;
const int CreateRoleDBRsp::kInfoFieldNumber;
const int CreateRoleDBRsp::kBornZidFieldNumber;
const int CreateRoleDBRsp::kSimpleFieldNumber;
#endif  // !_MSC_VER

CreateRoleDBRsp::CreateRoleDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoleDBRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::RoleListDBProto*>(&::proto_ff::RoleListDBProto::default_instance());
  simple_ = const_cast< ::proto_ff::CenterRoleProto*>(&::proto_ff::CenterRoleProto::default_instance());
}

CreateRoleDBRsp::CreateRoleDBRsp(const CreateRoleDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoleDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  gateid_ = 0u;
  info_ = NULL;
  born_zid_ = 0u;
  simple_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoleDBRsp::~CreateRoleDBRsp() {
  SharedDtor();
}

void CreateRoleDBRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete simple_;
  }
}

void CreateRoleDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoleDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoleDBRsp_descriptor_;
}

const CreateRoleDBRsp& CreateRoleDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

CreateRoleDBRsp* CreateRoleDBRsp::default_instance_ = NULL;

CreateRoleDBRsp* CreateRoleDBRsp::New() const {
  return new CreateRoleDBRsp;
}

void CreateRoleDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    reqid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    gateid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::RoleListDBProto::Clear();
    }
    born_zid_ = 0u;
    if (has_simple()) {
      if (simple_ != NULL) simple_->::proto_ff::CenterRoleProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoleDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint64 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uid;
        break;
      }

      // required uint32 uid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gateid;
        break;
      }

      // required uint32 gateid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .proto_ff.RoleListDBProto info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_born_zid;
        break;
      }

      // optional uint32 born_zid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_born_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &born_zid_)));
          set_has_born_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_simple;
        break;
      }

      // optional .proto_ff.CenterRoleProto simple = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoleDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->reqid(), output);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uid(), output);
  }

  // required uint32 gateid = 4;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gateid(), output);
  }

  // optional .proto_ff.RoleListDBProto info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  // optional uint32 born_zid = 6;
  if (has_born_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->born_zid(), output);
  }

  // optional .proto_ff.CenterRoleProto simple = 7;
  if (has_simple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->simple(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoleDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->reqid(), target);
  }

  // required uint32 uid = 3;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uid(), target);
  }

  // required uint32 gateid = 4;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gateid(), target);
  }

  // optional .proto_ff.RoleListDBProto info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  // optional uint32 born_zid = 6;
  if (has_born_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->born_zid(), target);
  }

  // optional .proto_ff.CenterRoleProto simple = 7;
  if (has_simple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->simple(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoleDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint32 uid = 3;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // required uint32 gateid = 4;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gateid());
    }

    // optional .proto_ff.RoleListDBProto info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional uint32 born_zid = 6;
    if (has_born_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->born_zid());
    }

    // optional .proto_ff.CenterRoleProto simple = 7;
    if (has_simple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->simple());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoleDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoleDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoleDBRsp::MergeFrom(const CreateRoleDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::RoleListDBProto::MergeFrom(from.info());
    }
    if (from.has_born_zid()) {
      set_born_zid(from.born_zid());
    }
    if (from.has_simple()) {
      mutable_simple()->::proto_ff::CenterRoleProto::MergeFrom(from.simple());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoleDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleDBRsp::CopyFrom(const CreateRoleDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_simple()) {
    if (!this->simple().IsInitialized()) return false;
  }
  return true;
}

void CreateRoleDBRsp::Swap(CreateRoleDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(reqid_, other->reqid_);
    std::swap(uid_, other->uid_);
    std::swap(gateid_, other->gateid_);
    std::swap(info_, other->info_);
    std::swap(born_zid_, other->born_zid_);
    std::swap(simple_, other->simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoleDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoleDBRsp_descriptor_;
  metadata.reflection = CreateRoleDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleInfoDBReq::kReqidFieldNumber;
const int RoleInfoDBReq::kCidFieldNumber;
const int RoleInfoDBReq::kChangeFieldNumber;
#endif  // !_MSC_VER

RoleInfoDBReq::RoleInfoDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleInfoDBReq::InitAsDefaultInstance() {
}

RoleInfoDBReq::RoleInfoDBReq(const RoleInfoDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleInfoDBReq::SharedCtor() {
  _cached_size_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  change_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfoDBReq::~RoleInfoDBReq() {
  SharedDtor();
}

void RoleInfoDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleInfoDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfoDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfoDBReq_descriptor_;
}

const RoleInfoDBReq& RoleInfoDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleInfoDBReq* RoleInfoDBReq::default_instance_ = NULL;

RoleInfoDBReq* RoleInfoDBReq::New() const {
  return new RoleInfoDBReq;
}

void RoleInfoDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    change_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleInfoDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 reqid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_change;
        break;
      }

      // optional int32 change = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleInfoDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->reqid(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional int32 change = 3;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->change(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleInfoDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 reqid = 1;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->reqid(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional int32 change = 3;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->change(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleInfoDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 reqid = 1;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 change = 3;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfoDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleInfoDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleInfoDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfoDBReq::MergeFrom(const RoleInfoDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleInfoDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfoDBReq::CopyFrom(const RoleInfoDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfoDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleInfoDBReq::Swap(RoleInfoDBReq* other) {
  if (other != this) {
    std::swap(reqid_, other->reqid_);
    std::swap(cid_, other->cid_);
    std::swap(change_, other->change_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleInfoDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfoDBReq_descriptor_;
  metadata.reflection = RoleInfoDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleInfoDBRsp::kRetFieldNumber;
const int RoleInfoDBRsp::kReqidFieldNumber;
const int RoleInfoDBRsp::kCidFieldNumber;
const int RoleInfoDBRsp::kChangeFieldNumber;
const int RoleInfoDBRsp::kInfoFieldNumber;
#endif  // !_MSC_VER

RoleInfoDBRsp::RoleInfoDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleInfoDBRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::RoleDBData*>(&::proto_ff::RoleDBData::default_instance());
}

RoleInfoDBRsp::RoleInfoDBRsp(const RoleInfoDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleInfoDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  reqid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  change_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfoDBRsp::~RoleInfoDBRsp() {
  SharedDtor();
}

void RoleInfoDBRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RoleInfoDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfoDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfoDBRsp_descriptor_;
}

const RoleInfoDBRsp& RoleInfoDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleInfoDBRsp* RoleInfoDBRsp::default_instance_ = NULL;

RoleInfoDBRsp* RoleInfoDBRsp::New() const {
  return new RoleInfoDBRsp;
}

void RoleInfoDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    reqid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    change_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::RoleDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleInfoDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reqid;
        break;
      }

      // required uint64 reqid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // required uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_change;
        break;
      }

      // optional int32 change = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &change_)));
          set_has_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // optional .proto_ff.RoleDBData info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleInfoDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->reqid(), output);
  }

  // required uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  // optional int32 change = 4;
  if (has_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->change(), output);
  }

  // optional .proto_ff.RoleDBData info = 5;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleInfoDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 reqid = 2;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->reqid(), target);
  }

  // required uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  // optional int32 change = 4;
  if (has_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->change(), target);
  }

  // optional .proto_ff.RoleDBData info = 5;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleInfoDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 reqid = 2;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reqid());
    }

    // required uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 change = 4;
    if (has_change()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->change());
    }

    // optional .proto_ff.RoleDBData info = 5;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfoDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleInfoDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleInfoDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfoDBRsp::MergeFrom(const RoleInfoDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_change()) {
      set_change(from.change());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::RoleDBData::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleInfoDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfoDBRsp::CopyFrom(const RoleInfoDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfoDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RoleInfoDBRsp::Swap(RoleInfoDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(reqid_, other->reqid_);
    std::swap(cid_, other->cid_);
    std::swap(change_, other->change_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleInfoDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfoDBRsp_descriptor_;
  metadata.reflection = RoleInfoDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleInfoUpdateDBReq::kCidFieldNumber;
const int RoleInfoUpdateDBReq::kUidFieldNumber;
const int RoleInfoUpdateDBReq::kInfoFieldNumber;
#endif  // !_MSC_VER

RoleInfoUpdateDBReq::RoleInfoUpdateDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleInfoUpdateDBReq::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::RoleDBData*>(&::proto_ff::RoleDBData::default_instance());
}

RoleInfoUpdateDBReq::RoleInfoUpdateDBReq(const RoleInfoUpdateDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleInfoUpdateDBReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleInfoUpdateDBReq::~RoleInfoUpdateDBReq() {
  SharedDtor();
}

void RoleInfoUpdateDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RoleInfoUpdateDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleInfoUpdateDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleInfoUpdateDBReq_descriptor_;
}

const RoleInfoUpdateDBReq& RoleInfoUpdateDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleInfoUpdateDBReq* RoleInfoUpdateDBReq::default_instance_ = NULL;

RoleInfoUpdateDBReq* RoleInfoUpdateDBReq::New() const {
  return new RoleInfoUpdateDBReq;
}

void RoleInfoUpdateDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::RoleDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleInfoUpdateDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // required uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // optional .proto_ff.RoleDBData info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleInfoUpdateDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional .proto_ff.RoleDBData info = 3;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleInfoUpdateDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional .proto_ff.RoleDBData info = 3;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleInfoUpdateDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional .proto_ff.RoleDBData info = 3;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleInfoUpdateDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleInfoUpdateDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleInfoUpdateDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleInfoUpdateDBReq::MergeFrom(const RoleInfoUpdateDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::RoleDBData::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleInfoUpdateDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleInfoUpdateDBReq::CopyFrom(const RoleInfoUpdateDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleInfoUpdateDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RoleInfoUpdateDBReq::Swap(RoleInfoUpdateDBReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleInfoUpdateDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleInfoUpdateDBReq_descriptor_;
  metadata.reflection = RoleInfoUpdateDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleChgNameDBReq::kCidFieldNumber;
const int RoleChgNameDBReq::kNameFieldNumber;
#endif  // !_MSC_VER

RoleChgNameDBReq::RoleChgNameDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleChgNameDBReq::InitAsDefaultInstance() {
}

RoleChgNameDBReq::RoleChgNameDBReq(const RoleChgNameDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleChgNameDBReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleChgNameDBReq::~RoleChgNameDBReq() {
  SharedDtor();
}

void RoleChgNameDBReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoleChgNameDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleChgNameDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleChgNameDBReq_descriptor_;
}

const RoleChgNameDBReq& RoleChgNameDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleChgNameDBReq* RoleChgNameDBReq::default_instance_ = NULL;

RoleChgNameDBReq* RoleChgNameDBReq::New() const {
  return new RoleChgNameDBReq;
}

void RoleChgNameDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleChgNameDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleChgNameDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleChgNameDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleChgNameDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleChgNameDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleChgNameDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleChgNameDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleChgNameDBReq::MergeFrom(const RoleChgNameDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleChgNameDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleChgNameDBReq::CopyFrom(const RoleChgNameDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleChgNameDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoleChgNameDBReq::Swap(RoleChgNameDBReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleChgNameDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleChgNameDBReq_descriptor_;
  metadata.reflection = RoleChgNameDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleChgNameDBRsp::kRetFieldNumber;
const int RoleChgNameDBRsp::kCidFieldNumber;
const int RoleChgNameDBRsp::kNameFieldNumber;
#endif  // !_MSC_VER

RoleChgNameDBRsp::RoleChgNameDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleChgNameDBRsp::InitAsDefaultInstance() {
}

RoleChgNameDBRsp::RoleChgNameDBRsp(const RoleChgNameDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleChgNameDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleChgNameDBRsp::~RoleChgNameDBRsp() {
  SharedDtor();
}

void RoleChgNameDBRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RoleChgNameDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleChgNameDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleChgNameDBRsp_descriptor_;
}

const RoleChgNameDBRsp& RoleChgNameDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleChgNameDBRsp* RoleChgNameDBRsp::default_instance_ = NULL;

RoleChgNameDBRsp* RoleChgNameDBRsp::New() const {
  return new RoleChgNameDBRsp;
}

void RoleChgNameDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleChgNameDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleChgNameDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleChgNameDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleChgNameDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleChgNameDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleChgNameDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleChgNameDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleChgNameDBRsp::MergeFrom(const RoleChgNameDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleChgNameDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleChgNameDBRsp::CopyFrom(const RoleChgNameDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleChgNameDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RoleChgNameDBRsp::Swap(RoleChgNameDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleChgNameDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleChgNameDBRsp_descriptor_;
  metadata.reflection = RoleChgNameDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoleSimpleListDBReq::RoleSimpleListDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSimpleListDBReq::InitAsDefaultInstance() {
}

RoleSimpleListDBReq::RoleSimpleListDBReq(const RoleSimpleListDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSimpleListDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSimpleListDBReq::~RoleSimpleListDBReq() {
  SharedDtor();
}

void RoleSimpleListDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSimpleListDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSimpleListDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSimpleListDBReq_descriptor_;
}

const RoleSimpleListDBReq& RoleSimpleListDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleSimpleListDBReq* RoleSimpleListDBReq::default_instance_ = NULL;

RoleSimpleListDBReq* RoleSimpleListDBReq::New() const {
  return new RoleSimpleListDBReq;
}

void RoleSimpleListDBReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSimpleListDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RoleSimpleListDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSimpleListDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSimpleListDBReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSimpleListDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSimpleListDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSimpleListDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSimpleListDBReq::MergeFrom(const RoleSimpleListDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSimpleListDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSimpleListDBReq::CopyFrom(const RoleSimpleListDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSimpleListDBReq::IsInitialized() const {

  return true;
}

void RoleSimpleListDBReq::Swap(RoleSimpleListDBReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSimpleListDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSimpleListDBReq_descriptor_;
  metadata.reflection = RoleSimpleListDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleSimpleListDBRsp::kRetFieldNumber;
const int RoleSimpleListDBRsp::kInfoFieldNumber;
const int RoleSimpleListDBRsp::kFinishFlagFieldNumber;
#endif  // !_MSC_VER

RoleSimpleListDBRsp::RoleSimpleListDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleSimpleListDBRsp::InitAsDefaultInstance() {
}

RoleSimpleListDBRsp::RoleSimpleListDBRsp(const RoleSimpleListDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleSimpleListDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  finish_flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleSimpleListDBRsp::~RoleSimpleListDBRsp() {
  SharedDtor();
}

void RoleSimpleListDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleSimpleListDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleSimpleListDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleSimpleListDBRsp_descriptor_;
}

const RoleSimpleListDBRsp& RoleSimpleListDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleSimpleListDBRsp* RoleSimpleListDBRsp::default_instance_ = NULL;

RoleSimpleListDBRsp* RoleSimpleListDBRsp::New() const {
  return new RoleSimpleListDBRsp;
}

void RoleSimpleListDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    finish_flag_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleSimpleListDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.CenterRoleProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_finish_flag;
        break;
      }

      // optional int32 finish_flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_flag_)));
          set_has_finish_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleSimpleListDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .proto_ff.CenterRoleProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional int32 finish_flag = 3;
  if (has_finish_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->finish_flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleSimpleListDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .proto_ff.CenterRoleProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional int32 finish_flag = 3;
  if (has_finish_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->finish_flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleSimpleListDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 finish_flag = 3;
    if (has_finish_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish_flag());
    }

  }
  // repeated .proto_ff.CenterRoleProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleSimpleListDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleSimpleListDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleSimpleListDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleSimpleListDBRsp::MergeFrom(const RoleSimpleListDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_finish_flag()) {
      set_finish_flag(from.finish_flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleSimpleListDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleSimpleListDBRsp::CopyFrom(const RoleSimpleListDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleSimpleListDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void RoleSimpleListDBRsp::Swap(RoleSimpleListDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    info_.Swap(&other->info_);
    std::swap(finish_flag_, other->finish_flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleSimpleListDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleSimpleListDBRsp_descriptor_;
  metadata.reflection = RoleSimpleListDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureTransLogicDBReq::kTransDataFieldNumber;
#endif  // !_MSC_VER

CreatureTransLogicDBReq::CreatureTransLogicDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureTransLogicDBReq::InitAsDefaultInstance() {
}

CreatureTransLogicDBReq::CreatureTransLogicDBReq(const CreatureTransLogicDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureTransLogicDBReq::SharedCtor() {
  _cached_size_ = 0;
  trans_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureTransLogicDBReq::~CreatureTransLogicDBReq() {
  SharedDtor();
}

void CreatureTransLogicDBReq::SharedDtor() {
  if (trans_data_ != &::google::protobuf::internal::kEmptyString) {
    delete trans_data_;
  }
  if (this != default_instance_) {
  }
}

void CreatureTransLogicDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureTransLogicDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureTransLogicDBReq_descriptor_;
}

const CreatureTransLogicDBReq& CreatureTransLogicDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

CreatureTransLogicDBReq* CreatureTransLogicDBReq::default_instance_ = NULL;

CreatureTransLogicDBReq* CreatureTransLogicDBReq::New() const {
  return new CreatureTransLogicDBReq;
}

void CreatureTransLogicDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trans_data()) {
      if (trans_data_ != &::google::protobuf::internal::kEmptyString) {
        trans_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureTransLogicDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes trans_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trans_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureTransLogicDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes trans_data = 1;
  if (has_trans_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->trans_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureTransLogicDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes trans_data = 1;
  if (has_trans_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->trans_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureTransLogicDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes trans_data = 1;
    if (has_trans_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->trans_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureTransLogicDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureTransLogicDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureTransLogicDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureTransLogicDBReq::MergeFrom(const CreatureTransLogicDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trans_data()) {
      set_trans_data(from.trans_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureTransLogicDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureTransLogicDBReq::CopyFrom(const CreatureTransLogicDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureTransLogicDBReq::IsInitialized() const {

  return true;
}

void CreatureTransLogicDBReq::Swap(CreatureTransLogicDBReq* other) {
  if (other != this) {
    std::swap(trans_data_, other->trans_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureTransLogicDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureTransLogicDBReq_descriptor_;
  metadata.reflection = CreatureTransLogicDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureTransLogicDBRsp::kRetcodeFieldNumber;
const int CreatureTransLogicDBRsp::kCidFieldNumber;
#endif  // !_MSC_VER

CreatureTransLogicDBRsp::CreatureTransLogicDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureTransLogicDBRsp::InitAsDefaultInstance() {
}

CreatureTransLogicDBRsp::CreatureTransLogicDBRsp(const CreatureTransLogicDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureTransLogicDBRsp::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureTransLogicDBRsp::~CreatureTransLogicDBRsp() {
  SharedDtor();
}

void CreatureTransLogicDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureTransLogicDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureTransLogicDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureTransLogicDBRsp_descriptor_;
}

const CreatureTransLogicDBRsp& CreatureTransLogicDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

CreatureTransLogicDBRsp* CreatureTransLogicDBRsp::default_instance_ = NULL;

CreatureTransLogicDBRsp* CreatureTransLogicDBRsp::New() const {
  return new CreatureTransLogicDBRsp;
}

void CreatureTransLogicDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureTransLogicDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureTransLogicDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureTransLogicDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureTransLogicDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureTransLogicDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureTransLogicDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureTransLogicDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureTransLogicDBRsp::MergeFrom(const CreatureTransLogicDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureTransLogicDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureTransLogicDBRsp::CopyFrom(const CreatureTransLogicDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureTransLogicDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreatureTransLogicDBRsp::Swap(CreatureTransLogicDBRsp* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureTransLogicDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureTransLogicDBRsp_descriptor_;
  metadata.reflection = CreatureTransLogicDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewMailDBInfo::kDataFieldNumber;
const int NewMailDBInfo::kResultFieldNumber;
#endif  // !_MSC_VER

NewMailDBInfo::NewMailDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewMailDBInfo::InitAsDefaultInstance() {
}

NewMailDBInfo::NewMailDBInfo(const NewMailDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewMailDBInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewMailDBInfo::~NewMailDBInfo() {
  SharedDtor();
}

void NewMailDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewMailDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewMailDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewMailDBInfo_descriptor_;
}

const NewMailDBInfo& NewMailDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

NewMailDBInfo* NewMailDBInfo::default_instance_ = NULL;

NewMailDBInfo* NewMailDBInfo::New() const {
  return new NewMailDBInfo;
}

void NewMailDBInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    result_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewMailDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.MailInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewMailDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.MailInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewMailDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.MailInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewMailDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated .proto_ff.MailInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewMailDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewMailDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewMailDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewMailDBInfo::MergeFrom(const NewMailDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewMailDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewMailDBInfo::CopyFrom(const NewMailDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewMailDBInfo::IsInitialized() const {

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void NewMailDBInfo::Swap(NewMailDBInfo* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewMailDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewMailDBInfo_descriptor_;
  metadata.reflection = NewMailDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailDBOperateInfo::kMidLstFieldNumber;
const int MailDBOperateInfo::kResultFieldNumber;
#endif  // !_MSC_VER

MailDBOperateInfo::MailDBOperateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailDBOperateInfo::InitAsDefaultInstance() {
}

MailDBOperateInfo::MailDBOperateInfo(const MailDBOperateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailDBOperateInfo::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailDBOperateInfo::~MailDBOperateInfo() {
  SharedDtor();
}

void MailDBOperateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailDBOperateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailDBOperateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailDBOperateInfo_descriptor_;
}

const MailDBOperateInfo& MailDBOperateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MailDBOperateInfo* MailDBOperateInfo::default_instance_ = NULL;

MailDBOperateInfo* MailDBOperateInfo::New() const {
  return new MailDBOperateInfo;
}

void MailDBOperateInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    result_ = 0;
  }
  mid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailDBOperateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 mid_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_mid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_mid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mid_lst;
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional int32 result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailDBOperateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 mid_lst = 1;
  for (int i = 0; i < this->mid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->mid_lst(i), output);
  }

  // optional int32 result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailDBOperateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 mid_lst = 1;
  for (int i = 0; i < this->mid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->mid_lst(i), target);
  }

  // optional int32 result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailDBOperateInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  // repeated uint32 mid_lst = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->mid_lst(i));
    }
    total_size += 1 * this->mid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailDBOperateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailDBOperateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailDBOperateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailDBOperateInfo::MergeFrom(const MailDBOperateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mid_lst_.MergeFrom(from.mid_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailDBOperateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailDBOperateInfo::CopyFrom(const MailDBOperateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailDBOperateInfo::IsInitialized() const {

  return true;
}

void MailDBOperateInfo::Swap(MailDBOperateInfo* other) {
  if (other != this) {
    mid_lst_.Swap(&other->mid_lst_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailDBOperateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailDBOperateInfo_descriptor_;
  metadata.reflection = MailDBOperateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveMailDBReq::kCharidFieldNumber;
const int SaveMailDBReq::kInfoFieldNumber;
const int SaveMailDBReq::kDelFieldNumber;
const int SaveMailDBReq::kFetchFieldNumber;
const int SaveMailDBReq::kReadFieldNumber;
const int SaveMailDBReq::kNotifyFieldNumber;
#endif  // !_MSC_VER

SaveMailDBReq::SaveMailDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveMailDBReq::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::NewMailDBInfo*>(&::proto_ff::NewMailDBInfo::default_instance());
  del_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
  fetch_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
  read_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
}

SaveMailDBReq::SaveMailDBReq(const SaveMailDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveMailDBReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  del_ = NULL;
  fetch_ = NULL;
  read_ = NULL;
  notify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveMailDBReq::~SaveMailDBReq() {
  SharedDtor();
}

void SaveMailDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete del_;
    delete fetch_;
    delete read_;
  }
}

void SaveMailDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveMailDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveMailDBReq_descriptor_;
}

const SaveMailDBReq& SaveMailDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SaveMailDBReq* SaveMailDBReq::default_instance_ = NULL;

SaveMailDBReq* SaveMailDBReq::New() const {
  return new SaveMailDBReq;
}

void SaveMailDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::NewMailDBInfo::Clear();
    }
    if (has_del()) {
      if (del_ != NULL) del_->::proto_ff::MailDBOperateInfo::Clear();
    }
    if (has_fetch()) {
      if (fetch_ != NULL) fetch_->::proto_ff::MailDBOperateInfo::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::proto_ff::MailDBOperateInfo::Clear();
    }
    notify_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveMailDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.NewMailDBInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_del;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo del = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fetch;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo fetch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_read;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo read = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_notify;
        break;
      }

      // optional int32 notify = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_)));
          set_has_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveMailDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional .proto_ff.NewMailDBInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .proto_ff.MailDBOperateInfo del = 3;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->del(), output);
  }

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fetch(), output);
  }

  // optional .proto_ff.MailDBOperateInfo read = 5;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read(), output);
  }

  // optional int32 notify = 6;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveMailDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional .proto_ff.NewMailDBInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .proto_ff.MailDBOperateInfo del = 3;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->del(), target);
  }

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fetch(), target);
  }

  // optional .proto_ff.MailDBOperateInfo read = 5;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read(), target);
  }

  // optional int32 notify = 6;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveMailDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .proto_ff.NewMailDBInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .proto_ff.MailDBOperateInfo del = 3;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del());
    }

    // optional .proto_ff.MailDBOperateInfo fetch = 4;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch());
    }

    // optional .proto_ff.MailDBOperateInfo read = 5;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

    // optional int32 notify = 6;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveMailDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveMailDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveMailDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveMailDBReq::MergeFrom(const SaveMailDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::NewMailDBInfo::MergeFrom(from.info());
    }
    if (from.has_del()) {
      mutable_del()->::proto_ff::MailDBOperateInfo::MergeFrom(from.del());
    }
    if (from.has_fetch()) {
      mutable_fetch()->::proto_ff::MailDBOperateInfo::MergeFrom(from.fetch());
    }
    if (from.has_read()) {
      mutable_read()->::proto_ff::MailDBOperateInfo::MergeFrom(from.read());
    }
    if (from.has_notify()) {
      set_notify(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveMailDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveMailDBReq::CopyFrom(const SaveMailDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveMailDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SaveMailDBReq::Swap(SaveMailDBReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(del_, other->del_);
    std::swap(fetch_, other->fetch_);
    std::swap(read_, other->read_);
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveMailDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveMailDBReq_descriptor_;
  metadata.reflection = SaveMailDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveMailDBRsp::kCharidFieldNumber;
const int SaveMailDBRsp::kInfoFieldNumber;
const int SaveMailDBRsp::kDelFieldNumber;
const int SaveMailDBRsp::kFetchFieldNumber;
const int SaveMailDBRsp::kReadFieldNumber;
const int SaveMailDBRsp::kNotifyFieldNumber;
#endif  // !_MSC_VER

SaveMailDBRsp::SaveMailDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveMailDBRsp::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::NewMailDBInfo*>(&::proto_ff::NewMailDBInfo::default_instance());
  del_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
  fetch_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
  read_ = const_cast< ::proto_ff::MailDBOperateInfo*>(&::proto_ff::MailDBOperateInfo::default_instance());
}

SaveMailDBRsp::SaveMailDBRsp(const SaveMailDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveMailDBRsp::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  info_ = NULL;
  del_ = NULL;
  fetch_ = NULL;
  read_ = NULL;
  notify_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveMailDBRsp::~SaveMailDBRsp() {
  SharedDtor();
}

void SaveMailDBRsp::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete del_;
    delete fetch_;
    delete read_;
  }
}

void SaveMailDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveMailDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveMailDBRsp_descriptor_;
}

const SaveMailDBRsp& SaveMailDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SaveMailDBRsp* SaveMailDBRsp::default_instance_ = NULL;

SaveMailDBRsp* SaveMailDBRsp::New() const {
  return new SaveMailDBRsp;
}

void SaveMailDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::NewMailDBInfo::Clear();
    }
    if (has_del()) {
      if (del_ != NULL) del_->::proto_ff::MailDBOperateInfo::Clear();
    }
    if (has_fetch()) {
      if (fetch_ != NULL) fetch_->::proto_ff::MailDBOperateInfo::Clear();
    }
    if (has_read()) {
      if (read_ != NULL) read_->::proto_ff::MailDBOperateInfo::Clear();
    }
    notify_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveMailDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .proto_ff.NewMailDBInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_del;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo del = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_del:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_del()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_fetch;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo fetch = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fetch:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fetch()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_read;
        break;
      }

      // optional .proto_ff.MailDBOperateInfo read = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_read()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_notify;
        break;
      }

      // optional int32 notify = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_notify:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &notify_)));
          set_has_notify();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveMailDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional .proto_ff.NewMailDBInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  // optional .proto_ff.MailDBOperateInfo del = 3;
  if (has_del()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->del(), output);
  }

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->fetch(), output);
  }

  // optional .proto_ff.MailDBOperateInfo read = 5;
  if (has_read()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->read(), output);
  }

  // optional int32 notify = 6;
  if (has_notify()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->notify(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveMailDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional .proto_ff.NewMailDBInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  // optional .proto_ff.MailDBOperateInfo del = 3;
  if (has_del()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->del(), target);
  }

  // optional .proto_ff.MailDBOperateInfo fetch = 4;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->fetch(), target);
  }

  // optional .proto_ff.MailDBOperateInfo read = 5;
  if (has_read()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->read(), target);
  }

  // optional int32 notify = 6;
  if (has_notify()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->notify(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveMailDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .proto_ff.NewMailDBInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .proto_ff.MailDBOperateInfo del = 3;
    if (has_del()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->del());
    }

    // optional .proto_ff.MailDBOperateInfo fetch = 4;
    if (has_fetch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fetch());
    }

    // optional .proto_ff.MailDBOperateInfo read = 5;
    if (has_read()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->read());
    }

    // optional int32 notify = 6;
    if (has_notify()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->notify());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveMailDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveMailDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveMailDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveMailDBRsp::MergeFrom(const SaveMailDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::proto_ff::NewMailDBInfo::MergeFrom(from.info());
    }
    if (from.has_del()) {
      mutable_del()->::proto_ff::MailDBOperateInfo::MergeFrom(from.del());
    }
    if (from.has_fetch()) {
      mutable_fetch()->::proto_ff::MailDBOperateInfo::MergeFrom(from.fetch());
    }
    if (from.has_read()) {
      mutable_read()->::proto_ff::MailDBOperateInfo::MergeFrom(from.read());
    }
    if (from.has_notify()) {
      set_notify(from.notify());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveMailDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveMailDBRsp::CopyFrom(const SaveMailDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveMailDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SaveMailDBRsp::Swap(SaveMailDBRsp* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(del_, other->del_);
    std::swap(fetch_, other->fetch_);
    std::swap(read_, other->read_);
    std::swap(notify_, other->notify_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveMailDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveMailDBRsp_descriptor_;
  metadata.reflection = SaveMailDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMailDBRequest::kCharIDFieldNumber;
const int CharacterMailDBRequest::kZoneMailFlagFieldNumber;
const int CharacterMailDBRequest::kOffsetFieldNumber;
const int CharacterMailDBRequest::kReqidFieldNumber;
#endif  // !_MSC_VER

CharacterMailDBRequest::CharacterMailDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMailDBRequest::InitAsDefaultInstance() {
}

CharacterMailDBRequest::CharacterMailDBRequest(const CharacterMailDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMailDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  zone_mail_flag_ = 0u;
  offset_ = 0;
  reqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMailDBRequest::~CharacterMailDBRequest() {
  SharedDtor();
}

void CharacterMailDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMailDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMailDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMailDBRequest_descriptor_;
}

const CharacterMailDBRequest& CharacterMailDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

CharacterMailDBRequest* CharacterMailDBRequest::default_instance_ = NULL;

CharacterMailDBRequest* CharacterMailDBRequest::New() const {
  return new CharacterMailDBRequest;
}

void CharacterMailDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    zone_mail_flag_ = 0u;
    offset_ = 0;
    reqid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMailDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zone_mail_flag;
        break;
      }

      // optional uint32 zone_mail_flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zone_mail_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zone_mail_flag_)));
          set_has_zone_mail_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reqid;
        break;
      }

      // optional uint32 reqid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMailDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 zone_mail_flag = 2;
  if (has_zone_mail_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zone_mail_flag(), output);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // optional uint32 reqid = 4;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMailDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 zone_mail_flag = 2;
  if (has_zone_mail_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zone_mail_flag(), target);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // optional uint32 reqid = 4;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMailDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zone_mail_flag = 2;
    if (has_zone_mail_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zone_mail_flag());
    }

    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional uint32 reqid = 4;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMailDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMailDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMailDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMailDBRequest::MergeFrom(const CharacterMailDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zone_mail_flag()) {
      set_zone_mail_flag(from.zone_mail_flag());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMailDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMailDBRequest::CopyFrom(const CharacterMailDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMailDBRequest::IsInitialized() const {

  return true;
}

void CharacterMailDBRequest::Swap(CharacterMailDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(zone_mail_flag_, other->zone_mail_flag_);
    std::swap(offset_, other->offset_);
    std::swap(reqid_, other->reqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMailDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMailDBRequest_descriptor_;
  metadata.reflection = CharacterMailDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharacterMailDBResponse::kCharIDFieldNumber;
const int CharacterMailDBResponse::kInfoFieldNumber;
const int CharacterMailDBResponse::kZoneMailIdFieldNumber;
const int CharacterMailDBResponse::kOffsetFieldNumber;
const int CharacterMailDBResponse::kReqidFieldNumber;
#endif  // !_MSC_VER

CharacterMailDBResponse::CharacterMailDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharacterMailDBResponse::InitAsDefaultInstance() {
}

CharacterMailDBResponse::CharacterMailDBResponse(const CharacterMailDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharacterMailDBResponse::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  zonemailid_ = 0u;
  offset_ = 0;
  reqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharacterMailDBResponse::~CharacterMailDBResponse() {
  SharedDtor();
}

void CharacterMailDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharacterMailDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharacterMailDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharacterMailDBResponse_descriptor_;
}

const CharacterMailDBResponse& CharacterMailDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

CharacterMailDBResponse* CharacterMailDBResponse::default_instance_ = NULL;

CharacterMailDBResponse* CharacterMailDBResponse::New() const {
  return new CharacterMailDBResponse;
}

void CharacterMailDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    zonemailid_ = 0u;
    offset_ = 0;
    reqid_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharacterMailDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.MailInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_zoneMailId;
        break;
      }

      // optional uint32 zoneMailId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneMailId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zonemailid_)));
          set_has_zonemailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }

      // optional int32 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reqid;
        break;
      }

      // optional uint32 reqid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqid_)));
          set_has_reqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharacterMailDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated .proto_ff.MailInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional uint32 zoneMailId = 3;
  if (has_zonemailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zonemailid(), output);
  }

  // optional int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }

  // optional uint32 reqid = 5;
  if (has_reqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharacterMailDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated .proto_ff.MailInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional uint32 zoneMailId = 3;
  if (has_zonemailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zonemailid(), target);
  }

  // optional int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }

  // optional uint32 reqid = 5;
  if (has_reqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharacterMailDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 zoneMailId = 3;
    if (has_zonemailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zonemailid());
    }

    // optional int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional uint32 reqid = 5;
    if (has_reqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqid());
    }

  }
  // repeated .proto_ff.MailInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharacterMailDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharacterMailDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharacterMailDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharacterMailDBResponse::MergeFrom(const CharacterMailDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_zonemailid()) {
      set_zonemailid(from.zonemailid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_reqid()) {
      set_reqid(from.reqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharacterMailDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharacterMailDBResponse::CopyFrom(const CharacterMailDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharacterMailDBResponse::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void CharacterMailDBResponse::Swap(CharacterMailDBResponse* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    info_.Swap(&other->info_);
    std::swap(zonemailid_, other->zonemailid_);
    std::swap(offset_, other->offset_);
    std::swap(reqid_, other->reqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharacterMailDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharacterMailDBResponse_descriptor_;
  metadata.reflection = CharacterMailDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MaxMailIDRequest::MaxMailIDRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaxMailIDRequest::InitAsDefaultInstance() {
}

MaxMailIDRequest::MaxMailIDRequest(const MaxMailIDRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaxMailIDRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxMailIDRequest::~MaxMailIDRequest() {
  SharedDtor();
}

void MaxMailIDRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaxMailIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxMailIDRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxMailIDRequest_descriptor_;
}

const MaxMailIDRequest& MaxMailIDRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MaxMailIDRequest* MaxMailIDRequest::default_instance_ = NULL;

MaxMailIDRequest* MaxMailIDRequest::New() const {
  return new MaxMailIDRequest;
}

void MaxMailIDRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxMailIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MaxMailIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaxMailIDRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaxMailIDRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxMailIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxMailIDRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxMailIDRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxMailIDRequest::MergeFrom(const MaxMailIDRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxMailIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxMailIDRequest::CopyFrom(const MaxMailIDRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxMailIDRequest::IsInitialized() const {

  return true;
}

void MaxMailIDRequest::Swap(MaxMailIDRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxMailIDRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxMailIDRequest_descriptor_;
  metadata.reflection = MaxMailIDRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaxMailIDResponse::kMaxZoneMailIdFieldNumber;
#endif  // !_MSC_VER

MaxMailIDResponse::MaxMailIDResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaxMailIDResponse::InitAsDefaultInstance() {
}

MaxMailIDResponse::MaxMailIDResponse(const MaxMailIDResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaxMailIDResponse::SharedCtor() {
  _cached_size_ = 0;
  maxzonemailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaxMailIDResponse::~MaxMailIDResponse() {
  SharedDtor();
}

void MaxMailIDResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MaxMailIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaxMailIDResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaxMailIDResponse_descriptor_;
}

const MaxMailIDResponse& MaxMailIDResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MaxMailIDResponse* MaxMailIDResponse::default_instance_ = NULL;

MaxMailIDResponse* MaxMailIDResponse::New() const {
  return new MaxMailIDResponse;
}

void MaxMailIDResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxzonemailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaxMailIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 maxZoneMailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxzonemailid_)));
          set_has_maxzonemailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaxMailIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 maxZoneMailId = 1;
  if (has_maxzonemailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxzonemailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaxMailIDResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 maxZoneMailId = 1;
  if (has_maxzonemailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxzonemailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaxMailIDResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 maxZoneMailId = 1;
    if (has_maxzonemailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxzonemailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaxMailIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaxMailIDResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaxMailIDResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaxMailIDResponse::MergeFrom(const MaxMailIDResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxzonemailid()) {
      set_maxzonemailid(from.maxzonemailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaxMailIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaxMailIDResponse::CopyFrom(const MaxMailIDResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaxMailIDResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MaxMailIDResponse::Swap(MaxMailIDResponse* other) {
  if (other != this) {
    std::swap(maxzonemailid_, other->maxzonemailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaxMailIDResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaxMailIDResponse_descriptor_;
  metadata.reflection = MaxMailIDResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteCharacterMail::kCharIDFieldNumber;
#endif  // !_MSC_VER

DeleteCharacterMail::DeleteCharacterMail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteCharacterMail::InitAsDefaultInstance() {
}

DeleteCharacterMail::DeleteCharacterMail(const DeleteCharacterMail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteCharacterMail::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteCharacterMail::~DeleteCharacterMail() {
  SharedDtor();
}

void DeleteCharacterMail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteCharacterMail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteCharacterMail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteCharacterMail_descriptor_;
}

const DeleteCharacterMail& DeleteCharacterMail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DeleteCharacterMail* DeleteCharacterMail::default_instance_ = NULL;

DeleteCharacterMail* DeleteCharacterMail::New() const {
  return new DeleteCharacterMail;
}

void DeleteCharacterMail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteCharacterMail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteCharacterMail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteCharacterMail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteCharacterMail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteCharacterMail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteCharacterMail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteCharacterMail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteCharacterMail::MergeFrom(const DeleteCharacterMail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteCharacterMail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCharacterMail::CopyFrom(const DeleteCharacterMail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCharacterMail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DeleteCharacterMail::Swap(DeleteCharacterMail* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteCharacterMail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteCharacterMail_descriptor_;
  metadata.reflection = DeleteCharacterMail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneMailSaveRsp::kMailIdFieldNumber;
#endif  // !_MSC_VER

ZoneMailSaveRsp::ZoneMailSaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneMailSaveRsp::InitAsDefaultInstance() {
}

ZoneMailSaveRsp::ZoneMailSaveRsp(const ZoneMailSaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneMailSaveRsp::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneMailSaveRsp::~ZoneMailSaveRsp() {
  SharedDtor();
}

void ZoneMailSaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneMailSaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneMailSaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneMailSaveRsp_descriptor_;
}

const ZoneMailSaveRsp& ZoneMailSaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ZoneMailSaveRsp* ZoneMailSaveRsp::default_instance_ = NULL;

ZoneMailSaveRsp* ZoneMailSaveRsp::New() const {
  return new ZoneMailSaveRsp;
}

void ZoneMailSaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneMailSaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneMailSaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneMailSaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneMailSaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneMailSaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneMailSaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneMailSaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneMailSaveRsp::MergeFrom(const ZoneMailSaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneMailSaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneMailSaveRsp::CopyFrom(const ZoneMailSaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneMailSaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ZoneMailSaveRsp::Swap(ZoneMailSaveRsp* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneMailSaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneMailSaveRsp_descriptor_;
  metadata.reflection = ZoneMailSaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneMailTransCharacterMailReq::kMailIdFieldNumber;
const int ZoneMailTransCharacterMailReq::kCidFieldNumber;
const int ZoneMailTransCharacterMailReq::kCreatetimeFieldNumber;
#endif  // !_MSC_VER

ZoneMailTransCharacterMailReq::ZoneMailTransCharacterMailReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneMailTransCharacterMailReq::InitAsDefaultInstance() {
}

ZoneMailTransCharacterMailReq::ZoneMailTransCharacterMailReq(const ZoneMailTransCharacterMailReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneMailTransCharacterMailReq::SharedCtor() {
  _cached_size_ = 0;
  mailid_ = 0u;
  cid_ = GOOGLE_ULONGLONG(0);
  createtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneMailTransCharacterMailReq::~ZoneMailTransCharacterMailReq() {
  SharedDtor();
}

void ZoneMailTransCharacterMailReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneMailTransCharacterMailReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneMailTransCharacterMailReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneMailTransCharacterMailReq_descriptor_;
}

const ZoneMailTransCharacterMailReq& ZoneMailTransCharacterMailReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ZoneMailTransCharacterMailReq* ZoneMailTransCharacterMailReq::default_instance_ = NULL;

ZoneMailTransCharacterMailReq* ZoneMailTransCharacterMailReq::New() const {
  return new ZoneMailTransCharacterMailReq;
}

void ZoneMailTransCharacterMailReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mailid_ = 0u;
    cid_ = GOOGLE_ULONGLONG(0);
    createtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneMailTransCharacterMailReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 mailId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mailid_)));
          set_has_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_createtime;
        break;
      }

      // required uint64 createtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneMailTransCharacterMailReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 mailId = 1;
  if (has_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mailid(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required uint64 createtime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->createtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneMailTransCharacterMailReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 mailId = 1;
  if (has_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mailid(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required uint64 createtime = 3;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->createtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneMailTransCharacterMailReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 mailId = 1;
    if (has_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mailid());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 createtime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->createtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneMailTransCharacterMailReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneMailTransCharacterMailReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneMailTransCharacterMailReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneMailTransCharacterMailReq::MergeFrom(const ZoneMailTransCharacterMailReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mailid()) {
      set_mailid(from.mailid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneMailTransCharacterMailReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneMailTransCharacterMailReq::CopyFrom(const ZoneMailTransCharacterMailReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneMailTransCharacterMailReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ZoneMailTransCharacterMailReq::Swap(ZoneMailTransCharacterMailReq* other) {
  if (other != this) {
    std::swap(mailid_, other->mailid_);
    std::swap(cid_, other->cid_);
    std::swap(createtime_, other->createtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneMailTransCharacterMailReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneMailTransCharacterMailReq_descriptor_;
  metadata.reflection = ZoneMailTransCharacterMailReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneMailTransCharacterMailRsp::kCidFieldNumber;
const int ZoneMailTransCharacterMailRsp::kDataFieldNumber;
const int ZoneMailTransCharacterMailRsp::kMaxZoneMailidFieldNumber;
#endif  // !_MSC_VER

ZoneMailTransCharacterMailRsp::ZoneMailTransCharacterMailRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneMailTransCharacterMailRsp::InitAsDefaultInstance() {
}

ZoneMailTransCharacterMailRsp::ZoneMailTransCharacterMailRsp(const ZoneMailTransCharacterMailRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneMailTransCharacterMailRsp::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  max_zone_mailid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneMailTransCharacterMailRsp::~ZoneMailTransCharacterMailRsp() {
  SharedDtor();
}

void ZoneMailTransCharacterMailRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneMailTransCharacterMailRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneMailTransCharacterMailRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneMailTransCharacterMailRsp_descriptor_;
}

const ZoneMailTransCharacterMailRsp& ZoneMailTransCharacterMailRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ZoneMailTransCharacterMailRsp* ZoneMailTransCharacterMailRsp::default_instance_ = NULL;

ZoneMailTransCharacterMailRsp* ZoneMailTransCharacterMailRsp::New() const {
  return new ZoneMailTransCharacterMailRsp;
}

void ZoneMailTransCharacterMailRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    max_zone_mailid_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneMailTransCharacterMailRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .proto_ff.MailInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectTag(24)) goto parse_max_zone_mailid;
        break;
      }

      // required uint32 max_zone_mailid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_zone_mailid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_zone_mailid_)));
          set_has_max_zone_mailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneMailTransCharacterMailRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // repeated .proto_ff.MailInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  // required uint32 max_zone_mailid = 3;
  if (has_max_zone_mailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->max_zone_mailid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneMailTransCharacterMailRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // repeated .proto_ff.MailInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  // required uint32 max_zone_mailid = 3;
  if (has_max_zone_mailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->max_zone_mailid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneMailTransCharacterMailRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 max_zone_mailid = 3;
    if (has_max_zone_mailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_zone_mailid());
    }

  }
  // repeated .proto_ff.MailInfo data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneMailTransCharacterMailRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneMailTransCharacterMailRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneMailTransCharacterMailRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneMailTransCharacterMailRsp::MergeFrom(const ZoneMailTransCharacterMailRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_max_zone_mailid()) {
      set_max_zone_mailid(from.max_zone_mailid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneMailTransCharacterMailRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneMailTransCharacterMailRsp::CopyFrom(const ZoneMailTransCharacterMailRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneMailTransCharacterMailRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void ZoneMailTransCharacterMailRsp::Swap(ZoneMailTransCharacterMailRsp* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    data_.Swap(&other->data_);
    std::swap(max_zone_mailid_, other->max_zone_mailid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneMailTransCharacterMailRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneMailTransCharacterMailRsp_descriptor_;
  metadata.reflection = ZoneMailTransCharacterMailRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebMailDBDataReq::kOpTypeFieldNumber;
const int WebMailDBDataReq::kCidFieldNumber;
const int WebMailDBDataReq::kPernumFieldNumber;
const int WebMailDBDataReq::kCurpageFieldNumber;
const int WebMailDBDataReq::kIdLstFieldNumber;
const int WebMailDBDataReq::kWebIdFieldNumber;
#endif  // !_MSC_VER

WebMailDBDataReq::WebMailDBDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebMailDBDataReq::InitAsDefaultInstance() {
}

WebMailDBDataReq::WebMailDBDataReq(const WebMailDBDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebMailDBDataReq::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  pernum_ = 0u;
  curpage_ = 0u;
  webid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebMailDBDataReq::~WebMailDBDataReq() {
  SharedDtor();
}

void WebMailDBDataReq::SharedDtor() {
  if (webid_ != &::google::protobuf::internal::kEmptyString) {
    delete webid_;
  }
  if (this != default_instance_) {
  }
}

void WebMailDBDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebMailDBDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebMailDBDataReq_descriptor_;
}

const WebMailDBDataReq& WebMailDBDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

WebMailDBDataReq* WebMailDBDataReq::default_instance_ = NULL;

WebMailDBDataReq* WebMailDBDataReq::New() const {
  return new WebMailDBDataReq;
}

void WebMailDBDataReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    pernum_ = 0u;
    curpage_ = 0u;
    if (has_webid()) {
      if (webid_ != &::google::protobuf::internal::kEmptyString) {
        webid_->clear();
      }
    }
  }
  id_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebMailDBDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pernum;
        break;
      }

      // optional uint32 pernum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pernum_)));
          set_has_pernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_lst;
        break;
      }

      // repeated uint32 id_lst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_lst;
        if (input->ExpectTag(50)) goto parse_webId;
        break;
      }

      // required bytes webId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_webid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebMailDBDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op_type(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 pernum = 3;
  if (has_pernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pernum(), output);
  }

  // optional uint32 curpage = 4;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->curpage(), output);
  }

  // repeated uint32 id_lst = 5;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->id_lst(i), output);
  }

  // required bytes webId = 6;
  if (has_webid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->webid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebMailDBDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op_type(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 pernum = 3;
  if (has_pernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pernum(), target);
  }

  // optional uint32 curpage = 4;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->curpage(), target);
  }

  // repeated uint32 id_lst = 5;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->id_lst(i), target);
  }

  // required bytes webId = 6;
  if (has_webid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->webid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebMailDBDataReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_type());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 pernum = 3;
    if (has_pernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pernum());
    }

    // optional uint32 curpage = 4;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // required bytes webId = 6;
    if (has_webid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->webid());
    }

  }
  // repeated uint32 id_lst = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebMailDBDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebMailDBDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebMailDBDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebMailDBDataReq::MergeFrom(const WebMailDBDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_pernum()) {
      set_pernum(from.pernum());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_webid()) {
      set_webid(from.webid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebMailDBDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebMailDBDataReq::CopyFrom(const WebMailDBDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMailDBDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000020) != 0x00000020) return false;

  return true;
}

void WebMailDBDataReq::Swap(WebMailDBDataReq* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(cid_, other->cid_);
    std::swap(pernum_, other->pernum_);
    std::swap(curpage_, other->curpage_);
    id_lst_.Swap(&other->id_lst_);
    std::swap(webid_, other->webid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebMailDBDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebMailDBDataReq_descriptor_;
  metadata.reflection = WebMailDBDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WebMailDBDataRsp::kOpTypeFieldNumber;
const int WebMailDBDataRsp::kCidFieldNumber;
const int WebMailDBDataRsp::kCurpageFieldNumber;
const int WebMailDBDataRsp::kTotalcountFieldNumber;
const int WebMailDBDataRsp::kIdLstFieldNumber;
const int WebMailDBDataRsp::kInfoLstFieldNumber;
const int WebMailDBDataRsp::kWebIdFieldNumber;
#endif  // !_MSC_VER

WebMailDBDataRsp::WebMailDBDataRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WebMailDBDataRsp::InitAsDefaultInstance() {
}

WebMailDBDataRsp::WebMailDBDataRsp(const WebMailDBDataRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WebMailDBDataRsp::SharedCtor() {
  _cached_size_ = 0;
  op_type_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  curpage_ = 0u;
  totalcount_ = 0u;
  webid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WebMailDBDataRsp::~WebMailDBDataRsp() {
  SharedDtor();
}

void WebMailDBDataRsp::SharedDtor() {
  if (webid_ != &::google::protobuf::internal::kEmptyString) {
    delete webid_;
  }
  if (this != default_instance_) {
  }
}

void WebMailDBDataRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WebMailDBDataRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WebMailDBDataRsp_descriptor_;
}

const WebMailDBDataRsp& WebMailDBDataRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

WebMailDBDataRsp* WebMailDBDataRsp::default_instance_ = NULL;

WebMailDBDataRsp* WebMailDBDataRsp::New() const {
  return new WebMailDBDataRsp;
}

void WebMailDBDataRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_type_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    curpage_ = 0u;
    totalcount_ = 0u;
    if (has_webid()) {
      if (webid_ != &::google::protobuf::internal::kEmptyString) {
        webid_->clear();
      }
    }
  }
  id_lst_.Clear();
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WebMailDBDataRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_type_)));
          set_has_op_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curpage;
        break;
      }

      // optional uint32 curpage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curpage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curpage_)));
          set_has_curpage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalcount;
        break;
      }

      // optional uint32 totalcount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_lst;
        break;
      }

      // repeated uint32 id_lst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id_lst;
        if (input->ExpectTag(50)) goto parse_info_lst;
        break;
      }

      // repeated .proto_ff.WebMailDataProto info_lst = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_info_lst;
        if (input->ExpectTag(58)) goto parse_webId;
        break;
      }

      // required bytes webId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_webId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_webid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WebMailDBDataRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op_type(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->curpage(), output);
  }

  // optional uint32 totalcount = 4;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->totalcount(), output);
  }

  // repeated uint32 id_lst = 5;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->id_lst(i), output);
  }

  // repeated .proto_ff.WebMailDataProto info_lst = 6;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->info_lst(i), output);
  }

  // required bytes webId = 7;
  if (has_webid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->webid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WebMailDBDataRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 op_type = 1;
  if (has_op_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op_type(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 curpage = 3;
  if (has_curpage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->curpage(), target);
  }

  // optional uint32 totalcount = 4;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->totalcount(), target);
  }

  // repeated uint32 id_lst = 5;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->id_lst(i), target);
  }

  // repeated .proto_ff.WebMailDataProto info_lst = 6;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->info_lst(i), target);
  }

  // required bytes webId = 7;
  if (has_webid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->webid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WebMailDBDataRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 op_type = 1;
    if (has_op_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op_type());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 curpage = 3;
    if (has_curpage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curpage());
    }

    // optional uint32 totalcount = 4;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->totalcount());
    }

    // required bytes webId = 7;
    if (has_webid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->webid());
    }

  }
  // repeated uint32 id_lst = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  // repeated .proto_ff.WebMailDataProto info_lst = 6;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WebMailDBDataRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WebMailDBDataRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WebMailDBDataRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WebMailDBDataRsp::MergeFrom(const WebMailDBDataRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  info_lst_.MergeFrom(from.info_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op_type()) {
      set_op_type(from.op_type());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_curpage()) {
      set_curpage(from.curpage());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_webid()) {
      set_webid(from.webid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WebMailDBDataRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WebMailDBDataRsp::CopyFrom(const WebMailDBDataRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WebMailDBDataRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000040) != 0x00000040) return false;

  return true;
}

void WebMailDBDataRsp::Swap(WebMailDBDataRsp* other) {
  if (other != this) {
    std::swap(op_type_, other->op_type_);
    std::swap(cid_, other->cid_);
    std::swap(curpage_, other->curpage_);
    std::swap(totalcount_, other->totalcount_);
    id_lst_.Swap(&other->id_lst_);
    info_lst_.Swap(&other->info_lst_);
    std::swap(webid_, other->webid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WebMailDBDataRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WebMailDBDataRsp_descriptor_;
  metadata.reflection = WebMailDBDataRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDBInfo::kCharIDFieldNumber;
const int FriendDBInfo::kDataFieldNumber;
#endif  // !_MSC_VER

FriendDBInfo::FriendDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDBInfo::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::RelationDBInfo*>(&::proto_ff::RelationDBInfo::default_instance());
}

FriendDBInfo::FriendDBInfo(const FriendDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDBInfo::~FriendDBInfo() {
  SharedDtor();
}

void FriendDBInfo::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FriendDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDBInfo_descriptor_;
}

const FriendDBInfo& FriendDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FriendDBInfo* FriendDBInfo::default_instance_ = NULL;

FriendDBInfo* FriendDBInfo::New() const {
  return new FriendDBInfo;
}

void FriendDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::RelationDBInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional .proto_ff.RelationDBInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional .proto_ff.RelationDBInfo data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional .proto_ff.RelationDBInfo data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional .proto_ff.RelationDBInfo data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDBInfo::MergeFrom(const FriendDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::RelationDBInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDBInfo::CopyFrom(const FriendDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDBInfo::IsInitialized() const {

  return true;
}

void FriendDBInfo::Swap(FriendDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDBInfo_descriptor_;
  metadata.reflection = FriendDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDBRequest::kCharidFieldNumber;
const int FriendDBRequest::kDstidLstFieldNumber;
const int FriendDBRequest::kOperateTypeFieldNumber;
const int FriendDBRequest::kDataFieldNumber;
const int FriendDBRequest::kQueryTimesFieldNumber;
#endif  // !_MSC_VER

FriendDBRequest::FriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDBRequest::InitAsDefaultInstance() {
}

FriendDBRequest::FriendDBRequest(const FriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  operate_type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDBRequest::~FriendDBRequest() {
  SharedDtor();
}

void FriendDBRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void FriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDBRequest_descriptor_;
}

const FriendDBRequest& FriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FriendDBRequest* FriendDBRequest::default_instance_ = NULL;

FriendDBRequest* FriendDBRequest::New() const {
  return new FriendDBRequest;
}

void FriendDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    operate_type_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    query_times_ = 0u;
  }
  dstid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstid_lst;
        break;
      }

      // repeated uint64 dstid_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_dstid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_dstid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dstid_lst;
        if (input->ExpectTag(24)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_query_times;
        break;
      }

      // optional uint32 query_times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_times_)));
          set_has_query_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // repeated uint64 dstid_lst = 2;
  for (int i = 0; i < this->dstid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->dstid_lst(i), output);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate_type(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  // optional uint32 query_times = 5;
  if (has_query_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->query_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // repeated uint64 dstid_lst = 2;
  for (int i = 0; i < this->dstid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->dstid_lst(i), target);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate_type(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  // optional uint32 query_times = 5;
  if (has_query_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->query_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 operate_type = 3;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 query_times = 5;
    if (has_query_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_times());
    }

  }
  // repeated uint64 dstid_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dstid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->dstid_lst(i));
    }
    total_size += 1 * this->dstid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDBRequest::MergeFrom(const FriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  dstid_lst_.MergeFrom(from.dstid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_query_times()) {
      set_query_times(from.query_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDBRequest::CopyFrom(const FriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDBRequest::IsInitialized() const {

  return true;
}

void FriendDBRequest::Swap(FriendDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    dstid_lst_.Swap(&other->dstid_lst_);
    std::swap(operate_type_, other->operate_type_);
    std::swap(data_, other->data_);
    std::swap(query_times_, other->query_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDBRequest_descriptor_;
  metadata.reflection = FriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendDBResponse::kRetcodeFieldNumber;
const int FriendDBResponse::kCharidFieldNumber;
const int FriendDBResponse::kOperateTypeFieldNumber;
const int FriendDBResponse::kInfoLstFieldNumber;
const int FriendDBResponse::kLastLstFieldNumber;
const int FriendDBResponse::kDataFieldNumber;
const int FriendDBResponse::kQueryTimesFieldNumber;
#endif  // !_MSC_VER

FriendDBResponse::FriendDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendDBResponse::InitAsDefaultInstance() {
}

FriendDBResponse::FriendDBResponse(const FriendDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  operate_type_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  query_times_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendDBResponse::~FriendDBResponse() {
  SharedDtor();
}

void FriendDBResponse::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void FriendDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendDBResponse_descriptor_;
}

const FriendDBResponse& FriendDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FriendDBResponse* FriendDBResponse::default_instance_ = NULL;

FriendDBResponse* FriendDBResponse::New() const {
  return new FriendDBResponse;
}

void FriendDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    charid_ = GOOGLE_ULONGLONG(0);
    operate_type_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    query_times_ = 0u;
  }
  info_lst_.Clear();
  last_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional uint64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_operate_type;
        break;
      }

      // optional uint32 operate_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &operate_type_)));
          set_has_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info_lst;
        break;
      }

      // repeated .proto_ff.FriendDBInfo info_lst = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_info_lst;
        if (input->ExpectTag(40)) goto parse_last_lst;
        break;
      }

      // repeated uint64 last_lst = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_last_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_last_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_last_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_last_lst;
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional bytes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_query_times;
        break;
      }

      // optional uint32 query_times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_query_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &query_times_)));
          set_has_query_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->charid(), output);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->operate_type(), output);
  }

  // repeated .proto_ff.FriendDBInfo info_lst = 4;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info_lst(i), output);
  }

  // repeated uint64 last_lst = 5;
  for (int i = 0; i < this->last_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->last_lst(i), output);
  }

  // optional bytes data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->data(), output);
  }

  // optional uint32 query_times = 7;
  if (has_query_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->query_times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional uint64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->charid(), target);
  }

  // optional uint32 operate_type = 3;
  if (has_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->operate_type(), target);
  }

  // repeated .proto_ff.FriendDBInfo info_lst = 4;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info_lst(i), target);
  }

  // repeated uint64 last_lst = 5;
  for (int i = 0; i < this->last_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->last_lst(i), target);
  }

  // optional bytes data = 6;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->data(), target);
  }

  // optional uint32 query_times = 7;
  if (has_query_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->query_times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional uint64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 operate_type = 3;
    if (has_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->operate_type());
    }

    // optional bytes data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional uint32 query_times = 7;
    if (has_query_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->query_times());
    }

  }
  // repeated .proto_ff.FriendDBInfo info_lst = 4;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  // repeated uint64 last_lst = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->last_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->last_lst(i));
    }
    total_size += 1 * this->last_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendDBResponse::MergeFrom(const FriendDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  last_lst_.MergeFrom(from.last_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_operate_type()) {
      set_operate_type(from.operate_type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_query_times()) {
      set_query_times(from.query_times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendDBResponse::CopyFrom(const FriendDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendDBResponse::IsInitialized() const {

  return true;
}

void FriendDBResponse::Swap(FriendDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(charid_, other->charid_);
    std::swap(operate_type_, other->operate_type_);
    info_lst_.Swap(&other->info_lst_);
    last_lst_.Swap(&other->last_lst_);
    std::swap(data_, other->data_);
    std::swap(query_times_, other->query_times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendDBResponse_descriptor_;
  metadata.reflection = FriendDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllFriendDBRequest::kOffsetFieldNumber;
#endif  // !_MSC_VER

AllFriendDBRequest::AllFriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllFriendDBRequest::InitAsDefaultInstance() {
}

AllFriendDBRequest::AllFriendDBRequest(const AllFriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllFriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllFriendDBRequest::~AllFriendDBRequest() {
  SharedDtor();
}

void AllFriendDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllFriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllFriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllFriendDBRequest_descriptor_;
}

const AllFriendDBRequest& AllFriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

AllFriendDBRequest* AllFriendDBRequest::default_instance_ = NULL;

AllFriendDBRequest* AllFriendDBRequest::New() const {
  return new AllFriendDBRequest;
}

void AllFriendDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllFriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllFriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllFriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllFriendDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllFriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllFriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllFriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllFriendDBRequest::MergeFrom(const AllFriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllFriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllFriendDBRequest::CopyFrom(const AllFriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllFriendDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllFriendDBRequest::Swap(AllFriendDBRequest* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllFriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllFriendDBRequest_descriptor_;
  metadata.reflection = AllFriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllFriendDBResponse::kRetcodeFieldNumber;
const int AllFriendDBResponse::kOffsetFieldNumber;
const int AllFriendDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

AllFriendDBResponse::AllFriendDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllFriendDBResponse::InitAsDefaultInstance() {
}

AllFriendDBResponse::AllFriendDBResponse(const AllFriendDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllFriendDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllFriendDBResponse::~AllFriendDBResponse() {
  SharedDtor();
}

void AllFriendDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllFriendDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllFriendDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllFriendDBResponse_descriptor_;
}

const AllFriendDBResponse& AllFriendDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

AllFriendDBResponse* AllFriendDBResponse::default_instance_ = NULL;

AllFriendDBResponse* AllFriendDBResponse::New() const {
  return new AllFriendDBResponse;
}

void AllFriendDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    offset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllFriendDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .proto_ff.FriendDBInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllFriendDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .proto_ff.FriendDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllFriendDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .proto_ff.FriendDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllFriendDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .proto_ff.FriendDBInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllFriendDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllFriendDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllFriendDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllFriendDBResponse::MergeFrom(const AllFriendDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllFriendDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllFriendDBResponse::CopyFrom(const AllFriendDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllFriendDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllFriendDBResponse::Swap(AllFriendDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(offset_, other->offset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllFriendDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllFriendDBResponse_descriptor_;
  metadata.reflection = AllFriendDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveFriendDBRequest::kInfoFieldNumber;
#endif  // !_MSC_VER

SaveFriendDBRequest::SaveFriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveFriendDBRequest::InitAsDefaultInstance() {
}

SaveFriendDBRequest::SaveFriendDBRequest(const SaveFriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveFriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveFriendDBRequest::~SaveFriendDBRequest() {
  SharedDtor();
}

void SaveFriendDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveFriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveFriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveFriendDBRequest_descriptor_;
}

const SaveFriendDBRequest& SaveFriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SaveFriendDBRequest* SaveFriendDBRequest::default_instance_ = NULL;

SaveFriendDBRequest* SaveFriendDBRequest::New() const {
  return new SaveFriendDBRequest;
}

void SaveFriendDBRequest::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveFriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FriendDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveFriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FriendDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveFriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FriendDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveFriendDBRequest::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FriendDBInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveFriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveFriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveFriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveFriendDBRequest::MergeFrom(const SaveFriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveFriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveFriendDBRequest::CopyFrom(const SaveFriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveFriendDBRequest::IsInitialized() const {

  return true;
}

void SaveFriendDBRequest::Swap(SaveFriendDBRequest* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveFriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveFriendDBRequest_descriptor_;
  metadata.reflection = SaveFriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelteFriendDBRequest::kCharIdFieldNumber;
#endif  // !_MSC_VER

DelteFriendDBRequest::DelteFriendDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelteFriendDBRequest::InitAsDefaultInstance() {
}

DelteFriendDBRequest::DelteFriendDBRequest(const DelteFriendDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelteFriendDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelteFriendDBRequest::~DelteFriendDBRequest() {
  SharedDtor();
}

void DelteFriendDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelteFriendDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelteFriendDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelteFriendDBRequest_descriptor_;
}

const DelteFriendDBRequest& DelteFriendDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DelteFriendDBRequest* DelteFriendDBRequest::default_instance_ = NULL;

DelteFriendDBRequest* DelteFriendDBRequest::New() const {
  return new DelteFriendDBRequest;
}

void DelteFriendDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelteFriendDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelteFriendDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelteFriendDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelteFriendDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelteFriendDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelteFriendDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelteFriendDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelteFriendDBRequest::MergeFrom(const DelteFriendDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelteFriendDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelteFriendDBRequest::CopyFrom(const DelteFriendDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelteFriendDBRequest::IsInitialized() const {

  return true;
}

void DelteFriendDBRequest::Swap(DelteFriendDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelteFriendDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelteFriendDBRequest_descriptor_;
  metadata.reflection = DelteFriendDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GlobalDBRequst::GlobalDBRequst()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBRequst::InitAsDefaultInstance() {
}

GlobalDBRequst::GlobalDBRequst(const GlobalDBRequst& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBRequst::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBRequst::~GlobalDBRequst() {
  SharedDtor();
}

void GlobalDBRequst::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalDBRequst::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBRequst::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBRequst_descriptor_;
}

const GlobalDBRequst& GlobalDBRequst::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GlobalDBRequst* GlobalDBRequst::default_instance_ = NULL;

GlobalDBRequst* GlobalDBRequst::New() const {
  return new GlobalDBRequst;
}

void GlobalDBRequst::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBRequst::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GlobalDBRequst::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBRequst::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBRequst::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBRequst::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBRequst* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBRequst*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBRequst::MergeFrom(const GlobalDBRequst& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBRequst::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBRequst::CopyFrom(const GlobalDBRequst& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBRequst::IsInitialized() const {

  return true;
}

void GlobalDBRequst::Swap(GlobalDBRequst* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBRequst::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBRequst_descriptor_;
  metadata.reflection = GlobalDBRequst_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBEntry::kTypeIdFieldNumber;
const int GlobalDBEntry::kDataFieldNumber;
#endif  // !_MSC_VER

GlobalDBEntry::GlobalDBEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBEntry::InitAsDefaultInstance() {
}

GlobalDBEntry::GlobalDBEntry(const GlobalDBEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBEntry::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBEntry::~GlobalDBEntry() {
  SharedDtor();
}

void GlobalDBEntry::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GlobalDBEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBEntry_descriptor_;
}

const GlobalDBEntry& GlobalDBEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GlobalDBEntry* GlobalDBEntry::default_instance_ = NULL;

GlobalDBEntry* GlobalDBEntry::New() const {
  return new GlobalDBEntry;
}

void GlobalDBEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBEntry::MergeFrom(const GlobalDBEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBEntry::CopyFrom(const GlobalDBEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBEntry::IsInitialized() const {

  return true;
}

void GlobalDBEntry::Swap(GlobalDBEntry* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBEntry_descriptor_;
  metadata.reflection = GlobalDBEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBResponse::kEntryFieldNumber;
const int GlobalDBResponse::kIsfinishFieldNumber;
#endif  // !_MSC_VER

GlobalDBResponse::GlobalDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBResponse::InitAsDefaultInstance() {
}

GlobalDBResponse::GlobalDBResponse(const GlobalDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBResponse::SharedCtor() {
  _cached_size_ = 0;
  isfinish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBResponse::~GlobalDBResponse() {
  SharedDtor();
}

void GlobalDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBResponse_descriptor_;
}

const GlobalDBResponse& GlobalDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GlobalDBResponse* GlobalDBResponse::default_instance_ = NULL;

GlobalDBResponse* GlobalDBResponse::New() const {
  return new GlobalDBResponse;
}

void GlobalDBResponse::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isfinish_ = 0;
  }
  entry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GlobalDBEntry entry = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entry;
        if (input->ExpectTag(16)) goto parse_isfinish;
        break;
      }

      // optional int32 isfinish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isfinish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfinish_)));
          set_has_isfinish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GlobalDBEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entry(i), output);
  }

  // optional int32 isfinish = 2;
  if (has_isfinish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isfinish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GlobalDBEntry entry = 1;
  for (int i = 0; i < this->entry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entry(i), target);
  }

  // optional int32 isfinish = 2;
  if (has_isfinish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isfinish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 isfinish = 2;
    if (has_isfinish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfinish());
    }

  }
  // repeated .proto_ff.GlobalDBEntry entry = 1;
  total_size += 1 * this->entry_size();
  for (int i = 0; i < this->entry_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entry(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBResponse::MergeFrom(const GlobalDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  entry_.MergeFrom(from.entry_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isfinish()) {
      set_isfinish(from.isfinish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBResponse::CopyFrom(const GlobalDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBResponse::IsInitialized() const {

  return true;
}

void GlobalDBResponse::Swap(GlobalDBResponse* other) {
  if (other != this) {
    entry_.Swap(&other->entry_);
    std::swap(isfinish_, other->isfinish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBResponse_descriptor_;
  metadata.reflection = GlobalDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBSetRequest::kTypeIdFieldNumber;
const int GlobalDBSetRequest::kDataFieldNumber;
#endif  // !_MSC_VER

GlobalDBSetRequest::GlobalDBSetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBSetRequest::InitAsDefaultInstance() {
}

GlobalDBSetRequest::GlobalDBSetRequest(const GlobalDBSetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBSetRequest::SharedCtor() {
  _cached_size_ = 0;
  type_id_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBSetRequest::~GlobalDBSetRequest() {
  SharedDtor();
}

void GlobalDBSetRequest::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void GlobalDBSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBSetRequest_descriptor_;
}

const GlobalDBSetRequest& GlobalDBSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GlobalDBSetRequest* GlobalDBSetRequest::default_instance_ = NULL;

GlobalDBSetRequest* GlobalDBSetRequest::New() const {
  return new GlobalDBSetRequest;
}

void GlobalDBSetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_id_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type_id(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type_id = 1;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type_id(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBSetRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type_id = 1;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBSetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBSetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBSetRequest::MergeFrom(const GlobalDBSetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBSetRequest::CopyFrom(const GlobalDBSetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBSetRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GlobalDBSetRequest::Swap(GlobalDBSetRequest* other) {
  if (other != this) {
    std::swap(type_id_, other->type_id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBSetRequest_descriptor_;
  metadata.reflection = GlobalDBSetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalDBSetResponse::kRetcodeFieldNumber;
const int GlobalDBSetResponse::kTypeIdFieldNumber;
#endif  // !_MSC_VER

GlobalDBSetResponse::GlobalDBSetResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalDBSetResponse::InitAsDefaultInstance() {
}

GlobalDBSetResponse::GlobalDBSetResponse(const GlobalDBSetResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalDBSetResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  type_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalDBSetResponse::~GlobalDBSetResponse() {
  SharedDtor();
}

void GlobalDBSetResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalDBSetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalDBSetResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalDBSetResponse_descriptor_;
}

const GlobalDBSetResponse& GlobalDBSetResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GlobalDBSetResponse* GlobalDBSetResponse::default_instance_ = NULL;

GlobalDBSetResponse* GlobalDBSetResponse::New() const {
  return new GlobalDBSetResponse;
}

void GlobalDBSetResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    type_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalDBSetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // required int32 type_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalDBSetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalDBSetResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalDBSetResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalDBSetResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalDBSetResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalDBSetResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalDBSetResponse::MergeFrom(const GlobalDBSetResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalDBSetResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalDBSetResponse::CopyFrom(const GlobalDBSetResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalDBSetResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GlobalDBSetResponse::Swap(GlobalDBSetResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(type_id_, other->type_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalDBSetResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalDBSetResponse_descriptor_;
  metadata.reflection = GlobalDBSetResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalComData::kTowerDupRewardFieldNumber;
#endif  // !_MSC_VER

GlobalComData::GlobalComData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalComData::InitAsDefaultInstance() {
}

GlobalComData::GlobalComData(const GlobalComData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalComData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalComData::~GlobalComData() {
  SharedDtor();
}

void GlobalComData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalComData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalComData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalComData_descriptor_;
}

const GlobalComData& GlobalComData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GlobalComData* GlobalComData::default_instance_ = NULL;

GlobalComData* GlobalComData::New() const {
  return new GlobalComData;
}

void GlobalComData::Clear() {
  towerdupreward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalComData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_towerDupReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_towerdupreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_towerDupReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalComData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
  for (int i = 0; i < this->towerdupreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->towerdupreward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalComData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
  for (int i = 0; i < this->towerdupreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->towerdupreward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalComData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DupTowerDBRecord towerDupReward = 1;
  total_size += 1 * this->towerdupreward_size();
  for (int i = 0; i < this->towerdupreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->towerdupreward(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalComData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalComData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalComData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalComData::MergeFrom(const GlobalComData& from) {
  GOOGLE_CHECK_NE(&from, this);
  towerdupreward_.MergeFrom(from.towerdupreward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalComData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalComData::CopyFrom(const GlobalComData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalComData::IsInitialized() const {

  return true;
}

void GlobalComData::Swap(GlobalComData* other) {
  if (other != this) {
    towerdupreward_.Swap(&other->towerdupreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalComData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalComData_descriptor_;
  metadata.reflection = GlobalComData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalYaotaDupDBEntry::kDupidFieldNumber;
const int GlobalYaotaDupDBEntry::kInfoFieldNumber;
const int GlobalYaotaDupDBEntry::kTimeFieldNumber;
#endif  // !_MSC_VER

GlobalYaotaDupDBEntry::GlobalYaotaDupDBEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalYaotaDupDBEntry::InitAsDefaultInstance() {
}

GlobalYaotaDupDBEntry::GlobalYaotaDupDBEntry(const GlobalYaotaDupDBEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalYaotaDupDBEntry::SharedCtor() {
  _cached_size_ = 0;
  dupid_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalYaotaDupDBEntry::~GlobalYaotaDupDBEntry() {
  SharedDtor();
}

void GlobalYaotaDupDBEntry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalYaotaDupDBEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalYaotaDupDBEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalYaotaDupDBEntry_descriptor_;
}

const GlobalYaotaDupDBEntry& GlobalYaotaDupDBEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GlobalYaotaDupDBEntry* GlobalYaotaDupDBEntry::default_instance_ = NULL;

GlobalYaotaDupDBEntry* GlobalYaotaDupDBEntry::New() const {
  return new GlobalYaotaDupDBEntry;
}

void GlobalYaotaDupDBEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dupid_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalYaotaDupDBEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 dupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dupid_)));
          set_has_dupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalYaotaDupDBEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dupid(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalYaotaDupDBEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 dupid = 1;
  if (has_dupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dupid(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalYaotaDupDBEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 dupid = 1;
    if (has_dupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dupid());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalYaotaDupDBEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalYaotaDupDBEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalYaotaDupDBEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalYaotaDupDBEntry::MergeFrom(const GlobalYaotaDupDBEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dupid()) {
      set_dupid(from.dupid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalYaotaDupDBEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalYaotaDupDBEntry::CopyFrom(const GlobalYaotaDupDBEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalYaotaDupDBEntry::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void GlobalYaotaDupDBEntry::Swap(GlobalYaotaDupDBEntry* other) {
  if (other != this) {
    std::swap(dupid_, other->dupid_);
    info_.Swap(&other->info_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalYaotaDupDBEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalYaotaDupDBEntry_descriptor_;
  metadata.reflection = GlobalYaotaDupDBEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GlobalYaotaDupDBData::kEntrysFieldNumber;
#endif  // !_MSC_VER

GlobalYaotaDupDBData::GlobalYaotaDupDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GlobalYaotaDupDBData::InitAsDefaultInstance() {
}

GlobalYaotaDupDBData::GlobalYaotaDupDBData(const GlobalYaotaDupDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GlobalYaotaDupDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GlobalYaotaDupDBData::~GlobalYaotaDupDBData() {
  SharedDtor();
}

void GlobalYaotaDupDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GlobalYaotaDupDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GlobalYaotaDupDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GlobalYaotaDupDBData_descriptor_;
}

const GlobalYaotaDupDBData& GlobalYaotaDupDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GlobalYaotaDupDBData* GlobalYaotaDupDBData::default_instance_ = NULL;

GlobalYaotaDupDBData* GlobalYaotaDupDBData::New() const {
  return new GlobalYaotaDupDBData;
}

void GlobalYaotaDupDBData::Clear() {
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GlobalYaotaDupDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GlobalYaotaDupDBEntry entrys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GlobalYaotaDupDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GlobalYaotaDupDBEntry entrys = 3;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GlobalYaotaDupDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GlobalYaotaDupDBEntry entrys = 3;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GlobalYaotaDupDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GlobalYaotaDupDBEntry entrys = 3;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GlobalYaotaDupDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GlobalYaotaDupDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GlobalYaotaDupDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GlobalYaotaDupDBData::MergeFrom(const GlobalYaotaDupDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GlobalYaotaDupDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GlobalYaotaDupDBData::CopyFrom(const GlobalYaotaDupDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GlobalYaotaDupDBData::IsInitialized() const {

  for (int i = 0; i < entrys_size(); i++) {
    if (!this->entrys(i).IsInitialized()) return false;
  }
  return true;
}

void GlobalYaotaDupDBData::Swap(GlobalYaotaDupDBData* other) {
  if (other != this) {
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GlobalYaotaDupDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GlobalYaotaDupDBData_descriptor_;
  metadata.reflection = GlobalYaotaDupDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActDBProto::kActidFieldNumber;
const int ActDBProto::kZidFieldNumber;
const int ActDBProto::kFinishtimeFieldNumber;
#endif  // !_MSC_VER

ActDBProto::ActDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActDBProto::InitAsDefaultInstance() {
}

ActDBProto::ActDBProto(const ActDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActDBProto::SharedCtor() {
  _cached_size_ = 0;
  actid_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  finishtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActDBProto::~ActDBProto() {
  SharedDtor();
}

void ActDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActDBProto_descriptor_;
}

const ActDBProto& ActDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ActDBProto* ActDBProto::default_instance_ = NULL;

ActDBProto* ActDBProto::New() const {
  return new ActDBProto;
}

void ActDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    actid_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    finishtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 actid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &actid_)));
          set_has_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_finishtime;
        break;
      }

      // optional uint64 finishtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &finishtime_)));
          set_has_finishtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 actid = 1;
  if (has_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->actid(), output);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->zid(), output);
  }

  // optional uint64 finishtime = 3;
  if (has_finishtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->finishtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 actid = 1;
  if (has_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->actid(), target);
  }

  // optional uint32 zid = 2;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->zid(), target);
  }

  // optional uint64 finishtime = 3;
  if (has_finishtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->finishtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 actid = 1;
    if (has_actid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->actid());
    }

    // optional uint32 zid = 2;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 finishtime = 3;
    if (has_finishtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->finishtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActDBProto::MergeFrom(const ActDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_actid()) {
      set_actid(from.actid());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_finishtime()) {
      set_finishtime(from.finishtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActDBProto::CopyFrom(const ActDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActDBProto::IsInitialized() const {

  return true;
}

void ActDBProto::Swap(ActDBProto* other) {
  if (other != this) {
    std::swap(actid_, other->actid_);
    std::swap(zid_, other->zid_);
    std::swap(finishtime_, other->finishtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActDBProto_descriptor_;
  metadata.reflection = ActDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ActDBReq::ActDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActDBReq::InitAsDefaultInstance() {
}

ActDBReq::ActDBReq(const ActDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActDBReq::~ActDBReq() {
  SharedDtor();
}

void ActDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActDBReq_descriptor_;
}

const ActDBReq& ActDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ActDBReq* ActDBReq::default_instance_ = NULL;

ActDBReq* ActDBReq::New() const {
  return new ActDBReq;
}

void ActDBReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ActDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActDBReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActDBReq::MergeFrom(const ActDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActDBReq::CopyFrom(const ActDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActDBReq::IsInitialized() const {

  return true;
}

void ActDBReq::Swap(ActDBReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActDBReq_descriptor_;
  metadata.reflection = ActDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActDBRsp::kLstFieldNumber;
#endif  // !_MSC_VER

ActDBRsp::ActDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActDBRsp::InitAsDefaultInstance() {
}

ActDBRsp::ActDBRsp(const ActDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActDBRsp::~ActDBRsp() {
  SharedDtor();
}

void ActDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActDBRsp_descriptor_;
}

const ActDBRsp& ActDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ActDBRsp* ActDBRsp::default_instance_ = NULL;

ActDBRsp* ActDBRsp::New() const {
  return new ActDBRsp;
}

void ActDBRsp::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ActDBProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ActDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ActDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActDBRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ActDBProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActDBRsp::MergeFrom(const ActDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActDBRsp::CopyFrom(const ActDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActDBRsp::IsInitialized() const {

  return true;
}

void ActDBRsp::Swap(ActDBRsp* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActDBRsp_descriptor_;
  metadata.reflection = ActDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActSaveDBReq::kLstFieldNumber;
#endif  // !_MSC_VER

ActSaveDBReq::ActSaveDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActSaveDBReq::InitAsDefaultInstance() {
}

ActSaveDBReq::ActSaveDBReq(const ActSaveDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActSaveDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActSaveDBReq::~ActSaveDBReq() {
  SharedDtor();
}

void ActSaveDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActSaveDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActSaveDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActSaveDBReq_descriptor_;
}

const ActSaveDBReq& ActSaveDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ActSaveDBReq* ActSaveDBReq::default_instance_ = NULL;

ActSaveDBReq* ActSaveDBReq::New() const {
  return new ActSaveDBReq;
}

void ActSaveDBReq::Clear() {
  lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActSaveDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ActDBProto lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActSaveDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ActDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActSaveDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ActDBProto lst = 1;
  for (int i = 0; i < this->lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActSaveDBReq::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ActDBProto lst = 1;
  total_size += 1 * this->lst_size();
  for (int i = 0; i < this->lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActSaveDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActSaveDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActSaveDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActSaveDBReq::MergeFrom(const ActSaveDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  lst_.MergeFrom(from.lst_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActSaveDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActSaveDBReq::CopyFrom(const ActSaveDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActSaveDBReq::IsInitialized() const {

  return true;
}

void ActSaveDBReq::Swap(ActSaveDBReq* other) {
  if (other != this) {
    lst_.Swap(&other->lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActSaveDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActSaveDBReq_descriptor_;
  metadata.reflection = ActSaveDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllArenaDBRequest::kOffsetFieldNumber;
const int AllArenaDBRequest::kRetnumFieldNumber;
#endif  // !_MSC_VER

AllArenaDBRequest::AllArenaDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllArenaDBRequest::InitAsDefaultInstance() {
}

AllArenaDBRequest::AllArenaDBRequest(const AllArenaDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllArenaDBRequest::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  retnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllArenaDBRequest::~AllArenaDBRequest() {
  SharedDtor();
}

void AllArenaDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllArenaDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllArenaDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllArenaDBRequest_descriptor_;
}

const AllArenaDBRequest& AllArenaDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

AllArenaDBRequest* AllArenaDBRequest::default_instance_ = NULL;

AllArenaDBRequest* AllArenaDBRequest::New() const {
  return new AllArenaDBRequest;
}

void AllArenaDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
    retnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllArenaDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retnum;
        break;
      }

      // required int32 retnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retnum_)));
          set_has_retnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllArenaDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllArenaDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  // required int32 retnum = 2;
  if (has_retnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllArenaDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // required int32 retnum = 2;
    if (has_retnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllArenaDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllArenaDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllArenaDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllArenaDBRequest::MergeFrom(const AllArenaDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_retnum()) {
      set_retnum(from.retnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllArenaDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllArenaDBRequest::CopyFrom(const AllArenaDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllArenaDBRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllArenaDBRequest::Swap(AllArenaDBRequest* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(retnum_, other->retnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllArenaDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllArenaDBRequest_descriptor_;
  metadata.reflection = AllArenaDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaDBInfo::kCharIDFieldNumber;
const int ArenaDBInfo::kRankIdFieldNumber;
#endif  // !_MSC_VER

ArenaDBInfo::ArenaDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaDBInfo::InitAsDefaultInstance() {
}

ArenaDBInfo::ArenaDBInfo(const ArenaDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaDBInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  rankid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaDBInfo::~ArenaDBInfo() {
  SharedDtor();
}

void ArenaDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaDBInfo_descriptor_;
}

const ArenaDBInfo& ArenaDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ArenaDBInfo* ArenaDBInfo::default_instance_ = NULL;

ArenaDBInfo* ArenaDBInfo::New() const {
  return new ArenaDBInfo;
}

void ArenaDBInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    rankid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rankId;
        break;
      }

      // optional uint32 rankId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rankid_)));
          set_has_rankid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 rankId = 2;
  if (has_rankid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rankid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 rankId = 2;
  if (has_rankid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rankid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 rankId = 2;
    if (has_rankid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rankid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaDBInfo::MergeFrom(const ArenaDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_rankid()) {
      set_rankid(from.rankid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaDBInfo::CopyFrom(const ArenaDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaDBInfo::IsInitialized() const {

  return true;
}

void ArenaDBInfo::Swap(ArenaDBInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(rankid_, other->rankid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaDBInfo_descriptor_;
  metadata.reflection = ArenaDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaMoreDBInfo::kInfoFieldNumber;
const int ArenaMoreDBInfo::kDayFieldNumber;
const int ArenaMoreDBInfo::kGiveRewardFieldNumber;
const int ArenaMoreDBInfo::kMaxRankFieldNumber;
#endif  // !_MSC_VER

ArenaMoreDBInfo::ArenaMoreDBInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaMoreDBInfo::InitAsDefaultInstance() {
}

ArenaMoreDBInfo::ArenaMoreDBInfo(const ArenaMoreDBInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaMoreDBInfo::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0u;
  givereward_ = 0u;
  max_rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaMoreDBInfo::~ArenaMoreDBInfo() {
  SharedDtor();
}

void ArenaMoreDBInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaMoreDBInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaMoreDBInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaMoreDBInfo_descriptor_;
}

const ArenaMoreDBInfo& ArenaMoreDBInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ArenaMoreDBInfo* ArenaMoreDBInfo::default_instance_ = NULL;

ArenaMoreDBInfo* ArenaMoreDBInfo::New() const {
  return new ArenaMoreDBInfo;
}

void ArenaMoreDBInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    day_ = 0u;
    givereward_ = 0u;
    max_rank_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaMoreDBInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ArenaDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // optional uint32 day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_giveReward;
        break;
      }

      // optional uint32 giveReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_giveReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &givereward_)));
          set_has_givereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_rank;
        break;
      }

      // optional uint32 max_rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_rank_)));
          set_has_max_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaMoreDBInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ArenaDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional uint32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->day(), output);
  }

  // optional uint32 giveReward = 3;
  if (has_givereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->givereward(), output);
  }

  // optional uint32 max_rank = 4;
  if (has_max_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaMoreDBInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ArenaDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional uint32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->day(), target);
  }

  // optional uint32 giveReward = 3;
  if (has_givereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->givereward(), target);
  }

  // optional uint32 max_rank = 4;
  if (has_max_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaMoreDBInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }

    // optional uint32 giveReward = 3;
    if (has_givereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->givereward());
    }

    // optional uint32 max_rank = 4;
    if (has_max_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_rank());
    }

  }
  // repeated .proto_ff.ArenaDBInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaMoreDBInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaMoreDBInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaMoreDBInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaMoreDBInfo::MergeFrom(const ArenaMoreDBInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_givereward()) {
      set_givereward(from.givereward());
    }
    if (from.has_max_rank()) {
      set_max_rank(from.max_rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaMoreDBInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaMoreDBInfo::CopyFrom(const ArenaMoreDBInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaMoreDBInfo::IsInitialized() const {

  return true;
}

void ArenaMoreDBInfo::Swap(ArenaMoreDBInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(day_, other->day_);
    std::swap(givereward_, other->givereward_);
    std::swap(max_rank_, other->max_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaMoreDBInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaMoreDBInfo_descriptor_;
  metadata.reflection = ArenaMoreDBInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllArenaDBResponse::kRetcodeFieldNumber;
const int AllArenaDBResponse::kOffsetFieldNumber;
const int AllArenaDBResponse::kInfoFieldNumber;
#endif  // !_MSC_VER

AllArenaDBResponse::AllArenaDBResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllArenaDBResponse::InitAsDefaultInstance() {
}

AllArenaDBResponse::AllArenaDBResponse(const AllArenaDBResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllArenaDBResponse::SharedCtor() {
  _cached_size_ = 0;
  retcode_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllArenaDBResponse::~AllArenaDBResponse() {
  SharedDtor();
}

void AllArenaDBResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AllArenaDBResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllArenaDBResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllArenaDBResponse_descriptor_;
}

const AllArenaDBResponse& AllArenaDBResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

AllArenaDBResponse* AllArenaDBResponse::default_instance_ = NULL;

AllArenaDBResponse* AllArenaDBResponse::New() const {
  return new AllArenaDBResponse;
}

void AllArenaDBResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retcode_ = 0;
    offset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllArenaDBResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .proto_ff.ArenaDBInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllArenaDBResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .proto_ff.ArenaDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllArenaDBResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .proto_ff.ArenaDBInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllArenaDBResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .proto_ff.ArenaDBInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllArenaDBResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllArenaDBResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllArenaDBResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllArenaDBResponse::MergeFrom(const AllArenaDBResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllArenaDBResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllArenaDBResponse::CopyFrom(const AllArenaDBResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllArenaDBResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AllArenaDBResponse::Swap(AllArenaDBResponse* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(offset_, other->offset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllArenaDBResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllArenaDBResponse_descriptor_;
  metadata.reflection = AllArenaDBResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveArenaDBRequest::kInfoFieldNumber;
#endif  // !_MSC_VER

SaveArenaDBRequest::SaveArenaDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveArenaDBRequest::InitAsDefaultInstance() {
}

SaveArenaDBRequest::SaveArenaDBRequest(const SaveArenaDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveArenaDBRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveArenaDBRequest::~SaveArenaDBRequest() {
  SharedDtor();
}

void SaveArenaDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SaveArenaDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveArenaDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveArenaDBRequest_descriptor_;
}

const SaveArenaDBRequest& SaveArenaDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

SaveArenaDBRequest* SaveArenaDBRequest::default_instance_ = NULL;

SaveArenaDBRequest* SaveArenaDBRequest::New() const {
  return new SaveArenaDBRequest;
}

void SaveArenaDBRequest::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveArenaDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ArenaDBInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveArenaDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ArenaDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveArenaDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ArenaDBInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveArenaDBRequest::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.ArenaDBInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveArenaDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveArenaDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveArenaDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveArenaDBRequest::MergeFrom(const SaveArenaDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveArenaDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveArenaDBRequest::CopyFrom(const SaveArenaDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveArenaDBRequest::IsInitialized() const {

  return true;
}

void SaveArenaDBRequest::Swap(SaveArenaDBRequest* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveArenaDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveArenaDBRequest_descriptor_;
  metadata.reflection = SaveArenaDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteArenaDBRequest::kCharIdFieldNumber;
#endif  // !_MSC_VER

DeleteArenaDBRequest::DeleteArenaDBRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteArenaDBRequest::InitAsDefaultInstance() {
}

DeleteArenaDBRequest::DeleteArenaDBRequest(const DeleteArenaDBRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteArenaDBRequest::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteArenaDBRequest::~DeleteArenaDBRequest() {
  SharedDtor();
}

void DeleteArenaDBRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteArenaDBRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteArenaDBRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteArenaDBRequest_descriptor_;
}

const DeleteArenaDBRequest& DeleteArenaDBRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DeleteArenaDBRequest* DeleteArenaDBRequest::default_instance_ = NULL;

DeleteArenaDBRequest* DeleteArenaDBRequest::New() const {
  return new DeleteArenaDBRequest;
}

void DeleteArenaDBRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteArenaDBRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteArenaDBRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteArenaDBRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteArenaDBRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteArenaDBRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteArenaDBRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteArenaDBRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteArenaDBRequest::MergeFrom(const DeleteArenaDBRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteArenaDBRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteArenaDBRequest::CopyFrom(const DeleteArenaDBRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteArenaDBRequest::IsInitialized() const {

  return true;
}

void DeleteArenaDBRequest::Swap(DeleteArenaDBRequest* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteArenaDBRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteArenaDBRequest_descriptor_;
  metadata.reflection = DeleteArenaDBRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleMirrorDBReq::kCidFieldNumber;
const int RoleMirrorDBReq::kIntParamFieldNumber;
const int RoleMirrorDBReq::kStrParamFieldNumber;
const int RoleMirrorDBReq::kReqtypeFieldNumber;
#endif  // !_MSC_VER

RoleMirrorDBReq::RoleMirrorDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleMirrorDBReq::InitAsDefaultInstance() {
}

RoleMirrorDBReq::RoleMirrorDBReq(const RoleMirrorDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleMirrorDBReq::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  int_param_ = GOOGLE_LONGLONG(0);
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reqtype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleMirrorDBReq::~RoleMirrorDBReq() {
  SharedDtor();
}

void RoleMirrorDBReq::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
  }
}

void RoleMirrorDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleMirrorDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMirrorDBReq_descriptor_;
}

const RoleMirrorDBReq& RoleMirrorDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleMirrorDBReq* RoleMirrorDBReq::default_instance_ = NULL;

RoleMirrorDBReq* RoleMirrorDBReq::New() const {
  return new RoleMirrorDBReq;
}

void RoleMirrorDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    int_param_ = GOOGLE_LONGLONG(0);
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
    reqtype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleMirrorDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_int_param;
        break;
      }

      // required int64 int_param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_str_param;
        break;
      }

      // required bytes str_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reqtype;
        break;
      }

      // required uint32 reqtype = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtype_)));
          set_has_reqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleMirrorDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required int64 int_param = 2;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->int_param(), output);
  }

  // required bytes str_param = 3;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->str_param(), output);
  }

  // required uint32 reqtype = 4;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reqtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleMirrorDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required int64 int_param = 2;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->int_param(), target);
  }

  // required bytes str_param = 3;
  if (has_str_param()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->str_param(), target);
  }

  // required uint32 reqtype = 4;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reqtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleMirrorDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int64 int_param = 2;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_param());
    }

    // required bytes str_param = 3;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_param());
    }

    // required uint32 reqtype = 4;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleMirrorDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleMirrorDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleMirrorDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleMirrorDBReq::MergeFrom(const RoleMirrorDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleMirrorDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMirrorDBReq::CopyFrom(const RoleMirrorDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMirrorDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RoleMirrorDBReq::Swap(RoleMirrorDBReq* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(int_param_, other->int_param_);
    std::swap(str_param_, other->str_param_);
    std::swap(reqtype_, other->reqtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleMirrorDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleMirrorDBReq_descriptor_;
  metadata.reflection = RoleMirrorDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleMirrorDBRsp::kRetFieldNumber;
const int RoleMirrorDBRsp::kCidFieldNumber;
const int RoleMirrorDBRsp::kIntParamFieldNumber;
const int RoleMirrorDBRsp::kStrParamFieldNumber;
const int RoleMirrorDBRsp::kReqtypeFieldNumber;
const int RoleMirrorDBRsp::kDataFieldNumber;
#endif  // !_MSC_VER

RoleMirrorDBRsp::RoleMirrorDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleMirrorDBRsp::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::RoleMirrorData*>(&::proto_ff::RoleMirrorData::default_instance());
}

RoleMirrorDBRsp::RoleMirrorDBRsp(const RoleMirrorDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleMirrorDBRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  int_param_ = GOOGLE_LONGLONG(0);
  str_param_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  reqtype_ = 0u;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleMirrorDBRsp::~RoleMirrorDBRsp() {
  SharedDtor();
}

void RoleMirrorDBRsp::SharedDtor() {
  if (str_param_ != &::google::protobuf::internal::kEmptyString) {
    delete str_param_;
  }
  if (this != default_instance_) {
    delete data_;
  }
}

void RoleMirrorDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleMirrorDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleMirrorDBRsp_descriptor_;
}

const RoleMirrorDBRsp& RoleMirrorDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleMirrorDBRsp* RoleMirrorDBRsp::default_instance_ = NULL;

RoleMirrorDBRsp* RoleMirrorDBRsp::New() const {
  return new RoleMirrorDBRsp;
}

void RoleMirrorDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    int_param_ = GOOGLE_LONGLONG(0);
    if (has_str_param()) {
      if (str_param_ != &::google::protobuf::internal::kEmptyString) {
        str_param_->clear();
      }
    }
    reqtype_ = 0u;
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::RoleMirrorData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleMirrorDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // required uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_int_param;
        break;
      }

      // required int64 int_param = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_int_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &int_param_)));
          set_has_int_param();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_str_param;
        break;
      }

      // required bytes str_param = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_str_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_str_param()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reqtype;
        break;
      }

      // required uint32 reqtype = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reqtype_)));
          set_has_reqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional .proto_ff.RoleMirrorData data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleMirrorDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // required int64 int_param = 3;
  if (has_int_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->int_param(), output);
  }

  // required bytes str_param = 4;
  if (has_str_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->str_param(), output);
  }

  // required uint32 reqtype = 5;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->reqtype(), output);
  }

  // optional .proto_ff.RoleMirrorData data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleMirrorDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // required int64 int_param = 3;
  if (has_int_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->int_param(), target);
  }

  // required bytes str_param = 4;
  if (has_str_param()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->str_param(), target);
  }

  // required uint32 reqtype = 5;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->reqtype(), target);
  }

  // optional .proto_ff.RoleMirrorData data = 6;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleMirrorDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int64 int_param = 3;
    if (has_int_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->int_param());
    }

    // required bytes str_param = 4;
    if (has_str_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->str_param());
    }

    // required uint32 reqtype = 5;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reqtype());
    }

    // optional .proto_ff.RoleMirrorData data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleMirrorDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleMirrorDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleMirrorDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleMirrorDBRsp::MergeFrom(const RoleMirrorDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_int_param()) {
      set_int_param(from.int_param());
    }
    if (from.has_str_param()) {
      set_str_param(from.str_param());
    }
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
    if (from.has_data()) {
      mutable_data()->::proto_ff::RoleMirrorData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleMirrorDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleMirrorDBRsp::CopyFrom(const RoleMirrorDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleMirrorDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void RoleMirrorDBRsp::Swap(RoleMirrorDBRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(cid_, other->cid_);
    std::swap(int_param_, other->int_param_);
    std::swap(str_param_, other->str_param_);
    std::swap(reqtype_, other->reqtype_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleMirrorDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleMirrorDBRsp_descriptor_;
  metadata.reflection = RoleMirrorDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionDataDBReq::FactionDataDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDataDBReq::InitAsDefaultInstance() {
}

FactionDataDBReq::FactionDataDBReq(const FactionDataDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDataDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDataDBReq::~FactionDataDBReq() {
  SharedDtor();
}

void FactionDataDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDataDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDataDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDataDBReq_descriptor_;
}

const FactionDataDBReq& FactionDataDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDataDBReq* FactionDataDBReq::default_instance_ = NULL;

FactionDataDBReq* FactionDataDBReq::New() const {
  return new FactionDataDBReq;
}

void FactionDataDBReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDataDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionDataDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDataDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDataDBReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDataDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDataDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDataDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDataDBReq::MergeFrom(const FactionDataDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDataDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDataDBReq::CopyFrom(const FactionDataDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDataDBReq::IsInitialized() const {

  return true;
}

void FactionDataDBReq::Swap(FactionDataDBReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDataDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDataDBReq_descriptor_;
  metadata.reflection = FactionDataDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDataDBRsp::kDataLstFieldNumber;
const int FactionDataDBRsp::kFinishFieldNumber;
#endif  // !_MSC_VER

FactionDataDBRsp::FactionDataDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDataDBRsp::InitAsDefaultInstance() {
}

FactionDataDBRsp::FactionDataDBRsp(const FactionDataDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDataDBRsp::SharedCtor() {
  _cached_size_ = 0;
  finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDataDBRsp::~FactionDataDBRsp() {
  SharedDtor();
}

void FactionDataDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDataDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDataDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDataDBRsp_descriptor_;
}

const FactionDataDBRsp& FactionDataDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDataDBRsp* FactionDataDBRsp::default_instance_ = NULL;

FactionDataDBRsp* FactionDataDBRsp::New() const {
  return new FactionDataDBRsp;
}

void FactionDataDBRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    finish_ = 0;
  }
  data_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDataDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FactionAllDBData data_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_lst;
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }

      // optional int32 finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDataDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FactionAllDBData data_lst = 1;
  for (int i = 0; i < this->data_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_lst(i), output);
  }

  // optional int32 finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDataDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FactionAllDBData data_lst = 1;
  for (int i = 0; i < this->data_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_lst(i), target);
  }

  // optional int32 finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDataDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }

  }
  // repeated .proto_ff.FactionAllDBData data_lst = 1;
  total_size += 1 * this->data_lst_size();
  for (int i = 0; i < this->data_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDataDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDataDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDataDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDataDBRsp::MergeFrom(const FactionDataDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_lst_.MergeFrom(from.data_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDataDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDataDBRsp::CopyFrom(const FactionDataDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDataDBRsp::IsInitialized() const {

  return true;
}

void FactionDataDBRsp::Swap(FactionDataDBRsp* other) {
  if (other != this) {
    data_lst_.Swap(&other->data_lst_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDataDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDataDBRsp_descriptor_;
  metadata.reflection = FactionDataDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionSaveDBReq::kDataFieldNumber;
#endif  // !_MSC_VER

FactionSaveDBReq::FactionSaveDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionSaveDBReq::InitAsDefaultInstance() {
  data_ = const_cast< ::proto_ff::FactionAllDBData*>(&::proto_ff::FactionAllDBData::default_instance());
}

FactionSaveDBReq::FactionSaveDBReq(const FactionSaveDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionSaveDBReq::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionSaveDBReq::~FactionSaveDBReq() {
  SharedDtor();
}

void FactionSaveDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void FactionSaveDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionSaveDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionSaveDBReq_descriptor_;
}

const FactionSaveDBReq& FactionSaveDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionSaveDBReq* FactionSaveDBReq::default_instance_ = NULL;

FactionSaveDBReq* FactionSaveDBReq::New() const {
  return new FactionSaveDBReq;
}

void FactionSaveDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::proto_ff::FactionAllDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionSaveDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.FactionAllDBData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionSaveDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.FactionAllDBData data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionSaveDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.FactionAllDBData data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionSaveDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.FactionAllDBData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionSaveDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionSaveDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionSaveDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionSaveDBReq::MergeFrom(const FactionSaveDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::proto_ff::FactionAllDBData::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionSaveDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionSaveDBReq::CopyFrom(const FactionSaveDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionSaveDBReq::IsInitialized() const {

  return true;
}

void FactionSaveDBReq::Swap(FactionSaveDBReq* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionSaveDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionSaveDBReq_descriptor_;
  metadata.reflection = FactionSaveDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionDelDBReq::kFactionIdFieldNumber;
#endif  // !_MSC_VER

FactionDelDBReq::FactionDelDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionDelDBReq::InitAsDefaultInstance() {
}

FactionDelDBReq::FactionDelDBReq(const FactionDelDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionDelDBReq::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionDelDBReq::~FactionDelDBReq() {
  SharedDtor();
}

void FactionDelDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionDelDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionDelDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionDelDBReq_descriptor_;
}

const FactionDelDBReq& FactionDelDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionDelDBReq* FactionDelDBReq::default_instance_ = NULL;

FactionDelDBReq* FactionDelDBReq::New() const {
  return new FactionDelDBReq;
}

void FactionDelDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionDelDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionDelDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionDelDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionDelDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionDelDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionDelDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionDelDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionDelDBReq::MergeFrom(const FactionDelDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionDelDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionDelDBReq::CopyFrom(const FactionDelDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionDelDBReq::IsInitialized() const {

  return true;
}

void FactionDelDBReq::Swap(FactionDelDBReq* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionDelDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionDelDBReq_descriptor_;
  metadata.reflection = FactionDelDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FactionRedDBReq::FactionRedDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRedDBReq::InitAsDefaultInstance() {
}

FactionRedDBReq::FactionRedDBReq(const FactionRedDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRedDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRedDBReq::~FactionRedDBReq() {
  SharedDtor();
}

void FactionRedDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionRedDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRedDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRedDBReq_descriptor_;
}

const FactionRedDBReq& FactionRedDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionRedDBReq* FactionRedDBReq::default_instance_ = NULL;

FactionRedDBReq* FactionRedDBReq::New() const {
  return new FactionRedDBReq;
}

void FactionRedDBReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRedDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FactionRedDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRedDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRedDBReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRedDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRedDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRedDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRedDBReq::MergeFrom(const FactionRedDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRedDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRedDBReq::CopyFrom(const FactionRedDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRedDBReq::IsInitialized() const {

  return true;
}

void FactionRedDBReq::Swap(FactionRedDBReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRedDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRedDBReq_descriptor_;
  metadata.reflection = FactionRedDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionRedDBRsp::kDataLstFieldNumber;
const int FactionRedDBRsp::kFinishFieldNumber;
#endif  // !_MSC_VER

FactionRedDBRsp::FactionRedDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRedDBRsp::InitAsDefaultInstance() {
}

FactionRedDBRsp::FactionRedDBRsp(const FactionRedDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRedDBRsp::SharedCtor() {
  _cached_size_ = 0;
  finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRedDBRsp::~FactionRedDBRsp() {
  SharedDtor();
}

void FactionRedDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionRedDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRedDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRedDBRsp_descriptor_;
}

const FactionRedDBRsp& FactionRedDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionRedDBRsp* FactionRedDBRsp::default_instance_ = NULL;

FactionRedDBRsp* FactionRedDBRsp::New() const {
  return new FactionRedDBRsp;
}

void FactionRedDBRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    finish_ = 0;
  }
  data_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRedDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RedDBData data_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_lst;
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }

      // optional int32 finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionRedDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RedDBData data_lst = 1;
  for (int i = 0; i < this->data_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_lst(i), output);
  }

  // optional int32 finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRedDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RedDBData data_lst = 1;
  for (int i = 0; i < this->data_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_lst(i), target);
  }

  // optional int32 finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRedDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }

  }
  // repeated .proto_ff.RedDBData data_lst = 1;
  total_size += 1 * this->data_lst_size();
  for (int i = 0; i < this->data_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRedDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRedDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRedDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRedDBRsp::MergeFrom(const FactionRedDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_lst_.MergeFrom(from.data_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRedDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRedDBRsp::CopyFrom(const FactionRedDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRedDBRsp::IsInitialized() const {

  return true;
}

void FactionRedDBRsp::Swap(FactionRedDBRsp* other) {
  if (other != this) {
    data_lst_.Swap(&other->data_lst_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRedDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRedDBRsp_descriptor_;
  metadata.reflection = FactionRedDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionRedSaveDBReq::kFactionIdFieldNumber;
const int FactionRedSaveDBReq::kData0FieldNumber;
const int FactionRedSaveDBReq::kData1FieldNumber;
const int FactionRedSaveDBReq::kData2FieldNumber;
#endif  // !_MSC_VER

FactionRedSaveDBReq::FactionRedSaveDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRedSaveDBReq::InitAsDefaultInstance() {
  data0_ = const_cast< ::proto_ff::RedDBData*>(&::proto_ff::RedDBData::default_instance());
  data1_ = const_cast< ::proto_ff::RedDBData*>(&::proto_ff::RedDBData::default_instance());
  data2_ = const_cast< ::proto_ff::RedDBData*>(&::proto_ff::RedDBData::default_instance());
}

FactionRedSaveDBReq::FactionRedSaveDBReq(const FactionRedSaveDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRedSaveDBReq::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  data0_ = NULL;
  data1_ = NULL;
  data2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRedSaveDBReq::~FactionRedSaveDBReq() {
  SharedDtor();
}

void FactionRedSaveDBReq::SharedDtor() {
  if (this != default_instance_) {
    delete data0_;
    delete data1_;
    delete data2_;
  }
}

void FactionRedSaveDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRedSaveDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRedSaveDBReq_descriptor_;
}

const FactionRedSaveDBReq& FactionRedSaveDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionRedSaveDBReq* FactionRedSaveDBReq::default_instance_ = NULL;

FactionRedSaveDBReq* FactionRedSaveDBReq::New() const {
  return new FactionRedSaveDBReq;
}

void FactionRedSaveDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_data0()) {
      if (data0_ != NULL) data0_->::proto_ff::RedDBData::Clear();
    }
    if (has_data1()) {
      if (data1_ != NULL) data1_->::proto_ff::RedDBData::Clear();
    }
    if (has_data2()) {
      if (data2_ != NULL) data2_->::proto_ff::RedDBData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRedSaveDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data0;
        break;
      }

      // required .proto_ff.RedDBData data0 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data1;
        break;
      }

      // required .proto_ff.RedDBData data1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data2;
        break;
      }

      // required .proto_ff.RedDBData data2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionRedSaveDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // required .proto_ff.RedDBData data0 = 2;
  if (has_data0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data0(), output);
  }

  // required .proto_ff.RedDBData data1 = 3;
  if (has_data1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data1(), output);
  }

  // required .proto_ff.RedDBData data2 = 4;
  if (has_data2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->data2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRedSaveDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // required .proto_ff.RedDBData data0 = 2;
  if (has_data0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data0(), target);
  }

  // required .proto_ff.RedDBData data1 = 3;
  if (has_data1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->data1(), target);
  }

  // required .proto_ff.RedDBData data2 = 4;
  if (has_data2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->data2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRedSaveDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // required .proto_ff.RedDBData data0 = 2;
    if (has_data0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data0());
    }

    // required .proto_ff.RedDBData data1 = 3;
    if (has_data1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data1());
    }

    // required .proto_ff.RedDBData data2 = 4;
    if (has_data2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRedSaveDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRedSaveDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRedSaveDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRedSaveDBReq::MergeFrom(const FactionRedSaveDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_data0()) {
      mutable_data0()->::proto_ff::RedDBData::MergeFrom(from.data0());
    }
    if (from.has_data1()) {
      mutable_data1()->::proto_ff::RedDBData::MergeFrom(from.data1());
    }
    if (from.has_data2()) {
      mutable_data2()->::proto_ff::RedDBData::MergeFrom(from.data2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRedSaveDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRedSaveDBReq::CopyFrom(const FactionRedSaveDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRedSaveDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FactionRedSaveDBReq::Swap(FactionRedSaveDBReq* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(data0_, other->data0_);
    std::swap(data1_, other->data1_);
    std::swap(data2_, other->data2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRedSaveDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRedSaveDBReq_descriptor_;
  metadata.reflection = FactionRedSaveDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionRedDelDBReq::kFactionIdFieldNumber;
#endif  // !_MSC_VER

FactionRedDelDBReq::FactionRedDelDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionRedDelDBReq::InitAsDefaultInstance() {
}

FactionRedDelDBReq::FactionRedDelDBReq(const FactionRedDelDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionRedDelDBReq::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionRedDelDBReq::~FactionRedDelDBReq() {
  SharedDtor();
}

void FactionRedDelDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactionRedDelDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionRedDelDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionRedDelDBReq_descriptor_;
}

const FactionRedDelDBReq& FactionRedDelDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionRedDelDBReq* FactionRedDelDBReq::default_instance_ = NULL;

FactionRedDelDBReq* FactionRedDelDBReq::New() const {
  return new FactionRedDelDBReq;
}

void FactionRedDelDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionRedDelDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionRedDelDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionRedDelDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionRedDelDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionRedDelDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionRedDelDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionRedDelDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionRedDelDBReq::MergeFrom(const FactionRedDelDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionRedDelDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionRedDelDBReq::CopyFrom(const FactionRedDelDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionRedDelDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FactionRedDelDBReq::Swap(FactionRedDelDBReq* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionRedDelDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionRedDelDBReq_descriptor_;
  metadata.reflection = FactionRedDelDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RoleRedDBReq::RoleRedDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRedDBReq::InitAsDefaultInstance() {
}

RoleRedDBReq::RoleRedDBReq(const RoleRedDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRedDBReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRedDBReq::~RoleRedDBReq() {
  SharedDtor();
}

void RoleRedDBReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRedDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRedDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRedDBReq_descriptor_;
}

const RoleRedDBReq& RoleRedDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleRedDBReq* RoleRedDBReq::default_instance_ = NULL;

RoleRedDBReq* RoleRedDBReq::New() const {
  return new RoleRedDBReq;
}

void RoleRedDBReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRedDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RoleRedDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRedDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRedDBReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRedDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRedDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRedDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRedDBReq::MergeFrom(const RoleRedDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRedDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRedDBReq::CopyFrom(const RoleRedDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRedDBReq::IsInitialized() const {

  return true;
}

void RoleRedDBReq::Swap(RoleRedDBReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRedDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRedDBReq_descriptor_;
  metadata.reflection = RoleRedDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleRedDBRsp::kDataLstFieldNumber;
const int RoleRedDBRsp::kFinishFieldNumber;
#endif  // !_MSC_VER

RoleRedDBRsp::RoleRedDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleRedDBRsp::InitAsDefaultInstance() {
}

RoleRedDBRsp::RoleRedDBRsp(const RoleRedDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleRedDBRsp::SharedCtor() {
  _cached_size_ = 0;
  finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleRedDBRsp::~RoleRedDBRsp() {
  SharedDtor();
}

void RoleRedDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleRedDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleRedDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleRedDBRsp_descriptor_;
}

const RoleRedDBRsp& RoleRedDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RoleRedDBRsp* RoleRedDBRsp::default_instance_ = NULL;

RoleRedDBRsp* RoleRedDBRsp::New() const {
  return new RoleRedDBRsp;
}

void RoleRedDBRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    finish_ = 0;
  }
  data_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleRedDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RoleRedDBData data_lst = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data_lst;
        if (input->ExpectTag(16)) goto parse_finish;
        break;
      }

      // optional int32 finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleRedDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RoleRedDBData data_lst = 1;
  for (int i = 0; i < this->data_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data_lst(i), output);
  }

  // optional int32 finish = 2;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleRedDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RoleRedDBData data_lst = 1;
  for (int i = 0; i < this->data_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data_lst(i), target);
  }

  // optional int32 finish = 2;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleRedDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 finish = 2;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }

  }
  // repeated .proto_ff.RoleRedDBData data_lst = 1;
  total_size += 1 * this->data_lst_size();
  for (int i = 0; i < this->data_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleRedDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleRedDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleRedDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleRedDBRsp::MergeFrom(const RoleRedDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_lst_.MergeFrom(from.data_lst_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleRedDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleRedDBRsp::CopyFrom(const RoleRedDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleRedDBRsp::IsInitialized() const {

  return true;
}

void RoleRedDBRsp::Swap(RoleRedDBRsp* other) {
  if (other != this) {
    data_lst_.Swap(&other->data_lst_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleRedDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleRedDBRsp_descriptor_;
  metadata.reflection = RoleRedDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComLoadDBReq::kIdFieldNumber;
const int ComLoadDBReq::kTableNameFieldNumber;
const int ComLoadDBReq::kCmdFieldNumber;
#endif  // !_MSC_VER

ComLoadDBReq::ComLoadDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComLoadDBReq::InitAsDefaultInstance() {
}

ComLoadDBReq::ComLoadDBReq(const ComLoadDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComLoadDBReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComLoadDBReq::~ComLoadDBReq() {
  SharedDtor();
}

void ComLoadDBReq::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void ComLoadDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComLoadDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComLoadDBReq_descriptor_;
}

const ComLoadDBReq& ComLoadDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ComLoadDBReq* ComLoadDBReq::default_instance_ = NULL;

ComLoadDBReq* ComLoadDBReq::New() const {
  return new ComLoadDBReq;
}

void ComLoadDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    cmd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComLoadDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_table_name;
        break;
      }

      // required bytes table_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComLoadDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required bytes table_name = 2;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->table_name(), output);
  }

  // required uint32 cmd = 3;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComLoadDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required bytes table_name = 2;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->table_name(), target);
  }

  // required uint32 cmd = 3;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComLoadDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required bytes table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required uint32 cmd = 3;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComLoadDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComLoadDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComLoadDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComLoadDBReq::MergeFrom(const ComLoadDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComLoadDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComLoadDBReq::CopyFrom(const ComLoadDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComLoadDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ComLoadDBReq::Swap(ComLoadDBReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(table_name_, other->table_name_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComLoadDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComLoadDBReq_descriptor_;
  metadata.reflection = ComLoadDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComLoadDBRsp::kIdFieldNumber;
const int ComLoadDBRsp::kDataFieldNumber;
#endif  // !_MSC_VER

ComLoadDBRsp::ComLoadDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComLoadDBRsp::InitAsDefaultInstance() {
}

ComLoadDBRsp::ComLoadDBRsp(const ComLoadDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComLoadDBRsp::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComLoadDBRsp::~ComLoadDBRsp() {
  SharedDtor();
}

void ComLoadDBRsp::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ComLoadDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComLoadDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComLoadDBRsp_descriptor_;
}

const ComLoadDBRsp& ComLoadDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ComLoadDBRsp* ComLoadDBRsp::default_instance_ = NULL;

ComLoadDBRsp* ComLoadDBRsp::New() const {
  return new ComLoadDBRsp;
}

void ComLoadDBRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComLoadDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComLoadDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComLoadDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComLoadDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComLoadDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComLoadDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComLoadDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComLoadDBRsp::MergeFrom(const ComLoadDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComLoadDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComLoadDBRsp::CopyFrom(const ComLoadDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComLoadDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ComLoadDBRsp::Swap(ComLoadDBRsp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComLoadDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComLoadDBRsp_descriptor_;
  metadata.reflection = ComLoadDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComLoadAllDBReq::kTableNameFieldNumber;
const int ComLoadAllDBReq::kCmdFieldNumber;
#endif  // !_MSC_VER

ComLoadAllDBReq::ComLoadAllDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComLoadAllDBReq::InitAsDefaultInstance() {
}

ComLoadAllDBReq::ComLoadAllDBReq(const ComLoadAllDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComLoadAllDBReq::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComLoadAllDBReq::~ComLoadAllDBReq() {
  SharedDtor();
}

void ComLoadAllDBReq::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void ComLoadAllDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComLoadAllDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComLoadAllDBReq_descriptor_;
}

const ComLoadAllDBReq& ComLoadAllDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ComLoadAllDBReq* ComLoadAllDBReq::default_instance_ = NULL;

ComLoadAllDBReq* ComLoadAllDBReq::New() const {
  return new ComLoadAllDBReq;
}

void ComLoadAllDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    cmd_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComLoadAllDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cmd;
        break;
      }

      // required uint32 cmd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmd_)));
          set_has_cmd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComLoadAllDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->table_name(), output);
  }

  // required uint32 cmd = 2;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->cmd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComLoadAllDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // required uint32 cmd = 2;
  if (has_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->cmd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComLoadAllDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

    // required uint32 cmd = 2;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComLoadAllDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComLoadAllDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComLoadAllDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComLoadAllDBReq::MergeFrom(const ComLoadAllDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComLoadAllDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComLoadAllDBReq::CopyFrom(const ComLoadAllDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComLoadAllDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ComLoadAllDBReq::Swap(ComLoadAllDBReq* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    std::swap(cmd_, other->cmd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComLoadAllDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComLoadAllDBReq_descriptor_;
  metadata.reflection = ComLoadAllDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComDBProto::kIdFieldNumber;
const int ComDBProto::kDataFieldNumber;
#endif  // !_MSC_VER

ComDBProto::ComDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComDBProto::InitAsDefaultInstance() {
}

ComDBProto::ComDBProto(const ComDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComDBProto::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComDBProto::~ComDBProto() {
  SharedDtor();
}

void ComDBProto::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ComDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComDBProto_descriptor_;
}

const ComDBProto& ComDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ComDBProto* ComDBProto::default_instance_ = NULL;

ComDBProto* ComDBProto::New() const {
  return new ComDBProto;
}

void ComDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComDBProto::MergeFrom(const ComDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComDBProto::CopyFrom(const ComDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComDBProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ComDBProto::Swap(ComDBProto* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComDBProto_descriptor_;
  metadata.reflection = ComDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComLoadAllDBRsp::kDataFieldNumber;
const int ComLoadAllDBRsp::kIsFinishFieldNumber;
#endif  // !_MSC_VER

ComLoadAllDBRsp::ComLoadAllDBRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComLoadAllDBRsp::InitAsDefaultInstance() {
}

ComLoadAllDBRsp::ComLoadAllDBRsp(const ComLoadAllDBRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComLoadAllDBRsp::SharedCtor() {
  _cached_size_ = 0;
  is_finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComLoadAllDBRsp::~ComLoadAllDBRsp() {
  SharedDtor();
}

void ComLoadAllDBRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComLoadAllDBRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComLoadAllDBRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComLoadAllDBRsp_descriptor_;
}

const ComLoadAllDBRsp& ComLoadAllDBRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ComLoadAllDBRsp* ComLoadAllDBRsp::default_instance_ = NULL;

ComLoadAllDBRsp* ComLoadAllDBRsp::New() const {
  return new ComLoadAllDBRsp;
}

void ComLoadAllDBRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_finish_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComLoadAllDBRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.ComDBProto data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectTag(16)) goto parse_is_finish;
        break;
      }

      // required int32 is_finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_finish_)));
          set_has_is_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComLoadAllDBRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.ComDBProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  // required int32 is_finish = 2;
  if (has_is_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComLoadAllDBRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.ComDBProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  // required int32 is_finish = 2;
  if (has_is_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComLoadAllDBRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 is_finish = 2;
    if (has_is_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_finish());
    }

  }
  // repeated .proto_ff.ComDBProto data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComLoadAllDBRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComLoadAllDBRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComLoadAllDBRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComLoadAllDBRsp::MergeFrom(const ComLoadAllDBRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_finish()) {
      set_is_finish(from.is_finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComLoadAllDBRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComLoadAllDBRsp::CopyFrom(const ComLoadAllDBRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComLoadAllDBRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void ComLoadAllDBRsp::Swap(ComLoadAllDBRsp* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(is_finish_, other->is_finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComLoadAllDBRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComLoadAllDBRsp_descriptor_;
  metadata.reflection = ComLoadAllDBRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComSaveDBReq::kIdFieldNumber;
const int ComSaveDBReq::kDataFieldNumber;
const int ComSaveDBReq::kTableNameFieldNumber;
#endif  // !_MSC_VER

ComSaveDBReq::ComSaveDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComSaveDBReq::InitAsDefaultInstance() {
}

ComSaveDBReq::ComSaveDBReq(const ComSaveDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComSaveDBReq::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComSaveDBReq::~ComSaveDBReq() {
  SharedDtor();
}

void ComSaveDBReq::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void ComSaveDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComSaveDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComSaveDBReq_descriptor_;
}

const ComSaveDBReq& ComSaveDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ComSaveDBReq* ComSaveDBReq::default_instance_ = NULL;

ComSaveDBReq* ComSaveDBReq::New() const {
  return new ComSaveDBReq;
}

void ComSaveDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComSaveDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_name;
        break;
      }

      // required bytes table_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComSaveDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  // required bytes table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->table_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComSaveDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // required bytes table_name = 3;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->table_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComSaveDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // required bytes table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComSaveDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComSaveDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComSaveDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComSaveDBReq::MergeFrom(const ComSaveDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComSaveDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComSaveDBReq::CopyFrom(const ComSaveDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComSaveDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ComSaveDBReq::Swap(ComSaveDBReq* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(data_, other->data_);
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComSaveDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComSaveDBReq_descriptor_;
  metadata.reflection = ComSaveDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ComDelDBReq::kTableNameFieldNumber;
const int ComDelDBReq::kIdLstFieldNumber;
#endif  // !_MSC_VER

ComDelDBReq::ComDelDBReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ComDelDBReq::InitAsDefaultInstance() {
}

ComDelDBReq::ComDelDBReq(const ComDelDBReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ComDelDBReq::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComDelDBReq::~ComDelDBReq() {
  SharedDtor();
}

void ComDelDBReq::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void ComDelDBReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ComDelDBReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComDelDBReq_descriptor_;
}

const ComDelDBReq& ComDelDBReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

ComDelDBReq* ComDelDBReq::default_instance_ = NULL;

ComDelDBReq* ComDelDBReq::New() const {
  return new ComDelDBReq;
}

void ComDelDBReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
  }
  id_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComDelDBReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_lst;
        break;
      }

      // repeated uint64 id_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16, input, this->mutable_id_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_id_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ComDelDBReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->table_name(), output);
  }

  // repeated uint64 id_lst = 2;
  for (int i = 0; i < this->id_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->id_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ComDelDBReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes table_name = 1;
  if (has_table_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->table_name(), target);
  }

  // repeated uint64 id_lst = 2;
  for (int i = 0; i < this->id_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(2, this->id_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ComDelDBReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_name());
    }

  }
  // repeated uint64 id_lst = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->id_lst(i));
    }
    total_size += 1 * this->id_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComDelDBReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComDelDBReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ComDelDBReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComDelDBReq::MergeFrom(const ComDelDBReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_lst_.MergeFrom(from.id_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComDelDBReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComDelDBReq::CopyFrom(const ComDelDBReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComDelDBReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ComDelDBReq::Swap(ComDelDBReq* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    id_lst_.Swap(&other->id_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ComDelDBReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ComDelDBReq_descriptor_;
  metadata.reflection = ComDelDBReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryApply::kApplyDstIdFieldNumber;
const int MarryApply::kTimeFieldNumber;
const int MarryApply::kGearFieldNumber;
#endif  // !_MSC_VER

MarryApply::MarryApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryApply::InitAsDefaultInstance() {
}

MarryApply::MarryApply(const MarryApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryApply::SharedCtor() {
  _cached_size_ = 0;
  apply_dst_id_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  gear_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryApply::~MarryApply() {
  SharedDtor();
}

void MarryApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryApply_descriptor_;
}

const MarryApply& MarryApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MarryApply* MarryApply::default_instance_ = NULL;

MarryApply* MarryApply::New() const {
  return new MarryApply;
}

void MarryApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    apply_dst_id_ = GOOGLE_ULONGLONG(0);
    time_ = GOOGLE_ULONGLONG(0);
    gear_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 apply_dst_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &apply_dst_id_)));
          set_has_apply_dst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional uint64 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gear;
        break;
      }

      // optional int32 gear = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gear:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gear_)));
          set_has_gear();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 apply_dst_id = 1;
  if (has_apply_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->apply_dst_id(), output);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  // optional int32 gear = 3;
  if (has_gear()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gear(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 apply_dst_id = 1;
  if (has_apply_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->apply_dst_id(), target);
  }

  // optional uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  // optional int32 gear = 3;
  if (has_gear()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gear(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 apply_dst_id = 1;
    if (has_apply_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->apply_dst_id());
    }

    // optional uint64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional int32 gear = 3;
    if (has_gear()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gear());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryApply::MergeFrom(const MarryApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_apply_dst_id()) {
      set_apply_dst_id(from.apply_dst_id());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_gear()) {
      set_gear(from.gear());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryApply::CopyFrom(const MarryApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryApply::IsInitialized() const {

  return true;
}

void MarryApply::Swap(MarryApply* other) {
  if (other != this) {
    std::swap(apply_dst_id_, other->apply_dst_id_);
    std::swap(time_, other->time_);
    std::swap(gear_, other->gear_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryApply_descriptor_;
  metadata.reflection = MarryApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarrySimpleInfo::kMIdFieldNumber;
const int MarrySimpleInfo::kDstIdFieldNumber;
const int MarrySimpleInfo::kMarryIdFieldNumber;
const int MarrySimpleInfo::kBriefFieldNumber;
const int MarrySimpleInfo::kApplyFieldNumber;
const int MarrySimpleInfo::kStateFieldNumber;
#endif  // !_MSC_VER

MarrySimpleInfo::MarrySimpleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarrySimpleInfo::InitAsDefaultInstance() {
  brief_ = const_cast< ::proto_ff::MarryBrief*>(&::proto_ff::MarryBrief::default_instance());
  apply_ = const_cast< ::proto_ff::MarryApply*>(&::proto_ff::MarryApply::default_instance());
}

MarrySimpleInfo::MarrySimpleInfo(const MarrySimpleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarrySimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = GOOGLE_ULONGLONG(0);
  dst_id_ = GOOGLE_ULONGLONG(0);
  marry_id_ = 0u;
  brief_ = NULL;
  apply_ = NULL;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarrySimpleInfo::~MarrySimpleInfo() {
  SharedDtor();
}

void MarrySimpleInfo::SharedDtor() {
  if (this != default_instance_) {
    delete brief_;
    delete apply_;
  }
}

void MarrySimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarrySimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarrySimpleInfo_descriptor_;
}

const MarrySimpleInfo& MarrySimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MarrySimpleInfo* MarrySimpleInfo::default_instance_ = NULL;

MarrySimpleInfo* MarrySimpleInfo::New() const {
  return new MarrySimpleInfo;
}

void MarrySimpleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = GOOGLE_ULONGLONG(0);
    dst_id_ = GOOGLE_ULONGLONG(0);
    marry_id_ = 0u;
    if (has_brief()) {
      if (brief_ != NULL) brief_->::proto_ff::MarryBrief::Clear();
    }
    if (has_apply()) {
      if (apply_ != NULL) apply_->::proto_ff::MarryApply::Clear();
    }
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarrySimpleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dst_id;
        break;
      }

      // optional uint64 dst_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dst_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dst_id_)));
          set_has_dst_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_marry_id;
        break;
      }

      // optional uint32 marry_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marry_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &marry_id_)));
          set_has_marry_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_brief;
        break;
      }

      // optional .proto_ff.MarryBrief brief = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_brief:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_brief()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_apply;
        break;
      }

      // optional .proto_ff.MarryApply apply = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_apply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_apply()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_state;
        break;
      }

      // optional int32 state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarrySimpleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->m_id(), output);
  }

  // optional uint64 dst_id = 2;
  if (has_dst_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->dst_id(), output);
  }

  // optional uint32 marry_id = 3;
  if (has_marry_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->marry_id(), output);
  }

  // optional .proto_ff.MarryBrief brief = 4;
  if (has_brief()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->brief(), output);
  }

  // optional .proto_ff.MarryApply apply = 5;
  if (has_apply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->apply(), output);
  }

  // optional int32 state = 6;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarrySimpleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->m_id(), target);
  }

  // optional uint64 dst_id = 2;
  if (has_dst_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->dst_id(), target);
  }

  // optional uint32 marry_id = 3;
  if (has_marry_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->marry_id(), target);
  }

  // optional .proto_ff.MarryBrief brief = 4;
  if (has_brief()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->brief(), target);
  }

  // optional .proto_ff.MarryApply apply = 5;
  if (has_apply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->apply(), target);
  }

  // optional int32 state = 6;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarrySimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->m_id());
    }

    // optional uint64 dst_id = 2;
    if (has_dst_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dst_id());
    }

    // optional uint32 marry_id = 3;
    if (has_marry_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->marry_id());
    }

    // optional .proto_ff.MarryBrief brief = 4;
    if (has_brief()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->brief());
    }

    // optional .proto_ff.MarryApply apply = 5;
    if (has_apply()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->apply());
    }

    // optional int32 state = 6;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarrySimpleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarrySimpleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarrySimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarrySimpleInfo::MergeFrom(const MarrySimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_dst_id()) {
      set_dst_id(from.dst_id());
    }
    if (from.has_marry_id()) {
      set_marry_id(from.marry_id());
    }
    if (from.has_brief()) {
      mutable_brief()->::proto_ff::MarryBrief::MergeFrom(from.brief());
    }
    if (from.has_apply()) {
      mutable_apply()->::proto_ff::MarryApply::MergeFrom(from.apply());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarrySimpleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarrySimpleInfo::CopyFrom(const MarrySimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarrySimpleInfo::IsInitialized() const {

  return true;
}

void MarrySimpleInfo::Swap(MarrySimpleInfo* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(dst_id_, other->dst_id_);
    std::swap(marry_id_, other->marry_id_);
    std::swap(brief_, other->brief_);
    std::swap(apply_, other->apply_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarrySimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarrySimpleInfo_descriptor_;
  metadata.reflection = MarrySimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryDBLoadReq::kOffsetFieldNumber;
#endif  // !_MSC_VER

MarryDBLoadReq::MarryDBLoadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryDBLoadReq::InitAsDefaultInstance() {
}

MarryDBLoadReq::MarryDBLoadReq(const MarryDBLoadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryDBLoadReq::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryDBLoadReq::~MarryDBLoadReq() {
  SharedDtor();
}

void MarryDBLoadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryDBLoadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryDBLoadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryDBLoadReq_descriptor_;
}

const MarryDBLoadReq& MarryDBLoadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MarryDBLoadReq* MarryDBLoadReq::default_instance_ = NULL;

MarryDBLoadReq* MarryDBLoadReq::New() const {
  return new MarryDBLoadReq;
}

void MarryDBLoadReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    offset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryDBLoadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 offset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryDBLoadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->offset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryDBLoadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 offset = 1;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->offset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryDBLoadReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 offset = 1;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryDBLoadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryDBLoadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryDBLoadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryDBLoadReq::MergeFrom(const MarryDBLoadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryDBLoadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryDBLoadReq::CopyFrom(const MarryDBLoadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryDBLoadReq::IsInitialized() const {

  return true;
}

void MarryDBLoadReq::Swap(MarryDBLoadReq* other) {
  if (other != this) {
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryDBLoadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryDBLoadReq_descriptor_;
  metadata.reflection = MarryDBLoadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryDBLoadRsp::kRetFieldNumber;
const int MarryDBLoadRsp::kOffsetFieldNumber;
const int MarryDBLoadRsp::kSimpleFieldNumber;
#endif  // !_MSC_VER

MarryDBLoadRsp::MarryDBLoadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryDBLoadRsp::InitAsDefaultInstance() {
}

MarryDBLoadRsp::MarryDBLoadRsp(const MarryDBLoadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryDBLoadRsp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryDBLoadRsp::~MarryDBLoadRsp() {
  SharedDtor();
}

void MarryDBLoadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryDBLoadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryDBLoadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryDBLoadRsp_descriptor_;
}

const MarryDBLoadRsp& MarryDBLoadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MarryDBLoadRsp* MarryDBLoadRsp::default_instance_ = NULL;

MarryDBLoadRsp* MarryDBLoadRsp::New() const {
  return new MarryDBLoadRsp;
}

void MarryDBLoadRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    offset_ = 0;
  }
  simple_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryDBLoadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }

      // optional int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_simple;
        break;
      }

      // repeated .proto_ff.MarrySimpleInfo simple = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_simple;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryDBLoadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }

  // repeated .proto_ff.MarrySimpleInfo simple = 3;
  for (int i = 0; i < this->simple_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->simple(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryDBLoadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }

  // repeated .proto_ff.MarrySimpleInfo simple = 3;
  for (int i = 0; i < this->simple_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->simple(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryDBLoadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

  }
  // repeated .proto_ff.MarrySimpleInfo simple = 3;
  total_size += 1 * this->simple_size();
  for (int i = 0; i < this->simple_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simple(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryDBLoadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryDBLoadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryDBLoadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryDBLoadRsp::MergeFrom(const MarryDBLoadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  simple_.MergeFrom(from.simple_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryDBLoadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryDBLoadRsp::CopyFrom(const MarryDBLoadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryDBLoadRsp::IsInitialized() const {

  return true;
}

void MarryDBLoadRsp::Swap(MarryDBLoadRsp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(offset_, other->offset_);
    simple_.Swap(&other->simple_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryDBLoadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryDBLoadRsp_descriptor_;
  metadata.reflection = MarryDBLoadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryDBSaveReq::kInfoFieldNumber;
#endif  // !_MSC_VER

MarryDBSaveReq::MarryDBSaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryDBSaveReq::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::MarrySimpleInfo*>(&::proto_ff::MarrySimpleInfo::default_instance());
}

MarryDBSaveReq::MarryDBSaveReq(const MarryDBSaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryDBSaveReq::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryDBSaveReq::~MarryDBSaveReq() {
  SharedDtor();
}

void MarryDBSaveReq::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MarryDBSaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryDBSaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryDBSaveReq_descriptor_;
}

const MarryDBSaveReq& MarryDBSaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MarryDBSaveReq* MarryDBSaveReq::default_instance_ = NULL;

MarryDBSaveReq* MarryDBSaveReq::New() const {
  return new MarryDBSaveReq;
}

void MarryDBSaveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::MarrySimpleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryDBSaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.MarrySimpleInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryDBSaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.MarrySimpleInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryDBSaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.MarrySimpleInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryDBSaveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.MarrySimpleInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryDBSaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryDBSaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryDBSaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryDBSaveReq::MergeFrom(const MarryDBSaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::MarrySimpleInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryDBSaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryDBSaveReq::CopyFrom(const MarryDBSaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryDBSaveReq::IsInitialized() const {

  return true;
}

void MarryDBSaveReq::Swap(MarryDBSaveReq* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryDBSaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryDBSaveReq_descriptor_;
  metadata.reflection = MarryDBSaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerRankDBProto::kFactionidFieldNumber;
const int AnswerRankDBProto::kNameFieldNumber;
const int AnswerRankDBProto::kCountFieldNumber;
const int AnswerRankDBProto::kZidFieldNumber;
#endif  // !_MSC_VER

AnswerRankDBProto::AnswerRankDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerRankDBProto::InitAsDefaultInstance() {
}

AnswerRankDBProto::AnswerRankDBProto(const AnswerRankDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerRankDBProto::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerRankDBProto::~AnswerRankDBProto() {
  SharedDtor();
}

void AnswerRankDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AnswerRankDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerRankDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerRankDBProto_descriptor_;
}

const AnswerRankDBProto& AnswerRankDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

AnswerRankDBProto* AnswerRankDBProto::default_instance_ = NULL;

AnswerRankDBProto* AnswerRankDBProto::New() const {
  return new AnswerRankDBProto;
}

void AnswerRankDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = 0u;
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerRankDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerRankDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerRankDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerRankDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerRankDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerRankDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerRankDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerRankDBProto::MergeFrom(const AnswerRankDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerRankDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerRankDBProto::CopyFrom(const AnswerRankDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerRankDBProto::IsInitialized() const {

  return true;
}

void AnswerRankDBProto::Swap(AnswerRankDBProto* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerRankDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerRankDBProto_descriptor_;
  metadata.reflection = AnswerRankDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerDBData::kRankFieldNumber;
#endif  // !_MSC_VER

AnswerDBData::AnswerDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerDBData::InitAsDefaultInstance() {
}

AnswerDBData::AnswerDBData(const AnswerDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerDBData::~AnswerDBData() {
  SharedDtor();
}

void AnswerDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerDBData_descriptor_;
}

const AnswerDBData& AnswerDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

AnswerDBData* AnswerDBData::default_instance_ = NULL;

AnswerDBData* AnswerDBData::New() const {
  return new AnswerDBData;
}

void AnswerDBData::Clear() {
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.AnswerRankDBProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.AnswerRankDBProto rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.AnswerRankDBProto rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.AnswerRankDBProto rank = 1;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerDBData::MergeFrom(const AnswerDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerDBData::CopyFrom(const AnswerDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerDBData::IsInitialized() const {

  return true;
}

void AnswerDBData::Swap(AnswerDBData* other) {
  if (other != this) {
    rank_.Swap(&other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerDBData_descriptor_;
  metadata.reflection = AnswerDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuardRankDBProto::kFactionidFieldNumber;
const int GuardRankDBProto::kNameFieldNumber;
const int GuardRankDBProto::kCountFieldNumber;
const int GuardRankDBProto::kTimeFieldNumber;
const int GuardRankDBProto::kZidFieldNumber;
#endif  // !_MSC_VER

GuardRankDBProto::GuardRankDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuardRankDBProto::InitAsDefaultInstance() {
}

GuardRankDBProto::GuardRankDBProto(const GuardRankDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuardRankDBProto::SharedCtor() {
  _cached_size_ = 0;
  factionid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0u;
  time_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuardRankDBProto::~GuardRankDBProto() {
  SharedDtor();
}

void GuardRankDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GuardRankDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuardRankDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuardRankDBProto_descriptor_;
}

const GuardRankDBProto& GuardRankDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GuardRankDBProto* GuardRankDBProto::default_instance_ = NULL;

GuardRankDBProto* GuardRankDBProto::New() const {
  return new GuardRankDBProto;
}

void GuardRankDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factionid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    count_ = 0u;
    time_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuardRankDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 factionid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &factionid_)));
          set_has_factionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional uint32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional uint64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuardRankDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->factionid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->count(), output);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->time(), output);
  }

  // optional uint32 zid = 5;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuardRankDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 factionid = 1;
  if (has_factionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->factionid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->count(), target);
  }

  // optional uint64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->time(), target);
  }

  // optional uint32 zid = 5;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuardRankDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 factionid = 1;
    if (has_factionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->factionid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

    // optional uint64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

    // optional uint32 zid = 5;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuardRankDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuardRankDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuardRankDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuardRankDBProto::MergeFrom(const GuardRankDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factionid()) {
      set_factionid(from.factionid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuardRankDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardRankDBProto::CopyFrom(const GuardRankDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardRankDBProto::IsInitialized() const {

  return true;
}

void GuardRankDBProto::Swap(GuardRankDBProto* other) {
  if (other != this) {
    std::swap(factionid_, other->factionid_);
    std::swap(name_, other->name_);
    std::swap(count_, other->count_);
    std::swap(time_, other->time_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuardRankDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuardRankDBProto_descriptor_;
  metadata.reflection = GuardRankDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GuardDBData::kOldRankFieldNumber;
const int GuardDBData::kCurRankFieldNumber;
#endif  // !_MSC_VER

GuardDBData::GuardDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GuardDBData::InitAsDefaultInstance() {
}

GuardDBData::GuardDBData(const GuardDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GuardDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GuardDBData::~GuardDBData() {
  SharedDtor();
}

void GuardDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GuardDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GuardDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GuardDBData_descriptor_;
}

const GuardDBData& GuardDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GuardDBData* GuardDBData::default_instance_ = NULL;

GuardDBData* GuardDBData::New() const {
  return new GuardDBData;
}

void GuardDBData::Clear() {
  old_rank_.Clear();
  cur_rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GuardDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GuardRankDBProto old_rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_old_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_old_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_old_rank;
        if (input->ExpectTag(18)) goto parse_cur_rank;
        break;
      }

      // repeated .proto_ff.GuardRankDBProto cur_rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cur_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cur_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cur_rank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GuardDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GuardRankDBProto old_rank = 1;
  for (int i = 0; i < this->old_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->old_rank(i), output);
  }

  // repeated .proto_ff.GuardRankDBProto cur_rank = 2;
  for (int i = 0; i < this->cur_rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cur_rank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GuardDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GuardRankDBProto old_rank = 1;
  for (int i = 0; i < this->old_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->old_rank(i), target);
  }

  // repeated .proto_ff.GuardRankDBProto cur_rank = 2;
  for (int i = 0; i < this->cur_rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cur_rank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GuardDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.GuardRankDBProto old_rank = 1;
  total_size += 1 * this->old_rank_size();
  for (int i = 0; i < this->old_rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->old_rank(i));
  }

  // repeated .proto_ff.GuardRankDBProto cur_rank = 2;
  total_size += 1 * this->cur_rank_size();
  for (int i = 0; i < this->cur_rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cur_rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GuardDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GuardDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GuardDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GuardDBData::MergeFrom(const GuardDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  old_rank_.MergeFrom(from.old_rank_);
  cur_rank_.MergeFrom(from.cur_rank_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GuardDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GuardDBData::CopyFrom(const GuardDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GuardDBData::IsInitialized() const {

  return true;
}

void GuardDBData::Swap(GuardDBData* other) {
  if (other != this) {
    old_rank_.Swap(&other->old_rank_);
    cur_rank_.Swap(&other->cur_rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GuardDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GuardDBData_descriptor_;
  metadata.reflection = GuardDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Rank1v1DBProto::kRankFieldNumber;
const int Rank1v1DBProto::kCidFieldNumber;
const int Rank1v1DBProto::kNameFieldNumber;
const int Rank1v1DBProto::kProfFieldNumber;
const int Rank1v1DBProto::kFightFieldNumber;
const int Rank1v1DBProto::kZidFieldNumber;
const int Rank1v1DBProto::kScoreFieldNumber;
const int Rank1v1DBProto::kTimeFieldNumber;
const int Rank1v1DBProto::kMatchNumFieldNumber;
#endif  // !_MSC_VER

Rank1v1DBProto::Rank1v1DBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Rank1v1DBProto::InitAsDefaultInstance() {
}

Rank1v1DBProto::Rank1v1DBProto(const Rank1v1DBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Rank1v1DBProto::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prof_ = 0;
  fight_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  score_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  match_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Rank1v1DBProto::~Rank1v1DBProto() {
  SharedDtor();
}

void Rank1v1DBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Rank1v1DBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Rank1v1DBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Rank1v1DBProto_descriptor_;
}

const Rank1v1DBProto& Rank1v1DBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

Rank1v1DBProto* Rank1v1DBProto::default_instance_ = NULL;

Rank1v1DBProto* Rank1v1DBProto::New() const {
  return new Rank1v1DBProto;
}

void Rank1v1DBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    prof_ = 0;
    fight_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    score_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    match_num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Rank1v1DBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_prof;
        break;
      }

      // optional int32 prof = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prof:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prof_)));
          set_has_prof();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_score;
        break;
      }

      // optional int32 score = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_time;
        break;
      }

      // optional uint64 time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_match_num;
        break;
      }

      // optional int32 match_num = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_match_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &match_num_)));
          set_has_match_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Rank1v1DBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->prof(), output);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->fight(), output);
  }

  // optional uint32 zid = 6;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->zid(), output);
  }

  // optional int32 score = 7;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->score(), output);
  }

  // optional uint64 time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->time(), output);
  }

  // optional int32 match_num = 9;
  if (has_match_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->match_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Rank1v1DBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 prof = 4;
  if (has_prof()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->prof(), target);
  }

  // optional uint64 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->fight(), target);
  }

  // optional uint32 zid = 6;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->zid(), target);
  }

  // optional int32 score = 7;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->score(), target);
  }

  // optional uint64 time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->time(), target);
  }

  // optional int32 match_num = 9;
  if (has_match_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->match_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Rank1v1DBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 prof = 4;
    if (has_prof()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prof());
    }

    // optional uint64 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint32 zid = 6;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional int32 score = 7;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional uint64 time = 8;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 match_num = 9;
    if (has_match_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->match_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rank1v1DBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Rank1v1DBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Rank1v1DBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Rank1v1DBProto::MergeFrom(const Rank1v1DBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_prof()) {
      set_prof(from.prof());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_match_num()) {
      set_match_num(from.match_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Rank1v1DBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rank1v1DBProto::CopyFrom(const Rank1v1DBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rank1v1DBProto::IsInitialized() const {

  return true;
}

void Rank1v1DBProto::Swap(Rank1v1DBProto* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(prof_, other->prof_);
    std::swap(fight_, other->fight_);
    std::swap(zid_, other->zid_);
    std::swap(score_, other->score_);
    std::swap(time_, other->time_);
    std::swap(match_num_, other->match_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Rank1v1DBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Rank1v1DBProto_descriptor_;
  metadata.reflection = Rank1v1DBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Act1v1DBData::kRankFieldNumber;
const int Act1v1DBData::kResetTimeFieldNumber;
const int Act1v1DBData::kNumFieldNumber;
#endif  // !_MSC_VER

Act1v1DBData::Act1v1DBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Act1v1DBData::InitAsDefaultInstance() {
}

Act1v1DBData::Act1v1DBData(const Act1v1DBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Act1v1DBData::SharedCtor() {
  _cached_size_ = 0;
  reset_time_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Act1v1DBData::~Act1v1DBData() {
  SharedDtor();
}

void Act1v1DBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Act1v1DBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Act1v1DBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Act1v1DBData_descriptor_;
}

const Act1v1DBData& Act1v1DBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

Act1v1DBData* Act1v1DBData::default_instance_ = NULL;

Act1v1DBData* Act1v1DBData::New() const {
  return new Act1v1DBData;
}

void Act1v1DBData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    reset_time_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
  }
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Act1v1DBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.Rank1v1DBProto rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_rank;
        if (input->ExpectTag(16)) goto parse_reset_time;
        break;
      }

      // optional uint64 reset_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &reset_time_)));
          set_has_reset_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Act1v1DBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.Rank1v1DBProto rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rank(i), output);
  }

  // optional uint64 reset_time = 2;
  if (has_reset_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->reset_time(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Act1v1DBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.Rank1v1DBProto rank = 1;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rank(i), target);
  }

  // optional uint64 reset_time = 2;
  if (has_reset_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->reset_time(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Act1v1DBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint64 reset_time = 2;
    if (has_reset_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->reset_time());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated .proto_ff.Rank1v1DBProto rank = 1;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Act1v1DBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Act1v1DBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Act1v1DBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Act1v1DBData::MergeFrom(const Act1v1DBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_reset_time()) {
      set_reset_time(from.reset_time());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Act1v1DBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Act1v1DBData::CopyFrom(const Act1v1DBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Act1v1DBData::IsInitialized() const {

  return true;
}

void Act1v1DBData::Swap(Act1v1DBData* other) {
  if (other != this) {
    rank_.Swap(&other->rank_);
    std::swap(reset_time_, other->reset_time_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Act1v1DBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Act1v1DBData_descriptor_;
  metadata.reflection = Act1v1DBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceFactionDBProto::kFactionIdFieldNumber;
const int RaceFactionDBProto::kNameFieldNumber;
const int RaceFactionDBProto::kFightFieldNumber;
const int RaceFactionDBProto::kZidFieldNumber;
#endif  // !_MSC_VER

RaceFactionDBProto::RaceFactionDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceFactionDBProto::InitAsDefaultInstance() {
}

RaceFactionDBProto::RaceFactionDBProto(const RaceFactionDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceFactionDBProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceFactionDBProto::~RaceFactionDBProto() {
  SharedDtor();
}

void RaceFactionDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RaceFactionDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceFactionDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceFactionDBProto_descriptor_;
}

const RaceFactionDBProto& RaceFactionDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RaceFactionDBProto* RaceFactionDBProto::default_instance_ = NULL;

RaceFactionDBProto* RaceFactionDBProto::New() const {
  return new RaceFactionDBProto;
}

void RaceFactionDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    fight_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceFactionDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional uint64 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceFactionDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fight(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceFactionDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint64 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fight(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceFactionDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fight());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceFactionDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceFactionDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceFactionDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceFactionDBProto::MergeFrom(const RaceFactionDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceFactionDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceFactionDBProto::CopyFrom(const RaceFactionDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceFactionDBProto::IsInitialized() const {

  return true;
}

void RaceFactionDBProto::Swap(RaceFactionDBProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(fight_, other->fight_);
    std::swap(zid_, other->zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceFactionDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceFactionDBProto_descriptor_;
  metadata.reflection = RaceFactionDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceMatchDBProto::kFactionId1FieldNumber;
const int RaceMatchDBProto::kFactionId2FieldNumber;
const int RaceMatchDBProto::kFactionIdFieldNumber;
#endif  // !_MSC_VER

RaceMatchDBProto::RaceMatchDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceMatchDBProto::InitAsDefaultInstance() {
}

RaceMatchDBProto::RaceMatchDBProto(const RaceMatchDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceMatchDBProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id1_ = 0u;
  faction_id2_ = 0u;
  faction_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceMatchDBProto::~RaceMatchDBProto() {
  SharedDtor();
}

void RaceMatchDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceMatchDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceMatchDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceMatchDBProto_descriptor_;
}

const RaceMatchDBProto& RaceMatchDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RaceMatchDBProto* RaceMatchDBProto::default_instance_ = NULL;

RaceMatchDBProto* RaceMatchDBProto::New() const {
  return new RaceMatchDBProto;
}

void RaceMatchDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id1_ = 0u;
    faction_id2_ = 0u;
    faction_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceMatchDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id1_)));
          set_has_faction_id1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id2;
        break;
      }

      // optional uint32 faction_id2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id2_)));
          set_has_faction_id2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_faction_id;
        break;
      }

      // optional uint32 faction_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceMatchDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id1 = 1;
  if (has_faction_id1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id1(), output);
  }

  // optional uint32 faction_id2 = 2;
  if (has_faction_id2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id2(), output);
  }

  // optional uint32 faction_id = 3;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->faction_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceMatchDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id1 = 1;
  if (has_faction_id1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id1(), target);
  }

  // optional uint32 faction_id2 = 2;
  if (has_faction_id2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id2(), target);
  }

  // optional uint32 faction_id = 3;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->faction_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceMatchDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id1 = 1;
    if (has_faction_id1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id1());
    }

    // optional uint32 faction_id2 = 2;
    if (has_faction_id2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id2());
    }

    // optional uint32 faction_id = 3;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceMatchDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceMatchDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceMatchDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceMatchDBProto::MergeFrom(const RaceMatchDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id1()) {
      set_faction_id1(from.faction_id1());
    }
    if (from.has_faction_id2()) {
      set_faction_id2(from.faction_id2());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceMatchDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceMatchDBProto::CopyFrom(const RaceMatchDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceMatchDBProto::IsInitialized() const {

  return true;
}

void RaceMatchDBProto::Swap(RaceMatchDBProto* other) {
  if (other != this) {
    std::swap(faction_id1_, other->faction_id1_);
    std::swap(faction_id2_, other->faction_id2_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceMatchDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceMatchDBProto_descriptor_;
  metadata.reflection = RaceMatchDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RaceDBProto::kRaceFieldNumber;
const int RaceDBProto::kInfoLstFieldNumber;
#endif  // !_MSC_VER

RaceDBProto::RaceDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RaceDBProto::InitAsDefaultInstance() {
}

RaceDBProto::RaceDBProto(const RaceDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RaceDBProto::SharedCtor() {
  _cached_size_ = 0;
  race_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RaceDBProto::~RaceDBProto() {
  SharedDtor();
}

void RaceDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RaceDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RaceDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RaceDBProto_descriptor_;
}

const RaceDBProto& RaceDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

RaceDBProto* RaceDBProto::default_instance_ = NULL;

RaceDBProto* RaceDBProto::New() const {
  return new RaceDBProto;
}

void RaceDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    race_ = 0;
  }
  info_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RaceDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 race = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &race_)));
          set_has_race();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_lst;
        break;
      }

      // repeated .proto_ff.RaceFactionDBProto info_lst = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_lst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_lst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info_lst;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RaceDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 race = 1;
  if (has_race()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->race(), output);
  }

  // repeated .proto_ff.RaceFactionDBProto info_lst = 2;
  for (int i = 0; i < this->info_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info_lst(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RaceDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 race = 1;
  if (has_race()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->race(), target);
  }

  // repeated .proto_ff.RaceFactionDBProto info_lst = 2;
  for (int i = 0; i < this->info_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info_lst(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RaceDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 race = 1;
    if (has_race()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->race());
    }

  }
  // repeated .proto_ff.RaceFactionDBProto info_lst = 2;
  total_size += 1 * this->info_lst_size();
  for (int i = 0; i < this->info_lst_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_lst(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RaceDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RaceDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RaceDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RaceDBProto::MergeFrom(const RaceDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_lst_.MergeFrom(from.info_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_race()) {
      set_race(from.race());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RaceDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RaceDBProto::CopyFrom(const RaceDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RaceDBProto::IsInitialized() const {

  return true;
}

void RaceDBProto::Swap(RaceDBProto* other) {
  if (other != this) {
    std::swap(race_, other->race_);
    info_lst_.Swap(&other->info_lst_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RaceDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RaceDBProto_descriptor_;
  metadata.reflection = RaceDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarRankDBProto::kFactionIdFieldNumber;
const int WarRankDBProto::kNameFieldNumber;
const int WarRankDBProto::kZidFieldNumber;
const int WarRankDBProto::kRankFieldNumber;
#endif  // !_MSC_VER

WarRankDBProto::WarRankDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarRankDBProto::InitAsDefaultInstance() {
}

WarRankDBProto::WarRankDBProto(const WarRankDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarRankDBProto::SharedCtor() {
  _cached_size_ = 0;
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarRankDBProto::~WarRankDBProto() {
  SharedDtor();
}

void WarRankDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WarRankDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarRankDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarRankDBProto_descriptor_;
}

const WarRankDBProto& WarRankDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

WarRankDBProto* WarRankDBProto::default_instance_ = NULL;

WarRankDBProto* WarRankDBProto::New() const {
  return new WarRankDBProto;
}

void WarRankDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    zid_ = 0u;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarRankDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 faction_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rank;
        break;
      }

      // optional int32 rank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarRankDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->faction_id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->zid(), output);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarRankDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 faction_id = 1;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->faction_id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint32 zid = 3;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->zid(), target);
  }

  // optional int32 rank = 4;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarRankDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 faction_id = 1;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint32 zid = 3;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional int32 rank = 4;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarRankDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarRankDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarRankDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarRankDBProto::MergeFrom(const WarRankDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarRankDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarRankDBProto::CopyFrom(const WarRankDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarRankDBProto::IsInitialized() const {

  return true;
}

void WarRankDBProto::Swap(WarRankDBProto* other) {
  if (other != this) {
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(zid_, other->zid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarRankDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarRankDBProto_descriptor_;
  metadata.reflection = WarRankDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactionWarDBData::kRaceFieldNumber;
const int FactionWarDBData::kRankFieldNumber;
const int FactionWarDBData::kWinIdFieldNumber;
const int FactionWarDBData::kWinNameFieldNumber;
const int FactionWarDBData::kWinNumFieldNumber;
const int FactionWarDBData::kWinZidFieldNumber;
#endif  // !_MSC_VER

FactionWarDBData::FactionWarDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactionWarDBData::InitAsDefaultInstance() {
}

FactionWarDBData::FactionWarDBData(const FactionWarDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactionWarDBData::SharedCtor() {
  _cached_size_ = 0;
  win_id_ = 0u;
  win_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  win_num_ = 0;
  win_zid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactionWarDBData::~FactionWarDBData() {
  SharedDtor();
}

void FactionWarDBData::SharedDtor() {
  if (win_name_ != &::google::protobuf::internal::kEmptyString) {
    delete win_name_;
  }
  if (this != default_instance_) {
  }
}

void FactionWarDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactionWarDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactionWarDBData_descriptor_;
}

const FactionWarDBData& FactionWarDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FactionWarDBData* FactionWarDBData::default_instance_ = NULL;

FactionWarDBData* FactionWarDBData::New() const {
  return new FactionWarDBData;
}

void FactionWarDBData::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    win_id_ = 0u;
    if (has_win_name()) {
      if (win_name_ != &::google::protobuf::internal::kEmptyString) {
        win_name_->clear();
      }
    }
    win_num_ = 0;
    win_zid_ = 0u;
  }
  race_.Clear();
  rank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactionWarDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.RaceDBProto race = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_race:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_race()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_race;
        if (input->ExpectTag(18)) goto parse_rank;
        break;
      }

      // repeated .proto_ff.WarRankDBProto rank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rank;
        if (input->ExpectTag(24)) goto parse_win_id;
        break;
      }

      // optional uint32 win_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_id_)));
          set_has_win_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_win_name;
        break;
      }

      // optional bytes win_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_win_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_win_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_win_num;
        break;
      }

      // optional int32 win_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_num_)));
          set_has_win_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_win_zid;
        break;
      }

      // optional uint32 win_zid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &win_zid_)));
          set_has_win_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactionWarDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.RaceDBProto race = 1;
  for (int i = 0; i < this->race_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->race(i), output);
  }

  // repeated .proto_ff.WarRankDBProto rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rank(i), output);
  }

  // optional uint32 win_id = 3;
  if (has_win_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->win_id(), output);
  }

  // optional bytes win_name = 4;
  if (has_win_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->win_name(), output);
  }

  // optional int32 win_num = 5;
  if (has_win_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->win_num(), output);
  }

  // optional uint32 win_zid = 6;
  if (has_win_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->win_zid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactionWarDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.RaceDBProto race = 1;
  for (int i = 0; i < this->race_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->race(i), target);
  }

  // repeated .proto_ff.WarRankDBProto rank = 2;
  for (int i = 0; i < this->rank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rank(i), target);
  }

  // optional uint32 win_id = 3;
  if (has_win_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->win_id(), target);
  }

  // optional bytes win_name = 4;
  if (has_win_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->win_name(), target);
  }

  // optional int32 win_num = 5;
  if (has_win_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->win_num(), target);
  }

  // optional uint32 win_zid = 6;
  if (has_win_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->win_zid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactionWarDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional uint32 win_id = 3;
    if (has_win_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_id());
    }

    // optional bytes win_name = 4;
    if (has_win_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->win_name());
    }

    // optional int32 win_num = 5;
    if (has_win_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win_num());
    }

    // optional uint32 win_zid = 6;
    if (has_win_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->win_zid());
    }

  }
  // repeated .proto_ff.RaceDBProto race = 1;
  total_size += 1 * this->race_size();
  for (int i = 0; i < this->race_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->race(i));
  }

  // repeated .proto_ff.WarRankDBProto rank = 2;
  total_size += 1 * this->rank_size();
  for (int i = 0; i < this->rank_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rank(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactionWarDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactionWarDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactionWarDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactionWarDBData::MergeFrom(const FactionWarDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  race_.MergeFrom(from.race_);
  rank_.MergeFrom(from.rank_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_win_id()) {
      set_win_id(from.win_id());
    }
    if (from.has_win_name()) {
      set_win_name(from.win_name());
    }
    if (from.has_win_num()) {
      set_win_num(from.win_num());
    }
    if (from.has_win_zid()) {
      set_win_zid(from.win_zid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactionWarDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactionWarDBData::CopyFrom(const FactionWarDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactionWarDBData::IsInitialized() const {

  return true;
}

void FactionWarDBData::Swap(FactionWarDBData* other) {
  if (other != this) {
    race_.Swap(&other->race_);
    rank_.Swap(&other->rank_);
    std::swap(win_id_, other->win_id_);
    std::swap(win_name_, other->win_name_);
    std::swap(win_num_, other->win_num_);
    std::swap(win_zid_, other->win_zid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactionWarDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactionWarDBData_descriptor_;
  metadata.reflection = FactionWarDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DigEggLogDBProto::kNameFieldNumber;
const int DigEggLogDBProto::kIdFieldNumber;
const int DigEggLogDBProto::kCidFieldNumber;
#endif  // !_MSC_VER

DigEggLogDBProto::DigEggLogDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DigEggLogDBProto::InitAsDefaultInstance() {
}

DigEggLogDBProto::DigEggLogDBProto(const DigEggLogDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DigEggLogDBProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DigEggLogDBProto::~DigEggLogDBProto() {
  SharedDtor();
}

void DigEggLogDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void DigEggLogDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DigEggLogDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DigEggLogDBProto_descriptor_;
}

const DigEggLogDBProto& DigEggLogDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

DigEggLogDBProto* DigEggLogDBProto::default_instance_ = NULL;

DigEggLogDBProto* DigEggLogDBProto::New() const {
  return new DigEggLogDBProto;
}

void DigEggLogDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = 0;
    cid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DigEggLogDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DigEggLogDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->cid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DigEggLogDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional uint64 cid = 3;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->cid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DigEggLogDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint64 cid = 3;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DigEggLogDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DigEggLogDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DigEggLogDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DigEggLogDBProto::MergeFrom(const DigEggLogDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DigEggLogDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigEggLogDBProto::CopyFrom(const DigEggLogDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigEggLogDBProto::IsInitialized() const {

  return true;
}

void DigEggLogDBProto::Swap(DigEggLogDBProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(cid_, other->cid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DigEggLogDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DigEggLogDBProto_descriptor_;
  metadata.reflection = DigEggLogDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDigEggLogDBProto::kTemplateIdFieldNumber;
const int FestDigEggLogDBProto::kInfoFieldNumber;
#endif  // !_MSC_VER

FestDigEggLogDBProto::FestDigEggLogDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDigEggLogDBProto::InitAsDefaultInstance() {
}

FestDigEggLogDBProto::FestDigEggLogDBProto(const FestDigEggLogDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDigEggLogDBProto::SharedCtor() {
  _cached_size_ = 0;
  template_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDigEggLogDBProto::~FestDigEggLogDBProto() {
  SharedDtor();
}

void FestDigEggLogDBProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDigEggLogDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDigEggLogDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDigEggLogDBProto_descriptor_;
}

const FestDigEggLogDBProto& FestDigEggLogDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDigEggLogDBProto* FestDigEggLogDBProto::default_instance_ = NULL;

FestDigEggLogDBProto* FestDigEggLogDBProto::New() const {
  return new FestDigEggLogDBProto;
}

void FestDigEggLogDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    template_id_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDigEggLogDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 template_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &template_id_)));
          set_has_template_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .proto_ff.DigEggLogDBProto info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDigEggLogDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->template_id(), output);
  }

  // repeated .proto_ff.DigEggLogDBProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDigEggLogDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 template_id = 1;
  if (has_template_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->template_id(), target);
  }

  // repeated .proto_ff.DigEggLogDBProto info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDigEggLogDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 template_id = 1;
    if (has_template_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->template_id());
    }

  }
  // repeated .proto_ff.DigEggLogDBProto info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDigEggLogDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDigEggLogDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDigEggLogDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDigEggLogDBProto::MergeFrom(const FestDigEggLogDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_template_id()) {
      set_template_id(from.template_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDigEggLogDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDigEggLogDBProto::CopyFrom(const FestDigEggLogDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDigEggLogDBProto::IsInitialized() const {

  return true;
}

void FestDigEggLogDBProto::Swap(FestDigEggLogDBProto* other) {
  if (other != this) {
    std::swap(template_id_, other->template_id_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDigEggLogDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDigEggLogDBProto_descriptor_;
  metadata.reflection = FestDigEggLogDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDigEggLogDBData::kLogFieldNumber;
#endif  // !_MSC_VER

FestDigEggLogDBData::FestDigEggLogDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDigEggLogDBData::InitAsDefaultInstance() {
}

FestDigEggLogDBData::FestDigEggLogDBData(const FestDigEggLogDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDigEggLogDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDigEggLogDBData::~FestDigEggLogDBData() {
  SharedDtor();
}

void FestDigEggLogDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDigEggLogDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDigEggLogDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDigEggLogDBData_descriptor_;
}

const FestDigEggLogDBData& FestDigEggLogDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDigEggLogDBData* FestDigEggLogDBData::default_instance_ = NULL;

FestDigEggLogDBData* FestDigEggLogDBData::New() const {
  return new FestDigEggLogDBData;
}

void FestDigEggLogDBData::Clear() {
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDigEggLogDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDigEggLogDBProto log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDigEggLogDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDigEggLogDBProto log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDigEggLogDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDigEggLogDBProto log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDigEggLogDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestDigEggLogDBProto log = 1;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDigEggLogDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDigEggLogDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDigEggLogDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDigEggLogDBData::MergeFrom(const FestDigEggLogDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDigEggLogDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDigEggLogDBData::CopyFrom(const FestDigEggLogDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDigEggLogDBData::IsInitialized() const {

  return true;
}

void FestDigEggLogDBData::Swap(FestDigEggLogDBData* other) {
  if (other != this) {
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDigEggLogDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDigEggLogDBData_descriptor_;
  metadata.reflection = FestDigEggLogDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestRTurnableLogDBData::kLogFieldNumber;
#endif  // !_MSC_VER

FestRTurnableLogDBData::FestRTurnableLogDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestRTurnableLogDBData::InitAsDefaultInstance() {
}

FestRTurnableLogDBData::FestRTurnableLogDBData(const FestRTurnableLogDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestRTurnableLogDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestRTurnableLogDBData::~FestRTurnableLogDBData() {
  SharedDtor();
}

void FestRTurnableLogDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestRTurnableLogDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestRTurnableLogDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestRTurnableLogDBData_descriptor_;
}

const FestRTurnableLogDBData& FestRTurnableLogDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestRTurnableLogDBData* FestRTurnableLogDBData::default_instance_ = NULL;

FestRTurnableLogDBData* FestRTurnableLogDBData::New() const {
  return new FestRTurnableLogDBData;
}

void FestRTurnableLogDBData::Clear() {
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestRTurnableLogDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestRTurnableLogDBProto log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestRTurnableLogDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestRTurnableLogDBProto log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestRTurnableLogDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestRTurnableLogDBProto log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestRTurnableLogDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestRTurnableLogDBProto log = 1;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestRTurnableLogDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestRTurnableLogDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestRTurnableLogDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestRTurnableLogDBData::MergeFrom(const FestRTurnableLogDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestRTurnableLogDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestRTurnableLogDBData::CopyFrom(const FestRTurnableLogDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestRTurnableLogDBData::IsInitialized() const {

  return true;
}

void FestRTurnableLogDBData::Swap(FestRTurnableLogDBData* other) {
  if (other != this) {
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestRTurnableLogDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestRTurnableLogDBData_descriptor_;
  metadata.reflection = FestRTurnableLogDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDonateDBData::kDataFieldNumber;
#endif  // !_MSC_VER

FestDonateDBData::FestDonateDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDonateDBData::InitAsDefaultInstance() {
}

FestDonateDBData::FestDonateDBData(const FestDonateDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDonateDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDonateDBData::~FestDonateDBData() {
  SharedDtor();
}

void FestDonateDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDonateDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDonateDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDonateDBData_descriptor_;
}

const FestDonateDBData& FestDonateDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDonateDBData* FestDonateDBData::default_instance_ = NULL;

FestDonateDBData* FestDonateDBData::New() const {
  return new FestDonateDBData;
}

void FestDonateDBData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDonateDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.DonateServerDBProto data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDonateDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.DonateServerDBProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDonateDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.DonateServerDBProto data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDonateDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.DonateServerDBProto data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDonateDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDonateDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDonateDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDonateDBData::MergeFrom(const FestDonateDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDonateDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDonateDBData::CopyFrom(const FestDonateDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDonateDBData::IsInitialized() const {

  return true;
}

void FestDonateDBData::Swap(FestDonateDBData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDonateDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDonateDBData_descriptor_;
  metadata.reflection = FestDonateDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestDrawPizeLogDBData::kLogFieldNumber;
#endif  // !_MSC_VER

FestDrawPizeLogDBData::FestDrawPizeLogDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestDrawPizeLogDBData::InitAsDefaultInstance() {
}

FestDrawPizeLogDBData::FestDrawPizeLogDBData(const FestDrawPizeLogDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestDrawPizeLogDBData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestDrawPizeLogDBData::~FestDrawPizeLogDBData() {
  SharedDtor();
}

void FestDrawPizeLogDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestDrawPizeLogDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestDrawPizeLogDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestDrawPizeLogDBData_descriptor_;
}

const FestDrawPizeLogDBData& FestDrawPizeLogDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

FestDrawPizeLogDBData* FestDrawPizeLogDBData::default_instance_ = NULL;

FestDrawPizeLogDBData* FestDrawPizeLogDBData::New() const {
  return new FestDrawPizeLogDBData;
}

void FestDrawPizeLogDBData::Clear() {
  log_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestDrawPizeLogDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.FestDrawPizeLogDBProto log = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_log()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_log;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestDrawPizeLogDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.FestDrawPizeLogDBProto log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->log(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestDrawPizeLogDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.FestDrawPizeLogDBProto log = 1;
  for (int i = 0; i < this->log_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->log(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestDrawPizeLogDBData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.FestDrawPizeLogDBProto log = 1;
  total_size += 1 * this->log_size();
  for (int i = 0; i < this->log_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->log(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestDrawPizeLogDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestDrawPizeLogDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestDrawPizeLogDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestDrawPizeLogDBData::MergeFrom(const FestDrawPizeLogDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  log_.MergeFrom(from.log_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestDrawPizeLogDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestDrawPizeLogDBData::CopyFrom(const FestDrawPizeLogDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestDrawPizeLogDBData::IsInitialized() const {

  return true;
}

void FestDrawPizeLogDBData::Swap(FestDrawPizeLogDBData* other) {
  if (other != this) {
    log_.Swap(&other->log_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestDrawPizeLogDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestDrawPizeLogDBData_descriptor_;
  metadata.reflection = FestDrawPizeLogDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GoodsDB::kOrderIdFieldNumber;
const int GoodsDB::kMarketTypeFieldNumber;
const int GoodsDB::kMarketOwnerFieldNumber;
const int GoodsDB::kRoleIdFieldNumber;
const int GoodsDB::kStartTimeFieldNumber;
const int GoodsDB::kEndTimeFieldNumber;
const int GoodsDB::kVieIdFieldNumber;
const int GoodsDB::kStateFieldNumber;
const int GoodsDB::kIsdeleteFieldNumber;
const int GoodsDB::kCmptTimeFieldNumber;
const int GoodsDB::kCurPriceFieldNumber;
const int GoodsDB::kCmptPriceFieldNumber;
const int GoodsDB::kBuyerIdFieldNumber;
const int GoodsDB::kVieTimeFieldNumber;
const int GoodsDB::kItemDataFieldNumber;
const int GoodsDB::kItemPriceFieldNumber;
const int GoodsDB::kTakeListFieldNumber;
const int GoodsDB::kVieListFieldNumber;
const int GoodsDB::kReadyTimeFieldNumber;
const int GoodsDB::kIsTakeFieldNumber;
#endif  // !_MSC_VER

GoodsDB::GoodsDB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GoodsDB::InitAsDefaultInstance() {
  item_data_ = const_cast< ::proto_ff::ItemProtoInfo*>(&::proto_ff::ItemProtoInfo::default_instance());
}

GoodsDB::GoodsDB(const GoodsDB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GoodsDB::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  market_type_ = 0;
  market_owner_ = GOOGLE_ULONGLONG(0);
  role_id_ = GOOGLE_ULONGLONG(0);
  start_time_ = GOOGLE_ULONGLONG(0);
  end_time_ = GOOGLE_ULONGLONG(0);
  vie_id_ = GOOGLE_ULONGLONG(0);
  state_ = 0;
  isdelete_ = 0;
  cmpt_time_ = GOOGLE_ULONGLONG(0);
  cur_price_ = 0;
  cmpt_price_ = 0;
  buyer_id_ = GOOGLE_ULONGLONG(0);
  vie_time_ = GOOGLE_ULONGLONG(0);
  item_data_ = NULL;
  item_price_ = 0;
  take_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  vie_list_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ready_time_ = GOOGLE_ULONGLONG(0);
  is_take_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GoodsDB::~GoodsDB() {
  SharedDtor();
}

void GoodsDB::SharedDtor() {
  if (take_list_ != &::google::protobuf::internal::kEmptyString) {
    delete take_list_;
  }
  if (vie_list_ != &::google::protobuf::internal::kEmptyString) {
    delete vie_list_;
  }
  if (this != default_instance_) {
    delete item_data_;
  }
}

void GoodsDB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoodsDB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GoodsDB_descriptor_;
}

const GoodsDB& GoodsDB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

GoodsDB* GoodsDB::default_instance_ = NULL;

GoodsDB* GoodsDB::New() const {
  return new GoodsDB;
}

void GoodsDB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_id_ = GOOGLE_ULONGLONG(0);
    market_type_ = 0;
    market_owner_ = GOOGLE_ULONGLONG(0);
    role_id_ = GOOGLE_ULONGLONG(0);
    start_time_ = GOOGLE_ULONGLONG(0);
    end_time_ = GOOGLE_ULONGLONG(0);
    vie_id_ = GOOGLE_ULONGLONG(0);
    state_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isdelete_ = 0;
    cmpt_time_ = GOOGLE_ULONGLONG(0);
    cur_price_ = 0;
    cmpt_price_ = 0;
    buyer_id_ = GOOGLE_ULONGLONG(0);
    vie_time_ = GOOGLE_ULONGLONG(0);
    if (has_item_data()) {
      if (item_data_ != NULL) item_data_->::proto_ff::ItemProtoInfo::Clear();
    }
    item_price_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_take_list()) {
      if (take_list_ != &::google::protobuf::internal::kEmptyString) {
        take_list_->clear();
      }
    }
    if (has_vie_list()) {
      if (vie_list_ != &::google::protobuf::internal::kEmptyString) {
        vie_list_->clear();
      }
    }
    ready_time_ = GOOGLE_ULONGLONG(0);
    is_take_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GoodsDB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_market_type;
        break;
      }

      // optional int32 market_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &market_type_)));
          set_has_market_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_market_owner;
        break;
      }

      // optional uint64 market_owner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_market_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &market_owner_)));
          set_has_market_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_role_id;
        break;
      }

      // optional uint64 role_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &role_id_)));
          set_has_role_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_start_time;
        break;
      }

      // optional uint64 start_time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_start_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_end_time;
        break;
      }

      // optional uint64 end_time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_time_)));
          set_has_end_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_vie_id;
        break;
      }

      // optional uint64 vie_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vie_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vie_id_)));
          set_has_vie_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_state;
        break;
      }

      // optional int32 state = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isdelete;
        break;
      }

      // optional int32 isdelete = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdelete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdelete_)));
          set_has_isdelete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cmpt_time;
        break;
      }

      // optional uint64 cmpt_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmpt_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cmpt_time_)));
          set_has_cmpt_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cur_price;
        break;
      }

      // optional int32 cur_price = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cur_price_)));
          set_has_cur_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_cmpt_price;
        break;
      }

      // optional int32 cmpt_price = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmpt_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmpt_price_)));
          set_has_cmpt_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_buyer_id;
        break;
      }

      // optional uint64 buyer_id = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyer_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &buyer_id_)));
          set_has_buyer_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_vie_time;
        break;
      }

      // optional uint64 vie_time = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vie_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &vie_time_)));
          set_has_vie_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_item_data;
        break;
      }

      // optional .proto_ff.ItemProtoInfo item_data = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_item_price;
        break;
      }

      // optional int32 item_price = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_price_)));
          set_has_item_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_take_list;
        break;
      }

      // optional bytes take_list = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_take_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_take_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_vie_list;
        break;
      }

      // optional bytes vie_list = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vie_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_vie_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_ready_time;
        break;
      }

      // optional uint64 ready_time = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ready_time_)));
          set_has_ready_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_is_take;
        break;
      }

      // optional int32 is_take = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_take:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_take_)));
          set_has_is_take();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GoodsDB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_id(), output);
  }

  // optional int32 market_type = 2;
  if (has_market_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->market_type(), output);
  }

  // optional uint64 market_owner = 3;
  if (has_market_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->market_owner(), output);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->role_id(), output);
  }

  // optional uint64 start_time = 5;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->start_time(), output);
  }

  // optional uint64 end_time = 6;
  if (has_end_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->end_time(), output);
  }

  // optional uint64 vie_id = 7;
  if (has_vie_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->vie_id(), output);
  }

  // optional int32 state = 8;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->state(), output);
  }

  // optional int32 isdelete = 9;
  if (has_isdelete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->isdelete(), output);
  }

  // optional uint64 cmpt_time = 10;
  if (has_cmpt_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(10, this->cmpt_time(), output);
  }

  // optional int32 cur_price = 11;
  if (has_cur_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cur_price(), output);
  }

  // optional int32 cmpt_price = 12;
  if (has_cmpt_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->cmpt_price(), output);
  }

  // optional uint64 buyer_id = 13;
  if (has_buyer_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->buyer_id(), output);
  }

  // optional uint64 vie_time = 14;
  if (has_vie_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->vie_time(), output);
  }

  // optional .proto_ff.ItemProtoInfo item_data = 15;
  if (has_item_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->item_data(), output);
  }

  // optional int32 item_price = 16;
  if (has_item_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->item_price(), output);
  }

  // optional bytes take_list = 17;
  if (has_take_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->take_list(), output);
  }

  // optional bytes vie_list = 18;
  if (has_vie_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      18, this->vie_list(), output);
  }

  // optional uint64 ready_time = 19;
  if (has_ready_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->ready_time(), output);
  }

  // optional int32 is_take = 20;
  if (has_is_take()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->is_take(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GoodsDB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_id(), target);
  }

  // optional int32 market_type = 2;
  if (has_market_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->market_type(), target);
  }

  // optional uint64 market_owner = 3;
  if (has_market_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->market_owner(), target);
  }

  // optional uint64 role_id = 4;
  if (has_role_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->role_id(), target);
  }

  // optional uint64 start_time = 5;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->start_time(), target);
  }

  // optional uint64 end_time = 6;
  if (has_end_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->end_time(), target);
  }

  // optional uint64 vie_id = 7;
  if (has_vie_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->vie_id(), target);
  }

  // optional int32 state = 8;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->state(), target);
  }

  // optional int32 isdelete = 9;
  if (has_isdelete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->isdelete(), target);
  }

  // optional uint64 cmpt_time = 10;
  if (has_cmpt_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(10, this->cmpt_time(), target);
  }

  // optional int32 cur_price = 11;
  if (has_cur_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cur_price(), target);
  }

  // optional int32 cmpt_price = 12;
  if (has_cmpt_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->cmpt_price(), target);
  }

  // optional uint64 buyer_id = 13;
  if (has_buyer_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->buyer_id(), target);
  }

  // optional uint64 vie_time = 14;
  if (has_vie_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->vie_time(), target);
  }

  // optional .proto_ff.ItemProtoInfo item_data = 15;
  if (has_item_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->item_data(), target);
  }

  // optional int32 item_price = 16;
  if (has_item_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->item_price(), target);
  }

  // optional bytes take_list = 17;
  if (has_take_list()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->take_list(), target);
  }

  // optional bytes vie_list = 18;
  if (has_vie_list()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        18, this->vie_list(), target);
  }

  // optional uint64 ready_time = 19;
  if (has_ready_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->ready_time(), target);
  }

  // optional int32 is_take = 20;
  if (has_is_take()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->is_take(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GoodsDB::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

    // optional int32 market_type = 2;
    if (has_market_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->market_type());
    }

    // optional uint64 market_owner = 3;
    if (has_market_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->market_owner());
    }

    // optional uint64 role_id = 4;
    if (has_role_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->role_id());
    }

    // optional uint64 start_time = 5;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->start_time());
    }

    // optional uint64 end_time = 6;
    if (has_end_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end_time());
    }

    // optional uint64 vie_id = 7;
    if (has_vie_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vie_id());
    }

    // optional int32 state = 8;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 isdelete = 9;
    if (has_isdelete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdelete());
    }

    // optional uint64 cmpt_time = 10;
    if (has_cmpt_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cmpt_time());
    }

    // optional int32 cur_price = 11;
    if (has_cur_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cur_price());
    }

    // optional int32 cmpt_price = 12;
    if (has_cmpt_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmpt_price());
    }

    // optional uint64 buyer_id = 13;
    if (has_buyer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->buyer_id());
    }

    // optional uint64 vie_time = 14;
    if (has_vie_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->vie_time());
    }

    // optional .proto_ff.ItemProtoInfo item_data = 15;
    if (has_item_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item_data());
    }

    // optional int32 item_price = 16;
    if (has_item_price()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_price());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes take_list = 17;
    if (has_take_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->take_list());
    }

    // optional bytes vie_list = 18;
    if (has_vie_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->vie_list());
    }

    // optional uint64 ready_time = 19;
    if (has_ready_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ready_time());
    }

    // optional int32 is_take = 20;
    if (has_is_take()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_take());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoodsDB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GoodsDB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GoodsDB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GoodsDB::MergeFrom(const GoodsDB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_market_type()) {
      set_market_type(from.market_type());
    }
    if (from.has_market_owner()) {
      set_market_owner(from.market_owner());
    }
    if (from.has_role_id()) {
      set_role_id(from.role_id());
    }
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
    if (from.has_end_time()) {
      set_end_time(from.end_time());
    }
    if (from.has_vie_id()) {
      set_vie_id(from.vie_id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isdelete()) {
      set_isdelete(from.isdelete());
    }
    if (from.has_cmpt_time()) {
      set_cmpt_time(from.cmpt_time());
    }
    if (from.has_cur_price()) {
      set_cur_price(from.cur_price());
    }
    if (from.has_cmpt_price()) {
      set_cmpt_price(from.cmpt_price());
    }
    if (from.has_buyer_id()) {
      set_buyer_id(from.buyer_id());
    }
    if (from.has_vie_time()) {
      set_vie_time(from.vie_time());
    }
    if (from.has_item_data()) {
      mutable_item_data()->::proto_ff::ItemProtoInfo::MergeFrom(from.item_data());
    }
    if (from.has_item_price()) {
      set_item_price(from.item_price());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_take_list()) {
      set_take_list(from.take_list());
    }
    if (from.has_vie_list()) {
      set_vie_list(from.vie_list());
    }
    if (from.has_ready_time()) {
      set_ready_time(from.ready_time());
    }
    if (from.has_is_take()) {
      set_is_take(from.is_take());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GoodsDB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoodsDB::CopyFrom(const GoodsDB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoodsDB::IsInitialized() const {

  if (has_item_data()) {
    if (!this->item_data().IsInitialized()) return false;
  }
  return true;
}

void GoodsDB::Swap(GoodsDB* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(market_type_, other->market_type_);
    std::swap(market_owner_, other->market_owner_);
    std::swap(role_id_, other->role_id_);
    std::swap(start_time_, other->start_time_);
    std::swap(end_time_, other->end_time_);
    std::swap(vie_id_, other->vie_id_);
    std::swap(state_, other->state_);
    std::swap(isdelete_, other->isdelete_);
    std::swap(cmpt_time_, other->cmpt_time_);
    std::swap(cur_price_, other->cur_price_);
    std::swap(cmpt_price_, other->cmpt_price_);
    std::swap(buyer_id_, other->buyer_id_);
    std::swap(vie_time_, other->vie_time_);
    std::swap(item_data_, other->item_data_);
    std::swap(item_price_, other->item_price_);
    std::swap(take_list_, other->take_list_);
    std::swap(vie_list_, other->vie_list_);
    std::swap(ready_time_, other->ready_time_);
    std::swap(is_take_, other->is_take_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GoodsDB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GoodsDB_descriptor_;
  metadata.reflection = GoodsDB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoadGoodsReq::kStartTimeFieldNumber;
#endif  // !_MSC_VER

LoadGoodsReq::LoadGoodsReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoadGoodsReq::InitAsDefaultInstance() {
}

LoadGoodsReq::LoadGoodsReq(const LoadGoodsReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoadGoodsReq::SharedCtor() {
  _cached_size_ = 0;
  start_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoadGoodsReq::~LoadGoodsReq() {
  SharedDtor();
}

void LoadGoodsReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoadGoodsReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoadGoodsReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoadGoodsReq_descriptor_;
}

const LoadGoodsReq& LoadGoodsReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

LoadGoodsReq* LoadGoodsReq::default_instance_ = NULL;

LoadGoodsReq* LoadGoodsReq::New() const {
  return new LoadGoodsReq;
}

void LoadGoodsReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoadGoodsReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 start_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &start_time_)));
          set_has_start_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoadGoodsReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 start_time = 1;
  if (has_start_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->start_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoadGoodsReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 start_time = 1;
  if (has_start_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->start_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoadGoodsReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 start_time = 1;
    if (has_start_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->start_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoadGoodsReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoadGoodsReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoadGoodsReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoadGoodsReq::MergeFrom(const LoadGoodsReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_time()) {
      set_start_time(from.start_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoadGoodsReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoadGoodsReq::CopyFrom(const LoadGoodsReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoadGoodsReq::IsInitialized() const {

  return true;
}

void LoadGoodsReq::Swap(LoadGoodsReq* other) {
  if (other != this) {
    std::swap(start_time_, other->start_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoadGoodsReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoadGoodsReq_descriptor_;
  metadata.reflection = LoadGoodsReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDBLoadRsp::kInfosFieldNumber;
const int MarketDBLoadRsp::kIsFinishFieldNumber;
#endif  // !_MSC_VER

MarketDBLoadRsp::MarketDBLoadRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketDBLoadRsp::InitAsDefaultInstance() {
}

MarketDBLoadRsp::MarketDBLoadRsp(const MarketDBLoadRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketDBLoadRsp::SharedCtor() {
  _cached_size_ = 0;
  is_finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDBLoadRsp::~MarketDBLoadRsp() {
  SharedDtor();
}

void MarketDBLoadRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDBLoadRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDBLoadRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDBLoadRsp_descriptor_;
}

const MarketDBLoadRsp& MarketDBLoadRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MarketDBLoadRsp* MarketDBLoadRsp::default_instance_ = NULL;

MarketDBLoadRsp* MarketDBLoadRsp::New() const {
  return new MarketDBLoadRsp;
}

void MarketDBLoadRsp::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    is_finish_ = 0;
  }
  infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDBLoadRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.GoodsDB infos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infos;
        if (input->ExpectTag(16)) goto parse_is_finish;
        break;
      }

      // optional int32 is_finish = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_finish_)));
          set_has_is_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketDBLoadRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.GoodsDB infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infos(i), output);
  }

  // optional int32 is_finish = 2;
  if (has_is_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketDBLoadRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.GoodsDB infos = 1;
  for (int i = 0; i < this->infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infos(i), target);
  }

  // optional int32 is_finish = 2;
  if (has_is_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketDBLoadRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 is_finish = 2;
    if (has_is_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_finish());
    }

  }
  // repeated .proto_ff.GoodsDB infos = 1;
  total_size += 1 * this->infos_size();
  for (int i = 0; i < this->infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDBLoadRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDBLoadRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDBLoadRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDBLoadRsp::MergeFrom(const MarketDBLoadRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  infos_.MergeFrom(from.infos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_is_finish()) {
      set_is_finish(from.is_finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDBLoadRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDBLoadRsp::CopyFrom(const MarketDBLoadRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDBLoadRsp::IsInitialized() const {

  for (int i = 0; i < infos_size(); i++) {
    if (!this->infos(i).IsInitialized()) return false;
  }
  return true;
}

void MarketDBLoadRsp::Swap(MarketDBLoadRsp* other) {
  if (other != this) {
    infos_.Swap(&other->infos_);
    std::swap(is_finish_, other->is_finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDBLoadRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDBLoadRsp_descriptor_;
  metadata.reflection = MarketDBLoadRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketSaveReq::kInfoFieldNumber;
#endif  // !_MSC_VER

MarketSaveReq::MarketSaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketSaveReq::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::GoodsDB*>(&::proto_ff::GoodsDB::default_instance());
}

MarketSaveReq::MarketSaveReq(const MarketSaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketSaveReq::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketSaveReq::~MarketSaveReq() {
  SharedDtor();
}

void MarketSaveReq::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void MarketSaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketSaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketSaveReq_descriptor_;
}

const MarketSaveReq& MarketSaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MarketSaveReq* MarketSaveReq::default_instance_ = NULL;

MarketSaveReq* MarketSaveReq::New() const {
  return new MarketSaveReq;
}

void MarketSaveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::GoodsDB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketSaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.GoodsDB info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketSaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.GoodsDB info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketSaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.GoodsDB info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketSaveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.GoodsDB info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketSaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketSaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketSaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketSaveReq::MergeFrom(const MarketSaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::GoodsDB::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketSaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketSaveReq::CopyFrom(const MarketSaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketSaveReq::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void MarketSaveReq::Swap(MarketSaveReq* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketSaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketSaveReq_descriptor_;
  metadata.reflection = MarketSaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketDelReq::kOrderIdFieldNumber;
#endif  // !_MSC_VER

MarketDelReq::MarketDelReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketDelReq::InitAsDefaultInstance() {
}

MarketDelReq::MarketDelReq(const MarketDelReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketDelReq::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketDelReq::~MarketDelReq() {
  SharedDtor();
}

void MarketDelReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarketDelReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketDelReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketDelReq_descriptor_;
}

const MarketDelReq& MarketDelReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

MarketDelReq* MarketDelReq::default_instance_ = NULL;

MarketDelReq* MarketDelReq::New() const {
  return new MarketDelReq;
}

void MarketDelReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_id_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketDelReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketDelReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->order_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketDelReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->order_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketDelReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketDelReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketDelReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketDelReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketDelReq::MergeFrom(const MarketDelReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketDelReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketDelReq::CopyFrom(const MarketDelReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketDelReq::IsInitialized() const {

  return true;
}

void MarketDelReq::Swap(MarketDelReq* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketDelReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketDelReq_descriptor_;
  metadata.reflection = MarketDelReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CandleHarmDBProto::kCidFieldNumber;
const int CandleHarmDBProto::kNameFieldNumber;
const int CandleHarmDBProto::kHarmFieldNumber;
const int CandleHarmDBProto::kZidFieldNumber;
const int CandleHarmDBProto::kRankFieldNumber;
#endif  // !_MSC_VER

CandleHarmDBProto::CandleHarmDBProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CandleHarmDBProto::InitAsDefaultInstance() {
}

CandleHarmDBProto::CandleHarmDBProto(const CandleHarmDBProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CandleHarmDBProto::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  harm_ = GOOGLE_ULONGLONG(0);
  zid_ = 0u;
  rank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CandleHarmDBProto::~CandleHarmDBProto() {
  SharedDtor();
}

void CandleHarmDBProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CandleHarmDBProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandleHarmDBProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandleHarmDBProto_descriptor_;
}

const CandleHarmDBProto& CandleHarmDBProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

CandleHarmDBProto* CandleHarmDBProto::default_instance_ = NULL;

CandleHarmDBProto* CandleHarmDBProto::New() const {
  return new CandleHarmDBProto;
}

void CandleHarmDBProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    harm_ = GOOGLE_ULONGLONG(0);
    zid_ = 0u;
    rank_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CandleHarmDBProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_harm;
        break;
      }

      // optional uint64 harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rank;
        break;
      }

      // optional int32 rank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CandleHarmDBProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional uint64 harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->harm(), output);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->zid(), output);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CandleHarmDBProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional uint64 harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->harm(), target);
  }

  // optional uint32 zid = 4;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->zid(), target);
  }

  // optional int32 rank = 5;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CandleHarmDBProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional uint64 harm = 3;
    if (has_harm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->harm());
    }

    // optional uint32 zid = 4;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional int32 rank = 5;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandleHarmDBProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CandleHarmDBProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CandleHarmDBProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CandleHarmDBProto::MergeFrom(const CandleHarmDBProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CandleHarmDBProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandleHarmDBProto::CopyFrom(const CandleHarmDBProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandleHarmDBProto::IsInitialized() const {

  return true;
}

void CandleHarmDBProto::Swap(CandleHarmDBProto* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(harm_, other->harm_);
    std::swap(zid_, other->zid_);
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CandleHarmDBProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandleHarmDBProto_descriptor_;
  metadata.reflection = CandleHarmDBProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CandleDBData::kIndexFieldNumber;
const int CandleDBData::kHamFieldNumber;
const int CandleDBData::kTimeFieldNumber;
#endif  // !_MSC_VER

CandleDBData::CandleDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CandleDBData::InitAsDefaultInstance() {
}

CandleDBData::CandleDBData(const CandleDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CandleDBData::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CandleDBData::~CandleDBData() {
  SharedDtor();
}

void CandleDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CandleDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CandleDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CandleDBData_descriptor_;
}

const CandleDBData& CandleDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DBProxy_2eproto();
  return *default_instance_;
}

CandleDBData* CandleDBData::default_instance_ = NULL;

CandleDBData* CandleDBData::New() const {
  return new CandleDBData;
}

void CandleDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    time_ = GOOGLE_ULONGLONG(0);
  }
  ham_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CandleDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ham;
        break;
      }

      // repeated .proto_ff.CandleHarmDBProto ham = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ham:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ham()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ham;
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional uint64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CandleDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated .proto_ff.CandleHarmDBProto ham = 2;
  for (int i = 0; i < this->ham_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ham(i), output);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CandleDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated .proto_ff.CandleHarmDBProto ham = 2;
  for (int i = 0; i < this->ham_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ham(i), target);
  }

  // optional uint64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CandleDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional uint64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time());
    }

  }
  // repeated .proto_ff.CandleHarmDBProto ham = 2;
  total_size += 1 * this->ham_size();
  for (int i = 0; i < this->ham_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ham(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CandleDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CandleDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CandleDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CandleDBData::MergeFrom(const CandleDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  ham_.MergeFrom(from.ham_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CandleDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CandleDBData::CopyFrom(const CandleDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CandleDBData::IsInitialized() const {

  return true;
}

void CandleDBData::Swap(CandleDBData* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    ham_.Swap(&other->ham_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CandleDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CandleDBData_descriptor_;
  metadata.reflection = CandleDBData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
