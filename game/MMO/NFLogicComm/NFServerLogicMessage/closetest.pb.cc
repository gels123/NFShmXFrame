// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: closetest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "closetest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* closetestActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  closetestActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_closetestActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_closetestActivity_reflection_ = NULL;
const ::google::protobuf::Descriptor* closetestRebate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  closetestRebate_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_closetestRebate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_closetestRebate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_closetest_2eproto() {
  protobuf_AddDesc_closetest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "closetest.proto");
  GOOGLE_CHECK(file != NULL);
  closetestActivity_descriptor_ = file->message_type(0);
  static const int closetestActivity_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestActivity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestActivity, typeparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestActivity, boxid_),
  };
  closetestActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      closetestActivity_descriptor_,
      closetestActivity::default_instance_,
      closetestActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(closetestActivity));
  Sheet_closetestActivity_descriptor_ = file->message_type(1);
  static const int Sheet_closetestActivity_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_closetestActivity, closetestactivity_list_),
  };
  Sheet_closetestActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_closetestActivity_descriptor_,
      Sheet_closetestActivity::default_instance_,
      Sheet_closetestActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_closetestActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_closetestActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_closetestActivity));
  closetestRebate_descriptor_ = file->message_type(2);
  static const int closetestRebate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestRebate, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestRebate, returnparama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestRebate, returnparamb_),
  };
  closetestRebate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      closetestRebate_descriptor_,
      closetestRebate::default_instance_,
      closetestRebate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestRebate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(closetestRebate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(closetestRebate));
  Sheet_closetestRebate_descriptor_ = file->message_type(3);
  static const int Sheet_closetestRebate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_closetestRebate, closetestrebate_list_),
  };
  Sheet_closetestRebate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_closetestRebate_descriptor_,
      Sheet_closetestRebate::default_instance_,
      Sheet_closetestRebate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_closetestRebate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_closetestRebate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_closetestRebate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_closetest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    closetestActivity_descriptor_, &closetestActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_closetestActivity_descriptor_, &Sheet_closetestActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    closetestRebate_descriptor_, &closetestRebate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_closetestRebate_descriptor_, &Sheet_closetestRebate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_closetest_2eproto() {
  delete closetestActivity::default_instance_;
  delete closetestActivity_reflection_;
  delete Sheet_closetestActivity::default_instance_;
  delete Sheet_closetestActivity_reflection_;
  delete closetestRebate::default_instance_;
  delete closetestRebate_reflection_;
  delete Sheet_closetestRebate::default_instance_;
  delete Sheet_closetestRebate_reflection_;
}

void protobuf_AddDesc_closetest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017closetest.proto\022\010proto_ff\032\025yd_fieldopt"
    "ions.proto\"\203\001\n\021closetestActivity\022\022\n\002ID\030\001"
    " \001(\005B\006\302\377\024\002ID\022\030\n\004Type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\022#"
    "\n\tTypeParam\030\003 \001(\005B\020\302\377\024\014\347\261\273\345\236\213\345\217\202\346\225\260\022\033\n\005B"
    "oxId\030\004 \001(\003B\014\302\377\024\010\345\245\226\345\212\261id\"\\\n\027Sheet_closet"
    "estActivity\022A\n\026closetestActivity_List\030\001 "
    "\003(\0132\033.proto_ff.closetestActivityB\004\210\301\024\024\"\206"
    "\001\n\017closetestRebate\022\027\n\003Day\030\001 \001(\005B\n\302\377\024\006\345\244\251"
    "\346\225\260\022,\n\014ReturnParamA\030\002 \001(\005B\026\302\377\024\022\350\277\224\350\277\230\351\222\273"
    "\347\237\263\347\263\273\346\225\260\022,\n\014ReturnParamB\030\003 \001(\005B\026\302\377\024\022\350\277\224"
    "\350\277\230\347\273\221\351\222\273\347\263\273\346\225\260\"V\n\025Sheet_closetestRebate"
    "\022=\n\024closetestRebate_List\030\001 \003(\0132\031.proto_f"
    "f.closetestRebateB\004\210\301\024\024", 503);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "closetest.proto", &protobuf_RegisterTypes);
  closetestActivity::default_instance_ = new closetestActivity();
  Sheet_closetestActivity::default_instance_ = new Sheet_closetestActivity();
  closetestRebate::default_instance_ = new closetestRebate();
  Sheet_closetestRebate::default_instance_ = new Sheet_closetestRebate();
  closetestActivity::default_instance_->InitAsDefaultInstance();
  Sheet_closetestActivity::default_instance_->InitAsDefaultInstance();
  closetestRebate::default_instance_->InitAsDefaultInstance();
  Sheet_closetestRebate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_closetest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_closetest_2eproto {
  StaticDescriptorInitializer_closetest_2eproto() {
    protobuf_AddDesc_closetest_2eproto();
  }
} static_descriptor_initializer_closetest_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int closetestActivity::kIDFieldNumber;
const int closetestActivity::kTypeFieldNumber;
const int closetestActivity::kTypeParamFieldNumber;
const int closetestActivity::kBoxIdFieldNumber;
#endif  // !_MSC_VER

closetestActivity::closetestActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void closetestActivity::InitAsDefaultInstance() {
}

closetestActivity::closetestActivity(const closetestActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void closetestActivity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  typeparam_ = 0;
  boxid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

closetestActivity::~closetestActivity() {
  SharedDtor();
}

void closetestActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void closetestActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* closetestActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return closetestActivity_descriptor_;
}

const closetestActivity& closetestActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_closetest_2eproto();
  return *default_instance_;
}

closetestActivity* closetestActivity::default_instance_ = NULL;

closetestActivity* closetestActivity::New() const {
  return new closetestActivity;
}

void closetestActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    typeparam_ = 0;
    boxid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool closetestActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }

      // optional int32 Type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TypeParam;
        break;
      }

      // optional int32 TypeParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TypeParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeparam_)));
          set_has_typeparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_BoxId;
        break;
      }

      // optional int64 BoxId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BoxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void closetestActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 TypeParam = 3;
  if (has_typeparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeparam(), output);
  }

  // optional int64 BoxId = 4;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->boxid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* closetestActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 Type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 TypeParam = 3;
  if (has_typeparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeparam(), target);
  }

  // optional int64 BoxId = 4;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->boxid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int closetestActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 Type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 TypeParam = 3;
    if (has_typeparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeparam());
    }

    // optional int64 BoxId = 4;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void closetestActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const closetestActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const closetestActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void closetestActivity::MergeFrom(const closetestActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_typeparam()) {
      set_typeparam(from.typeparam());
    }
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void closetestActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void closetestActivity::CopyFrom(const closetestActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool closetestActivity::IsInitialized() const {

  return true;
}

void closetestActivity::Swap(closetestActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(typeparam_, other->typeparam_);
    std::swap(boxid_, other->boxid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata closetestActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = closetestActivity_descriptor_;
  metadata.reflection = closetestActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_closetestActivity::kClosetestActivityListFieldNumber;
#endif  // !_MSC_VER

Sheet_closetestActivity::Sheet_closetestActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_closetestActivity::InitAsDefaultInstance() {
}

Sheet_closetestActivity::Sheet_closetestActivity(const Sheet_closetestActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_closetestActivity::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_closetestActivity::~Sheet_closetestActivity() {
  SharedDtor();
}

void Sheet_closetestActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_closetestActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_closetestActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_closetestActivity_descriptor_;
}

const Sheet_closetestActivity& Sheet_closetestActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_closetest_2eproto();
  return *default_instance_;
}

Sheet_closetestActivity* Sheet_closetestActivity::default_instance_ = NULL;

Sheet_closetestActivity* Sheet_closetestActivity::New() const {
  return new Sheet_closetestActivity;
}

void Sheet_closetestActivity::Clear() {
  closetestactivity_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_closetestActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.closetestActivity closetestActivity_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closetestActivity_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_closetestactivity_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_closetestActivity_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_closetestActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.closetestActivity closetestActivity_List = 1;
  for (int i = 0; i < this->closetestactivity_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->closetestactivity_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_closetestActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.closetestActivity closetestActivity_List = 1;
  for (int i = 0; i < this->closetestactivity_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->closetestactivity_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_closetestActivity::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.closetestActivity closetestActivity_List = 1;
  total_size += 1 * this->closetestactivity_list_size();
  for (int i = 0; i < this->closetestactivity_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->closetestactivity_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_closetestActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_closetestActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_closetestActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_closetestActivity::MergeFrom(const Sheet_closetestActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  closetestactivity_list_.MergeFrom(from.closetestactivity_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_closetestActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_closetestActivity::CopyFrom(const Sheet_closetestActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_closetestActivity::IsInitialized() const {

  return true;
}

void Sheet_closetestActivity::Swap(Sheet_closetestActivity* other) {
  if (other != this) {
    closetestactivity_list_.Swap(&other->closetestactivity_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_closetestActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_closetestActivity_descriptor_;
  metadata.reflection = Sheet_closetestActivity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int closetestRebate::kDayFieldNumber;
const int closetestRebate::kReturnParamAFieldNumber;
const int closetestRebate::kReturnParamBFieldNumber;
#endif  // !_MSC_VER

closetestRebate::closetestRebate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void closetestRebate::InitAsDefaultInstance() {
}

closetestRebate::closetestRebate(const closetestRebate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void closetestRebate::SharedCtor() {
  _cached_size_ = 0;
  day_ = 0;
  returnparama_ = 0;
  returnparamb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

closetestRebate::~closetestRebate() {
  SharedDtor();
}

void closetestRebate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void closetestRebate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* closetestRebate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return closetestRebate_descriptor_;
}

const closetestRebate& closetestRebate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_closetest_2eproto();
  return *default_instance_;
}

closetestRebate* closetestRebate::default_instance_ = NULL;

closetestRebate* closetestRebate::New() const {
  return new closetestRebate;
}

void closetestRebate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    day_ = 0;
    returnparama_ = 0;
    returnparamb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool closetestRebate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Day = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReturnParamA;
        break;
      }

      // optional int32 ReturnParamA = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnParamA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnparama_)));
          set_has_returnparama();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ReturnParamB;
        break;
      }

      // optional int32 ReturnParamB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReturnParamB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnparamb_)));
          set_has_returnparamb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void closetestRebate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Day = 1;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->day(), output);
  }

  // optional int32 ReturnParamA = 2;
  if (has_returnparama()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->returnparama(), output);
  }

  // optional int32 ReturnParamB = 3;
  if (has_returnparamb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->returnparamb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* closetestRebate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Day = 1;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->day(), target);
  }

  // optional int32 ReturnParamA = 2;
  if (has_returnparama()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->returnparama(), target);
  }

  // optional int32 ReturnParamB = 3;
  if (has_returnparamb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->returnparamb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int closetestRebate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Day = 1;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 ReturnParamA = 2;
    if (has_returnparama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnparama());
    }

    // optional int32 ReturnParamB = 3;
    if (has_returnparamb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnparamb());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void closetestRebate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const closetestRebate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const closetestRebate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void closetestRebate::MergeFrom(const closetestRebate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_returnparama()) {
      set_returnparama(from.returnparama());
    }
    if (from.has_returnparamb()) {
      set_returnparamb(from.returnparamb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void closetestRebate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void closetestRebate::CopyFrom(const closetestRebate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool closetestRebate::IsInitialized() const {

  return true;
}

void closetestRebate::Swap(closetestRebate* other) {
  if (other != this) {
    std::swap(day_, other->day_);
    std::swap(returnparama_, other->returnparama_);
    std::swap(returnparamb_, other->returnparamb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata closetestRebate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = closetestRebate_descriptor_;
  metadata.reflection = closetestRebate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_closetestRebate::kClosetestRebateListFieldNumber;
#endif  // !_MSC_VER

Sheet_closetestRebate::Sheet_closetestRebate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_closetestRebate::InitAsDefaultInstance() {
}

Sheet_closetestRebate::Sheet_closetestRebate(const Sheet_closetestRebate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_closetestRebate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_closetestRebate::~Sheet_closetestRebate() {
  SharedDtor();
}

void Sheet_closetestRebate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_closetestRebate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_closetestRebate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_closetestRebate_descriptor_;
}

const Sheet_closetestRebate& Sheet_closetestRebate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_closetest_2eproto();
  return *default_instance_;
}

Sheet_closetestRebate* Sheet_closetestRebate::default_instance_ = NULL;

Sheet_closetestRebate* Sheet_closetestRebate::New() const {
  return new Sheet_closetestRebate;
}

void Sheet_closetestRebate::Clear() {
  closetestrebate_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_closetestRebate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.closetestRebate closetestRebate_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closetestRebate_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_closetestrebate_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_closetestRebate_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_closetestRebate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.closetestRebate closetestRebate_List = 1;
  for (int i = 0; i < this->closetestrebate_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->closetestrebate_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_closetestRebate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.closetestRebate closetestRebate_List = 1;
  for (int i = 0; i < this->closetestrebate_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->closetestrebate_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_closetestRebate::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.closetestRebate closetestRebate_List = 1;
  total_size += 1 * this->closetestrebate_list_size();
  for (int i = 0; i < this->closetestrebate_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->closetestrebate_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_closetestRebate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_closetestRebate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_closetestRebate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_closetestRebate::MergeFrom(const Sheet_closetestRebate& from) {
  GOOGLE_CHECK_NE(&from, this);
  closetestrebate_list_.MergeFrom(from.closetestrebate_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_closetestRebate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_closetestRebate::CopyFrom(const Sheet_closetestRebate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_closetestRebate::IsInitialized() const {

  return true;
}

void Sheet_closetestRebate::Swap(Sheet_closetestRebate* other) {
  if (other != this) {
    closetestrebate_list_.Swap(&other->closetestrebate_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_closetestRebate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_closetestRebate_descriptor_;
  metadata.reflection = Sheet_closetestRebate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
