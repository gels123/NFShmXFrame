// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* FunctionUnlockEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionUnlockEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerLeveUpEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerLeveUpEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemUseEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemUseEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptTaskEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptTaskEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinishTaskEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinishTaskEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveSceneEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveSceneEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChgSceneEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChgSceneEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnterSceneEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnterSceneEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Event_2eproto() {
  protobuf_AddDesc_Event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Event.proto");
  GOOGLE_CHECK(file != NULL);
  FunctionUnlockEvent_descriptor_ = file->message_type(0);
  static const int FunctionUnlockEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockEvent, functionid_),
  };
  FunctionUnlockEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionUnlockEvent_descriptor_,
      FunctionUnlockEvent::default_instance_,
      FunctionUnlockEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionUnlockEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionUnlockEvent));
  PlayerLeveUpEvent_descriptor_ = file->message_type(1);
  static const int PlayerLeveUpEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeveUpEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeveUpEvent, level_),
  };
  PlayerLeveUpEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerLeveUpEvent_descriptor_,
      PlayerLeveUpEvent::default_instance_,
      PlayerLeveUpEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeveUpEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerLeveUpEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerLeveUpEvent));
  ItemUseEvent_descriptor_ = file->message_type(2);
  static const int ItemUseEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseEvent, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseEvent, num_),
  };
  ItemUseEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemUseEvent_descriptor_,
      ItemUseEvent::default_instance_,
      ItemUseEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemUseEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemUseEvent));
  AcceptTaskEvent_descriptor_ = file->message_type(3);
  static const int AcceptTaskEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, tasktype_),
  };
  AcceptTaskEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptTaskEvent_descriptor_,
      AcceptTaskEvent::default_instance_,
      AcceptTaskEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptTaskEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptTaskEvent));
  FinishTaskEvent_descriptor_ = file->message_type(4);
  static const int FinishTaskEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, tasktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, mapgroup_),
  };
  FinishTaskEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinishTaskEvent_descriptor_,
      FinishTaskEvent::default_instance_,
      FinishTaskEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinishTaskEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinishTaskEvent));
  LeaveSceneEvent_descriptor_ = file->message_type(5);
  static const int LeaveSceneEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, sceneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, mapid_),
  };
  LeaveSceneEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveSceneEvent_descriptor_,
      LeaveSceneEvent::default_instance_,
      LeaveSceneEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveSceneEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveSceneEvent));
  ChgSceneEvent_descriptor_ = file->message_type(6);
  static const int ChgSceneEvent_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgSceneEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgSceneEvent, enterflag_),
  };
  ChgSceneEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChgSceneEvent_descriptor_,
      ChgSceneEvent::default_instance_,
      ChgSceneEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgSceneEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChgSceneEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChgSceneEvent));
  EnterSceneEvent_descriptor_ = file->message_type(7);
  static const int EnterSceneEvent_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, z_),
  };
  EnterSceneEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EnterSceneEvent_descriptor_,
      EnterSceneEvent::default_instance_,
      EnterSceneEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnterSceneEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EnterSceneEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionUnlockEvent_descriptor_, &FunctionUnlockEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerLeveUpEvent_descriptor_, &PlayerLeveUpEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemUseEvent_descriptor_, &ItemUseEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptTaskEvent_descriptor_, &AcceptTaskEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinishTaskEvent_descriptor_, &FinishTaskEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveSceneEvent_descriptor_, &LeaveSceneEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChgSceneEvent_descriptor_, &ChgSceneEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EnterSceneEvent_descriptor_, &EnterSceneEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Event_2eproto() {
  delete FunctionUnlockEvent::default_instance_;
  delete FunctionUnlockEvent_reflection_;
  delete PlayerLeveUpEvent::default_instance_;
  delete PlayerLeveUpEvent_reflection_;
  delete ItemUseEvent::default_instance_;
  delete ItemUseEvent_reflection_;
  delete AcceptTaskEvent::default_instance_;
  delete AcceptTaskEvent_reflection_;
  delete FinishTaskEvent::default_instance_;
  delete FinishTaskEvent_reflection_;
  delete LeaveSceneEvent::default_instance_;
  delete LeaveSceneEvent_reflection_;
  delete ChgSceneEvent::default_instance_;
  delete ChgSceneEvent_reflection_;
  delete EnterSceneEvent::default_instance_;
  delete EnterSceneEvent_reflection_;
}

void protobuf_AddDesc_Event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::proto_ff::protobuf_AddDesc_common_5flogic_2eproto();
  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Event.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\032\022common_logic.proto\032\tCom.proto\")\n"
    "\023FunctionUnlockEvent\022\022\n\nfunctionId\030\001 \001(\004"
    "\"/\n\021PlayerLeveUpEvent\022\013\n\003cid\030\001 \001(\004\022\r\n\005le"
    "vel\030\002 \001(\r\"+\n\014ItemUseEvent\022\016\n\006itemId\030\001 \001("
    "\004\022\013\n\003num\030\002 \001(\005\"@\n\017AcceptTaskEvent\022\016\n\006tas"
    "kId\030\001 \001(\004\022\013\n\003cid\030\002 \001(\004\022\020\n\010taskType\030\003 \001(\r"
    "\"R\n\017FinishTaskEvent\022\016\n\006taskId\030\001 \001(\004\022\013\n\003c"
    "id\030\002 \001(\004\022\020\n\010taskType\030\003 \001(\r\022\020\n\010mapGroup\030\004"
    " \001(\005\">\n\017LeaveSceneEvent\022\013\n\003cid\030\001 \001(\004\022\017\n\007"
    "sceneid\030\002 \001(\004\022\r\n\005mapid\030\003 \001(\004\"/\n\rChgScene"
    "Event\022\013\n\003cid\030\001 \001(\004\022\021\n\tenterflag\030\002 \001(\010\"m\n"
    "\017EnterSceneEvent\022\013\n\003cid\030\001 \001(\004\022\013\n\003uid\030\002 \001"
    "(\r\022\020\n\010clientid\030\003 \001(\004\022\r\n\005mapid\030\004 \001(\004\022\t\n\001x"
    "\030\005 \001(\005\022\t\n\001y\030\006 \001(\005\022\t\n\001z\030\007 \001(\005", 588);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Event.proto", &protobuf_RegisterTypes);
  FunctionUnlockEvent::default_instance_ = new FunctionUnlockEvent();
  PlayerLeveUpEvent::default_instance_ = new PlayerLeveUpEvent();
  ItemUseEvent::default_instance_ = new ItemUseEvent();
  AcceptTaskEvent::default_instance_ = new AcceptTaskEvent();
  FinishTaskEvent::default_instance_ = new FinishTaskEvent();
  LeaveSceneEvent::default_instance_ = new LeaveSceneEvent();
  ChgSceneEvent::default_instance_ = new ChgSceneEvent();
  EnterSceneEvent::default_instance_ = new EnterSceneEvent();
  FunctionUnlockEvent::default_instance_->InitAsDefaultInstance();
  PlayerLeveUpEvent::default_instance_->InitAsDefaultInstance();
  ItemUseEvent::default_instance_->InitAsDefaultInstance();
  AcceptTaskEvent::default_instance_->InitAsDefaultInstance();
  FinishTaskEvent::default_instance_->InitAsDefaultInstance();
  LeaveSceneEvent::default_instance_->InitAsDefaultInstance();
  ChgSceneEvent::default_instance_->InitAsDefaultInstance();
  EnterSceneEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Event_2eproto {
  StaticDescriptorInitializer_Event_2eproto() {
    protobuf_AddDesc_Event_2eproto();
  }
} static_descriptor_initializer_Event_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FunctionUnlockEvent::kFunctionIdFieldNumber;
#endif  // !_MSC_VER

FunctionUnlockEvent::FunctionUnlockEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionUnlockEvent::InitAsDefaultInstance() {
}

FunctionUnlockEvent::FunctionUnlockEvent(const FunctionUnlockEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionUnlockEvent::SharedCtor() {
  _cached_size_ = 0;
  functionid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionUnlockEvent::~FunctionUnlockEvent() {
  SharedDtor();
}

void FunctionUnlockEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionUnlockEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionUnlockEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionUnlockEvent_descriptor_;
}

const FunctionUnlockEvent& FunctionUnlockEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

FunctionUnlockEvent* FunctionUnlockEvent::default_instance_ = NULL;

FunctionUnlockEvent* FunctionUnlockEvent::New() const {
  return new FunctionUnlockEvent;
}

void FunctionUnlockEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    functionid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionUnlockEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 functionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &functionid_)));
          set_has_functionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionUnlockEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 functionId = 1;
  if (has_functionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->functionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionUnlockEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 functionId = 1;
  if (has_functionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->functionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionUnlockEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 functionId = 1;
    if (has_functionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->functionid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionUnlockEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionUnlockEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionUnlockEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionUnlockEvent::MergeFrom(const FunctionUnlockEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_functionid()) {
      set_functionid(from.functionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionUnlockEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionUnlockEvent::CopyFrom(const FunctionUnlockEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionUnlockEvent::IsInitialized() const {

  return true;
}

void FunctionUnlockEvent::Swap(FunctionUnlockEvent* other) {
  if (other != this) {
    std::swap(functionid_, other->functionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionUnlockEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionUnlockEvent_descriptor_;
  metadata.reflection = FunctionUnlockEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerLeveUpEvent::kCidFieldNumber;
const int PlayerLeveUpEvent::kLevelFieldNumber;
#endif  // !_MSC_VER

PlayerLeveUpEvent::PlayerLeveUpEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerLeveUpEvent::InitAsDefaultInstance() {
}

PlayerLeveUpEvent::PlayerLeveUpEvent(const PlayerLeveUpEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerLeveUpEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerLeveUpEvent::~PlayerLeveUpEvent() {
  SharedDtor();
}

void PlayerLeveUpEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerLeveUpEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerLeveUpEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerLeveUpEvent_descriptor_;
}

const PlayerLeveUpEvent& PlayerLeveUpEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

PlayerLeveUpEvent* PlayerLeveUpEvent::default_instance_ = NULL;

PlayerLeveUpEvent* PlayerLeveUpEvent::New() const {
  return new PlayerLeveUpEvent;
}

void PlayerLeveUpEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerLeveUpEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerLeveUpEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerLeveUpEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerLeveUpEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerLeveUpEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerLeveUpEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerLeveUpEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerLeveUpEvent::MergeFrom(const PlayerLeveUpEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerLeveUpEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerLeveUpEvent::CopyFrom(const PlayerLeveUpEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerLeveUpEvent::IsInitialized() const {

  return true;
}

void PlayerLeveUpEvent::Swap(PlayerLeveUpEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerLeveUpEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerLeveUpEvent_descriptor_;
  metadata.reflection = PlayerLeveUpEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemUseEvent::kItemIdFieldNumber;
const int ItemUseEvent::kNumFieldNumber;
#endif  // !_MSC_VER

ItemUseEvent::ItemUseEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemUseEvent::InitAsDefaultInstance() {
}

ItemUseEvent::ItemUseEvent(const ItemUseEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemUseEvent::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_ULONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemUseEvent::~ItemUseEvent() {
  SharedDtor();
}

void ItemUseEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemUseEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemUseEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemUseEvent_descriptor_;
}

const ItemUseEvent& ItemUseEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

ItemUseEvent* ItemUseEvent::default_instance_ = NULL;

ItemUseEvent* ItemUseEvent::New() const {
  return new ItemUseEvent;
}

void ItemUseEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_ULONGLONG(0);
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemUseEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemUseEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->itemid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemUseEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->itemid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemUseEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->itemid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemUseEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemUseEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemUseEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemUseEvent::MergeFrom(const ItemUseEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemUseEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemUseEvent::CopyFrom(const ItemUseEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemUseEvent::IsInitialized() const {

  return true;
}

void ItemUseEvent::Swap(ItemUseEvent* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemUseEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemUseEvent_descriptor_;
  metadata.reflection = ItemUseEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptTaskEvent::kTaskIdFieldNumber;
const int AcceptTaskEvent::kCidFieldNumber;
const int AcceptTaskEvent::kTaskTypeFieldNumber;
#endif  // !_MSC_VER

AcceptTaskEvent::AcceptTaskEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptTaskEvent::InitAsDefaultInstance() {
}

AcceptTaskEvent::AcceptTaskEvent(const AcceptTaskEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptTaskEvent::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  tasktype_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptTaskEvent::~AcceptTaskEvent() {
  SharedDtor();
}

void AcceptTaskEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AcceptTaskEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptTaskEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptTaskEvent_descriptor_;
}

const AcceptTaskEvent& AcceptTaskEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

AcceptTaskEvent* AcceptTaskEvent::default_instance_ = NULL;

AcceptTaskEvent* AcceptTaskEvent::New() const {
  return new AcceptTaskEvent;
}

void AcceptTaskEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    tasktype_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptTaskEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskType;
        break;
      }

      // optional uint32 taskType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptTaskEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->taskid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 taskType = 3;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tasktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptTaskEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->taskid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 taskType = 3;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tasktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptTaskEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taskid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 taskType = 3;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptTaskEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptTaskEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptTaskEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptTaskEvent::MergeFrom(const AcceptTaskEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptTaskEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptTaskEvent::CopyFrom(const AcceptTaskEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptTaskEvent::IsInitialized() const {

  return true;
}

void AcceptTaskEvent::Swap(AcceptTaskEvent* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(cid_, other->cid_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptTaskEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptTaskEvent_descriptor_;
  metadata.reflection = AcceptTaskEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinishTaskEvent::kTaskIdFieldNumber;
const int FinishTaskEvent::kCidFieldNumber;
const int FinishTaskEvent::kTaskTypeFieldNumber;
const int FinishTaskEvent::kMapGroupFieldNumber;
#endif  // !_MSC_VER

FinishTaskEvent::FinishTaskEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinishTaskEvent::InitAsDefaultInstance() {
}

FinishTaskEvent::FinishTaskEvent(const FinishTaskEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinishTaskEvent::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_ULONGLONG(0);
  cid_ = GOOGLE_ULONGLONG(0);
  tasktype_ = 0u;
  mapgroup_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinishTaskEvent::~FinishTaskEvent() {
  SharedDtor();
}

void FinishTaskEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinishTaskEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinishTaskEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinishTaskEvent_descriptor_;
}

const FinishTaskEvent& FinishTaskEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

FinishTaskEvent* FinishTaskEvent::default_instance_ = NULL;

FinishTaskEvent* FinishTaskEvent::New() const {
  return new FinishTaskEvent;
}

void FinishTaskEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_ULONGLONG(0);
    cid_ = GOOGLE_ULONGLONG(0);
    tasktype_ = 0u;
    mapgroup_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinishTaskEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cid;
        break;
      }

      // optional uint64 cid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskType;
        break;
      }

      // optional uint32 taskType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tasktype_)));
          set_has_tasktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapGroup;
        break;
      }

      // optional int32 mapGroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapGroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapgroup_)));
          set_has_mapgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinishTaskEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->taskid(), output);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cid(), output);
  }

  // optional uint32 taskType = 3;
  if (has_tasktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tasktype(), output);
  }

  // optional int32 mapGroup = 4;
  if (has_mapgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapgroup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinishTaskEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 taskId = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->taskid(), target);
  }

  // optional uint64 cid = 2;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cid(), target);
  }

  // optional uint32 taskType = 3;
  if (has_tasktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tasktype(), target);
  }

  // optional int32 mapGroup = 4;
  if (has_mapgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapgroup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinishTaskEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->taskid());
    }

    // optional uint64 cid = 2;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 taskType = 3;
    if (has_tasktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tasktype());
    }

    // optional int32 mapGroup = 4;
    if (has_mapgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapgroup());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinishTaskEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinishTaskEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinishTaskEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinishTaskEvent::MergeFrom(const FinishTaskEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_tasktype()) {
      set_tasktype(from.tasktype());
    }
    if (from.has_mapgroup()) {
      set_mapgroup(from.mapgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinishTaskEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinishTaskEvent::CopyFrom(const FinishTaskEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinishTaskEvent::IsInitialized() const {

  return true;
}

void FinishTaskEvent::Swap(FinishTaskEvent* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(cid_, other->cid_);
    std::swap(tasktype_, other->tasktype_);
    std::swap(mapgroup_, other->mapgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinishTaskEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinishTaskEvent_descriptor_;
  metadata.reflection = FinishTaskEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveSceneEvent::kCidFieldNumber;
const int LeaveSceneEvent::kSceneidFieldNumber;
const int LeaveSceneEvent::kMapidFieldNumber;
#endif  // !_MSC_VER

LeaveSceneEvent::LeaveSceneEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveSceneEvent::InitAsDefaultInstance() {
}

LeaveSceneEvent::LeaveSceneEvent(const LeaveSceneEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveSceneEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  sceneid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveSceneEvent::~LeaveSceneEvent() {
  SharedDtor();
}

void LeaveSceneEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LeaveSceneEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveSceneEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveSceneEvent_descriptor_;
}

const LeaveSceneEvent& LeaveSceneEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

LeaveSceneEvent* LeaveSceneEvent::default_instance_ = NULL;

LeaveSceneEvent* LeaveSceneEvent::New() const {
  return new LeaveSceneEvent;
}

void LeaveSceneEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    sceneid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveSceneEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sceneid;
        break;
      }

      // optional uint64 sceneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sceneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sceneid_)));
          set_has_sceneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveSceneEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint64 sceneid = 2;
  if (has_sceneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->sceneid(), output);
  }

  // optional uint64 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveSceneEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint64 sceneid = 2;
  if (has_sceneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->sceneid(), target);
  }

  // optional uint64 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveSceneEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint64 sceneid = 2;
    if (has_sceneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sceneid());
    }

    // optional uint64 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveSceneEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveSceneEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveSceneEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveSceneEvent::MergeFrom(const LeaveSceneEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_sceneid()) {
      set_sceneid(from.sceneid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveSceneEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveSceneEvent::CopyFrom(const LeaveSceneEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveSceneEvent::IsInitialized() const {

  return true;
}

void LeaveSceneEvent::Swap(LeaveSceneEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(sceneid_, other->sceneid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveSceneEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveSceneEvent_descriptor_;
  metadata.reflection = LeaveSceneEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChgSceneEvent::kCidFieldNumber;
const int ChgSceneEvent::kEnterflagFieldNumber;
#endif  // !_MSC_VER

ChgSceneEvent::ChgSceneEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChgSceneEvent::InitAsDefaultInstance() {
}

ChgSceneEvent::ChgSceneEvent(const ChgSceneEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChgSceneEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  enterflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChgSceneEvent::~ChgSceneEvent() {
  SharedDtor();
}

void ChgSceneEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChgSceneEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChgSceneEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChgSceneEvent_descriptor_;
}

const ChgSceneEvent& ChgSceneEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

ChgSceneEvent* ChgSceneEvent::default_instance_ = NULL;

ChgSceneEvent* ChgSceneEvent::New() const {
  return new ChgSceneEvent;
}

void ChgSceneEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    enterflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChgSceneEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_enterflag;
        break;
      }

      // optional bool enterflag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enterflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enterflag_)));
          set_has_enterflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChgSceneEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bool enterflag = 2;
  if (has_enterflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enterflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChgSceneEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bool enterflag = 2;
  if (has_enterflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enterflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChgSceneEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bool enterflag = 2;
    if (has_enterflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChgSceneEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChgSceneEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChgSceneEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChgSceneEvent::MergeFrom(const ChgSceneEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_enterflag()) {
      set_enterflag(from.enterflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChgSceneEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChgSceneEvent::CopyFrom(const ChgSceneEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChgSceneEvent::IsInitialized() const {

  return true;
}

void ChgSceneEvent::Swap(ChgSceneEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(enterflag_, other->enterflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChgSceneEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChgSceneEvent_descriptor_;
  metadata.reflection = ChgSceneEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EnterSceneEvent::kCidFieldNumber;
const int EnterSceneEvent::kUidFieldNumber;
const int EnterSceneEvent::kClientidFieldNumber;
const int EnterSceneEvent::kMapidFieldNumber;
const int EnterSceneEvent::kXFieldNumber;
const int EnterSceneEvent::kYFieldNumber;
const int EnterSceneEvent::kZFieldNumber;
#endif  // !_MSC_VER

EnterSceneEvent::EnterSceneEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EnterSceneEvent::InitAsDefaultInstance() {
}

EnterSceneEvent::EnterSceneEvent(const EnterSceneEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EnterSceneEvent::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  uid_ = 0u;
  clientid_ = GOOGLE_ULONGLONG(0);
  mapid_ = GOOGLE_ULONGLONG(0);
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnterSceneEvent::~EnterSceneEvent() {
  SharedDtor();
}

void EnterSceneEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnterSceneEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnterSceneEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnterSceneEvent_descriptor_;
}

const EnterSceneEvent& EnterSceneEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();
  return *default_instance_;
}

EnterSceneEvent* EnterSceneEvent::default_instance_ = NULL;

EnterSceneEvent* EnterSceneEvent::New() const {
  return new EnterSceneEvent;
}

void EnterSceneEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    uid_ = 0u;
    clientid_ = GOOGLE_ULONGLONG(0);
    mapid_ = GOOGLE_ULONGLONG(0);
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EnterSceneEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }

      // optional uint32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // optional uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional uint64 mapid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_x;
        break;
      }

      // optional int32 x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_y;
        break;
      }

      // optional int32 y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_z;
        break;
      }

      // optional int32 z = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EnterSceneEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uid(), output);
  }

  // optional uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->mapid(), output);
  }

  // optional int32 x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->x(), output);
  }

  // optional int32 y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->y(), output);
  }

  // optional int32 z = 7;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EnterSceneEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional uint32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uid(), target);
  }

  // optional uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // optional uint64 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->mapid(), target);
  }

  // optional int32 x = 5;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->x(), target);
  }

  // optional int32 y = 6;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->y(), target);
  }

  // optional int32 z = 7;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EnterSceneEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional uint32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uid());
    }

    // optional uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // optional uint64 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->mapid());
    }

    // optional int32 x = 5;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 6;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional int32 z = 7;
    if (has_z()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->z());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnterSceneEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EnterSceneEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EnterSceneEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EnterSceneEvent::MergeFrom(const EnterSceneEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EnterSceneEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnterSceneEvent::CopyFrom(const EnterSceneEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnterSceneEvent::IsInitialized() const {

  return true;
}

void EnterSceneEvent::Swap(EnterSceneEvent* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(uid_, other->uid_);
    std::swap(clientid_, other->clientid_);
    std::swap(mapid_, other->mapid_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EnterSceneEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnterSceneEvent_descriptor_;
  metadata.reflection = EnterSceneEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
