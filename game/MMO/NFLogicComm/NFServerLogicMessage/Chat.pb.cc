// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* ChatContentInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChatContentInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGChatMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGChatMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCChatMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCChatMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCSystemChatMsgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCSystemChatMsgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWAskOfflineMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWAskOfflineMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCAskOfflineMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCAskOfflineMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CWIntrvalAskOfflineMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CWIntrvalAskOfflineMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* OfflineMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OfflineMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WCIntrvalAskOfflineMsgRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WCIntrvalAskOfflineMsgRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWChatMsgReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWChatMsgReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GWSysChatMsgNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GWSysChatMsgNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransChatCrossServerProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransChatCrossServerProto_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CHAT_MSG_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Chat_2eproto() {
  protobuf_AddDesc_Chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Chat.proto");
  GOOGLE_CHECK(file != NULL);
  ChatContentInfo_descriptor_ = file->message_type(0);
  static const int ChatContentInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContentInfo, describes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContentInfo, iteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContentInfo, hornid_),
  };
  ChatContentInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChatContentInfo_descriptor_,
      ChatContentInfo::default_instance_,
      ChatContentInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContentInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChatContentInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChatContentInfo));
  CGChatMsgReq_descriptor_ = file->message_type(1);
  static const int CGChatMsgReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatMsgReq, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatMsgReq, chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatMsgReq, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatMsgReq, msgtype_),
  };
  CGChatMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGChatMsgReq_descriptor_,
      CGChatMsgReq::default_instance_,
      CGChatMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGChatMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGChatMsgReq));
  GCChatMsgRsp_descriptor_ = file->message_type(2);
  static const int GCChatMsgRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, fromplayerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, time_tick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, msgval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, right_),
  };
  GCChatMsgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCChatMsgRsp_descriptor_,
      GCChatMsgRsp::default_instance_,
      GCChatMsgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCChatMsgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCChatMsgRsp));
  GCSystemChatMsgNotify_descriptor_ = file->message_type(3);
  static const int GCSystemChatMsgNotify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, parmas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, rumorcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, items_),
  };
  GCSystemChatMsgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCSystemChatMsgNotify_descriptor_,
      GCSystemChatMsgNotify::default_instance_,
      GCSystemChatMsgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCSystemChatMsgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCSystemChatMsgNotify));
  CWAskOfflineMsgReq_descriptor_ = file->message_type(4);
  static const int CWAskOfflineMsgReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAskOfflineMsgReq, charid_),
  };
  CWAskOfflineMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWAskOfflineMsgReq_descriptor_,
      CWAskOfflineMsgReq::default_instance_,
      CWAskOfflineMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAskOfflineMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWAskOfflineMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWAskOfflineMsgReq));
  WCAskOfflineMsgRsp_descriptor_ = file->message_type(5);
  static const int WCAskOfflineMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskOfflineMsgRsp, msgsize_),
  };
  WCAskOfflineMsgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCAskOfflineMsgRsp_descriptor_,
      WCAskOfflineMsgRsp::default_instance_,
      WCAskOfflineMsgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskOfflineMsgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCAskOfflineMsgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCAskOfflineMsgRsp));
  CWIntrvalAskOfflineMsgReq_descriptor_ = file->message_type(6);
  static const int CWIntrvalAskOfflineMsgReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWIntrvalAskOfflineMsgReq, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWIntrvalAskOfflineMsgReq, size_),
  };
  CWIntrvalAskOfflineMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CWIntrvalAskOfflineMsgReq_descriptor_,
      CWIntrvalAskOfflineMsgReq::default_instance_,
      CWIntrvalAskOfflineMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWIntrvalAskOfflineMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CWIntrvalAskOfflineMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CWIntrvalAskOfflineMsgReq));
  OfflineMsg_descriptor_ = file->message_type(7);
  static const int OfflineMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, sendtime_),
  };
  OfflineMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OfflineMsg_descriptor_,
      OfflineMsg::default_instance_,
      OfflineMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OfflineMsg));
  WCIntrvalAskOfflineMsgRsp_descriptor_ = file->message_type(8);
  static const int WCIntrvalAskOfflineMsgRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCIntrvalAskOfflineMsgRsp, offlinemsglist_),
  };
  WCIntrvalAskOfflineMsgRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WCIntrvalAskOfflineMsgRsp_descriptor_,
      WCIntrvalAskOfflineMsgRsp::default_instance_,
      WCIntrvalAskOfflineMsgRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCIntrvalAskOfflineMsgRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WCIntrvalAskOfflineMsgRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WCIntrvalAskOfflineMsgRsp));
  GWChatMsgReq_descriptor_ = file->message_type(9);
  static const int GWChatMsgReq_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, fromid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, targetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, msgval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, cid_lst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, curnum_),
  };
  GWChatMsgReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWChatMsgReq_descriptor_,
      GWChatMsgReq::default_instance_,
      GWChatMsgReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWChatMsgReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWChatMsgReq));
  GWSysChatMsgNotify_descriptor_ = file->message_type(10);
  static const int GWSysChatMsgNotify_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSysChatMsgNotify, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSysChatMsgNotify, msgtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSysChatMsgNotify, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSysChatMsgNotify, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSysChatMsgNotify, parmas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSysChatMsgNotify, extraid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSysChatMsgNotify, items_),
  };
  GWSysChatMsgNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GWSysChatMsgNotify_descriptor_,
      GWSysChatMsgNotify::default_instance_,
      GWSysChatMsgNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSysChatMsgNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GWSysChatMsgNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GWSysChatMsgNotify));
  TransChatCrossServerProto_descriptor_ = file->message_type(11);
  static const int TransChatCrossServerProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransChatCrossServerProto, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransChatCrossServerProto, fromplayerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransChatCrossServerProto, chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransChatCrossServerProto, toplayers_),
  };
  TransChatCrossServerProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransChatCrossServerProto_descriptor_,
      TransChatCrossServerProto::default_instance_,
      TransChatCrossServerProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransChatCrossServerProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransChatCrossServerProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransChatCrossServerProto));
  CHAT_MSG_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChatContentInfo_descriptor_, &ChatContentInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGChatMsgReq_descriptor_, &CGChatMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCChatMsgRsp_descriptor_, &GCChatMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCSystemChatMsgNotify_descriptor_, &GCSystemChatMsgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWAskOfflineMsgReq_descriptor_, &CWAskOfflineMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCAskOfflineMsgRsp_descriptor_, &WCAskOfflineMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CWIntrvalAskOfflineMsgReq_descriptor_, &CWIntrvalAskOfflineMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OfflineMsg_descriptor_, &OfflineMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WCIntrvalAskOfflineMsgRsp_descriptor_, &WCIntrvalAskOfflineMsgRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWChatMsgReq_descriptor_, &GWChatMsgReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GWSysChatMsgNotify_descriptor_, &GWSysChatMsgNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransChatCrossServerProto_descriptor_, &TransChatCrossServerProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Chat_2eproto() {
  delete ChatContentInfo::default_instance_;
  delete ChatContentInfo_reflection_;
  delete CGChatMsgReq::default_instance_;
  delete CGChatMsgReq_reflection_;
  delete GCChatMsgRsp::default_instance_;
  delete GCChatMsgRsp_reflection_;
  delete GCSystemChatMsgNotify::default_instance_;
  delete GCSystemChatMsgNotify_reflection_;
  delete CWAskOfflineMsgReq::default_instance_;
  delete CWAskOfflineMsgReq_reflection_;
  delete WCAskOfflineMsgRsp::default_instance_;
  delete WCAskOfflineMsgRsp_reflection_;
  delete CWIntrvalAskOfflineMsgReq::default_instance_;
  delete CWIntrvalAskOfflineMsgReq_reflection_;
  delete OfflineMsg::default_instance_;
  delete OfflineMsg_reflection_;
  delete WCIntrvalAskOfflineMsgRsp::default_instance_;
  delete WCIntrvalAskOfflineMsgRsp_reflection_;
  delete GWChatMsgReq::default_instance_;
  delete GWChatMsgReq_reflection_;
  delete GWSysChatMsgNotify::default_instance_;
  delete GWSysChatMsgNotify_reflection_;
  delete TransChatCrossServerProto::default_instance_;
  delete TransChatCrossServerProto_reflection_;
}

void protobuf_AddDesc_Chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nChat.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"_\n\017ChatContentInfo\022\021\n\tdescrib"
    "es\030\001 \002(\t\022)\n\010itemInfo\030\002 \003(\0132\027.proto_ff.It"
    "emProtoInfo\022\016\n\006hornid\030\003 \001(\003\"r\n\014CGChatMsg"
    "Req\022\017\n\007channel\030\001 \001(\r\022.\n\013chatContent\030\002 \001("
    "\0132\031.proto_ff.ChatContentInfo\022\020\n\010targetId"
    "\030\003 \001(\004\022\017\n\007msgType\030\004 \001(\004\"\325\001\n\014GCChatMsgRsp"
    "\022\017\n\007channel\030\001 \001(\r\0224\n\016fromPlayerInfo\030\002 \001("
    "\0132\034.proto_ff.RolePlayerMiniInfo\022\017\n\007msgTy"
    "pe\030\003 \001(\004\022.\n\013chatContent\030\004 \002(\0132\031.proto_ff"
    ".ChatContentInfo\022\021\n\ttime_tick\030\005 \001(\004\022\013\n\003r"
    "et\030\006 \001(\r\022\016\n\006msgVal\030\007 \001(\004\022\r\n\005right\030\010 \001(\005\""
    "\323\001\n\025GCSystemChatMsgNotify\022\017\n\007channel\030\001 \001"
    "(\r\022\017\n\007msgType\030\002 \001(\004\022-\n\007players\030\003 \003(\0132\034.p"
    "roto_ff.RolePlayerMiniInfo\022\014\n\004text\030\004 \003(\t"
    "\022\016\n\006parmas\030\005 \003(\004\022\017\n\007content\030\006 \001(\t\022\022\n\nrum"
    "orCount\030\007 \001(\r\022&\n\005items\030\010 \003(\0132\027.proto_ff."
    "ItemProtoInfo\"$\n\022CWAskOfflineMsgReq\022\016\n\006c"
    "harID\030\001 \001(\004\"%\n\022WCAskOfflineMsgRsp\022\017\n\007msg"
    "Size\030\001 \001(\r\"9\n\031CWIntrvalAskOfflineMsgReq\022"
    "\016\n\006charID\030\001 \001(\004\022\014\n\004size\030\002 \001(\r\"\200\001\n\nOfflin"
    "eMsg\0220\n\nplayerInfo\030\001 \001(\0132\034.proto_ff.Role"
    "PlayerMiniInfo\022.\n\013chatContent\030\002 \002(\0132\031.pr"
    "oto_ff.ChatContentInfo\022\020\n\010sendTime\030\003 \001(\004"
    "\"I\n\031WCIntrvalAskOfflineMsgRsp\022,\n\016offline"
    "MsgList\030\001 \003(\0132\024.proto_ff.OfflineMsg\"\332\001\n\014"
    "GWChatMsgReq\022\'\n\007channel\030\001 \001(\0162\026.proto_ff"
    ".CHAT_CHANNEL\022.\n\013chatContent\030\002 \002(\0132\031.pro"
    "to_ff.ChatContentInfo\022\016\n\006fromId\030\003 \001(\004\022\020\n"
    "\010targetId\030\004 \001(\004\022\017\n\007msgType\030\005 \001(\004\022\016\n\006msgV"
    "al\030\006 \001(\004\022\017\n\007cid_lst\030\007 \003(\004\022\r\n\005right\030\010 \001(\005"
    "\022\016\n\006curnum\030\t \001(\005\"\324\001\n\022GWSysChatMsgNotify\022"
    "\'\n\007channel\030\001 \001(\0162\026.proto_ff.CHAT_CHANNEL"
    "\022\017\n\007msgType\030\002 \001(\004\022-\n\007players\030\003 \003(\0132\034.pro"
    "to_ff.RolePlayerMiniInfo\022\014\n\004text\030\004 \003(\t\022\016"
    "\n\006parmas\030\005 \003(\004\022\017\n\007extraid\030\006 \001(\004\022&\n\005items"
    "\030\007 \003(\0132\027.proto_ff.ItemProtoInfo\"\275\001\n\031Tran"
    "sChatCrossServerProto\022\'\n\007channel\030\001 \001(\0162\026"
    ".proto_ff.CHAT_CHANNEL\0224\n\016fromPlayerInfo"
    "\030\002 \002(\0132\034.proto_ff.RolePlayerMiniInfo\022.\n\013"
    "chatContent\030\003 \002(\0132\031.proto_ff.ChatContent"
    "Info\022\021\n\ttoPlayers\030\004 \003(\004*C\n\rCHAT_MSG_TYPE"
    "\022\026\n\022CHAT_MSG_TYPE_NONE\020\000\022\032\n\026CHAT_MSG_TYP"
    "E_FIREWORK\020\001", 1732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Chat.proto", &protobuf_RegisterTypes);
  ChatContentInfo::default_instance_ = new ChatContentInfo();
  CGChatMsgReq::default_instance_ = new CGChatMsgReq();
  GCChatMsgRsp::default_instance_ = new GCChatMsgRsp();
  GCSystemChatMsgNotify::default_instance_ = new GCSystemChatMsgNotify();
  CWAskOfflineMsgReq::default_instance_ = new CWAskOfflineMsgReq();
  WCAskOfflineMsgRsp::default_instance_ = new WCAskOfflineMsgRsp();
  CWIntrvalAskOfflineMsgReq::default_instance_ = new CWIntrvalAskOfflineMsgReq();
  OfflineMsg::default_instance_ = new OfflineMsg();
  WCIntrvalAskOfflineMsgRsp::default_instance_ = new WCIntrvalAskOfflineMsgRsp();
  GWChatMsgReq::default_instance_ = new GWChatMsgReq();
  GWSysChatMsgNotify::default_instance_ = new GWSysChatMsgNotify();
  TransChatCrossServerProto::default_instance_ = new TransChatCrossServerProto();
  ChatContentInfo::default_instance_->InitAsDefaultInstance();
  CGChatMsgReq::default_instance_->InitAsDefaultInstance();
  GCChatMsgRsp::default_instance_->InitAsDefaultInstance();
  GCSystemChatMsgNotify::default_instance_->InitAsDefaultInstance();
  CWAskOfflineMsgReq::default_instance_->InitAsDefaultInstance();
  WCAskOfflineMsgRsp::default_instance_->InitAsDefaultInstance();
  CWIntrvalAskOfflineMsgReq::default_instance_->InitAsDefaultInstance();
  OfflineMsg::default_instance_->InitAsDefaultInstance();
  WCIntrvalAskOfflineMsgRsp::default_instance_->InitAsDefaultInstance();
  GWChatMsgReq::default_instance_->InitAsDefaultInstance();
  GWSysChatMsgNotify::default_instance_->InitAsDefaultInstance();
  TransChatCrossServerProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Chat_2eproto {
  StaticDescriptorInitializer_Chat_2eproto() {
    protobuf_AddDesc_Chat_2eproto();
  }
} static_descriptor_initializer_Chat_2eproto_;
const ::google::protobuf::EnumDescriptor* CHAT_MSG_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CHAT_MSG_TYPE_descriptor_;
}
bool CHAT_MSG_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ChatContentInfo::kDescribesFieldNumber;
const int ChatContentInfo::kItemInfoFieldNumber;
const int ChatContentInfo::kHornidFieldNumber;
#endif  // !_MSC_VER

ChatContentInfo::ChatContentInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChatContentInfo::InitAsDefaultInstance() {
}

ChatContentInfo::ChatContentInfo(const ChatContentInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChatContentInfo::SharedCtor() {
  _cached_size_ = 0;
  describes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hornid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChatContentInfo::~ChatContentInfo() {
  SharedDtor();
}

void ChatContentInfo::SharedDtor() {
  if (describes_ != &::google::protobuf::internal::kEmptyString) {
    delete describes_;
  }
  if (this != default_instance_) {
  }
}

void ChatContentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChatContentInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatContentInfo_descriptor_;
}

const ChatContentInfo& ChatContentInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

ChatContentInfo* ChatContentInfo::default_instance_ = NULL;

ChatContentInfo* ChatContentInfo::New() const {
  return new ChatContentInfo;
}

void ChatContentInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_describes()) {
      if (describes_ != &::google::protobuf::internal::kEmptyString) {
        describes_->clear();
      }
    }
    hornid_ = GOOGLE_LONGLONG(0);
  }
  iteminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChatContentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string describes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_describes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->describes().data(), this->describes().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo itemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        if (input->ExpectTag(24)) goto parse_hornid;
        break;
      }

      // optional int64 hornid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hornid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hornid_)));
          set_has_hornid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChatContentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string describes = 1;
  if (has_describes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describes().data(), this->describes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->describes(), output);
  }

  // repeated .proto_ff.ItemProtoInfo itemInfo = 2;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(i), output);
  }

  // optional int64 hornid = 3;
  if (has_hornid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->hornid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChatContentInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string describes = 1;
  if (has_describes()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->describes().data(), this->describes().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->describes(), target);
  }

  // repeated .proto_ff.ItemProtoInfo itemInfo = 2;
  for (int i = 0; i < this->iteminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(i), target);
  }

  // optional int64 hornid = 3;
  if (has_hornid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->hornid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChatContentInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string describes = 1;
    if (has_describes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->describes());
    }

    // optional int64 hornid = 3;
    if (has_hornid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hornid());
    }

  }
  // repeated .proto_ff.ItemProtoInfo itemInfo = 2;
  total_size += 1 * this->iteminfo_size();
  for (int i = 0; i < this->iteminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChatContentInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChatContentInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChatContentInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChatContentInfo::MergeFrom(const ChatContentInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfo_.MergeFrom(from.iteminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_describes()) {
      set_describes(from.describes());
    }
    if (from.has_hornid()) {
      set_hornid(from.hornid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChatContentInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChatContentInfo::CopyFrom(const ChatContentInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatContentInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < iteminfo_size(); i++) {
    if (!this->iteminfo(i).IsInitialized()) return false;
  }
  return true;
}

void ChatContentInfo::Swap(ChatContentInfo* other) {
  if (other != this) {
    std::swap(describes_, other->describes_);
    iteminfo_.Swap(&other->iteminfo_);
    std::swap(hornid_, other->hornid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChatContentInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChatContentInfo_descriptor_;
  metadata.reflection = ChatContentInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGChatMsgReq::kChannelFieldNumber;
const int CGChatMsgReq::kChatContentFieldNumber;
const int CGChatMsgReq::kTargetIdFieldNumber;
const int CGChatMsgReq::kMsgTypeFieldNumber;
#endif  // !_MSC_VER

CGChatMsgReq::CGChatMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGChatMsgReq::InitAsDefaultInstance() {
  chatcontent_ = const_cast< ::proto_ff::ChatContentInfo*>(&::proto_ff::ChatContentInfo::default_instance());
}

CGChatMsgReq::CGChatMsgReq(const CGChatMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGChatMsgReq::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  chatcontent_ = NULL;
  targetid_ = GOOGLE_ULONGLONG(0);
  msgtype_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGChatMsgReq::~CGChatMsgReq() {
  SharedDtor();
}

void CGChatMsgReq::SharedDtor() {
  if (this != default_instance_) {
    delete chatcontent_;
  }
}

void CGChatMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGChatMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGChatMsgReq_descriptor_;
}

const CGChatMsgReq& CGChatMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

CGChatMsgReq* CGChatMsgReq::default_instance_ = NULL;

CGChatMsgReq* CGChatMsgReq::New() const {
  return new CGChatMsgReq;
}

void CGChatMsgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0u;
    if (has_chatcontent()) {
      if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
    }
    targetid_ = GOOGLE_ULONGLONG(0);
    msgtype_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGChatMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatContent;
        break;
      }

      // optional .proto_ff.ChatContentInfo chatContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetId;
        break;
      }

      // optional uint64 targetId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_msgType;
        break;
      }

      // optional uint64 msgType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGChatMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional .proto_ff.ChatContentInfo chatContent = 2;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chatcontent(), output);
  }

  // optional uint64 targetId = 3;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->targetid(), output);
  }

  // optional uint64 msgType = 4;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->msgtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGChatMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional .proto_ff.ChatContentInfo chatContent = 2;
  if (has_chatcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chatcontent(), target);
  }

  // optional uint64 targetId = 3;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->targetid(), target);
  }

  // optional uint64 msgType = 4;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->msgtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGChatMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional .proto_ff.ChatContentInfo chatContent = 2;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatcontent());
    }

    // optional uint64 targetId = 3;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint64 msgType = 4;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGChatMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGChatMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGChatMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGChatMsgReq::MergeFrom(const CGChatMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_chatcontent()) {
      mutable_chatcontent()->::proto_ff::ChatContentInfo::MergeFrom(from.chatcontent());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGChatMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGChatMsgReq::CopyFrom(const CGChatMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGChatMsgReq::IsInitialized() const {

  if (has_chatcontent()) {
    if (!this->chatcontent().IsInitialized()) return false;
  }
  return true;
}

void CGChatMsgReq::Swap(CGChatMsgReq* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(targetid_, other->targetid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGChatMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGChatMsgReq_descriptor_;
  metadata.reflection = CGChatMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCChatMsgRsp::kChannelFieldNumber;
const int GCChatMsgRsp::kFromPlayerInfoFieldNumber;
const int GCChatMsgRsp::kMsgTypeFieldNumber;
const int GCChatMsgRsp::kChatContentFieldNumber;
const int GCChatMsgRsp::kTimeTickFieldNumber;
const int GCChatMsgRsp::kRetFieldNumber;
const int GCChatMsgRsp::kMsgValFieldNumber;
const int GCChatMsgRsp::kRightFieldNumber;
#endif  // !_MSC_VER

GCChatMsgRsp::GCChatMsgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCChatMsgRsp::InitAsDefaultInstance() {
  fromplayerinfo_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
  chatcontent_ = const_cast< ::proto_ff::ChatContentInfo*>(&::proto_ff::ChatContentInfo::default_instance());
}

GCChatMsgRsp::GCChatMsgRsp(const GCChatMsgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCChatMsgRsp::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  fromplayerinfo_ = NULL;
  msgtype_ = GOOGLE_ULONGLONG(0);
  chatcontent_ = NULL;
  time_tick_ = GOOGLE_ULONGLONG(0);
  ret_ = 0u;
  msgval_ = GOOGLE_ULONGLONG(0);
  right_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCChatMsgRsp::~GCChatMsgRsp() {
  SharedDtor();
}

void GCChatMsgRsp::SharedDtor() {
  if (this != default_instance_) {
    delete fromplayerinfo_;
    delete chatcontent_;
  }
}

void GCChatMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCChatMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCChatMsgRsp_descriptor_;
}

const GCChatMsgRsp& GCChatMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

GCChatMsgRsp* GCChatMsgRsp::default_instance_ = NULL;

GCChatMsgRsp* GCChatMsgRsp::New() const {
  return new GCChatMsgRsp;
}

void GCChatMsgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0u;
    if (has_fromplayerinfo()) {
      if (fromplayerinfo_ != NULL) fromplayerinfo_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    msgtype_ = GOOGLE_ULONGLONG(0);
    if (has_chatcontent()) {
      if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
    }
    time_tick_ = GOOGLE_ULONGLONG(0);
    ret_ = 0u;
    msgval_ = GOOGLE_ULONGLONG(0);
    right_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCChatMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fromPlayerInfo;
        break;
      }

      // optional .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromPlayerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromplayerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_msgType;
        break;
      }

      // optional uint64 msgType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_chatContent;
        break;
      }

      // required .proto_ff.ChatContentInfo chatContent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time_tick;
        break;
      }

      // optional uint64 time_tick = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_tick_)));
          set_has_time_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_msgVal;
        break;
      }

      // optional uint64 msgVal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgval_)));
          set_has_msgval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_right;
        break;
      }

      // optional int32 right = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCChatMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
  if (has_fromplayerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fromplayerinfo(), output);
  }

  // optional uint64 msgType = 3;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->msgtype(), output);
  }

  // required .proto_ff.ChatContentInfo chatContent = 4;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->chatcontent(), output);
  }

  // optional uint64 time_tick = 5;
  if (has_time_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->time_tick(), output);
  }

  // optional uint32 ret = 6;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ret(), output);
  }

  // optional uint64 msgVal = 7;
  if (has_msgval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->msgval(), output);
  }

  // optional int32 right = 8;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->right(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCChatMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
  if (has_fromplayerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fromplayerinfo(), target);
  }

  // optional uint64 msgType = 3;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->msgtype(), target);
  }

  // required .proto_ff.ChatContentInfo chatContent = 4;
  if (has_chatcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->chatcontent(), target);
  }

  // optional uint64 time_tick = 5;
  if (has_time_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->time_tick(), target);
  }

  // optional uint32 ret = 6;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ret(), target);
  }

  // optional uint64 msgVal = 7;
  if (has_msgval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->msgval(), target);
  }

  // optional int32 right = 8;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->right(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCChatMsgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
    if (has_fromplayerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromplayerinfo());
    }

    // optional uint64 msgType = 3;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgtype());
    }

    // required .proto_ff.ChatContentInfo chatContent = 4;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatcontent());
    }

    // optional uint64 time_tick = 5;
    if (has_time_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->time_tick());
    }

    // optional uint32 ret = 6;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional uint64 msgVal = 7;
    if (has_msgval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgval());
    }

    // optional int32 right = 8;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCChatMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCChatMsgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCChatMsgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCChatMsgRsp::MergeFrom(const GCChatMsgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_fromplayerinfo()) {
      mutable_fromplayerinfo()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.fromplayerinfo());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_chatcontent()) {
      mutable_chatcontent()->::proto_ff::ChatContentInfo::MergeFrom(from.chatcontent());
    }
    if (from.has_time_tick()) {
      set_time_tick(from.time_tick());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_msgval()) {
      set_msgval(from.msgval());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCChatMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCChatMsgRsp::CopyFrom(const GCChatMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCChatMsgRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000008) != 0x00000008) return false;

  if (has_fromplayerinfo()) {
    if (!this->fromplayerinfo().IsInitialized()) return false;
  }
  if (has_chatcontent()) {
    if (!this->chatcontent().IsInitialized()) return false;
  }
  return true;
}

void GCChatMsgRsp::Swap(GCChatMsgRsp* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(fromplayerinfo_, other->fromplayerinfo_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(time_tick_, other->time_tick_);
    std::swap(ret_, other->ret_);
    std::swap(msgval_, other->msgval_);
    std::swap(right_, other->right_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCChatMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCChatMsgRsp_descriptor_;
  metadata.reflection = GCChatMsgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCSystemChatMsgNotify::kChannelFieldNumber;
const int GCSystemChatMsgNotify::kMsgTypeFieldNumber;
const int GCSystemChatMsgNotify::kPlayersFieldNumber;
const int GCSystemChatMsgNotify::kTextFieldNumber;
const int GCSystemChatMsgNotify::kParmasFieldNumber;
const int GCSystemChatMsgNotify::kContentFieldNumber;
const int GCSystemChatMsgNotify::kRumorCountFieldNumber;
const int GCSystemChatMsgNotify::kItemsFieldNumber;
#endif  // !_MSC_VER

GCSystemChatMsgNotify::GCSystemChatMsgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GCSystemChatMsgNotify::InitAsDefaultInstance() {
}

GCSystemChatMsgNotify::GCSystemChatMsgNotify(const GCSystemChatMsgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GCSystemChatMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  msgtype_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rumorcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCSystemChatMsgNotify::~GCSystemChatMsgNotify() {
  SharedDtor();
}

void GCSystemChatMsgNotify::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void GCSystemChatMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCSystemChatMsgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCSystemChatMsgNotify_descriptor_;
}

const GCSystemChatMsgNotify& GCSystemChatMsgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

GCSystemChatMsgNotify* GCSystemChatMsgNotify::default_instance_ = NULL;

GCSystemChatMsgNotify* GCSystemChatMsgNotify::New() const {
  return new GCSystemChatMsgNotify;
}

void GCSystemChatMsgNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0u;
    msgtype_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    rumorcount_ = 0u;
  }
  players_.Clear();
  text_.Clear();
  parmas_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCSystemChatMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional uint64 msgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // repeated string text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text(this->text_size() - 1).data(),
            this->text(this->text_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        if (input->ExpectTag(40)) goto parse_parmas;
        break;
      }

      // repeated uint64 parmas = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parmas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_parmas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_parmas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parmas;
        if (input->ExpectTag(50)) goto parse_content;
        break;
      }

      // optional string content = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rumorCount;
        break;
      }

      // optional uint32 rumorCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rumorCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rumorcount_)));
          set_has_rumorcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo items = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GCSystemChatMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional uint64 msgType = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msgtype(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }

  // repeated string text = 4;
  for (int i = 0; i < this->text_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->text(i).data(), this->text(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->text(i), output);
  }

  // repeated uint64 parmas = 5;
  for (int i = 0; i < this->parmas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->parmas(i), output);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->content(), output);
  }

  // optional uint32 rumorCount = 7;
  if (has_rumorcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->rumorcount(), output);
  }

  // repeated .proto_ff.ItemProtoInfo items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GCSystemChatMsgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional uint64 msgType = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msgtype(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players(i), target);
  }

  // repeated string text = 4;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text(i).data(), this->text(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->text(i), target);
  }

  // repeated uint64 parmas = 5;
  for (int i = 0; i < this->parmas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->parmas(i), target);
  }

  // optional string content = 6;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->content(), target);
  }

  // optional uint32 rumorCount = 7;
  if (has_rumorcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->rumorcount(), target);
  }

  // repeated .proto_ff.ItemProtoInfo items = 8;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GCSystemChatMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional uint64 msgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgtype());
    }

    // optional string content = 6;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional uint32 rumorCount = 7;
    if (has_rumorcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rumorcount());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated string text = 4;
  total_size += 1 * this->text_size();
  for (int i = 0; i < this->text_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->text(i));
  }

  // repeated uint64 parmas = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->parmas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->parmas(i));
    }
    total_size += 1 * this->parmas_size() + data_size;
  }

  // repeated .proto_ff.ItemProtoInfo items = 8;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCSystemChatMsgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCSystemChatMsgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCSystemChatMsgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCSystemChatMsgNotify::MergeFrom(const GCSystemChatMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  text_.MergeFrom(from.text_);
  parmas_.MergeFrom(from.parmas_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_rumorcount()) {
      set_rumorcount(from.rumorcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCSystemChatMsgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCSystemChatMsgNotify::CopyFrom(const GCSystemChatMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCSystemChatMsgNotify::IsInitialized() const {

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void GCSystemChatMsgNotify::Swap(GCSystemChatMsgNotify* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(msgtype_, other->msgtype_);
    players_.Swap(&other->players_);
    text_.Swap(&other->text_);
    parmas_.Swap(&other->parmas_);
    std::swap(content_, other->content_);
    std::swap(rumorcount_, other->rumorcount_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCSystemChatMsgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCSystemChatMsgNotify_descriptor_;
  metadata.reflection = GCSystemChatMsgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWAskOfflineMsgReq::kCharIDFieldNumber;
#endif  // !_MSC_VER

CWAskOfflineMsgReq::CWAskOfflineMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWAskOfflineMsgReq::InitAsDefaultInstance() {
}

CWAskOfflineMsgReq::CWAskOfflineMsgReq(const CWAskOfflineMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWAskOfflineMsgReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWAskOfflineMsgReq::~CWAskOfflineMsgReq() {
  SharedDtor();
}

void CWAskOfflineMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWAskOfflineMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWAskOfflineMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWAskOfflineMsgReq_descriptor_;
}

const CWAskOfflineMsgReq& CWAskOfflineMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

CWAskOfflineMsgReq* CWAskOfflineMsgReq::default_instance_ = NULL;

CWAskOfflineMsgReq* CWAskOfflineMsgReq::New() const {
  return new CWAskOfflineMsgReq;
}

void CWAskOfflineMsgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWAskOfflineMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWAskOfflineMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWAskOfflineMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWAskOfflineMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWAskOfflineMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWAskOfflineMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWAskOfflineMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWAskOfflineMsgReq::MergeFrom(const CWAskOfflineMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWAskOfflineMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWAskOfflineMsgReq::CopyFrom(const CWAskOfflineMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWAskOfflineMsgReq::IsInitialized() const {

  return true;
}

void CWAskOfflineMsgReq::Swap(CWAskOfflineMsgReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWAskOfflineMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWAskOfflineMsgReq_descriptor_;
  metadata.reflection = CWAskOfflineMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCAskOfflineMsgRsp::kMsgSizeFieldNumber;
#endif  // !_MSC_VER

WCAskOfflineMsgRsp::WCAskOfflineMsgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCAskOfflineMsgRsp::InitAsDefaultInstance() {
}

WCAskOfflineMsgRsp::WCAskOfflineMsgRsp(const WCAskOfflineMsgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCAskOfflineMsgRsp::SharedCtor() {
  _cached_size_ = 0;
  msgsize_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCAskOfflineMsgRsp::~WCAskOfflineMsgRsp() {
  SharedDtor();
}

void WCAskOfflineMsgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCAskOfflineMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCAskOfflineMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCAskOfflineMsgRsp_descriptor_;
}

const WCAskOfflineMsgRsp& WCAskOfflineMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

WCAskOfflineMsgRsp* WCAskOfflineMsgRsp::default_instance_ = NULL;

WCAskOfflineMsgRsp* WCAskOfflineMsgRsp::New() const {
  return new WCAskOfflineMsgRsp;
}

void WCAskOfflineMsgRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msgsize_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCAskOfflineMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 msgSize = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgsize_)));
          set_has_msgsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCAskOfflineMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 msgSize = 1;
  if (has_msgsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->msgsize(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCAskOfflineMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 msgSize = 1;
  if (has_msgsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->msgsize(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCAskOfflineMsgRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 msgSize = 1;
    if (has_msgsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgsize());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCAskOfflineMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCAskOfflineMsgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCAskOfflineMsgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCAskOfflineMsgRsp::MergeFrom(const WCAskOfflineMsgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msgsize()) {
      set_msgsize(from.msgsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCAskOfflineMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCAskOfflineMsgRsp::CopyFrom(const WCAskOfflineMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCAskOfflineMsgRsp::IsInitialized() const {

  return true;
}

void WCAskOfflineMsgRsp::Swap(WCAskOfflineMsgRsp* other) {
  if (other != this) {
    std::swap(msgsize_, other->msgsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCAskOfflineMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCAskOfflineMsgRsp_descriptor_;
  metadata.reflection = WCAskOfflineMsgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CWIntrvalAskOfflineMsgReq::kCharIDFieldNumber;
const int CWIntrvalAskOfflineMsgReq::kSizeFieldNumber;
#endif  // !_MSC_VER

CWIntrvalAskOfflineMsgReq::CWIntrvalAskOfflineMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CWIntrvalAskOfflineMsgReq::InitAsDefaultInstance() {
}

CWIntrvalAskOfflineMsgReq::CWIntrvalAskOfflineMsgReq(const CWIntrvalAskOfflineMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CWIntrvalAskOfflineMsgReq::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_ULONGLONG(0);
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CWIntrvalAskOfflineMsgReq::~CWIntrvalAskOfflineMsgReq() {
  SharedDtor();
}

void CWIntrvalAskOfflineMsgReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CWIntrvalAskOfflineMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CWIntrvalAskOfflineMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CWIntrvalAskOfflineMsgReq_descriptor_;
}

const CWIntrvalAskOfflineMsgReq& CWIntrvalAskOfflineMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

CWIntrvalAskOfflineMsgReq* CWIntrvalAskOfflineMsgReq::default_instance_ = NULL;

CWIntrvalAskOfflineMsgReq* CWIntrvalAskOfflineMsgReq::New() const {
  return new CWIntrvalAskOfflineMsgReq;
}

void CWIntrvalAskOfflineMsgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_ULONGLONG(0);
    size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CWIntrvalAskOfflineMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional uint32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CWIntrvalAskOfflineMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->charid(), output);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CWIntrvalAskOfflineMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->charid(), target);
  }

  // optional uint32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CWIntrvalAskOfflineMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->charid());
    }

    // optional uint32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CWIntrvalAskOfflineMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CWIntrvalAskOfflineMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CWIntrvalAskOfflineMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CWIntrvalAskOfflineMsgReq::MergeFrom(const CWIntrvalAskOfflineMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CWIntrvalAskOfflineMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CWIntrvalAskOfflineMsgReq::CopyFrom(const CWIntrvalAskOfflineMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CWIntrvalAskOfflineMsgReq::IsInitialized() const {

  return true;
}

void CWIntrvalAskOfflineMsgReq::Swap(CWIntrvalAskOfflineMsgReq* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CWIntrvalAskOfflineMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CWIntrvalAskOfflineMsgReq_descriptor_;
  metadata.reflection = CWIntrvalAskOfflineMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OfflineMsg::kPlayerInfoFieldNumber;
const int OfflineMsg::kChatContentFieldNumber;
const int OfflineMsg::kSendTimeFieldNumber;
#endif  // !_MSC_VER

OfflineMsg::OfflineMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OfflineMsg::InitAsDefaultInstance() {
  playerinfo_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
  chatcontent_ = const_cast< ::proto_ff::ChatContentInfo*>(&::proto_ff::ChatContentInfo::default_instance());
}

OfflineMsg::OfflineMsg(const OfflineMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OfflineMsg::SharedCtor() {
  _cached_size_ = 0;
  playerinfo_ = NULL;
  chatcontent_ = NULL;
  sendtime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OfflineMsg::~OfflineMsg() {
  SharedDtor();
}

void OfflineMsg::SharedDtor() {
  if (this != default_instance_) {
    delete playerinfo_;
    delete chatcontent_;
  }
}

void OfflineMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OfflineMsg_descriptor_;
}

const OfflineMsg& OfflineMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

OfflineMsg* OfflineMsg::default_instance_ = NULL;

OfflineMsg* OfflineMsg::New() const {
  return new OfflineMsg;
}

void OfflineMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerinfo()) {
      if (playerinfo_ != NULL) playerinfo_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    if (has_chatcontent()) {
      if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
    }
    sendtime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OfflineMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.RolePlayerMiniInfo playerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatContent;
        break;
      }

      // required .proto_ff.ChatContentInfo chatContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sendTime;
        break;
      }

      // optional uint64 sendTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OfflineMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.RolePlayerMiniInfo playerInfo = 1;
  if (has_playerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(), output);
  }

  // required .proto_ff.ChatContentInfo chatContent = 2;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chatcontent(), output);
  }

  // optional uint64 sendTime = 3;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->sendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OfflineMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.RolePlayerMiniInfo playerInfo = 1;
  if (has_playerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(), target);
  }

  // required .proto_ff.ChatContentInfo chatContent = 2;
  if (has_chatcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chatcontent(), target);
  }

  // optional uint64 sendTime = 3;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->sendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OfflineMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.RolePlayerMiniInfo playerInfo = 1;
    if (has_playerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerinfo());
    }

    // required .proto_ff.ChatContentInfo chatContent = 2;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatcontent());
    }

    // optional uint64 sendTime = 3;
    if (has_sendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->sendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OfflineMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OfflineMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OfflineMsg::MergeFrom(const OfflineMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerinfo()) {
      mutable_playerinfo()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.playerinfo());
    }
    if (from.has_chatcontent()) {
      mutable_chatcontent()->::proto_ff::ChatContentInfo::MergeFrom(from.chatcontent());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OfflineMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineMsg::CopyFrom(const OfflineMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_playerinfo()) {
    if (!this->playerinfo().IsInitialized()) return false;
  }
  if (has_chatcontent()) {
    if (!this->chatcontent().IsInitialized()) return false;
  }
  return true;
}

void OfflineMsg::Swap(OfflineMsg* other) {
  if (other != this) {
    std::swap(playerinfo_, other->playerinfo_);
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OfflineMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OfflineMsg_descriptor_;
  metadata.reflection = OfflineMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WCIntrvalAskOfflineMsgRsp::kOfflineMsgListFieldNumber;
#endif  // !_MSC_VER

WCIntrvalAskOfflineMsgRsp::WCIntrvalAskOfflineMsgRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WCIntrvalAskOfflineMsgRsp::InitAsDefaultInstance() {
}

WCIntrvalAskOfflineMsgRsp::WCIntrvalAskOfflineMsgRsp(const WCIntrvalAskOfflineMsgRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WCIntrvalAskOfflineMsgRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WCIntrvalAskOfflineMsgRsp::~WCIntrvalAskOfflineMsgRsp() {
  SharedDtor();
}

void WCIntrvalAskOfflineMsgRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WCIntrvalAskOfflineMsgRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WCIntrvalAskOfflineMsgRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WCIntrvalAskOfflineMsgRsp_descriptor_;
}

const WCIntrvalAskOfflineMsgRsp& WCIntrvalAskOfflineMsgRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

WCIntrvalAskOfflineMsgRsp* WCIntrvalAskOfflineMsgRsp::default_instance_ = NULL;

WCIntrvalAskOfflineMsgRsp* WCIntrvalAskOfflineMsgRsp::New() const {
  return new WCIntrvalAskOfflineMsgRsp;
}

void WCIntrvalAskOfflineMsgRsp::Clear() {
  offlinemsglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WCIntrvalAskOfflineMsgRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.OfflineMsg offlineMsgList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_offlineMsgList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_offlinemsglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_offlineMsgList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WCIntrvalAskOfflineMsgRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.OfflineMsg offlineMsgList = 1;
  for (int i = 0; i < this->offlinemsglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->offlinemsglist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WCIntrvalAskOfflineMsgRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.OfflineMsg offlineMsgList = 1;
  for (int i = 0; i < this->offlinemsglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->offlinemsglist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WCIntrvalAskOfflineMsgRsp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.OfflineMsg offlineMsgList = 1;
  total_size += 1 * this->offlinemsglist_size();
  for (int i = 0; i < this->offlinemsglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->offlinemsglist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WCIntrvalAskOfflineMsgRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WCIntrvalAskOfflineMsgRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WCIntrvalAskOfflineMsgRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WCIntrvalAskOfflineMsgRsp::MergeFrom(const WCIntrvalAskOfflineMsgRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  offlinemsglist_.MergeFrom(from.offlinemsglist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WCIntrvalAskOfflineMsgRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WCIntrvalAskOfflineMsgRsp::CopyFrom(const WCIntrvalAskOfflineMsgRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WCIntrvalAskOfflineMsgRsp::IsInitialized() const {

  for (int i = 0; i < offlinemsglist_size(); i++) {
    if (!this->offlinemsglist(i).IsInitialized()) return false;
  }
  return true;
}

void WCIntrvalAskOfflineMsgRsp::Swap(WCIntrvalAskOfflineMsgRsp* other) {
  if (other != this) {
    offlinemsglist_.Swap(&other->offlinemsglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WCIntrvalAskOfflineMsgRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WCIntrvalAskOfflineMsgRsp_descriptor_;
  metadata.reflection = WCIntrvalAskOfflineMsgRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWChatMsgReq::kChannelFieldNumber;
const int GWChatMsgReq::kChatContentFieldNumber;
const int GWChatMsgReq::kFromIdFieldNumber;
const int GWChatMsgReq::kTargetIdFieldNumber;
const int GWChatMsgReq::kMsgTypeFieldNumber;
const int GWChatMsgReq::kMsgValFieldNumber;
const int GWChatMsgReq::kCidLstFieldNumber;
const int GWChatMsgReq::kRightFieldNumber;
const int GWChatMsgReq::kCurnumFieldNumber;
#endif  // !_MSC_VER

GWChatMsgReq::GWChatMsgReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWChatMsgReq::InitAsDefaultInstance() {
  chatcontent_ = const_cast< ::proto_ff::ChatContentInfo*>(&::proto_ff::ChatContentInfo::default_instance());
}

GWChatMsgReq::GWChatMsgReq(const GWChatMsgReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWChatMsgReq::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  chatcontent_ = NULL;
  fromid_ = GOOGLE_ULONGLONG(0);
  targetid_ = GOOGLE_ULONGLONG(0);
  msgtype_ = GOOGLE_ULONGLONG(0);
  msgval_ = GOOGLE_ULONGLONG(0);
  right_ = 0;
  curnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWChatMsgReq::~GWChatMsgReq() {
  SharedDtor();
}

void GWChatMsgReq::SharedDtor() {
  if (this != default_instance_) {
    delete chatcontent_;
  }
}

void GWChatMsgReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWChatMsgReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWChatMsgReq_descriptor_;
}

const GWChatMsgReq& GWChatMsgReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

GWChatMsgReq* GWChatMsgReq::default_instance_ = NULL;

GWChatMsgReq* GWChatMsgReq::New() const {
  return new GWChatMsgReq;
}

void GWChatMsgReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    if (has_chatcontent()) {
      if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
    }
    fromid_ = GOOGLE_ULONGLONG(0);
    targetid_ = GOOGLE_ULONGLONG(0);
    msgtype_ = GOOGLE_ULONGLONG(0);
    msgval_ = GOOGLE_ULONGLONG(0);
    right_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    curnum_ = 0;
  }
  cid_lst_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWChatMsgReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CHAT_CHANNEL channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::CHAT_CHANNEL_IsValid(value)) {
            set_channel(static_cast< ::proto_ff::CHAT_CHANNEL >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_chatContent;
        break;
      }

      // required .proto_ff.ChatContentInfo chatContent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fromId;
        break;
      }

      // optional uint64 fromId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fromId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &fromid_)));
          set_has_fromid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetId;
        break;
      }

      // optional uint64 targetId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &targetid_)));
          set_has_targetid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_msgType;
        break;
      }

      // optional uint64 msgType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_msgVal;
        break;
      }

      // optional uint64 msgVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgval_)));
          set_has_msgval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cid_lst;
        break;
      }

      // repeated uint64 cid_lst = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cid_lst:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 56, input, this->mutable_cid_lst())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cid_lst())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cid_lst;
        if (input->ExpectTag(64)) goto parse_right;
        break;
      }

      // optional int32 right = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_right:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &right_)));
          set_has_right();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_curnum;
        break;
      }

      // optional int32 curnum = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curnum_)));
          set_has_curnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWChatMsgReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CHAT_CHANNEL channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // required .proto_ff.ChatContentInfo chatContent = 2;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->chatcontent(), output);
  }

  // optional uint64 fromId = 3;
  if (has_fromid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->fromid(), output);
  }

  // optional uint64 targetId = 4;
  if (has_targetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->targetid(), output);
  }

  // optional uint64 msgType = 5;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->msgtype(), output);
  }

  // optional uint64 msgVal = 6;
  if (has_msgval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->msgval(), output);
  }

  // repeated uint64 cid_lst = 7;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      7, this->cid_lst(i), output);
  }

  // optional int32 right = 8;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->right(), output);
  }

  // optional int32 curnum = 9;
  if (has_curnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->curnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWChatMsgReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CHAT_CHANNEL channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // required .proto_ff.ChatContentInfo chatContent = 2;
  if (has_chatcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->chatcontent(), target);
  }

  // optional uint64 fromId = 3;
  if (has_fromid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->fromid(), target);
  }

  // optional uint64 targetId = 4;
  if (has_targetid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->targetid(), target);
  }

  // optional uint64 msgType = 5;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->msgtype(), target);
  }

  // optional uint64 msgVal = 6;
  if (has_msgval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->msgval(), target);
  }

  // repeated uint64 cid_lst = 7;
  for (int i = 0; i < this->cid_lst_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(7, this->cid_lst(i), target);
  }

  // optional int32 right = 8;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->right(), target);
  }

  // optional int32 curnum = 9;
  if (has_curnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->curnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWChatMsgReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CHAT_CHANNEL channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // required .proto_ff.ChatContentInfo chatContent = 2;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatcontent());
    }

    // optional uint64 fromId = 3;
    if (has_fromid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->fromid());
    }

    // optional uint64 targetId = 4;
    if (has_targetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->targetid());
    }

    // optional uint64 msgType = 5;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgtype());
    }

    // optional uint64 msgVal = 6;
    if (has_msgval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgval());
    }

    // optional int32 right = 8;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->right());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 curnum = 9;
    if (has_curnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curnum());
    }

  }
  // repeated uint64 cid_lst = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->cid_lst_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cid_lst(i));
    }
    total_size += 1 * this->cid_lst_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWChatMsgReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWChatMsgReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWChatMsgReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWChatMsgReq::MergeFrom(const GWChatMsgReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  cid_lst_.MergeFrom(from.cid_lst_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_chatcontent()) {
      mutable_chatcontent()->::proto_ff::ChatContentInfo::MergeFrom(from.chatcontent());
    }
    if (from.has_fromid()) {
      set_fromid(from.fromid());
    }
    if (from.has_targetid()) {
      set_targetid(from.targetid());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_msgval()) {
      set_msgval(from.msgval());
    }
    if (from.has_right()) {
      set_right(from.right());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_curnum()) {
      set_curnum(from.curnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWChatMsgReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWChatMsgReq::CopyFrom(const GWChatMsgReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWChatMsgReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  if (has_chatcontent()) {
    if (!this->chatcontent().IsInitialized()) return false;
  }
  return true;
}

void GWChatMsgReq::Swap(GWChatMsgReq* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(chatcontent_, other->chatcontent_);
    std::swap(fromid_, other->fromid_);
    std::swap(targetid_, other->targetid_);
    std::swap(msgtype_, other->msgtype_);
    std::swap(msgval_, other->msgval_);
    cid_lst_.Swap(&other->cid_lst_);
    std::swap(right_, other->right_);
    std::swap(curnum_, other->curnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWChatMsgReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWChatMsgReq_descriptor_;
  metadata.reflection = GWChatMsgReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GWSysChatMsgNotify::kChannelFieldNumber;
const int GWSysChatMsgNotify::kMsgTypeFieldNumber;
const int GWSysChatMsgNotify::kPlayersFieldNumber;
const int GWSysChatMsgNotify::kTextFieldNumber;
const int GWSysChatMsgNotify::kParmasFieldNumber;
const int GWSysChatMsgNotify::kExtraidFieldNumber;
const int GWSysChatMsgNotify::kItemsFieldNumber;
#endif  // !_MSC_VER

GWSysChatMsgNotify::GWSysChatMsgNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GWSysChatMsgNotify::InitAsDefaultInstance() {
}

GWSysChatMsgNotify::GWSysChatMsgNotify(const GWSysChatMsgNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GWSysChatMsgNotify::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  msgtype_ = GOOGLE_ULONGLONG(0);
  extraid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GWSysChatMsgNotify::~GWSysChatMsgNotify() {
  SharedDtor();
}

void GWSysChatMsgNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GWSysChatMsgNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GWSysChatMsgNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GWSysChatMsgNotify_descriptor_;
}

const GWSysChatMsgNotify& GWSysChatMsgNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

GWSysChatMsgNotify* GWSysChatMsgNotify::default_instance_ = NULL;

GWSysChatMsgNotify* GWSysChatMsgNotify::New() const {
  return new GWSysChatMsgNotify;
}

void GWSysChatMsgNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    msgtype_ = GOOGLE_ULONGLONG(0);
    extraid_ = GOOGLE_ULONGLONG(0);
  }
  players_.Clear();
  text_.Clear();
  parmas_.Clear();
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GWSysChatMsgNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CHAT_CHANNEL channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::CHAT_CHANNEL_IsValid(value)) {
            set_channel(static_cast< ::proto_ff::CHAT_CHANNEL >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_msgType;
        break;
      }

      // optional uint64 msgType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_msgType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &msgtype_)));
          set_has_msgtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        break;
      }

      // repeated .proto_ff.RolePlayerMiniInfo players = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_players;
        if (input->ExpectTag(34)) goto parse_text;
        break;
      }

      // repeated string text = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text(this->text_size() - 1).data(),
            this->text(this->text_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_text;
        if (input->ExpectTag(40)) goto parse_parmas;
        break;
      }

      // repeated uint64 parmas = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parmas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40, input, this->mutable_parmas())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_parmas())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_parmas;
        if (input->ExpectTag(48)) goto parse_extraid;
        break;
      }

      // optional uint64 extraid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_extraid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &extraid_)));
          set_has_extraid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        break;
      }

      // repeated .proto_ff.ItemProtoInfo items = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GWSysChatMsgNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CHAT_CHANNEL channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // optional uint64 msgType = 2;
  if (has_msgtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->msgtype(), output);
  }

  // repeated .proto_ff.RolePlayerMiniInfo players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->players(i), output);
  }

  // repeated string text = 4;
  for (int i = 0; i < this->text_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->text(i).data(), this->text(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->text(i), output);
  }

  // repeated uint64 parmas = 5;
  for (int i = 0; i < this->parmas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->parmas(i), output);
  }

  // optional uint64 extraid = 6;
  if (has_extraid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->extraid(), output);
  }

  // repeated .proto_ff.ItemProtoInfo items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GWSysChatMsgNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CHAT_CHANNEL channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // optional uint64 msgType = 2;
  if (has_msgtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->msgtype(), target);
  }

  // repeated .proto_ff.RolePlayerMiniInfo players = 3;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->players(i), target);
  }

  // repeated string text = 4;
  for (int i = 0; i < this->text_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text(i).data(), this->text(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->text(i), target);
  }

  // repeated uint64 parmas = 5;
  for (int i = 0; i < this->parmas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(5, this->parmas(i), target);
  }

  // optional uint64 extraid = 6;
  if (has_extraid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->extraid(), target);
  }

  // repeated .proto_ff.ItemProtoInfo items = 7;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GWSysChatMsgNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CHAT_CHANNEL channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // optional uint64 msgType = 2;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->msgtype());
    }

    // optional uint64 extraid = 6;
    if (has_extraid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->extraid());
    }

  }
  // repeated .proto_ff.RolePlayerMiniInfo players = 3;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated string text = 4;
  total_size += 1 * this->text_size();
  for (int i = 0; i < this->text_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->text(i));
  }

  // repeated uint64 parmas = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->parmas_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->parmas(i));
    }
    total_size += 1 * this->parmas_size() + data_size;
  }

  // repeated .proto_ff.ItemProtoInfo items = 7;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GWSysChatMsgNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GWSysChatMsgNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GWSysChatMsgNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GWSysChatMsgNotify::MergeFrom(const GWSysChatMsgNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  text_.MergeFrom(from.text_);
  parmas_.MergeFrom(from.parmas_);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_msgtype()) {
      set_msgtype(from.msgtype());
    }
    if (from.has_extraid()) {
      set_extraid(from.extraid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GWSysChatMsgNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GWSysChatMsgNotify::CopyFrom(const GWSysChatMsgNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GWSysChatMsgNotify::IsInitialized() const {

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void GWSysChatMsgNotify::Swap(GWSysChatMsgNotify* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(msgtype_, other->msgtype_);
    players_.Swap(&other->players_);
    text_.Swap(&other->text_);
    parmas_.Swap(&other->parmas_);
    std::swap(extraid_, other->extraid_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GWSysChatMsgNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GWSysChatMsgNotify_descriptor_;
  metadata.reflection = GWSysChatMsgNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransChatCrossServerProto::kChannelFieldNumber;
const int TransChatCrossServerProto::kFromPlayerInfoFieldNumber;
const int TransChatCrossServerProto::kChatContentFieldNumber;
const int TransChatCrossServerProto::kToPlayersFieldNumber;
#endif  // !_MSC_VER

TransChatCrossServerProto::TransChatCrossServerProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransChatCrossServerProto::InitAsDefaultInstance() {
  fromplayerinfo_ = const_cast< ::proto_ff::RolePlayerMiniInfo*>(&::proto_ff::RolePlayerMiniInfo::default_instance());
  chatcontent_ = const_cast< ::proto_ff::ChatContentInfo*>(&::proto_ff::ChatContentInfo::default_instance());
}

TransChatCrossServerProto::TransChatCrossServerProto(const TransChatCrossServerProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransChatCrossServerProto::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0;
  fromplayerinfo_ = NULL;
  chatcontent_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransChatCrossServerProto::~TransChatCrossServerProto() {
  SharedDtor();
}

void TransChatCrossServerProto::SharedDtor() {
  if (this != default_instance_) {
    delete fromplayerinfo_;
    delete chatcontent_;
  }
}

void TransChatCrossServerProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransChatCrossServerProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransChatCrossServerProto_descriptor_;
}

const TransChatCrossServerProto& TransChatCrossServerProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Chat_2eproto();
  return *default_instance_;
}

TransChatCrossServerProto* TransChatCrossServerProto::default_instance_ = NULL;

TransChatCrossServerProto* TransChatCrossServerProto::New() const {
  return new TransChatCrossServerProto;
}

void TransChatCrossServerProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0;
    if (has_fromplayerinfo()) {
      if (fromplayerinfo_ != NULL) fromplayerinfo_->::proto_ff::RolePlayerMiniInfo::Clear();
    }
    if (has_chatcontent()) {
      if (chatcontent_ != NULL) chatcontent_->::proto_ff::ChatContentInfo::Clear();
    }
  }
  toplayers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransChatCrossServerProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.CHAT_CHANNEL channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto_ff::CHAT_CHANNEL_IsValid(value)) {
            set_channel(static_cast< ::proto_ff::CHAT_CHANNEL >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fromPlayerInfo;
        break;
      }

      // required .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fromPlayerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fromplayerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chatContent;
        break;
      }

      // required .proto_ff.ChatContentInfo chatContent = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chatContent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chatcontent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_toPlayers;
        break;
      }

      // repeated uint64 toPlayers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_toPlayers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_toplayers())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_toplayers())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_toPlayers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransChatCrossServerProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.CHAT_CHANNEL channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->channel(), output);
  }

  // required .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
  if (has_fromplayerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fromplayerinfo(), output);
  }

  // required .proto_ff.ChatContentInfo chatContent = 3;
  if (has_chatcontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->chatcontent(), output);
  }

  // repeated uint64 toPlayers = 4;
  for (int i = 0; i < this->toplayers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->toplayers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransChatCrossServerProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.CHAT_CHANNEL channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->channel(), target);
  }

  // required .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
  if (has_fromplayerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->fromplayerinfo(), target);
  }

  // required .proto_ff.ChatContentInfo chatContent = 3;
  if (has_chatcontent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->chatcontent(), target);
  }

  // repeated uint64 toPlayers = 4;
  for (int i = 0; i < this->toplayers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->toplayers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransChatCrossServerProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.CHAT_CHANNEL channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel());
    }

    // required .proto_ff.RolePlayerMiniInfo fromPlayerInfo = 2;
    if (has_fromplayerinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fromplayerinfo());
    }

    // required .proto_ff.ChatContentInfo chatContent = 3;
    if (has_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->chatcontent());
    }

  }
  // repeated uint64 toPlayers = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->toplayers_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->toplayers(i));
    }
    total_size += 1 * this->toplayers_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransChatCrossServerProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransChatCrossServerProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransChatCrossServerProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransChatCrossServerProto::MergeFrom(const TransChatCrossServerProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  toplayers_.MergeFrom(from.toplayers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_fromplayerinfo()) {
      mutable_fromplayerinfo()->::proto_ff::RolePlayerMiniInfo::MergeFrom(from.fromplayerinfo());
    }
    if (from.has_chatcontent()) {
      mutable_chatcontent()->::proto_ff::ChatContentInfo::MergeFrom(from.chatcontent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransChatCrossServerProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransChatCrossServerProto::CopyFrom(const TransChatCrossServerProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransChatCrossServerProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;

  if (has_fromplayerinfo()) {
    if (!this->fromplayerinfo().IsInitialized()) return false;
  }
  if (has_chatcontent()) {
    if (!this->chatcontent().IsInitialized()) return false;
  }
  return true;
}

void TransChatCrossServerProto::Swap(TransChatCrossServerProto* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(fromplayerinfo_, other->fromplayerinfo_);
    std::swap(chatcontent_, other->chatcontent_);
    toplayers_.Swap(&other->toplayers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransChatCrossServerProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransChatCrossServerProto_descriptor_;
  metadata.reflection = TransChatCrossServerProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
