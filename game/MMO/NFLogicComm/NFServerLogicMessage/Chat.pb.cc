// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_ChatChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ChatChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ChatChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ChatChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_ChatSpecialchat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_ChatSpecialchat_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_ChatSpecialchat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_ChatSpecialchat_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_chat_2eproto() {
  protobuf_AddDesc_chat_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "chat.proto");
  GOOGLE_CHECK(file != NULL);
  E_ChatChat_descriptor_ = file->message_type(0);
  static const int E_ChatChat_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatChat, m_chatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatChat, m_chattype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatChat, m_showtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatChat, m_chatcontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatChat, m_channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatChat, m_crossservice_),
  };
  E_ChatChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ChatChat_descriptor_,
      E_ChatChat::default_instance_,
      E_ChatChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ChatChat));
  Sheet_ChatChat_descriptor_ = file->message_type(1);
  static const int Sheet_ChatChat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ChatChat, e_chatchat_list_),
  };
  Sheet_ChatChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ChatChat_descriptor_,
      Sheet_ChatChat::default_instance_,
      Sheet_ChatChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ChatChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ChatChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ChatChat));
  E_ChatSpecialchat_descriptor_ = file->message_type(2);
  static const int E_ChatSpecialchat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatSpecialchat, m_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatSpecialchat, m_parama_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatSpecialchat, m_paramb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatSpecialchat, m_chat_id_),
  };
  E_ChatSpecialchat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_ChatSpecialchat_descriptor_,
      E_ChatSpecialchat::default_instance_,
      E_ChatSpecialchat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatSpecialchat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_ChatSpecialchat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_ChatSpecialchat));
  Sheet_ChatSpecialchat_descriptor_ = file->message_type(3);
  static const int Sheet_ChatSpecialchat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ChatSpecialchat, e_chatspecialchat_list_),
  };
  Sheet_ChatSpecialchat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_ChatSpecialchat_descriptor_,
      Sheet_ChatSpecialchat::default_instance_,
      Sheet_ChatSpecialchat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ChatSpecialchat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_ChatSpecialchat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_ChatSpecialchat));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_chat_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ChatChat_descriptor_, &E_ChatChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ChatChat_descriptor_, &Sheet_ChatChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_ChatSpecialchat_descriptor_, &E_ChatSpecialchat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_ChatSpecialchat_descriptor_, &Sheet_ChatSpecialchat::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_chat_2eproto() {
  delete E_ChatChat::default_instance_;
  delete E_ChatChat_reflection_;
  delete Sheet_ChatChat::default_instance_;
  delete Sheet_ChatChat_reflection_;
  delete E_ChatSpecialchat::default_instance_;
  delete E_ChatSpecialchat_reflection_;
  delete Sheet_ChatSpecialchat::default_instance_;
  delete Sheet_ChatSpecialchat_reflection_;
}

void protobuf_AddDesc_chat_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nchat.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\207\002\n\nE_ChatChat\022\036\n\010m_chatid\030\001 \001(\003B\014"
    "\302\377\024\010\344\274\240\351\227\273ID\022$\n\nm_chattype\030\002 \001(\005B\020\302\377\024\014\344\274"
    "\240\351\227\273\347\261\273\345\236\213\0220\n\nm_showtime\030\003 \001(\005B\034\302\377\024\030\346\264\273\345"
    "\212\250\346\217\220\347\244\272\346\230\276\347\244\272\346\227\266\351\227\264\022,\n\rm_chatcontent\030\004 "
    "\001(\tB\025\302\377\024\014\344\274\240\351\227\273\345\206\205\345\256\271\220\301\024\310\001\022#\n\tm_channel\030"
    "\005 \001(\005B\020\302\377\024\014\346\230\276\347\244\272\351\242\221\351\201\223\022.\n\016m_crossservic"
    "e\030\006 \001(\005B\026\302\377\024\022\346\230\257\345\220\246\350\267\250\346\234\215\345\271\277\346\222\255\"E\n\016Sheet"
    "_ChatChat\0223\n\017E_ChatChat_List\030\001 \003(\0132\024.pro"
    "to_ff.E_ChatChatB\004\210\301\024(\"\301\001\n\021E_ChatSpecial"
    "chat\022 \n\006m_type\030\001 \001(\005B\020\302\377\024\014\344\272\213\344\273\266\347\261\273\345\236\213\022\'"
    "\n\010m_parama\030\002 \001(\tB\025\302\377\024\r\344\272\213\344\273\266\345\217\202\346\225\260a\220\301\024<\022"
    "(\n\010m_paramb\030\003 \001(\tB\026\302\377\024\r\344\272\213\344\273\266\345\217\202\346\225\260b\220\301\024\214"
    "\001\0227\n\tm_chat_id\030\004 \001(\003B$\302\377\024 \350\247\246\345\217\221\345\205\263\350\201\224\347\232"
    "\204\350\267\221\351\251\254\347\201\257\345\206\205\345\256\271id\"Z\n\025Sheet_ChatSpecialc"
    "hat\022A\n\026E_ChatSpecialchat_List\030\001 \003(\0132\033.pr"
    "oto_ff.E_ChatSpecialchatB\004\210\301\024\024", 670);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat.proto", &protobuf_RegisterTypes);
  E_ChatChat::default_instance_ = new E_ChatChat();
  Sheet_ChatChat::default_instance_ = new Sheet_ChatChat();
  E_ChatSpecialchat::default_instance_ = new E_ChatSpecialchat();
  Sheet_ChatSpecialchat::default_instance_ = new Sheet_ChatSpecialchat();
  E_ChatChat::default_instance_->InitAsDefaultInstance();
  Sheet_ChatChat::default_instance_->InitAsDefaultInstance();
  E_ChatSpecialchat::default_instance_->InitAsDefaultInstance();
  Sheet_ChatSpecialchat::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_chat_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_chat_2eproto {
  StaticDescriptorInitializer_chat_2eproto() {
    protobuf_AddDesc_chat_2eproto();
  }
} static_descriptor_initializer_chat_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_ChatChat::kMChatidFieldNumber;
const int E_ChatChat::kMChattypeFieldNumber;
const int E_ChatChat::kMShowtimeFieldNumber;
const int E_ChatChat::kMChatcontentFieldNumber;
const int E_ChatChat::kMChannelFieldNumber;
const int E_ChatChat::kMCrossserviceFieldNumber;
#endif  // !_MSC_VER

E_ChatChat::E_ChatChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ChatChat::InitAsDefaultInstance() {
}

E_ChatChat::E_ChatChat(const E_ChatChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ChatChat::SharedCtor() {
  _cached_size_ = 0;
  m_chatid_ = GOOGLE_LONGLONG(0);
  m_chattype_ = 0;
  m_showtime_ = 0;
  m_chatcontent_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_channel_ = 0;
  m_crossservice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ChatChat::~E_ChatChat() {
  SharedDtor();
}

void E_ChatChat::SharedDtor() {
  if (m_chatcontent_ != &::google::protobuf::internal::kEmptyString) {
    delete m_chatcontent_;
  }
  if (this != default_instance_) {
  }
}

void E_ChatChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ChatChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ChatChat_descriptor_;
}

const E_ChatChat& E_ChatChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

E_ChatChat* E_ChatChat::default_instance_ = NULL;

E_ChatChat* E_ChatChat::New() const {
  return new E_ChatChat;
}

void E_ChatChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_chatid_ = GOOGLE_LONGLONG(0);
    m_chattype_ = 0;
    m_showtime_ = 0;
    if (has_m_chatcontent()) {
      if (m_chatcontent_ != &::google::protobuf::internal::kEmptyString) {
        m_chatcontent_->clear();
      }
    }
    m_channel_ = 0;
    m_crossservice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ChatChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_chatid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_chatid_)));
          set_has_m_chatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_chattype;
        break;
      }

      // optional int32 m_chattype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_chattype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_chattype_)));
          set_has_m_chattype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_showtime;
        break;
      }

      // optional int32 m_showtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_showtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_showtime_)));
          set_has_m_showtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_m_chatcontent;
        break;
      }

      // optional string m_chatcontent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_chatcontent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_chatcontent()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_chatcontent().data(), this->m_chatcontent().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_channel;
        break;
      }

      // optional int32 m_channel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_channel_)));
          set_has_m_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_crossservice;
        break;
      }

      // optional int32 m_crossservice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_crossservice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_crossservice_)));
          set_has_m_crossservice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ChatChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 m_chatid = 1;
  if (has_m_chatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_chatid(), output);
  }

  // optional int32 m_chattype = 2;
  if (has_m_chattype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_chattype(), output);
  }

  // optional int32 m_showtime = 3;
  if (has_m_showtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_showtime(), output);
  }

  // optional string m_chatcontent = 4;
  if (has_m_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_chatcontent().data(), this->m_chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->m_chatcontent(), output);
  }

  // optional int32 m_channel = 5;
  if (has_m_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_channel(), output);
  }

  // optional int32 m_crossservice = 6;
  if (has_m_crossservice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_crossservice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ChatChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 m_chatid = 1;
  if (has_m_chatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->m_chatid(), target);
  }

  // optional int32 m_chattype = 2;
  if (has_m_chattype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_chattype(), target);
  }

  // optional int32 m_showtime = 3;
  if (has_m_showtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_showtime(), target);
  }

  // optional string m_chatcontent = 4;
  if (has_m_chatcontent()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_chatcontent().data(), this->m_chatcontent().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->m_chatcontent(), target);
  }

  // optional int32 m_channel = 5;
  if (has_m_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_channel(), target);
  }

  // optional int32 m_crossservice = 6;
  if (has_m_crossservice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_crossservice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ChatChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 m_chatid = 1;
    if (has_m_chatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_chatid());
    }

    // optional int32 m_chattype = 2;
    if (has_m_chattype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_chattype());
    }

    // optional int32 m_showtime = 3;
    if (has_m_showtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_showtime());
    }

    // optional string m_chatcontent = 4;
    if (has_m_chatcontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_chatcontent());
    }

    // optional int32 m_channel = 5;
    if (has_m_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_channel());
    }

    // optional int32 m_crossservice = 6;
    if (has_m_crossservice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_crossservice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ChatChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ChatChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ChatChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ChatChat::MergeFrom(const E_ChatChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_chatid()) {
      set_m_chatid(from.m_chatid());
    }
    if (from.has_m_chattype()) {
      set_m_chattype(from.m_chattype());
    }
    if (from.has_m_showtime()) {
      set_m_showtime(from.m_showtime());
    }
    if (from.has_m_chatcontent()) {
      set_m_chatcontent(from.m_chatcontent());
    }
    if (from.has_m_channel()) {
      set_m_channel(from.m_channel());
    }
    if (from.has_m_crossservice()) {
      set_m_crossservice(from.m_crossservice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ChatChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ChatChat::CopyFrom(const E_ChatChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ChatChat::IsInitialized() const {

  return true;
}

void E_ChatChat::Swap(E_ChatChat* other) {
  if (other != this) {
    std::swap(m_chatid_, other->m_chatid_);
    std::swap(m_chattype_, other->m_chattype_);
    std::swap(m_showtime_, other->m_showtime_);
    std::swap(m_chatcontent_, other->m_chatcontent_);
    std::swap(m_channel_, other->m_channel_);
    std::swap(m_crossservice_, other->m_crossservice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ChatChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ChatChat_descriptor_;
  metadata.reflection = E_ChatChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ChatChat::kEChatChatListFieldNumber;
#endif  // !_MSC_VER

Sheet_ChatChat::Sheet_ChatChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ChatChat::InitAsDefaultInstance() {
}

Sheet_ChatChat::Sheet_ChatChat(const Sheet_ChatChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ChatChat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ChatChat::~Sheet_ChatChat() {
  SharedDtor();
}

void Sheet_ChatChat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ChatChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ChatChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ChatChat_descriptor_;
}

const Sheet_ChatChat& Sheet_ChatChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Sheet_ChatChat* Sheet_ChatChat::default_instance_ = NULL;

Sheet_ChatChat* Sheet_ChatChat::New() const {
  return new Sheet_ChatChat;
}

void Sheet_ChatChat::Clear() {
  e_chatchat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ChatChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ChatChat E_ChatChat_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ChatChat_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_chatchat_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ChatChat_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ChatChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ChatChat E_ChatChat_List = 1;
  for (int i = 0; i < this->e_chatchat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_chatchat_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ChatChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ChatChat E_ChatChat_List = 1;
  for (int i = 0; i < this->e_chatchat_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_chatchat_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ChatChat::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ChatChat E_ChatChat_List = 1;
  total_size += 1 * this->e_chatchat_list_size();
  for (int i = 0; i < this->e_chatchat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_chatchat_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ChatChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ChatChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ChatChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ChatChat::MergeFrom(const Sheet_ChatChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_chatchat_list_.MergeFrom(from.e_chatchat_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ChatChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ChatChat::CopyFrom(const Sheet_ChatChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ChatChat::IsInitialized() const {

  return true;
}

void Sheet_ChatChat::Swap(Sheet_ChatChat* other) {
  if (other != this) {
    e_chatchat_list_.Swap(&other->e_chatchat_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ChatChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ChatChat_descriptor_;
  metadata.reflection = Sheet_ChatChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_ChatSpecialchat::kMTypeFieldNumber;
const int E_ChatSpecialchat::kMParamaFieldNumber;
const int E_ChatSpecialchat::kMParambFieldNumber;
const int E_ChatSpecialchat::kMChatIdFieldNumber;
#endif  // !_MSC_VER

E_ChatSpecialchat::E_ChatSpecialchat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_ChatSpecialchat::InitAsDefaultInstance() {
}

E_ChatSpecialchat::E_ChatSpecialchat(const E_ChatSpecialchat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_ChatSpecialchat::SharedCtor() {
  _cached_size_ = 0;
  m_type_ = 0;
  m_parama_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_paramb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  m_chat_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_ChatSpecialchat::~E_ChatSpecialchat() {
  SharedDtor();
}

void E_ChatSpecialchat::SharedDtor() {
  if (m_parama_ != &::google::protobuf::internal::kEmptyString) {
    delete m_parama_;
  }
  if (m_paramb_ != &::google::protobuf::internal::kEmptyString) {
    delete m_paramb_;
  }
  if (this != default_instance_) {
  }
}

void E_ChatSpecialchat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_ChatSpecialchat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_ChatSpecialchat_descriptor_;
}

const E_ChatSpecialchat& E_ChatSpecialchat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

E_ChatSpecialchat* E_ChatSpecialchat::default_instance_ = NULL;

E_ChatSpecialchat* E_ChatSpecialchat::New() const {
  return new E_ChatSpecialchat;
}

void E_ChatSpecialchat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_type_ = 0;
    if (has_m_parama()) {
      if (m_parama_ != &::google::protobuf::internal::kEmptyString) {
        m_parama_->clear();
      }
    }
    if (has_m_paramb()) {
      if (m_paramb_ != &::google::protobuf::internal::kEmptyString) {
        m_paramb_->clear();
      }
    }
    m_chat_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_ChatSpecialchat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_m_parama;
        break;
      }

      // optional string m_parama = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_parama:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_parama()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_parama().data(), this->m_parama().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_paramb;
        break;
      }

      // optional string m_paramb = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_paramb:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_m_paramb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->m_paramb().data(), this->m_paramb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_chat_id;
        break;
      }

      // optional int64 m_chat_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_chat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_chat_id_)));
          set_has_m_chat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_ChatSpecialchat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_type(), output);
  }

  // optional string m_parama = 2;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parama().data(), this->m_parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->m_parama(), output);
  }

  // optional string m_paramb = 3;
  if (has_m_paramb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_paramb().data(), this->m_paramb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->m_paramb(), output);
  }

  // optional int64 m_chat_id = 4;
  if (has_m_chat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->m_chat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_ChatSpecialchat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_type = 1;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_type(), target);
  }

  // optional string m_parama = 2;
  if (has_m_parama()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_parama().data(), this->m_parama().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->m_parama(), target);
  }

  // optional string m_paramb = 3;
  if (has_m_paramb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->m_paramb().data(), this->m_paramb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->m_paramb(), target);
  }

  // optional int64 m_chat_id = 4;
  if (has_m_chat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->m_chat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_ChatSpecialchat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_type = 1;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

    // optional string m_parama = 2;
    if (has_m_parama()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_parama());
    }

    // optional string m_paramb = 3;
    if (has_m_paramb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->m_paramb());
    }

    // optional int64 m_chat_id = 4;
    if (has_m_chat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_chat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_ChatSpecialchat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_ChatSpecialchat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_ChatSpecialchat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_ChatSpecialchat::MergeFrom(const E_ChatSpecialchat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
    if (from.has_m_parama()) {
      set_m_parama(from.m_parama());
    }
    if (from.has_m_paramb()) {
      set_m_paramb(from.m_paramb());
    }
    if (from.has_m_chat_id()) {
      set_m_chat_id(from.m_chat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_ChatSpecialchat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_ChatSpecialchat::CopyFrom(const E_ChatSpecialchat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_ChatSpecialchat::IsInitialized() const {

  return true;
}

void E_ChatSpecialchat::Swap(E_ChatSpecialchat* other) {
  if (other != this) {
    std::swap(m_type_, other->m_type_);
    std::swap(m_parama_, other->m_parama_);
    std::swap(m_paramb_, other->m_paramb_);
    std::swap(m_chat_id_, other->m_chat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_ChatSpecialchat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_ChatSpecialchat_descriptor_;
  metadata.reflection = E_ChatSpecialchat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_ChatSpecialchat::kEChatSpecialchatListFieldNumber;
#endif  // !_MSC_VER

Sheet_ChatSpecialchat::Sheet_ChatSpecialchat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_ChatSpecialchat::InitAsDefaultInstance() {
}

Sheet_ChatSpecialchat::Sheet_ChatSpecialchat(const Sheet_ChatSpecialchat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_ChatSpecialchat::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_ChatSpecialchat::~Sheet_ChatSpecialchat() {
  SharedDtor();
}

void Sheet_ChatSpecialchat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_ChatSpecialchat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_ChatSpecialchat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_ChatSpecialchat_descriptor_;
}

const Sheet_ChatSpecialchat& Sheet_ChatSpecialchat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_chat_2eproto();
  return *default_instance_;
}

Sheet_ChatSpecialchat* Sheet_ChatSpecialchat::default_instance_ = NULL;

Sheet_ChatSpecialchat* Sheet_ChatSpecialchat::New() const {
  return new Sheet_ChatSpecialchat;
}

void Sheet_ChatSpecialchat::Clear() {
  e_chatspecialchat_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_ChatSpecialchat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_ChatSpecialchat E_ChatSpecialchat_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_ChatSpecialchat_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_chatspecialchat_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_ChatSpecialchat_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_ChatSpecialchat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_ChatSpecialchat E_ChatSpecialchat_List = 1;
  for (int i = 0; i < this->e_chatspecialchat_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_chatspecialchat_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_ChatSpecialchat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_ChatSpecialchat E_ChatSpecialchat_List = 1;
  for (int i = 0; i < this->e_chatspecialchat_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_chatspecialchat_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_ChatSpecialchat::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_ChatSpecialchat E_ChatSpecialchat_List = 1;
  total_size += 1 * this->e_chatspecialchat_list_size();
  for (int i = 0; i < this->e_chatspecialchat_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_chatspecialchat_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_ChatSpecialchat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_ChatSpecialchat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_ChatSpecialchat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_ChatSpecialchat::MergeFrom(const Sheet_ChatSpecialchat& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_chatspecialchat_list_.MergeFrom(from.e_chatspecialchat_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_ChatSpecialchat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_ChatSpecialchat::CopyFrom(const Sheet_ChatSpecialchat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_ChatSpecialchat::IsInitialized() const {

  return true;
}

void Sheet_ChatSpecialchat::Swap(Sheet_ChatSpecialchat* other) {
  if (other != this) {
    e_chatspecialchat_list_.Swap(&other->e_chatspecialchat_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_ChatSpecialchat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_ChatSpecialchat_descriptor_;
  metadata.reflection = Sheet_ChatSpecialchat_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
