// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: back.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "back.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* backback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  backback_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_backback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_backback_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_back_2eproto() {
  protobuf_AddDesc_back_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "back.proto");
  GOOGLE_CHECK(file != NULL);
  backback_descriptor_ = file->message_type(0);
  static const int backback_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, typeparam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, functionunlock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, levellimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, pboxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, boxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, backday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, costitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, costnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, pcostitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, pcostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, acostitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, acostnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, param_),
  };
  backback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      backback_descriptor_,
      backback::default_instance_,
      backback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(backback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(backback));
  Sheet_backback_descriptor_ = file->message_type(1);
  static const int Sheet_backback_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_backback, backback_list_),
  };
  Sheet_backback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_backback_descriptor_,
      Sheet_backback::default_instance_,
      Sheet_backback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_backback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_backback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_backback));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_back_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    backback_descriptor_, &backback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_backback_descriptor_, &Sheet_backback::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_back_2eproto() {
  delete backback::default_instance_;
  delete backback_reflection_;
  delete Sheet_backback::default_instance_;
  delete Sheet_backback_reflection_;
}

void protobuf_AddDesc_back_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nback.proto\022\010proto_ff\032\025yd_fieldoptions."
    "proto\"\260\005\n\010backback\022\030\n\002id\030\001 \001(\005B\014\302\377\024\010\345\224\257\344"
    "\270\200id\022\036\n\004type\030\002 \001(\005B\020\302\377\024\014\346\211\276\345\233\236\347\261\273\345\236\213\022#\n\t"
    "typeParam\030\003 \001(\005B\020\302\377\024\014\347\261\273\345\236\213\345\217\202\346\225\260\022\"\n\004nam"
    "e\030\004 \001(\tB\024\302\377\024\014\346\230\276\347\244\272\345\220\215\347\247\260\220\301\024<\022\026\n\005group\030\005"
    " \001(\005B\007\302\377\024\003\347\273\204\022.\n\016functionUnlock\030\006 \001(\005B\026\302"
    "\377\024\022\345\205\263\350\201\224\345\212\237\350\203\275\345\274\200\346\224\276\022*\n\nlevelLimit\030\007 \001("
    "\005B\026\302\377\024\022\347\255\211\347\272\247\350\246\201\346\261\202\344\270\213\351\231\220\022)\n\006PboxId\030\010 \001("
    "\003B\031\302\377\024\025\345\256\214\347\276\216\346\211\276\345\233\236\347\211\251\345\223\201box\022\"\n\005boxId\030\t "
    "\001(\003B\023\302\377\024\017\346\211\276\345\233\236\347\211\251\345\223\201box\022!\n\007backDay\030\n \001("
    "\005B\020\302\377\024\014\346\211\276\345\233\236\345\244\251\346\225\260\022-\n\ncostItemID\030\013 \001(\005B"
    "\031\302\377\024\025\346\231\256\351\200\232\346\211\276\345\233\236\346\266\210\350\200\227\347\211\251\022-\n\007costNum\030\014 "
    "\001(\005B\034\302\377\024\030\346\231\256\351\200\232\346\211\276\345\233\236\346\266\210\350\200\227\346\225\260\351\207\217\022.\n\013Pco"
    "stItemID\030\r \001(\005B\031\302\377\024\025\345\256\214\347\276\216\346\211\276\345\233\236\346\266\210\350\200\227\347\211"
    "\251\022.\n\010PcostNum\030\016 \001(\005B\034\302\377\024\030\345\256\214\347\276\216\346\211\276\345\233\236\346\266\210"
    "\350\200\227\346\225\260\351\207\217\022.\n\013AcostItemID\030\017 \001(\005B\031\302\377\024\025\351\242\235\345"
    "\244\226\346\211\276\345\233\236\346\266\210\350\200\227\347\211\251\022.\n\010AcostNum\030\020 \001(\005B\034\302\377\024"
    "\030\351\242\235\345\244\226\346\211\276\345\233\236\345\260\217\345\217\267\346\225\260\351\207\217\022\035\n\005param\030\021 \003(\005"
    "B\016\302\377\024\006\345\217\202\346\225\260\210\301\024\002\"A\n\016Sheet_backback\022/\n\rba"
    "ckback_List\030\001 \003(\0132\022.proto_ff.backbackB\004\210"
    "\301\024\024", 803);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "back.proto", &protobuf_RegisterTypes);
  backback::default_instance_ = new backback();
  Sheet_backback::default_instance_ = new Sheet_backback();
  backback::default_instance_->InitAsDefaultInstance();
  Sheet_backback::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_back_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_back_2eproto {
  StaticDescriptorInitializer_back_2eproto() {
    protobuf_AddDesc_back_2eproto();
  }
} static_descriptor_initializer_back_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int backback::kIdFieldNumber;
const int backback::kTypeFieldNumber;
const int backback::kTypeParamFieldNumber;
const int backback::kNameFieldNumber;
const int backback::kGroupFieldNumber;
const int backback::kFunctionUnlockFieldNumber;
const int backback::kLevelLimitFieldNumber;
const int backback::kPboxIdFieldNumber;
const int backback::kBoxIdFieldNumber;
const int backback::kBackDayFieldNumber;
const int backback::kCostItemIDFieldNumber;
const int backback::kCostNumFieldNumber;
const int backback::kPcostItemIDFieldNumber;
const int backback::kPcostNumFieldNumber;
const int backback::kAcostItemIDFieldNumber;
const int backback::kAcostNumFieldNumber;
const int backback::kParamFieldNumber;
#endif  // !_MSC_VER

backback::backback()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void backback::InitAsDefaultInstance() {
}

backback::backback(const backback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void backback::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  type_ = 0;
  typeparam_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_ = 0;
  functionunlock_ = 0;
  levellimit_ = 0;
  pboxid_ = GOOGLE_LONGLONG(0);
  boxid_ = GOOGLE_LONGLONG(0);
  backday_ = 0;
  costitemid_ = 0;
  costnum_ = 0;
  pcostitemid_ = 0;
  pcostnum_ = 0;
  acostitemid_ = 0;
  acostnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

backback::~backback() {
  SharedDtor();
}

void backback::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void backback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* backback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return backback_descriptor_;
}

const backback& backback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_back_2eproto();
  return *default_instance_;
}

backback* backback::default_instance_ = NULL;

backback* backback::New() const {
  return new backback;
}

void backback::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    type_ = 0;
    typeparam_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    group_ = 0;
    functionunlock_ = 0;
    levellimit_ = 0;
    pboxid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    boxid_ = GOOGLE_LONGLONG(0);
    backday_ = 0;
    costitemid_ = 0;
    costnum_ = 0;
    pcostitemid_ = 0;
    pcostnum_ = 0;
    acostitemid_ = 0;
    acostnum_ = 0;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool backback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_typeParam;
        break;
      }

      // optional int32 typeParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_typeParam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeparam_)));
          set_has_typeparam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_group;
        break;
      }

      // optional int32 group = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_functionUnlock;
        break;
      }

      // optional int32 functionUnlock = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_functionUnlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &functionunlock_)));
          set_has_functionunlock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_levelLimit;
        break;
      }

      // optional int32 levelLimit = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levellimit_)));
          set_has_levellimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_PboxId;
        break;
      }

      // optional int64 PboxId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PboxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &pboxid_)));
          set_has_pboxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_boxId;
        break;
      }

      // optional int64 boxId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boxId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &boxid_)));
          set_has_boxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_backDay;
        break;
      }

      // optional int32 backDay = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backday_)));
          set_has_backday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_costItemID;
        break;
      }

      // optional int32 costItemID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costitemid_)));
          set_has_costitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_costNum;
        break;
      }

      // optional int32 costNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costnum_)));
          set_has_costnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_PcostItemID;
        break;
      }

      // optional int32 PcostItemID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PcostItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pcostitemid_)));
          set_has_pcostitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_PcostNum;
        break;
      }

      // optional int32 PcostNum = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PcostNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pcostnum_)));
          set_has_pcostnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_AcostItemID;
        break;
      }

      // optional int32 AcostItemID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AcostItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acostitemid_)));
          set_has_acostitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_AcostNum;
        break;
      }

      // optional int32 AcostNum = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AcostNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acostnum_)));
          set_has_acostnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_param;
        break;
      }

      // repeated int32 param = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 136, input, this->mutable_param())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_param())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void backback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int32 typeParam = 3;
  if (has_typeparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->typeparam(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 group = 5;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->group(), output);
  }

  // optional int32 functionUnlock = 6;
  if (has_functionunlock()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->functionunlock(), output);
  }

  // optional int32 levelLimit = 7;
  if (has_levellimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->levellimit(), output);
  }

  // optional int64 PboxId = 8;
  if (has_pboxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->pboxid(), output);
  }

  // optional int64 boxId = 9;
  if (has_boxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->boxid(), output);
  }

  // optional int32 backDay = 10;
  if (has_backday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->backday(), output);
  }

  // optional int32 costItemID = 11;
  if (has_costitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->costitemid(), output);
  }

  // optional int32 costNum = 12;
  if (has_costnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->costnum(), output);
  }

  // optional int32 PcostItemID = 13;
  if (has_pcostitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pcostitemid(), output);
  }

  // optional int32 PcostNum = 14;
  if (has_pcostnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->pcostnum(), output);
  }

  // optional int32 AcostItemID = 15;
  if (has_acostitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->acostitemid(), output);
  }

  // optional int32 AcostNum = 16;
  if (has_acostnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->acostnum(), output);
  }

  // repeated int32 param = 17;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      17, this->param(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* backback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int32 typeParam = 3;
  if (has_typeparam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->typeparam(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 group = 5;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->group(), target);
  }

  // optional int32 functionUnlock = 6;
  if (has_functionunlock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->functionunlock(), target);
  }

  // optional int32 levelLimit = 7;
  if (has_levellimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->levellimit(), target);
  }

  // optional int64 PboxId = 8;
  if (has_pboxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->pboxid(), target);
  }

  // optional int64 boxId = 9;
  if (has_boxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->boxid(), target);
  }

  // optional int32 backDay = 10;
  if (has_backday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->backday(), target);
  }

  // optional int32 costItemID = 11;
  if (has_costitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->costitemid(), target);
  }

  // optional int32 costNum = 12;
  if (has_costnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->costnum(), target);
  }

  // optional int32 PcostItemID = 13;
  if (has_pcostitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pcostitemid(), target);
  }

  // optional int32 PcostNum = 14;
  if (has_pcostnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->pcostnum(), target);
  }

  // optional int32 AcostItemID = 15;
  if (has_acostitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->acostitemid(), target);
  }

  // optional int32 AcostNum = 16;
  if (has_acostnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->acostnum(), target);
  }

  // repeated int32 param = 17;
  for (int i = 0; i < this->param_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(17, this->param(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int backback::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 typeParam = 3;
    if (has_typeparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->typeparam());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 group = 5;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 functionUnlock = 6;
    if (has_functionunlock()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->functionunlock());
    }

    // optional int32 levelLimit = 7;
    if (has_levellimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levellimit());
    }

    // optional int64 PboxId = 8;
    if (has_pboxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->pboxid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 boxId = 9;
    if (has_boxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->boxid());
    }

    // optional int32 backDay = 10;
    if (has_backday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backday());
    }

    // optional int32 costItemID = 11;
    if (has_costitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costitemid());
    }

    // optional int32 costNum = 12;
    if (has_costnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costnum());
    }

    // optional int32 PcostItemID = 13;
    if (has_pcostitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pcostitemid());
    }

    // optional int32 PcostNum = 14;
    if (has_pcostnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pcostnum());
    }

    // optional int32 AcostItemID = 15;
    if (has_acostitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acostitemid());
    }

    // optional int32 AcostNum = 16;
    if (has_acostnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acostnum());
    }

  }
  // repeated int32 param = 17;
  {
    int data_size = 0;
    for (int i = 0; i < this->param_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->param(i));
    }
    total_size += 2 * this->param_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void backback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const backback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const backback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void backback::MergeFrom(const backback& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_typeparam()) {
      set_typeparam(from.typeparam());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_functionunlock()) {
      set_functionunlock(from.functionunlock());
    }
    if (from.has_levellimit()) {
      set_levellimit(from.levellimit());
    }
    if (from.has_pboxid()) {
      set_pboxid(from.pboxid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boxid()) {
      set_boxid(from.boxid());
    }
    if (from.has_backday()) {
      set_backday(from.backday());
    }
    if (from.has_costitemid()) {
      set_costitemid(from.costitemid());
    }
    if (from.has_costnum()) {
      set_costnum(from.costnum());
    }
    if (from.has_pcostitemid()) {
      set_pcostitemid(from.pcostitemid());
    }
    if (from.has_pcostnum()) {
      set_pcostnum(from.pcostnum());
    }
    if (from.has_acostitemid()) {
      set_acostitemid(from.acostitemid());
    }
    if (from.has_acostnum()) {
      set_acostnum(from.acostnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void backback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void backback::CopyFrom(const backback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool backback::IsInitialized() const {

  return true;
}

void backback::Swap(backback* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(typeparam_, other->typeparam_);
    std::swap(name_, other->name_);
    std::swap(group_, other->group_);
    std::swap(functionunlock_, other->functionunlock_);
    std::swap(levellimit_, other->levellimit_);
    std::swap(pboxid_, other->pboxid_);
    std::swap(boxid_, other->boxid_);
    std::swap(backday_, other->backday_);
    std::swap(costitemid_, other->costitemid_);
    std::swap(costnum_, other->costnum_);
    std::swap(pcostitemid_, other->pcostitemid_);
    std::swap(pcostnum_, other->pcostnum_);
    std::swap(acostitemid_, other->acostitemid_);
    std::swap(acostnum_, other->acostnum_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata backback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = backback_descriptor_;
  metadata.reflection = backback_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_backback::kBackbackListFieldNumber;
#endif  // !_MSC_VER

Sheet_backback::Sheet_backback()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_backback::InitAsDefaultInstance() {
}

Sheet_backback::Sheet_backback(const Sheet_backback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_backback::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_backback::~Sheet_backback() {
  SharedDtor();
}

void Sheet_backback::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_backback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_backback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_backback_descriptor_;
}

const Sheet_backback& Sheet_backback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_back_2eproto();
  return *default_instance_;
}

Sheet_backback* Sheet_backback::default_instance_ = NULL;

Sheet_backback* Sheet_backback::New() const {
  return new Sheet_backback;
}

void Sheet_backback::Clear() {
  backback_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_backback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.backback backback_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_backback_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_backback_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_backback_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_backback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.backback backback_List = 1;
  for (int i = 0; i < this->backback_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->backback_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_backback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.backback backback_List = 1;
  for (int i = 0; i < this->backback_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->backback_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_backback::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.backback backback_List = 1;
  total_size += 1 * this->backback_list_size();
  for (int i = 0; i < this->backback_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->backback_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_backback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_backback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_backback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_backback::MergeFrom(const Sheet_backback& from) {
  GOOGLE_CHECK_NE(&from, this);
  backback_list_.MergeFrom(from.backback_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_backback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_backback::CopyFrom(const Sheet_backback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_backback::IsInitialized() const {

  return true;
}

void Sheet_backback::Swap(Sheet_backback* other) {
  if (other != this) {
    backback_list_.Swap(&other->backback_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_backback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_backback_descriptor_;
  metadata.reflection = Sheet_backback_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
