// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: E_Cloudpeak.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "E_Cloudpeak.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* E_CloudpeakRankrewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloudpeakRankrewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloudpeakRankrewards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloudpeakRankrewards_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloudpeakConstantBuffDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloudpeakConstantBuffDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloudpeakConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloudpeakConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloudpeakConstant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloudpeakConstant_reflection_ = NULL;
const ::google::protobuf::Descriptor* E_CloudpeakExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  E_CloudpeakExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_CloudpeakExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_CloudpeakExp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_E_5fCloudpeak_2eproto() {
  protobuf_AddDesc_E_5fCloudpeak_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "E_Cloudpeak.proto");
  GOOGLE_CHECK(file != NULL);
  E_CloudpeakRankrewards_descriptor_ = file->message_type(0);
  static const int E_CloudpeakRankrewards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakRankrewards, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakRankrewards, m_rewarditem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakRankrewards, m_itemnum_),
  };
  E_CloudpeakRankrewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloudpeakRankrewards_descriptor_,
      E_CloudpeakRankrewards::default_instance_,
      E_CloudpeakRankrewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakRankrewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakRankrewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloudpeakRankrewards));
  Sheet_CloudpeakRankrewards_descriptor_ = file->message_type(1);
  static const int Sheet_CloudpeakRankrewards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloudpeakRankrewards, e_cloudpeakrankrewards_list_),
  };
  Sheet_CloudpeakRankrewards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloudpeakRankrewards_descriptor_,
      Sheet_CloudpeakRankrewards::default_instance_,
      Sheet_CloudpeakRankrewards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloudpeakRankrewards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloudpeakRankrewards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloudpeakRankrewards));
  E_CloudpeakConstantBuffDesc_descriptor_ = file->message_type(2);
  static const int E_CloudpeakConstantBuffDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstantBuffDesc, m_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstantBuffDesc, m_type_),
  };
  E_CloudpeakConstantBuffDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloudpeakConstantBuffDesc_descriptor_,
      E_CloudpeakConstantBuffDesc::default_instance_,
      E_CloudpeakConstantBuffDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstantBuffDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstantBuffDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloudpeakConstantBuffDesc));
  E_CloudpeakConstant_descriptor_ = file->message_type(3);
  static const int E_CloudpeakConstant_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_revivalbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_refresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_victoryreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_failurereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_round_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_roundtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_initialscoring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_getscoring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_assistscoring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_matchtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_matchentry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_playersmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_rebotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_rebotcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_actid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_revivalpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_buff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, m_rebot_id_),
  };
  E_CloudpeakConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloudpeakConstant_descriptor_,
      E_CloudpeakConstant::default_instance_,
      E_CloudpeakConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloudpeakConstant));
  Sheet_CloudpeakConstant_descriptor_ = file->message_type(4);
  static const int Sheet_CloudpeakConstant_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloudpeakConstant, e_cloudpeakconstant_list_),
  };
  Sheet_CloudpeakConstant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloudpeakConstant_descriptor_,
      Sheet_CloudpeakConstant::default_instance_,
      Sheet_CloudpeakConstant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloudpeakConstant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloudpeakConstant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloudpeakConstant));
  E_CloudpeakExp_descriptor_ = file->message_type(5);
  static const int E_CloudpeakExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakExp, m_lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakExp, m_getexp_),
  };
  E_CloudpeakExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      E_CloudpeakExp_descriptor_,
      E_CloudpeakExp::default_instance_,
      E_CloudpeakExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(E_CloudpeakExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(E_CloudpeakExp));
  Sheet_CloudpeakExp_descriptor_ = file->message_type(6);
  static const int Sheet_CloudpeakExp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloudpeakExp, e_cloudpeakexp_list_),
  };
  Sheet_CloudpeakExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_CloudpeakExp_descriptor_,
      Sheet_CloudpeakExp::default_instance_,
      Sheet_CloudpeakExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloudpeakExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_CloudpeakExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_CloudpeakExp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_E_5fCloudpeak_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloudpeakRankrewards_descriptor_, &E_CloudpeakRankrewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloudpeakRankrewards_descriptor_, &Sheet_CloudpeakRankrewards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloudpeakConstantBuffDesc_descriptor_, &E_CloudpeakConstantBuffDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloudpeakConstant_descriptor_, &E_CloudpeakConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloudpeakConstant_descriptor_, &Sheet_CloudpeakConstant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    E_CloudpeakExp_descriptor_, &E_CloudpeakExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_CloudpeakExp_descriptor_, &Sheet_CloudpeakExp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_E_5fCloudpeak_2eproto() {
  delete E_CloudpeakRankrewards::default_instance_;
  delete E_CloudpeakRankrewards_reflection_;
  delete Sheet_CloudpeakRankrewards::default_instance_;
  delete Sheet_CloudpeakRankrewards_reflection_;
  delete E_CloudpeakConstantBuffDesc::default_instance_;
  delete E_CloudpeakConstantBuffDesc_reflection_;
  delete E_CloudpeakConstant::default_instance_;
  delete E_CloudpeakConstant_reflection_;
  delete Sheet_CloudpeakConstant::default_instance_;
  delete Sheet_CloudpeakConstant_reflection_;
  delete E_CloudpeakExp::default_instance_;
  delete E_CloudpeakExp_reflection_;
  delete Sheet_CloudpeakExp::default_instance_;
  delete Sheet_CloudpeakExp_reflection_;
}

void protobuf_AddDesc_E_5fCloudpeak_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021E_Cloudpeak.proto\022\010proto_ff\032\025yd_fieldo"
    "ptions.proto\"\201\001\n\026E_CloudpeakRankrewards\022"
    "\032\n\004m_id\030\001 \001(\005B\014\302\377\024\010\345\224\257\344\270\200id\022&\n\014m_rewardI"
    "tem\030\002 \001(\005B\020\302\377\024\014\345\245\226\345\212\261\351\201\223\345\205\267\022#\n\tm_itemNum"
    "\030\003 \001(\003B\020\302\377\024\014\351\201\223\345\205\267\346\225\260\351\207\217\"i\n\032Sheet_Cloudp"
    "eakRankrewards\022K\n\033E_CloudpeakRankrewards"
    "_List\030\001 \003(\0132 .proto_ff.E_CloudpeakRankre"
    "wardsB\004\210\301\024 \"Y\n\033E_CloudpeakConstantBuffDe"
    "sc\022\036\n\nm_position\030\001 \001(\005B\n\302\377\024\006\344\275\215\347\275\256\022\032\n\006m_"
    "type\030\002 \001(\005B\n\302\377\024\006\347\261\273\345\236\213\"\347\006\n\023E_CloudpeakCo"
    "nstant\022\024\n\004m_id\030\001 \001(\005B\006\302\377\024\002id\022%\n\rm_reviva"
    "lBuff\030\002 \001(\005B\016\302\377\024\n\345\244\215\346\264\273buff\022\'\n\tm_refresh"
    "\030\003 \001(\005B\024\302\377\024\020buff\345\210\267\346\226\260\346\227\266\351\227\264\022/\n\017m_victor"
    "yReward\030\004 \001(\005B\026\302\377\024\022\351\230\265\350\220\245\350\203\234\345\210\251\345\245\226\345\212\261\022/\n"
    "\017m_failureReward\030\005 \001(\005B\026\302\377\024\022\351\230\265\350\220\245\345\244\261\350\264\245"
    "\345\245\226\345\212\261\022!\n\007m_round\030\006 \001(\005B\020\302\377\024\014\346\257\224\350\265\233\350\275\256\346\225"
    "\260\022+\n\013m_roundTime\030\007 \001(\005B\026\302\377\024\022\346\257\217\350\275\256\346\214\201\347\273\255"
    "\346\227\266\351\227\264\022*\n\020m_initialScoring\030\010 \001(\005B\020\302\377\024\014\345\210"
    "\235\345\247\213\347\247\257\345\210\206\022&\n\014m_getscoring\030\t \001(\005B\020\302\377\024\014\350\216"
    "\267\345\276\227\347\247\257\345\210\206\022)\n\017m_assistScoring\030\n \001(\005B\020\302\377\024"
    "\014\345\212\251\346\224\273\347\247\257\345\210\206\022%\n\013m_matchTime\030\013 \001(\005B\020\302\377\024\014"
    "\345\214\271\351\205\215\346\227\266\351\227\264\0222\n\014m_matchEntry\030\014 \001(\005B\034\302\377\024\030"
    "\345\214\271\351\205\215\345\234\260\345\233\276\345\207\272\347\224\237\344\275\215\347\275\256\022!\n\007m_mapId\030\r \001("
    "\003B\020\302\377\024\014\346\211\200\345\234\250\345\234\260\345\233\276\0222\n\014m_playersMax\030\016 \001("
    "\005B\034\302\377\024\030\346\257\217\344\270\252\346\210\277\351\227\264\346\234\200\345\244\232\344\272\272\346\225\260\022\"\n\tm_reb"
    "otId\030\017 \001(\005B\017\302\377\024\013\346\234\272\345\231\250\344\272\272id\022)\n\014m_rebotCo"
    "unt\030\020 \001(\005B\023\302\377\024\017\346\234\272\345\231\250\344\272\272\346\225\260\351\207\217\022\035\n\007m_actI"
    "d\030\021 \001(\005B\014\302\377\024\010\346\264\273\345\212\250ID\022)\n\016m_revivalPoint\030"
    "\022 \003(\005B\021\302\377\024\t\345\244\215\346\264\273\347\202\271\210\301\024\010\022E\n\006m_buff\030\023 \003(\013"
    "2%.proto_ff.E_CloudpeakConstantBuffDescB"
    "\016\302\377\024\006\345\242\236\347\233\212\210\301\024\010\022\'\n\nm_rebot_id\030\024 \003(\005B\023\302\377\024"
    "\013\346\234\272\345\231\250\344\272\272id\210\301\024\n\"a\n\027Sheet_CloudpeakConst"
    "ant\022F\n\030E_CloudpeakConstant_List\030\001 \003(\0132\035."
    "proto_ff.E_CloudpeakConstantB\005\210\301\024\200\002\"N\n\016E"
    "_CloudpeakExp\022\030\n\004m_lv\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022"
    "\"\n\010m_getExp\030\002 \001(\005B\020\302\377\024\014\346\264\273\345\212\250\347\273\217\351\252\214\"R\n\022S"
    "heet_CloudpeakExp\022<\n\023E_CloudpeakExp_List"
    "\030\001 \003(\0132\030.proto_ff.E_CloudpeakExpB\005\210\301\024\200\004", 1519);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "E_Cloudpeak.proto", &protobuf_RegisterTypes);
  E_CloudpeakRankrewards::default_instance_ = new E_CloudpeakRankrewards();
  Sheet_CloudpeakRankrewards::default_instance_ = new Sheet_CloudpeakRankrewards();
  E_CloudpeakConstantBuffDesc::default_instance_ = new E_CloudpeakConstantBuffDesc();
  E_CloudpeakConstant::default_instance_ = new E_CloudpeakConstant();
  Sheet_CloudpeakConstant::default_instance_ = new Sheet_CloudpeakConstant();
  E_CloudpeakExp::default_instance_ = new E_CloudpeakExp();
  Sheet_CloudpeakExp::default_instance_ = new Sheet_CloudpeakExp();
  E_CloudpeakRankrewards::default_instance_->InitAsDefaultInstance();
  Sheet_CloudpeakRankrewards::default_instance_->InitAsDefaultInstance();
  E_CloudpeakConstantBuffDesc::default_instance_->InitAsDefaultInstance();
  E_CloudpeakConstant::default_instance_->InitAsDefaultInstance();
  Sheet_CloudpeakConstant::default_instance_->InitAsDefaultInstance();
  E_CloudpeakExp::default_instance_->InitAsDefaultInstance();
  Sheet_CloudpeakExp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_E_5fCloudpeak_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_E_5fCloudpeak_2eproto {
  StaticDescriptorInitializer_E_5fCloudpeak_2eproto() {
    protobuf_AddDesc_E_5fCloudpeak_2eproto();
  }
} static_descriptor_initializer_E_5fCloudpeak_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int E_CloudpeakRankrewards::kMIdFieldNumber;
const int E_CloudpeakRankrewards::kMRewardItemFieldNumber;
const int E_CloudpeakRankrewards::kMItemNumFieldNumber;
#endif  // !_MSC_VER

E_CloudpeakRankrewards::E_CloudpeakRankrewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloudpeakRankrewards::InitAsDefaultInstance() {
}

E_CloudpeakRankrewards::E_CloudpeakRankrewards(const E_CloudpeakRankrewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloudpeakRankrewards::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_rewarditem_ = 0;
  m_itemnum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloudpeakRankrewards::~E_CloudpeakRankrewards() {
  SharedDtor();
}

void E_CloudpeakRankrewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloudpeakRankrewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloudpeakRankrewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloudpeakRankrewards_descriptor_;
}

const E_CloudpeakRankrewards& E_CloudpeakRankrewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloudpeak_2eproto();
  return *default_instance_;
}

E_CloudpeakRankrewards* E_CloudpeakRankrewards::default_instance_ = NULL;

E_CloudpeakRankrewards* E_CloudpeakRankrewards::New() const {
  return new E_CloudpeakRankrewards;
}

void E_CloudpeakRankrewards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_rewarditem_ = 0;
    m_itemnum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloudpeakRankrewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_rewardItem;
        break;
      }

      // optional int32 m_rewardItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rewardItem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rewarditem_)));
          set_has_m_rewarditem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_itemNum;
        break;
      }

      // optional int64 m_itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_itemnum_)));
          set_has_m_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloudpeakRankrewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_rewardItem = 2;
  if (has_m_rewarditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_rewarditem(), output);
  }

  // optional int64 m_itemNum = 3;
  if (has_m_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->m_itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloudpeakRankrewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_rewardItem = 2;
  if (has_m_rewarditem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_rewarditem(), target);
  }

  // optional int64 m_itemNum = 3;
  if (has_m_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->m_itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloudpeakRankrewards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_rewardItem = 2;
    if (has_m_rewarditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rewarditem());
    }

    // optional int64 m_itemNum = 3;
    if (has_m_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloudpeakRankrewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloudpeakRankrewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloudpeakRankrewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloudpeakRankrewards::MergeFrom(const E_CloudpeakRankrewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_rewarditem()) {
      set_m_rewarditem(from.m_rewarditem());
    }
    if (from.has_m_itemnum()) {
      set_m_itemnum(from.m_itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloudpeakRankrewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloudpeakRankrewards::CopyFrom(const E_CloudpeakRankrewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloudpeakRankrewards::IsInitialized() const {

  return true;
}

void E_CloudpeakRankrewards::Swap(E_CloudpeakRankrewards* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_rewarditem_, other->m_rewarditem_);
    std::swap(m_itemnum_, other->m_itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloudpeakRankrewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloudpeakRankrewards_descriptor_;
  metadata.reflection = E_CloudpeakRankrewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloudpeakRankrewards::kECloudpeakRankrewardsListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloudpeakRankrewards::Sheet_CloudpeakRankrewards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloudpeakRankrewards::InitAsDefaultInstance() {
}

Sheet_CloudpeakRankrewards::Sheet_CloudpeakRankrewards(const Sheet_CloudpeakRankrewards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloudpeakRankrewards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloudpeakRankrewards::~Sheet_CloudpeakRankrewards() {
  SharedDtor();
}

void Sheet_CloudpeakRankrewards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloudpeakRankrewards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloudpeakRankrewards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloudpeakRankrewards_descriptor_;
}

const Sheet_CloudpeakRankrewards& Sheet_CloudpeakRankrewards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloudpeak_2eproto();
  return *default_instance_;
}

Sheet_CloudpeakRankrewards* Sheet_CloudpeakRankrewards::default_instance_ = NULL;

Sheet_CloudpeakRankrewards* Sheet_CloudpeakRankrewards::New() const {
  return new Sheet_CloudpeakRankrewards;
}

void Sheet_CloudpeakRankrewards::Clear() {
  e_cloudpeakrankrewards_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloudpeakRankrewards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloudpeakRankrewards E_CloudpeakRankrewards_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloudpeakRankrewards_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloudpeakrankrewards_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloudpeakRankrewards_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloudpeakRankrewards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloudpeakRankrewards E_CloudpeakRankrewards_List = 1;
  for (int i = 0; i < this->e_cloudpeakrankrewards_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloudpeakrankrewards_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloudpeakRankrewards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloudpeakRankrewards E_CloudpeakRankrewards_List = 1;
  for (int i = 0; i < this->e_cloudpeakrankrewards_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloudpeakrankrewards_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloudpeakRankrewards::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloudpeakRankrewards E_CloudpeakRankrewards_List = 1;
  total_size += 1 * this->e_cloudpeakrankrewards_list_size();
  for (int i = 0; i < this->e_cloudpeakrankrewards_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloudpeakrankrewards_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloudpeakRankrewards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloudpeakRankrewards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloudpeakRankrewards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloudpeakRankrewards::MergeFrom(const Sheet_CloudpeakRankrewards& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloudpeakrankrewards_list_.MergeFrom(from.e_cloudpeakrankrewards_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloudpeakRankrewards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloudpeakRankrewards::CopyFrom(const Sheet_CloudpeakRankrewards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloudpeakRankrewards::IsInitialized() const {

  return true;
}

void Sheet_CloudpeakRankrewards::Swap(Sheet_CloudpeakRankrewards* other) {
  if (other != this) {
    e_cloudpeakrankrewards_list_.Swap(&other->e_cloudpeakrankrewards_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloudpeakRankrewards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloudpeakRankrewards_descriptor_;
  metadata.reflection = Sheet_CloudpeakRankrewards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloudpeakConstantBuffDesc::kMPositionFieldNumber;
const int E_CloudpeakConstantBuffDesc::kMTypeFieldNumber;
#endif  // !_MSC_VER

E_CloudpeakConstantBuffDesc::E_CloudpeakConstantBuffDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloudpeakConstantBuffDesc::InitAsDefaultInstance() {
}

E_CloudpeakConstantBuffDesc::E_CloudpeakConstantBuffDesc(const E_CloudpeakConstantBuffDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloudpeakConstantBuffDesc::SharedCtor() {
  _cached_size_ = 0;
  m_position_ = 0;
  m_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloudpeakConstantBuffDesc::~E_CloudpeakConstantBuffDesc() {
  SharedDtor();
}

void E_CloudpeakConstantBuffDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloudpeakConstantBuffDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloudpeakConstantBuffDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloudpeakConstantBuffDesc_descriptor_;
}

const E_CloudpeakConstantBuffDesc& E_CloudpeakConstantBuffDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloudpeak_2eproto();
  return *default_instance_;
}

E_CloudpeakConstantBuffDesc* E_CloudpeakConstantBuffDesc::default_instance_ = NULL;

E_CloudpeakConstantBuffDesc* E_CloudpeakConstantBuffDesc::New() const {
  return new E_CloudpeakConstantBuffDesc;
}

void E_CloudpeakConstantBuffDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_position_ = 0;
    m_type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloudpeakConstantBuffDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_position_)));
          set_has_m_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_type;
        break;
      }

      // optional int32 m_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_type_)));
          set_has_m_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloudpeakConstantBuffDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_position = 1;
  if (has_m_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_position(), output);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloudpeakConstantBuffDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_position = 1;
  if (has_m_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_position(), target);
  }

  // optional int32 m_type = 2;
  if (has_m_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloudpeakConstantBuffDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_position = 1;
    if (has_m_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_position());
    }

    // optional int32 m_type = 2;
    if (has_m_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloudpeakConstantBuffDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloudpeakConstantBuffDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloudpeakConstantBuffDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloudpeakConstantBuffDesc::MergeFrom(const E_CloudpeakConstantBuffDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_position()) {
      set_m_position(from.m_position());
    }
    if (from.has_m_type()) {
      set_m_type(from.m_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloudpeakConstantBuffDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloudpeakConstantBuffDesc::CopyFrom(const E_CloudpeakConstantBuffDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloudpeakConstantBuffDesc::IsInitialized() const {

  return true;
}

void E_CloudpeakConstantBuffDesc::Swap(E_CloudpeakConstantBuffDesc* other) {
  if (other != this) {
    std::swap(m_position_, other->m_position_);
    std::swap(m_type_, other->m_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloudpeakConstantBuffDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloudpeakConstantBuffDesc_descriptor_;
  metadata.reflection = E_CloudpeakConstantBuffDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloudpeakConstant::kMIdFieldNumber;
const int E_CloudpeakConstant::kMRevivalBuffFieldNumber;
const int E_CloudpeakConstant::kMRefreshFieldNumber;
const int E_CloudpeakConstant::kMVictoryRewardFieldNumber;
const int E_CloudpeakConstant::kMFailureRewardFieldNumber;
const int E_CloudpeakConstant::kMRoundFieldNumber;
const int E_CloudpeakConstant::kMRoundTimeFieldNumber;
const int E_CloudpeakConstant::kMInitialScoringFieldNumber;
const int E_CloudpeakConstant::kMGetscoringFieldNumber;
const int E_CloudpeakConstant::kMAssistScoringFieldNumber;
const int E_CloudpeakConstant::kMMatchTimeFieldNumber;
const int E_CloudpeakConstant::kMMatchEntryFieldNumber;
const int E_CloudpeakConstant::kMMapIdFieldNumber;
const int E_CloudpeakConstant::kMPlayersMaxFieldNumber;
const int E_CloudpeakConstant::kMRebotIdFieldNumber;
const int E_CloudpeakConstant::kMRebotCountFieldNumber;
const int E_CloudpeakConstant::kMActIdFieldNumber;
const int E_CloudpeakConstant::kMRevivalPointFieldNumber;
const int E_CloudpeakConstant::kMBuffFieldNumber;
const int E_CloudpeakConstant::kMRebotIdFieldNumber_20;
#endif  // !_MSC_VER

E_CloudpeakConstant::E_CloudpeakConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloudpeakConstant::InitAsDefaultInstance() {
}

E_CloudpeakConstant::E_CloudpeakConstant(const E_CloudpeakConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloudpeakConstant::SharedCtor() {
  _cached_size_ = 0;
  m_id_ = 0;
  m_revivalbuff_ = 0;
  m_refresh_ = 0;
  m_victoryreward_ = 0;
  m_failurereward_ = 0;
  m_round_ = 0;
  m_roundtime_ = 0;
  m_initialscoring_ = 0;
  m_getscoring_ = 0;
  m_assistscoring_ = 0;
  m_matchtime_ = 0;
  m_matchentry_ = 0;
  m_mapid_ = GOOGLE_LONGLONG(0);
  m_playersmax_ = 0;
  m_rebotid_ = 0;
  m_rebotcount_ = 0;
  m_actid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloudpeakConstant::~E_CloudpeakConstant() {
  SharedDtor();
}

void E_CloudpeakConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloudpeakConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloudpeakConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloudpeakConstant_descriptor_;
}

const E_CloudpeakConstant& E_CloudpeakConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloudpeak_2eproto();
  return *default_instance_;
}

E_CloudpeakConstant* E_CloudpeakConstant::default_instance_ = NULL;

E_CloudpeakConstant* E_CloudpeakConstant::New() const {
  return new E_CloudpeakConstant;
}

void E_CloudpeakConstant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_id_ = 0;
    m_revivalbuff_ = 0;
    m_refresh_ = 0;
    m_victoryreward_ = 0;
    m_failurereward_ = 0;
    m_round_ = 0;
    m_roundtime_ = 0;
    m_initialscoring_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    m_getscoring_ = 0;
    m_assistscoring_ = 0;
    m_matchtime_ = 0;
    m_matchentry_ = 0;
    m_mapid_ = GOOGLE_LONGLONG(0);
    m_playersmax_ = 0;
    m_rebotid_ = 0;
    m_rebotcount_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    m_actid_ = 0;
  }
  m_revivalpoint_.Clear();
  m_buff_.Clear();
  m_rebot_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloudpeakConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_id_)));
          set_has_m_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_revivalBuff;
        break;
      }

      // optional int32 m_revivalBuff = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_revivalBuff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_revivalbuff_)));
          set_has_m_revivalbuff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_m_refresh;
        break;
      }

      // optional int32 m_refresh = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_refresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_refresh_)));
          set_has_m_refresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_victoryReward;
        break;
      }

      // optional int32 m_victoryReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_victoryReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_victoryreward_)));
          set_has_m_victoryreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_failureReward;
        break;
      }

      // optional int32 m_failureReward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_failureReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_failurereward_)));
          set_has_m_failurereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_round;
        break;
      }

      // optional int32 m_round = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_round:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_round_)));
          set_has_m_round();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_roundTime;
        break;
      }

      // optional int32 m_roundTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_roundTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_roundtime_)));
          set_has_m_roundtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_m_initialScoring;
        break;
      }

      // optional int32 m_initialScoring = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_initialScoring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_initialscoring_)));
          set_has_m_initialscoring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_m_getscoring;
        break;
      }

      // optional int32 m_getscoring = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_getscoring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_getscoring_)));
          set_has_m_getscoring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_m_assistScoring;
        break;
      }

      // optional int32 m_assistScoring = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_assistScoring:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_assistscoring_)));
          set_has_m_assistscoring();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_m_matchTime;
        break;
      }

      // optional int32 m_matchTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_matchTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_matchtime_)));
          set_has_m_matchtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_m_matchEntry;
        break;
      }

      // optional int32 m_matchEntry = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_matchEntry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_matchentry_)));
          set_has_m_matchentry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_m_mapId;
        break;
      }

      // optional int64 m_mapId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_mapid_)));
          set_has_m_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_m_playersMax;
        break;
      }

      // optional int32 m_playersMax = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_playersMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_playersmax_)));
          set_has_m_playersmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_m_rebotId;
        break;
      }

      // optional int32 m_rebotId = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rebotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rebotid_)));
          set_has_m_rebotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_m_rebotCount;
        break;
      }

      // optional int32 m_rebotCount = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rebotCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_rebotcount_)));
          set_has_m_rebotcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_m_actId;
        break;
      }

      // optional int32 m_actId = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_actId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_actid_)));
          set_has_m_actid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_revivalPoint;
        break;
      }

      // repeated int32 m_revivalPoint = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_revivalPoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 144, input, this->mutable_m_revivalpoint())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_revivalpoint())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_m_revivalPoint;
        if (input->ExpectTag(154)) goto parse_m_buff;
        break;
      }

      // repeated .proto_ff.E_CloudpeakConstantBuffDesc m_buff = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_buff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_m_buff()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_m_buff;
        if (input->ExpectTag(160)) goto parse_m_rebot_id;
        break;
      }

      // repeated int32 m_rebot_id = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_rebot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 160, input, this->mutable_m_rebot_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_m_rebot_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_m_rebot_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloudpeakConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_id(), output);
  }

  // optional int32 m_revivalBuff = 2;
  if (has_m_revivalbuff()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_revivalbuff(), output);
  }

  // optional int32 m_refresh = 3;
  if (has_m_refresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_refresh(), output);
  }

  // optional int32 m_victoryReward = 4;
  if (has_m_victoryreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_victoryreward(), output);
  }

  // optional int32 m_failureReward = 5;
  if (has_m_failurereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->m_failurereward(), output);
  }

  // optional int32 m_round = 6;
  if (has_m_round()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->m_round(), output);
  }

  // optional int32 m_roundTime = 7;
  if (has_m_roundtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->m_roundtime(), output);
  }

  // optional int32 m_initialScoring = 8;
  if (has_m_initialscoring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->m_initialscoring(), output);
  }

  // optional int32 m_getscoring = 9;
  if (has_m_getscoring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->m_getscoring(), output);
  }

  // optional int32 m_assistScoring = 10;
  if (has_m_assistscoring()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->m_assistscoring(), output);
  }

  // optional int32 m_matchTime = 11;
  if (has_m_matchtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->m_matchtime(), output);
  }

  // optional int32 m_matchEntry = 12;
  if (has_m_matchentry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->m_matchentry(), output);
  }

  // optional int64 m_mapId = 13;
  if (has_m_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->m_mapid(), output);
  }

  // optional int32 m_playersMax = 14;
  if (has_m_playersmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->m_playersmax(), output);
  }

  // optional int32 m_rebotId = 15;
  if (has_m_rebotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->m_rebotid(), output);
  }

  // optional int32 m_rebotCount = 16;
  if (has_m_rebotcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->m_rebotcount(), output);
  }

  // optional int32 m_actId = 17;
  if (has_m_actid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->m_actid(), output);
  }

  // repeated int32 m_revivalPoint = 18;
  for (int i = 0; i < this->m_revivalpoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      18, this->m_revivalpoint(i), output);
  }

  // repeated .proto_ff.E_CloudpeakConstantBuffDesc m_buff = 19;
  for (int i = 0; i < this->m_buff_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->m_buff(i), output);
  }

  // repeated int32 m_rebot_id = 20;
  for (int i = 0; i < this->m_rebot_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      20, this->m_rebot_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloudpeakConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_id = 1;
  if (has_m_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_id(), target);
  }

  // optional int32 m_revivalBuff = 2;
  if (has_m_revivalbuff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_revivalbuff(), target);
  }

  // optional int32 m_refresh = 3;
  if (has_m_refresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_refresh(), target);
  }

  // optional int32 m_victoryReward = 4;
  if (has_m_victoryreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_victoryreward(), target);
  }

  // optional int32 m_failureReward = 5;
  if (has_m_failurereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->m_failurereward(), target);
  }

  // optional int32 m_round = 6;
  if (has_m_round()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->m_round(), target);
  }

  // optional int32 m_roundTime = 7;
  if (has_m_roundtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->m_roundtime(), target);
  }

  // optional int32 m_initialScoring = 8;
  if (has_m_initialscoring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->m_initialscoring(), target);
  }

  // optional int32 m_getscoring = 9;
  if (has_m_getscoring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->m_getscoring(), target);
  }

  // optional int32 m_assistScoring = 10;
  if (has_m_assistscoring()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->m_assistscoring(), target);
  }

  // optional int32 m_matchTime = 11;
  if (has_m_matchtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->m_matchtime(), target);
  }

  // optional int32 m_matchEntry = 12;
  if (has_m_matchentry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->m_matchentry(), target);
  }

  // optional int64 m_mapId = 13;
  if (has_m_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->m_mapid(), target);
  }

  // optional int32 m_playersMax = 14;
  if (has_m_playersmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->m_playersmax(), target);
  }

  // optional int32 m_rebotId = 15;
  if (has_m_rebotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->m_rebotid(), target);
  }

  // optional int32 m_rebotCount = 16;
  if (has_m_rebotcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->m_rebotcount(), target);
  }

  // optional int32 m_actId = 17;
  if (has_m_actid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->m_actid(), target);
  }

  // repeated int32 m_revivalPoint = 18;
  for (int i = 0; i < this->m_revivalpoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(18, this->m_revivalpoint(i), target);
  }

  // repeated .proto_ff.E_CloudpeakConstantBuffDesc m_buff = 19;
  for (int i = 0; i < this->m_buff_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->m_buff(i), target);
  }

  // repeated int32 m_rebot_id = 20;
  for (int i = 0; i < this->m_rebot_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(20, this->m_rebot_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloudpeakConstant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_id = 1;
    if (has_m_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_id());
    }

    // optional int32 m_revivalBuff = 2;
    if (has_m_revivalbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_revivalbuff());
    }

    // optional int32 m_refresh = 3;
    if (has_m_refresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_refresh());
    }

    // optional int32 m_victoryReward = 4;
    if (has_m_victoryreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_victoryreward());
    }

    // optional int32 m_failureReward = 5;
    if (has_m_failurereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_failurereward());
    }

    // optional int32 m_round = 6;
    if (has_m_round()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_round());
    }

    // optional int32 m_roundTime = 7;
    if (has_m_roundtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_roundtime());
    }

    // optional int32 m_initialScoring = 8;
    if (has_m_initialscoring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_initialscoring());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 m_getscoring = 9;
    if (has_m_getscoring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_getscoring());
    }

    // optional int32 m_assistScoring = 10;
    if (has_m_assistscoring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_assistscoring());
    }

    // optional int32 m_matchTime = 11;
    if (has_m_matchtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_matchtime());
    }

    // optional int32 m_matchEntry = 12;
    if (has_m_matchentry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_matchentry());
    }

    // optional int64 m_mapId = 13;
    if (has_m_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_mapid());
    }

    // optional int32 m_playersMax = 14;
    if (has_m_playersmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_playersmax());
    }

    // optional int32 m_rebotId = 15;
    if (has_m_rebotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rebotid());
    }

    // optional int32 m_rebotCount = 16;
    if (has_m_rebotcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_rebotcount());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 m_actId = 17;
    if (has_m_actid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_actid());
    }

  }
  // repeated int32 m_revivalPoint = 18;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_revivalpoint_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_revivalpoint(i));
    }
    total_size += 2 * this->m_revivalpoint_size() + data_size;
  }

  // repeated .proto_ff.E_CloudpeakConstantBuffDesc m_buff = 19;
  total_size += 2 * this->m_buff_size();
  for (int i = 0; i < this->m_buff_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->m_buff(i));
  }

  // repeated int32 m_rebot_id = 20;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_rebot_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->m_rebot_id(i));
    }
    total_size += 2 * this->m_rebot_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloudpeakConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloudpeakConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloudpeakConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloudpeakConstant::MergeFrom(const E_CloudpeakConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  m_revivalpoint_.MergeFrom(from.m_revivalpoint_);
  m_buff_.MergeFrom(from.m_buff_);
  m_rebot_id_.MergeFrom(from.m_rebot_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_id()) {
      set_m_id(from.m_id());
    }
    if (from.has_m_revivalbuff()) {
      set_m_revivalbuff(from.m_revivalbuff());
    }
    if (from.has_m_refresh()) {
      set_m_refresh(from.m_refresh());
    }
    if (from.has_m_victoryreward()) {
      set_m_victoryreward(from.m_victoryreward());
    }
    if (from.has_m_failurereward()) {
      set_m_failurereward(from.m_failurereward());
    }
    if (from.has_m_round()) {
      set_m_round(from.m_round());
    }
    if (from.has_m_roundtime()) {
      set_m_roundtime(from.m_roundtime());
    }
    if (from.has_m_initialscoring()) {
      set_m_initialscoring(from.m_initialscoring());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_m_getscoring()) {
      set_m_getscoring(from.m_getscoring());
    }
    if (from.has_m_assistscoring()) {
      set_m_assistscoring(from.m_assistscoring());
    }
    if (from.has_m_matchtime()) {
      set_m_matchtime(from.m_matchtime());
    }
    if (from.has_m_matchentry()) {
      set_m_matchentry(from.m_matchentry());
    }
    if (from.has_m_mapid()) {
      set_m_mapid(from.m_mapid());
    }
    if (from.has_m_playersmax()) {
      set_m_playersmax(from.m_playersmax());
    }
    if (from.has_m_rebotid()) {
      set_m_rebotid(from.m_rebotid());
    }
    if (from.has_m_rebotcount()) {
      set_m_rebotcount(from.m_rebotcount());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_m_actid()) {
      set_m_actid(from.m_actid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloudpeakConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloudpeakConstant::CopyFrom(const E_CloudpeakConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloudpeakConstant::IsInitialized() const {

  return true;
}

void E_CloudpeakConstant::Swap(E_CloudpeakConstant* other) {
  if (other != this) {
    std::swap(m_id_, other->m_id_);
    std::swap(m_revivalbuff_, other->m_revivalbuff_);
    std::swap(m_refresh_, other->m_refresh_);
    std::swap(m_victoryreward_, other->m_victoryreward_);
    std::swap(m_failurereward_, other->m_failurereward_);
    std::swap(m_round_, other->m_round_);
    std::swap(m_roundtime_, other->m_roundtime_);
    std::swap(m_initialscoring_, other->m_initialscoring_);
    std::swap(m_getscoring_, other->m_getscoring_);
    std::swap(m_assistscoring_, other->m_assistscoring_);
    std::swap(m_matchtime_, other->m_matchtime_);
    std::swap(m_matchentry_, other->m_matchentry_);
    std::swap(m_mapid_, other->m_mapid_);
    std::swap(m_playersmax_, other->m_playersmax_);
    std::swap(m_rebotid_, other->m_rebotid_);
    std::swap(m_rebotcount_, other->m_rebotcount_);
    std::swap(m_actid_, other->m_actid_);
    m_revivalpoint_.Swap(&other->m_revivalpoint_);
    m_buff_.Swap(&other->m_buff_);
    m_rebot_id_.Swap(&other->m_rebot_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloudpeakConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloudpeakConstant_descriptor_;
  metadata.reflection = E_CloudpeakConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloudpeakConstant::kECloudpeakConstantListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloudpeakConstant::Sheet_CloudpeakConstant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloudpeakConstant::InitAsDefaultInstance() {
}

Sheet_CloudpeakConstant::Sheet_CloudpeakConstant(const Sheet_CloudpeakConstant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloudpeakConstant::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloudpeakConstant::~Sheet_CloudpeakConstant() {
  SharedDtor();
}

void Sheet_CloudpeakConstant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloudpeakConstant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloudpeakConstant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloudpeakConstant_descriptor_;
}

const Sheet_CloudpeakConstant& Sheet_CloudpeakConstant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloudpeak_2eproto();
  return *default_instance_;
}

Sheet_CloudpeakConstant* Sheet_CloudpeakConstant::default_instance_ = NULL;

Sheet_CloudpeakConstant* Sheet_CloudpeakConstant::New() const {
  return new Sheet_CloudpeakConstant;
}

void Sheet_CloudpeakConstant::Clear() {
  e_cloudpeakconstant_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloudpeakConstant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloudpeakConstant E_CloudpeakConstant_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloudpeakConstant_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloudpeakconstant_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloudpeakConstant_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloudpeakConstant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloudpeakConstant E_CloudpeakConstant_List = 1;
  for (int i = 0; i < this->e_cloudpeakconstant_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloudpeakconstant_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloudpeakConstant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloudpeakConstant E_CloudpeakConstant_List = 1;
  for (int i = 0; i < this->e_cloudpeakconstant_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloudpeakconstant_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloudpeakConstant::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloudpeakConstant E_CloudpeakConstant_List = 1;
  total_size += 1 * this->e_cloudpeakconstant_list_size();
  for (int i = 0; i < this->e_cloudpeakconstant_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloudpeakconstant_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloudpeakConstant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloudpeakConstant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloudpeakConstant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloudpeakConstant::MergeFrom(const Sheet_CloudpeakConstant& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloudpeakconstant_list_.MergeFrom(from.e_cloudpeakconstant_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloudpeakConstant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloudpeakConstant::CopyFrom(const Sheet_CloudpeakConstant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloudpeakConstant::IsInitialized() const {

  return true;
}

void Sheet_CloudpeakConstant::Swap(Sheet_CloudpeakConstant* other) {
  if (other != this) {
    e_cloudpeakconstant_list_.Swap(&other->e_cloudpeakconstant_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloudpeakConstant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloudpeakConstant_descriptor_;
  metadata.reflection = Sheet_CloudpeakConstant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int E_CloudpeakExp::kMLvFieldNumber;
const int E_CloudpeakExp::kMGetExpFieldNumber;
#endif  // !_MSC_VER

E_CloudpeakExp::E_CloudpeakExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void E_CloudpeakExp::InitAsDefaultInstance() {
}

E_CloudpeakExp::E_CloudpeakExp(const E_CloudpeakExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void E_CloudpeakExp::SharedCtor() {
  _cached_size_ = 0;
  m_lv_ = 0;
  m_getexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

E_CloudpeakExp::~E_CloudpeakExp() {
  SharedDtor();
}

void E_CloudpeakExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void E_CloudpeakExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* E_CloudpeakExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return E_CloudpeakExp_descriptor_;
}

const E_CloudpeakExp& E_CloudpeakExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloudpeak_2eproto();
  return *default_instance_;
}

E_CloudpeakExp* E_CloudpeakExp::default_instance_ = NULL;

E_CloudpeakExp* E_CloudpeakExp::New() const {
  return new E_CloudpeakExp;
}

void E_CloudpeakExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_lv_ = 0;
    m_getexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool E_CloudpeakExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_lv_)));
          set_has_m_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_m_getExp;
        break;
      }

      // optional int32 m_getExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_getExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_getexp_)));
          set_has_m_getexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void E_CloudpeakExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_lv(), output);
  }

  // optional int32 m_getExp = 2;
  if (has_m_getexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_getexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* E_CloudpeakExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 m_lv = 1;
  if (has_m_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->m_lv(), target);
  }

  // optional int32 m_getExp = 2;
  if (has_m_getexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->m_getexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int E_CloudpeakExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 m_lv = 1;
    if (has_m_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_lv());
    }

    // optional int32 m_getExp = 2;
    if (has_m_getexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_getexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void E_CloudpeakExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const E_CloudpeakExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const E_CloudpeakExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void E_CloudpeakExp::MergeFrom(const E_CloudpeakExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_lv()) {
      set_m_lv(from.m_lv());
    }
    if (from.has_m_getexp()) {
      set_m_getexp(from.m_getexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void E_CloudpeakExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void E_CloudpeakExp::CopyFrom(const E_CloudpeakExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E_CloudpeakExp::IsInitialized() const {

  return true;
}

void E_CloudpeakExp::Swap(E_CloudpeakExp* other) {
  if (other != this) {
    std::swap(m_lv_, other->m_lv_);
    std::swap(m_getexp_, other->m_getexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata E_CloudpeakExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = E_CloudpeakExp_descriptor_;
  metadata.reflection = E_CloudpeakExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_CloudpeakExp::kECloudpeakExpListFieldNumber;
#endif  // !_MSC_VER

Sheet_CloudpeakExp::Sheet_CloudpeakExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_CloudpeakExp::InitAsDefaultInstance() {
}

Sheet_CloudpeakExp::Sheet_CloudpeakExp(const Sheet_CloudpeakExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_CloudpeakExp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_CloudpeakExp::~Sheet_CloudpeakExp() {
  SharedDtor();
}

void Sheet_CloudpeakExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_CloudpeakExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_CloudpeakExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_CloudpeakExp_descriptor_;
}

const Sheet_CloudpeakExp& Sheet_CloudpeakExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_E_5fCloudpeak_2eproto();
  return *default_instance_;
}

Sheet_CloudpeakExp* Sheet_CloudpeakExp::default_instance_ = NULL;

Sheet_CloudpeakExp* Sheet_CloudpeakExp::New() const {
  return new Sheet_CloudpeakExp;
}

void Sheet_CloudpeakExp::Clear() {
  e_cloudpeakexp_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_CloudpeakExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.E_CloudpeakExp E_CloudpeakExp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_E_CloudpeakExp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_e_cloudpeakexp_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_E_CloudpeakExp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_CloudpeakExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.E_CloudpeakExp E_CloudpeakExp_List = 1;
  for (int i = 0; i < this->e_cloudpeakexp_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->e_cloudpeakexp_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_CloudpeakExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.E_CloudpeakExp E_CloudpeakExp_List = 1;
  for (int i = 0; i < this->e_cloudpeakexp_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->e_cloudpeakexp_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_CloudpeakExp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.E_CloudpeakExp E_CloudpeakExp_List = 1;
  total_size += 1 * this->e_cloudpeakexp_list_size();
  for (int i = 0; i < this->e_cloudpeakexp_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->e_cloudpeakexp_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_CloudpeakExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_CloudpeakExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_CloudpeakExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_CloudpeakExp::MergeFrom(const Sheet_CloudpeakExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  e_cloudpeakexp_list_.MergeFrom(from.e_cloudpeakexp_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_CloudpeakExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_CloudpeakExp::CopyFrom(const Sheet_CloudpeakExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_CloudpeakExp::IsInitialized() const {

  return true;
}

void Sheet_CloudpeakExp::Swap(Sheet_CloudpeakExp* other) {
  if (other != this) {
    e_cloudpeakexp_list_.Swap(&other->e_cloudpeakexp_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_CloudpeakExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_CloudpeakExp_descriptor_;
  metadata.reflection = Sheet_CloudpeakExp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
