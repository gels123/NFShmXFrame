// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "manor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* manorconstants_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorconstants_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorconstants_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorconstants_reflection_ = NULL;
const ::google::protobuf::Descriptor* manoritemCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manoritemCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manoritemCost_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manoritemCost_reflection_ = NULL;
const ::google::protobuf::Descriptor* manormanorlistinitialMonsterDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manormanorlistinitialMonsterDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* manormanorlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manormanorlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manormanorlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manormanorlist_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorproductproductDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorproductproductDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorproduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorproduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorproduct_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorproduct_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorbuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorbuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorbuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorbuild_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorbuildUpbuildDesc_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorbuildUpbuildDesc_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorbuildUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorbuildUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorbuildUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorbuildUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* manoregg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manoregg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manoregg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manoregg_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorpatBeast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorpatBeast_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorpatBeast_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorpatBeast_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorpatBeastUP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorpatBeastUP_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorpatBeastUP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorpatBeastUP_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorbuildBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorbuildBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorbuildBuff_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorbuildBuff_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorshop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorshop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorshop_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorbuildAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorbuildAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorbuildAdd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorbuildAdd_reflection_ = NULL;
const ::google::protobuf::Descriptor* manorlog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  manorlog_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sheet_manorlog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sheet_manorlog_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_manor_2eproto() {
  protobuf_AddDesc_manor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "manor.proto");
  GOOGLE_CHECK(file != NULL);
  manorconstants_descriptor_ = file->message_type(0);
  static const int manorconstants_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorconstants, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorconstants, valuedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorconstants, stringdata_),
  };
  manorconstants_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorconstants_descriptor_,
      manorconstants::default_instance_,
      manorconstants_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorconstants, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorconstants, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorconstants));
  Sheet_manorconstants_descriptor_ = file->message_type(1);
  static const int Sheet_manorconstants_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorconstants, manorconstants_list_),
  };
  Sheet_manorconstants_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorconstants_descriptor_,
      Sheet_manorconstants::default_instance_,
      Sheet_manorconstants_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorconstants, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorconstants, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorconstants));
  manoritemCost_descriptor_ = file->message_type(2);
  static const int manoritemCost_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoritemCost, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoritemCost, usefor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoritemCost, itemvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoritemCost, backtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoritemCost, backvalue_),
  };
  manoritemCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manoritemCost_descriptor_,
      manoritemCost::default_instance_,
      manoritemCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoritemCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoritemCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manoritemCost));
  Sheet_manoritemCost_descriptor_ = file->message_type(3);
  static const int Sheet_manoritemCost_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manoritemCost, manoritemcost_list_),
  };
  Sheet_manoritemCost_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manoritemCost_descriptor_,
      Sheet_manoritemCost::default_instance_,
      Sheet_manoritemCost_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manoritemCost, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manoritemCost, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manoritemCost));
  manormanorlistinitialMonsterDesc_descriptor_ = file->message_type(4);
  static const int manormanorlistinitialMonsterDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlistinitialMonsterDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlistinitialMonsterDesc, id_),
  };
  manormanorlistinitialMonsterDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manormanorlistinitialMonsterDesc_descriptor_,
      manormanorlistinitialMonsterDesc::default_instance_,
      manormanorlistinitialMonsterDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlistinitialMonsterDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlistinitialMonsterDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manormanorlistinitialMonsterDesc));
  manormanorlist_descriptor_ = file->message_type(5);
  static const int manormanorlist_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, manortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, attackbuildlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, corebaselevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, productid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, corebasepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, corebasemaxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, corebaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, hatcherybasepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, hatcherybasemaxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, hatcherybaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, buffbasepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, buffbasemaxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, buffbaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, shoppath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, shopmaxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, crossgatebasepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, crossgatemaxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, crossgatebaseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, initialmonster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, patbeastattack_path_),
  };
  manormanorlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manormanorlist_descriptor_,
      manormanorlist::default_instance_,
      manormanorlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manormanorlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manormanorlist));
  Sheet_manormanorlist_descriptor_ = file->message_type(6);
  static const int Sheet_manormanorlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manormanorlist, manormanorlist_list_),
  };
  Sheet_manormanorlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manormanorlist_descriptor_,
      Sheet_manormanorlist::default_instance_,
      Sheet_manormanorlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manormanorlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manormanorlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manormanorlist));
  manorproductproductDesc_descriptor_ = file->message_type(7);
  static const int manorproductproductDesc_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorproductproductDesc, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorproductproductDesc, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorproductproductDesc, buildlevle_),
  };
  manorproductproductDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorproductproductDesc_descriptor_,
      manorproductproductDesc::default_instance_,
      manorproductproductDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorproductproductDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorproductproductDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorproductproductDesc));
  manorproduct_descriptor_ = file->message_type(8);
  static const int manorproduct_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorproduct, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorproduct, product_),
  };
  manorproduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorproduct_descriptor_,
      manorproduct::default_instance_,
      manorproduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorproduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorproduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorproduct));
  Sheet_manorproduct_descriptor_ = file->message_type(9);
  static const int Sheet_manorproduct_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorproduct, manorproduct_list_),
  };
  Sheet_manorproduct_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorproduct_descriptor_,
      Sheet_manorproduct::default_instance_,
      Sheet_manorproduct_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorproduct, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorproduct, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorproduct));
  manorbuild_descriptor_ = file->message_type(10);
  static const int manorbuild_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuild, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuild, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuild, buildingtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuild, monsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuild, buildingvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuild, buildingaddbuff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuild, buildingconsume_),
  };
  manorbuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorbuild_descriptor_,
      manorbuild::default_instance_,
      manorbuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorbuild));
  Sheet_manorbuild_descriptor_ = file->message_type(11);
  static const int Sheet_manorbuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuild, manorbuild_list_),
  };
  Sheet_manorbuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorbuild_descriptor_,
      Sheet_manorbuild::default_instance_,
      Sheet_manorbuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorbuild));
  manorbuildUpbuildDesc_descriptor_ = file->message_type(12);
  static const int manorbuildUpbuildDesc_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildUpbuildDesc, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildUpbuildDesc, exp_),
  };
  manorbuildUpbuildDesc_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorbuildUpbuildDesc_descriptor_,
      manorbuildUpbuildDesc::default_instance_,
      manorbuildUpbuildDesc_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildUpbuildDesc, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildUpbuildDesc, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorbuildUpbuildDesc));
  manorbuildUp_descriptor_ = file->message_type(13);
  static const int manorbuildUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildUp, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildUp, build_),
  };
  manorbuildUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorbuildUp_descriptor_,
      manorbuildUp::default_instance_,
      manorbuildUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorbuildUp));
  Sheet_manorbuildUp_descriptor_ = file->message_type(14);
  static const int Sheet_manorbuildUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuildUp, manorbuildup_list_),
  };
  Sheet_manorbuildUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorbuildUp_descriptor_,
      Sheet_manorbuildUp::default_instance_,
      Sheet_manorbuildUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuildUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuildUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorbuildUp));
  manoregg_descriptor_ = file->message_type(15);
  static const int manoregg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoregg, eggitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoregg, incubationtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoregg, patbeastsprobab_),
  };
  manoregg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manoregg_descriptor_,
      manoregg::default_instance_,
      manoregg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoregg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manoregg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manoregg));
  Sheet_manoregg_descriptor_ = file->message_type(16);
  static const int Sheet_manoregg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manoregg, manoregg_list_),
  };
  Sheet_manoregg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manoregg_descriptor_,
      Sheet_manoregg::default_instance_,
      Sheet_manoregg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manoregg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manoregg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manoregg));
  manorpatBeast_descriptor_ = file->message_type(17);
  static const int manorpatBeast_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorpatBeast, id_),
  };
  manorpatBeast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorpatBeast_descriptor_,
      manorpatBeast::default_instance_,
      manorpatBeast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorpatBeast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorpatBeast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorpatBeast));
  Sheet_manorpatBeast_descriptor_ = file->message_type(18);
  static const int Sheet_manorpatBeast_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorpatBeast, manorpatbeast_list_),
  };
  Sheet_manorpatBeast_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorpatBeast_descriptor_,
      Sheet_manorpatBeast::default_instance_,
      Sheet_manorpatBeast_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorpatBeast, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorpatBeast, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorpatBeast));
  manorpatBeastUP_descriptor_ = file->message_type(19);
  static const int manorpatBeastUP_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorpatBeastUP, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorpatBeastUP, exp_),
  };
  manorpatBeastUP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorpatBeastUP_descriptor_,
      manorpatBeastUP::default_instance_,
      manorpatBeastUP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorpatBeastUP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorpatBeastUP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorpatBeastUP));
  Sheet_manorpatBeastUP_descriptor_ = file->message_type(20);
  static const int Sheet_manorpatBeastUP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorpatBeastUP, manorpatbeastup_list_),
  };
  Sheet_manorpatBeastUP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorpatBeastUP_descriptor_,
      Sheet_manorpatBeastUP::default_instance_,
      Sheet_manorpatBeastUP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorpatBeastUP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorpatBeastUP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorpatBeastUP));
  manorbuildBuff_descriptor_ = file->message_type(21);
  static const int manorbuildBuff_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildBuff, levelsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildBuff, skillid_),
  };
  manorbuildBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorbuildBuff_descriptor_,
      manorbuildBuff::default_instance_,
      manorbuildBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorbuildBuff));
  Sheet_manorbuildBuff_descriptor_ = file->message_type(22);
  static const int Sheet_manorbuildBuff_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuildBuff, manorbuildbuff_list_),
  };
  Sheet_manorbuildBuff_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorbuildBuff_descriptor_,
      Sheet_manorbuildBuff::default_instance_,
      Sheet_manorbuildBuff_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuildBuff, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuildBuff, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorbuildBuff));
  manorshop_descriptor_ = file->message_type(23);
  static const int manorshop_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorshop, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorshop, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorshop, needshoplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorshop, buylimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorshop, moneycode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorshop, moneytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorshop, price_),
  };
  manorshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorshop_descriptor_,
      manorshop::default_instance_,
      manorshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorshop));
  Sheet_manorshop_descriptor_ = file->message_type(24);
  static const int Sheet_manorshop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorshop, manorshop_list_),
  };
  Sheet_manorshop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorshop_descriptor_,
      Sheet_manorshop::default_instance_,
      Sheet_manorshop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorshop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorshop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorshop));
  manorbuildAdd_descriptor_ = file->message_type(25);
  static const int manorbuildAdd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildAdd, levelsum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildAdd, addratio_),
  };
  manorbuildAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorbuildAdd_descriptor_,
      manorbuildAdd::default_instance_,
      manorbuildAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorbuildAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorbuildAdd));
  Sheet_manorbuildAdd_descriptor_ = file->message_type(26);
  static const int Sheet_manorbuildAdd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuildAdd, manorbuildadd_list_),
  };
  Sheet_manorbuildAdd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorbuildAdd_descriptor_,
      Sheet_manorbuildAdd::default_instance_,
      Sheet_manorbuildAdd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuildAdd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorbuildAdd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorbuildAdd));
  manorlog_descriptor_ = file->message_type(27);
  static const int manorlog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorlog, id_),
  };
  manorlog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      manorlog_descriptor_,
      manorlog::default_instance_,
      manorlog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorlog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(manorlog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(manorlog));
  Sheet_manorlog_descriptor_ = file->message_type(28);
  static const int Sheet_manorlog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorlog, manorlog_list_),
  };
  Sheet_manorlog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sheet_manorlog_descriptor_,
      Sheet_manorlog::default_instance_,
      Sheet_manorlog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorlog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sheet_manorlog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sheet_manorlog));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_manor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorconstants_descriptor_, &manorconstants::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorconstants_descriptor_, &Sheet_manorconstants::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manoritemCost_descriptor_, &manoritemCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manoritemCost_descriptor_, &Sheet_manoritemCost::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manormanorlistinitialMonsterDesc_descriptor_, &manormanorlistinitialMonsterDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manormanorlist_descriptor_, &manormanorlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manormanorlist_descriptor_, &Sheet_manormanorlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorproductproductDesc_descriptor_, &manorproductproductDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorproduct_descriptor_, &manorproduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorproduct_descriptor_, &Sheet_manorproduct::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorbuild_descriptor_, &manorbuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorbuild_descriptor_, &Sheet_manorbuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorbuildUpbuildDesc_descriptor_, &manorbuildUpbuildDesc::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorbuildUp_descriptor_, &manorbuildUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorbuildUp_descriptor_, &Sheet_manorbuildUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manoregg_descriptor_, &manoregg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manoregg_descriptor_, &Sheet_manoregg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorpatBeast_descriptor_, &manorpatBeast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorpatBeast_descriptor_, &Sheet_manorpatBeast::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorpatBeastUP_descriptor_, &manorpatBeastUP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorpatBeastUP_descriptor_, &Sheet_manorpatBeastUP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorbuildBuff_descriptor_, &manorbuildBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorbuildBuff_descriptor_, &Sheet_manorbuildBuff::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorshop_descriptor_, &manorshop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorshop_descriptor_, &Sheet_manorshop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorbuildAdd_descriptor_, &manorbuildAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorbuildAdd_descriptor_, &Sheet_manorbuildAdd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    manorlog_descriptor_, &manorlog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sheet_manorlog_descriptor_, &Sheet_manorlog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_manor_2eproto() {
  delete manorconstants::default_instance_;
  delete manorconstants_reflection_;
  delete Sheet_manorconstants::default_instance_;
  delete Sheet_manorconstants_reflection_;
  delete manoritemCost::default_instance_;
  delete manoritemCost_reflection_;
  delete Sheet_manoritemCost::default_instance_;
  delete Sheet_manoritemCost_reflection_;
  delete manormanorlistinitialMonsterDesc::default_instance_;
  delete manormanorlistinitialMonsterDesc_reflection_;
  delete manormanorlist::default_instance_;
  delete manormanorlist_reflection_;
  delete Sheet_manormanorlist::default_instance_;
  delete Sheet_manormanorlist_reflection_;
  delete manorproductproductDesc::default_instance_;
  delete manorproductproductDesc_reflection_;
  delete manorproduct::default_instance_;
  delete manorproduct_reflection_;
  delete Sheet_manorproduct::default_instance_;
  delete Sheet_manorproduct_reflection_;
  delete manorbuild::default_instance_;
  delete manorbuild_reflection_;
  delete Sheet_manorbuild::default_instance_;
  delete Sheet_manorbuild_reflection_;
  delete manorbuildUpbuildDesc::default_instance_;
  delete manorbuildUpbuildDesc_reflection_;
  delete manorbuildUp::default_instance_;
  delete manorbuildUp_reflection_;
  delete Sheet_manorbuildUp::default_instance_;
  delete Sheet_manorbuildUp_reflection_;
  delete manoregg::default_instance_;
  delete manoregg_reflection_;
  delete Sheet_manoregg::default_instance_;
  delete Sheet_manoregg_reflection_;
  delete manorpatBeast::default_instance_;
  delete manorpatBeast_reflection_;
  delete Sheet_manorpatBeast::default_instance_;
  delete Sheet_manorpatBeast_reflection_;
  delete manorpatBeastUP::default_instance_;
  delete manorpatBeastUP_reflection_;
  delete Sheet_manorpatBeastUP::default_instance_;
  delete Sheet_manorpatBeastUP_reflection_;
  delete manorbuildBuff::default_instance_;
  delete manorbuildBuff_reflection_;
  delete Sheet_manorbuildBuff::default_instance_;
  delete Sheet_manorbuildBuff_reflection_;
  delete manorshop::default_instance_;
  delete manorshop_reflection_;
  delete Sheet_manorshop::default_instance_;
  delete Sheet_manorshop_reflection_;
  delete manorbuildAdd::default_instance_;
  delete manorbuildAdd_reflection_;
  delete Sheet_manorbuildAdd::default_instance_;
  delete Sheet_manorbuildAdd_reflection_;
  delete manorlog::default_instance_;
  delete manorlog_reflection_;
  delete Sheet_manorlog::default_instance_;
  delete Sheet_manorlog_reflection_;
}

void protobuf_AddDesc_manor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::yd_fieldoptions::protobuf_AddDesc_yd_5ffieldoptions_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013manor.proto\022\010proto_ff\032\025yd_fieldoptions"
    ".proto\"t\n\016manorconstants\022\026\n\002ID\030\001 \001(\005B\n\302\377"
    "\024\006\347\274\226\345\217\267\022 \n\tvaluedata\030\002 \001(\003B\r\302\377\024\t\345\200\274\346\225\260\346"
    "\215\256\022(\n\nstringdata\030\003 \001(\tB\024\302\377\024\014\346\226\207\346\234\254\346\225\260\346\215\256"
    "\220\301\024<\"S\n\024Sheet_manorconstants\022;\n\023manorcon"
    "stants_List\030\001 \003(\0132\030.proto_ff.manorconsta"
    "ntsB\004\210\301\024<\"\270\001\n\rmanoritemCost\022\032\n\006itemId\030\001 "
    "\001(\003B\n\302\377\024\006\347\274\226\345\217\267\022 \n\006useFor\030\002 \001(\005B\020\302\377\024\014\347\224\250"
    "\351\200\224\347\261\273\345\236\213\022 \n\titemValue\030\003 \001(\005B\r\302\377\024\t\346\225\210\346\236\234"
    "\345\200\274\022\"\n\010backType\030\004 \001(\005B\020\302\377\024\014\350\277\224\345\210\251\347\261\273\345\236\213\022"
    "#\n\tbackValue\030\005 \001(\005B\020\302\377\024\014\350\277\224\345\210\251\346\225\260\351\207\217\"P\n\023"
    "Sheet_manoritemCost\0229\n\022manoritemCost_Lis"
    "t\030\001 \003(\0132\027.proto_ff.manoritemCostB\004\210\301\024\024\"M"
    "\n manormanorlistinitialMonsterDesc\022\027\n\003Nu"
    "m\030\001 \001(\005B\n\302\377\024\006\346\225\260\351\207\217\022\020\n\002Id\030\002 \001(\003B\004\302\377\024\000\"\347\010"
    "\n\016manormanorlist\022\026\n\002ID\030\001 \001(\003B\n\302\377\024\006\347\274\226\345\217\267"
    "\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\351\242\206\345\234\237\345\220\215\345\255\227\220\301\024<\022#\n\t"
    "manorType\030\003 \001(\005B\020\302\377\024\014\351\242\206\345\234\260\347\261\273\345\236\213\0226\n\020att"
    "ackBuildLevel\030\004 \001(\005B\034\302\377\024\030\345\256\243\346\210\230\346\211\200\351\234\200\345\273\272"
    "\347\255\221\347\255\211\347\272\247\0226\n\rcoreBaseLevel\030\005 \001(\005B\037\302\377\024\033\351\255"
    "\224\347\201\265\346\237\261\351\207\216\347\224\237\345\242\236\351\207\217\347\255\211\347\272\247\022%\n\005mapId\030\006 \001(\003"
    "B\026\302\377\024\022\351\242\206\345\234\260\346\211\200\345\234\250\345\234\260\345\233\276\022&\n\tproductId\030\007 "
    "\001(\005B\023\302\377\024\017\347\211\271\344\272\247\347\273\204\347\274\226\345\217\267\022)\n\014coreBasePath"
    "\030\010 \001(\003B\023\302\377\024\017\351\255\224\347\201\265\346\237\261\344\275\215\347\275\256\0223\n\020coreBaseM"
    "axLevel\030\t \001(\005B\031\302\377\024\025\345\273\272\347\255\221\347\211\251\347\255\211\347\272\247\344\270\212\351\231\220"
    "\022#\n\ncoreBaseId\030\n \001(\003B\017\302\377\024\013\351\255\224\347\201\265\346\237\261ID\022-\n"
    "\020hatcheryBasePath\030\013 \001(\003B\023\302\377\024\017\345\255\265\345\214\226\345\234\272\344\275"
    "\215\347\275\256\0227\n\024hatcheryBaseMaxLevel\030\014 \001(\005B\031\302\377\024\025"
    "\345\255\265\345\214\226\345\234\272\347\255\211\347\272\247\344\270\212\351\231\220\022\'\n\016hatcheryBaseId\030"
    "\r \001(\003B\017\302\377\024\013\345\255\265\345\214\226\345\234\272ID\022)\n\014buffBasePath\030\016"
    " \001(\003B\023\302\377\024\017\345\205\211\347\216\257\346\237\261\344\275\215\347\275\256\0223\n\020buffBaseMax"
    "Level\030\017 \001(\005B\031\302\377\024\025\345\273\272\347\255\221\347\211\251\347\255\211\347\272\247\344\270\212\351\231\220\022#"
    "\n\nbuffBaseId\030\020 \001(\003B\017\302\377\024\013\345\205\211\347\216\257\346\237\261ID\022\"\n\010s"
    "hopPath\030\021 \001(\003B\020\302\377\024\014\345\225\206\345\272\227\344\275\215\347\275\256\022/\n\014shopM"
    "axLevel\030\022 \001(\005B\031\302\377\024\025\345\273\272\347\255\221\347\211\251\347\255\211\347\272\247\344\270\212\351\231\220"
    "\022\034\n\006shopId\030\023 \001(\003B\014\302\377\024\010\345\225\206\345\272\227ID\022.\n\021crossG"
    "ateBasePath\030\024 \001(\003B\023\302\377\024\017\347\245\255\347\214\256\345\241\224\344\275\215\347\275\256\0224"
    "\n\021crossGateMaxLevel\030\025 \001(\005B\031\302\377\024\025\345\273\272\347\255\221\347\211\251"
    "\347\255\211\347\272\247\344\270\212\351\231\220\022(\n\017crossGateBaseId\030\026 \001(\003B\017\302"
    "\377\024\013\347\245\255\347\214\256\345\241\224ID\022^\n\016initialMonster\030\027 \003(\0132*"
    ".proto_ff.manormanorlistinitialMonsterDe"
    "scB\032\302\377\024\022\345\210\235\345\247\213\344\270\255\347\253\213\346\200\252\347\211\251\210\301\024\004\0227\n\023patBea"
    "stAttack_Path\030\030 \003(\003B\032\302\377\024\022\345\245\207\345\205\275\346\224\273\345\207\273\350\220\275"
    "\347\202\271\210\301\024\004\"S\n\024Sheet_manormanorlist\022;\n\023manor"
    "manorlist_List\030\001 \003(\0132\030.proto_ff.manorman"
    "orlistB\004\210\301\024(\"~\n\027manorproductproductDesc\022"
    "\022\n\004Item\030\001 \001(\003B\004\302\377\024\000\022#\n\003Num\030\002 \001(\005B\026\302\377\024\022\346\257"
    "\217\346\254\241\347\273\264\346\212\244\344\272\247\351\207\217\022*\n\nbuildLevle\030\003 \001(\005B\026\302\377"
    "\024\022\351\234\200\350\246\201\345\273\272\347\255\221\347\255\211\347\272\247\"j\n\014manorproduct\022\026\n\002"
    "ID\030\001 \001(\005B\n\302\377\024\006\347\274\226\345\217\267\022B\n\007product\030\002 \003(\0132!."
    "proto_ff.manorproductproductDescB\016\302\377\024\006\344\272"
    "\247\345\223\201\210\301\024\003\"M\n\022Sheet_manorproduct\0227\n\021manorp"
    "roduct_List\030\001 \003(\0132\026.proto_ff.manorproduc"
    "tB\004\210\301\024(\"\276\002\n\nmanorbuild\022\026\n\002ID\030\001 \001(\003B\n\302\377\024\006"
    "\347\274\226\345\217\267\022\"\n\004name\030\002 \001(\tB\024\302\377\024\014\345\273\272\347\255\221\345\220\215\345\255\227\220\301"
    "\024<\022&\n\014buildingType\030\003 \001(\005B\020\302\377\024\014\345\273\272\347\255\221\347\261\273\345"
    "\236\213\022\037\n\tmonsterId\030\004 \001(\003B\014\302\377\024\010\346\200\252\347\211\251ID\0224\n\rb"
    "uildingvalue\030\005 \001(\tB\035\302\377\024\025\345\273\272\347\255\221\345\220\204\347\255\211\347\272\247\345"
    "\217\202\346\225\260\220\301\024<\022=\n\017buildingAddBuff\030\006 \001(\tB$\302\377\024\033"
    "\345\220\204\347\255\211\347\272\247\347\273\231\351\255\224\347\201\265\346\237\261\345\212\240\346\210\220\220\301\024\214\001\0226\n\017buil"
    "dingConsume\030\007 \001(\tB\035\302\377\024\025\345\220\204\347\255\211\347\272\247\351\255\224\347\201\265\346\227"
    "\245\350\200\227\220\301\024<\"G\n\020Sheet_manorbuild\0223\n\017manorbui"
    "ld_List\030\001 \003(\0132\024.proto_ff.manorbuildB\004\210\301\024"
    "\024\"V\n\025manorbuildUpbuildDesc\022\022\n\004type\030\001 \001(\005"
    "B\004\302\377\024\000\022)\n\003exp\030\002 \001(\005B\034\302\377\024\030\345\215\207\345\210\260\350\257\245\347\272\247\351\234\200"
    "\350\246\201\347\273\217\351\252\214\"i\n\014manorbuildUp\022\031\n\005level\030\001 \001(\005"
    "B\n\302\377\024\006\347\255\211\347\272\247\022>\n\005build\030\002 \003(\0132\037.proto_ff.m"
    "anorbuildUpbuildDescB\016\302\377\024\006\345\273\272\347\255\221\210\301\024\005\"M\n\022"
    "Sheet_manorbuildUp\0227\n\021manorbuildUp_List\030"
    "\001 \003(\0132\026.proto_ff.manorbuildUpB\004\210\301\024\024\"\224\001\n\010"
    "manoregg\022 \n\teggItemID\030\001 \001(\003B\r\302\377\024\t\350\233\213\351\201\223\345"
    "\205\267\0221\n\016incubationTime\030\002 \001(\005B\031\302\377\024\025\345\255\265\345\214\226\346\227"
    "\266\351\225\277\357\274\210\347\247\222\357\274\211\0223\n\017patBeastsProbab\030\003 \001(\tB\032"
    "\302\377\024\022\345\255\265\345\207\272\346\200\252\347\211\251\346\235\203\351\207\215\220\301\024P\"A\n\016Sheet_mano"
    "regg\022/\n\rmanoregg_List\030\001 \003(\0132\022.proto_ff.m"
    "anoreggB\004\210\301\024\024\")\n\rmanorpatBeast\022\030\n\002Id\030\001 \001"
    "(\003B\014\302\377\024\010\346\200\252\347\211\251ID\"P\n\023Sheet_manorpatBeast\022"
    "9\n\022manorpatBeast_List\030\001 \003(\0132\027.proto_ff.m"
    "anorpatBeastB\004\210\301\024\024\"W\n\017manorpatBeastUP\022\031\n"
    "\005level\030\001 \001(\005B\n\302\377\024\006\347\255\211\347\272\247\022)\n\003exp\030\002 \001(\005B\034\302"
    "\377\024\030\345\215\207\345\210\260\350\257\245\347\272\247\351\234\200\350\246\201\347\273\217\351\252\214\"V\n\025Sheet_man"
    "orpatBeastUP\022=\n\024manorpatBeastUP_List\030\001 \003"
    "(\0132\031.proto_ff.manorpatBeastUPB\004\210\301\024\024\"Y\n\016m"
    "anorbuildBuff\022(\n\010levelSum\030\001 \001(\005B\026\302\377\024\022\345\273\272"
    "\347\255\221\347\255\211\347\272\247\346\200\273\345\222\214\022\035\n\007skillId\030\002 \001(\003B\014\302\377\024\010\346\212"
    "\200\350\203\275ID\"S\n\024Sheet_manorbuildBuff\022;\n\023manorb"
    "uildBuff_List\030\001 \003(\0132\030.proto_ff.manorbuil"
    "dBuffB\004\210\301\024\024\"\205\002\n\tmanorshop\022\026\n\002ID\030\001 \001(\005B\n\302"
    "\377\024\006\347\274\226\345\217\267\022\034\n\006itemId\030\002 \001(\003B\014\302\377\024\010\351\201\223\345\205\267ID\022"
    "3\n\nneedShopLV\030\003 \001(\005B\037\302\377\024\033\351\234\200\346\261\202\345\225\206\345\272\227\345\273\272"
    "\347\255\221\347\255\211\347\272\247\345\222\214\022\"\n\010buyLimit\030\004 \001(\005B\020\302\377\024\014\350\264\255\344"
    "\271\260\346\227\245\351\231\220\022#\n\tmoneyCode\030\005 \001(\005B\020\302\377\024\014\350\264\247\345\270\201\344"
    "\273\243\345\217\267\022#\n\tmoneyType\030\006 \001(\003B\020\302\377\024\014\350\264\247\345\270\201\347\261\273\345"
    "\236\213\022\037\n\005Price\030\007 \001(\005B\020\302\377\024\014\350\264\255\344\271\260\346\266\210\350\200\227\"D\n\017S"
    "heet_manorshop\0221\n\016manorshop_List\030\001 \003(\0132\023"
    ".proto_ff.manorshopB\004\210\301\024\024\"c\n\rmanorbuildA"
    "dd\022(\n\010levelSum\030\001 \001(\005B\026\302\377\024\022\345\273\272\347\255\221\347\255\211\347\272\247\346\200"
    "\273\345\222\214\022(\n\010addRatio\030\002 \001(\005B\026\302\377\024\022\347\245\255\347\214\256\345\212\240\346\210\220"
    "\346\257\224\344\276\213\"P\n\023Sheet_manorbuildAdd\0229\n\022manorbu"
    "ildAdd_List\030\001 \003(\0132\027.proto_ff.manorbuildA"
    "ddB\004\210\301\024\024\"\"\n\010manorlog\022\026\n\002ID\030\001 \001(\005B\n\302\377\024\006\347\274"
    "\226\345\217\267\"A\n\016Sheet_manorlog\022/\n\rmanorlog_List\030"
    "\001 \003(\0132\022.proto_ff.manorlogB\004\210\301\024\024", 4111);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "manor.proto", &protobuf_RegisterTypes);
  manorconstants::default_instance_ = new manorconstants();
  Sheet_manorconstants::default_instance_ = new Sheet_manorconstants();
  manoritemCost::default_instance_ = new manoritemCost();
  Sheet_manoritemCost::default_instance_ = new Sheet_manoritemCost();
  manormanorlistinitialMonsterDesc::default_instance_ = new manormanorlistinitialMonsterDesc();
  manormanorlist::default_instance_ = new manormanorlist();
  Sheet_manormanorlist::default_instance_ = new Sheet_manormanorlist();
  manorproductproductDesc::default_instance_ = new manorproductproductDesc();
  manorproduct::default_instance_ = new manorproduct();
  Sheet_manorproduct::default_instance_ = new Sheet_manorproduct();
  manorbuild::default_instance_ = new manorbuild();
  Sheet_manorbuild::default_instance_ = new Sheet_manorbuild();
  manorbuildUpbuildDesc::default_instance_ = new manorbuildUpbuildDesc();
  manorbuildUp::default_instance_ = new manorbuildUp();
  Sheet_manorbuildUp::default_instance_ = new Sheet_manorbuildUp();
  manoregg::default_instance_ = new manoregg();
  Sheet_manoregg::default_instance_ = new Sheet_manoregg();
  manorpatBeast::default_instance_ = new manorpatBeast();
  Sheet_manorpatBeast::default_instance_ = new Sheet_manorpatBeast();
  manorpatBeastUP::default_instance_ = new manorpatBeastUP();
  Sheet_manorpatBeastUP::default_instance_ = new Sheet_manorpatBeastUP();
  manorbuildBuff::default_instance_ = new manorbuildBuff();
  Sheet_manorbuildBuff::default_instance_ = new Sheet_manorbuildBuff();
  manorshop::default_instance_ = new manorshop();
  Sheet_manorshop::default_instance_ = new Sheet_manorshop();
  manorbuildAdd::default_instance_ = new manorbuildAdd();
  Sheet_manorbuildAdd::default_instance_ = new Sheet_manorbuildAdd();
  manorlog::default_instance_ = new manorlog();
  Sheet_manorlog::default_instance_ = new Sheet_manorlog();
  manorconstants::default_instance_->InitAsDefaultInstance();
  Sheet_manorconstants::default_instance_->InitAsDefaultInstance();
  manoritemCost::default_instance_->InitAsDefaultInstance();
  Sheet_manoritemCost::default_instance_->InitAsDefaultInstance();
  manormanorlistinitialMonsterDesc::default_instance_->InitAsDefaultInstance();
  manormanorlist::default_instance_->InitAsDefaultInstance();
  Sheet_manormanorlist::default_instance_->InitAsDefaultInstance();
  manorproductproductDesc::default_instance_->InitAsDefaultInstance();
  manorproduct::default_instance_->InitAsDefaultInstance();
  Sheet_manorproduct::default_instance_->InitAsDefaultInstance();
  manorbuild::default_instance_->InitAsDefaultInstance();
  Sheet_manorbuild::default_instance_->InitAsDefaultInstance();
  manorbuildUpbuildDesc::default_instance_->InitAsDefaultInstance();
  manorbuildUp::default_instance_->InitAsDefaultInstance();
  Sheet_manorbuildUp::default_instance_->InitAsDefaultInstance();
  manoregg::default_instance_->InitAsDefaultInstance();
  Sheet_manoregg::default_instance_->InitAsDefaultInstance();
  manorpatBeast::default_instance_->InitAsDefaultInstance();
  Sheet_manorpatBeast::default_instance_->InitAsDefaultInstance();
  manorpatBeastUP::default_instance_->InitAsDefaultInstance();
  Sheet_manorpatBeastUP::default_instance_->InitAsDefaultInstance();
  manorbuildBuff::default_instance_->InitAsDefaultInstance();
  Sheet_manorbuildBuff::default_instance_->InitAsDefaultInstance();
  manorshop::default_instance_->InitAsDefaultInstance();
  Sheet_manorshop::default_instance_->InitAsDefaultInstance();
  manorbuildAdd::default_instance_->InitAsDefaultInstance();
  Sheet_manorbuildAdd::default_instance_->InitAsDefaultInstance();
  manorlog::default_instance_->InitAsDefaultInstance();
  Sheet_manorlog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_manor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_manor_2eproto {
  StaticDescriptorInitializer_manor_2eproto() {
    protobuf_AddDesc_manor_2eproto();
  }
} static_descriptor_initializer_manor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int manorconstants::kIDFieldNumber;
const int manorconstants::kValuedataFieldNumber;
const int manorconstants::kStringdataFieldNumber;
#endif  // !_MSC_VER

manorconstants::manorconstants()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorconstants::InitAsDefaultInstance() {
}

manorconstants::manorconstants(const manorconstants& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorconstants::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  valuedata_ = GOOGLE_LONGLONG(0);
  stringdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorconstants::~manorconstants() {
  SharedDtor();
}

void manorconstants::SharedDtor() {
  if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
    delete stringdata_;
  }
  if (this != default_instance_) {
  }
}

void manorconstants::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorconstants::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorconstants_descriptor_;
}

const manorconstants& manorconstants::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorconstants* manorconstants::default_instance_ = NULL;

manorconstants* manorconstants::New() const {
  return new manorconstants;
}

void manorconstants::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    valuedata_ = GOOGLE_LONGLONG(0);
    if (has_stringdata()) {
      if (stringdata_ != &::google::protobuf::internal::kEmptyString) {
        stringdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorconstants::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_valuedata;
        break;
      }

      // optional int64 valuedata = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valuedata:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &valuedata_)));
          set_has_valuedata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stringdata;
        break;
      }

      // optional string stringdata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringdata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringdata().data(), this->stringdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorconstants::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 valuedata = 2;
  if (has_valuedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->valuedata(), output);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stringdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorconstants::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 valuedata = 2;
  if (has_valuedata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->valuedata(), target);
  }

  // optional string stringdata = 3;
  if (has_stringdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringdata().data(), this->stringdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->stringdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorconstants::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 valuedata = 2;
    if (has_valuedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->valuedata());
    }

    // optional string stringdata = 3;
    if (has_stringdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorconstants::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorconstants* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorconstants*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorconstants::MergeFrom(const manorconstants& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_valuedata()) {
      set_valuedata(from.valuedata());
    }
    if (from.has_stringdata()) {
      set_stringdata(from.stringdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorconstants::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorconstants::CopyFrom(const manorconstants& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorconstants::IsInitialized() const {

  return true;
}

void manorconstants::Swap(manorconstants* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(valuedata_, other->valuedata_);
    std::swap(stringdata_, other->stringdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorconstants::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorconstants_descriptor_;
  metadata.reflection = manorconstants_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorconstants::kManorconstantsListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorconstants::Sheet_manorconstants()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorconstants::InitAsDefaultInstance() {
}

Sheet_manorconstants::Sheet_manorconstants(const Sheet_manorconstants& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorconstants::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorconstants::~Sheet_manorconstants() {
  SharedDtor();
}

void Sheet_manorconstants::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorconstants::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorconstants::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorconstants_descriptor_;
}

const Sheet_manorconstants& Sheet_manorconstants::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorconstants* Sheet_manorconstants::default_instance_ = NULL;

Sheet_manorconstants* Sheet_manorconstants::New() const {
  return new Sheet_manorconstants;
}

void Sheet_manorconstants::Clear() {
  manorconstants_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorconstants::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorconstants manorconstants_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorconstants_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorconstants_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorconstants_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorconstants::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorconstants manorconstants_List = 1;
  for (int i = 0; i < this->manorconstants_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorconstants_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorconstants::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorconstants manorconstants_List = 1;
  for (int i = 0; i < this->manorconstants_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorconstants_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorconstants::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorconstants manorconstants_List = 1;
  total_size += 1 * this->manorconstants_list_size();
  for (int i = 0; i < this->manorconstants_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorconstants_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorconstants::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorconstants* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorconstants*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorconstants::MergeFrom(const Sheet_manorconstants& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorconstants_list_.MergeFrom(from.manorconstants_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorconstants::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorconstants::CopyFrom(const Sheet_manorconstants& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorconstants::IsInitialized() const {

  return true;
}

void Sheet_manorconstants::Swap(Sheet_manorconstants* other) {
  if (other != this) {
    manorconstants_list_.Swap(&other->manorconstants_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorconstants::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorconstants_descriptor_;
  metadata.reflection = Sheet_manorconstants_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manoritemCost::kItemIdFieldNumber;
const int manoritemCost::kUseForFieldNumber;
const int manoritemCost::kItemValueFieldNumber;
const int manoritemCost::kBackTypeFieldNumber;
const int manoritemCost::kBackValueFieldNumber;
#endif  // !_MSC_VER

manoritemCost::manoritemCost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manoritemCost::InitAsDefaultInstance() {
}

manoritemCost::manoritemCost(const manoritemCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manoritemCost::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  usefor_ = 0;
  itemvalue_ = 0;
  backtype_ = 0;
  backvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manoritemCost::~manoritemCost() {
  SharedDtor();
}

void manoritemCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manoritemCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manoritemCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manoritemCost_descriptor_;
}

const manoritemCost& manoritemCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manoritemCost* manoritemCost::default_instance_ = NULL;

manoritemCost* manoritemCost::New() const {
  return new manoritemCost;
}

void manoritemCost::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_LONGLONG(0);
    usefor_ = 0;
    itemvalue_ = 0;
    backtype_ = 0;
    backvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manoritemCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_useFor;
        break;
      }

      // optional int32 useFor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useFor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &usefor_)));
          set_has_usefor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemValue;
        break;
      }

      // optional int32 itemValue = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemvalue_)));
          set_has_itemvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_backType;
        break;
      }

      // optional int32 backType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backtype_)));
          set_has_backtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_backValue;
        break;
      }

      // optional int32 backValue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_backValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &backvalue_)));
          set_has_backvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manoritemCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemid(), output);
  }

  // optional int32 useFor = 2;
  if (has_usefor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->usefor(), output);
  }

  // optional int32 itemValue = 3;
  if (has_itemvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemvalue(), output);
  }

  // optional int32 backType = 4;
  if (has_backtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->backtype(), output);
  }

  // optional int32 backValue = 5;
  if (has_backvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->backvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manoritemCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemid(), target);
  }

  // optional int32 useFor = 2;
  if (has_usefor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->usefor(), target);
  }

  // optional int32 itemValue = 3;
  if (has_itemvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemvalue(), target);
  }

  // optional int32 backType = 4;
  if (has_backtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->backtype(), target);
  }

  // optional int32 backValue = 5;
  if (has_backvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->backvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manoritemCost::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 useFor = 2;
    if (has_usefor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->usefor());
    }

    // optional int32 itemValue = 3;
    if (has_itemvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemvalue());
    }

    // optional int32 backType = 4;
    if (has_backtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backtype());
    }

    // optional int32 backValue = 5;
    if (has_backvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->backvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manoritemCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manoritemCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manoritemCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manoritemCost::MergeFrom(const manoritemCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_usefor()) {
      set_usefor(from.usefor());
    }
    if (from.has_itemvalue()) {
      set_itemvalue(from.itemvalue());
    }
    if (from.has_backtype()) {
      set_backtype(from.backtype());
    }
    if (from.has_backvalue()) {
      set_backvalue(from.backvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manoritemCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manoritemCost::CopyFrom(const manoritemCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manoritemCost::IsInitialized() const {

  return true;
}

void manoritemCost::Swap(manoritemCost* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(usefor_, other->usefor_);
    std::swap(itemvalue_, other->itemvalue_);
    std::swap(backtype_, other->backtype_);
    std::swap(backvalue_, other->backvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manoritemCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manoritemCost_descriptor_;
  metadata.reflection = manoritemCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manoritemCost::kManoritemCostListFieldNumber;
#endif  // !_MSC_VER

Sheet_manoritemCost::Sheet_manoritemCost()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manoritemCost::InitAsDefaultInstance() {
}

Sheet_manoritemCost::Sheet_manoritemCost(const Sheet_manoritemCost& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manoritemCost::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manoritemCost::~Sheet_manoritemCost() {
  SharedDtor();
}

void Sheet_manoritemCost::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manoritemCost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manoritemCost::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manoritemCost_descriptor_;
}

const Sheet_manoritemCost& Sheet_manoritemCost::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manoritemCost* Sheet_manoritemCost::default_instance_ = NULL;

Sheet_manoritemCost* Sheet_manoritemCost::New() const {
  return new Sheet_manoritemCost;
}

void Sheet_manoritemCost::Clear() {
  manoritemcost_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manoritemCost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manoritemCost manoritemCost_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manoritemCost_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manoritemcost_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manoritemCost_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manoritemCost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manoritemCost manoritemCost_List = 1;
  for (int i = 0; i < this->manoritemcost_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manoritemcost_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manoritemCost::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manoritemCost manoritemCost_List = 1;
  for (int i = 0; i < this->manoritemcost_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manoritemcost_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manoritemCost::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manoritemCost manoritemCost_List = 1;
  total_size += 1 * this->manoritemcost_list_size();
  for (int i = 0; i < this->manoritemcost_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manoritemcost_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manoritemCost::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manoritemCost* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manoritemCost*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manoritemCost::MergeFrom(const Sheet_manoritemCost& from) {
  GOOGLE_CHECK_NE(&from, this);
  manoritemcost_list_.MergeFrom(from.manoritemcost_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manoritemCost::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manoritemCost::CopyFrom(const Sheet_manoritemCost& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manoritemCost::IsInitialized() const {

  return true;
}

void Sheet_manoritemCost::Swap(Sheet_manoritemCost* other) {
  if (other != this) {
    manoritemcost_list_.Swap(&other->manoritemcost_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manoritemCost::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manoritemCost_descriptor_;
  metadata.reflection = Sheet_manoritemCost_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manormanorlistinitialMonsterDesc::kNumFieldNumber;
const int manormanorlistinitialMonsterDesc::kIdFieldNumber;
#endif  // !_MSC_VER

manormanorlistinitialMonsterDesc::manormanorlistinitialMonsterDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manormanorlistinitialMonsterDesc::InitAsDefaultInstance() {
}

manormanorlistinitialMonsterDesc::manormanorlistinitialMonsterDesc(const manormanorlistinitialMonsterDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manormanorlistinitialMonsterDesc::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manormanorlistinitialMonsterDesc::~manormanorlistinitialMonsterDesc() {
  SharedDtor();
}

void manormanorlistinitialMonsterDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manormanorlistinitialMonsterDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manormanorlistinitialMonsterDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manormanorlistinitialMonsterDesc_descriptor_;
}

const manormanorlistinitialMonsterDesc& manormanorlistinitialMonsterDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manormanorlistinitialMonsterDesc* manormanorlistinitialMonsterDesc::default_instance_ = NULL;

manormanorlistinitialMonsterDesc* manormanorlistinitialMonsterDesc::New() const {
  return new manormanorlistinitialMonsterDesc;
}

void manormanorlistinitialMonsterDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manormanorlistinitialMonsterDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Id;
        break;
      }

      // optional int64 Id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manormanorlistinitialMonsterDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manormanorlistinitialMonsterDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int64 Id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manormanorlistinitialMonsterDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 Id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manormanorlistinitialMonsterDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manormanorlistinitialMonsterDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manormanorlistinitialMonsterDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manormanorlistinitialMonsterDesc::MergeFrom(const manormanorlistinitialMonsterDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manormanorlistinitialMonsterDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manormanorlistinitialMonsterDesc::CopyFrom(const manormanorlistinitialMonsterDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manormanorlistinitialMonsterDesc::IsInitialized() const {

  return true;
}

void manormanorlistinitialMonsterDesc::Swap(manormanorlistinitialMonsterDesc* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manormanorlistinitialMonsterDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manormanorlistinitialMonsterDesc_descriptor_;
  metadata.reflection = manormanorlistinitialMonsterDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manormanorlist::kIDFieldNumber;
const int manormanorlist::kNameFieldNumber;
const int manormanorlist::kManorTypeFieldNumber;
const int manormanorlist::kAttackBuildLevelFieldNumber;
const int manormanorlist::kCoreBaseLevelFieldNumber;
const int manormanorlist::kMapIdFieldNumber;
const int manormanorlist::kProductIdFieldNumber;
const int manormanorlist::kCoreBasePathFieldNumber;
const int manormanorlist::kCoreBaseMaxLevelFieldNumber;
const int manormanorlist::kCoreBaseIdFieldNumber;
const int manormanorlist::kHatcheryBasePathFieldNumber;
const int manormanorlist::kHatcheryBaseMaxLevelFieldNumber;
const int manormanorlist::kHatcheryBaseIdFieldNumber;
const int manormanorlist::kBuffBasePathFieldNumber;
const int manormanorlist::kBuffBaseMaxLevelFieldNumber;
const int manormanorlist::kBuffBaseIdFieldNumber;
const int manormanorlist::kShopPathFieldNumber;
const int manormanorlist::kShopMaxLevelFieldNumber;
const int manormanorlist::kShopIdFieldNumber;
const int manormanorlist::kCrossGateBasePathFieldNumber;
const int manormanorlist::kCrossGateMaxLevelFieldNumber;
const int manormanorlist::kCrossGateBaseIdFieldNumber;
const int manormanorlist::kInitialMonsterFieldNumber;
const int manormanorlist::kPatBeastAttackPathFieldNumber;
#endif  // !_MSC_VER

manormanorlist::manormanorlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manormanorlist::InitAsDefaultInstance() {
}

manormanorlist::manormanorlist(const manormanorlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manormanorlist::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manortype_ = 0;
  attackbuildlevel_ = 0;
  corebaselevel_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  productid_ = 0;
  corebasepath_ = GOOGLE_LONGLONG(0);
  corebasemaxlevel_ = 0;
  corebaseid_ = GOOGLE_LONGLONG(0);
  hatcherybasepath_ = GOOGLE_LONGLONG(0);
  hatcherybasemaxlevel_ = 0;
  hatcherybaseid_ = GOOGLE_LONGLONG(0);
  buffbasepath_ = GOOGLE_LONGLONG(0);
  buffbasemaxlevel_ = 0;
  buffbaseid_ = GOOGLE_LONGLONG(0);
  shoppath_ = GOOGLE_LONGLONG(0);
  shopmaxlevel_ = 0;
  shopid_ = GOOGLE_LONGLONG(0);
  crossgatebasepath_ = GOOGLE_LONGLONG(0);
  crossgatemaxlevel_ = 0;
  crossgatebaseid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manormanorlist::~manormanorlist() {
  SharedDtor();
}

void manormanorlist::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void manormanorlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manormanorlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manormanorlist_descriptor_;
}

const manormanorlist& manormanorlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manormanorlist* manormanorlist::default_instance_ = NULL;

manormanorlist* manormanorlist::New() const {
  return new manormanorlist;
}

void manormanorlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    manortype_ = 0;
    attackbuildlevel_ = 0;
    corebaselevel_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
    productid_ = 0;
    corebasepath_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    corebasemaxlevel_ = 0;
    corebaseid_ = GOOGLE_LONGLONG(0);
    hatcherybasepath_ = GOOGLE_LONGLONG(0);
    hatcherybasemaxlevel_ = 0;
    hatcherybaseid_ = GOOGLE_LONGLONG(0);
    buffbasepath_ = GOOGLE_LONGLONG(0);
    buffbasemaxlevel_ = 0;
    buffbaseid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    shoppath_ = GOOGLE_LONGLONG(0);
    shopmaxlevel_ = 0;
    shopid_ = GOOGLE_LONGLONG(0);
    crossgatebasepath_ = GOOGLE_LONGLONG(0);
    crossgatemaxlevel_ = 0;
    crossgatebaseid_ = GOOGLE_LONGLONG(0);
  }
  initialmonster_.Clear();
  patbeastattack_path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manormanorlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_manorType;
        break;
      }

      // optional int32 manorType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &manortype_)));
          set_has_manortype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attackBuildLevel;
        break;
      }

      // optional int32 attackBuildLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackBuildLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attackbuildlevel_)));
          set_has_attackbuildlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_coreBaseLevel;
        break;
      }

      // optional int32 coreBaseLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coreBaseLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &corebaselevel_)));
          set_has_corebaselevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mapId;
        break;
      }

      // optional int64 mapId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_productId;
        break;
      }

      // optional int32 productId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_productId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &productid_)));
          set_has_productid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_coreBasePath;
        break;
      }

      // optional int64 coreBasePath = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coreBasePath:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &corebasepath_)));
          set_has_corebasepath();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_coreBaseMaxLevel;
        break;
      }

      // optional int32 coreBaseMaxLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coreBaseMaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &corebasemaxlevel_)));
          set_has_corebasemaxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_coreBaseId;
        break;
      }

      // optional int64 coreBaseId = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coreBaseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &corebaseid_)));
          set_has_corebaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_hatcheryBasePath;
        break;
      }

      // optional int64 hatcheryBasePath = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hatcheryBasePath:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hatcherybasepath_)));
          set_has_hatcherybasepath();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hatcheryBaseMaxLevel;
        break;
      }

      // optional int32 hatcheryBaseMaxLevel = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hatcheryBaseMaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hatcherybasemaxlevel_)));
          set_has_hatcherybasemaxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hatcheryBaseId;
        break;
      }

      // optional int64 hatcheryBaseId = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hatcheryBaseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &hatcherybaseid_)));
          set_has_hatcherybaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_buffBasePath;
        break;
      }

      // optional int64 buffBasePath = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffBasePath:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buffbasepath_)));
          set_has_buffbasepath();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_buffBaseMaxLevel;
        break;
      }

      // optional int32 buffBaseMaxLevel = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffBaseMaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffbasemaxlevel_)));
          set_has_buffbasemaxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_buffBaseId;
        break;
      }

      // optional int64 buffBaseId = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buffBaseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &buffbaseid_)));
          set_has_buffbaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_shopPath;
        break;
      }

      // optional int64 shopPath = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopPath:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shoppath_)));
          set_has_shoppath();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_shopMaxLevel;
        break;
      }

      // optional int32 shopMaxLevel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopMaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shopmaxlevel_)));
          set_has_shopmaxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_shopId;
        break;
      }

      // optional int64 shopId = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_crossGateBasePath;
        break;
      }

      // optional int64 crossGateBasePath = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crossGateBasePath:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crossgatebasepath_)));
          set_has_crossgatebasepath();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_crossGateMaxLevel;
        break;
      }

      // optional int32 crossGateMaxLevel = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crossGateMaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crossgatemaxlevel_)));
          set_has_crossgatemaxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_crossGateBaseId;
        break;
      }

      // optional int64 crossGateBaseId = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crossGateBaseId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &crossgatebaseid_)));
          set_has_crossgatebaseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_initialMonster;
        break;
      }

      // repeated .proto_ff.manormanorlistinitialMonsterDesc initialMonster = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_initialMonster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_initialmonster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_initialMonster;
        if (input->ExpectTag(192)) goto parse_patBeastAttack_Path;
        break;
      }

      // repeated int64 patBeastAttack_Path = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patBeastAttack_Path:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 2, 192, input, this->mutable_patbeastattack_path())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_patbeastattack_path())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_patBeastAttack_Path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manormanorlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 manorType = 3;
  if (has_manortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->manortype(), output);
  }

  // optional int32 attackBuildLevel = 4;
  if (has_attackbuildlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attackbuildlevel(), output);
  }

  // optional int32 coreBaseLevel = 5;
  if (has_corebaselevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->corebaselevel(), output);
  }

  // optional int64 mapId = 6;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->mapid(), output);
  }

  // optional int32 productId = 7;
  if (has_productid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->productid(), output);
  }

  // optional int64 coreBasePath = 8;
  if (has_corebasepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->corebasepath(), output);
  }

  // optional int32 coreBaseMaxLevel = 9;
  if (has_corebasemaxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->corebasemaxlevel(), output);
  }

  // optional int64 coreBaseId = 10;
  if (has_corebaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->corebaseid(), output);
  }

  // optional int64 hatcheryBasePath = 11;
  if (has_hatcherybasepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->hatcherybasepath(), output);
  }

  // optional int32 hatcheryBaseMaxLevel = 12;
  if (has_hatcherybasemaxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hatcherybasemaxlevel(), output);
  }

  // optional int64 hatcheryBaseId = 13;
  if (has_hatcherybaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->hatcherybaseid(), output);
  }

  // optional int64 buffBasePath = 14;
  if (has_buffbasepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->buffbasepath(), output);
  }

  // optional int32 buffBaseMaxLevel = 15;
  if (has_buffbasemaxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->buffbasemaxlevel(), output);
  }

  // optional int64 buffBaseId = 16;
  if (has_buffbaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->buffbaseid(), output);
  }

  // optional int64 shopPath = 17;
  if (has_shoppath()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->shoppath(), output);
  }

  // optional int32 shopMaxLevel = 18;
  if (has_shopmaxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->shopmaxlevel(), output);
  }

  // optional int64 shopId = 19;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->shopid(), output);
  }

  // optional int64 crossGateBasePath = 20;
  if (has_crossgatebasepath()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->crossgatebasepath(), output);
  }

  // optional int32 crossGateMaxLevel = 21;
  if (has_crossgatemaxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->crossgatemaxlevel(), output);
  }

  // optional int64 crossGateBaseId = 22;
  if (has_crossgatebaseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(22, this->crossgatebaseid(), output);
  }

  // repeated .proto_ff.manormanorlistinitialMonsterDesc initialMonster = 23;
  for (int i = 0; i < this->initialmonster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->initialmonster(i), output);
  }

  // repeated int64 patBeastAttack_Path = 24;
  for (int i = 0; i < this->patbeastattack_path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      24, this->patbeastattack_path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manormanorlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 manorType = 3;
  if (has_manortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->manortype(), target);
  }

  // optional int32 attackBuildLevel = 4;
  if (has_attackbuildlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attackbuildlevel(), target);
  }

  // optional int32 coreBaseLevel = 5;
  if (has_corebaselevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->corebaselevel(), target);
  }

  // optional int64 mapId = 6;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->mapid(), target);
  }

  // optional int32 productId = 7;
  if (has_productid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->productid(), target);
  }

  // optional int64 coreBasePath = 8;
  if (has_corebasepath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->corebasepath(), target);
  }

  // optional int32 coreBaseMaxLevel = 9;
  if (has_corebasemaxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->corebasemaxlevel(), target);
  }

  // optional int64 coreBaseId = 10;
  if (has_corebaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->corebaseid(), target);
  }

  // optional int64 hatcheryBasePath = 11;
  if (has_hatcherybasepath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->hatcherybasepath(), target);
  }

  // optional int32 hatcheryBaseMaxLevel = 12;
  if (has_hatcherybasemaxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hatcherybasemaxlevel(), target);
  }

  // optional int64 hatcheryBaseId = 13;
  if (has_hatcherybaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->hatcherybaseid(), target);
  }

  // optional int64 buffBasePath = 14;
  if (has_buffbasepath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->buffbasepath(), target);
  }

  // optional int32 buffBaseMaxLevel = 15;
  if (has_buffbasemaxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->buffbasemaxlevel(), target);
  }

  // optional int64 buffBaseId = 16;
  if (has_buffbaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->buffbaseid(), target);
  }

  // optional int64 shopPath = 17;
  if (has_shoppath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->shoppath(), target);
  }

  // optional int32 shopMaxLevel = 18;
  if (has_shopmaxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->shopmaxlevel(), target);
  }

  // optional int64 shopId = 19;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->shopid(), target);
  }

  // optional int64 crossGateBasePath = 20;
  if (has_crossgatebasepath()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->crossgatebasepath(), target);
  }

  // optional int32 crossGateMaxLevel = 21;
  if (has_crossgatemaxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->crossgatemaxlevel(), target);
  }

  // optional int64 crossGateBaseId = 22;
  if (has_crossgatebaseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(22, this->crossgatebaseid(), target);
  }

  // repeated .proto_ff.manormanorlistinitialMonsterDesc initialMonster = 23;
  for (int i = 0; i < this->initialmonster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->initialmonster(i), target);
  }

  // repeated int64 patBeastAttack_Path = 24;
  for (int i = 0; i < this->patbeastattack_path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(24, this->patbeastattack_path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manormanorlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 manorType = 3;
    if (has_manortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->manortype());
    }

    // optional int32 attackBuildLevel = 4;
    if (has_attackbuildlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attackbuildlevel());
    }

    // optional int32 coreBaseLevel = 5;
    if (has_corebaselevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->corebaselevel());
    }

    // optional int64 mapId = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int32 productId = 7;
    if (has_productid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->productid());
    }

    // optional int64 coreBasePath = 8;
    if (has_corebasepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->corebasepath());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 coreBaseMaxLevel = 9;
    if (has_corebasemaxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->corebasemaxlevel());
    }

    // optional int64 coreBaseId = 10;
    if (has_corebaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->corebaseid());
    }

    // optional int64 hatcheryBasePath = 11;
    if (has_hatcherybasepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hatcherybasepath());
    }

    // optional int32 hatcheryBaseMaxLevel = 12;
    if (has_hatcherybasemaxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hatcherybasemaxlevel());
    }

    // optional int64 hatcheryBaseId = 13;
    if (has_hatcherybaseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->hatcherybaseid());
    }

    // optional int64 buffBasePath = 14;
    if (has_buffbasepath()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buffbasepath());
    }

    // optional int32 buffBaseMaxLevel = 15;
    if (has_buffbasemaxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffbasemaxlevel());
    }

    // optional int64 buffBaseId = 16;
    if (has_buffbaseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->buffbaseid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 shopPath = 17;
    if (has_shoppath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shoppath());
    }

    // optional int32 shopMaxLevel = 18;
    if (has_shopmaxlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shopmaxlevel());
    }

    // optional int64 shopId = 19;
    if (has_shopid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->shopid());
    }

    // optional int64 crossGateBasePath = 20;
    if (has_crossgatebasepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crossgatebasepath());
    }

    // optional int32 crossGateMaxLevel = 21;
    if (has_crossgatemaxlevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crossgatemaxlevel());
    }

    // optional int64 crossGateBaseId = 22;
    if (has_crossgatebaseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->crossgatebaseid());
    }

  }
  // repeated .proto_ff.manormanorlistinitialMonsterDesc initialMonster = 23;
  total_size += 2 * this->initialmonster_size();
  for (int i = 0; i < this->initialmonster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->initialmonster(i));
  }

  // repeated int64 patBeastAttack_Path = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->patbeastattack_path_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->patbeastattack_path(i));
    }
    total_size += 2 * this->patbeastattack_path_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manormanorlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manormanorlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manormanorlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manormanorlist::MergeFrom(const manormanorlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  initialmonster_.MergeFrom(from.initialmonster_);
  patbeastattack_path_.MergeFrom(from.patbeastattack_path_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_manortype()) {
      set_manortype(from.manortype());
    }
    if (from.has_attackbuildlevel()) {
      set_attackbuildlevel(from.attackbuildlevel());
    }
    if (from.has_corebaselevel()) {
      set_corebaselevel(from.corebaselevel());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_productid()) {
      set_productid(from.productid());
    }
    if (from.has_corebasepath()) {
      set_corebasepath(from.corebasepath());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_corebasemaxlevel()) {
      set_corebasemaxlevel(from.corebasemaxlevel());
    }
    if (from.has_corebaseid()) {
      set_corebaseid(from.corebaseid());
    }
    if (from.has_hatcherybasepath()) {
      set_hatcherybasepath(from.hatcherybasepath());
    }
    if (from.has_hatcherybasemaxlevel()) {
      set_hatcherybasemaxlevel(from.hatcherybasemaxlevel());
    }
    if (from.has_hatcherybaseid()) {
      set_hatcherybaseid(from.hatcherybaseid());
    }
    if (from.has_buffbasepath()) {
      set_buffbasepath(from.buffbasepath());
    }
    if (from.has_buffbasemaxlevel()) {
      set_buffbasemaxlevel(from.buffbasemaxlevel());
    }
    if (from.has_buffbaseid()) {
      set_buffbaseid(from.buffbaseid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_shoppath()) {
      set_shoppath(from.shoppath());
    }
    if (from.has_shopmaxlevel()) {
      set_shopmaxlevel(from.shopmaxlevel());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_crossgatebasepath()) {
      set_crossgatebasepath(from.crossgatebasepath());
    }
    if (from.has_crossgatemaxlevel()) {
      set_crossgatemaxlevel(from.crossgatemaxlevel());
    }
    if (from.has_crossgatebaseid()) {
      set_crossgatebaseid(from.crossgatebaseid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manormanorlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manormanorlist::CopyFrom(const manormanorlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manormanorlist::IsInitialized() const {

  return true;
}

void manormanorlist::Swap(manormanorlist* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(manortype_, other->manortype_);
    std::swap(attackbuildlevel_, other->attackbuildlevel_);
    std::swap(corebaselevel_, other->corebaselevel_);
    std::swap(mapid_, other->mapid_);
    std::swap(productid_, other->productid_);
    std::swap(corebasepath_, other->corebasepath_);
    std::swap(corebasemaxlevel_, other->corebasemaxlevel_);
    std::swap(corebaseid_, other->corebaseid_);
    std::swap(hatcherybasepath_, other->hatcherybasepath_);
    std::swap(hatcherybasemaxlevel_, other->hatcherybasemaxlevel_);
    std::swap(hatcherybaseid_, other->hatcherybaseid_);
    std::swap(buffbasepath_, other->buffbasepath_);
    std::swap(buffbasemaxlevel_, other->buffbasemaxlevel_);
    std::swap(buffbaseid_, other->buffbaseid_);
    std::swap(shoppath_, other->shoppath_);
    std::swap(shopmaxlevel_, other->shopmaxlevel_);
    std::swap(shopid_, other->shopid_);
    std::swap(crossgatebasepath_, other->crossgatebasepath_);
    std::swap(crossgatemaxlevel_, other->crossgatemaxlevel_);
    std::swap(crossgatebaseid_, other->crossgatebaseid_);
    initialmonster_.Swap(&other->initialmonster_);
    patbeastattack_path_.Swap(&other->patbeastattack_path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manormanorlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manormanorlist_descriptor_;
  metadata.reflection = manormanorlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manormanorlist::kManormanorlistListFieldNumber;
#endif  // !_MSC_VER

Sheet_manormanorlist::Sheet_manormanorlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manormanorlist::InitAsDefaultInstance() {
}

Sheet_manormanorlist::Sheet_manormanorlist(const Sheet_manormanorlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manormanorlist::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manormanorlist::~Sheet_manormanorlist() {
  SharedDtor();
}

void Sheet_manormanorlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manormanorlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manormanorlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manormanorlist_descriptor_;
}

const Sheet_manormanorlist& Sheet_manormanorlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manormanorlist* Sheet_manormanorlist::default_instance_ = NULL;

Sheet_manormanorlist* Sheet_manormanorlist::New() const {
  return new Sheet_manormanorlist;
}

void Sheet_manormanorlist::Clear() {
  manormanorlist_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manormanorlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manormanorlist manormanorlist_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manormanorlist_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manormanorlist_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manormanorlist_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manormanorlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manormanorlist manormanorlist_List = 1;
  for (int i = 0; i < this->manormanorlist_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manormanorlist_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manormanorlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manormanorlist manormanorlist_List = 1;
  for (int i = 0; i < this->manormanorlist_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manormanorlist_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manormanorlist::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manormanorlist manormanorlist_List = 1;
  total_size += 1 * this->manormanorlist_list_size();
  for (int i = 0; i < this->manormanorlist_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manormanorlist_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manormanorlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manormanorlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manormanorlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manormanorlist::MergeFrom(const Sheet_manormanorlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  manormanorlist_list_.MergeFrom(from.manormanorlist_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manormanorlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manormanorlist::CopyFrom(const Sheet_manormanorlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manormanorlist::IsInitialized() const {

  return true;
}

void Sheet_manormanorlist::Swap(Sheet_manormanorlist* other) {
  if (other != this) {
    manormanorlist_list_.Swap(&other->manormanorlist_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manormanorlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manormanorlist_descriptor_;
  metadata.reflection = Sheet_manormanorlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorproductproductDesc::kItemFieldNumber;
const int manorproductproductDesc::kNumFieldNumber;
const int manorproductproductDesc::kBuildLevleFieldNumber;
#endif  // !_MSC_VER

manorproductproductDesc::manorproductproductDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorproductproductDesc::InitAsDefaultInstance() {
}

manorproductproductDesc::manorproductproductDesc(const manorproductproductDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorproductproductDesc::SharedCtor() {
  _cached_size_ = 0;
  item_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  buildlevle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorproductproductDesc::~manorproductproductDesc() {
  SharedDtor();
}

void manorproductproductDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorproductproductDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorproductproductDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorproductproductDesc_descriptor_;
}

const manorproductproductDesc& manorproductproductDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorproductproductDesc* manorproductproductDesc::default_instance_ = NULL;

manorproductproductDesc* manorproductproductDesc::New() const {
  return new manorproductproductDesc;
}

void manorproductproductDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_ = GOOGLE_LONGLONG(0);
    num_ = 0;
    buildlevle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorproductproductDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Num;
        break;
      }

      // optional int32 Num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buildLevle;
        break;
      }

      // optional int32 buildLevle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildLevle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildlevle_)));
          set_has_buildlevle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorproductproductDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Item = 1;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->item(), output);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 buildLevle = 3;
  if (has_buildlevle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buildlevle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorproductproductDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Item = 1;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->item(), target);
  }

  // optional int32 Num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 buildLevle = 3;
  if (has_buildlevle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buildlevle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorproductproductDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Item = 1;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->item());
    }

    // optional int32 Num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 buildLevle = 3;
    if (has_buildlevle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildlevle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorproductproductDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorproductproductDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorproductproductDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorproductproductDesc::MergeFrom(const manorproductproductDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item()) {
      set_item(from.item());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_buildlevle()) {
      set_buildlevle(from.buildlevle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorproductproductDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorproductproductDesc::CopyFrom(const manorproductproductDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorproductproductDesc::IsInitialized() const {

  return true;
}

void manorproductproductDesc::Swap(manorproductproductDesc* other) {
  if (other != this) {
    std::swap(item_, other->item_);
    std::swap(num_, other->num_);
    std::swap(buildlevle_, other->buildlevle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorproductproductDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorproductproductDesc_descriptor_;
  metadata.reflection = manorproductproductDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorproduct::kIDFieldNumber;
const int manorproduct::kProductFieldNumber;
#endif  // !_MSC_VER

manorproduct::manorproduct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorproduct::InitAsDefaultInstance() {
}

manorproduct::manorproduct(const manorproduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorproduct::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorproduct::~manorproduct() {
  SharedDtor();
}

void manorproduct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorproduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorproduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorproduct_descriptor_;
}

const manorproduct& manorproduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorproduct* manorproduct::default_instance_ = NULL;

manorproduct* manorproduct::New() const {
  return new manorproduct;
}

void manorproduct::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  product_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorproduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_product;
        break;
      }

      // repeated .proto_ff.manorproductproductDesc product = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_product:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_product()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_product;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorproduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .proto_ff.manorproductproductDesc product = 2;
  for (int i = 0; i < this->product_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->product(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorproduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .proto_ff.manorproductproductDesc product = 2;
  for (int i = 0; i < this->product_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->product(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorproduct::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .proto_ff.manorproductproductDesc product = 2;
  total_size += 1 * this->product_size();
  for (int i = 0; i < this->product_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->product(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorproduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorproduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorproduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorproduct::MergeFrom(const manorproduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  product_.MergeFrom(from.product_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorproduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorproduct::CopyFrom(const manorproduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorproduct::IsInitialized() const {

  return true;
}

void manorproduct::Swap(manorproduct* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    product_.Swap(&other->product_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorproduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorproduct_descriptor_;
  metadata.reflection = manorproduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorproduct::kManorproductListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorproduct::Sheet_manorproduct()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorproduct::InitAsDefaultInstance() {
}

Sheet_manorproduct::Sheet_manorproduct(const Sheet_manorproduct& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorproduct::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorproduct::~Sheet_manorproduct() {
  SharedDtor();
}

void Sheet_manorproduct::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorproduct::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorproduct::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorproduct_descriptor_;
}

const Sheet_manorproduct& Sheet_manorproduct::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorproduct* Sheet_manorproduct::default_instance_ = NULL;

Sheet_manorproduct* Sheet_manorproduct::New() const {
  return new Sheet_manorproduct;
}

void Sheet_manorproduct::Clear() {
  manorproduct_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorproduct::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorproduct manorproduct_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorproduct_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorproduct_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorproduct_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorproduct::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorproduct manorproduct_List = 1;
  for (int i = 0; i < this->manorproduct_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorproduct_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorproduct::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorproduct manorproduct_List = 1;
  for (int i = 0; i < this->manorproduct_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorproduct_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorproduct::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorproduct manorproduct_List = 1;
  total_size += 1 * this->manorproduct_list_size();
  for (int i = 0; i < this->manorproduct_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorproduct_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorproduct::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorproduct* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorproduct*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorproduct::MergeFrom(const Sheet_manorproduct& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorproduct_list_.MergeFrom(from.manorproduct_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorproduct::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorproduct::CopyFrom(const Sheet_manorproduct& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorproduct::IsInitialized() const {

  return true;
}

void Sheet_manorproduct::Swap(Sheet_manorproduct* other) {
  if (other != this) {
    manorproduct_list_.Swap(&other->manorproduct_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorproduct::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorproduct_descriptor_;
  metadata.reflection = Sheet_manorproduct_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorbuild::kIDFieldNumber;
const int manorbuild::kNameFieldNumber;
const int manorbuild::kBuildingTypeFieldNumber;
const int manorbuild::kMonsterIdFieldNumber;
const int manorbuild::kBuildingvalueFieldNumber;
const int manorbuild::kBuildingAddBuffFieldNumber;
const int manorbuild::kBuildingConsumeFieldNumber;
#endif  // !_MSC_VER

manorbuild::manorbuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorbuild::InitAsDefaultInstance() {
}

manorbuild::manorbuild(const manorbuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorbuild::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buildingtype_ = 0;
  monsterid_ = GOOGLE_LONGLONG(0);
  buildingvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buildingaddbuff_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  buildingconsume_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorbuild::~manorbuild() {
  SharedDtor();
}

void manorbuild::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (buildingvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete buildingvalue_;
  }
  if (buildingaddbuff_ != &::google::protobuf::internal::kEmptyString) {
    delete buildingaddbuff_;
  }
  if (buildingconsume_ != &::google::protobuf::internal::kEmptyString) {
    delete buildingconsume_;
  }
  if (this != default_instance_) {
  }
}

void manorbuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorbuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorbuild_descriptor_;
}

const manorbuild& manorbuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorbuild* manorbuild::default_instance_ = NULL;

manorbuild* manorbuild::New() const {
  return new manorbuild;
}

void manorbuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    buildingtype_ = 0;
    monsterid_ = GOOGLE_LONGLONG(0);
    if (has_buildingvalue()) {
      if (buildingvalue_ != &::google::protobuf::internal::kEmptyString) {
        buildingvalue_->clear();
      }
    }
    if (has_buildingaddbuff()) {
      if (buildingaddbuff_ != &::google::protobuf::internal::kEmptyString) {
        buildingaddbuff_->clear();
      }
    }
    if (has_buildingconsume()) {
      if (buildingconsume_ != &::google::protobuf::internal::kEmptyString) {
        buildingconsume_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorbuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buildingType;
        break;
      }

      // optional int32 buildingType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buildingType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buildingtype_)));
          set_has_buildingtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_monsterId;
        break;
      }

      // optional int64 monsterId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monsterId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &monsterid_)));
          set_has_monsterid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_buildingvalue;
        break;
      }

      // optional string buildingvalue = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildingvalue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildingvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildingvalue().data(), this->buildingvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_buildingAddBuff;
        break;
      }

      // optional string buildingAddBuff = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildingAddBuff:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildingaddbuff()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildingaddbuff().data(), this->buildingaddbuff().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_buildingConsume;
        break;
      }

      // optional string buildingConsume = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buildingConsume:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_buildingconsume()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->buildingconsume().data(), this->buildingconsume().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorbuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 buildingType = 3;
  if (has_buildingtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buildingtype(), output);
  }

  // optional int64 monsterId = 4;
  if (has_monsterid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->monsterid(), output);
  }

  // optional string buildingvalue = 5;
  if (has_buildingvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildingvalue().data(), this->buildingvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->buildingvalue(), output);
  }

  // optional string buildingAddBuff = 6;
  if (has_buildingaddbuff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildingaddbuff().data(), this->buildingaddbuff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->buildingaddbuff(), output);
  }

  // optional string buildingConsume = 7;
  if (has_buildingconsume()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildingconsume().data(), this->buildingconsume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->buildingconsume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorbuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 buildingType = 3;
  if (has_buildingtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buildingtype(), target);
  }

  // optional int64 monsterId = 4;
  if (has_monsterid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->monsterid(), target);
  }

  // optional string buildingvalue = 5;
  if (has_buildingvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildingvalue().data(), this->buildingvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->buildingvalue(), target);
  }

  // optional string buildingAddBuff = 6;
  if (has_buildingaddbuff()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildingaddbuff().data(), this->buildingaddbuff().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->buildingaddbuff(), target);
  }

  // optional string buildingConsume = 7;
  if (has_buildingconsume()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->buildingconsume().data(), this->buildingconsume().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->buildingconsume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorbuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 buildingType = 3;
    if (has_buildingtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buildingtype());
    }

    // optional int64 monsterId = 4;
    if (has_monsterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->monsterid());
    }

    // optional string buildingvalue = 5;
    if (has_buildingvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buildingvalue());
    }

    // optional string buildingAddBuff = 6;
    if (has_buildingaddbuff()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buildingaddbuff());
    }

    // optional string buildingConsume = 7;
    if (has_buildingconsume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->buildingconsume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorbuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorbuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorbuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorbuild::MergeFrom(const manorbuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_buildingtype()) {
      set_buildingtype(from.buildingtype());
    }
    if (from.has_monsterid()) {
      set_monsterid(from.monsterid());
    }
    if (from.has_buildingvalue()) {
      set_buildingvalue(from.buildingvalue());
    }
    if (from.has_buildingaddbuff()) {
      set_buildingaddbuff(from.buildingaddbuff());
    }
    if (from.has_buildingconsume()) {
      set_buildingconsume(from.buildingconsume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorbuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorbuild::CopyFrom(const manorbuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorbuild::IsInitialized() const {

  return true;
}

void manorbuild::Swap(manorbuild* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(buildingtype_, other->buildingtype_);
    std::swap(monsterid_, other->monsterid_);
    std::swap(buildingvalue_, other->buildingvalue_);
    std::swap(buildingaddbuff_, other->buildingaddbuff_);
    std::swap(buildingconsume_, other->buildingconsume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorbuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorbuild_descriptor_;
  metadata.reflection = manorbuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorbuild::kManorbuildListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorbuild::Sheet_manorbuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorbuild::InitAsDefaultInstance() {
}

Sheet_manorbuild::Sheet_manorbuild(const Sheet_manorbuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorbuild::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorbuild::~Sheet_manorbuild() {
  SharedDtor();
}

void Sheet_manorbuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorbuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorbuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorbuild_descriptor_;
}

const Sheet_manorbuild& Sheet_manorbuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorbuild* Sheet_manorbuild::default_instance_ = NULL;

Sheet_manorbuild* Sheet_manorbuild::New() const {
  return new Sheet_manorbuild;
}

void Sheet_manorbuild::Clear() {
  manorbuild_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorbuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorbuild manorbuild_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorbuild_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorbuild_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorbuild_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorbuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorbuild manorbuild_List = 1;
  for (int i = 0; i < this->manorbuild_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorbuild_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorbuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorbuild manorbuild_List = 1;
  for (int i = 0; i < this->manorbuild_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorbuild_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorbuild::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorbuild manorbuild_List = 1;
  total_size += 1 * this->manorbuild_list_size();
  for (int i = 0; i < this->manorbuild_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorbuild_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorbuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorbuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorbuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorbuild::MergeFrom(const Sheet_manorbuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorbuild_list_.MergeFrom(from.manorbuild_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorbuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorbuild::CopyFrom(const Sheet_manorbuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorbuild::IsInitialized() const {

  return true;
}

void Sheet_manorbuild::Swap(Sheet_manorbuild* other) {
  if (other != this) {
    manorbuild_list_.Swap(&other->manorbuild_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorbuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorbuild_descriptor_;
  metadata.reflection = Sheet_manorbuild_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorbuildUpbuildDesc::kTypeFieldNumber;
const int manorbuildUpbuildDesc::kExpFieldNumber;
#endif  // !_MSC_VER

manorbuildUpbuildDesc::manorbuildUpbuildDesc()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorbuildUpbuildDesc::InitAsDefaultInstance() {
}

manorbuildUpbuildDesc::manorbuildUpbuildDesc(const manorbuildUpbuildDesc& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorbuildUpbuildDesc::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorbuildUpbuildDesc::~manorbuildUpbuildDesc() {
  SharedDtor();
}

void manorbuildUpbuildDesc::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorbuildUpbuildDesc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorbuildUpbuildDesc::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorbuildUpbuildDesc_descriptor_;
}

const manorbuildUpbuildDesc& manorbuildUpbuildDesc::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorbuildUpbuildDesc* manorbuildUpbuildDesc::default_instance_ = NULL;

manorbuildUpbuildDesc* manorbuildUpbuildDesc::New() const {
  return new manorbuildUpbuildDesc;
}

void manorbuildUpbuildDesc::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorbuildUpbuildDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorbuildUpbuildDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorbuildUpbuildDesc::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorbuildUpbuildDesc::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorbuildUpbuildDesc::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorbuildUpbuildDesc* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorbuildUpbuildDesc*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorbuildUpbuildDesc::MergeFrom(const manorbuildUpbuildDesc& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorbuildUpbuildDesc::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorbuildUpbuildDesc::CopyFrom(const manorbuildUpbuildDesc& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorbuildUpbuildDesc::IsInitialized() const {

  return true;
}

void manorbuildUpbuildDesc::Swap(manorbuildUpbuildDesc* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorbuildUpbuildDesc::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorbuildUpbuildDesc_descriptor_;
  metadata.reflection = manorbuildUpbuildDesc_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorbuildUp::kLevelFieldNumber;
const int manorbuildUp::kBuildFieldNumber;
#endif  // !_MSC_VER

manorbuildUp::manorbuildUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorbuildUp::InitAsDefaultInstance() {
}

manorbuildUp::manorbuildUp(const manorbuildUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorbuildUp::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorbuildUp::~manorbuildUp() {
  SharedDtor();
}

void manorbuildUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorbuildUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorbuildUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorbuildUp_descriptor_;
}

const manorbuildUp& manorbuildUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorbuildUp* manorbuildUp::default_instance_ = NULL;

manorbuildUp* manorbuildUp::New() const {
  return new manorbuildUp;
}

void manorbuildUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  build_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorbuildUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_build;
        break;
      }

      // repeated .proto_ff.manorbuildUpbuildDesc build = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_build:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_build()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_build;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorbuildUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // repeated .proto_ff.manorbuildUpbuildDesc build = 2;
  for (int i = 0; i < this->build_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->build(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorbuildUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // repeated .proto_ff.manorbuildUpbuildDesc build = 2;
  for (int i = 0; i < this->build_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->build(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorbuildUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  // repeated .proto_ff.manorbuildUpbuildDesc build = 2;
  total_size += 1 * this->build_size();
  for (int i = 0; i < this->build_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->build(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorbuildUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorbuildUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorbuildUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorbuildUp::MergeFrom(const manorbuildUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  build_.MergeFrom(from.build_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorbuildUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorbuildUp::CopyFrom(const manorbuildUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorbuildUp::IsInitialized() const {

  return true;
}

void manorbuildUp::Swap(manorbuildUp* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    build_.Swap(&other->build_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorbuildUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorbuildUp_descriptor_;
  metadata.reflection = manorbuildUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorbuildUp::kManorbuildUpListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorbuildUp::Sheet_manorbuildUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorbuildUp::InitAsDefaultInstance() {
}

Sheet_manorbuildUp::Sheet_manorbuildUp(const Sheet_manorbuildUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorbuildUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorbuildUp::~Sheet_manorbuildUp() {
  SharedDtor();
}

void Sheet_manorbuildUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorbuildUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorbuildUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorbuildUp_descriptor_;
}

const Sheet_manorbuildUp& Sheet_manorbuildUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorbuildUp* Sheet_manorbuildUp::default_instance_ = NULL;

Sheet_manorbuildUp* Sheet_manorbuildUp::New() const {
  return new Sheet_manorbuildUp;
}

void Sheet_manorbuildUp::Clear() {
  manorbuildup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorbuildUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorbuildUp manorbuildUp_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorbuildUp_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorbuildup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorbuildUp_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorbuildUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorbuildUp manorbuildUp_List = 1;
  for (int i = 0; i < this->manorbuildup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorbuildup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorbuildUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorbuildUp manorbuildUp_List = 1;
  for (int i = 0; i < this->manorbuildup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorbuildup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorbuildUp::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorbuildUp manorbuildUp_List = 1;
  total_size += 1 * this->manorbuildup_list_size();
  for (int i = 0; i < this->manorbuildup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorbuildup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorbuildUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorbuildUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorbuildUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorbuildUp::MergeFrom(const Sheet_manorbuildUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorbuildup_list_.MergeFrom(from.manorbuildup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorbuildUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorbuildUp::CopyFrom(const Sheet_manorbuildUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorbuildUp::IsInitialized() const {

  return true;
}

void Sheet_manorbuildUp::Swap(Sheet_manorbuildUp* other) {
  if (other != this) {
    manorbuildup_list_.Swap(&other->manorbuildup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorbuildUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorbuildUp_descriptor_;
  metadata.reflection = Sheet_manorbuildUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manoregg::kEggItemIDFieldNumber;
const int manoregg::kIncubationTimeFieldNumber;
const int manoregg::kPatBeastsProbabFieldNumber;
#endif  // !_MSC_VER

manoregg::manoregg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manoregg::InitAsDefaultInstance() {
}

manoregg::manoregg(const manoregg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manoregg::SharedCtor() {
  _cached_size_ = 0;
  eggitemid_ = GOOGLE_LONGLONG(0);
  incubationtime_ = 0;
  patbeastsprobab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manoregg::~manoregg() {
  SharedDtor();
}

void manoregg::SharedDtor() {
  if (patbeastsprobab_ != &::google::protobuf::internal::kEmptyString) {
    delete patbeastsprobab_;
  }
  if (this != default_instance_) {
  }
}

void manoregg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manoregg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manoregg_descriptor_;
}

const manoregg& manoregg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manoregg* manoregg::default_instance_ = NULL;

manoregg* manoregg::New() const {
  return new manoregg;
}

void manoregg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eggitemid_ = GOOGLE_LONGLONG(0);
    incubationtime_ = 0;
    if (has_patbeastsprobab()) {
      if (patbeastsprobab_ != &::google::protobuf::internal::kEmptyString) {
        patbeastsprobab_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manoregg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 eggItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &eggitemid_)));
          set_has_eggitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_incubationTime;
        break;
      }

      // optional int32 incubationTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_incubationTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &incubationtime_)));
          set_has_incubationtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_patBeastsProbab;
        break;
      }

      // optional string patBeastsProbab = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patBeastsProbab:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patbeastsprobab()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patbeastsprobab().data(), this->patbeastsprobab().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manoregg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 eggItemID = 1;
  if (has_eggitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->eggitemid(), output);
  }

  // optional int32 incubationTime = 2;
  if (has_incubationtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->incubationtime(), output);
  }

  // optional string patBeastsProbab = 3;
  if (has_patbeastsprobab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patbeastsprobab().data(), this->patbeastsprobab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->patbeastsprobab(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manoregg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 eggItemID = 1;
  if (has_eggitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->eggitemid(), target);
  }

  // optional int32 incubationTime = 2;
  if (has_incubationtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->incubationtime(), target);
  }

  // optional string patBeastsProbab = 3;
  if (has_patbeastsprobab()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patbeastsprobab().data(), this->patbeastsprobab().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->patbeastsprobab(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manoregg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 eggItemID = 1;
    if (has_eggitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->eggitemid());
    }

    // optional int32 incubationTime = 2;
    if (has_incubationtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->incubationtime());
    }

    // optional string patBeastsProbab = 3;
    if (has_patbeastsprobab()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patbeastsprobab());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manoregg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manoregg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manoregg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manoregg::MergeFrom(const manoregg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eggitemid()) {
      set_eggitemid(from.eggitemid());
    }
    if (from.has_incubationtime()) {
      set_incubationtime(from.incubationtime());
    }
    if (from.has_patbeastsprobab()) {
      set_patbeastsprobab(from.patbeastsprobab());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manoregg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manoregg::CopyFrom(const manoregg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manoregg::IsInitialized() const {

  return true;
}

void manoregg::Swap(manoregg* other) {
  if (other != this) {
    std::swap(eggitemid_, other->eggitemid_);
    std::swap(incubationtime_, other->incubationtime_);
    std::swap(patbeastsprobab_, other->patbeastsprobab_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manoregg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manoregg_descriptor_;
  metadata.reflection = manoregg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manoregg::kManoreggListFieldNumber;
#endif  // !_MSC_VER

Sheet_manoregg::Sheet_manoregg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manoregg::InitAsDefaultInstance() {
}

Sheet_manoregg::Sheet_manoregg(const Sheet_manoregg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manoregg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manoregg::~Sheet_manoregg() {
  SharedDtor();
}

void Sheet_manoregg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manoregg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manoregg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manoregg_descriptor_;
}

const Sheet_manoregg& Sheet_manoregg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manoregg* Sheet_manoregg::default_instance_ = NULL;

Sheet_manoregg* Sheet_manoregg::New() const {
  return new Sheet_manoregg;
}

void Sheet_manoregg::Clear() {
  manoregg_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manoregg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manoregg manoregg_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manoregg_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manoregg_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manoregg_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manoregg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manoregg manoregg_List = 1;
  for (int i = 0; i < this->manoregg_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manoregg_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manoregg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manoregg manoregg_List = 1;
  for (int i = 0; i < this->manoregg_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manoregg_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manoregg::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manoregg manoregg_List = 1;
  total_size += 1 * this->manoregg_list_size();
  for (int i = 0; i < this->manoregg_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manoregg_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manoregg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manoregg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manoregg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manoregg::MergeFrom(const Sheet_manoregg& from) {
  GOOGLE_CHECK_NE(&from, this);
  manoregg_list_.MergeFrom(from.manoregg_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manoregg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manoregg::CopyFrom(const Sheet_manoregg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manoregg::IsInitialized() const {

  return true;
}

void Sheet_manoregg::Swap(Sheet_manoregg* other) {
  if (other != this) {
    manoregg_list_.Swap(&other->manoregg_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manoregg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manoregg_descriptor_;
  metadata.reflection = Sheet_manoregg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorpatBeast::kIdFieldNumber;
#endif  // !_MSC_VER

manorpatBeast::manorpatBeast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorpatBeast::InitAsDefaultInstance() {
}

manorpatBeast::manorpatBeast(const manorpatBeast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorpatBeast::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorpatBeast::~manorpatBeast() {
  SharedDtor();
}

void manorpatBeast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorpatBeast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorpatBeast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorpatBeast_descriptor_;
}

const manorpatBeast& manorpatBeast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorpatBeast* manorpatBeast::default_instance_ = NULL;

manorpatBeast* manorpatBeast::New() const {
  return new manorpatBeast;
}

void manorpatBeast::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorpatBeast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 Id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorpatBeast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 Id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorpatBeast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 Id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorpatBeast::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 Id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorpatBeast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorpatBeast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorpatBeast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorpatBeast::MergeFrom(const manorpatBeast& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorpatBeast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorpatBeast::CopyFrom(const manorpatBeast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorpatBeast::IsInitialized() const {

  return true;
}

void manorpatBeast::Swap(manorpatBeast* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorpatBeast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorpatBeast_descriptor_;
  metadata.reflection = manorpatBeast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorpatBeast::kManorpatBeastListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorpatBeast::Sheet_manorpatBeast()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorpatBeast::InitAsDefaultInstance() {
}

Sheet_manorpatBeast::Sheet_manorpatBeast(const Sheet_manorpatBeast& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorpatBeast::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorpatBeast::~Sheet_manorpatBeast() {
  SharedDtor();
}

void Sheet_manorpatBeast::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorpatBeast::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorpatBeast::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorpatBeast_descriptor_;
}

const Sheet_manorpatBeast& Sheet_manorpatBeast::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorpatBeast* Sheet_manorpatBeast::default_instance_ = NULL;

Sheet_manorpatBeast* Sheet_manorpatBeast::New() const {
  return new Sheet_manorpatBeast;
}

void Sheet_manorpatBeast::Clear() {
  manorpatbeast_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorpatBeast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorpatBeast manorpatBeast_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorpatBeast_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorpatbeast_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorpatBeast_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorpatBeast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorpatBeast manorpatBeast_List = 1;
  for (int i = 0; i < this->manorpatbeast_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorpatbeast_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorpatBeast::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorpatBeast manorpatBeast_List = 1;
  for (int i = 0; i < this->manorpatbeast_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorpatbeast_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorpatBeast::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorpatBeast manorpatBeast_List = 1;
  total_size += 1 * this->manorpatbeast_list_size();
  for (int i = 0; i < this->manorpatbeast_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorpatbeast_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorpatBeast::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorpatBeast* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorpatBeast*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorpatBeast::MergeFrom(const Sheet_manorpatBeast& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorpatbeast_list_.MergeFrom(from.manorpatbeast_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorpatBeast::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorpatBeast::CopyFrom(const Sheet_manorpatBeast& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorpatBeast::IsInitialized() const {

  return true;
}

void Sheet_manorpatBeast::Swap(Sheet_manorpatBeast* other) {
  if (other != this) {
    manorpatbeast_list_.Swap(&other->manorpatbeast_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorpatBeast::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorpatBeast_descriptor_;
  metadata.reflection = Sheet_manorpatBeast_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorpatBeastUP::kLevelFieldNumber;
const int manorpatBeastUP::kExpFieldNumber;
#endif  // !_MSC_VER

manorpatBeastUP::manorpatBeastUP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorpatBeastUP::InitAsDefaultInstance() {
}

manorpatBeastUP::manorpatBeastUP(const manorpatBeastUP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorpatBeastUP::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorpatBeastUP::~manorpatBeastUP() {
  SharedDtor();
}

void manorpatBeastUP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorpatBeastUP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorpatBeastUP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorpatBeastUP_descriptor_;
}

const manorpatBeastUP& manorpatBeastUP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorpatBeastUP* manorpatBeastUP::default_instance_ = NULL;

manorpatBeastUP* manorpatBeastUP::New() const {
  return new manorpatBeastUP;
}

void manorpatBeastUP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorpatBeastUP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorpatBeastUP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorpatBeastUP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorpatBeastUP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorpatBeastUP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorpatBeastUP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorpatBeastUP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorpatBeastUP::MergeFrom(const manorpatBeastUP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorpatBeastUP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorpatBeastUP::CopyFrom(const manorpatBeastUP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorpatBeastUP::IsInitialized() const {

  return true;
}

void manorpatBeastUP::Swap(manorpatBeastUP* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorpatBeastUP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorpatBeastUP_descriptor_;
  metadata.reflection = manorpatBeastUP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorpatBeastUP::kManorpatBeastUPListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorpatBeastUP::Sheet_manorpatBeastUP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorpatBeastUP::InitAsDefaultInstance() {
}

Sheet_manorpatBeastUP::Sheet_manorpatBeastUP(const Sheet_manorpatBeastUP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorpatBeastUP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorpatBeastUP::~Sheet_manorpatBeastUP() {
  SharedDtor();
}

void Sheet_manorpatBeastUP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorpatBeastUP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorpatBeastUP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorpatBeastUP_descriptor_;
}

const Sheet_manorpatBeastUP& Sheet_manorpatBeastUP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorpatBeastUP* Sheet_manorpatBeastUP::default_instance_ = NULL;

Sheet_manorpatBeastUP* Sheet_manorpatBeastUP::New() const {
  return new Sheet_manorpatBeastUP;
}

void Sheet_manorpatBeastUP::Clear() {
  manorpatbeastup_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorpatBeastUP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorpatBeastUP manorpatBeastUP_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorpatBeastUP_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorpatbeastup_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorpatBeastUP_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorpatBeastUP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorpatBeastUP manorpatBeastUP_List = 1;
  for (int i = 0; i < this->manorpatbeastup_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorpatbeastup_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorpatBeastUP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorpatBeastUP manorpatBeastUP_List = 1;
  for (int i = 0; i < this->manorpatbeastup_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorpatbeastup_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorpatBeastUP::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorpatBeastUP manorpatBeastUP_List = 1;
  total_size += 1 * this->manorpatbeastup_list_size();
  for (int i = 0; i < this->manorpatbeastup_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorpatbeastup_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorpatBeastUP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorpatBeastUP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorpatBeastUP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorpatBeastUP::MergeFrom(const Sheet_manorpatBeastUP& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorpatbeastup_list_.MergeFrom(from.manorpatbeastup_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorpatBeastUP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorpatBeastUP::CopyFrom(const Sheet_manorpatBeastUP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorpatBeastUP::IsInitialized() const {

  return true;
}

void Sheet_manorpatBeastUP::Swap(Sheet_manorpatBeastUP* other) {
  if (other != this) {
    manorpatbeastup_list_.Swap(&other->manorpatbeastup_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorpatBeastUP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorpatBeastUP_descriptor_;
  metadata.reflection = Sheet_manorpatBeastUP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorbuildBuff::kLevelSumFieldNumber;
const int manorbuildBuff::kSkillIdFieldNumber;
#endif  // !_MSC_VER

manorbuildBuff::manorbuildBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorbuildBuff::InitAsDefaultInstance() {
}

manorbuildBuff::manorbuildBuff(const manorbuildBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorbuildBuff::SharedCtor() {
  _cached_size_ = 0;
  levelsum_ = 0;
  skillid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorbuildBuff::~manorbuildBuff() {
  SharedDtor();
}

void manorbuildBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorbuildBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorbuildBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorbuildBuff_descriptor_;
}

const manorbuildBuff& manorbuildBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorbuildBuff* manorbuildBuff::default_instance_ = NULL;

manorbuildBuff* manorbuildBuff::New() const {
  return new manorbuildBuff;
}

void manorbuildBuff::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelsum_ = 0;
    skillid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorbuildBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 levelSum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelsum_)));
          set_has_levelsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillId;
        break;
      }

      // optional int64 skillId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorbuildBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 levelSum = 1;
  if (has_levelsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelsum(), output);
  }

  // optional int64 skillId = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorbuildBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 levelSum = 1;
  if (has_levelsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelsum(), target);
  }

  // optional int64 skillId = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorbuildBuff::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 levelSum = 1;
    if (has_levelsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelsum());
    }

    // optional int64 skillId = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorbuildBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorbuildBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorbuildBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorbuildBuff::MergeFrom(const manorbuildBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelsum()) {
      set_levelsum(from.levelsum());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorbuildBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorbuildBuff::CopyFrom(const manorbuildBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorbuildBuff::IsInitialized() const {

  return true;
}

void manorbuildBuff::Swap(manorbuildBuff* other) {
  if (other != this) {
    std::swap(levelsum_, other->levelsum_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorbuildBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorbuildBuff_descriptor_;
  metadata.reflection = manorbuildBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorbuildBuff::kManorbuildBuffListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorbuildBuff::Sheet_manorbuildBuff()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorbuildBuff::InitAsDefaultInstance() {
}

Sheet_manorbuildBuff::Sheet_manorbuildBuff(const Sheet_manorbuildBuff& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorbuildBuff::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorbuildBuff::~Sheet_manorbuildBuff() {
  SharedDtor();
}

void Sheet_manorbuildBuff::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorbuildBuff::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorbuildBuff::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorbuildBuff_descriptor_;
}

const Sheet_manorbuildBuff& Sheet_manorbuildBuff::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorbuildBuff* Sheet_manorbuildBuff::default_instance_ = NULL;

Sheet_manorbuildBuff* Sheet_manorbuildBuff::New() const {
  return new Sheet_manorbuildBuff;
}

void Sheet_manorbuildBuff::Clear() {
  manorbuildbuff_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorbuildBuff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorbuildBuff manorbuildBuff_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorbuildBuff_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorbuildbuff_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorbuildBuff_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorbuildBuff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorbuildBuff manorbuildBuff_List = 1;
  for (int i = 0; i < this->manorbuildbuff_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorbuildbuff_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorbuildBuff::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorbuildBuff manorbuildBuff_List = 1;
  for (int i = 0; i < this->manorbuildbuff_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorbuildbuff_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorbuildBuff::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorbuildBuff manorbuildBuff_List = 1;
  total_size += 1 * this->manorbuildbuff_list_size();
  for (int i = 0; i < this->manorbuildbuff_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorbuildbuff_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorbuildBuff::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorbuildBuff* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorbuildBuff*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorbuildBuff::MergeFrom(const Sheet_manorbuildBuff& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorbuildbuff_list_.MergeFrom(from.manorbuildbuff_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorbuildBuff::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorbuildBuff::CopyFrom(const Sheet_manorbuildBuff& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorbuildBuff::IsInitialized() const {

  return true;
}

void Sheet_manorbuildBuff::Swap(Sheet_manorbuildBuff* other) {
  if (other != this) {
    manorbuildbuff_list_.Swap(&other->manorbuildbuff_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorbuildBuff::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorbuildBuff_descriptor_;
  metadata.reflection = Sheet_manorbuildBuff_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorshop::kIDFieldNumber;
const int manorshop::kItemIdFieldNumber;
const int manorshop::kNeedShopLVFieldNumber;
const int manorshop::kBuyLimitFieldNumber;
const int manorshop::kMoneyCodeFieldNumber;
const int manorshop::kMoneyTypeFieldNumber;
const int manorshop::kPriceFieldNumber;
#endif  // !_MSC_VER

manorshop::manorshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorshop::InitAsDefaultInstance() {
}

manorshop::manorshop(const manorshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorshop::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  needshoplv_ = 0;
  buylimit_ = 0;
  moneycode_ = 0;
  moneytype_ = GOOGLE_LONGLONG(0);
  price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorshop::~manorshop() {
  SharedDtor();
}

void manorshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorshop_descriptor_;
}

const manorshop& manorshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorshop* manorshop::default_instance_ = NULL;

manorshop* manorshop::New() const {
  return new manorshop;
}

void manorshop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    needshoplv_ = 0;
    buylimit_ = 0;
    moneycode_ = 0;
    moneytype_ = GOOGLE_LONGLONG(0);
    price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_needShopLV;
        break;
      }

      // optional int32 needShopLV = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needShopLV:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needshoplv_)));
          set_has_needshoplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buyLimit;
        break;
      }

      // optional int32 buyLimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buylimit_)));
          set_has_buylimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_moneyCode;
        break;
      }

      // optional int32 moneyCode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneycode_)));
          set_has_moneycode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_moneyType;
        break;
      }

      // optional int64 moneyType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Price;
        break;
      }

      // optional int32 Price = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 needShopLV = 3;
  if (has_needshoplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->needshoplv(), output);
  }

  // optional int32 buyLimit = 4;
  if (has_buylimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buylimit(), output);
  }

  // optional int32 moneyCode = 5;
  if (has_moneycode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->moneycode(), output);
  }

  // optional int64 moneyType = 6;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->moneytype(), output);
  }

  // optional int32 Price = 7;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 needShopLV = 3;
  if (has_needshoplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->needshoplv(), target);
  }

  // optional int32 buyLimit = 4;
  if (has_buylimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buylimit(), target);
  }

  // optional int32 moneyCode = 5;
  if (has_moneycode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->moneycode(), target);
  }

  // optional int64 moneyType = 6;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->moneytype(), target);
  }

  // optional int32 Price = 7;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorshop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 needShopLV = 3;
    if (has_needshoplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needshoplv());
    }

    // optional int32 buyLimit = 4;
    if (has_buylimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buylimit());
    }

    // optional int32 moneyCode = 5;
    if (has_moneycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneycode());
    }

    // optional int64 moneyType = 6;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->moneytype());
    }

    // optional int32 Price = 7;
    if (has_price()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorshop::MergeFrom(const manorshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_needshoplv()) {
      set_needshoplv(from.needshoplv());
    }
    if (from.has_buylimit()) {
      set_buylimit(from.buylimit());
    }
    if (from.has_moneycode()) {
      set_moneycode(from.moneycode());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
    if (from.has_price()) {
      set_price(from.price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorshop::CopyFrom(const manorshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorshop::IsInitialized() const {

  return true;
}

void manorshop::Swap(manorshop* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(itemid_, other->itemid_);
    std::swap(needshoplv_, other->needshoplv_);
    std::swap(buylimit_, other->buylimit_);
    std::swap(moneycode_, other->moneycode_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(price_, other->price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorshop_descriptor_;
  metadata.reflection = manorshop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorshop::kManorshopListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorshop::Sheet_manorshop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorshop::InitAsDefaultInstance() {
}

Sheet_manorshop::Sheet_manorshop(const Sheet_manorshop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorshop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorshop::~Sheet_manorshop() {
  SharedDtor();
}

void Sheet_manorshop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorshop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorshop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorshop_descriptor_;
}

const Sheet_manorshop& Sheet_manorshop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorshop* Sheet_manorshop::default_instance_ = NULL;

Sheet_manorshop* Sheet_manorshop::New() const {
  return new Sheet_manorshop;
}

void Sheet_manorshop::Clear() {
  manorshop_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorshop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorshop manorshop_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorshop_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorshop_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorshop_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorshop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorshop manorshop_List = 1;
  for (int i = 0; i < this->manorshop_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorshop_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorshop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorshop manorshop_List = 1;
  for (int i = 0; i < this->manorshop_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorshop_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorshop::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorshop manorshop_List = 1;
  total_size += 1 * this->manorshop_list_size();
  for (int i = 0; i < this->manorshop_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorshop_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorshop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorshop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorshop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorshop::MergeFrom(const Sheet_manorshop& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorshop_list_.MergeFrom(from.manorshop_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorshop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorshop::CopyFrom(const Sheet_manorshop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorshop::IsInitialized() const {

  return true;
}

void Sheet_manorshop::Swap(Sheet_manorshop* other) {
  if (other != this) {
    manorshop_list_.Swap(&other->manorshop_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorshop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorshop_descriptor_;
  metadata.reflection = Sheet_manorshop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorbuildAdd::kLevelSumFieldNumber;
const int manorbuildAdd::kAddRatioFieldNumber;
#endif  // !_MSC_VER

manorbuildAdd::manorbuildAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorbuildAdd::InitAsDefaultInstance() {
}

manorbuildAdd::manorbuildAdd(const manorbuildAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorbuildAdd::SharedCtor() {
  _cached_size_ = 0;
  levelsum_ = 0;
  addratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorbuildAdd::~manorbuildAdd() {
  SharedDtor();
}

void manorbuildAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorbuildAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorbuildAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorbuildAdd_descriptor_;
}

const manorbuildAdd& manorbuildAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorbuildAdd* manorbuildAdd::default_instance_ = NULL;

manorbuildAdd* manorbuildAdd::New() const {
  return new manorbuildAdd;
}

void manorbuildAdd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    levelsum_ = 0;
    addratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorbuildAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 levelSum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelsum_)));
          set_has_levelsum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_addRatio;
        break;
      }

      // optional int32 addRatio = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addratio_)));
          set_has_addratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorbuildAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 levelSum = 1;
  if (has_levelsum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->levelsum(), output);
  }

  // optional int32 addRatio = 2;
  if (has_addratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->addratio(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorbuildAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 levelSum = 1;
  if (has_levelsum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->levelsum(), target);
  }

  // optional int32 addRatio = 2;
  if (has_addratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->addratio(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorbuildAdd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 levelSum = 1;
    if (has_levelsum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelsum());
    }

    // optional int32 addRatio = 2;
    if (has_addratio()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addratio());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorbuildAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorbuildAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorbuildAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorbuildAdd::MergeFrom(const manorbuildAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_levelsum()) {
      set_levelsum(from.levelsum());
    }
    if (from.has_addratio()) {
      set_addratio(from.addratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorbuildAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorbuildAdd::CopyFrom(const manorbuildAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorbuildAdd::IsInitialized() const {

  return true;
}

void manorbuildAdd::Swap(manorbuildAdd* other) {
  if (other != this) {
    std::swap(levelsum_, other->levelsum_);
    std::swap(addratio_, other->addratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorbuildAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorbuildAdd_descriptor_;
  metadata.reflection = manorbuildAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorbuildAdd::kManorbuildAddListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorbuildAdd::Sheet_manorbuildAdd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorbuildAdd::InitAsDefaultInstance() {
}

Sheet_manorbuildAdd::Sheet_manorbuildAdd(const Sheet_manorbuildAdd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorbuildAdd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorbuildAdd::~Sheet_manorbuildAdd() {
  SharedDtor();
}

void Sheet_manorbuildAdd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorbuildAdd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorbuildAdd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorbuildAdd_descriptor_;
}

const Sheet_manorbuildAdd& Sheet_manorbuildAdd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorbuildAdd* Sheet_manorbuildAdd::default_instance_ = NULL;

Sheet_manorbuildAdd* Sheet_manorbuildAdd::New() const {
  return new Sheet_manorbuildAdd;
}

void Sheet_manorbuildAdd::Clear() {
  manorbuildadd_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorbuildAdd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorbuildAdd manorbuildAdd_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorbuildAdd_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorbuildadd_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorbuildAdd_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorbuildAdd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorbuildAdd manorbuildAdd_List = 1;
  for (int i = 0; i < this->manorbuildadd_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorbuildadd_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorbuildAdd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorbuildAdd manorbuildAdd_List = 1;
  for (int i = 0; i < this->manorbuildadd_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorbuildadd_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorbuildAdd::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorbuildAdd manorbuildAdd_List = 1;
  total_size += 1 * this->manorbuildadd_list_size();
  for (int i = 0; i < this->manorbuildadd_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorbuildadd_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorbuildAdd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorbuildAdd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorbuildAdd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorbuildAdd::MergeFrom(const Sheet_manorbuildAdd& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorbuildadd_list_.MergeFrom(from.manorbuildadd_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorbuildAdd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorbuildAdd::CopyFrom(const Sheet_manorbuildAdd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorbuildAdd::IsInitialized() const {

  return true;
}

void Sheet_manorbuildAdd::Swap(Sheet_manorbuildAdd* other) {
  if (other != this) {
    manorbuildadd_list_.Swap(&other->manorbuildadd_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorbuildAdd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorbuildAdd_descriptor_;
  metadata.reflection = Sheet_manorbuildAdd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int manorlog::kIDFieldNumber;
#endif  // !_MSC_VER

manorlog::manorlog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void manorlog::InitAsDefaultInstance() {
}

manorlog::manorlog(const manorlog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void manorlog::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

manorlog::~manorlog() {
  SharedDtor();
}

void manorlog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void manorlog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* manorlog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return manorlog_descriptor_;
}

const manorlog& manorlog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

manorlog* manorlog::default_instance_ = NULL;

manorlog* manorlog::New() const {
  return new manorlog;
}

void manorlog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool manorlog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void manorlog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* manorlog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int manorlog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void manorlog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const manorlog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const manorlog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void manorlog::MergeFrom(const manorlog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void manorlog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void manorlog::CopyFrom(const manorlog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool manorlog::IsInitialized() const {

  return true;
}

void manorlog::Swap(manorlog* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata manorlog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = manorlog_descriptor_;
  metadata.reflection = manorlog_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sheet_manorlog::kManorlogListFieldNumber;
#endif  // !_MSC_VER

Sheet_manorlog::Sheet_manorlog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sheet_manorlog::InitAsDefaultInstance() {
}

Sheet_manorlog::Sheet_manorlog(const Sheet_manorlog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sheet_manorlog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sheet_manorlog::~Sheet_manorlog() {
  SharedDtor();
}

void Sheet_manorlog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Sheet_manorlog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sheet_manorlog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sheet_manorlog_descriptor_;
}

const Sheet_manorlog& Sheet_manorlog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_manor_2eproto();
  return *default_instance_;
}

Sheet_manorlog* Sheet_manorlog::default_instance_ = NULL;

Sheet_manorlog* Sheet_manorlog::New() const {
  return new Sheet_manorlog;
}

void Sheet_manorlog::Clear() {
  manorlog_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sheet_manorlog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.manorlog manorlog_List = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorlog_List:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorlog_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorlog_List;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sheet_manorlog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.manorlog manorlog_List = 1;
  for (int i = 0; i < this->manorlog_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorlog_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sheet_manorlog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.manorlog manorlog_List = 1;
  for (int i = 0; i < this->manorlog_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorlog_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sheet_manorlog::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.manorlog manorlog_List = 1;
  total_size += 1 * this->manorlog_list_size();
  for (int i = 0; i < this->manorlog_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorlog_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sheet_manorlog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sheet_manorlog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sheet_manorlog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sheet_manorlog::MergeFrom(const Sheet_manorlog& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorlog_list_.MergeFrom(from.manorlog_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sheet_manorlog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sheet_manorlog::CopyFrom(const Sheet_manorlog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sheet_manorlog::IsInitialized() const {

  return true;
}

void Sheet_manorlog::Swap(Sheet_manorlog* other) {
  if (other != this) {
    manorlog_list_.Swap(&other->manorlog_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sheet_manorlog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sheet_manorlog_descriptor_;
  metadata.reflection = Sheet_manorlog_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
