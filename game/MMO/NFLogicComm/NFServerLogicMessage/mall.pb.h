// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mall.proto

#ifndef PROTOBUF_mall_2eproto__INCLUDED
#define PROTOBUF_mall_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mall_2eproto();
void protobuf_AssignDesc_mall_2eproto();
void protobuf_ShutdownFile_mall_2eproto();

class mallmall;
class Sheet_mallmall;
class mallmalltype;
class Sheet_mallmalltype;

// ===================================================================

class mallmall : public ::google::protobuf::Message {
 public:
  mallmall();
  virtual ~mallmall();

  mallmall(const mallmall& from);

  inline mallmall& operator=(const mallmall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mallmall& default_instance();

  void Swap(mallmall* other);

  // implements Message ----------------------------------------------

  mallmall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mallmall& from);
  void MergeFrom(const mallmall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional int64 itemID = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int64 mallType = 4;
  inline bool has_malltype() const;
  inline void clear_malltype();
  static const int kMallTypeFieldNumber = 4;
  inline ::google::protobuf::int64 malltype() const;
  inline void set_malltype(::google::protobuf::int64 value);

  // optional int32 subType = 5;
  inline bool has_subtype() const;
  inline void clear_subtype();
  static const int kSubTypeFieldNumber = 5;
  inline ::google::protobuf::int32 subtype() const;
  inline void set_subtype(::google::protobuf::int32 value);

  // optional int32 priority = 6;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 6;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional int32 moneyType = 7;
  inline bool has_moneytype() const;
  inline void clear_moneytype();
  static const int kMoneyTypeFieldNumber = 7;
  inline ::google::protobuf::int32 moneytype() const;
  inline void set_moneytype(::google::protobuf::int32 value);

  // optional int32 price = 8;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 8;
  inline ::google::protobuf::int32 price() const;
  inline void set_price(::google::protobuf::int32 value);

  // optional int32 discount = 9;
  inline bool has_discount() const;
  inline void clear_discount();
  static const int kDiscountFieldNumber = 9;
  inline ::google::protobuf::int32 discount() const;
  inline void set_discount(::google::protobuf::int32 value);

  // optional int32 daily = 10;
  inline bool has_daily() const;
  inline void clear_daily();
  static const int kDailyFieldNumber = 10;
  inline ::google::protobuf::int32 daily() const;
  inline void set_daily(::google::protobuf::int32 value);

  // optional string buyAmount = 11;
  inline bool has_buyamount() const;
  inline void clear_buyamount();
  static const int kBuyAmountFieldNumber = 11;
  inline const ::std::string& buyamount() const;
  inline void set_buyamount(const ::std::string& value);
  inline void set_buyamount(const char* value);
  inline void set_buyamount(const char* value, size_t size);
  inline ::std::string* mutable_buyamount();
  inline ::std::string* release_buyamount();
  inline void set_allocated_buyamount(::std::string* buyamount);

  // optional string vipLimit = 12;
  inline bool has_viplimit() const;
  inline void clear_viplimit();
  static const int kVipLimitFieldNumber = 12;
  inline const ::std::string& viplimit() const;
  inline void set_viplimit(const ::std::string& value);
  inline void set_viplimit(const char* value);
  inline void set_viplimit(const char* value, size_t size);
  inline ::std::string* mutable_viplimit();
  inline ::std::string* release_viplimit();
  inline void set_allocated_viplimit(::std::string* viplimit);

  // optional int32 isClose = 13;
  inline bool has_isclose() const;
  inline void clear_isclose();
  static const int kIsCloseFieldNumber = 13;
  inline ::google::protobuf::int32 isclose() const;
  inline void set_isclose(::google::protobuf::int32 value);

  // optional int32 cantBuy = 14;
  inline bool has_cantbuy() const;
  inline void clear_cantbuy();
  static const int kCantBuyFieldNumber = 14;
  inline ::google::protobuf::int32 cantbuy() const;
  inline void set_cantbuy(::google::protobuf::int32 value);

  // optional int32 isMarkBind = 15;
  inline bool has_ismarkbind() const;
  inline void clear_ismarkbind();
  static const int kIsMarkBindFieldNumber = 15;
  inline ::google::protobuf::int32 ismarkbind() const;
  inline void set_ismarkbind(::google::protobuf::int32 value);

  // optional int32 roleLimit = 16;
  inline bool has_rolelimit() const;
  inline void clear_rolelimit();
  static const int kRoleLimitFieldNumber = 16;
  inline ::google::protobuf::int32 rolelimit() const;
  inline void set_rolelimit(::google::protobuf::int32 value);

  // optional int32 functionUnlock = 17;
  inline bool has_functionunlock() const;
  inline void clear_functionunlock();
  static const int kFunctionUnlockFieldNumber = 17;
  inline ::google::protobuf::int32 functionunlock() const;
  inline void set_functionunlock(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.mallmall)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_malltype();
  inline void clear_has_malltype();
  inline void set_has_subtype();
  inline void clear_has_subtype();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_moneytype();
  inline void clear_has_moneytype();
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_discount();
  inline void clear_has_discount();
  inline void set_has_daily();
  inline void clear_has_daily();
  inline void set_has_buyamount();
  inline void clear_has_buyamount();
  inline void set_has_viplimit();
  inline void clear_has_viplimit();
  inline void set_has_isclose();
  inline void clear_has_isclose();
  inline void set_has_cantbuy();
  inline void clear_has_cantbuy();
  inline void set_has_ismarkbind();
  inline void clear_has_ismarkbind();
  inline void set_has_rolelimit();
  inline void clear_has_rolelimit();
  inline void set_has_functionunlock();
  inline void clear_has_functionunlock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int64 itemid_;
  ::google::protobuf::int64 malltype_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 subtype_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int32 moneytype_;
  ::google::protobuf::int32 price_;
  ::google::protobuf::int32 discount_;
  ::std::string* buyamount_;
  ::google::protobuf::int32 daily_;
  ::google::protobuf::int32 isclose_;
  ::std::string* viplimit_;
  ::google::protobuf::int32 cantbuy_;
  ::google::protobuf::int32 ismarkbind_;
  ::google::protobuf::int32 rolelimit_;
  ::google::protobuf::int32 functionunlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_mall_2eproto();
  friend void protobuf_AssignDesc_mall_2eproto();
  friend void protobuf_ShutdownFile_mall_2eproto();

  void InitAsDefaultInstance();
  static mallmall* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_mallmall : public ::google::protobuf::Message {
 public:
  Sheet_mallmall();
  virtual ~Sheet_mallmall();

  Sheet_mallmall(const Sheet_mallmall& from);

  inline Sheet_mallmall& operator=(const Sheet_mallmall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_mallmall& default_instance();

  void Swap(Sheet_mallmall* other);

  // implements Message ----------------------------------------------

  Sheet_mallmall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_mallmall& from);
  void MergeFrom(const Sheet_mallmall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.mallmall mallmall_List = 1;
  inline int mallmall_list_size() const;
  inline void clear_mallmall_list();
  static const int kMallmallListFieldNumber = 1;
  inline const ::proto_ff::mallmall& mallmall_list(int index) const;
  inline ::proto_ff::mallmall* mutable_mallmall_list(int index);
  inline ::proto_ff::mallmall* add_mallmall_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmall >&
      mallmall_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmall >*
      mutable_mallmall_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_mallmall)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmall > mallmall_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mall_2eproto();
  friend void protobuf_AssignDesc_mall_2eproto();
  friend void protobuf_ShutdownFile_mall_2eproto();

  void InitAsDefaultInstance();
  static Sheet_mallmall* default_instance_;
};
// -------------------------------------------------------------------

class mallmalltype : public ::google::protobuf::Message {
 public:
  mallmalltype();
  virtual ~mallmalltype();

  mallmalltype(const mallmalltype& from);

  inline mallmalltype& operator=(const mallmalltype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mallmalltype& default_instance();

  void Swap(mallmalltype* other);

  // implements Message ----------------------------------------------

  mallmalltype* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mallmalltype& from);
  void MergeFrom(const mallmalltype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string tab = 3;
  inline bool has_tab() const;
  inline void clear_tab();
  static const int kTabFieldNumber = 3;
  inline const ::std::string& tab() const;
  inline void set_tab(const ::std::string& value);
  inline void set_tab(const char* value);
  inline void set_tab(const char* value, size_t size);
  inline ::std::string* mutable_tab();
  inline ::std::string* release_tab();
  inline void set_allocated_tab(::std::string* tab);

  // optional int32 groupType = 4;
  inline bool has_grouptype() const;
  inline void clear_grouptype();
  static const int kGroupTypeFieldNumber = 4;
  inline ::google::protobuf::int32 grouptype() const;
  inline void set_grouptype(::google::protobuf::int32 value);

  // optional int32 priority = 5;
  inline bool has_priority() const;
  inline void clear_priority();
  static const int kPriorityFieldNumber = 5;
  inline ::google::protobuf::int32 priority() const;
  inline void set_priority(::google::protobuf::int32 value);

  // optional int32 logicType = 6;
  inline bool has_logictype() const;
  inline void clear_logictype();
  static const int kLogicTypeFieldNumber = 6;
  inline ::google::protobuf::int32 logictype() const;
  inline void set_logictype(::google::protobuf::int32 value);

  // optional int32 functionunlock = 7;
  inline bool has_functionunlock() const;
  inline void clear_functionunlock();
  static const int kFunctionunlockFieldNumber = 7;
  inline ::google::protobuf::int32 functionunlock() const;
  inline void set_functionunlock(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.mallmalltype)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_tab();
  inline void clear_has_tab();
  inline void set_has_grouptype();
  inline void clear_has_grouptype();
  inline void set_has_priority();
  inline void clear_has_priority();
  inline void set_has_logictype();
  inline void clear_has_logictype();
  inline void set_has_functionunlock();
  inline void clear_has_functionunlock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::std::string* title_;
  ::std::string* tab_;
  ::google::protobuf::int32 grouptype_;
  ::google::protobuf::int32 priority_;
  ::google::protobuf::int32 logictype_;
  ::google::protobuf::int32 functionunlock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_mall_2eproto();
  friend void protobuf_AssignDesc_mall_2eproto();
  friend void protobuf_ShutdownFile_mall_2eproto();

  void InitAsDefaultInstance();
  static mallmalltype* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_mallmalltype : public ::google::protobuf::Message {
 public:
  Sheet_mallmalltype();
  virtual ~Sheet_mallmalltype();

  Sheet_mallmalltype(const Sheet_mallmalltype& from);

  inline Sheet_mallmalltype& operator=(const Sheet_mallmalltype& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_mallmalltype& default_instance();

  void Swap(Sheet_mallmalltype* other);

  // implements Message ----------------------------------------------

  Sheet_mallmalltype* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_mallmalltype& from);
  void MergeFrom(const Sheet_mallmalltype& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.mallmalltype mallmalltype_List = 1;
  inline int mallmalltype_list_size() const;
  inline void clear_mallmalltype_list();
  static const int kMallmalltypeListFieldNumber = 1;
  inline const ::proto_ff::mallmalltype& mallmalltype_list(int index) const;
  inline ::proto_ff::mallmalltype* mutable_mallmalltype_list(int index);
  inline ::proto_ff::mallmalltype* add_mallmalltype_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmalltype >&
      mallmalltype_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmalltype >*
      mutable_mallmalltype_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_mallmalltype)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmalltype > mallmalltype_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_mall_2eproto();
  friend void protobuf_AssignDesc_mall_2eproto();
  friend void protobuf_ShutdownFile_mall_2eproto();

  void InitAsDefaultInstance();
  static Sheet_mallmalltype* default_instance_;
};
// ===================================================================


// ===================================================================

// mallmall

// optional int64 id = 1;
inline bool mallmall::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mallmall::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mallmall::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mallmall::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 mallmall::id() const {
  return id_;
}
inline void mallmall::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional int64 itemID = 2;
inline bool mallmall::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mallmall::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mallmall::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mallmall::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 mallmall::itemid() const {
  return itemid_;
}
inline void mallmall::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 num = 3;
inline bool mallmall::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mallmall::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mallmall::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mallmall::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 mallmall::num() const {
  return num_;
}
inline void mallmall::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int64 mallType = 4;
inline bool mallmall::has_malltype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mallmall::set_has_malltype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mallmall::clear_has_malltype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mallmall::clear_malltype() {
  malltype_ = GOOGLE_LONGLONG(0);
  clear_has_malltype();
}
inline ::google::protobuf::int64 mallmall::malltype() const {
  return malltype_;
}
inline void mallmall::set_malltype(::google::protobuf::int64 value) {
  set_has_malltype();
  malltype_ = value;
}

// optional int32 subType = 5;
inline bool mallmall::has_subtype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mallmall::set_has_subtype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mallmall::clear_has_subtype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mallmall::clear_subtype() {
  subtype_ = 0;
  clear_has_subtype();
}
inline ::google::protobuf::int32 mallmall::subtype() const {
  return subtype_;
}
inline void mallmall::set_subtype(::google::protobuf::int32 value) {
  set_has_subtype();
  subtype_ = value;
}

// optional int32 priority = 6;
inline bool mallmall::has_priority() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mallmall::set_has_priority() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mallmall::clear_has_priority() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mallmall::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 mallmall::priority() const {
  return priority_;
}
inline void mallmall::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// optional int32 moneyType = 7;
inline bool mallmall::has_moneytype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mallmall::set_has_moneytype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mallmall::clear_has_moneytype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mallmall::clear_moneytype() {
  moneytype_ = 0;
  clear_has_moneytype();
}
inline ::google::protobuf::int32 mallmall::moneytype() const {
  return moneytype_;
}
inline void mallmall::set_moneytype(::google::protobuf::int32 value) {
  set_has_moneytype();
  moneytype_ = value;
}

// optional int32 price = 8;
inline bool mallmall::has_price() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void mallmall::set_has_price() {
  _has_bits_[0] |= 0x00000080u;
}
inline void mallmall::clear_has_price() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void mallmall::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google::protobuf::int32 mallmall::price() const {
  return price_;
}
inline void mallmall::set_price(::google::protobuf::int32 value) {
  set_has_price();
  price_ = value;
}

// optional int32 discount = 9;
inline bool mallmall::has_discount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void mallmall::set_has_discount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void mallmall::clear_has_discount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void mallmall::clear_discount() {
  discount_ = 0;
  clear_has_discount();
}
inline ::google::protobuf::int32 mallmall::discount() const {
  return discount_;
}
inline void mallmall::set_discount(::google::protobuf::int32 value) {
  set_has_discount();
  discount_ = value;
}

// optional int32 daily = 10;
inline bool mallmall::has_daily() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void mallmall::set_has_daily() {
  _has_bits_[0] |= 0x00000200u;
}
inline void mallmall::clear_has_daily() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void mallmall::clear_daily() {
  daily_ = 0;
  clear_has_daily();
}
inline ::google::protobuf::int32 mallmall::daily() const {
  return daily_;
}
inline void mallmall::set_daily(::google::protobuf::int32 value) {
  set_has_daily();
  daily_ = value;
}

// optional string buyAmount = 11;
inline bool mallmall::has_buyamount() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void mallmall::set_has_buyamount() {
  _has_bits_[0] |= 0x00000400u;
}
inline void mallmall::clear_has_buyamount() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void mallmall::clear_buyamount() {
  if (buyamount_ != &::google::protobuf::internal::kEmptyString) {
    buyamount_->clear();
  }
  clear_has_buyamount();
}
inline const ::std::string& mallmall::buyamount() const {
  return *buyamount_;
}
inline void mallmall::set_buyamount(const ::std::string& value) {
  set_has_buyamount();
  if (buyamount_ == &::google::protobuf::internal::kEmptyString) {
    buyamount_ = new ::std::string;
  }
  buyamount_->assign(value);
}
inline void mallmall::set_buyamount(const char* value) {
  set_has_buyamount();
  if (buyamount_ == &::google::protobuf::internal::kEmptyString) {
    buyamount_ = new ::std::string;
  }
  buyamount_->assign(value);
}
inline void mallmall::set_buyamount(const char* value, size_t size) {
  set_has_buyamount();
  if (buyamount_ == &::google::protobuf::internal::kEmptyString) {
    buyamount_ = new ::std::string;
  }
  buyamount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mallmall::mutable_buyamount() {
  set_has_buyamount();
  if (buyamount_ == &::google::protobuf::internal::kEmptyString) {
    buyamount_ = new ::std::string;
  }
  return buyamount_;
}
inline ::std::string* mallmall::release_buyamount() {
  clear_has_buyamount();
  if (buyamount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buyamount_;
    buyamount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mallmall::set_allocated_buyamount(::std::string* buyamount) {
  if (buyamount_ != &::google::protobuf::internal::kEmptyString) {
    delete buyamount_;
  }
  if (buyamount) {
    set_has_buyamount();
    buyamount_ = buyamount;
  } else {
    clear_has_buyamount();
    buyamount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string vipLimit = 12;
inline bool mallmall::has_viplimit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void mallmall::set_has_viplimit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void mallmall::clear_has_viplimit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void mallmall::clear_viplimit() {
  if (viplimit_ != &::google::protobuf::internal::kEmptyString) {
    viplimit_->clear();
  }
  clear_has_viplimit();
}
inline const ::std::string& mallmall::viplimit() const {
  return *viplimit_;
}
inline void mallmall::set_viplimit(const ::std::string& value) {
  set_has_viplimit();
  if (viplimit_ == &::google::protobuf::internal::kEmptyString) {
    viplimit_ = new ::std::string;
  }
  viplimit_->assign(value);
}
inline void mallmall::set_viplimit(const char* value) {
  set_has_viplimit();
  if (viplimit_ == &::google::protobuf::internal::kEmptyString) {
    viplimit_ = new ::std::string;
  }
  viplimit_->assign(value);
}
inline void mallmall::set_viplimit(const char* value, size_t size) {
  set_has_viplimit();
  if (viplimit_ == &::google::protobuf::internal::kEmptyString) {
    viplimit_ = new ::std::string;
  }
  viplimit_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mallmall::mutable_viplimit() {
  set_has_viplimit();
  if (viplimit_ == &::google::protobuf::internal::kEmptyString) {
    viplimit_ = new ::std::string;
  }
  return viplimit_;
}
inline ::std::string* mallmall::release_viplimit() {
  clear_has_viplimit();
  if (viplimit_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = viplimit_;
    viplimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mallmall::set_allocated_viplimit(::std::string* viplimit) {
  if (viplimit_ != &::google::protobuf::internal::kEmptyString) {
    delete viplimit_;
  }
  if (viplimit) {
    set_has_viplimit();
    viplimit_ = viplimit;
  } else {
    clear_has_viplimit();
    viplimit_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isClose = 13;
inline bool mallmall::has_isclose() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void mallmall::set_has_isclose() {
  _has_bits_[0] |= 0x00001000u;
}
inline void mallmall::clear_has_isclose() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void mallmall::clear_isclose() {
  isclose_ = 0;
  clear_has_isclose();
}
inline ::google::protobuf::int32 mallmall::isclose() const {
  return isclose_;
}
inline void mallmall::set_isclose(::google::protobuf::int32 value) {
  set_has_isclose();
  isclose_ = value;
}

// optional int32 cantBuy = 14;
inline bool mallmall::has_cantbuy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void mallmall::set_has_cantbuy() {
  _has_bits_[0] |= 0x00002000u;
}
inline void mallmall::clear_has_cantbuy() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void mallmall::clear_cantbuy() {
  cantbuy_ = 0;
  clear_has_cantbuy();
}
inline ::google::protobuf::int32 mallmall::cantbuy() const {
  return cantbuy_;
}
inline void mallmall::set_cantbuy(::google::protobuf::int32 value) {
  set_has_cantbuy();
  cantbuy_ = value;
}

// optional int32 isMarkBind = 15;
inline bool mallmall::has_ismarkbind() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void mallmall::set_has_ismarkbind() {
  _has_bits_[0] |= 0x00004000u;
}
inline void mallmall::clear_has_ismarkbind() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void mallmall::clear_ismarkbind() {
  ismarkbind_ = 0;
  clear_has_ismarkbind();
}
inline ::google::protobuf::int32 mallmall::ismarkbind() const {
  return ismarkbind_;
}
inline void mallmall::set_ismarkbind(::google::protobuf::int32 value) {
  set_has_ismarkbind();
  ismarkbind_ = value;
}

// optional int32 roleLimit = 16;
inline bool mallmall::has_rolelimit() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void mallmall::set_has_rolelimit() {
  _has_bits_[0] |= 0x00008000u;
}
inline void mallmall::clear_has_rolelimit() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void mallmall::clear_rolelimit() {
  rolelimit_ = 0;
  clear_has_rolelimit();
}
inline ::google::protobuf::int32 mallmall::rolelimit() const {
  return rolelimit_;
}
inline void mallmall::set_rolelimit(::google::protobuf::int32 value) {
  set_has_rolelimit();
  rolelimit_ = value;
}

// optional int32 functionUnlock = 17;
inline bool mallmall::has_functionunlock() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void mallmall::set_has_functionunlock() {
  _has_bits_[0] |= 0x00010000u;
}
inline void mallmall::clear_has_functionunlock() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void mallmall::clear_functionunlock() {
  functionunlock_ = 0;
  clear_has_functionunlock();
}
inline ::google::protobuf::int32 mallmall::functionunlock() const {
  return functionunlock_;
}
inline void mallmall::set_functionunlock(::google::protobuf::int32 value) {
  set_has_functionunlock();
  functionunlock_ = value;
}

// -------------------------------------------------------------------

// Sheet_mallmall

// repeated .proto_ff.mallmall mallmall_List = 1;
inline int Sheet_mallmall::mallmall_list_size() const {
  return mallmall_list_.size();
}
inline void Sheet_mallmall::clear_mallmall_list() {
  mallmall_list_.Clear();
}
inline const ::proto_ff::mallmall& Sheet_mallmall::mallmall_list(int index) const {
  return mallmall_list_.Get(index);
}
inline ::proto_ff::mallmall* Sheet_mallmall::mutable_mallmall_list(int index) {
  return mallmall_list_.Mutable(index);
}
inline ::proto_ff::mallmall* Sheet_mallmall::add_mallmall_list() {
  return mallmall_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmall >&
Sheet_mallmall::mallmall_list() const {
  return mallmall_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmall >*
Sheet_mallmall::mutable_mallmall_list() {
  return &mallmall_list_;
}

// -------------------------------------------------------------------

// mallmalltype

// optional int64 id = 1;
inline bool mallmalltype::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mallmalltype::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mallmalltype::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mallmalltype::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 mallmalltype::id() const {
  return id_;
}
inline void mallmalltype::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional string title = 2;
inline bool mallmalltype::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mallmalltype::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mallmalltype::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mallmalltype::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& mallmalltype::title() const {
  return *title_;
}
inline void mallmalltype::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mallmalltype::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void mallmalltype::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mallmalltype::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* mallmalltype::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mallmalltype::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string tab = 3;
inline bool mallmalltype::has_tab() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mallmalltype::set_has_tab() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mallmalltype::clear_has_tab() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mallmalltype::clear_tab() {
  if (tab_ != &::google::protobuf::internal::kEmptyString) {
    tab_->clear();
  }
  clear_has_tab();
}
inline const ::std::string& mallmalltype::tab() const {
  return *tab_;
}
inline void mallmalltype::set_tab(const ::std::string& value) {
  set_has_tab();
  if (tab_ == &::google::protobuf::internal::kEmptyString) {
    tab_ = new ::std::string;
  }
  tab_->assign(value);
}
inline void mallmalltype::set_tab(const char* value) {
  set_has_tab();
  if (tab_ == &::google::protobuf::internal::kEmptyString) {
    tab_ = new ::std::string;
  }
  tab_->assign(value);
}
inline void mallmalltype::set_tab(const char* value, size_t size) {
  set_has_tab();
  if (tab_ == &::google::protobuf::internal::kEmptyString) {
    tab_ = new ::std::string;
  }
  tab_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mallmalltype::mutable_tab() {
  set_has_tab();
  if (tab_ == &::google::protobuf::internal::kEmptyString) {
    tab_ = new ::std::string;
  }
  return tab_;
}
inline ::std::string* mallmalltype::release_tab() {
  clear_has_tab();
  if (tab_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tab_;
    tab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mallmalltype::set_allocated_tab(::std::string* tab) {
  if (tab_ != &::google::protobuf::internal::kEmptyString) {
    delete tab_;
  }
  if (tab) {
    set_has_tab();
    tab_ = tab;
  } else {
    clear_has_tab();
    tab_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 groupType = 4;
inline bool mallmalltype::has_grouptype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void mallmalltype::set_has_grouptype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void mallmalltype::clear_has_grouptype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void mallmalltype::clear_grouptype() {
  grouptype_ = 0;
  clear_has_grouptype();
}
inline ::google::protobuf::int32 mallmalltype::grouptype() const {
  return grouptype_;
}
inline void mallmalltype::set_grouptype(::google::protobuf::int32 value) {
  set_has_grouptype();
  grouptype_ = value;
}

// optional int32 priority = 5;
inline bool mallmalltype::has_priority() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void mallmalltype::set_has_priority() {
  _has_bits_[0] |= 0x00000010u;
}
inline void mallmalltype::clear_has_priority() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void mallmalltype::clear_priority() {
  priority_ = 0;
  clear_has_priority();
}
inline ::google::protobuf::int32 mallmalltype::priority() const {
  return priority_;
}
inline void mallmalltype::set_priority(::google::protobuf::int32 value) {
  set_has_priority();
  priority_ = value;
}

// optional int32 logicType = 6;
inline bool mallmalltype::has_logictype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void mallmalltype::set_has_logictype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void mallmalltype::clear_has_logictype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void mallmalltype::clear_logictype() {
  logictype_ = 0;
  clear_has_logictype();
}
inline ::google::protobuf::int32 mallmalltype::logictype() const {
  return logictype_;
}
inline void mallmalltype::set_logictype(::google::protobuf::int32 value) {
  set_has_logictype();
  logictype_ = value;
}

// optional int32 functionunlock = 7;
inline bool mallmalltype::has_functionunlock() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void mallmalltype::set_has_functionunlock() {
  _has_bits_[0] |= 0x00000040u;
}
inline void mallmalltype::clear_has_functionunlock() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void mallmalltype::clear_functionunlock() {
  functionunlock_ = 0;
  clear_has_functionunlock();
}
inline ::google::protobuf::int32 mallmalltype::functionunlock() const {
  return functionunlock_;
}
inline void mallmalltype::set_functionunlock(::google::protobuf::int32 value) {
  set_has_functionunlock();
  functionunlock_ = value;
}

// -------------------------------------------------------------------

// Sheet_mallmalltype

// repeated .proto_ff.mallmalltype mallmalltype_List = 1;
inline int Sheet_mallmalltype::mallmalltype_list_size() const {
  return mallmalltype_list_.size();
}
inline void Sheet_mallmalltype::clear_mallmalltype_list() {
  mallmalltype_list_.Clear();
}
inline const ::proto_ff::mallmalltype& Sheet_mallmalltype::mallmalltype_list(int index) const {
  return mallmalltype_list_.Get(index);
}
inline ::proto_ff::mallmalltype* Sheet_mallmalltype::mutable_mallmalltype_list(int index) {
  return mallmalltype_list_.Mutable(index);
}
inline ::proto_ff::mallmalltype* Sheet_mallmalltype::add_mallmalltype_list() {
  return mallmalltype_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmalltype >&
Sheet_mallmalltype::mallmalltype_list() const {
  return mallmalltype_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::mallmalltype >*
Sheet_mallmalltype::mutable_mallmalltype_list() {
  return &mallmalltype_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mall_2eproto__INCLUDED
