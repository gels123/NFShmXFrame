// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: handbook.proto

#ifndef PROTOBUF_handbook_2eproto__INCLUDED
#define PROTOBUF_handbook_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_handbook_2eproto();
void protobuf_AssignDesc_handbook_2eproto();
void protobuf_ShutdownFile_handbook_2eproto();

class handbookhandbookattributeDesc;
class handbookhandbook;
class Sheet_handbookhandbook;
class handbookfateattributeDesc;
class handbookfate;
class Sheet_handbookfate;
class handbookattr;
class Sheet_handbookattr;

// ===================================================================

class handbookhandbookattributeDesc : public ::google::protobuf::Message {
 public:
  handbookhandbookattributeDesc();
  virtual ~handbookhandbookattributeDesc();

  handbookhandbookattributeDesc(const handbookhandbookattributeDesc& from);

  inline handbookhandbookattributeDesc& operator=(const handbookhandbookattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const handbookhandbookattributeDesc& default_instance();

  void Swap(handbookhandbookattributeDesc* other);

  // implements Message ----------------------------------------------

  handbookhandbookattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const handbookhandbookattributeDesc& from);
  void MergeFrom(const handbookhandbookattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.handbookhandbookattributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 value_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_handbook_2eproto();
  friend void protobuf_AssignDesc_handbook_2eproto();
  friend void protobuf_ShutdownFile_handbook_2eproto();

  void InitAsDefaultInstance();
  static handbookhandbookattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class handbookhandbook : public ::google::protobuf::Message {
 public:
  handbookhandbook();
  virtual ~handbookhandbook();

  handbookhandbook(const handbookhandbook& from);

  inline handbookhandbook& operator=(const handbookhandbook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const handbookhandbook& default_instance();

  void Swap(handbookhandbook* other);

  // implements Message ----------------------------------------------

  handbookhandbook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const handbookhandbook& from);
  void MergeFrom(const handbookhandbook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 handbookID = 1;
  inline bool has_handbookid() const;
  inline void clear_handbookid();
  static const int kHandbookIDFieldNumber = 1;
  inline ::google::protobuf::int64 handbookid() const;
  inline void set_handbookid(::google::protobuf::int64 value);

  // optional int64 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int64 itemid() const;
  inline void set_itemid(::google::protobuf::int64 value);

  // optional string handbookName = 3;
  inline bool has_handbookname() const;
  inline void clear_handbookname();
  static const int kHandbookNameFieldNumber = 3;
  inline const ::std::string& handbookname() const;
  inline void set_handbookname(const ::std::string& value);
  inline void set_handbookname(const char* value);
  inline void set_handbookname(const char* value, size_t size);
  inline ::std::string* mutable_handbookname();
  inline ::std::string* release_handbookname();
  inline void set_allocated_handbookname(::std::string* handbookname);

  // optional int32 handbookType = 4;
  inline bool has_handbooktype() const;
  inline void clear_handbooktype();
  static const int kHandbookTypeFieldNumber = 4;
  inline ::google::protobuf::int32 handbooktype() const;
  inline void set_handbooktype(::google::protobuf::int32 value);

  // optional int32 handbookQuality = 5;
  inline bool has_handbookquality() const;
  inline void clear_handbookquality();
  static const int kHandbookQualityFieldNumber = 5;
  inline ::google::protobuf::int32 handbookquality() const;
  inline void set_handbookquality(::google::protobuf::int32 value);

  // optional int32 handbookLv = 6;
  inline bool has_handbooklv() const;
  inline void clear_handbooklv();
  static const int kHandbookLvFieldNumber = 6;
  inline ::google::protobuf::int32 handbooklv() const;
  inline void set_handbooklv(::google::protobuf::int32 value);

  // optional int32 handZ = 7;
  inline bool has_handz() const;
  inline void clear_handz();
  static const int kHandZFieldNumber = 7;
  inline ::google::protobuf::int32 handz() const;
  inline void set_handz(::google::protobuf::int32 value);

  // optional int64 starId = 8;
  inline bool has_starid() const;
  inline void clear_starid();
  static const int kStarIdFieldNumber = 8;
  inline ::google::protobuf::int64 starid() const;
  inline void set_starid(::google::protobuf::int64 value);

  // optional string starNum = 9;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 9;
  inline const ::std::string& starnum() const;
  inline void set_starnum(const ::std::string& value);
  inline void set_starnum(const char* value);
  inline void set_starnum(const char* value, size_t size);
  inline ::std::string* mutable_starnum();
  inline ::std::string* release_starnum();
  inline void set_allocated_starnum(::std::string* starnum);

  // repeated .proto_ff.handbookhandbookattributeDesc attribute = 10;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 10;
  inline const ::proto_ff::handbookhandbookattributeDesc& attribute(int index) const;
  inline ::proto_ff::handbookhandbookattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::handbookhandbookattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbookattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbookattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.handbookhandbook)
 private:
  inline void set_has_handbookid();
  inline void clear_has_handbookid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_handbookname();
  inline void clear_has_handbookname();
  inline void set_has_handbooktype();
  inline void clear_has_handbooktype();
  inline void set_has_handbookquality();
  inline void clear_has_handbookquality();
  inline void set_has_handbooklv();
  inline void clear_has_handbooklv();
  inline void set_has_handz();
  inline void clear_has_handz();
  inline void set_has_starid();
  inline void clear_has_starid();
  inline void set_has_starnum();
  inline void clear_has_starnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 handbookid_;
  ::google::protobuf::int64 itemid_;
  ::std::string* handbookname_;
  ::google::protobuf::int32 handbooktype_;
  ::google::protobuf::int32 handbookquality_;
  ::google::protobuf::int32 handbooklv_;
  ::google::protobuf::int32 handz_;
  ::google::protobuf::int64 starid_;
  ::std::string* starnum_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbookattributeDesc > attribute_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_handbook_2eproto();
  friend void protobuf_AssignDesc_handbook_2eproto();
  friend void protobuf_ShutdownFile_handbook_2eproto();

  void InitAsDefaultInstance();
  static handbookhandbook* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_handbookhandbook : public ::google::protobuf::Message {
 public:
  Sheet_handbookhandbook();
  virtual ~Sheet_handbookhandbook();

  Sheet_handbookhandbook(const Sheet_handbookhandbook& from);

  inline Sheet_handbookhandbook& operator=(const Sheet_handbookhandbook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_handbookhandbook& default_instance();

  void Swap(Sheet_handbookhandbook* other);

  // implements Message ----------------------------------------------

  Sheet_handbookhandbook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_handbookhandbook& from);
  void MergeFrom(const Sheet_handbookhandbook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.handbookhandbook handbookhandbook_List = 1;
  inline int handbookhandbook_list_size() const;
  inline void clear_handbookhandbook_list();
  static const int kHandbookhandbookListFieldNumber = 1;
  inline const ::proto_ff::handbookhandbook& handbookhandbook_list(int index) const;
  inline ::proto_ff::handbookhandbook* mutable_handbookhandbook_list(int index);
  inline ::proto_ff::handbookhandbook* add_handbookhandbook_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbook >&
      handbookhandbook_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbook >*
      mutable_handbookhandbook_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_handbookhandbook)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbook > handbookhandbook_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_handbook_2eproto();
  friend void protobuf_AssignDesc_handbook_2eproto();
  friend void protobuf_ShutdownFile_handbook_2eproto();

  void InitAsDefaultInstance();
  static Sheet_handbookhandbook* default_instance_;
};
// -------------------------------------------------------------------

class handbookfateattributeDesc : public ::google::protobuf::Message {
 public:
  handbookfateattributeDesc();
  virtual ~handbookfateattributeDesc();

  handbookfateattributeDesc(const handbookfateattributeDesc& from);

  inline handbookfateattributeDesc& operator=(const handbookfateattributeDesc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const handbookfateattributeDesc& default_instance();

  void Swap(handbookfateattributeDesc* other);

  // implements Message ----------------------------------------------

  handbookfateattributeDesc* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const handbookfateattributeDesc& from);
  void MergeFrom(const handbookfateattributeDesc& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:proto_ff.handbookfateattributeDesc)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 value_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_handbook_2eproto();
  friend void protobuf_AssignDesc_handbook_2eproto();
  friend void protobuf_ShutdownFile_handbook_2eproto();

  void InitAsDefaultInstance();
  static handbookfateattributeDesc* default_instance_;
};
// -------------------------------------------------------------------

class handbookfate : public ::google::protobuf::Message {
 public:
  handbookfate();
  virtual ~handbookfate();

  handbookfate(const handbookfate& from);

  inline handbookfate& operator=(const handbookfate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const handbookfate& default_instance();

  void Swap(handbookfate* other);

  // implements Message ----------------------------------------------

  handbookfate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const handbookfate& from);
  void MergeFrom(const handbookfate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 fateID = 1;
  inline bool has_fateid() const;
  inline void clear_fateid();
  static const int kFateIDFieldNumber = 1;
  inline ::google::protobuf::int64 fateid() const;
  inline void set_fateid(::google::protobuf::int64 value);

  // optional string fateName = 2;
  inline bool has_fatename() const;
  inline void clear_fatename();
  static const int kFateNameFieldNumber = 2;
  inline const ::std::string& fatename() const;
  inline void set_fatename(const ::std::string& value);
  inline void set_fatename(const char* value);
  inline void set_fatename(const char* value, size_t size);
  inline ::std::string* mutable_fatename();
  inline ::std::string* release_fatename();
  inline void set_allocated_fatename(::std::string* fatename);

  // optional int32 starLv = 3;
  inline bool has_starlv() const;
  inline void clear_starlv();
  static const int kStarLvFieldNumber = 3;
  inline ::google::protobuf::int32 starlv() const;
  inline void set_starlv(::google::protobuf::int32 value);

  // repeated int64 fateHand = 4;
  inline int fatehand_size() const;
  inline void clear_fatehand();
  static const int kFateHandFieldNumber = 4;
  inline ::google::protobuf::int64 fatehand(int index) const;
  inline void set_fatehand(int index, ::google::protobuf::int64 value);
  inline void add_fatehand(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      fatehand() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_fatehand();

  // repeated .proto_ff.handbookfateattributeDesc attribute = 5;
  inline int attribute_size() const;
  inline void clear_attribute();
  static const int kAttributeFieldNumber = 5;
  inline const ::proto_ff::handbookfateattributeDesc& attribute(int index) const;
  inline ::proto_ff::handbookfateattributeDesc* mutable_attribute(int index);
  inline ::proto_ff::handbookfateattributeDesc* add_attribute();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfateattributeDesc >&
      attribute() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfateattributeDesc >*
      mutable_attribute();

  // @@protoc_insertion_point(class_scope:proto_ff.handbookfate)
 private:
  inline void set_has_fateid();
  inline void clear_has_fateid();
  inline void set_has_fatename();
  inline void clear_has_fatename();
  inline void set_has_starlv();
  inline void clear_has_starlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 fateid_;
  ::std::string* fatename_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > fatehand_;
  ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfateattributeDesc > attribute_;
  ::google::protobuf::int32 starlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_handbook_2eproto();
  friend void protobuf_AssignDesc_handbook_2eproto();
  friend void protobuf_ShutdownFile_handbook_2eproto();

  void InitAsDefaultInstance();
  static handbookfate* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_handbookfate : public ::google::protobuf::Message {
 public:
  Sheet_handbookfate();
  virtual ~Sheet_handbookfate();

  Sheet_handbookfate(const Sheet_handbookfate& from);

  inline Sheet_handbookfate& operator=(const Sheet_handbookfate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_handbookfate& default_instance();

  void Swap(Sheet_handbookfate* other);

  // implements Message ----------------------------------------------

  Sheet_handbookfate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_handbookfate& from);
  void MergeFrom(const Sheet_handbookfate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.handbookfate handbookfate_List = 1;
  inline int handbookfate_list_size() const;
  inline void clear_handbookfate_list();
  static const int kHandbookfateListFieldNumber = 1;
  inline const ::proto_ff::handbookfate& handbookfate_list(int index) const;
  inline ::proto_ff::handbookfate* mutable_handbookfate_list(int index);
  inline ::proto_ff::handbookfate* add_handbookfate_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfate >&
      handbookfate_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfate >*
      mutable_handbookfate_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_handbookfate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfate > handbookfate_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_handbook_2eproto();
  friend void protobuf_AssignDesc_handbook_2eproto();
  friend void protobuf_ShutdownFile_handbook_2eproto();

  void InitAsDefaultInstance();
  static Sheet_handbookfate* default_instance_;
};
// -------------------------------------------------------------------

class handbookattr : public ::google::protobuf::Message {
 public:
  handbookattr();
  virtual ~handbookattr();

  handbookattr(const handbookattr& from);

  inline handbookattr& operator=(const handbookattr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const handbookattr& default_instance();

  void Swap(handbookattr* other);

  // implements Message ----------------------------------------------

  handbookattr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const handbookattr& from);
  void MergeFrom(const handbookattr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 attID = 1;
  inline bool has_attid() const;
  inline void clear_attid();
  static const int kAttIDFieldNumber = 1;
  inline ::google::protobuf::int64 attid() const;
  inline void set_attid(::google::protobuf::int64 value);

  // repeated int32 att = 2;
  inline int att_size() const;
  inline void clear_att();
  static const int kAttFieldNumber = 2;
  inline ::google::protobuf::int32 att(int index) const;
  inline void set_att(int index, ::google::protobuf::int32 value);
  inline void add_att(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      att() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_att();

  // @@protoc_insertion_point(class_scope:proto_ff.handbookattr)
 private:
  inline void set_has_attid();
  inline void clear_has_attid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 attid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > att_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_handbook_2eproto();
  friend void protobuf_AssignDesc_handbook_2eproto();
  friend void protobuf_ShutdownFile_handbook_2eproto();

  void InitAsDefaultInstance();
  static handbookattr* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_handbookattr : public ::google::protobuf::Message {
 public:
  Sheet_handbookattr();
  virtual ~Sheet_handbookattr();

  Sheet_handbookattr(const Sheet_handbookattr& from);

  inline Sheet_handbookattr& operator=(const Sheet_handbookattr& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_handbookattr& default_instance();

  void Swap(Sheet_handbookattr* other);

  // implements Message ----------------------------------------------

  Sheet_handbookattr* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_handbookattr& from);
  void MergeFrom(const Sheet_handbookattr& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.handbookattr handbookattr_List = 1;
  inline int handbookattr_list_size() const;
  inline void clear_handbookattr_list();
  static const int kHandbookattrListFieldNumber = 1;
  inline const ::proto_ff::handbookattr& handbookattr_list(int index) const;
  inline ::proto_ff::handbookattr* mutable_handbookattr_list(int index);
  inline ::proto_ff::handbookattr* add_handbookattr_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookattr >&
      handbookattr_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookattr >*
      mutable_handbookattr_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_handbookattr)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookattr > handbookattr_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_handbook_2eproto();
  friend void protobuf_AssignDesc_handbook_2eproto();
  friend void protobuf_ShutdownFile_handbook_2eproto();

  void InitAsDefaultInstance();
  static Sheet_handbookattr* default_instance_;
};
// ===================================================================


// ===================================================================

// handbookhandbookattributeDesc

// optional int32 type = 1;
inline bool handbookhandbookattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void handbookhandbookattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void handbookhandbookattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void handbookhandbookattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 handbookhandbookattributeDesc::type() const {
  return type_;
}
inline void handbookhandbookattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 value = 2;
inline bool handbookhandbookattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void handbookhandbookattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void handbookhandbookattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void handbookhandbookattributeDesc::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 handbookhandbookattributeDesc::value() const {
  return value_;
}
inline void handbookhandbookattributeDesc::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// handbookhandbook

// optional int64 handbookID = 1;
inline bool handbookhandbook::has_handbookid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void handbookhandbook::set_has_handbookid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void handbookhandbook::clear_has_handbookid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void handbookhandbook::clear_handbookid() {
  handbookid_ = GOOGLE_LONGLONG(0);
  clear_has_handbookid();
}
inline ::google::protobuf::int64 handbookhandbook::handbookid() const {
  return handbookid_;
}
inline void handbookhandbook::set_handbookid(::google::protobuf::int64 value) {
  set_has_handbookid();
  handbookid_ = value;
}

// optional int64 itemId = 2;
inline bool handbookhandbook::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void handbookhandbook::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void handbookhandbook::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void handbookhandbook::clear_itemid() {
  itemid_ = GOOGLE_LONGLONG(0);
  clear_has_itemid();
}
inline ::google::protobuf::int64 handbookhandbook::itemid() const {
  return itemid_;
}
inline void handbookhandbook::set_itemid(::google::protobuf::int64 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional string handbookName = 3;
inline bool handbookhandbook::has_handbookname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void handbookhandbook::set_has_handbookname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void handbookhandbook::clear_has_handbookname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void handbookhandbook::clear_handbookname() {
  if (handbookname_ != &::google::protobuf::internal::kEmptyString) {
    handbookname_->clear();
  }
  clear_has_handbookname();
}
inline const ::std::string& handbookhandbook::handbookname() const {
  return *handbookname_;
}
inline void handbookhandbook::set_handbookname(const ::std::string& value) {
  set_has_handbookname();
  if (handbookname_ == &::google::protobuf::internal::kEmptyString) {
    handbookname_ = new ::std::string;
  }
  handbookname_->assign(value);
}
inline void handbookhandbook::set_handbookname(const char* value) {
  set_has_handbookname();
  if (handbookname_ == &::google::protobuf::internal::kEmptyString) {
    handbookname_ = new ::std::string;
  }
  handbookname_->assign(value);
}
inline void handbookhandbook::set_handbookname(const char* value, size_t size) {
  set_has_handbookname();
  if (handbookname_ == &::google::protobuf::internal::kEmptyString) {
    handbookname_ = new ::std::string;
  }
  handbookname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* handbookhandbook::mutable_handbookname() {
  set_has_handbookname();
  if (handbookname_ == &::google::protobuf::internal::kEmptyString) {
    handbookname_ = new ::std::string;
  }
  return handbookname_;
}
inline ::std::string* handbookhandbook::release_handbookname() {
  clear_has_handbookname();
  if (handbookname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = handbookname_;
    handbookname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void handbookhandbook::set_allocated_handbookname(::std::string* handbookname) {
  if (handbookname_ != &::google::protobuf::internal::kEmptyString) {
    delete handbookname_;
  }
  if (handbookname) {
    set_has_handbookname();
    handbookname_ = handbookname;
  } else {
    clear_has_handbookname();
    handbookname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 handbookType = 4;
inline bool handbookhandbook::has_handbooktype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void handbookhandbook::set_has_handbooktype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void handbookhandbook::clear_has_handbooktype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void handbookhandbook::clear_handbooktype() {
  handbooktype_ = 0;
  clear_has_handbooktype();
}
inline ::google::protobuf::int32 handbookhandbook::handbooktype() const {
  return handbooktype_;
}
inline void handbookhandbook::set_handbooktype(::google::protobuf::int32 value) {
  set_has_handbooktype();
  handbooktype_ = value;
}

// optional int32 handbookQuality = 5;
inline bool handbookhandbook::has_handbookquality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void handbookhandbook::set_has_handbookquality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void handbookhandbook::clear_has_handbookquality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void handbookhandbook::clear_handbookquality() {
  handbookquality_ = 0;
  clear_has_handbookquality();
}
inline ::google::protobuf::int32 handbookhandbook::handbookquality() const {
  return handbookquality_;
}
inline void handbookhandbook::set_handbookquality(::google::protobuf::int32 value) {
  set_has_handbookquality();
  handbookquality_ = value;
}

// optional int32 handbookLv = 6;
inline bool handbookhandbook::has_handbooklv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void handbookhandbook::set_has_handbooklv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void handbookhandbook::clear_has_handbooklv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void handbookhandbook::clear_handbooklv() {
  handbooklv_ = 0;
  clear_has_handbooklv();
}
inline ::google::protobuf::int32 handbookhandbook::handbooklv() const {
  return handbooklv_;
}
inline void handbookhandbook::set_handbooklv(::google::protobuf::int32 value) {
  set_has_handbooklv();
  handbooklv_ = value;
}

// optional int32 handZ = 7;
inline bool handbookhandbook::has_handz() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void handbookhandbook::set_has_handz() {
  _has_bits_[0] |= 0x00000040u;
}
inline void handbookhandbook::clear_has_handz() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void handbookhandbook::clear_handz() {
  handz_ = 0;
  clear_has_handz();
}
inline ::google::protobuf::int32 handbookhandbook::handz() const {
  return handz_;
}
inline void handbookhandbook::set_handz(::google::protobuf::int32 value) {
  set_has_handz();
  handz_ = value;
}

// optional int64 starId = 8;
inline bool handbookhandbook::has_starid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void handbookhandbook::set_has_starid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void handbookhandbook::clear_has_starid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void handbookhandbook::clear_starid() {
  starid_ = GOOGLE_LONGLONG(0);
  clear_has_starid();
}
inline ::google::protobuf::int64 handbookhandbook::starid() const {
  return starid_;
}
inline void handbookhandbook::set_starid(::google::protobuf::int64 value) {
  set_has_starid();
  starid_ = value;
}

// optional string starNum = 9;
inline bool handbookhandbook::has_starnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void handbookhandbook::set_has_starnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void handbookhandbook::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void handbookhandbook::clear_starnum() {
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    starnum_->clear();
  }
  clear_has_starnum();
}
inline const ::std::string& handbookhandbook::starnum() const {
  return *starnum_;
}
inline void handbookhandbook::set_starnum(const ::std::string& value) {
  set_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    starnum_ = new ::std::string;
  }
  starnum_->assign(value);
}
inline void handbookhandbook::set_starnum(const char* value) {
  set_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    starnum_ = new ::std::string;
  }
  starnum_->assign(value);
}
inline void handbookhandbook::set_starnum(const char* value, size_t size) {
  set_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    starnum_ = new ::std::string;
  }
  starnum_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* handbookhandbook::mutable_starnum() {
  set_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    starnum_ = new ::std::string;
  }
  return starnum_;
}
inline ::std::string* handbookhandbook::release_starnum() {
  clear_has_starnum();
  if (starnum_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = starnum_;
    starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void handbookhandbook::set_allocated_starnum(::std::string* starnum) {
  if (starnum_ != &::google::protobuf::internal::kEmptyString) {
    delete starnum_;
  }
  if (starnum) {
    set_has_starnum();
    starnum_ = starnum;
  } else {
    clear_has_starnum();
    starnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .proto_ff.handbookhandbookattributeDesc attribute = 10;
inline int handbookhandbook::attribute_size() const {
  return attribute_.size();
}
inline void handbookhandbook::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::handbookhandbookattributeDesc& handbookhandbook::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::handbookhandbookattributeDesc* handbookhandbook::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::handbookhandbookattributeDesc* handbookhandbook::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbookattributeDesc >&
handbookhandbook::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbookattributeDesc >*
handbookhandbook::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_handbookhandbook

// repeated .proto_ff.handbookhandbook handbookhandbook_List = 1;
inline int Sheet_handbookhandbook::handbookhandbook_list_size() const {
  return handbookhandbook_list_.size();
}
inline void Sheet_handbookhandbook::clear_handbookhandbook_list() {
  handbookhandbook_list_.Clear();
}
inline const ::proto_ff::handbookhandbook& Sheet_handbookhandbook::handbookhandbook_list(int index) const {
  return handbookhandbook_list_.Get(index);
}
inline ::proto_ff::handbookhandbook* Sheet_handbookhandbook::mutable_handbookhandbook_list(int index) {
  return handbookhandbook_list_.Mutable(index);
}
inline ::proto_ff::handbookhandbook* Sheet_handbookhandbook::add_handbookhandbook_list() {
  return handbookhandbook_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbook >&
Sheet_handbookhandbook::handbookhandbook_list() const {
  return handbookhandbook_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookhandbook >*
Sheet_handbookhandbook::mutable_handbookhandbook_list() {
  return &handbookhandbook_list_;
}

// -------------------------------------------------------------------

// handbookfateattributeDesc

// optional int32 type = 1;
inline bool handbookfateattributeDesc::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void handbookfateattributeDesc::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void handbookfateattributeDesc::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void handbookfateattributeDesc::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 handbookfateattributeDesc::type() const {
  return type_;
}
inline void handbookfateattributeDesc::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 value = 2;
inline bool handbookfateattributeDesc::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void handbookfateattributeDesc::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void handbookfateattributeDesc::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void handbookfateattributeDesc::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 handbookfateattributeDesc::value() const {
  return value_;
}
inline void handbookfateattributeDesc::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// handbookfate

// optional int64 fateID = 1;
inline bool handbookfate::has_fateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void handbookfate::set_has_fateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void handbookfate::clear_has_fateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void handbookfate::clear_fateid() {
  fateid_ = GOOGLE_LONGLONG(0);
  clear_has_fateid();
}
inline ::google::protobuf::int64 handbookfate::fateid() const {
  return fateid_;
}
inline void handbookfate::set_fateid(::google::protobuf::int64 value) {
  set_has_fateid();
  fateid_ = value;
}

// optional string fateName = 2;
inline bool handbookfate::has_fatename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void handbookfate::set_has_fatename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void handbookfate::clear_has_fatename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void handbookfate::clear_fatename() {
  if (fatename_ != &::google::protobuf::internal::kEmptyString) {
    fatename_->clear();
  }
  clear_has_fatename();
}
inline const ::std::string& handbookfate::fatename() const {
  return *fatename_;
}
inline void handbookfate::set_fatename(const ::std::string& value) {
  set_has_fatename();
  if (fatename_ == &::google::protobuf::internal::kEmptyString) {
    fatename_ = new ::std::string;
  }
  fatename_->assign(value);
}
inline void handbookfate::set_fatename(const char* value) {
  set_has_fatename();
  if (fatename_ == &::google::protobuf::internal::kEmptyString) {
    fatename_ = new ::std::string;
  }
  fatename_->assign(value);
}
inline void handbookfate::set_fatename(const char* value, size_t size) {
  set_has_fatename();
  if (fatename_ == &::google::protobuf::internal::kEmptyString) {
    fatename_ = new ::std::string;
  }
  fatename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* handbookfate::mutable_fatename() {
  set_has_fatename();
  if (fatename_ == &::google::protobuf::internal::kEmptyString) {
    fatename_ = new ::std::string;
  }
  return fatename_;
}
inline ::std::string* handbookfate::release_fatename() {
  clear_has_fatename();
  if (fatename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fatename_;
    fatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void handbookfate::set_allocated_fatename(::std::string* fatename) {
  if (fatename_ != &::google::protobuf::internal::kEmptyString) {
    delete fatename_;
  }
  if (fatename) {
    set_has_fatename();
    fatename_ = fatename;
  } else {
    clear_has_fatename();
    fatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 starLv = 3;
inline bool handbookfate::has_starlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void handbookfate::set_has_starlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void handbookfate::clear_has_starlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void handbookfate::clear_starlv() {
  starlv_ = 0;
  clear_has_starlv();
}
inline ::google::protobuf::int32 handbookfate::starlv() const {
  return starlv_;
}
inline void handbookfate::set_starlv(::google::protobuf::int32 value) {
  set_has_starlv();
  starlv_ = value;
}

// repeated int64 fateHand = 4;
inline int handbookfate::fatehand_size() const {
  return fatehand_.size();
}
inline void handbookfate::clear_fatehand() {
  fatehand_.Clear();
}
inline ::google::protobuf::int64 handbookfate::fatehand(int index) const {
  return fatehand_.Get(index);
}
inline void handbookfate::set_fatehand(int index, ::google::protobuf::int64 value) {
  fatehand_.Set(index, value);
}
inline void handbookfate::add_fatehand(::google::protobuf::int64 value) {
  fatehand_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
handbookfate::fatehand() const {
  return fatehand_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
handbookfate::mutable_fatehand() {
  return &fatehand_;
}

// repeated .proto_ff.handbookfateattributeDesc attribute = 5;
inline int handbookfate::attribute_size() const {
  return attribute_.size();
}
inline void handbookfate::clear_attribute() {
  attribute_.Clear();
}
inline const ::proto_ff::handbookfateattributeDesc& handbookfate::attribute(int index) const {
  return attribute_.Get(index);
}
inline ::proto_ff::handbookfateattributeDesc* handbookfate::mutable_attribute(int index) {
  return attribute_.Mutable(index);
}
inline ::proto_ff::handbookfateattributeDesc* handbookfate::add_attribute() {
  return attribute_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfateattributeDesc >&
handbookfate::attribute() const {
  return attribute_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfateattributeDesc >*
handbookfate::mutable_attribute() {
  return &attribute_;
}

// -------------------------------------------------------------------

// Sheet_handbookfate

// repeated .proto_ff.handbookfate handbookfate_List = 1;
inline int Sheet_handbookfate::handbookfate_list_size() const {
  return handbookfate_list_.size();
}
inline void Sheet_handbookfate::clear_handbookfate_list() {
  handbookfate_list_.Clear();
}
inline const ::proto_ff::handbookfate& Sheet_handbookfate::handbookfate_list(int index) const {
  return handbookfate_list_.Get(index);
}
inline ::proto_ff::handbookfate* Sheet_handbookfate::mutable_handbookfate_list(int index) {
  return handbookfate_list_.Mutable(index);
}
inline ::proto_ff::handbookfate* Sheet_handbookfate::add_handbookfate_list() {
  return handbookfate_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfate >&
Sheet_handbookfate::handbookfate_list() const {
  return handbookfate_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookfate >*
Sheet_handbookfate::mutable_handbookfate_list() {
  return &handbookfate_list_;
}

// -------------------------------------------------------------------

// handbookattr

// optional int64 attID = 1;
inline bool handbookattr::has_attid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void handbookattr::set_has_attid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void handbookattr::clear_has_attid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void handbookattr::clear_attid() {
  attid_ = GOOGLE_LONGLONG(0);
  clear_has_attid();
}
inline ::google::protobuf::int64 handbookattr::attid() const {
  return attid_;
}
inline void handbookattr::set_attid(::google::protobuf::int64 value) {
  set_has_attid();
  attid_ = value;
}

// repeated int32 att = 2;
inline int handbookattr::att_size() const {
  return att_.size();
}
inline void handbookattr::clear_att() {
  att_.Clear();
}
inline ::google::protobuf::int32 handbookattr::att(int index) const {
  return att_.Get(index);
}
inline void handbookattr::set_att(int index, ::google::protobuf::int32 value) {
  att_.Set(index, value);
}
inline void handbookattr::add_att(::google::protobuf::int32 value) {
  att_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
handbookattr::att() const {
  return att_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
handbookattr::mutable_att() {
  return &att_;
}

// -------------------------------------------------------------------

// Sheet_handbookattr

// repeated .proto_ff.handbookattr handbookattr_List = 1;
inline int Sheet_handbookattr::handbookattr_list_size() const {
  return handbookattr_list_.size();
}
inline void Sheet_handbookattr::clear_handbookattr_list() {
  handbookattr_list_.Clear();
}
inline const ::proto_ff::handbookattr& Sheet_handbookattr::handbookattr_list(int index) const {
  return handbookattr_list_.Get(index);
}
inline ::proto_ff::handbookattr* Sheet_handbookattr::mutable_handbookattr_list(int index) {
  return handbookattr_list_.Mutable(index);
}
inline ::proto_ff::handbookattr* Sheet_handbookattr::add_handbookattr_list() {
  return handbookattr_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookattr >&
Sheet_handbookattr::handbookattr_list() const {
  return handbookattr_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::handbookattr >*
Sheet_handbookattr::mutable_handbookattr_list() {
  return &handbookattr_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_handbook_2eproto__INCLUDED
