// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: View.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "View.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto_ff {

namespace {

const ::google::protobuf::Descriptor* CreatureCreateData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureCreateData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureCreateData_Player_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureCreateData_Player_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureCreateData_Monster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureCreateData_Monster_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureCreateData_Drop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureCreateData_Drop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreatureDestoryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreatureDestoryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadChgName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadChgName_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadFactionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadFactionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadCollectInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadCollectInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadKillValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadKillValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadYellowName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadYellowName_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadGodEvilChgFacade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadGodEvilChgFacade_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadShield_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadShield_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadMarryDstName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadMarryDstName_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadTourState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadTourState_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadClanView_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadClanView_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadVipHide_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadVipHide_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_View_2eproto() {
  protobuf_AddDesc_View_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "View.proto");
  GOOGLE_CHECK(file != NULL);
  CreatureCreateData_descriptor_ = file->message_type(0);
  static const int CreatureCreateData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData, players_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData, monsters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData, drops_),
  };
  CreatureCreateData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureCreateData_descriptor_,
      CreatureCreateData::default_instance_,
      CreatureCreateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureCreateData));
  CreatureCreateData_Player_descriptor_ = CreatureCreateData_descriptor_->nested_type(0);
  static const int CreatureCreateData_Player_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, facade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, faction_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, titlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, bufflst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, collect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, collect_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, killvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, is_yellow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, duty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, max_shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, cur_shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, marry_dst_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, tour_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, wpp_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, clan_infos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, vip_hide_),
  };
  CreatureCreateData_Player_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureCreateData_Player_descriptor_,
      CreatureCreateData_Player::default_instance_,
      CreatureCreateData_Player_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Player, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureCreateData_Player));
  CreatureCreateData_Monster_descriptor_ = CreatureCreateData_descriptor_->nested_type(1);
  static const int CreatureCreateData_Monster_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, cfgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, curstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, isnewcreate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, func_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, left_live_sec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, guild_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, guild_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, zid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, ownercid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, ownername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, bufflst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, instid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, max_shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, cur_shield_),
  };
  CreatureCreateData_Monster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureCreateData_Monster_descriptor_,
      CreatureCreateData_Monster::default_instance_,
      CreatureCreateData_Monster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Monster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureCreateData_Monster));
  CreatureCreateData_Drop_descriptor_ = CreatureCreateData_descriptor_->nested_type(2);
  static const int CreatureCreateData_Drop_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, droptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, currency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, init_protect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, pick_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, currency_type_),
  };
  CreatureCreateData_Drop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureCreateData_Drop_descriptor_,
      CreatureCreateData_Drop::default_instance_,
      CreatureCreateData_Drop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureCreateData_Drop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureCreateData_Drop));
  CreatureDestoryData_descriptor_ = file->message_type(1);
  static const int CreatureDestoryData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureDestoryData, cids_),
  };
  CreatureDestoryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreatureDestoryData_descriptor_,
      CreatureDestoryData::default_instance_,
      CreatureDestoryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureDestoryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreatureDestoryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreatureDestoryData));
  BroadChgName_descriptor_ = file->message_type(2);
  static const int BroadChgName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadChgName, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadChgName, name_),
  };
  BroadChgName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadChgName_descriptor_,
      BroadChgName::default_instance_,
      BroadChgName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadChgName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadChgName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadChgName));
  BroadFactionInfo_descriptor_ = file->message_type(3);
  static const int BroadFactionInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadFactionInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadFactionInfo, faction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadFactionInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadFactionInfo, duty_),
  };
  BroadFactionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadFactionInfo_descriptor_,
      BroadFactionInfo::default_instance_,
      BroadFactionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadFactionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadFactionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadFactionInfo));
  BroadCollectInfo_descriptor_ = file->message_type(4);
  static const int BroadCollectInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCollectInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCollectInfo, cancel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCollectInfo, collect_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCollectInfo, collect_pos_),
  };
  BroadCollectInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadCollectInfo_descriptor_,
      BroadCollectInfo::default_instance_,
      BroadCollectInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCollectInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadCollectInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadCollectInfo));
  BroadKillValue_descriptor_ = file->message_type(5);
  static const int BroadKillValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadKillValue, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadKillValue, killvalue_),
  };
  BroadKillValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadKillValue_descriptor_,
      BroadKillValue::default_instance_,
      BroadKillValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadKillValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadKillValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadKillValue));
  BroadYellowName_descriptor_ = file->message_type(6);
  static const int BroadYellowName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadYellowName, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadYellowName, is_yellow_),
  };
  BroadYellowName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadYellowName_descriptor_,
      BroadYellowName::default_instance_,
      BroadYellowName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadYellowName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadYellowName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadYellowName));
  BroadGodEvilChgFacade_descriptor_ = file->message_type(7);
  static const int BroadGodEvilChgFacade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadGodEvilChgFacade, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadGodEvilChgFacade, type_),
  };
  BroadGodEvilChgFacade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadGodEvilChgFacade_descriptor_,
      BroadGodEvilChgFacade::default_instance_,
      BroadGodEvilChgFacade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadGodEvilChgFacade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadGodEvilChgFacade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadGodEvilChgFacade));
  BroadShield_descriptor_ = file->message_type(8);
  static const int BroadShield_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadShield, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadShield, max_shield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadShield, cur_shield_),
  };
  BroadShield_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadShield_descriptor_,
      BroadShield::default_instance_,
      BroadShield_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadShield, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadShield, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadShield));
  BroadMarryDstName_descriptor_ = file->message_type(9);
  static const int BroadMarryDstName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadMarryDstName, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadMarryDstName, marry_dst_name_),
  };
  BroadMarryDstName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadMarryDstName_descriptor_,
      BroadMarryDstName::default_instance_,
      BroadMarryDstName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadMarryDstName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadMarryDstName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadMarryDstName));
  BroadTourState_descriptor_ = file->message_type(10);
  static const int BroadTourState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadTourState, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadTourState, tour_state_),
  };
  BroadTourState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadTourState_descriptor_,
      BroadTourState::default_instance_,
      BroadTourState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadTourState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadTourState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadTourState));
  BroadClanView_descriptor_ = file->message_type(11);
  static const int BroadClanView_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadClanView, info_),
  };
  BroadClanView_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadClanView_descriptor_,
      BroadClanView::default_instance_,
      BroadClanView_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadClanView, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadClanView, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadClanView));
  BroadVipHide_descriptor_ = file->message_type(12);
  static const int BroadVipHide_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadVipHide, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadVipHide, vip_hide_),
  };
  BroadVipHide_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadVipHide_descriptor_,
      BroadVipHide::default_instance_,
      BroadVipHide_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadVipHide, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadVipHide, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadVipHide));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_View_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureCreateData_descriptor_, &CreatureCreateData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureCreateData_Player_descriptor_, &CreatureCreateData_Player::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureCreateData_Monster_descriptor_, &CreatureCreateData_Monster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureCreateData_Drop_descriptor_, &CreatureCreateData_Drop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreatureDestoryData_descriptor_, &CreatureDestoryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadChgName_descriptor_, &BroadChgName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadFactionInfo_descriptor_, &BroadFactionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadCollectInfo_descriptor_, &BroadCollectInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadKillValue_descriptor_, &BroadKillValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadYellowName_descriptor_, &BroadYellowName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadGodEvilChgFacade_descriptor_, &BroadGodEvilChgFacade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadShield_descriptor_, &BroadShield::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadMarryDstName_descriptor_, &BroadMarryDstName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadTourState_descriptor_, &BroadTourState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadClanView_descriptor_, &BroadClanView::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadVipHide_descriptor_, &BroadVipHide::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_View_2eproto() {
  delete CreatureCreateData::default_instance_;
  delete CreatureCreateData_reflection_;
  delete CreatureCreateData_Player::default_instance_;
  delete CreatureCreateData_Player_reflection_;
  delete CreatureCreateData_Monster::default_instance_;
  delete CreatureCreateData_Monster_reflection_;
  delete CreatureCreateData_Drop::default_instance_;
  delete CreatureCreateData_Drop_reflection_;
  delete CreatureDestoryData::default_instance_;
  delete CreatureDestoryData_reflection_;
  delete BroadChgName::default_instance_;
  delete BroadChgName_reflection_;
  delete BroadFactionInfo::default_instance_;
  delete BroadFactionInfo_reflection_;
  delete BroadCollectInfo::default_instance_;
  delete BroadCollectInfo_reflection_;
  delete BroadKillValue::default_instance_;
  delete BroadKillValue_reflection_;
  delete BroadYellowName::default_instance_;
  delete BroadYellowName_reflection_;
  delete BroadGodEvilChgFacade::default_instance_;
  delete BroadGodEvilChgFacade_reflection_;
  delete BroadShield::default_instance_;
  delete BroadShield_reflection_;
  delete BroadMarryDstName::default_instance_;
  delete BroadMarryDstName_reflection_;
  delete BroadTourState::default_instance_;
  delete BroadTourState_reflection_;
  delete BroadClanView::default_instance_;
  delete BroadClanView_reflection_;
  delete BroadVipHide::default_instance_;
  delete BroadVipHide_reflection_;
}

void protobuf_AddDesc_View_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::proto_ff::protobuf_AddDesc_Com_2eproto();
  ::proto_ff::protobuf_AddDesc_ComDefine_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nView.proto\022\010proto_ff\032\tCom.proto\032\017ComDe"
    "fine.proto\"\346\n\n\022CreatureCreateData\0224\n\007pla"
    "yers\030\001 \003(\0132#.proto_ff.CreatureCreateData"
    ".Player\0226\n\010monsters\030\002 \003(\0132$.proto_ff.Cre"
    "atureCreateData.Monster\0220\n\005drops\030\003 \003(\0132!"
    ".proto_ff.CreatureCreateData.Drop\032\267\004\n\006Pl"
    "ayer\022\013\n\003cid\030\001 \002(\004\022\014\n\004name\030\002 \002(\014\022\036\n\004attr\030"
    "\003 \003(\0132\020.proto_ff.Attr64\022 \n\003pos\030\004 \002(\0132\023.p"
    "roto_ff.Vector3PB\022\020\n\010curstate\030\005 \002(\r\022)\n\006f"
    "acade\030\006 \001(\0132\031.proto_ff.RoleFacadeProto\022\024"
    "\n\014faction_name\030\007 \001(\014\022\013\n\003zid\030\010 \001(\r\022\021\n\ttit"
    "leName\030\t \001(\014\022(\n\007bufflst\030\n \001(\0132\027.proto_ff"
    ".BuffListProto\022\014\n\004head\030\013 \001(\005\022\022\n\ncollect_"
    "id\030\014 \001(\004\022(\n\013collect_pos\030\r \001(\0132\023.proto_ff"
    ".Vector3PB\022\021\n\tkillvalue\030\016 \001(\005\022\021\n\tis_yell"
    "ow\030\017 \001(\005\022\014\n\004duty\030\020 \001(\005\022\022\n\nmax_shield\030\021 \001"
    "(\003\022\022\n\ncur_shield\030\022 \001(\003\022\026\n\016marry_dst_name"
    "\030\023 \001(\014\022\022\n\ntour_state\030\024 \001(\005\022%\n\twpp_state\030"
    "\025 \001(\0132\022.proto_ff.WPPState\022&\n\nclan_infos\030"
    "\026 \003(\0132\022.proto_ff.ClanView\022\020\n\010vip_hide\030\027 "
    "\001(\005\032\224\003\n\007Monster\022\013\n\003cid\030\001 \002(\004\022\r\n\005cfgid\030\002 "
    "\002(\004\022\036\n\004attr\030\003 \003(\0132\020.proto_ff.Attr64\022 \n\003p"
    "os\030\004 \002(\0132\023.proto_ff.Vector3PB\022\020\n\010curstat"
    "e\030\005 \002(\r\022\023\n\013isNewCreate\030\006 \001(\010\022\021\n\tfunc_typ"
    "e\030\007 \001(\r\022 \n\003dir\030\010 \002(\0132\023.proto_ff.Vector2P"
    "B\022\025\n\rleft_live_sec\030\t \001(\005\022\020\n\010guild_id\030\n \001"
    "(\003\022\022\n\nguild_name\030\013 \001(\014\022\013\n\003zid\030\014 \001(\r\022\020\n\010o"
    "wnercid\030\r \001(\004\022\021\n\townername\030\016 \001(\014\022(\n\007buff"
    "lst\030\017 \001(\0132\027.proto_ff.BuffListProto\022\016\n\006in"
    "stid\030\020 \001(\005\022\022\n\nmax_shield\030\021 \001(\003\022\022\n\ncur_sh"
    "ield\030\022 \001(\003\032\336\001\n\004Drop\022\013\n\003cid\030\001 \002(\004\022 \n\003pos\030"
    "\002 \002(\0132\023.proto_ff.Vector3PB\022\014\n\004type\030\003 \002(\005"
    "\022\r\n\005value\030\004 \003(\004\022\020\n\010dropTime\030\005 \002(\004\022%\n\004ite"
    "m\030\006 \001(\0132\027.proto_ff.ItemProtoInfo\022\020\n\010curr"
    "ency\030\007 \001(\r\022\024\n\014init_protect\030\010 \001(\r\022\022\n\npick"
    "_level\030\t \001(\005\022\025\n\rcurrency_type\030\n \001(\005\"#\n\023C"
    "reatureDestoryData\022\014\n\004cids\030\001 \003(\004\")\n\014Broa"
    "dChgName\022\013\n\003cid\030\001 \002(\004\022\014\n\004name\030\002 \002(\014\"O\n\020B"
    "roadFactionInfo\022\013\n\003cid\030\001 \002(\004\022\022\n\nfaction_"
    "id\030\002 \002(\r\022\014\n\004name\030\003 \002(\014\022\014\n\004duty\030\004 \002(\005\"m\n\020"
    "BroadCollectInfo\022\013\n\003cid\030\001 \002(\004\022\016\n\006cancel\030"
    "\002 \002(\005\022\022\n\ncollect_id\030\003 \001(\004\022(\n\013collect_pos"
    "\030\004 \001(\0132\023.proto_ff.Vector3PB\"0\n\016BroadKill"
    "Value\022\013\n\003cid\030\001 \002(\004\022\021\n\tkillvalue\030\002 \002(\005\"1\n"
    "\017BroadYellowName\022\013\n\003cid\030\001 \002(\004\022\021\n\tis_yell"
    "ow\030\002 \002(\005\"2\n\025BroadGodEvilChgFacade\022\013\n\003cid"
    "\030\001 \002(\004\022\014\n\004type\030\002 \002(\005\"B\n\013BroadShield\022\013\n\003c"
    "id\030\001 \002(\004\022\022\n\nmax_shield\030\002 \002(\003\022\022\n\ncur_shie"
    "ld\030\003 \002(\003\"8\n\021BroadMarryDstName\022\013\n\003cid\030\001 \002"
    "(\004\022\026\n\016marry_dst_name\030\002 \001(\014\"1\n\016BroadTourS"
    "tate\022\013\n\003cid\030\001 \002(\004\022\022\n\ntour_state\030\002 \001(\005\"1\n"
    "\rBroadClanView\022 \n\004info\030\001 \001(\0132\022.proto_ff."
    "ClanView\"-\n\014BroadVipHide\022\013\n\003cid\030\001 \002(\004\022\020\n"
    "\010vip_hide\030\002 \001(\005", 2135);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "View.proto", &protobuf_RegisterTypes);
  CreatureCreateData::default_instance_ = new CreatureCreateData();
  CreatureCreateData_Player::default_instance_ = new CreatureCreateData_Player();
  CreatureCreateData_Monster::default_instance_ = new CreatureCreateData_Monster();
  CreatureCreateData_Drop::default_instance_ = new CreatureCreateData_Drop();
  CreatureDestoryData::default_instance_ = new CreatureDestoryData();
  BroadChgName::default_instance_ = new BroadChgName();
  BroadFactionInfo::default_instance_ = new BroadFactionInfo();
  BroadCollectInfo::default_instance_ = new BroadCollectInfo();
  BroadKillValue::default_instance_ = new BroadKillValue();
  BroadYellowName::default_instance_ = new BroadYellowName();
  BroadGodEvilChgFacade::default_instance_ = new BroadGodEvilChgFacade();
  BroadShield::default_instance_ = new BroadShield();
  BroadMarryDstName::default_instance_ = new BroadMarryDstName();
  BroadTourState::default_instance_ = new BroadTourState();
  BroadClanView::default_instance_ = new BroadClanView();
  BroadVipHide::default_instance_ = new BroadVipHide();
  CreatureCreateData::default_instance_->InitAsDefaultInstance();
  CreatureCreateData_Player::default_instance_->InitAsDefaultInstance();
  CreatureCreateData_Monster::default_instance_->InitAsDefaultInstance();
  CreatureCreateData_Drop::default_instance_->InitAsDefaultInstance();
  CreatureDestoryData::default_instance_->InitAsDefaultInstance();
  BroadChgName::default_instance_->InitAsDefaultInstance();
  BroadFactionInfo::default_instance_->InitAsDefaultInstance();
  BroadCollectInfo::default_instance_->InitAsDefaultInstance();
  BroadKillValue::default_instance_->InitAsDefaultInstance();
  BroadYellowName::default_instance_->InitAsDefaultInstance();
  BroadGodEvilChgFacade::default_instance_->InitAsDefaultInstance();
  BroadShield::default_instance_->InitAsDefaultInstance();
  BroadMarryDstName::default_instance_->InitAsDefaultInstance();
  BroadTourState::default_instance_->InitAsDefaultInstance();
  BroadClanView::default_instance_->InitAsDefaultInstance();
  BroadVipHide::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_View_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_View_2eproto {
  StaticDescriptorInitializer_View_2eproto() {
    protobuf_AddDesc_View_2eproto();
  }
} static_descriptor_initializer_View_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreatureCreateData_Player::kCidFieldNumber;
const int CreatureCreateData_Player::kNameFieldNumber;
const int CreatureCreateData_Player::kAttrFieldNumber;
const int CreatureCreateData_Player::kPosFieldNumber;
const int CreatureCreateData_Player::kCurstateFieldNumber;
const int CreatureCreateData_Player::kFacadeFieldNumber;
const int CreatureCreateData_Player::kFactionNameFieldNumber;
const int CreatureCreateData_Player::kZidFieldNumber;
const int CreatureCreateData_Player::kTitleNameFieldNumber;
const int CreatureCreateData_Player::kBufflstFieldNumber;
const int CreatureCreateData_Player::kHeadFieldNumber;
const int CreatureCreateData_Player::kCollectIdFieldNumber;
const int CreatureCreateData_Player::kCollectPosFieldNumber;
const int CreatureCreateData_Player::kKillvalueFieldNumber;
const int CreatureCreateData_Player::kIsYellowFieldNumber;
const int CreatureCreateData_Player::kDutyFieldNumber;
const int CreatureCreateData_Player::kMaxShieldFieldNumber;
const int CreatureCreateData_Player::kCurShieldFieldNumber;
const int CreatureCreateData_Player::kMarryDstNameFieldNumber;
const int CreatureCreateData_Player::kTourStateFieldNumber;
const int CreatureCreateData_Player::kWppStateFieldNumber;
const int CreatureCreateData_Player::kClanInfosFieldNumber;
const int CreatureCreateData_Player::kVipHideFieldNumber;
#endif  // !_MSC_VER

CreatureCreateData_Player::CreatureCreateData_Player()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureCreateData_Player::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  facade_ = const_cast< ::proto_ff::RoleFacadeProto*>(&::proto_ff::RoleFacadeProto::default_instance());
  bufflst_ = const_cast< ::proto_ff::BuffListProto*>(&::proto_ff::BuffListProto::default_instance());
  collect_pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  wpp_state_ = const_cast< ::proto_ff::WPPState*>(&::proto_ff::WPPState::default_instance());
}

CreatureCreateData_Player::CreatureCreateData_Player(const CreatureCreateData_Player& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureCreateData_Player::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pos_ = NULL;
  curstate_ = 0u;
  facade_ = NULL;
  faction_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  titlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bufflst_ = NULL;
  head_ = 0;
  collect_id_ = GOOGLE_ULONGLONG(0);
  collect_pos_ = NULL;
  killvalue_ = 0;
  is_yellow_ = 0;
  duty_ = 0;
  max_shield_ = GOOGLE_LONGLONG(0);
  cur_shield_ = GOOGLE_LONGLONG(0);
  marry_dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tour_state_ = 0;
  wpp_state_ = NULL;
  vip_hide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureCreateData_Player::~CreatureCreateData_Player() {
  SharedDtor();
}

void CreatureCreateData_Player::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
    delete faction_name_;
  }
  if (titlename_ != &::google::protobuf::internal::kEmptyString) {
    delete titlename_;
  }
  if (marry_dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete marry_dst_name_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete facade_;
    delete bufflst_;
    delete collect_pos_;
    delete wpp_state_;
  }
}

void CreatureCreateData_Player::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureCreateData_Player::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureCreateData_Player_descriptor_;
}

const CreatureCreateData_Player& CreatureCreateData_Player::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

CreatureCreateData_Player* CreatureCreateData_Player::default_instance_ = NULL;

CreatureCreateData_Player* CreatureCreateData_Player::New() const {
  return new CreatureCreateData_Player;
}

void CreatureCreateData_Player::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    curstate_ = 0u;
    if (has_facade()) {
      if (facade_ != NULL) facade_->::proto_ff::RoleFacadeProto::Clear();
    }
    if (has_faction_name()) {
      if (faction_name_ != &::google::protobuf::internal::kEmptyString) {
        faction_name_->clear();
      }
    }
    zid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_titlename()) {
      if (titlename_ != &::google::protobuf::internal::kEmptyString) {
        titlename_->clear();
      }
    }
    if (has_bufflst()) {
      if (bufflst_ != NULL) bufflst_->::proto_ff::BuffListProto::Clear();
    }
    head_ = 0;
    collect_id_ = GOOGLE_ULONGLONG(0);
    if (has_collect_pos()) {
      if (collect_pos_ != NULL) collect_pos_->::proto_ff::Vector3PB::Clear();
    }
    killvalue_ = 0;
    is_yellow_ = 0;
    duty_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_shield_ = GOOGLE_LONGLONG(0);
    cur_shield_ = GOOGLE_LONGLONG(0);
    if (has_marry_dst_name()) {
      if (marry_dst_name_ != &::google::protobuf::internal::kEmptyString) {
        marry_dst_name_->clear();
      }
    }
    tour_state_ = 0;
    if (has_wpp_state()) {
      if (wpp_state_ != NULL) wpp_state_->::proto_ff::WPPState::Clear();
    }
    vip_hide_ = 0;
  }
  attr_.Clear();
  clan_infos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureCreateData_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.Attr64 attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // required .proto_ff.Vector3PB pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curstate;
        break;
      }

      // required uint32 curstate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_facade;
        break;
      }

      // optional .proto_ff.RoleFacadeProto facade = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facade:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_facade()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_faction_name;
        break;
      }

      // optional bytes faction_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_faction_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_faction_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_titleName;
        break;
      }

      // optional bytes titleName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_titlename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bufflst;
        break;
      }

      // optional .proto_ff.BuffListProto bufflst = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bufflst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bufflst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_head;
        break;
      }

      // optional int32 head = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &head_)));
          set_has_head();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_collect_id;
        break;
      }

      // optional uint64 collect_id = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collect_id_)));
          set_has_collect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_collect_pos;
        break;
      }

      // optional .proto_ff.Vector3PB collect_pos = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collect_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collect_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_killvalue;
        break;
      }

      // optional int32 killvalue = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killvalue_)));
          set_has_killvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_is_yellow;
        break;
      }

      // optional int32 is_yellow = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_yellow_)));
          set_has_is_yellow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_duty;
        break;
      }

      // optional int32 duty = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_max_shield;
        break;
      }

      // optional int64 max_shield = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_shield_)));
          set_has_max_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_cur_shield;
        break;
      }

      // optional int64 cur_shield = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_shield_)));
          set_has_cur_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_marry_dst_name;
        break;
      }

      // optional bytes marry_dst_name = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marry_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marry_dst_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_tour_state;
        break;
      }

      // optional int32 tour_state = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tour_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tour_state_)));
          set_has_tour_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_wpp_state;
        break;
      }

      // optional .proto_ff.WPPState wpp_state = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wpp_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wpp_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_clan_infos;
        break;
      }

      // repeated .proto_ff.ClanView clan_infos = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan_infos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clan_infos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_clan_infos;
        if (input->ExpectTag(184)) goto parse_vip_hide;
        break;
      }

      // optional int32 vip_hide = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_hide_)));
          set_has_vip_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureCreateData_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // repeated .proto_ff.Attr64 attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attr(i), output);
  }

  // required .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // required uint32 curstate = 5;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curstate(), output);
  }

  // optional .proto_ff.RoleFacadeProto facade = 6;
  if (has_facade()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->facade(), output);
  }

  // optional bytes faction_name = 7;
  if (has_faction_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->faction_name(), output);
  }

  // optional uint32 zid = 8;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->zid(), output);
  }

  // optional bytes titleName = 9;
  if (has_titlename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->titlename(), output);
  }

  // optional .proto_ff.BuffListProto bufflst = 10;
  if (has_bufflst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bufflst(), output);
  }

  // optional int32 head = 11;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->head(), output);
  }

  // optional uint64 collect_id = 12;
  if (has_collect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->collect_id(), output);
  }

  // optional .proto_ff.Vector3PB collect_pos = 13;
  if (has_collect_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->collect_pos(), output);
  }

  // optional int32 killvalue = 14;
  if (has_killvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->killvalue(), output);
  }

  // optional int32 is_yellow = 15;
  if (has_is_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->is_yellow(), output);
  }

  // optional int32 duty = 16;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->duty(), output);
  }

  // optional int64 max_shield = 17;
  if (has_max_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->max_shield(), output);
  }

  // optional int64 cur_shield = 18;
  if (has_cur_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->cur_shield(), output);
  }

  // optional bytes marry_dst_name = 19;
  if (has_marry_dst_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      19, this->marry_dst_name(), output);
  }

  // optional int32 tour_state = 20;
  if (has_tour_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->tour_state(), output);
  }

  // optional .proto_ff.WPPState wpp_state = 21;
  if (has_wpp_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->wpp_state(), output);
  }

  // repeated .proto_ff.ClanView clan_infos = 22;
  for (int i = 0; i < this->clan_infos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->clan_infos(i), output);
  }

  // optional int32 vip_hide = 23;
  if (has_vip_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->vip_hide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureCreateData_Player::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // repeated .proto_ff.Attr64 attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attr(i), target);
  }

  // required .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // required uint32 curstate = 5;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curstate(), target);
  }

  // optional .proto_ff.RoleFacadeProto facade = 6;
  if (has_facade()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->facade(), target);
  }

  // optional bytes faction_name = 7;
  if (has_faction_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->faction_name(), target);
  }

  // optional uint32 zid = 8;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->zid(), target);
  }

  // optional bytes titleName = 9;
  if (has_titlename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->titlename(), target);
  }

  // optional .proto_ff.BuffListProto bufflst = 10;
  if (has_bufflst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bufflst(), target);
  }

  // optional int32 head = 11;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->head(), target);
  }

  // optional uint64 collect_id = 12;
  if (has_collect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->collect_id(), target);
  }

  // optional .proto_ff.Vector3PB collect_pos = 13;
  if (has_collect_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->collect_pos(), target);
  }

  // optional int32 killvalue = 14;
  if (has_killvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->killvalue(), target);
  }

  // optional int32 is_yellow = 15;
  if (has_is_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->is_yellow(), target);
  }

  // optional int32 duty = 16;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->duty(), target);
  }

  // optional int64 max_shield = 17;
  if (has_max_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->max_shield(), target);
  }

  // optional int64 cur_shield = 18;
  if (has_cur_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->cur_shield(), target);
  }

  // optional bytes marry_dst_name = 19;
  if (has_marry_dst_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        19, this->marry_dst_name(), target);
  }

  // optional int32 tour_state = 20;
  if (has_tour_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->tour_state(), target);
  }

  // optional .proto_ff.WPPState wpp_state = 21;
  if (has_wpp_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->wpp_state(), target);
  }

  // repeated .proto_ff.ClanView clan_infos = 22;
  for (int i = 0; i < this->clan_infos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->clan_infos(i), target);
  }

  // optional int32 vip_hide = 23;
  if (has_vip_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->vip_hide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureCreateData_Player::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required .proto_ff.Vector3PB pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required uint32 curstate = 5;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

    // optional .proto_ff.RoleFacadeProto facade = 6;
    if (has_facade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->facade());
    }

    // optional bytes faction_name = 7;
    if (has_faction_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->faction_name());
    }

    // optional uint32 zid = 8;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes titleName = 9;
    if (has_titlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->titlename());
    }

    // optional .proto_ff.BuffListProto bufflst = 10;
    if (has_bufflst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bufflst());
    }

    // optional int32 head = 11;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->head());
    }

    // optional uint64 collect_id = 12;
    if (has_collect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collect_id());
    }

    // optional .proto_ff.Vector3PB collect_pos = 13;
    if (has_collect_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collect_pos());
    }

    // optional int32 killvalue = 14;
    if (has_killvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killvalue());
    }

    // optional int32 is_yellow = 15;
    if (has_is_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_yellow());
    }

    // optional int32 duty = 16;
    if (has_duty()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 max_shield = 17;
    if (has_max_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_shield());
    }

    // optional int64 cur_shield = 18;
    if (has_cur_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_shield());
    }

    // optional bytes marry_dst_name = 19;
    if (has_marry_dst_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marry_dst_name());
    }

    // optional int32 tour_state = 20;
    if (has_tour_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tour_state());
    }

    // optional .proto_ff.WPPState wpp_state = 21;
    if (has_wpp_state()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wpp_state());
    }

    // optional int32 vip_hide = 23;
    if (has_vip_hide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_hide());
    }

  }
  // repeated .proto_ff.Attr64 attr = 3;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  // repeated .proto_ff.ClanView clan_infos = 22;
  total_size += 2 * this->clan_infos_size();
  for (int i = 0; i < this->clan_infos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clan_infos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureCreateData_Player::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureCreateData_Player* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureCreateData_Player*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureCreateData_Player::MergeFrom(const CreatureCreateData_Player& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  clan_infos_.MergeFrom(from.clan_infos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_facade()) {
      mutable_facade()->::proto_ff::RoleFacadeProto::MergeFrom(from.facade());
    }
    if (from.has_faction_name()) {
      set_faction_name(from.faction_name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_titlename()) {
      set_titlename(from.titlename());
    }
    if (from.has_bufflst()) {
      mutable_bufflst()->::proto_ff::BuffListProto::MergeFrom(from.bufflst());
    }
    if (from.has_head()) {
      set_head(from.head());
    }
    if (from.has_collect_id()) {
      set_collect_id(from.collect_id());
    }
    if (from.has_collect_pos()) {
      mutable_collect_pos()->::proto_ff::Vector3PB::MergeFrom(from.collect_pos());
    }
    if (from.has_killvalue()) {
      set_killvalue(from.killvalue());
    }
    if (from.has_is_yellow()) {
      set_is_yellow(from.is_yellow());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_shield()) {
      set_max_shield(from.max_shield());
    }
    if (from.has_cur_shield()) {
      set_cur_shield(from.cur_shield());
    }
    if (from.has_marry_dst_name()) {
      set_marry_dst_name(from.marry_dst_name());
    }
    if (from.has_tour_state()) {
      set_tour_state(from.tour_state());
    }
    if (from.has_wpp_state()) {
      mutable_wpp_state()->::proto_ff::WPPState::MergeFrom(from.wpp_state());
    }
    if (from.has_vip_hide()) {
      set_vip_hide(from.vip_hide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureCreateData_Player::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureCreateData_Player::CopyFrom(const CreatureCreateData_Player& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureCreateData_Player::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_facade()) {
    if (!this->facade().IsInitialized()) return false;
  }
  if (has_bufflst()) {
    if (!this->bufflst().IsInitialized()) return false;
  }
  if (has_collect_pos()) {
    if (!this->collect_pos().IsInitialized()) return false;
  }
  if (has_wpp_state()) {
    if (!this->wpp_state().IsInitialized()) return false;
  }
  return true;
}

void CreatureCreateData_Player::Swap(CreatureCreateData_Player* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    attr_.Swap(&other->attr_);
    std::swap(pos_, other->pos_);
    std::swap(curstate_, other->curstate_);
    std::swap(facade_, other->facade_);
    std::swap(faction_name_, other->faction_name_);
    std::swap(zid_, other->zid_);
    std::swap(titlename_, other->titlename_);
    std::swap(bufflst_, other->bufflst_);
    std::swap(head_, other->head_);
    std::swap(collect_id_, other->collect_id_);
    std::swap(collect_pos_, other->collect_pos_);
    std::swap(killvalue_, other->killvalue_);
    std::swap(is_yellow_, other->is_yellow_);
    std::swap(duty_, other->duty_);
    std::swap(max_shield_, other->max_shield_);
    std::swap(cur_shield_, other->cur_shield_);
    std::swap(marry_dst_name_, other->marry_dst_name_);
    std::swap(tour_state_, other->tour_state_);
    std::swap(wpp_state_, other->wpp_state_);
    clan_infos_.Swap(&other->clan_infos_);
    std::swap(vip_hide_, other->vip_hide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureCreateData_Player::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureCreateData_Player_descriptor_;
  metadata.reflection = CreatureCreateData_Player_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreatureCreateData_Monster::kCidFieldNumber;
const int CreatureCreateData_Monster::kCfgidFieldNumber;
const int CreatureCreateData_Monster::kAttrFieldNumber;
const int CreatureCreateData_Monster::kPosFieldNumber;
const int CreatureCreateData_Monster::kCurstateFieldNumber;
const int CreatureCreateData_Monster::kIsNewCreateFieldNumber;
const int CreatureCreateData_Monster::kFuncTypeFieldNumber;
const int CreatureCreateData_Monster::kDirFieldNumber;
const int CreatureCreateData_Monster::kLeftLiveSecFieldNumber;
const int CreatureCreateData_Monster::kGuildIdFieldNumber;
const int CreatureCreateData_Monster::kGuildNameFieldNumber;
const int CreatureCreateData_Monster::kZidFieldNumber;
const int CreatureCreateData_Monster::kOwnercidFieldNumber;
const int CreatureCreateData_Monster::kOwnernameFieldNumber;
const int CreatureCreateData_Monster::kBufflstFieldNumber;
const int CreatureCreateData_Monster::kInstidFieldNumber;
const int CreatureCreateData_Monster::kMaxShieldFieldNumber;
const int CreatureCreateData_Monster::kCurShieldFieldNumber;
#endif  // !_MSC_VER

CreatureCreateData_Monster::CreatureCreateData_Monster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureCreateData_Monster::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  dir_ = const_cast< ::proto_ff::Vector2PB*>(&::proto_ff::Vector2PB::default_instance());
  bufflst_ = const_cast< ::proto_ff::BuffListProto*>(&::proto_ff::BuffListProto::default_instance());
}

CreatureCreateData_Monster::CreatureCreateData_Monster(const CreatureCreateData_Monster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureCreateData_Monster::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  cfgid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  curstate_ = 0u;
  isnewcreate_ = false;
  func_type_ = 0u;
  dir_ = NULL;
  left_live_sec_ = 0;
  guild_id_ = GOOGLE_LONGLONG(0);
  guild_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zid_ = 0u;
  ownercid_ = GOOGLE_ULONGLONG(0);
  ownername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bufflst_ = NULL;
  instid_ = 0;
  max_shield_ = GOOGLE_LONGLONG(0);
  cur_shield_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureCreateData_Monster::~CreatureCreateData_Monster() {
  SharedDtor();
}

void CreatureCreateData_Monster::SharedDtor() {
  if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
    delete guild_name_;
  }
  if (ownername_ != &::google::protobuf::internal::kEmptyString) {
    delete ownername_;
  }
  if (this != default_instance_) {
    delete pos_;
    delete dir_;
    delete bufflst_;
  }
}

void CreatureCreateData_Monster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureCreateData_Monster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureCreateData_Monster_descriptor_;
}

const CreatureCreateData_Monster& CreatureCreateData_Monster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

CreatureCreateData_Monster* CreatureCreateData_Monster::default_instance_ = NULL;

CreatureCreateData_Monster* CreatureCreateData_Monster::New() const {
  return new CreatureCreateData_Monster;
}

void CreatureCreateData_Monster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    cfgid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    curstate_ = 0u;
    isnewcreate_ = false;
    func_type_ = 0u;
    if (has_dir()) {
      if (dir_ != NULL) dir_->::proto_ff::Vector2PB::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    left_live_sec_ = 0;
    guild_id_ = GOOGLE_LONGLONG(0);
    if (has_guild_name()) {
      if (guild_name_ != &::google::protobuf::internal::kEmptyString) {
        guild_name_->clear();
      }
    }
    zid_ = 0u;
    ownercid_ = GOOGLE_ULONGLONG(0);
    if (has_ownername()) {
      if (ownername_ != &::google::protobuf::internal::kEmptyString) {
        ownername_->clear();
      }
    }
    if (has_bufflst()) {
      if (bufflst_ != NULL) bufflst_->::proto_ff::BuffListProto::Clear();
    }
    instid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    max_shield_ = GOOGLE_LONGLONG(0);
    cur_shield_ = GOOGLE_LONGLONG(0);
  }
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureCreateData_Monster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cfgid;
        break;
      }

      // required uint64 cfgid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cfgid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cfgid_)));
          set_has_cfgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        break;
      }

      // repeated .proto_ff.Attr64 attr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_attr;
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // required .proto_ff.Vector3PB pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_curstate;
        break;
      }

      // required uint32 curstate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curstate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isNewCreate;
        break;
      }

      // optional bool isNewCreate = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNewCreate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnewcreate_)));
          set_has_isnewcreate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_func_type;
        break;
      }

      // optional uint32 func_type = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_func_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &func_type_)));
          set_has_func_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_dir;
        break;
      }

      // required .proto_ff.Vector2PB dir = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dir()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_left_live_sec;
        break;
      }

      // optional int32 left_live_sec = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_live_sec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_live_sec_)));
          set_has_left_live_sec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_guild_id;
        break;
      }

      // optional int64 guild_id = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guild_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guild_id_)));
          set_has_guild_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_guild_name;
        break;
      }

      // optional bytes guild_name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guild_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_guild_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_zid;
        break;
      }

      // optional uint32 zid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zid_)));
          set_has_zid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_ownercid;
        break;
      }

      // optional uint64 ownercid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownercid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ownercid_)));
          set_has_ownercid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_ownername;
        break;
      }

      // optional bytes ownername = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ownername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_bufflst;
        break;
      }

      // optional .proto_ff.BuffListProto bufflst = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bufflst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bufflst()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_instid;
        break;
      }

      // optional int32 instid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instid_)));
          set_has_instid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_max_shield;
        break;
      }

      // optional int64 max_shield = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_shield_)));
          set_has_max_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_cur_shield;
        break;
      }

      // optional int64 cur_shield = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_shield_)));
          set_has_cur_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureCreateData_Monster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint64 cfgid = 2;
  if (has_cfgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->cfgid(), output);
  }

  // repeated .proto_ff.Attr64 attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attr(i), output);
  }

  // required .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  // required uint32 curstate = 5;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->curstate(), output);
  }

  // optional bool isNewCreate = 6;
  if (has_isnewcreate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isnewcreate(), output);
  }

  // optional uint32 func_type = 7;
  if (has_func_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->func_type(), output);
  }

  // required .proto_ff.Vector2PB dir = 8;
  if (has_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->dir(), output);
  }

  // optional int32 left_live_sec = 9;
  if (has_left_live_sec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->left_live_sec(), output);
  }

  // optional int64 guild_id = 10;
  if (has_guild_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->guild_id(), output);
  }

  // optional bytes guild_name = 11;
  if (has_guild_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      11, this->guild_name(), output);
  }

  // optional uint32 zid = 12;
  if (has_zid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->zid(), output);
  }

  // optional uint64 ownercid = 13;
  if (has_ownercid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->ownercid(), output);
  }

  // optional bytes ownername = 14;
  if (has_ownername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      14, this->ownername(), output);
  }

  // optional .proto_ff.BuffListProto bufflst = 15;
  if (has_bufflst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->bufflst(), output);
  }

  // optional int32 instid = 16;
  if (has_instid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->instid(), output);
  }

  // optional int64 max_shield = 17;
  if (has_max_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->max_shield(), output);
  }

  // optional int64 cur_shield = 18;
  if (has_cur_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->cur_shield(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureCreateData_Monster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint64 cfgid = 2;
  if (has_cfgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->cfgid(), target);
  }

  // repeated .proto_ff.Attr64 attr = 3;
  for (int i = 0; i < this->attr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attr(i), target);
  }

  // required .proto_ff.Vector3PB pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  // required uint32 curstate = 5;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->curstate(), target);
  }

  // optional bool isNewCreate = 6;
  if (has_isnewcreate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isnewcreate(), target);
  }

  // optional uint32 func_type = 7;
  if (has_func_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->func_type(), target);
  }

  // required .proto_ff.Vector2PB dir = 8;
  if (has_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->dir(), target);
  }

  // optional int32 left_live_sec = 9;
  if (has_left_live_sec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->left_live_sec(), target);
  }

  // optional int64 guild_id = 10;
  if (has_guild_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->guild_id(), target);
  }

  // optional bytes guild_name = 11;
  if (has_guild_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        11, this->guild_name(), target);
  }

  // optional uint32 zid = 12;
  if (has_zid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->zid(), target);
  }

  // optional uint64 ownercid = 13;
  if (has_ownercid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->ownercid(), target);
  }

  // optional bytes ownername = 14;
  if (has_ownername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        14, this->ownername(), target);
  }

  // optional .proto_ff.BuffListProto bufflst = 15;
  if (has_bufflst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->bufflst(), target);
  }

  // optional int32 instid = 16;
  if (has_instid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->instid(), target);
  }

  // optional int64 max_shield = 17;
  if (has_max_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->max_shield(), target);
  }

  // optional int64 cur_shield = 18;
  if (has_cur_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->cur_shield(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureCreateData_Monster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint64 cfgid = 2;
    if (has_cfgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cfgid());
    }

    // required .proto_ff.Vector3PB pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required uint32 curstate = 5;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

    // optional bool isNewCreate = 6;
    if (has_isnewcreate()) {
      total_size += 1 + 1;
    }

    // optional uint32 func_type = 7;
    if (has_func_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->func_type());
    }

    // required .proto_ff.Vector2PB dir = 8;
    if (has_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dir());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 left_live_sec = 9;
    if (has_left_live_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_live_sec());
    }

    // optional int64 guild_id = 10;
    if (has_guild_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guild_id());
    }

    // optional bytes guild_name = 11;
    if (has_guild_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->guild_name());
    }

    // optional uint32 zid = 12;
    if (has_zid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zid());
    }

    // optional uint64 ownercid = 13;
    if (has_ownercid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ownercid());
    }

    // optional bytes ownername = 14;
    if (has_ownername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ownername());
    }

    // optional .proto_ff.BuffListProto bufflst = 15;
    if (has_bufflst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bufflst());
    }

    // optional int32 instid = 16;
    if (has_instid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 max_shield = 17;
    if (has_max_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_shield());
    }

    // optional int64 cur_shield = 18;
    if (has_cur_shield()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_shield());
    }

  }
  // repeated .proto_ff.Attr64 attr = 3;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureCreateData_Monster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureCreateData_Monster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureCreateData_Monster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureCreateData_Monster::MergeFrom(const CreatureCreateData_Monster& from) {
  GOOGLE_CHECK_NE(&from, this);
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_cfgid()) {
      set_cfgid(from.cfgid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
    if (from.has_isnewcreate()) {
      set_isnewcreate(from.isnewcreate());
    }
    if (from.has_func_type()) {
      set_func_type(from.func_type());
    }
    if (from.has_dir()) {
      mutable_dir()->::proto_ff::Vector2PB::MergeFrom(from.dir());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_left_live_sec()) {
      set_left_live_sec(from.left_live_sec());
    }
    if (from.has_guild_id()) {
      set_guild_id(from.guild_id());
    }
    if (from.has_guild_name()) {
      set_guild_name(from.guild_name());
    }
    if (from.has_zid()) {
      set_zid(from.zid());
    }
    if (from.has_ownercid()) {
      set_ownercid(from.ownercid());
    }
    if (from.has_ownername()) {
      set_ownername(from.ownername());
    }
    if (from.has_bufflst()) {
      mutable_bufflst()->::proto_ff::BuffListProto::MergeFrom(from.bufflst());
    }
    if (from.has_instid()) {
      set_instid(from.instid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_max_shield()) {
      set_max_shield(from.max_shield());
    }
    if (from.has_cur_shield()) {
      set_cur_shield(from.cur_shield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureCreateData_Monster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureCreateData_Monster::CopyFrom(const CreatureCreateData_Monster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureCreateData_Monster::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000009b) != 0x0000009b) return false;

  for (int i = 0; i < attr_size(); i++) {
    if (!this->attr(i).IsInitialized()) return false;
  }
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_dir()) {
    if (!this->dir().IsInitialized()) return false;
  }
  if (has_bufflst()) {
    if (!this->bufflst().IsInitialized()) return false;
  }
  return true;
}

void CreatureCreateData_Monster::Swap(CreatureCreateData_Monster* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(cfgid_, other->cfgid_);
    attr_.Swap(&other->attr_);
    std::swap(pos_, other->pos_);
    std::swap(curstate_, other->curstate_);
    std::swap(isnewcreate_, other->isnewcreate_);
    std::swap(func_type_, other->func_type_);
    std::swap(dir_, other->dir_);
    std::swap(left_live_sec_, other->left_live_sec_);
    std::swap(guild_id_, other->guild_id_);
    std::swap(guild_name_, other->guild_name_);
    std::swap(zid_, other->zid_);
    std::swap(ownercid_, other->ownercid_);
    std::swap(ownername_, other->ownername_);
    std::swap(bufflst_, other->bufflst_);
    std::swap(instid_, other->instid_);
    std::swap(max_shield_, other->max_shield_);
    std::swap(cur_shield_, other->cur_shield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureCreateData_Monster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureCreateData_Monster_descriptor_;
  metadata.reflection = CreatureCreateData_Monster_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreatureCreateData_Drop::kCidFieldNumber;
const int CreatureCreateData_Drop::kPosFieldNumber;
const int CreatureCreateData_Drop::kTypeFieldNumber;
const int CreatureCreateData_Drop::kValueFieldNumber;
const int CreatureCreateData_Drop::kDropTimeFieldNumber;
const int CreatureCreateData_Drop::kItemFieldNumber;
const int CreatureCreateData_Drop::kCurrencyFieldNumber;
const int CreatureCreateData_Drop::kInitProtectFieldNumber;
const int CreatureCreateData_Drop::kPickLevelFieldNumber;
const int CreatureCreateData_Drop::kCurrencyTypeFieldNumber;
#endif  // !_MSC_VER

CreatureCreateData_Drop::CreatureCreateData_Drop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureCreateData_Drop::InitAsDefaultInstance() {
  pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
  item_ = const_cast< ::proto_ff::ItemProtoInfo*>(&::proto_ff::ItemProtoInfo::default_instance());
}

CreatureCreateData_Drop::CreatureCreateData_Drop(const CreatureCreateData_Drop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureCreateData_Drop::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  pos_ = NULL;
  type_ = 0;
  droptime_ = GOOGLE_ULONGLONG(0);
  item_ = NULL;
  currency_ = 0u;
  init_protect_ = 0u;
  pick_level_ = 0;
  currency_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureCreateData_Drop::~CreatureCreateData_Drop() {
  SharedDtor();
}

void CreatureCreateData_Drop::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete item_;
  }
}

void CreatureCreateData_Drop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureCreateData_Drop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureCreateData_Drop_descriptor_;
}

const CreatureCreateData_Drop& CreatureCreateData_Drop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

CreatureCreateData_Drop* CreatureCreateData_Drop::default_instance_ = NULL;

CreatureCreateData_Drop* CreatureCreateData_Drop::New() const {
  return new CreatureCreateData_Drop;
}

void CreatureCreateData_Drop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_pos()) {
      if (pos_ != NULL) pos_->::proto_ff::Vector3PB::Clear();
    }
    type_ = 0;
    droptime_ = GOOGLE_ULONGLONG(0);
    if (has_item()) {
      if (item_ != NULL) item_->::proto_ff::ItemProtoInfo::Clear();
    }
    currency_ = 0u;
    init_protect_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pick_level_ = 0;
    currency_type_ = 0;
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureCreateData_Drop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // required .proto_ff.Vector3PB pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        break;
      }

      // repeated uint64 value = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_value;
        if (input->ExpectTag(40)) goto parse_dropTime;
        break;
      }

      // required uint64 dropTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dropTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &droptime_)));
          set_has_droptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_item;
        break;
      }

      // optional .proto_ff.ItemProtoInfo item = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_currency;
        break;
      }

      // optional uint32 currency = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currency_)));
          set_has_currency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_init_protect;
        break;
      }

      // optional uint32 init_protect = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_init_protect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &init_protect_)));
          set_has_init_protect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pick_level;
        break;
      }

      // optional int32 pick_level = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pick_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pick_level_)));
          set_has_pick_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_currency_type;
        break;
      }

      // optional int32 currency_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currency_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_type_)));
          set_has_currency_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureCreateData_Drop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required .proto_ff.Vector3PB pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated uint64 value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->value(i), output);
  }

  // required uint64 dropTime = 5;
  if (has_droptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->droptime(), output);
  }

  // optional .proto_ff.ItemProtoInfo item = 6;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->item(), output);
  }

  // optional uint32 currency = 7;
  if (has_currency()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->currency(), output);
  }

  // optional uint32 init_protect = 8;
  if (has_init_protect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->init_protect(), output);
  }

  // optional int32 pick_level = 9;
  if (has_pick_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->pick_level(), output);
  }

  // optional int32 currency_type = 10;
  if (has_currency_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->currency_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureCreateData_Drop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required .proto_ff.Vector3PB pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // repeated uint64 value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(4, this->value(i), target);
  }

  // required uint64 dropTime = 5;
  if (has_droptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->droptime(), target);
  }

  // optional .proto_ff.ItemProtoInfo item = 6;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->item(), target);
  }

  // optional uint32 currency = 7;
  if (has_currency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->currency(), target);
  }

  // optional uint32 init_protect = 8;
  if (has_init_protect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->init_protect(), target);
  }

  // optional int32 pick_level = 9;
  if (has_pick_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->pick_level(), target);
  }

  // optional int32 currency_type = 10;
  if (has_currency_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->currency_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureCreateData_Drop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required .proto_ff.Vector3PB pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required uint64 dropTime = 5;
    if (has_droptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->droptime());
    }

    // optional .proto_ff.ItemProtoInfo item = 6;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item());
    }

    // optional uint32 currency = 7;
    if (has_currency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currency());
    }

    // optional uint32 init_protect = 8;
    if (has_init_protect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->init_protect());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 pick_level = 9;
    if (has_pick_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pick_level());
    }

    // optional int32 currency_type = 10;
    if (has_currency_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency_type());
    }

  }
  // repeated uint64 value = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureCreateData_Drop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureCreateData_Drop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureCreateData_Drop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureCreateData_Drop::MergeFrom(const CreatureCreateData_Drop& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_pos()) {
      mutable_pos()->::proto_ff::Vector3PB::MergeFrom(from.pos());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_droptime()) {
      set_droptime(from.droptime());
    }
    if (from.has_item()) {
      mutable_item()->::proto_ff::ItemProtoInfo::MergeFrom(from.item());
    }
    if (from.has_currency()) {
      set_currency(from.currency());
    }
    if (from.has_init_protect()) {
      set_init_protect(from.init_protect());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pick_level()) {
      set_pick_level(from.pick_level());
    }
    if (from.has_currency_type()) {
      set_currency_type(from.currency_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureCreateData_Drop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureCreateData_Drop::CopyFrom(const CreatureCreateData_Drop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureCreateData_Drop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_item()) {
    if (!this->item().IsInitialized()) return false;
  }
  return true;
}

void CreatureCreateData_Drop::Swap(CreatureCreateData_Drop* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(pos_, other->pos_);
    std::swap(type_, other->type_);
    value_.Swap(&other->value_);
    std::swap(droptime_, other->droptime_);
    std::swap(item_, other->item_);
    std::swap(currency_, other->currency_);
    std::swap(init_protect_, other->init_protect_);
    std::swap(pick_level_, other->pick_level_);
    std::swap(currency_type_, other->currency_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureCreateData_Drop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureCreateData_Drop_descriptor_;
  metadata.reflection = CreatureCreateData_Drop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CreatureCreateData::kPlayersFieldNumber;
const int CreatureCreateData::kMonstersFieldNumber;
const int CreatureCreateData::kDropsFieldNumber;
#endif  // !_MSC_VER

CreatureCreateData::CreatureCreateData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureCreateData::InitAsDefaultInstance() {
}

CreatureCreateData::CreatureCreateData(const CreatureCreateData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureCreateData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureCreateData::~CreatureCreateData() {
  SharedDtor();
}

void CreatureCreateData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureCreateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureCreateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureCreateData_descriptor_;
}

const CreatureCreateData& CreatureCreateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

CreatureCreateData* CreatureCreateData::default_instance_ = NULL;

CreatureCreateData* CreatureCreateData::New() const {
  return new CreatureCreateData;
}

void CreatureCreateData::Clear() {
  players_.Clear();
  monsters_.Clear();
  drops_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureCreateData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto_ff.CreatureCreateData.Player players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectTag(18)) goto parse_monsters;
        break;
      }

      // repeated .proto_ff.CreatureCreateData.Monster monsters = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monsters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monsters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monsters;
        if (input->ExpectTag(26)) goto parse_drops;
        break;
      }

      // repeated .proto_ff.CreatureCreateData.Drop drops = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_drops:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_drops()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_drops;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureCreateData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto_ff.CreatureCreateData.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  // repeated .proto_ff.CreatureCreateData.Monster monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monsters(i), output);
  }

  // repeated .proto_ff.CreatureCreateData.Drop drops = 3;
  for (int i = 0; i < this->drops_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->drops(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureCreateData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto_ff.CreatureCreateData.Player players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  // repeated .proto_ff.CreatureCreateData.Monster monsters = 2;
  for (int i = 0; i < this->monsters_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monsters(i), target);
  }

  // repeated .proto_ff.CreatureCreateData.Drop drops = 3;
  for (int i = 0; i < this->drops_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->drops(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureCreateData::ByteSize() const {
  int total_size = 0;

  // repeated .proto_ff.CreatureCreateData.Player players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  // repeated .proto_ff.CreatureCreateData.Monster monsters = 2;
  total_size += 1 * this->monsters_size();
  for (int i = 0; i < this->monsters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monsters(i));
  }

  // repeated .proto_ff.CreatureCreateData.Drop drops = 3;
  total_size += 1 * this->drops_size();
  for (int i = 0; i < this->drops_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->drops(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureCreateData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureCreateData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureCreateData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureCreateData::MergeFrom(const CreatureCreateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  monsters_.MergeFrom(from.monsters_);
  drops_.MergeFrom(from.drops_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureCreateData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureCreateData::CopyFrom(const CreatureCreateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureCreateData::IsInitialized() const {

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  for (int i = 0; i < monsters_size(); i++) {
    if (!this->monsters(i).IsInitialized()) return false;
  }
  for (int i = 0; i < drops_size(); i++) {
    if (!this->drops(i).IsInitialized()) return false;
  }
  return true;
}

void CreatureCreateData::Swap(CreatureCreateData* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    monsters_.Swap(&other->monsters_);
    drops_.Swap(&other->drops_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureCreateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureCreateData_descriptor_;
  metadata.reflection = CreatureCreateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreatureDestoryData::kCidsFieldNumber;
#endif  // !_MSC_VER

CreatureDestoryData::CreatureDestoryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreatureDestoryData::InitAsDefaultInstance() {
}

CreatureDestoryData::CreatureDestoryData(const CreatureDestoryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreatureDestoryData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreatureDestoryData::~CreatureDestoryData() {
  SharedDtor();
}

void CreatureDestoryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreatureDestoryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreatureDestoryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreatureDestoryData_descriptor_;
}

const CreatureDestoryData& CreatureDestoryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

CreatureDestoryData* CreatureDestoryData::default_instance_ = NULL;

CreatureDestoryData* CreatureDestoryData::New() const {
  return new CreatureDestoryData;
}

void CreatureDestoryData::Clear() {
  cids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreatureDestoryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 cids = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_cids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_cids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cids;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreatureDestoryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint64 cids = 1;
  for (int i = 0; i < this->cids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->cids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreatureDestoryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint64 cids = 1;
  for (int i = 0; i < this->cids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->cids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreatureDestoryData::ByteSize() const {
  int total_size = 0;

  // repeated uint64 cids = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->cids(i));
    }
    total_size += 1 * this->cids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreatureDestoryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreatureDestoryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreatureDestoryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreatureDestoryData::MergeFrom(const CreatureDestoryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  cids_.MergeFrom(from.cids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreatureDestoryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreatureDestoryData::CopyFrom(const CreatureDestoryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreatureDestoryData::IsInitialized() const {

  return true;
}

void CreatureDestoryData::Swap(CreatureDestoryData* other) {
  if (other != this) {
    cids_.Swap(&other->cids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreatureDestoryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreatureDestoryData_descriptor_;
  metadata.reflection = CreatureDestoryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadChgName::kCidFieldNumber;
const int BroadChgName::kNameFieldNumber;
#endif  // !_MSC_VER

BroadChgName::BroadChgName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadChgName::InitAsDefaultInstance() {
}

BroadChgName::BroadChgName(const BroadChgName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadChgName::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadChgName::~BroadChgName() {
  SharedDtor();
}

void BroadChgName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BroadChgName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadChgName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadChgName_descriptor_;
}

const BroadChgName& BroadChgName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadChgName* BroadChgName::default_instance_ = NULL;

BroadChgName* BroadChgName::New() const {
  return new BroadChgName;
}

void BroadChgName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadChgName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadChgName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadChgName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadChgName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadChgName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadChgName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadChgName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadChgName::MergeFrom(const BroadChgName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadChgName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadChgName::CopyFrom(const BroadChgName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadChgName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BroadChgName::Swap(BroadChgName* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadChgName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadChgName_descriptor_;
  metadata.reflection = BroadChgName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadFactionInfo::kCidFieldNumber;
const int BroadFactionInfo::kFactionIdFieldNumber;
const int BroadFactionInfo::kNameFieldNumber;
const int BroadFactionInfo::kDutyFieldNumber;
#endif  // !_MSC_VER

BroadFactionInfo::BroadFactionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadFactionInfo::InitAsDefaultInstance() {
}

BroadFactionInfo::BroadFactionInfo(const BroadFactionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadFactionInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  faction_id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  duty_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadFactionInfo::~BroadFactionInfo() {
  SharedDtor();
}

void BroadFactionInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BroadFactionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadFactionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadFactionInfo_descriptor_;
}

const BroadFactionInfo& BroadFactionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadFactionInfo* BroadFactionInfo::default_instance_ = NULL;

BroadFactionInfo* BroadFactionInfo::New() const {
  return new BroadFactionInfo;
}

void BroadFactionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    faction_id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    duty_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadFactionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_faction_id;
        break;
      }

      // required uint32 faction_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &faction_id_)));
          set_has_faction_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_duty;
        break;
      }

      // required int32 duty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duty_)));
          set_has_duty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadFactionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required uint32 faction_id = 2;
  if (has_faction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->faction_id(), output);
  }

  // required bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // required int32 duty = 4;
  if (has_duty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->duty(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadFactionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required uint32 faction_id = 2;
  if (has_faction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->faction_id(), target);
  }

  // required bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // required int32 duty = 4;
  if (has_duty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->duty(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadFactionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required uint32 faction_id = 2;
    if (has_faction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->faction_id());
    }

    // required bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // required int32 duty = 4;
    if (has_duty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duty());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadFactionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadFactionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadFactionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadFactionInfo::MergeFrom(const BroadFactionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_faction_id()) {
      set_faction_id(from.faction_id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_duty()) {
      set_duty(from.duty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadFactionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadFactionInfo::CopyFrom(const BroadFactionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadFactionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BroadFactionInfo::Swap(BroadFactionInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(faction_id_, other->faction_id_);
    std::swap(name_, other->name_);
    std::swap(duty_, other->duty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadFactionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadFactionInfo_descriptor_;
  metadata.reflection = BroadFactionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadCollectInfo::kCidFieldNumber;
const int BroadCollectInfo::kCancelFieldNumber;
const int BroadCollectInfo::kCollectIdFieldNumber;
const int BroadCollectInfo::kCollectPosFieldNumber;
#endif  // !_MSC_VER

BroadCollectInfo::BroadCollectInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadCollectInfo::InitAsDefaultInstance() {
  collect_pos_ = const_cast< ::proto_ff::Vector3PB*>(&::proto_ff::Vector3PB::default_instance());
}

BroadCollectInfo::BroadCollectInfo(const BroadCollectInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadCollectInfo::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  cancel_ = 0;
  collect_id_ = GOOGLE_ULONGLONG(0);
  collect_pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadCollectInfo::~BroadCollectInfo() {
  SharedDtor();
}

void BroadCollectInfo::SharedDtor() {
  if (this != default_instance_) {
    delete collect_pos_;
  }
}

void BroadCollectInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadCollectInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadCollectInfo_descriptor_;
}

const BroadCollectInfo& BroadCollectInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadCollectInfo* BroadCollectInfo::default_instance_ = NULL;

BroadCollectInfo* BroadCollectInfo::New() const {
  return new BroadCollectInfo;
}

void BroadCollectInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    cancel_ = 0;
    collect_id_ = GOOGLE_ULONGLONG(0);
    if (has_collect_pos()) {
      if (collect_pos_ != NULL) collect_pos_->::proto_ff::Vector3PB::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadCollectInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cancel;
        break;
      }

      // required int32 cancel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cancel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cancel_)));
          set_has_cancel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_collect_id;
        break;
      }

      // optional uint64 collect_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_collect_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collect_id_)));
          set_has_collect_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_collect_pos;
        break;
      }

      // optional .proto_ff.Vector3PB collect_pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_collect_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collect_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadCollectInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required int32 cancel = 2;
  if (has_cancel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cancel(), output);
  }

  // optional uint64 collect_id = 3;
  if (has_collect_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->collect_id(), output);
  }

  // optional .proto_ff.Vector3PB collect_pos = 4;
  if (has_collect_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->collect_pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadCollectInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required int32 cancel = 2;
  if (has_cancel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cancel(), target);
  }

  // optional uint64 collect_id = 3;
  if (has_collect_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->collect_id(), target);
  }

  // optional .proto_ff.Vector3PB collect_pos = 4;
  if (has_collect_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->collect_pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadCollectInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int32 cancel = 2;
    if (has_cancel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cancel());
    }

    // optional uint64 collect_id = 3;
    if (has_collect_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collect_id());
    }

    // optional .proto_ff.Vector3PB collect_pos = 4;
    if (has_collect_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collect_pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadCollectInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadCollectInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadCollectInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadCollectInfo::MergeFrom(const BroadCollectInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_cancel()) {
      set_cancel(from.cancel());
    }
    if (from.has_collect_id()) {
      set_collect_id(from.collect_id());
    }
    if (from.has_collect_pos()) {
      mutable_collect_pos()->::proto_ff::Vector3PB::MergeFrom(from.collect_pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadCollectInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadCollectInfo::CopyFrom(const BroadCollectInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadCollectInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_collect_pos()) {
    if (!this->collect_pos().IsInitialized()) return false;
  }
  return true;
}

void BroadCollectInfo::Swap(BroadCollectInfo* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(cancel_, other->cancel_);
    std::swap(collect_id_, other->collect_id_);
    std::swap(collect_pos_, other->collect_pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadCollectInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadCollectInfo_descriptor_;
  metadata.reflection = BroadCollectInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadKillValue::kCidFieldNumber;
const int BroadKillValue::kKillvalueFieldNumber;
#endif  // !_MSC_VER

BroadKillValue::BroadKillValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadKillValue::InitAsDefaultInstance() {
}

BroadKillValue::BroadKillValue(const BroadKillValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadKillValue::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  killvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadKillValue::~BroadKillValue() {
  SharedDtor();
}

void BroadKillValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadKillValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadKillValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadKillValue_descriptor_;
}

const BroadKillValue& BroadKillValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadKillValue* BroadKillValue::default_instance_ = NULL;

BroadKillValue* BroadKillValue::New() const {
  return new BroadKillValue;
}

void BroadKillValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    killvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadKillValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killvalue;
        break;
      }

      // required int32 killvalue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killvalue_)));
          set_has_killvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadKillValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required int32 killvalue = 2;
  if (has_killvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killvalue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadKillValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required int32 killvalue = 2;
  if (has_killvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killvalue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadKillValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int32 killvalue = 2;
    if (has_killvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killvalue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadKillValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadKillValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadKillValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadKillValue::MergeFrom(const BroadKillValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_killvalue()) {
      set_killvalue(from.killvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadKillValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadKillValue::CopyFrom(const BroadKillValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadKillValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BroadKillValue::Swap(BroadKillValue* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(killvalue_, other->killvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadKillValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadKillValue_descriptor_;
  metadata.reflection = BroadKillValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadYellowName::kCidFieldNumber;
const int BroadYellowName::kIsYellowFieldNumber;
#endif  // !_MSC_VER

BroadYellowName::BroadYellowName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadYellowName::InitAsDefaultInstance() {
}

BroadYellowName::BroadYellowName(const BroadYellowName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadYellowName::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  is_yellow_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadYellowName::~BroadYellowName() {
  SharedDtor();
}

void BroadYellowName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadYellowName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadYellowName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadYellowName_descriptor_;
}

const BroadYellowName& BroadYellowName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadYellowName* BroadYellowName::default_instance_ = NULL;

BroadYellowName* BroadYellowName::New() const {
  return new BroadYellowName;
}

void BroadYellowName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    is_yellow_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadYellowName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_is_yellow;
        break;
      }

      // required int32 is_yellow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_yellow_)));
          set_has_is_yellow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadYellowName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required int32 is_yellow = 2;
  if (has_is_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->is_yellow(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadYellowName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required int32 is_yellow = 2;
  if (has_is_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->is_yellow(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadYellowName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int32 is_yellow = 2;
    if (has_is_yellow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_yellow());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadYellowName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadYellowName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadYellowName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadYellowName::MergeFrom(const BroadYellowName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_is_yellow()) {
      set_is_yellow(from.is_yellow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadYellowName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadYellowName::CopyFrom(const BroadYellowName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadYellowName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BroadYellowName::Swap(BroadYellowName* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(is_yellow_, other->is_yellow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadYellowName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadYellowName_descriptor_;
  metadata.reflection = BroadYellowName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadGodEvilChgFacade::kCidFieldNumber;
const int BroadGodEvilChgFacade::kTypeFieldNumber;
#endif  // !_MSC_VER

BroadGodEvilChgFacade::BroadGodEvilChgFacade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadGodEvilChgFacade::InitAsDefaultInstance() {
}

BroadGodEvilChgFacade::BroadGodEvilChgFacade(const BroadGodEvilChgFacade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadGodEvilChgFacade::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadGodEvilChgFacade::~BroadGodEvilChgFacade() {
  SharedDtor();
}

void BroadGodEvilChgFacade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadGodEvilChgFacade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadGodEvilChgFacade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadGodEvilChgFacade_descriptor_;
}

const BroadGodEvilChgFacade& BroadGodEvilChgFacade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadGodEvilChgFacade* BroadGodEvilChgFacade::default_instance_ = NULL;

BroadGodEvilChgFacade* BroadGodEvilChgFacade::New() const {
  return new BroadGodEvilChgFacade;
}

void BroadGodEvilChgFacade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadGodEvilChgFacade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadGodEvilChgFacade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadGodEvilChgFacade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadGodEvilChgFacade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadGodEvilChgFacade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadGodEvilChgFacade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadGodEvilChgFacade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadGodEvilChgFacade::MergeFrom(const BroadGodEvilChgFacade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadGodEvilChgFacade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadGodEvilChgFacade::CopyFrom(const BroadGodEvilChgFacade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadGodEvilChgFacade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BroadGodEvilChgFacade::Swap(BroadGodEvilChgFacade* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadGodEvilChgFacade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadGodEvilChgFacade_descriptor_;
  metadata.reflection = BroadGodEvilChgFacade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadShield::kCidFieldNumber;
const int BroadShield::kMaxShieldFieldNumber;
const int BroadShield::kCurShieldFieldNumber;
#endif  // !_MSC_VER

BroadShield::BroadShield()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadShield::InitAsDefaultInstance() {
}

BroadShield::BroadShield(const BroadShield& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadShield::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  max_shield_ = GOOGLE_LONGLONG(0);
  cur_shield_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadShield::~BroadShield() {
  SharedDtor();
}

void BroadShield::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadShield::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadShield::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadShield_descriptor_;
}

const BroadShield& BroadShield::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadShield* BroadShield::default_instance_ = NULL;

BroadShield* BroadShield::New() const {
  return new BroadShield;
}

void BroadShield::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    max_shield_ = GOOGLE_LONGLONG(0);
    cur_shield_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadShield::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_shield;
        break;
      }

      // required int64 max_shield = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &max_shield_)));
          set_has_max_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cur_shield;
        break;
      }

      // required int64 cur_shield = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cur_shield:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_shield_)));
          set_has_cur_shield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadShield::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // required int64 max_shield = 2;
  if (has_max_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->max_shield(), output);
  }

  // required int64 cur_shield = 3;
  if (has_cur_shield()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->cur_shield(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadShield::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // required int64 max_shield = 2;
  if (has_max_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->max_shield(), target);
  }

  // required int64 cur_shield = 3;
  if (has_cur_shield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->cur_shield(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadShield::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // required int64 max_shield = 2;
    if (has_max_shield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->max_shield());
    }

    // required int64 cur_shield = 3;
    if (has_cur_shield()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_shield());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadShield::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadShield* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadShield*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadShield::MergeFrom(const BroadShield& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_max_shield()) {
      set_max_shield(from.max_shield());
    }
    if (from.has_cur_shield()) {
      set_cur_shield(from.cur_shield());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadShield::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadShield::CopyFrom(const BroadShield& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadShield::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BroadShield::Swap(BroadShield* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(max_shield_, other->max_shield_);
    std::swap(cur_shield_, other->cur_shield_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadShield::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadShield_descriptor_;
  metadata.reflection = BroadShield_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadMarryDstName::kCidFieldNumber;
const int BroadMarryDstName::kMarryDstNameFieldNumber;
#endif  // !_MSC_VER

BroadMarryDstName::BroadMarryDstName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadMarryDstName::InitAsDefaultInstance() {
}

BroadMarryDstName::BroadMarryDstName(const BroadMarryDstName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadMarryDstName::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  marry_dst_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadMarryDstName::~BroadMarryDstName() {
  SharedDtor();
}

void BroadMarryDstName::SharedDtor() {
  if (marry_dst_name_ != &::google::protobuf::internal::kEmptyString) {
    delete marry_dst_name_;
  }
  if (this != default_instance_) {
  }
}

void BroadMarryDstName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadMarryDstName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadMarryDstName_descriptor_;
}

const BroadMarryDstName& BroadMarryDstName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadMarryDstName* BroadMarryDstName::default_instance_ = NULL;

BroadMarryDstName* BroadMarryDstName::New() const {
  return new BroadMarryDstName;
}

void BroadMarryDstName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    if (has_marry_dst_name()) {
      if (marry_dst_name_ != &::google::protobuf::internal::kEmptyString) {
        marry_dst_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadMarryDstName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_marry_dst_name;
        break;
      }

      // optional bytes marry_dst_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marry_dst_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marry_dst_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadMarryDstName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional bytes marry_dst_name = 2;
  if (has_marry_dst_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->marry_dst_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadMarryDstName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional bytes marry_dst_name = 2;
  if (has_marry_dst_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->marry_dst_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadMarryDstName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional bytes marry_dst_name = 2;
    if (has_marry_dst_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marry_dst_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadMarryDstName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadMarryDstName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadMarryDstName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadMarryDstName::MergeFrom(const BroadMarryDstName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_marry_dst_name()) {
      set_marry_dst_name(from.marry_dst_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadMarryDstName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadMarryDstName::CopyFrom(const BroadMarryDstName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadMarryDstName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadMarryDstName::Swap(BroadMarryDstName* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(marry_dst_name_, other->marry_dst_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadMarryDstName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadMarryDstName_descriptor_;
  metadata.reflection = BroadMarryDstName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadTourState::kCidFieldNumber;
const int BroadTourState::kTourStateFieldNumber;
#endif  // !_MSC_VER

BroadTourState::BroadTourState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadTourState::InitAsDefaultInstance() {
}

BroadTourState::BroadTourState(const BroadTourState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadTourState::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  tour_state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadTourState::~BroadTourState() {
  SharedDtor();
}

void BroadTourState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadTourState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadTourState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadTourState_descriptor_;
}

const BroadTourState& BroadTourState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadTourState* BroadTourState::default_instance_ = NULL;

BroadTourState* BroadTourState::New() const {
  return new BroadTourState;
}

void BroadTourState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    tour_state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadTourState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tour_state;
        break;
      }

      // optional int32 tour_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tour_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tour_state_)));
          set_has_tour_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadTourState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 tour_state = 2;
  if (has_tour_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tour_state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadTourState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 tour_state = 2;
  if (has_tour_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tour_state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadTourState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 tour_state = 2;
    if (has_tour_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tour_state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadTourState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadTourState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadTourState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadTourState::MergeFrom(const BroadTourState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_tour_state()) {
      set_tour_state(from.tour_state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadTourState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadTourState::CopyFrom(const BroadTourState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadTourState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadTourState::Swap(BroadTourState* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(tour_state_, other->tour_state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadTourState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadTourState_descriptor_;
  metadata.reflection = BroadTourState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadClanView::kInfoFieldNumber;
#endif  // !_MSC_VER

BroadClanView::BroadClanView()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadClanView::InitAsDefaultInstance() {
  info_ = const_cast< ::proto_ff::ClanView*>(&::proto_ff::ClanView::default_instance());
}

BroadClanView::BroadClanView(const BroadClanView& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadClanView::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadClanView::~BroadClanView() {
  SharedDtor();
}

void BroadClanView::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void BroadClanView::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadClanView::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadClanView_descriptor_;
}

const BroadClanView& BroadClanView::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadClanView* BroadClanView::default_instance_ = NULL;

BroadClanView* BroadClanView::New() const {
  return new BroadClanView;
}

void BroadClanView::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::proto_ff::ClanView::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadClanView::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto_ff.ClanView info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadClanView::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .proto_ff.ClanView info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadClanView::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .proto_ff.ClanView info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadClanView::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .proto_ff.ClanView info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadClanView::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadClanView* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadClanView*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadClanView::MergeFrom(const BroadClanView& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::proto_ff::ClanView::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadClanView::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadClanView::CopyFrom(const BroadClanView& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadClanView::IsInitialized() const {

  return true;
}

void BroadClanView::Swap(BroadClanView* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadClanView::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadClanView_descriptor_;
  metadata.reflection = BroadClanView_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadVipHide::kCidFieldNumber;
const int BroadVipHide::kVipHideFieldNumber;
#endif  // !_MSC_VER

BroadVipHide::BroadVipHide()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BroadVipHide::InitAsDefaultInstance() {
}

BroadVipHide::BroadVipHide(const BroadVipHide& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BroadVipHide::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_ULONGLONG(0);
  vip_hide_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadVipHide::~BroadVipHide() {
  SharedDtor();
}

void BroadVipHide::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadVipHide::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadVipHide::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadVipHide_descriptor_;
}

const BroadVipHide& BroadVipHide::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_View_2eproto();
  return *default_instance_;
}

BroadVipHide* BroadVipHide::default_instance_ = NULL;

BroadVipHide* BroadVipHide::New() const {
  return new BroadVipHide;
}

void BroadVipHide::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_ULONGLONG(0);
    vip_hide_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadVipHide::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vip_hide;
        break;
      }

      // optional int32 vip_hide = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip_hide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_hide_)));
          set_has_vip_hide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BroadVipHide::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->cid(), output);
  }

  // optional int32 vip_hide = 2;
  if (has_vip_hide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vip_hide(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BroadVipHide::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->cid(), target);
  }

  // optional int32 vip_hide = 2;
  if (has_vip_hide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vip_hide(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BroadVipHide::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cid());
    }

    // optional int32 vip_hide = 2;
    if (has_vip_hide()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip_hide());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadVipHide::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadVipHide* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadVipHide*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadVipHide::MergeFrom(const BroadVipHide& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_vip_hide()) {
      set_vip_hide(from.vip_hide());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadVipHide::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadVipHide::CopyFrom(const BroadVipHide& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadVipHide::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BroadVipHide::Swap(BroadVipHide* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(vip_hide_, other->vip_hide_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadVipHide::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadVipHide_descriptor_;
  metadata.reflection = BroadVipHide_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

// @@protoc_insertion_point(global_scope)
