// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dup.proto

#ifndef PROTOBUF_dup_2eproto__INCLUDED
#define PROTOBUF_dup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "yd_fieldoptions.pb.h"
// @@protoc_insertion_point(includes)

namespace proto_ff {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_dup_2eproto();
void protobuf_AssignDesc_dup_2eproto();
void protobuf_ShutdownFile_dup_2eproto();

class dupBPlevel;
class Sheet_dupBPlevel;
class dupdup;
class Sheet_dupdup;
class duptowerReward;
class Sheet_duptowerReward;
class dupgroup;
class Sheet_dupgroup;

// ===================================================================

class dupBPlevel : public ::google::protobuf::Message {
 public:
  dupBPlevel();
  virtual ~dupBPlevel();

  dupBPlevel(const dupBPlevel& from);

  inline dupBPlevel& operator=(const dupBPlevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dupBPlevel& default_instance();

  void Swap(dupBPlevel* other);

  // implements Message ----------------------------------------------

  dupBPlevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dupBPlevel& from);
  void MergeFrom(const dupBPlevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 lv = 1;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 1;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // repeated int64 Bgdup = 2;
  inline int bgdup_size() const;
  inline void clear_bgdup();
  static const int kBgdupFieldNumber = 2;
  inline ::google::protobuf::int64 bgdup(int index) const;
  inline void set_bgdup(int index, ::google::protobuf::int64 value);
  inline void add_bgdup(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      bgdup() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_bgdup();

  // @@protoc_insertion_point(class_scope:proto_ff.dupBPlevel)
 private:
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > bgdup_;
  ::google::protobuf::int32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_dup_2eproto();
  friend void protobuf_AssignDesc_dup_2eproto();
  friend void protobuf_ShutdownFile_dup_2eproto();

  void InitAsDefaultInstance();
  static dupBPlevel* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_dupBPlevel : public ::google::protobuf::Message {
 public:
  Sheet_dupBPlevel();
  virtual ~Sheet_dupBPlevel();

  Sheet_dupBPlevel(const Sheet_dupBPlevel& from);

  inline Sheet_dupBPlevel& operator=(const Sheet_dupBPlevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_dupBPlevel& default_instance();

  void Swap(Sheet_dupBPlevel* other);

  // implements Message ----------------------------------------------

  Sheet_dupBPlevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_dupBPlevel& from);
  void MergeFrom(const Sheet_dupBPlevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.dupBPlevel dupBPlevel_List = 1;
  inline int dupbplevel_list_size() const;
  inline void clear_dupbplevel_list();
  static const int kDupBPlevelListFieldNumber = 1;
  inline const ::proto_ff::dupBPlevel& dupbplevel_list(int index) const;
  inline ::proto_ff::dupBPlevel* mutable_dupbplevel_list(int index);
  inline ::proto_ff::dupBPlevel* add_dupbplevel_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dupBPlevel >&
      dupbplevel_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dupBPlevel >*
      mutable_dupbplevel_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_dupBPlevel)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::dupBPlevel > dupbplevel_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dup_2eproto();
  friend void protobuf_AssignDesc_dup_2eproto();
  friend void protobuf_ShutdownFile_dup_2eproto();

  void InitAsDefaultInstance();
  static Sheet_dupBPlevel* default_instance_;
};
// -------------------------------------------------------------------

class dupdup : public ::google::protobuf::Message {
 public:
  dupdup();
  virtual ~dupdup();

  dupdup(const dupdup& from);

  inline dupdup& operator=(const dupdup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dupdup& default_instance();

  void Swap(dupdup* other);

  // implements Message ----------------------------------------------

  dupdup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dupdup& from);
  void MergeFrom(const dupdup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 scripID = 2;
  inline bool has_scripid() const;
  inline void clear_scripid();
  static const int kScripIDFieldNumber = 2;
  inline ::google::protobuf::int32 scripid() const;
  inline void set_scripid(::google::protobuf::int32 value);

  // optional int32 scripType = 3;
  inline bool has_scriptype() const;
  inline void clear_scriptype();
  static const int kScripTypeFieldNumber = 3;
  inline ::google::protobuf::int32 scriptype() const;
  inline void set_scriptype(::google::protobuf::int32 value);

  // optional int32 dupLevel = 4;
  inline bool has_duplevel() const;
  inline void clear_duplevel();
  static const int kDupLevelFieldNumber = 4;
  inline ::google::protobuf::int32 duplevel() const;
  inline void set_duplevel(::google::protobuf::int32 value);

  // optional int32 groupID = 5;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 5;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // optional int32 layer = 6;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 6;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // optional int32 duplicateType = 7;
  inline bool has_duplicatetype() const;
  inline void clear_duplicatetype();
  static const int kDuplicateTypeFieldNumber = 7;
  inline ::google::protobuf::int32 duplicatetype() const;
  inline void set_duplicatetype(::google::protobuf::int32 value);

  // optional int64 mapID = 8;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 8;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // optional int32 levelLimit = 9;
  inline bool has_levellimit() const;
  inline void clear_levellimit();
  static const int kLevelLimitFieldNumber = 9;
  inline ::google::protobuf::int32 levellimit() const;
  inline void set_levellimit(::google::protobuf::int32 value);

  // optional int32 pre = 10;
  inline bool has_pre() const;
  inline void clear_pre();
  static const int kPreFieldNumber = 10;
  inline ::google::protobuf::int32 pre() const;
  inline void set_pre(::google::protobuf::int32 value);

  // optional int32 isAutoFight = 11;
  inline bool has_isautofight() const;
  inline void clear_isautofight();
  static const int kIsAutoFightFieldNumber = 11;
  inline ::google::protobuf::int32 isautofight() const;
  inline void set_isautofight(::google::protobuf::int32 value);

  // optional string condition = 12;
  inline bool has_condition() const;
  inline void clear_condition();
  static const int kConditionFieldNumber = 12;
  inline const ::std::string& condition() const;
  inline void set_condition(const ::std::string& value);
  inline void set_condition(const char* value);
  inline void set_condition(const char* value, size_t size);
  inline ::std::string* mutable_condition();
  inline ::std::string* release_condition();
  inline void set_allocated_condition(::std::string* condition);

  // optional int32 reviveMaxTimes = 13;
  inline bool has_revivemaxtimes() const;
  inline void clear_revivemaxtimes();
  static const int kReviveMaxTimesFieldNumber = 13;
  inline ::google::protobuf::int32 revivemaxtimes() const;
  inline void set_revivemaxtimes(::google::protobuf::int32 value);

  // optional int32 TeamObjectID = 14;
  inline bool has_teamobjectid() const;
  inline void clear_teamobjectid();
  static const int kTeamObjectIDFieldNumber = 14;
  inline ::google::protobuf::int32 teamobjectid() const;
  inline void set_teamobjectid(::google::protobuf::int32 value);

  // optional string gradeCondition = 15;
  inline bool has_gradecondition() const;
  inline void clear_gradecondition();
  static const int kGradeConditionFieldNumber = 15;
  inline const ::std::string& gradecondition() const;
  inline void set_gradecondition(const ::std::string& value);
  inline void set_gradecondition(const char* value);
  inline void set_gradecondition(const char* value, size_t size);
  inline ::std::string* mutable_gradecondition();
  inline ::std::string* release_gradecondition();
  inline void set_allocated_gradecondition(::std::string* gradecondition);

  // optional int64 sweepRewardBoxID = 16;
  inline bool has_sweeprewardboxid() const;
  inline void clear_sweeprewardboxid();
  static const int kSweepRewardBoxIDFieldNumber = 16;
  inline ::google::protobuf::int64 sweeprewardboxid() const;
  inline void set_sweeprewardboxid(::google::protobuf::int64 value);

  // optional int32 sweepRewardExp = 17;
  inline bool has_sweeprewardexp() const;
  inline void clear_sweeprewardexp();
  static const int kSweepRewardExpFieldNumber = 17;
  inline ::google::protobuf::int32 sweeprewardexp() const;
  inline void set_sweeprewardexp(::google::protobuf::int32 value);

  // optional string trackpoint = 18;
  inline bool has_trackpoint() const;
  inline void clear_trackpoint();
  static const int kTrackpointFieldNumber = 18;
  inline const ::std::string& trackpoint() const;
  inline void set_trackpoint(const ::std::string& value);
  inline void set_trackpoint(const char* value);
  inline void set_trackpoint(const char* value, size_t size);
  inline ::std::string* mutable_trackpoint();
  inline ::std::string* release_trackpoint();
  inline void set_allocated_trackpoint(::std::string* trackpoint);

  // optional string pathOfmonster = 19;
  inline bool has_pathofmonster() const;
  inline void clear_pathofmonster();
  static const int kPathOfmonsterFieldNumber = 19;
  inline const ::std::string& pathofmonster() const;
  inline void set_pathofmonster(const ::std::string& value);
  inline void set_pathofmonster(const char* value);
  inline void set_pathofmonster(const char* value, size_t size);
  inline ::std::string* mutable_pathofmonster();
  inline ::std::string* release_pathofmonster();
  inline void set_allocated_pathofmonster(::std::string* pathofmonster);

  // optional int32 isPatrol = 20;
  inline bool has_ispatrol() const;
  inline void clear_ispatrol();
  static const int kIsPatrolFieldNumber = 20;
  inline ::google::protobuf::int32 ispatrol() const;
  inline void set_ispatrol(::google::protobuf::int32 value);

  // optional int32 sweepType = 21;
  inline bool has_sweeptype() const;
  inline void clear_sweeptype();
  static const int kSweepTypeFieldNumber = 21;
  inline ::google::protobuf::int32 sweeptype() const;
  inline void set_sweeptype(::google::protobuf::int32 value);

  // repeated int32 box = 22;
  inline int box_size() const;
  inline void clear_box();
  static const int kBoxFieldNumber = 22;
  inline ::google::protobuf::int32 box(int index) const;
  inline void set_box(int index, ::google::protobuf::int32 value);
  inline void add_box(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      box() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_box();

  // @@protoc_insertion_point(class_scope:proto_ff.dupdup)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_scripid();
  inline void clear_has_scripid();
  inline void set_has_scriptype();
  inline void clear_has_scriptype();
  inline void set_has_duplevel();
  inline void clear_has_duplevel();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_duplicatetype();
  inline void clear_has_duplicatetype();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_levellimit();
  inline void clear_has_levellimit();
  inline void set_has_pre();
  inline void clear_has_pre();
  inline void set_has_isautofight();
  inline void clear_has_isautofight();
  inline void set_has_condition();
  inline void clear_has_condition();
  inline void set_has_revivemaxtimes();
  inline void clear_has_revivemaxtimes();
  inline void set_has_teamobjectid();
  inline void clear_has_teamobjectid();
  inline void set_has_gradecondition();
  inline void clear_has_gradecondition();
  inline void set_has_sweeprewardboxid();
  inline void clear_has_sweeprewardboxid();
  inline void set_has_sweeprewardexp();
  inline void clear_has_sweeprewardexp();
  inline void set_has_trackpoint();
  inline void clear_has_trackpoint();
  inline void set_has_pathofmonster();
  inline void clear_has_pathofmonster();
  inline void set_has_ispatrol();
  inline void clear_has_ispatrol();
  inline void set_has_sweeptype();
  inline void clear_has_sweeptype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 scripid_;
  ::google::protobuf::int32 scriptype_;
  ::google::protobuf::int32 duplevel_;
  ::google::protobuf::int32 groupid_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int32 duplicatetype_;
  ::google::protobuf::int32 levellimit_;
  ::google::protobuf::int32 pre_;
  ::google::protobuf::int32 isautofight_;
  ::std::string* condition_;
  ::google::protobuf::int32 revivemaxtimes_;
  ::google::protobuf::int32 teamobjectid_;
  ::std::string* gradecondition_;
  ::google::protobuf::int64 sweeprewardboxid_;
  ::std::string* trackpoint_;
  ::google::protobuf::int32 sweeprewardexp_;
  ::google::protobuf::int32 ispatrol_;
  ::std::string* pathofmonster_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > box_;
  ::google::protobuf::int32 sweeptype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_dup_2eproto();
  friend void protobuf_AssignDesc_dup_2eproto();
  friend void protobuf_ShutdownFile_dup_2eproto();

  void InitAsDefaultInstance();
  static dupdup* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_dupdup : public ::google::protobuf::Message {
 public:
  Sheet_dupdup();
  virtual ~Sheet_dupdup();

  Sheet_dupdup(const Sheet_dupdup& from);

  inline Sheet_dupdup& operator=(const Sheet_dupdup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_dupdup& default_instance();

  void Swap(Sheet_dupdup* other);

  // implements Message ----------------------------------------------

  Sheet_dupdup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_dupdup& from);
  void MergeFrom(const Sheet_dupdup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.dupdup dupdup_List = 1;
  inline int dupdup_list_size() const;
  inline void clear_dupdup_list();
  static const int kDupdupListFieldNumber = 1;
  inline const ::proto_ff::dupdup& dupdup_list(int index) const;
  inline ::proto_ff::dupdup* mutable_dupdup_list(int index);
  inline ::proto_ff::dupdup* add_dupdup_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dupdup >&
      dupdup_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dupdup >*
      mutable_dupdup_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_dupdup)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::dupdup > dupdup_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dup_2eproto();
  friend void protobuf_AssignDesc_dup_2eproto();
  friend void protobuf_ShutdownFile_dup_2eproto();

  void InitAsDefaultInstance();
  static Sheet_dupdup* default_instance_;
};
// -------------------------------------------------------------------

class duptowerReward : public ::google::protobuf::Message {
 public:
  duptowerReward();
  virtual ~duptowerReward();

  duptowerReward(const duptowerReward& from);

  inline duptowerReward& operator=(const duptowerReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const duptowerReward& default_instance();

  void Swap(duptowerReward* other);

  // implements Message ----------------------------------------------

  duptowerReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const duptowerReward& from);
  void MergeFrom(const duptowerReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 cond = 3;
  inline bool has_cond() const;
  inline void clear_cond();
  static const int kCondFieldNumber = 3;
  inline ::google::protobuf::int32 cond() const;
  inline void set_cond(::google::protobuf::int32 value);

  // optional int32 boxID = 4;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIDFieldNumber = 4;
  inline ::google::protobuf::int32 boxid() const;
  inline void set_boxid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.duptowerReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_cond();
  inline void clear_has_cond();
  inline void set_has_boxid();
  inline void clear_has_boxid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 cond_;
  ::google::protobuf::int32 boxid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_dup_2eproto();
  friend void protobuf_AssignDesc_dup_2eproto();
  friend void protobuf_ShutdownFile_dup_2eproto();

  void InitAsDefaultInstance();
  static duptowerReward* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_duptowerReward : public ::google::protobuf::Message {
 public:
  Sheet_duptowerReward();
  virtual ~Sheet_duptowerReward();

  Sheet_duptowerReward(const Sheet_duptowerReward& from);

  inline Sheet_duptowerReward& operator=(const Sheet_duptowerReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_duptowerReward& default_instance();

  void Swap(Sheet_duptowerReward* other);

  // implements Message ----------------------------------------------

  Sheet_duptowerReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_duptowerReward& from);
  void MergeFrom(const Sheet_duptowerReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.duptowerReward duptowerReward_List = 1;
  inline int duptowerreward_list_size() const;
  inline void clear_duptowerreward_list();
  static const int kDuptowerRewardListFieldNumber = 1;
  inline const ::proto_ff::duptowerReward& duptowerreward_list(int index) const;
  inline ::proto_ff::duptowerReward* mutable_duptowerreward_list(int index);
  inline ::proto_ff::duptowerReward* add_duptowerreward_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duptowerReward >&
      duptowerreward_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duptowerReward >*
      mutable_duptowerreward_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_duptowerReward)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::duptowerReward > duptowerreward_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dup_2eproto();
  friend void protobuf_AssignDesc_dup_2eproto();
  friend void protobuf_ShutdownFile_dup_2eproto();

  void InitAsDefaultInstance();
  static Sheet_duptowerReward* default_instance_;
};
// -------------------------------------------------------------------

class dupgroup : public ::google::protobuf::Message {
 public:
  dupgroup();
  virtual ~dupgroup();

  dupgroup(const dupgroup& from);

  inline dupgroup& operator=(const dupgroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const dupgroup& default_instance();

  void Swap(dupgroup* other);

  // implements Message ----------------------------------------------

  dupgroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const dupgroup& from);
  void MergeFrom(const dupgroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 privilegeType = 3;
  inline bool has_privilegetype() const;
  inline void clear_privilegetype();
  static const int kPrivilegeTypeFieldNumber = 3;
  inline ::google::protobuf::int32 privilegetype() const;
  inline void set_privilegetype(::google::protobuf::int32 value);

  // optional int32 dynamiclevel = 4;
  inline bool has_dynamiclevel() const;
  inline void clear_dynamiclevel();
  static const int kDynamiclevelFieldNumber = 4;
  inline ::google::protobuf::int32 dynamiclevel() const;
  inline void set_dynamiclevel(::google::protobuf::int32 value);

  // optional int32 groupTimesType = 5;
  inline bool has_grouptimestype() const;
  inline void clear_grouptimestype();
  static const int kGroupTimesTypeFieldNumber = 5;
  inline ::google::protobuf::int32 grouptimestype() const;
  inline void set_grouptimestype(::google::protobuf::int32 value);

  // optional int32 groupTimes = 6;
  inline bool has_grouptimes() const;
  inline void clear_grouptimes();
  static const int kGroupTimesFieldNumber = 6;
  inline ::google::protobuf::int32 grouptimes() const;
  inline void set_grouptimes(::google::protobuf::int32 value);

  // optional int32 enterItemID = 7;
  inline bool has_enteritemid() const;
  inline void clear_enteritemid();
  static const int kEnterItemIDFieldNumber = 7;
  inline ::google::protobuf::int32 enteritemid() const;
  inline void set_enteritemid(::google::protobuf::int32 value);

  // optional int32 sweepCondition = 8;
  inline bool has_sweepcondition() const;
  inline void clear_sweepcondition();
  static const int kSweepConditionFieldNumber = 8;
  inline ::google::protobuf::int32 sweepcondition() const;
  inline void set_sweepcondition(::google::protobuf::int32 value);

  // optional int32 mergeCondition = 9;
  inline bool has_mergecondition() const;
  inline void clear_mergecondition();
  static const int kMergeConditionFieldNumber = 9;
  inline ::google::protobuf::int32 mergecondition() const;
  inline void set_mergecondition(::google::protobuf::int32 value);

  // optional int32 addItemID = 10;
  inline bool has_additemid() const;
  inline void clear_additemid();
  static const int kAddItemIDFieldNumber = 10;
  inline ::google::protobuf::int32 additemid() const;
  inline void set_additemid(::google::protobuf::int32 value);

  // optional int32 buyType = 11;
  inline bool has_buytype() const;
  inline void clear_buytype();
  static const int kBuyTypeFieldNumber = 11;
  inline ::google::protobuf::int32 buytype() const;
  inline void set_buytype(::google::protobuf::int32 value);

  // optional int32 buyItemId = 12;
  inline bool has_buyitemid() const;
  inline void clear_buyitemid();
  static const int kBuyItemIdFieldNumber = 12;
  inline ::google::protobuf::int32 buyitemid() const;
  inline void set_buyitemid(::google::protobuf::int32 value);

  // optional string buyCost = 13;
  inline bool has_buycost() const;
  inline void clear_buycost();
  static const int kBuyCostFieldNumber = 13;
  inline const ::std::string& buycost() const;
  inline void set_buycost(const ::std::string& value);
  inline void set_buycost(const char* value);
  inline void set_buycost(const char* value, size_t size);
  inline ::std::string* mutable_buycost();
  inline ::std::string* release_buycost();
  inline void set_allocated_buycost(::std::string* buycost);

  // optional int32 countDown = 14;
  inline bool has_countdown() const;
  inline void clear_countdown();
  static const int kCountDownFieldNumber = 14;
  inline ::google::protobuf::int32 countdown() const;
  inline void set_countdown(::google::protobuf::int32 value);

  // optional int32 endDown = 15;
  inline bool has_enddown() const;
  inline void clear_enddown();
  static const int kEndDownFieldNumber = 15;
  inline ::google::protobuf::int32 enddown() const;
  inline void set_enddown(::google::protobuf::int32 value);

  // optional int32 accountDown = 16;
  inline bool has_accountdown() const;
  inline void clear_accountdown();
  static const int kAccountDownFieldNumber = 16;
  inline ::google::protobuf::int32 accountdown() const;
  inline void set_accountdown(::google::protobuf::int32 value);

  // optional int32 funcionID = 17;
  inline bool has_funcionid() const;
  inline void clear_funcionid();
  static const int kFuncionIDFieldNumber = 17;
  inline ::google::protobuf::int32 funcionid() const;
  inline void set_funcionid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto_ff.dupgroup)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_privilegetype();
  inline void clear_has_privilegetype();
  inline void set_has_dynamiclevel();
  inline void clear_has_dynamiclevel();
  inline void set_has_grouptimestype();
  inline void clear_has_grouptimestype();
  inline void set_has_grouptimes();
  inline void clear_has_grouptimes();
  inline void set_has_enteritemid();
  inline void clear_has_enteritemid();
  inline void set_has_sweepcondition();
  inline void clear_has_sweepcondition();
  inline void set_has_mergecondition();
  inline void clear_has_mergecondition();
  inline void set_has_additemid();
  inline void clear_has_additemid();
  inline void set_has_buytype();
  inline void clear_has_buytype();
  inline void set_has_buyitemid();
  inline void clear_has_buyitemid();
  inline void set_has_buycost();
  inline void clear_has_buycost();
  inline void set_has_countdown();
  inline void clear_has_countdown();
  inline void set_has_enddown();
  inline void clear_has_enddown();
  inline void set_has_accountdown();
  inline void clear_has_accountdown();
  inline void set_has_funcionid();
  inline void clear_has_funcionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 privilegetype_;
  ::google::protobuf::int32 dynamiclevel_;
  ::google::protobuf::int32 grouptimestype_;
  ::google::protobuf::int32 grouptimes_;
  ::google::protobuf::int32 enteritemid_;
  ::google::protobuf::int32 sweepcondition_;
  ::google::protobuf::int32 mergecondition_;
  ::google::protobuf::int32 additemid_;
  ::google::protobuf::int32 buytype_;
  ::std::string* buycost_;
  ::google::protobuf::int32 buyitemid_;
  ::google::protobuf::int32 countdown_;
  ::google::protobuf::int32 enddown_;
  ::google::protobuf::int32 accountdown_;
  ::google::protobuf::int32 funcionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(17 + 31) / 32];

  friend void  protobuf_AddDesc_dup_2eproto();
  friend void protobuf_AssignDesc_dup_2eproto();
  friend void protobuf_ShutdownFile_dup_2eproto();

  void InitAsDefaultInstance();
  static dupgroup* default_instance_;
};
// -------------------------------------------------------------------

class Sheet_dupgroup : public ::google::protobuf::Message {
 public:
  Sheet_dupgroup();
  virtual ~Sheet_dupgroup();

  Sheet_dupgroup(const Sheet_dupgroup& from);

  inline Sheet_dupgroup& operator=(const Sheet_dupgroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sheet_dupgroup& default_instance();

  void Swap(Sheet_dupgroup* other);

  // implements Message ----------------------------------------------

  Sheet_dupgroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sheet_dupgroup& from);
  void MergeFrom(const Sheet_dupgroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto_ff.dupgroup dupgroup_List = 1;
  inline int dupgroup_list_size() const;
  inline void clear_dupgroup_list();
  static const int kDupgroupListFieldNumber = 1;
  inline const ::proto_ff::dupgroup& dupgroup_list(int index) const;
  inline ::proto_ff::dupgroup* mutable_dupgroup_list(int index);
  inline ::proto_ff::dupgroup* add_dupgroup_list();
  inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dupgroup >&
      dupgroup_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dupgroup >*
      mutable_dupgroup_list();

  // @@protoc_insertion_point(class_scope:proto_ff.Sheet_dupgroup)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::proto_ff::dupgroup > dupgroup_list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_dup_2eproto();
  friend void protobuf_AssignDesc_dup_2eproto();
  friend void protobuf_ShutdownFile_dup_2eproto();

  void InitAsDefaultInstance();
  static Sheet_dupgroup* default_instance_;
};
// ===================================================================


// ===================================================================

// dupBPlevel

// optional int32 lv = 1;
inline bool dupBPlevel::has_lv() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dupBPlevel::set_has_lv() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dupBPlevel::clear_has_lv() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dupBPlevel::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 dupBPlevel::lv() const {
  return lv_;
}
inline void dupBPlevel::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// repeated int64 Bgdup = 2;
inline int dupBPlevel::bgdup_size() const {
  return bgdup_.size();
}
inline void dupBPlevel::clear_bgdup() {
  bgdup_.Clear();
}
inline ::google::protobuf::int64 dupBPlevel::bgdup(int index) const {
  return bgdup_.Get(index);
}
inline void dupBPlevel::set_bgdup(int index, ::google::protobuf::int64 value) {
  bgdup_.Set(index, value);
}
inline void dupBPlevel::add_bgdup(::google::protobuf::int64 value) {
  bgdup_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
dupBPlevel::bgdup() const {
  return bgdup_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
dupBPlevel::mutable_bgdup() {
  return &bgdup_;
}

// -------------------------------------------------------------------

// Sheet_dupBPlevel

// repeated .proto_ff.dupBPlevel dupBPlevel_List = 1;
inline int Sheet_dupBPlevel::dupbplevel_list_size() const {
  return dupbplevel_list_.size();
}
inline void Sheet_dupBPlevel::clear_dupbplevel_list() {
  dupbplevel_list_.Clear();
}
inline const ::proto_ff::dupBPlevel& Sheet_dupBPlevel::dupbplevel_list(int index) const {
  return dupbplevel_list_.Get(index);
}
inline ::proto_ff::dupBPlevel* Sheet_dupBPlevel::mutable_dupbplevel_list(int index) {
  return dupbplevel_list_.Mutable(index);
}
inline ::proto_ff::dupBPlevel* Sheet_dupBPlevel::add_dupbplevel_list() {
  return dupbplevel_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dupBPlevel >&
Sheet_dupBPlevel::dupbplevel_list() const {
  return dupbplevel_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dupBPlevel >*
Sheet_dupBPlevel::mutable_dupbplevel_list() {
  return &dupbplevel_list_;
}

// -------------------------------------------------------------------

// dupdup

// optional int32 ID = 1;
inline bool dupdup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dupdup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dupdup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dupdup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 dupdup::id() const {
  return id_;
}
inline void dupdup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 scripID = 2;
inline bool dupdup::has_scripid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dupdup::set_has_scripid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dupdup::clear_has_scripid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dupdup::clear_scripid() {
  scripid_ = 0;
  clear_has_scripid();
}
inline ::google::protobuf::int32 dupdup::scripid() const {
  return scripid_;
}
inline void dupdup::set_scripid(::google::protobuf::int32 value) {
  set_has_scripid();
  scripid_ = value;
}

// optional int32 scripType = 3;
inline bool dupdup::has_scriptype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dupdup::set_has_scriptype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dupdup::clear_has_scriptype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dupdup::clear_scriptype() {
  scriptype_ = 0;
  clear_has_scriptype();
}
inline ::google::protobuf::int32 dupdup::scriptype() const {
  return scriptype_;
}
inline void dupdup::set_scriptype(::google::protobuf::int32 value) {
  set_has_scriptype();
  scriptype_ = value;
}

// optional int32 dupLevel = 4;
inline bool dupdup::has_duplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dupdup::set_has_duplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dupdup::clear_has_duplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dupdup::clear_duplevel() {
  duplevel_ = 0;
  clear_has_duplevel();
}
inline ::google::protobuf::int32 dupdup::duplevel() const {
  return duplevel_;
}
inline void dupdup::set_duplevel(::google::protobuf::int32 value) {
  set_has_duplevel();
  duplevel_ = value;
}

// optional int32 groupID = 5;
inline bool dupdup::has_groupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dupdup::set_has_groupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dupdup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dupdup::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 dupdup::groupid() const {
  return groupid_;
}
inline void dupdup::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional int32 layer = 6;
inline bool dupdup::has_layer() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dupdup::set_has_layer() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dupdup::clear_has_layer() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dupdup::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 dupdup::layer() const {
  return layer_;
}
inline void dupdup::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// optional int32 duplicateType = 7;
inline bool dupdup::has_duplicatetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dupdup::set_has_duplicatetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dupdup::clear_has_duplicatetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dupdup::clear_duplicatetype() {
  duplicatetype_ = 0;
  clear_has_duplicatetype();
}
inline ::google::protobuf::int32 dupdup::duplicatetype() const {
  return duplicatetype_;
}
inline void dupdup::set_duplicatetype(::google::protobuf::int32 value) {
  set_has_duplicatetype();
  duplicatetype_ = value;
}

// optional int64 mapID = 8;
inline bool dupdup::has_mapid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dupdup::set_has_mapid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dupdup::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dupdup::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 dupdup::mapid() const {
  return mapid_;
}
inline void dupdup::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int32 levelLimit = 9;
inline bool dupdup::has_levellimit() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dupdup::set_has_levellimit() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dupdup::clear_has_levellimit() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dupdup::clear_levellimit() {
  levellimit_ = 0;
  clear_has_levellimit();
}
inline ::google::protobuf::int32 dupdup::levellimit() const {
  return levellimit_;
}
inline void dupdup::set_levellimit(::google::protobuf::int32 value) {
  set_has_levellimit();
  levellimit_ = value;
}

// optional int32 pre = 10;
inline bool dupdup::has_pre() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void dupdup::set_has_pre() {
  _has_bits_[0] |= 0x00000200u;
}
inline void dupdup::clear_has_pre() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void dupdup::clear_pre() {
  pre_ = 0;
  clear_has_pre();
}
inline ::google::protobuf::int32 dupdup::pre() const {
  return pre_;
}
inline void dupdup::set_pre(::google::protobuf::int32 value) {
  set_has_pre();
  pre_ = value;
}

// optional int32 isAutoFight = 11;
inline bool dupdup::has_isautofight() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void dupdup::set_has_isautofight() {
  _has_bits_[0] |= 0x00000400u;
}
inline void dupdup::clear_has_isautofight() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void dupdup::clear_isautofight() {
  isautofight_ = 0;
  clear_has_isautofight();
}
inline ::google::protobuf::int32 dupdup::isautofight() const {
  return isautofight_;
}
inline void dupdup::set_isautofight(::google::protobuf::int32 value) {
  set_has_isautofight();
  isautofight_ = value;
}

// optional string condition = 12;
inline bool dupdup::has_condition() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void dupdup::set_has_condition() {
  _has_bits_[0] |= 0x00000800u;
}
inline void dupdup::clear_has_condition() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void dupdup::clear_condition() {
  if (condition_ != &::google::protobuf::internal::kEmptyString) {
    condition_->clear();
  }
  clear_has_condition();
}
inline const ::std::string& dupdup::condition() const {
  return *condition_;
}
inline void dupdup::set_condition(const ::std::string& value) {
  set_has_condition();
  if (condition_ == &::google::protobuf::internal::kEmptyString) {
    condition_ = new ::std::string;
  }
  condition_->assign(value);
}
inline void dupdup::set_condition(const char* value) {
  set_has_condition();
  if (condition_ == &::google::protobuf::internal::kEmptyString) {
    condition_ = new ::std::string;
  }
  condition_->assign(value);
}
inline void dupdup::set_condition(const char* value, size_t size) {
  set_has_condition();
  if (condition_ == &::google::protobuf::internal::kEmptyString) {
    condition_ = new ::std::string;
  }
  condition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dupdup::mutable_condition() {
  set_has_condition();
  if (condition_ == &::google::protobuf::internal::kEmptyString) {
    condition_ = new ::std::string;
  }
  return condition_;
}
inline ::std::string* dupdup::release_condition() {
  clear_has_condition();
  if (condition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = condition_;
    condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dupdup::set_allocated_condition(::std::string* condition) {
  if (condition_ != &::google::protobuf::internal::kEmptyString) {
    delete condition_;
  }
  if (condition) {
    set_has_condition();
    condition_ = condition;
  } else {
    clear_has_condition();
    condition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 reviveMaxTimes = 13;
inline bool dupdup::has_revivemaxtimes() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void dupdup::set_has_revivemaxtimes() {
  _has_bits_[0] |= 0x00001000u;
}
inline void dupdup::clear_has_revivemaxtimes() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void dupdup::clear_revivemaxtimes() {
  revivemaxtimes_ = 0;
  clear_has_revivemaxtimes();
}
inline ::google::protobuf::int32 dupdup::revivemaxtimes() const {
  return revivemaxtimes_;
}
inline void dupdup::set_revivemaxtimes(::google::protobuf::int32 value) {
  set_has_revivemaxtimes();
  revivemaxtimes_ = value;
}

// optional int32 TeamObjectID = 14;
inline bool dupdup::has_teamobjectid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void dupdup::set_has_teamobjectid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void dupdup::clear_has_teamobjectid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void dupdup::clear_teamobjectid() {
  teamobjectid_ = 0;
  clear_has_teamobjectid();
}
inline ::google::protobuf::int32 dupdup::teamobjectid() const {
  return teamobjectid_;
}
inline void dupdup::set_teamobjectid(::google::protobuf::int32 value) {
  set_has_teamobjectid();
  teamobjectid_ = value;
}

// optional string gradeCondition = 15;
inline bool dupdup::has_gradecondition() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void dupdup::set_has_gradecondition() {
  _has_bits_[0] |= 0x00004000u;
}
inline void dupdup::clear_has_gradecondition() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void dupdup::clear_gradecondition() {
  if (gradecondition_ != &::google::protobuf::internal::kEmptyString) {
    gradecondition_->clear();
  }
  clear_has_gradecondition();
}
inline const ::std::string& dupdup::gradecondition() const {
  return *gradecondition_;
}
inline void dupdup::set_gradecondition(const ::std::string& value) {
  set_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    gradecondition_ = new ::std::string;
  }
  gradecondition_->assign(value);
}
inline void dupdup::set_gradecondition(const char* value) {
  set_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    gradecondition_ = new ::std::string;
  }
  gradecondition_->assign(value);
}
inline void dupdup::set_gradecondition(const char* value, size_t size) {
  set_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    gradecondition_ = new ::std::string;
  }
  gradecondition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dupdup::mutable_gradecondition() {
  set_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    gradecondition_ = new ::std::string;
  }
  return gradecondition_;
}
inline ::std::string* dupdup::release_gradecondition() {
  clear_has_gradecondition();
  if (gradecondition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gradecondition_;
    gradecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dupdup::set_allocated_gradecondition(::std::string* gradecondition) {
  if (gradecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete gradecondition_;
  }
  if (gradecondition) {
    set_has_gradecondition();
    gradecondition_ = gradecondition;
  } else {
    clear_has_gradecondition();
    gradecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 sweepRewardBoxID = 16;
inline bool dupdup::has_sweeprewardboxid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void dupdup::set_has_sweeprewardboxid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void dupdup::clear_has_sweeprewardboxid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void dupdup::clear_sweeprewardboxid() {
  sweeprewardboxid_ = GOOGLE_LONGLONG(0);
  clear_has_sweeprewardboxid();
}
inline ::google::protobuf::int64 dupdup::sweeprewardboxid() const {
  return sweeprewardboxid_;
}
inline void dupdup::set_sweeprewardboxid(::google::protobuf::int64 value) {
  set_has_sweeprewardboxid();
  sweeprewardboxid_ = value;
}

// optional int32 sweepRewardExp = 17;
inline bool dupdup::has_sweeprewardexp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void dupdup::set_has_sweeprewardexp() {
  _has_bits_[0] |= 0x00010000u;
}
inline void dupdup::clear_has_sweeprewardexp() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void dupdup::clear_sweeprewardexp() {
  sweeprewardexp_ = 0;
  clear_has_sweeprewardexp();
}
inline ::google::protobuf::int32 dupdup::sweeprewardexp() const {
  return sweeprewardexp_;
}
inline void dupdup::set_sweeprewardexp(::google::protobuf::int32 value) {
  set_has_sweeprewardexp();
  sweeprewardexp_ = value;
}

// optional string trackpoint = 18;
inline bool dupdup::has_trackpoint() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void dupdup::set_has_trackpoint() {
  _has_bits_[0] |= 0x00020000u;
}
inline void dupdup::clear_has_trackpoint() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void dupdup::clear_trackpoint() {
  if (trackpoint_ != &::google::protobuf::internal::kEmptyString) {
    trackpoint_->clear();
  }
  clear_has_trackpoint();
}
inline const ::std::string& dupdup::trackpoint() const {
  return *trackpoint_;
}
inline void dupdup::set_trackpoint(const ::std::string& value) {
  set_has_trackpoint();
  if (trackpoint_ == &::google::protobuf::internal::kEmptyString) {
    trackpoint_ = new ::std::string;
  }
  trackpoint_->assign(value);
}
inline void dupdup::set_trackpoint(const char* value) {
  set_has_trackpoint();
  if (trackpoint_ == &::google::protobuf::internal::kEmptyString) {
    trackpoint_ = new ::std::string;
  }
  trackpoint_->assign(value);
}
inline void dupdup::set_trackpoint(const char* value, size_t size) {
  set_has_trackpoint();
  if (trackpoint_ == &::google::protobuf::internal::kEmptyString) {
    trackpoint_ = new ::std::string;
  }
  trackpoint_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dupdup::mutable_trackpoint() {
  set_has_trackpoint();
  if (trackpoint_ == &::google::protobuf::internal::kEmptyString) {
    trackpoint_ = new ::std::string;
  }
  return trackpoint_;
}
inline ::std::string* dupdup::release_trackpoint() {
  clear_has_trackpoint();
  if (trackpoint_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trackpoint_;
    trackpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dupdup::set_allocated_trackpoint(::std::string* trackpoint) {
  if (trackpoint_ != &::google::protobuf::internal::kEmptyString) {
    delete trackpoint_;
  }
  if (trackpoint) {
    set_has_trackpoint();
    trackpoint_ = trackpoint;
  } else {
    clear_has_trackpoint();
    trackpoint_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pathOfmonster = 19;
inline bool dupdup::has_pathofmonster() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void dupdup::set_has_pathofmonster() {
  _has_bits_[0] |= 0x00040000u;
}
inline void dupdup::clear_has_pathofmonster() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void dupdup::clear_pathofmonster() {
  if (pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
    pathofmonster_->clear();
  }
  clear_has_pathofmonster();
}
inline const ::std::string& dupdup::pathofmonster() const {
  return *pathofmonster_;
}
inline void dupdup::set_pathofmonster(const ::std::string& value) {
  set_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    pathofmonster_ = new ::std::string;
  }
  pathofmonster_->assign(value);
}
inline void dupdup::set_pathofmonster(const char* value) {
  set_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    pathofmonster_ = new ::std::string;
  }
  pathofmonster_->assign(value);
}
inline void dupdup::set_pathofmonster(const char* value, size_t size) {
  set_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    pathofmonster_ = new ::std::string;
  }
  pathofmonster_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dupdup::mutable_pathofmonster() {
  set_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    pathofmonster_ = new ::std::string;
  }
  return pathofmonster_;
}
inline ::std::string* dupdup::release_pathofmonster() {
  clear_has_pathofmonster();
  if (pathofmonster_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pathofmonster_;
    pathofmonster_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dupdup::set_allocated_pathofmonster(::std::string* pathofmonster) {
  if (pathofmonster_ != &::google::protobuf::internal::kEmptyString) {
    delete pathofmonster_;
  }
  if (pathofmonster) {
    set_has_pathofmonster();
    pathofmonster_ = pathofmonster;
  } else {
    clear_has_pathofmonster();
    pathofmonster_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 isPatrol = 20;
inline bool dupdup::has_ispatrol() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void dupdup::set_has_ispatrol() {
  _has_bits_[0] |= 0x00080000u;
}
inline void dupdup::clear_has_ispatrol() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void dupdup::clear_ispatrol() {
  ispatrol_ = 0;
  clear_has_ispatrol();
}
inline ::google::protobuf::int32 dupdup::ispatrol() const {
  return ispatrol_;
}
inline void dupdup::set_ispatrol(::google::protobuf::int32 value) {
  set_has_ispatrol();
  ispatrol_ = value;
}

// optional int32 sweepType = 21;
inline bool dupdup::has_sweeptype() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void dupdup::set_has_sweeptype() {
  _has_bits_[0] |= 0x00100000u;
}
inline void dupdup::clear_has_sweeptype() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void dupdup::clear_sweeptype() {
  sweeptype_ = 0;
  clear_has_sweeptype();
}
inline ::google::protobuf::int32 dupdup::sweeptype() const {
  return sweeptype_;
}
inline void dupdup::set_sweeptype(::google::protobuf::int32 value) {
  set_has_sweeptype();
  sweeptype_ = value;
}

// repeated int32 box = 22;
inline int dupdup::box_size() const {
  return box_.size();
}
inline void dupdup::clear_box() {
  box_.Clear();
}
inline ::google::protobuf::int32 dupdup::box(int index) const {
  return box_.Get(index);
}
inline void dupdup::set_box(int index, ::google::protobuf::int32 value) {
  box_.Set(index, value);
}
inline void dupdup::add_box(::google::protobuf::int32 value) {
  box_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
dupdup::box() const {
  return box_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
dupdup::mutable_box() {
  return &box_;
}

// -------------------------------------------------------------------

// Sheet_dupdup

// repeated .proto_ff.dupdup dupdup_List = 1;
inline int Sheet_dupdup::dupdup_list_size() const {
  return dupdup_list_.size();
}
inline void Sheet_dupdup::clear_dupdup_list() {
  dupdup_list_.Clear();
}
inline const ::proto_ff::dupdup& Sheet_dupdup::dupdup_list(int index) const {
  return dupdup_list_.Get(index);
}
inline ::proto_ff::dupdup* Sheet_dupdup::mutable_dupdup_list(int index) {
  return dupdup_list_.Mutable(index);
}
inline ::proto_ff::dupdup* Sheet_dupdup::add_dupdup_list() {
  return dupdup_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dupdup >&
Sheet_dupdup::dupdup_list() const {
  return dupdup_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dupdup >*
Sheet_dupdup::mutable_dupdup_list() {
  return &dupdup_list_;
}

// -------------------------------------------------------------------

// duptowerReward

// optional int32 id = 1;
inline bool duptowerReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void duptowerReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void duptowerReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void duptowerReward::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 duptowerReward::id() const {
  return id_;
}
inline void duptowerReward::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 type = 2;
inline bool duptowerReward::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void duptowerReward::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void duptowerReward::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void duptowerReward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 duptowerReward::type() const {
  return type_;
}
inline void duptowerReward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 cond = 3;
inline bool duptowerReward::has_cond() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void duptowerReward::set_has_cond() {
  _has_bits_[0] |= 0x00000004u;
}
inline void duptowerReward::clear_has_cond() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void duptowerReward::clear_cond() {
  cond_ = 0;
  clear_has_cond();
}
inline ::google::protobuf::int32 duptowerReward::cond() const {
  return cond_;
}
inline void duptowerReward::set_cond(::google::protobuf::int32 value) {
  set_has_cond();
  cond_ = value;
}

// optional int32 boxID = 4;
inline bool duptowerReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void duptowerReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void duptowerReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void duptowerReward::clear_boxid() {
  boxid_ = 0;
  clear_has_boxid();
}
inline ::google::protobuf::int32 duptowerReward::boxid() const {
  return boxid_;
}
inline void duptowerReward::set_boxid(::google::protobuf::int32 value) {
  set_has_boxid();
  boxid_ = value;
}

// -------------------------------------------------------------------

// Sheet_duptowerReward

// repeated .proto_ff.duptowerReward duptowerReward_List = 1;
inline int Sheet_duptowerReward::duptowerreward_list_size() const {
  return duptowerreward_list_.size();
}
inline void Sheet_duptowerReward::clear_duptowerreward_list() {
  duptowerreward_list_.Clear();
}
inline const ::proto_ff::duptowerReward& Sheet_duptowerReward::duptowerreward_list(int index) const {
  return duptowerreward_list_.Get(index);
}
inline ::proto_ff::duptowerReward* Sheet_duptowerReward::mutable_duptowerreward_list(int index) {
  return duptowerreward_list_.Mutable(index);
}
inline ::proto_ff::duptowerReward* Sheet_duptowerReward::add_duptowerreward_list() {
  return duptowerreward_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::duptowerReward >&
Sheet_duptowerReward::duptowerreward_list() const {
  return duptowerreward_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::duptowerReward >*
Sheet_duptowerReward::mutable_duptowerreward_list() {
  return &duptowerreward_list_;
}

// -------------------------------------------------------------------

// dupgroup

// optional int32 id = 1;
inline bool dupgroup::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void dupgroup::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void dupgroup::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void dupgroup::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 dupgroup::id() const {
  return id_;
}
inline void dupgroup::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional string name = 2;
inline bool dupgroup::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void dupgroup::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void dupgroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void dupgroup::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& dupgroup::name() const {
  return *name_;
}
inline void dupgroup::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void dupgroup::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void dupgroup::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dupgroup::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* dupgroup::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dupgroup::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 privilegeType = 3;
inline bool dupgroup::has_privilegetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void dupgroup::set_has_privilegetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void dupgroup::clear_has_privilegetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void dupgroup::clear_privilegetype() {
  privilegetype_ = 0;
  clear_has_privilegetype();
}
inline ::google::protobuf::int32 dupgroup::privilegetype() const {
  return privilegetype_;
}
inline void dupgroup::set_privilegetype(::google::protobuf::int32 value) {
  set_has_privilegetype();
  privilegetype_ = value;
}

// optional int32 dynamiclevel = 4;
inline bool dupgroup::has_dynamiclevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void dupgroup::set_has_dynamiclevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void dupgroup::clear_has_dynamiclevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void dupgroup::clear_dynamiclevel() {
  dynamiclevel_ = 0;
  clear_has_dynamiclevel();
}
inline ::google::protobuf::int32 dupgroup::dynamiclevel() const {
  return dynamiclevel_;
}
inline void dupgroup::set_dynamiclevel(::google::protobuf::int32 value) {
  set_has_dynamiclevel();
  dynamiclevel_ = value;
}

// optional int32 groupTimesType = 5;
inline bool dupgroup::has_grouptimestype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void dupgroup::set_has_grouptimestype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void dupgroup::clear_has_grouptimestype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void dupgroup::clear_grouptimestype() {
  grouptimestype_ = 0;
  clear_has_grouptimestype();
}
inline ::google::protobuf::int32 dupgroup::grouptimestype() const {
  return grouptimestype_;
}
inline void dupgroup::set_grouptimestype(::google::protobuf::int32 value) {
  set_has_grouptimestype();
  grouptimestype_ = value;
}

// optional int32 groupTimes = 6;
inline bool dupgroup::has_grouptimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void dupgroup::set_has_grouptimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void dupgroup::clear_has_grouptimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void dupgroup::clear_grouptimes() {
  grouptimes_ = 0;
  clear_has_grouptimes();
}
inline ::google::protobuf::int32 dupgroup::grouptimes() const {
  return grouptimes_;
}
inline void dupgroup::set_grouptimes(::google::protobuf::int32 value) {
  set_has_grouptimes();
  grouptimes_ = value;
}

// optional int32 enterItemID = 7;
inline bool dupgroup::has_enteritemid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void dupgroup::set_has_enteritemid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void dupgroup::clear_has_enteritemid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void dupgroup::clear_enteritemid() {
  enteritemid_ = 0;
  clear_has_enteritemid();
}
inline ::google::protobuf::int32 dupgroup::enteritemid() const {
  return enteritemid_;
}
inline void dupgroup::set_enteritemid(::google::protobuf::int32 value) {
  set_has_enteritemid();
  enteritemid_ = value;
}

// optional int32 sweepCondition = 8;
inline bool dupgroup::has_sweepcondition() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void dupgroup::set_has_sweepcondition() {
  _has_bits_[0] |= 0x00000080u;
}
inline void dupgroup::clear_has_sweepcondition() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void dupgroup::clear_sweepcondition() {
  sweepcondition_ = 0;
  clear_has_sweepcondition();
}
inline ::google::protobuf::int32 dupgroup::sweepcondition() const {
  return sweepcondition_;
}
inline void dupgroup::set_sweepcondition(::google::protobuf::int32 value) {
  set_has_sweepcondition();
  sweepcondition_ = value;
}

// optional int32 mergeCondition = 9;
inline bool dupgroup::has_mergecondition() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void dupgroup::set_has_mergecondition() {
  _has_bits_[0] |= 0x00000100u;
}
inline void dupgroup::clear_has_mergecondition() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void dupgroup::clear_mergecondition() {
  mergecondition_ = 0;
  clear_has_mergecondition();
}
inline ::google::protobuf::int32 dupgroup::mergecondition() const {
  return mergecondition_;
}
inline void dupgroup::set_mergecondition(::google::protobuf::int32 value) {
  set_has_mergecondition();
  mergecondition_ = value;
}

// optional int32 addItemID = 10;
inline bool dupgroup::has_additemid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void dupgroup::set_has_additemid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void dupgroup::clear_has_additemid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void dupgroup::clear_additemid() {
  additemid_ = 0;
  clear_has_additemid();
}
inline ::google::protobuf::int32 dupgroup::additemid() const {
  return additemid_;
}
inline void dupgroup::set_additemid(::google::protobuf::int32 value) {
  set_has_additemid();
  additemid_ = value;
}

// optional int32 buyType = 11;
inline bool dupgroup::has_buytype() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void dupgroup::set_has_buytype() {
  _has_bits_[0] |= 0x00000400u;
}
inline void dupgroup::clear_has_buytype() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void dupgroup::clear_buytype() {
  buytype_ = 0;
  clear_has_buytype();
}
inline ::google::protobuf::int32 dupgroup::buytype() const {
  return buytype_;
}
inline void dupgroup::set_buytype(::google::protobuf::int32 value) {
  set_has_buytype();
  buytype_ = value;
}

// optional int32 buyItemId = 12;
inline bool dupgroup::has_buyitemid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void dupgroup::set_has_buyitemid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void dupgroup::clear_has_buyitemid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void dupgroup::clear_buyitemid() {
  buyitemid_ = 0;
  clear_has_buyitemid();
}
inline ::google::protobuf::int32 dupgroup::buyitemid() const {
  return buyitemid_;
}
inline void dupgroup::set_buyitemid(::google::protobuf::int32 value) {
  set_has_buyitemid();
  buyitemid_ = value;
}

// optional string buyCost = 13;
inline bool dupgroup::has_buycost() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void dupgroup::set_has_buycost() {
  _has_bits_[0] |= 0x00001000u;
}
inline void dupgroup::clear_has_buycost() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void dupgroup::clear_buycost() {
  if (buycost_ != &::google::protobuf::internal::kEmptyString) {
    buycost_->clear();
  }
  clear_has_buycost();
}
inline const ::std::string& dupgroup::buycost() const {
  return *buycost_;
}
inline void dupgroup::set_buycost(const ::std::string& value) {
  set_has_buycost();
  if (buycost_ == &::google::protobuf::internal::kEmptyString) {
    buycost_ = new ::std::string;
  }
  buycost_->assign(value);
}
inline void dupgroup::set_buycost(const char* value) {
  set_has_buycost();
  if (buycost_ == &::google::protobuf::internal::kEmptyString) {
    buycost_ = new ::std::string;
  }
  buycost_->assign(value);
}
inline void dupgroup::set_buycost(const char* value, size_t size) {
  set_has_buycost();
  if (buycost_ == &::google::protobuf::internal::kEmptyString) {
    buycost_ = new ::std::string;
  }
  buycost_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* dupgroup::mutable_buycost() {
  set_has_buycost();
  if (buycost_ == &::google::protobuf::internal::kEmptyString) {
    buycost_ = new ::std::string;
  }
  return buycost_;
}
inline ::std::string* dupgroup::release_buycost() {
  clear_has_buycost();
  if (buycost_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = buycost_;
    buycost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void dupgroup::set_allocated_buycost(::std::string* buycost) {
  if (buycost_ != &::google::protobuf::internal::kEmptyString) {
    delete buycost_;
  }
  if (buycost) {
    set_has_buycost();
    buycost_ = buycost;
  } else {
    clear_has_buycost();
    buycost_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 countDown = 14;
inline bool dupgroup::has_countdown() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void dupgroup::set_has_countdown() {
  _has_bits_[0] |= 0x00002000u;
}
inline void dupgroup::clear_has_countdown() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void dupgroup::clear_countdown() {
  countdown_ = 0;
  clear_has_countdown();
}
inline ::google::protobuf::int32 dupgroup::countdown() const {
  return countdown_;
}
inline void dupgroup::set_countdown(::google::protobuf::int32 value) {
  set_has_countdown();
  countdown_ = value;
}

// optional int32 endDown = 15;
inline bool dupgroup::has_enddown() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void dupgroup::set_has_enddown() {
  _has_bits_[0] |= 0x00004000u;
}
inline void dupgroup::clear_has_enddown() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void dupgroup::clear_enddown() {
  enddown_ = 0;
  clear_has_enddown();
}
inline ::google::protobuf::int32 dupgroup::enddown() const {
  return enddown_;
}
inline void dupgroup::set_enddown(::google::protobuf::int32 value) {
  set_has_enddown();
  enddown_ = value;
}

// optional int32 accountDown = 16;
inline bool dupgroup::has_accountdown() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void dupgroup::set_has_accountdown() {
  _has_bits_[0] |= 0x00008000u;
}
inline void dupgroup::clear_has_accountdown() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void dupgroup::clear_accountdown() {
  accountdown_ = 0;
  clear_has_accountdown();
}
inline ::google::protobuf::int32 dupgroup::accountdown() const {
  return accountdown_;
}
inline void dupgroup::set_accountdown(::google::protobuf::int32 value) {
  set_has_accountdown();
  accountdown_ = value;
}

// optional int32 funcionID = 17;
inline bool dupgroup::has_funcionid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void dupgroup::set_has_funcionid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void dupgroup::clear_has_funcionid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void dupgroup::clear_funcionid() {
  funcionid_ = 0;
  clear_has_funcionid();
}
inline ::google::protobuf::int32 dupgroup::funcionid() const {
  return funcionid_;
}
inline void dupgroup::set_funcionid(::google::protobuf::int32 value) {
  set_has_funcionid();
  funcionid_ = value;
}

// -------------------------------------------------------------------

// Sheet_dupgroup

// repeated .proto_ff.dupgroup dupgroup_List = 1;
inline int Sheet_dupgroup::dupgroup_list_size() const {
  return dupgroup_list_.size();
}
inline void Sheet_dupgroup::clear_dupgroup_list() {
  dupgroup_list_.Clear();
}
inline const ::proto_ff::dupgroup& Sheet_dupgroup::dupgroup_list(int index) const {
  return dupgroup_list_.Get(index);
}
inline ::proto_ff::dupgroup* Sheet_dupgroup::mutable_dupgroup_list(int index) {
  return dupgroup_list_.Mutable(index);
}
inline ::proto_ff::dupgroup* Sheet_dupgroup::add_dupgroup_list() {
  return dupgroup_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto_ff::dupgroup >&
Sheet_dupgroup::dupgroup_list() const {
  return dupgroup_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto_ff::dupgroup >*
Sheet_dupgroup::mutable_dupgroup_list() {
  return &dupgroup_list_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_ff

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_dup_2eproto__INCLUDED
